language: jl
name: HumanEval_74_total_match
results:
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    if length(lst1) == length(lst2)\n        return lst1\n    else\n   \
    \     \n        lst3 = lst1\n        \n        for i in 1:length(lst2)\n     \
    \       \n            lst3 = lst3 .+ lst2[i]\n            \n        end\n    \
    \    \n        return lst3\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"\
    hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\"\
    , \"3\", \"4\", \"5\"])\n</cell>\n<text>\nExercise 3\nWrite a function that accepts\
    \ a vector of strings and returns a vector of strings that has \nthe total number\
    \ of chars in the all strings of the vector less than the other vector.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptpjxdz5a.jl:36\nin expression starting at\
    \ /tmp/tmptpjxdz5a.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    if length(lst1) == length(lst2)\n        return lst1\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5hdrzfiz.jl:1\nin expression starting at /tmp/tmp5hdrzfiz.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    if length(lst1) == length(lst2)\n        return lst1\n    else\n   \
    \     \n        lst3 = []\n        for str1 in lst1\n            for str2 in lst2\n\
    \                if str1 < str2\n                    push!(lst3, str1)\n     \
    \           end\n            end\n        end\n        \n        return lst3\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"10\", \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\", \"14\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\", \"\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8nv3k1qh.jl:37\nin expression starting at\
    \ /tmp/tmp8nv3k1qh.jl:37\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    if length(lst1) == length(lst2)\n        return lst1\n    else\n   \
    \     \n        \n        \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"\
    hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\"\
    , \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"\
    ], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"10\", \"11\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"1\"\
    , \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"\
    , \"13\", \"14\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz_qnddm1.jl:29\nin expression starting at\
    \ /tmp/tmpz_qnddm1.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    if length(lst1) == length(lst2)\n        return lst1\n    else\n   \
    \     \n        lst3 = []\n        for str1 in lst1\n            for str2 in lst2\n\
    \                if str1 < str2\n                    push!(lst3, str1)\n     \
    \           end\n            end\n        end\n        \n        return lst3\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"10\", \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\", \"14\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\", \"\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8nv3k1qh.jl:37\nin expression starting at\
    \ /tmp/tmp8nv3k1qh.jl:37\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == length(lst2)\n        return lst1\n    else\n        lst3\
    \ = []\n        for elem in lst1\n            if elem < lst2\n               \
    \ push!(lst3, elem)\n            end\n        end\n        return lst3\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"\
    hI\", \"Hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"\
    hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\"\
    , \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"\
    hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\"\
    , \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"\
    hi\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa2bdu9qi.jl:32\nin expression starting at\
    \ /tmp/tmpa2bdu9qi.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == length(lst2)\n        return lst1\n    else\n        lst3\
    \ = []\n        for str1 in lst1\n            for str2 in lst2\n             \
    \   if str1 < str2\n                    lst3 += str1\n                end\n  \
    \          end\n        end\n        return lst3\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"10\", \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\", \"14\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\", \"14\", \"15\"])\n</cell\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzfo7tekh.jl:34\nin expression starting at\
    \ /tmp/tmpzfo7tekh.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    if length(lst1) == length(lst2)\n        return lst1\n    else\n   \
    \     \n        lst3 = []\n        for elem in lst1\n            if elem < lst2\n\
    \                push!(lst3, elem)\n            end\n        end\n        return\
    \ lst3\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that accepts\
    \ a string and returns the number of chars in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa2jqjy1g.jl:34\nin expression starting at\
    \ /tmp/tmpa2jqjy1g.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    if length(lst1) == length(lst2)\n        return lst1\n    else\n   \
    \     \n        lst3 = []\n        for ele in lst1\n            if ele < lst2\n\
    \                lst3 += ele\n            end\n        end\n        return lst3\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n\
    </cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\"\
    , \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\"\
    ])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"\
    3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\"\
    , \"14\", \"15\", \"16\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi7q2nqeo.jl:34\nin expression starting at\
    \ /tmp/tmpi7q2nqeo.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    if length(lst1) == length(lst2)\n        \n        lst3 = lst1\n   \
    \     \n        for i = 2:length(lst1)\n            if lst1[i] < lst2[i]\n   \
    \             lst3 = lst3 ++ lst2[i-1:end]\n                break\n          \
    \  else\n                lst3 = lst3 ++ lst1[i-1:end]\n            end\n     \
    \   end\n        \n        return lst3\n    else\n        return lst1\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"\
    hI\", \"Hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that accepts a vector of strings and returns a vector of\
    \ strings that has \nthe total number of chars in the all strings of the vector\
    \ less than the other vector.\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfg5abrpo.jl:39\nin expression starting at\
    \ /tmp/tmpfg5abrpo.jl:39\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    if length(lst1) != length(lst2)\n        error(\"Vectors have different\
    \ lengths\")\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t\
    @test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwxye4wia.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwxye4wia.jl:1\n\
    in expression starting at /tmp/tmpwxye4wia.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    if length(lst1) == length(lst2)\n        \n        \n        \n    \
    \    \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_v71i6i0.jl:1\nin expression starting at /tmp/tmp_v71i6i0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    if length(lst1) == length(lst2)\n        return lst1\n    else\n   \
    \     \n        lst3 = []\n        for str1 in lst1\n            for str2 in lst2\n\
    \                if str1 < str2\n                    lst3 += str1\n          \
    \      end\n            end\n        end\n        return lst3\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hI\",\
    \ \"Hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that accepts a vector of strings and returns a vector that\
    \ has total number of chars in the all strings of the vector less than the other\
    \ vector.\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqw6165wt.jl:36\nin expression starting at\
    \ /tmp/tmpqw6165wt.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    if length(lst1) == length(lst2)\n        return lst1\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5hdrzfiz.jl:1\nin expression starting at /tmp/tmp5hdrzfiz.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    lst3 = lst1\n    lst4 = lst2\n    \n    if length(lst1) == length(lst2)\n\
    \        for i = 1:length(lst1)\n            if length(lst1[i]) < length(lst2[i])\n\
    \                lst3 = lst1\n                lst4 = lst2\n                break\n\
    \            end\n        end\n    end\n    \n    return lst3\nend\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n\
    </cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hi\",\
    \ \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t\
    @test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm93hqc5b.jl:36\nin expression starting at\
    \ /tmp/tmpm93hqc5b.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == length(lst2)\n        return lst1\n    else\n        lst3\
    \ = []\n        for str1 in lst1\n            for str2 in lst2\n             \
    \   if str1 < str2\n                    lst3 += str1\n                else\n \
    \                   lst3 += str2\n                end\n            end\n     \
    \   end\n        return lst3\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 4 errored,
    0 broken.

    in expression starting at /tmp/tmpsauy_t9p.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpsauy_t9p.jl:42\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpsauy_t9p.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpsauy_t9p.jl:40\ntest set: Error\
    \ During Test at /tmp/tmpsauy_t9p.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) ==\
    \ [\"hi\", \"admin\"]\n  MethodError: no method matching +(::Vector{Any}, ::String)\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    +(::Array,\
    \ !Matched::Array...) at /shared/centos7/julia/1.7.3/share/julia/base/arraymath.jl:43\n\
    \    +(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1775\n\
    \    ...\n  Stacktrace:\n   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\n\
    \     @ Main /tmp/tmpsauy_t9p.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpsauy_t9p.jl:43 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsauy_t9p.jl:40\ntest set:\
    \ Error During Test at /tmp/tmpsauy_t9p.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]\n  MethodError:\
    \ no method matching +(::Vector{Any}, ::String)\n  Closest candidates are:\n \
    \   +(::Any, ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    +(::Array, !Matched::Array...) at /shared/centos7/julia/1.7.3/share/julia/base/arraymath.jl:43\n\
    \  "
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    if length(lst1) == length(lst2)\n        return lst1\n    else\n   \
    \     \n        lst3 = []\n        for str1 in lst1\n            for str2 in lst2\n\
    \                if str1 < str2\n                    push!(lst3, str1)\n     \
    \           end\n            end\n        end\n        return lst3\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that accepts a string and returns\
    \ the number of characters in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgxs21utm.jl:36\nin expression starting at\
    \ /tmp/tmpgxs21utm.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    if length(lst1) == length(lst2)\n        return lst1\n    else\n   \
    \     \n        lst3 = []\n        for str1 in lst1\n            for str2 in lst2\n\
    \                if str1 < str2\n                    lst3 += str1\n          \
    \      end\n            end\n        end\n        return lst3\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hI\",\
    \ \"Hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"10\", \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\", \"14\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\", \"14\", \"15\nusing Test\n\n@testset begin\n\ncandidate\
    \ = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([])) ==\
    \ Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1r3r720d.jl:36\nin expression starting at\
    \ /tmp/tmp1r3r720d.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    if length(lst1) == length(lst2)\n        return lst1\n    else\n   \
    \     \n        lst3 = []\n        for elem in lst1\n            if elem < lst2\n\
    \                push!(lst3, elem)\n            end\n        end\n        return\
    \ lst3\n    end\nend\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"\
    hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\"\
    , \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"\
    hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\"\
    , \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hI\nusing Test\n\
    \n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4_4qqr9w.jl:34\nin expression starting at\
    \ /tmp/tmp4_4qqr9w.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == length(lst2)\n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwwzmq_db.jl:1\nin expression starting at /tmp/tmpwwzmq_db.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == length(lst2)\n        return lst1\n    else\n        lst3\
    \ = []\n        for elem in lst1\n            push!(lst3, elem)\n        end\n\
    \        for elem in lst2\n            push!(lst3, elem)\n        end\n      \
    \  return lst3\n    end\nend\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\",\
    \ \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\"\
    , \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\"\
    , \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\"\
    , \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\"\
    , \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\"\
    , \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\"\
    , \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\"\
    , \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\"\
    , \"96\", \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"103\", \"104\"\
    , \"105\", \"106\", \"107\", \"108\", \"109\", \"110\", \"111\", \"112\", \"113\"\
    , \"114\", \"115\", \"116\", \"117\", \"118\", \"119\", \"120\", \"121\", \"122\"\
    , \"123\", \"124\", \"125\", \"126\", \"127\", \"128\", \"129\", \"130\", \"131\"\
    , \"132\", \"133\", \"134\", \"135\", \"136\", \"137\", \"138\", \"139\", \"140\"\
    , \"141\", \"142\", \"143\", \"144\", \"145\", \"146\", \"147\", \"148\", \"149\"\
    , \"150\", \"151\", \"152\", \"153\", \"154\", \"155\", \"156\", \"157\nusing\
    \ Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5nxh_3r6.jl:33\nin expression starting at\
    \ /tmp/tmp5nxh_3r6.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    if length(lst1) == length(lst2)\n        return lst1\n    else\n   \
    \     \n        lst3 = []\n        \n        for elem in lst1\n            if\
    \ elem == \"\"\n                lst3 += lst2\n            else\n             \
    \   lst3 += findall(elem == lst2, lst1)\n            end\n        end\n      \
    \  \n        return lst3\n    end\nend\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"10\", \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\", \"14\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\nusing\
    \ Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpunzwnsdu.jl:38\nin expression starting at\
    \ /tmp/tmpunzwnsdu.jl:38\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    lst3 = Vector{String}(undef, 0)\n    \n    for i in eachindex(lst1)\n\
    \        lst3 = lst3 ++ [lst1[i]]\n    end\n    \n    for i in eachindex(lst2)\n\
    \        lst3 = lst3 ++ [lst2[i]]\n    end\n    \n    for i in eachindex(lst3)\n\
    \        if length(lst3[i]) < length(lst3[end])\n            lst3 = lst3 ++ [lst3[i]]\n\
    \        end\n    end\n    \n    return lst3\nend\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"\
    hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\"\
    , \"3\", \"4\", \"5\"])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts\
    \ a vector of strings and a vector of strings and returns the vector that has\
    \ \nthe total number of chars in the all strings of the vector less than the other\
    \ vector.\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2_934aas.jl:39\nin expression starting at\
    \ /tmp/tmp2_934aas.jl:39\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == length(lst2)\n        lst1\n    else\n        lst2\n  \
    \  end\nend\n</cell>\n<code language=julia-1.0>\ntotal_match([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-1.0>\ntotal_match([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.0>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.0>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<text>\nExercise\n\
    Write a function that accepts a vector of strings and returns the vector that\
    \ has \nthe total number of chars in the all strings of the vector less than the\
    \ other vector.\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t\
    @test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpftnasuoz.jl:26\nin expression starting at\
    \ /tmp/tmpftnasuoz.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == length(lst2)\n        return lst1\n    else\n        lst3\
    \ = []\n        for str1 in lst1\n            for str2 in lst2\n             \
    \   if str1 < str2\n                    lst3 += str1\n                else\n \
    \                   lst3 += str2\n                end\n            end\n     \
    \   end\n        return lst3\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"\
    hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\"\
    , \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"\
    ], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\",\
    \ \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\"\
    , \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\"\
    , \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\"\
    , \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\"\
    , \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\"\
    , \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\"\
    , \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\"\
    , \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\"\
    , \"96\", \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"103\", \"104\"\
    , \"105\", \"106\", \"107\", \"108\", \"109\", \"110\", \"111\", \"112\", \"113\"\
    , \"114\", \"115\", \"116\", \"117\", \"118\", \"119\", \"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1rq9i_d7.jl:36\nin expression starting at\
    \ /tmp/tmp1rq9i_d7.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    if length(lst1) == length(lst2)\n        return lst1\n    else\n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpvah2lfiw.jl:21\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvah2lfiw.jl:1\n\
    in expression starting at /tmp/tmpvah2lfiw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == length(lst2)\n        return lst1\n    else\n        lst3\
    \ = Vector{String}(lst1)\n        for i in 1:length(lst2)\n            lst3[i]\
    \ = lst3[i] .+ lst2[i]\n        end\n        return lst3\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpx9roievb.jl:32

    '
  stdout: "test set: Test Failed at /tmp/tmpx9roievb.jl:36\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpx9roievb.jl:36 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpx9roievb.jl:34\ntest set: Error\
    \ During Test at /tmp/tmpx9roievb.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) ==\
    \ [\"hi\", \"admin\"]\n  MethodError: no method matching +(::String, ::String)\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n  Stacktrace:\n\
    \    [1] _broadcast_getindex_evalf\n      @ ./broadcast.jl:670 [inlined]\n   \
    \ [2] _broadcast_getindex\n      @ ./broadcast.jl:643 [inlined]\n    [3] getindex\n\
    \      @ ./broadcast.jl:597 [inlined]\n    [4] copy\n      @ ./broadcast.jl:875\
    \ [inlined]\n    [5] materialize\n      @ ./broadcast.jl:860 [inlined]\n    [6]\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})\n      @ Main /tmp/tmpx9roievb.jl:25\n\
    \    [7] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n    [8] macro expansion\n      @ /tmp/tmpx9roievb.jl:37 [inlined]\n\
    \    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [10] top-level scope\n      @ /tmp/tmpx9roievb.jl:34\ntest set:\
    \ Error During Test at /tmp/tmpx9roievb.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]\n  MethodError:\
    \ no method matching +(::String, ::String)\n  Closest candidates are:\n    +(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \  Stacktrace:\n    [1] _broadcast_getindex_evalf\n      @ ./broadcast"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    lst3 = lst1\n    lst4 = lst2\n    \n    for i = 1:length(lst1)\n   \
    \     lst3[i] = lst3[i] .- lst4[i]\n    end\n    \n    return lst3\nend\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n\
    </cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hi\",\
    \ \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"\
    hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\"\
    , \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"\
    hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\"\
    , \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"\
    hi\"])\n</cell>\n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t\
    @test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpck7tvu52.jl:30\nin expression starting at\
    \ /tmp/tmpck7tvu52.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    lst3 = lst1\n    lst4 = lst2\n    \n    for i = 1:length(lst1)\n   \
    \     if length(lst1[i]) > length(lst2[i])\n            lst3 = lst3\n        elseif\
    \ length(lst2[i]) > length(lst1[i])\n            lst4 = lst4\n        else\n \
    \           lst3 = lst3\n            lst4 = lst4\n        end\n    end\n    \n\
    \    return lst3\nend\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that accepts two vectors of strings and returns the vector\
    \ that has \n    total number of chars in the all strings of the vector less than\
    \ the other vector.\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn1u8ql2s.jl:37\nin expression starting at\
    \ /tmp/tmpn1u8ql2s.jl:37\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    lst3 = []\n    for x in lst1\n        if x != \"\"\n            for\
    \ y in lst2\n                if y != \"\"\n                    if x != y\n   \
    \                     lst3 += [x]\n                    end\n                end\n\
    \            end\n        end\n    end\n    return lst3\nend\n</cell>\n<code language=julia-1.3>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-1.3>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n\
    <code language=julia-1.3>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"\
    hi\"])\n</cell>\n<code language=julia-1.3>\ntotal_match([\"4\"], [\"1\", \"2\"\
    , \"3\", \"4\", \"5\"])\n</cell>\n<text>\nExercise 2\nusing Test\n\n@testset begin\n\
    \ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2pc9tr5m.jl:35\nin expression starting at\
    \ /tmp/tmp2pc9tr5m.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    lst3 = lst1\n    for elem in lst2\n        if elem == \"\"\n       \
    \     lst3 = lst3\n        else\n            lst3 = lst3 ++ [elem]\n        end\n\
    \    end\n    return lst3\nend\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"admin\", \"project\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hi\", \"admin\"\
    , \"project\", \"hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\"\
    , \"admin\"], [\"hi\", \"admin\", \"project\", \"hi\", \"hi\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hi\", \"admin\", \"\
    project\", \"hi\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    hi\", \"admin\"], [\"hi\", \"admin\", \"project\", \"hi\", \"hi\", \"hi\", \"\
    hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"\
    hi\", \"admin\", \"project\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hi\", \"admin\"\
    , \"project\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hi\", \"admin\", \"\
    project\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"\
    hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\",\
    \ \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\", \"hi\"\
    , \"hi\", \"hi\", \"hi\", \"hi\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8d6qxs_7.jl:31\nin expression starting at\
    \ /tmp/tmp8d6qxs_7.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    if length(lst1) == length(lst2)\n        return lst1\n    else\n   \
    \     \n        lst3 = []\n        for i in 1:length(lst1)\n            \n   \
    \         if length(lst1[i]) < length(lst2[i])\n                lst3 += lst1[i]\n\
    \            else\n                lst3 += lst2[i]\n            end\n        end\n\
    \        \n        return lst3\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp_6d_e6aj.jl:40

    '
  stdout: "test set: Test Failed at /tmp/tmp_6d_e6aj.jl:44\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp_6d_e6aj.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp_6d_e6aj.jl:42\ntest set: Error\
    \ During Test at /tmp/tmp_6d_e6aj.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) ==\
    \ [\"hi\", \"admin\"]\n  MethodError: no method matching +(::Vector{Any}, ::String)\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n    +(::Array,\
    \ !Matched::Array...) at /shared/centos7/julia/1.7.3/share/julia/base/arraymath.jl:43\n\
    \    +(::Array, !Matched::SparseArrays.AbstractSparseMatrixCSC) at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/SparseArrays/src/sparsematrix.jl:1775\n\
    \    ...\n  Stacktrace:\n   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\n\
    \     @ Main /tmp/tmp_6d_e6aj.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_6d_e6aj.jl:45 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_6d_e6aj.jl:42\ntest set:\
    \ Error During Test at /tmp/tmp_6d_e6aj.jl:46\n  Test threw exception\n  Expression:\
    \ candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]\n  MethodError:\
    \ no method matching +(::Vector{Any}, ::String)\n  Closest candidates are:\n \
    \   +(::Any, ::Any, !Matched::Any, !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n\
    \    +(::Array, !Matched::Array...) at /shared/centos7/julia/1.7.3/share/julia/base/arraymath.jl:43\n\
    \  "
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    if length(lst1) == length(lst2)\n        return lst1\n    else\n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpvah2lfiw.jl:21\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvah2lfiw.jl:1\n\
    in expression starting at /tmp/tmpvah2lfiw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    lst3 = Vector{String}(undef, 0)\n    \n    for str1 in lst1\n      \
    \  for str2 in lst2\n            if str1 < str2\n                lst3 += str1\n\
    \            else\n                lst3 += str2\n            end\n        end\n\
    \    end\n    \n    return lst3\nend\n</cell>\n<code language=julia-1.4>\ntotal_match([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-1.4>\ntotal_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.4>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.4>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<text>\nWrite\
    \ a function that accepts a string and returns the number of chars in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpflv7p4zm.jl:35\nin expression starting at\
    \ /tmp/tmpflv7p4zm.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    lst3 = Vector{String}(undef, 0)\n    \n    for str1 in lst1\n      \
    \  for str2 in lst2\n            if str1 < str2\n                push!(lst3, str1)\n\
    \            end\n        end\n    end\n    \n    return lst3\nend\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n\
    </cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hi\",\
    \ \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that accepts two vectors of strings and returns the vector\
    \ that has \ntotal number of chars in the all strings of the vector less than\
    \ the other vector.\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdtp2m6i2.jl:33\nin expression starting at\
    \ /tmp/tmpdtp2m6i2.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    if length(lst1) == length(lst2)\n        return lst1\n    else\n   \
    \     \n        lst3 = lst1\n        \n        for i in 1:length(lst2)\n     \
    \       \n            if lst3[i] < lst2[i]\n                lst3 = lst3[lst3 .!=\
    \ lst2[i]]\n            else\n                lst3 = lst3[lst3 .!= lst1[i]]\n\
    \            end\n        end\n        \n        return lst3\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n\
    </cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hi\",\
    \ \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\",\
    \ \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\"\
    , \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\"\
    , \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\"\
    , \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\"\
    , \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\"\
    , \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\"\
    , \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\"\
    , \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\"\
    , \"96\", \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"103\", \"104\"\
    , \"105\", \"106\", \"107\", \"108\", \"109\", \"110\", \"111\", \"112\", \"113\"\
    , \"114\", \"115\", \"116\", \"117\", \"118\", \"119\", \"120\", \"121\", \"122\"\
    , \"123\", \"124\", \"125\", \"126\", \"127\", \"128\", \"129\", \"130\", \"131\"\
    , \"132\", \"133\", \"134\", \"135\", \"136\", \"137\", \"138\", \"139\", \"140\"\
    , \"14\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8w9fy9qe.jl:39\nin expression starting at\
    \ /tmp/tmp8w9fy9qe.jl:39\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == length(lst2)\n        return lst1\n    else\n        lst3\
    \ = []\n        for e in lst1\n            if e < lst2\n                push!(lst3,\
    \ e)\n            end\n        end\n        return lst3\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that accepts two vectors of strings and returns\
    \ the vector that has \ntotal number of chars in the all strings of the vector\
    \ less than the other vector.\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa34hkd7v.jl:32\nin expression starting at\
    \ /tmp/tmpa34hkd7v.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == length(lst2)\n        return lst1\n    else\n        lst3\
    \ = []\n        for str1 in lst1\n            for str2 in lst2\n             \
    \   if str1 < str2\n                    lst3 += str1\n                else\n \
    \                   lst3 += str2\n                end\n            end\n     \
    \   end\n        return lst3\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-1.0>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n\
    <code language=julia-1.0>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"\
    hi\"])\n</cell>\n<code language=julia-1.0>\ntotal_match([\"4\"], [\"1\", \"2\"\
    , \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.0>\ntotal_match([\"4\"\
    ], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"])\n</cell>\n<code language=julia-1.0>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\"])\n</cell>\n\
    <code language=julia-1.0>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\"])\n</cell>\n<code language=julia-1.0>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"])\n</cell>\n\
    <code language=julia-1.0>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"\
    5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n<code language=julia-1.0>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"10\", \"11\"])\n</cell>\n<code language=julia-1.0>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\"])\n</cell>\n<code language=julia-1.0>\ntotal_match([\"4\"], [\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\"])\n</cell>\n<code language=julia-1.0>\ntotal_match([\"4\"], [\"1\"\
    , \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"\
    , \"13\", \"14\"])\n</cell>\n<code language=julia-1.0>\ntotal_match([\"4\"], [\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpki5amo8c.jl:36\nin expression starting at\
    \ /tmp/tmpki5amo8c.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    if length(lst1) == length(lst2)\n        return lst1\n    else\n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpvah2lfiw.jl:21\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvah2lfiw.jl:1\n\
    in expression starting at /tmp/tmpvah2lfiw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    if length(lst1) == length(lst2)\n        \n        \n        \n    \
    \    \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_v71i6i0.jl:1\nin expression starting at /tmp/tmp_v71i6i0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    if length(lst1) == length(lst2)\n        \n        \n        \n    \
    \    \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_v71i6i0.jl:1\nin expression starting at /tmp/tmp_v71i6i0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    if length(lst1) == length(lst2)\n        return lst1\n    else\n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpvah2lfiw.jl:21\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvah2lfiw.jl:1\n\
    in expression starting at /tmp/tmpvah2lfiw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    if length(lst1) == length(lst2)\n        return lst1\n    else\n   \
    \     \n        lst3 = []\n        for str1 in lst1\n            for str2 in lst2\n\
    \                if str1 < str2\n                    lst3 += str1\n          \
    \      else\n                    lst3 += str2\n                end\n         \
    \   end\n        end\n        \n        return lst3\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<text>\nWrite\
    \ a function that accepts two vectors of strings and returns the vector that has\
    \ \n    total number of chars in the all strings of the vector less than the other\
    \ vector.\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdef1zsk2.jl:39\nin expression starting at\
    \ /tmp/tmpdef1zsk2.jl:39\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    if length(lst1) == length(lst2)\n        return lst1\n    else\n   \
    \     \n        lst3 = lst1\n        \n        for i = 1:length(lst1)\n      \
    \      \n            if length(lst1[i]) > length(lst2[i])\n                lst3\
    \ = lst3 ++ [lst1[i]]\n            else\n                lst3 = lst3 ++ [lst2[i]]\n\
    \            end\n            \n        end\n        \n        return lst3\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"\
    hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"\
    hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy7aoetq0.jl:40\nin expression starting at\
    \ /tmp/tmpy7aoetq0.jl:40\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    lst3 = []\n    for str1 in lst1\n        for str2 in lst2\n        \
    \    if str1 < str2\n                lst3 += str1\n            else\n        \
    \        lst3 += str2\n            end\n        end\n    end\n    return lst3\n\
    end\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"\
    hI\", \"Hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"10\", \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\", \"14\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\", \"14\", \"15\"])\n</cell>\n<code language=julia-1.5\n\
    using Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpezu5vxig.jl:33\nin expression starting at\
    \ /tmp/tmpezu5vxig.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == length(lst2)\n        return lst1\n    else\n        lst3\
    \ = []\n        for elem in lst1\n            if elem < lst2\n               \
    \ push!(lst3, elem)\n            end\n        end\n        return lst3\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"\
    hI\", \"Hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"10\", \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\", \"14\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\", \"14\", \"15\"])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw6lhvd33.jl:32\nin expression starting at\
    \ /tmp/tmpw6lhvd33.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    if length(lst1) == length(lst2)\n        return lst1\n    else\n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpvah2lfiw.jl:21\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvah2lfiw.jl:1\n\
    in expression starting at /tmp/tmpvah2lfiw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == length(lst2)\n        return lst1\n    else\n        lst3\
    \ = Vector{String}(undef, 0)\n        for str1 in lst1\n            for str2 in\
    \ lst2\n                if str1 < str2\n                    push!(lst3, str1)\n\
    \                end\n            end\n        end\n        return lst3\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"\
    hI\", \"Hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"\
    12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\",\
    \ \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"\
    , \"32\", \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\"\
    , \"42\", \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\"\
    , \"52\", \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\"\
    , \"62\", \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\"\
    , \"72\", \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\"\
    , \"82\", \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\"\
    , \"92\", \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"\
    101\", \"102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\"\
    , \"110\", \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"\n\
    using Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp2ruwo8d.jl:34\nin expression starting at\
    \ /tmp/tmpp2ruwo8d.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   if length(lst1) == length(lst2)\n        return lst1\n    else\n        lst3\
    \ = lst1\n        lst4 = lst2\n        lst5 = lst3\n        lst6 = lst4\n    \
    \    lst7 = lst5\n        lst8 = lst6\n        lst9 = lst7\n        lst10 = lst8\n\
    \        lst11 = lst9\n        lst12 = lst10\n        lst13 = lst11\n        lst14\
    \ = lst12\n        lst15 = lst13\n        lst16 = lst14\n        lst17 = lst15\n\
    \        lst18 = lst16\n        lst19 = lst17\n        lst20 = lst18\n       \
    \ lst21 = lst19\n        lst22 = lst20\n        lst23 = lst21\n        lst24 =\
    \ lst22\n        lst25 = lst23\n        lst26 = lst24\n        lst27 = lst25\n\
    \        lst28 = lst26\n        lst29 = lst27\n        lst30 = lst28\n       \
    \ lst31 = lst29\n        lst32 = lst30\n        lst33 = lst31\n        lst34 =\
    \ lst32\n        lst35 = lst33\n        lst36 = lst34\n        lst37 = lst35\n\
    \        lst38 = lst36\n        lst39 = lst37\n        lst40 = lst38\n       \
    \ lst41 = lst39\n        lst42 = lst40\n        lst43 = lst41\n        lst44 =\
    \ lst42\n        lst45 = lst43\n        lst46 = lst44\n        lst47 = lst45\n\
    \        lst48 = lst46\n        lst49 = lst47\n        lst50 = lst48\n       \
    \ lst51 = lst49\n        lst52 = lst50\n        lst53 = lst51\n        lst54 =\
    \ lst52\n        lst55 = lst53\n        lst56 = lst54\n        lst57 = lst55\n\
    \        lst58 = lst56\n        lst59 = lst57\n        lst60 = lst58\n       \
    \ lst61 = lst59\n        lst62 = lst60\n        lst63 = lst61\n        lst64 =\
    \ lst62\n        lst65 = lst63\n        lst66 = lst64\n        lst67 = lst65\n\
    \        lst68 = lst66\n        lst69 = lst67\n        lst70 = lst68\n       \
    \ lst71 = lst69\n        lst72 = lst70\n        lst73 = lst71\n        lst74 =\
    \ lst72\n        lst75 = \nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\
    \t@test(candidate(Vector{String}([]), Vector{String}([])) == Vector{String}([]))\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\
    \t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"\
    ]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"], [\"1\", \"2\", \"3\", \"\
    4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"Hi\"\
    ]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hI\", \"hi\"\
    , \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpee0lgfb9.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpee0lgfb9.jl:1\n\
    in expression starting at /tmp/tmpee0lgfb9.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    if length(lst1) == length(lst2)\n        return lst1\n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5hdrzfiz.jl:1\nin expression starting at /tmp/tmp5hdrzfiz.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    if length(lst1) == length(lst2)\n        return lst1\n    else\n   \
    \     \n        lst3 = []\n        for elem in lst1\n            if elem == \"\
    \"\n                lst3 += lst2\n            else\n                lst3 += findall(elem\
    \ == lst2, lst2)\n            end\n        end\n        \n        return lst3\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 2 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpfo83ehmc.jl:39

    '
  stdout: "test set: Test Failed at /tmp/tmpfo83ehmc.jl:43\n  Expression: candidate([\"\
    hi\", \"admin\"], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"]\n   Evaluated: [\"hi\"\
    , \"admin\"] == [\"hi\", \"hi\"]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpfo83ehmc.jl:43 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpfo83ehmc.jl:41\ntest set: Error\
    \ During Test at /tmp/tmpfo83ehmc.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"]) ==\
    \ [\"hi\", \"admin\"]\n  MethodError: no method matching findall(::Bool, ::Vector{String})\n\
    \  Closest candidates are:\n    findall(!Matched::Base.Fix2{typeof(in)}, ::AbstractArray)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2426\n    findall(!Matched::Function,\
    \ ::AbstractArray) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2257\n\
    \    findall(!Matched::Function, ::Any) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2253\n\
    \    ...\n  Stacktrace:\n   [1] total_match(lst1::Vector{String}, lst2::Vector{String})\n\
    \     @ Main /tmp/tmpfo83ehmc.jl:30\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpfo83ehmc.jl:44 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfo83ehmc.jl:41\ntest set:\
    \ Error During Test at /tmp/tmpfo83ehmc.jl:45\n  Test threw exception\n  Expression:\
    \ candidate([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"]\n  MethodError:\
    \ no method matching findall(::Bool, ::Vector{String})\n  Closest candidates are:\n\
    \    findall(!Matched::Base.Fix2{typeof(in)}, ::AbstractArray) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2426\n\
    \    findall(!Matched::Function, ::AbstractArray) at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:2257\n\
    \    fin"
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    lst3 = []\n    for str1 in lst1\n        for str2 in lst2\n        \
    \    if str1 < str2\n                lst3 += str1\n            else\n        \
    \        lst3 += str2\n            end\n        end\n    end\n    \n    return\
    \ lst3\nend\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"\
    ], [\"hI\", \"Hi\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\"\
    , \"admin\"], [\"hi\", \"hi\", \"admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"\
    1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"\
    2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\", \"10\", \"11\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\",\
    \ \"9\", \"10\", \"11\", \"12\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\", \"14\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\",\
    \ \"11\", \"12\", \"13\", \"14\", \"15\"])\n</cell>\n<code language=juli\nusing\
    \ Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp40gwoy4h.jl:34\nin expression starting at\
    \ /tmp/tmp40gwoy4h.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    if length(lst1) == length(lst2)\n        return lst1\n    else\n   \
    \     \n        lst3 = []\n        for str1 in lst1\n            for str2 in lst2\n\
    \                if str1 < str2\n                    push!(lst3, str1)\n     \
    \           else\n                    push!(lst3, str2)\n                end\n\
    \            end\n        end\n        return lst3\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n</cell>\n\
    <code language=julia-1.5>\ntotal_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"\
    admin\", \"project\"])\n</cell>\n<code language=julia-1.5>\ntotal_match([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n</cell>\n<code language=julia-1.5>\n\
    total_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"])\n</cell>\n<code\
    \ language=julia-1.5>\ntotal_match([\"4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"\
    , \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\",\
    \ \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\"\
    , \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\", \"35\"\
    , \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\", \"45\"\
    , \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\", \"55\"\
    , \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\", \"65\"\
    , \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\", \"75\"\
    , \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\", \"85\"\
    , \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\", \"95\"\
    , \"96\", \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"103\", \"104\"\
    , \"105\", \"106\", \"107\", \"108\", \"109\", \"110\", \"111\", \"112\", \"113\"\
    , \"114\", \"115\", \"116\", \"117\", \"118\", \"119\", \"120\", \"121\", \"122\"\
    , \"123\", \"124\", \"125\", \"126\", \"127\", \"128\", \"129\", \"130\", \"131\"\
    , \"132\", \"133\", \"134\", \"135\", \"136\", \"137\", \"138\", \"139\", \"140\"\
    , \"141\", \"142\", \"143\", \"144\", \"145\", \"146\", \"147\", \"148\", \"149\n\
    using Test\n\n@testset begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]),\
    \ Vector{String}([])) == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\"]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"\
    ], [\"hi\", \"hi\", \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq9it_0qk.jl:38\nin expression starting at\
    \ /tmp/tmpq9it_0qk.jl:38\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Write a function that accepts two vectors of strings and returns\
    \ the vector that has \n    total number of chars in the all strings of the vector\
    \ less than the other vector.\n\n    if the two vectors have the same number of\
    \ chars, return the first vector.\n\n    Examples\n    >>> total_match([], [])\n\
    \    []\n    >>> total_match([\"hi\", \"admin\"], [\"hI\", \"Hi\"])\n    [\"hI\"\
    , \"Hi\"]\n    >>> total_match([\"hi\", \"admin\"], [\"hi\", \"hi\", \"admin\"\
    , \"project\"])\n    [\"hi\", \"admin\"]\n    >>> total_match([\"hi\", \"admin\"\
    ], [\"hI\", \"hi\", \"hi\"])\n    [\"hI\", \"hi\", \"hi\"]\n    >>> total_match([\"\
    4\"], [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    [\"4\"]\n    \"\"\"\nfunction\
    \ total_match(lst1::Vector{String}, lst2::Vector{String})::Vector{String} \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = total_match;\n\t@test(candidate(Vector{String}([]), Vector{String}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    ]) == [\"hi\", \"hi\"])\n\t@test(candidate([\"hi\", \"admin\"], [\"hi\", \"hi\"\
    , \"admin\", \"project\"]) == [\"hi\", \"admin\"])\n\t@test(candidate([\"4\"],\
    \ [\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"4\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"Hi\"]) == [\"hI\", \"Hi\"])\n\t@test(candidate([\"hi\"\
    , \"admin\"], [\"hI\", \"hi\", \"hi\"]) == [\"hI\", \"hi\", \"hi\"])\n\t@test(candidate([\"\
    hi\", \"admin\"], [\"hI\", \"hi\", \"hii\"]) == [\"hi\", \"admin\"])\n\t@test(candidate(Vector{String}([]),\
    \ [\"this\"]) == Vector{String}([]))\n\t@test(candidate([\"this\"], Vector{String}([]))\
    \ == Vector{String}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp98hdexww.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp98hdexww.jl:1\n\
    in expression starting at /tmp/tmp98hdexww.jl:1\n"
  stdout: ''
