language: jl
name: HumanEval_125_split_words
results:
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"abcdef\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+,-./:;<=>?@[]^_`{|}~\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+,-./:;<=>?@[]^_`{|}~,.\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+,-./:;<=>?@[]^_`{|}~,.?\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+,-./:;<=>?@[]^_`{|}~,.?!\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+,-./:;<=>?@[]^_`{|}~,.?!:;\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+,-./:;<=>?@[]^_`{|}~,.?!:;,\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+,-./:;<=>?@[]^_`{|}~,.?!:;,.\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$%\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp81vv_i4e.jl:20\nin expression starting at\
    \ /tmp/tmp81vv_i4e.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    word_counts = Dict()\n    for word in words\n\
    \        word_counts[word] = get(word_counts, word, 0) + 1\n    end\n    word_counts\
    \ = sort(word_counts, by=x->x[1], rev=true)\n    word_counts = reverse(word_counts)\n\
    \    word_counts = filter(x -> x[1] % 2 != 0, word_counts)\n    word_counts =\
    \ map(x -> x[1], word_counts)\n    word_counts = sort(word_counts, by=x->x[2],\
    \ rev=true)\n    word_counts = reverse(word_counts)\n    word_counts = filter(x\
    \ -> x[2] % 2 != 0, word_counts)\n    word_counts = map(x -> x[2], word_counts)\n\
    \    word_counts = sort(word_counts, by=x->x[3], rev=true)\n    word_counts =\
    \ reverse(word_counts)\n    word_counts = filter(x -> x[3] % 2 != 0, word_counts)\n\
    \    word_counts = map(x -> x[3], word_counts)\n    word_counts = sort(word_counts,\
    \ by=x->x[4], rev=true)\n    word_counts = reverse(word_counts)\n    word_counts\
    \ = filter(x -> x[4] % 2 != 0, word_counts)\n    word_counts = map(x -> x[4],\
    \ word_counts)\n    word_counts = sort(word_counts, by=x->x[5], rev=true)\n  \
    \  word_counts = reverse(word_counts)\n    word_counts = filter(x -> x[5] % 2\
    \ != 0, word_counts)\n    word_counts = map(x -> x[5], word_counts)\n    word_counts\
    \ = sort(word_counts, by=x->x[6], rev=true)\n    word_counts = reverse(word_counts)\n\
    \    word_counts = filter(x -> x[6] % 2 != 0, word_counts)\n    word_counts =\
    \ map(x -> x[6], word_counts)\n    word_counts = sort(word_counts, by=x->x[7],\
    \ rev=true)\n    word_counts = reverse(word_counts)\n    word_counts = filter(x\
    \ -> x[7] % 2 != 0, word_counts)\n    word_counts = map(x -> x[7], word_counts)\n\
    \    word_counts = sort(word_counts, by=x->x[8], rev=true)\n    word_counts =\
    \ reverse(word_counts)\n    word_counts = filter(x -> x[8] % 2 != 0, word_counts)\n\
    \    word_counts = map(x -> x[8], word_counts)\n    word_counts = sort(word_counts,\
    \ by\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0adf0xo6.jl:52\nin expression starting at\
    \ /tmp/tmp0adf0xo6.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    \n    words_vec = Vector{String}(undef,\
    \ 0)\n    words_vec_size = Vector{Int64}(undef, 0)\n    \n    for word in words\n\
    \        words_vec_size += length(word)\n        words_vec += word\n    end\n\
    \    \n    if words_vec_size == 0\n        return words_vec\n    else\n      \
    \  return words_vec\n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n\
    \    count_words(txt::String)\n    Count number of words in a string\n    \n \
    \   Arguments\n    ---------\n    txt :: String\n        Text to count words from\n\
    \    \n    Returns\n    -------\n    words_count :: Int64\n        Number of words\
    \ in txt\n    Examples\n    --------\n    >>> count_words(\"Hello world!\")\n\
    \    7\n    >>> count_words(\"Hello world! Hello world!\")\n    9\n    >>> count_words(\"\
    Hello world! Hello world! Hello world!\")\n    15\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2wzhmlcc.jl:30\nin expression starting at\
    \ /tmp/tmp2wzhmlcc.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_no_spaces = filter(x -> !contains(x,\
    \ \" \"), words)\n    words_no_commas = filter(x -> !contains(x, \",\"), words_no_spaces)\n\
    \    words_no_commas_no_spaces = filter(x -> !contains(x, \" \"), words_no_commas)\n\
    \    words_no_commas_no_spaces_no_spaces = filter(x -> !contains(x, \" \"), words_no_commas_no_spaces)\n\
    \    words_no_commas_no_spaces_no_spaces_no_spaces = filter(x -> !contains(x,\
    \ \" \"), words_no_commas_no_spaces_no_spaces)\n    words_no_commas_no_spaces_no_spaces_no_spaces_no_spaces\
    \ = filter(x -> !contains(x, \" \"), words_no_commas_no_spaces_no_spaces_no_spaces)\n\
    \    words_no_commas_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces = filter(x\
    \ -> !contains(x, \" \"), words_no_commas_no_spaces_no_spaces_no_spaces_no_spaces)\n\
    \    words_no_commas_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces\
    \ = filter(x -> !contains(x, \" \"), words_no_commas_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces)\n\
    \    words_no_commas_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces\
    \ = filter(x -> !contains(x, \" \"), words_no_commas_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces)\n\
    \    words_no_commas_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces\
    \ = filter(x -> !contains(x, \" \"), words_no_commas_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces)\n\
    \    words_no_commas_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces\
    \ = filter(x -> !contains(x, \" \"), words_no_commas_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces)\n\
    \    words_no_commas_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces_no_spaces\
    \ = filter(x -> !contains(x, \" \"), words_no_commas_no_spaces_no_spaces_no_spaces_no_spaces_\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf62bzfsq.jl:27\nin expression starting at\
    \ /tmp/tmpf62bzfsq.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \".\"]\n    words = [w for w in words if w != \"!\"]\n    words\
    \ = [w for w in words if w != \"?\"]\n    words = [w for w in words if w != \"\
    !\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for w in words\
    \ if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w\
    \ for w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n\
    \    words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwi01if4c.jl:59\nin expression starting at\
    \ /tmp/tmpwi01if4c.jl:59\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_no_spaces = filter(x -> !isspace(x),\
    \ words)\n    words_no_commas = filter(x -> !iscomma(x), words_no_spaces)\n  \
    \  words_no_commas_no_spaces = filter(x -> !isspace(x), words_no_commas)\n   \
    \ words_no_commas_no_spaces_no_commas = filter(x -> !iscomma(x), words_no_commas_no_spaces)\n\
    \    words_no_commas_no_spaces_no_commas_no_spaces = filter(x -> !isspace(x),\
    \ words_no_commas_no_spaces_no_commas)\n    words_no_commas_no_spaces_no_commas_no_spaces_no_commas\
    \ = filter(x -> !iscomma(x), words_no_commas_no_spaces_no_commas_no_spaces)\n\
    \    words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces = filter(x\
    \ -> !isspace(x), words_no_commas_no_spaces_no_commas_no_spaces_no_commas)\n \
    \   words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas\
    \ = filter(x -> !iscomma(x), words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces)\n\
    \    words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces\
    \ = filter(x -> !isspace(x), words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas)\n\
    \    words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas\
    \ = filter(x -> !iscomma(x), words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas)\n\
    \    words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces\
    \ = filter(x -> !isspace(x), words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces)\n\
    \    words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_no_commas\
    \ = filter(x -> !iscomma(x), words_no_commas_no_spaces_no_commas_no_spaces_no_commas_no_spaces_\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_rwx98i3.jl:27\nin expression starting at\
    \ /tmp/tmp_rwx98i3.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt)\n    \n    word_counts = Dict()\n    for\
    \ word in words\n        word_counts[word] = get(word_counts, word, 0) + 1\n \
    \   end\n    \n    word_counts = collect(values(word_counts))\n    \n    word_counts\
    \ = sort(word_counts)\n    \n    word_counts = word_counts[2:end]\n    \n    word_counts\
    \ = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n    \n   \
    \ word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpujshijlr.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpujshijlr.jl:1\n\
    in expression starting at /tmp/tmpujshijlr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    words_split = [split(word,\
    \ \",\") for word in words]\n    \n    words_split = [word for word in words_split\
    \ if !isempty(word)]\n    \n    words_split = [word for word in words_split if\
    \ !islower(word)]\n    \n    words_split = [word for word in words_split if !isupper(word)]\n\
    \    \n    words_split = [word for word in words_split if !isdigit(word)]\n  \
    \  \n    words_split = [word for word in words_split if !isspace(word)]\n    \n\
    \    words_split = [word for word in words_split if !isempty(word)]\n    \n  \
    \  words_split = [word for word in words_split if !islower(word)]\n    \n    words_split\
    \ = [word for word in words_split if !isupper(word)]\n    \n    words_split =\
    \ [word for word in words_split if !isdigit(word)]\n    \n    words_split = [word\
    \ for word in words_split if !isspace(word)]\n    \n    words_split = [word for\
    \ word in words_split if !isempty(word)]\n    \n    words_split = [word for word\
    \ in words_split if !islower(word)]\n    \n    words_split = [word for word in\
    \ words_split if !isupper(word)]\n    \n    words_split = [word for word in words_split\
    \ if !isdigit(word)]\n    \n    words_split = [word for word in words_split if\
    \ !isspace(word)]\n    \n    words_split = [word for word in words_split if !isempty(word)]\n\
    \    \n    words_split = [word for word in words_split if !islower(word)]\n  \
    \  \n    words_split = [word for word in words_split if !isupper(word)]\n    \n\
    \    words_split = [word for word in words_split if !isdigit(word)]\n    \n  \
    \  words_split = [word for word in words_split if !isspace(word)]\n    \n    words_split\
    \ = [word for word in words_split if !isempty(word)]\n    \n    words_split =\
    \ [word for word in words_split if !islower(word)]\n    \n    words_split = [word\
    \ for word in words_split if !isupper(word)]\n    \n    words_split = [word for\
    \ word in words_split if !isdigit(word)]\n    \n    words_split = [word for word\
    \ in words_split if !isspace(word)]\n    \n    words_split = [word for word in\
    \ words_split if !ise\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmp47bqcl1n.jl:70\nin expression starting at /tmp/tmp47bqcl1n.jl:70\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = Vector{String}(undef,\
    \ 0)\n    for word in words\n        if word != \"\"\n            words_split\
    \ = push!(words_split, word)\n        end\n    end\n    words_split\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    count_words(txt::String)\n    Count the\
    \ number of words in a given text\n    \n    Arguments\n    ---------\n    txt\
    \ :: String\n        Text to count the words from\n    \n    Returns\n    -------\n\
    \    words_count :: Int64\n        Number of words in the given text\n    Examples\n\
    \    --------\n    >>> count_words(\"Hello world!\")\n    3\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ykhwkve.jl:23\nin expression starting at\
    \ /tmp/tmp7ykhwkve.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmp9nwd0_h6.jl:54\nin expression starting at /tmp/tmp9nwd0_h6.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"abcdef\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}<>|;:'\\\
    \",.?/\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}<>|;:'\\\
    \",.?/:;'\\\"\\\\,.?/\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}<>|;:'\\\
    \",.?/:;'\\\"\\\\,.?/:;'\\\"\\\\,.?/\"]\n    words = [w for w in words if w !=\
    \ \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}<>|;:'\\\",.?/:;'\\\"\
    \\\\,.?/:;'\\\"\\\\,.?/:;'\\\"\\\\,.?/\"]\n    words = [w for w in words if w\
    \ != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}<>|;:'\\\",.?/:;'\\\
    \"\\\\,.?/:;'\\\"\\\\,.?/:;'\\\"\\\\,.?/:;'\\\"\\\\,.?/\"]\n    words = [w for\
    \ w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}<>|;:'\\\
    \",.?/:;'\\\"\\\\,.?/:;'\\\"\\\\,.?/:;'\\\"\\\\,.?/:;'\\\"\\\\,.?/:;'\\\"\\\\\
    ,.?/\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$%\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0kzzos21.jl:20\nin expression starting at\
    \ /tmp/tmp0kzzos21.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    \n    if txt.includes(\",\")\n        return txt.split(\",\")\n    elseif\
    \ txt.includes(\"!\")\n        return txt.split(\"!\")\n    elseif txt.includes(\"\
    ?\")\n        return txt.split(\"?\")\n    elseif txt.includes(\".\")\n      \
    \  return txt.split(\".\")\n    elseif txt.includes(\"-\")\n        return txt.split(\"\
    -\")\n    elseif txt.includes(\";\")\n        return txt.split(\";\")\n    elseif\
    \ txt.includes(\":\")\n        return txt.split(\":\")\n    elseif txt.includes(\"\
    ;\")\n        return txt.split(\";\")\n    elseif txt.includes(\",\")\n      \
    \  return txt.split(\",\")\n    elseif txt.includes(\"!\")\n        return txt.split(\"\
    !\")\n    elseif txt.includes(\"?\")\n        return txt.split(\"?\")\n    elseif\
    \ txt.includes(\".\")\n        return txt.split(\".\")\n    elseif txt.includes(\"\
    -\")\n        return txt.split(\"-\")\n    elseif txt.includes(\";\")\n      \
    \  return txt.split(\";\")\n    elseif txt.includes(\":\")\n        return txt.split(\"\
    :\")\n    elseif txt.includes(\";\")\n        return txt.split(\";\")\n    elseif\
    \ txt.includes(\",\")\n        return txt.split(\",\")\n    elseif txt.includes(\"\
    !\")\n        return txt.split(\"!\")\n    elseif txt.includes(\"?\")\n      \
    \  return txt.split(\"?\")\n    elseif txt.includes(\".\")\n        return txt.split(\"\
    .\")\n    elseif txt.includes(\"-\")\n        return txt.split(\"-\")\n    elseif\
    \ txt.includes(\";\")\n        return txt.split(\";\")\n    elseif txt.includes(\"\
    :\")\n        return txt.split(\":\")\n    elseif txt.includes(\";\")\n      \
    \  return txt.split(\";\")\n    elseif txt.includes(\",\")\n        return txt.split(\"\
    ,\")\n    elseif txt.includes(\"!\")\n        return txt.split(\"!\")\n    elseif\
    \ txt.includes(\"?\")\n        return txt.split(\"?\")\n    elseif txt.includes(\"\
    .\")\n        return txt.split(\".\")\n    elseif txt.includes(\"-\")\n      \
    \  return txt.split(\"-\")\n    elseif txt.includes(\";\")\n        return txt.split(\"\
    ;\")\n    elseif txt.includes(\":\")\n        return txt.split(\":\")\n    elseif\
    \ txt.includes(\";\")\n        return txt.split(\";\")\n    elseif txt.includes(\"\
    ,\")\n        return txt.split(\",\")\n    elseif txt.includes(\"!\")\n      \
    \  return txt.split(\"!\")\n    elseif txt\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpum0l8qgt.jl:1\nin expression starting at /tmp/tmpum0l8qgt.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    word_counts = Dict()\n\
    \    for word in words\n        word_counts[word] = get(word_counts, word, 0)\
    \ + 1\n    end\n    \n    word_counts = sort(word_counts, by=x->x[1], rev=true)\n\
    \    \n    word_counts = filter(x -> x[1] % 2 != 0, word_counts)\n    \n    word_counts\
    \ = filter(x -> x[1] % 2 == 0, word_counts)\n    \n    word_counts = map(x ->\
    \ x[1], word_counts)\n    \n    word_counts = sort(word_counts, by=x->x[2], rev=true)\n\
    \    \n    word_counts = filter(x -> x[2] % 2 != 0, word_counts)\n    \n    word_counts\
    \ = filter(x -> x[2] % 2 == 0, word_counts)\n    \n    word_counts = map(x ->\
    \ x[2], word_counts)\n    \n    word_counts = sort(word_counts, by=x->x[3], rev=true)\n\
    \    \n    word_counts = filter(x -> x[3] % 2 != 0, word_counts)\n    \n    word_counts\
    \ = filter(x -> x[3] % 2 == 0, word_counts)\n    \n    word_counts = map(x ->\
    \ x[3], word_counts)\n    \n    word_counts = sort(word_counts, by=x->x[4], rev=true)\n\
    \    \n    word_counts = filter(x -> x[4] % 2 != 0, word_counts)\n    \n    word_counts\
    \ = filter(x -> x[4] % 2 == 0, word_counts)\n    \n    word_counts = map(x ->\
    \ x[4], word_counts)\n    \n    word_counts = sort(word_counts, by=x->x[5], rev=true)\n\
    \    \n    word_counts = filter(x -> x[5] % 2 != 0, word_counts)\n    \n    word_counts\
    \ = filter(x -> x[5] % 2 == 0, word_counts)\n    \n    word_counts = map(x ->\
    \ x[5], word_counts)\n    \n    word_counts = sort(word_counts, by=x->x[6], rev=true)\n\
    \    \n    word_counts = filter(x -> x[6] % 2 != 0, word_counts)\n    \n    word_counts\
    \ = filter(x -> x[6] % 2 == 0, word_counts)\n    \n    word_counts = map(x ->\
    \ x[6], word_counts)\n    \n    word_counts = sort(word_counts, by=x->x[7], rev=true)\n\
    \    \n    word_counts = filter(x -> x[7\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_sq9oh9k.jl:1\nin expression starting at /tmp/tmp_sq9oh9k.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    word_counts = Dict{String, Int64}()\n\
    \    for word in words\n        word_counts[word] = get(word_counts, word, 0)\
    \ + 1\n    end\n    word_counts = collect(values(word_counts))\n    word_counts\
    \ = sort(word_counts)\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts =\
    \ word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_count\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0bi0buma.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0bi0buma.jl:1\n\
    in expression starting at /tmp/tmp0bi0buma.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmp9nwd0_h6.jl:54\nin expression starting at /tmp/tmp9nwd0_h6.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    if isempty(txt)\n        return Vector{String}()\n    end\n\
    \    \n    words = split(txt, \" \")\n    \n    words = [w for w in words if w\
    \ != \"\"]\n    \n    if isempty(words)\n        return Vector{String}()\n   \
    \ end\n    \n    words = [w for w in words if w != \",\"]\n    \n    if isempty(words)\n\
    \        return length(unique(lowercase(txt)))\n    end\n    \n    return length(unique(lowercase(words)))\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    split_words_with_delimiter(txt::String,\
    \ delimiter::String)\n    \n    Split a text into words using given delimiter\n\
    \    \n    Arguments\n    ---------\n    txt :: String\n        Text to split\n\
    \    delimiter :: String\n        Delimiter used to split words\n    \n    Returns\n\
    \    -------\n    Vector{String}\n        Vector of words\n    \n    Examples\n\
    \    --------\n    >>> split_words_with_delimiter(\"Hello world!\", \" \")\n \
    \   [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"Hello world!\"\
    , \",\")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"Hello\
    \ world!\", \" \")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \",\")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \" \")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \",\")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \" \")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \",\")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \" \")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \",\")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \" \")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \",\")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \" \")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \",\")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter(\"\
    Hello world!\", \" \")\n    [\"Hello\", \"world!\"]\n    >>> split_words_with_delimiter\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptmwkeu6j.jl:35\nin expression starting at\
    \ /tmp/tmptmwkeu6j.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    \n    if length(words) == 0\n  \
    \      return words\n    else\n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpexp6909w.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpexp6909w.jl:1\n\
    in expression starting at /tmp/tmpexp6909w.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if isempty(txt)\n        return txt\n    else\n        words =\
    \ split(txt, \" \")\n        words_no_spaces = filter(x -> !isempty(x), words)\n\
    \        words_no_commas = filter(x -> isempty(x), words)\n        words_no_commas\
    \ = map(x -> replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp08f7uvei.jl:23\nin expression starting at\
    \ /tmp/tmp08f7uvei.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = split(txt, \",\")\n\
    \    words_split2 = split(txt, \",\")\n    if length(words) == length(words_split)\n\
    \        return words\n    elseif length(words) == length(words_split2)\n    \
    \    return words_split\n    else\n        return length(words)\n    end\nend\n\
    </code>\n<|/ a tags=julia |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz9e81h2b.jl:25\nin expression starting at\
    \ /tmp/tmpz9e81h2b.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmp9nwd0_h6.jl:54\nin expression starting at /tmp/tmp9nwd0_h6.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt)\n    \n    if length(words) == 0\n   \
    \     return words\n    else\n        \n        words = words[2:end]\n       \
    \ \n        if all(islower(word))\n            return words\n        else\n  \
    \          \n            words = words[2:end]\n            \n            if all(islower(word))\n\
    \                return words\n            else\n                \n          \
    \      words = words[2:end]\n                \n                if all(islower(word))\n\
    \                    return words\n                else\n                    \n\
    \                    words = words[2:end]\n                    \n            \
    \        if all(islower(word))\n                        return words\n       \
    \             else\n                        \n                        words =\
    \ words[2:end]\n                        \n                        if all(islower(word))\n\
    \                            return words\n                        else\n    \
    \                        \n                            words = words[2:end]\n\
    \                            \n                            if all(islower(word))\n\
    \                                return words\n                            else\n\
    \                                \n                                words = words[2:end]\n\
    \                                \n                                if all(islower(word))\n\
    \                                    return words\n                          \
    \      else\n                                    \n                          \
    \          words = words[2:end]\n                                    \n      \
    \                              if all(islower(word))\n                       \
    \                 return words\n                                    else\n   \
    \                                     \n                                     \
    \   words = words[2:end]\n                                        \n         \
    \                               if all(islower(word))\n                      \
    \                      return words\n                                        else\n\
    \                                            \n                              \
    \              words = words[2:end]\n                                        \
    \    \n                                            if all(islower(word))\n   \
    \                                             return words\n                 \
    \                           else\n                                           \
    \     \n                                                words = words[2:end]\n\
    \                                                \n                          \
    \                      if all(islower(word))\n                               \
    \                     return words\n                                         \
    \       else\n                                                    \n         \
    \                                           words = words[2:end]\n           \
    \                                         \n                                 \
    \                   if all(islower(word))\n                                  \
    \                      return words\n                                        \
    \            else\n                                                        \n\
    \                                                        words = words[2:end]\n\
    \                                                        \n                  \
    \                                      if all(islower(word))\n               \
    \                                             return words\n                 \
    \                                       else\n                               \
    \                             \n                                             \
    \               words = words[2:end]\n                                       \
    \                     \n                                                     \
    \           if all(islower(word))\n                                          \
    \                          return words\n                                    \
    \                            else\n                                          \
    \                          \n                                                \
    \                    words = words[2:end]\n                                  \
    \                                  \n                                        \
    \                                if all(islower(word))\n                     \
    \                                                       return words\n       \
    \                                                                 else\n     \
    \                                                                       \n   \
    \                                                                         words\
    \ = words[2:end]\n                                                           \
    \                 \n                                                         \
    \                       if all(islower(word))\n                              \
    \                                                      return words\n        \
    \                                                                        else\n\
    \                                                                            \
    \        \n                                                                  \
    \                  words = words[2:end]\n                                    \
    \                                                \n                          \
    \                                                          if all(islower(word))\n\
    \                                                                            \
    \            return words\n                                                  \
    \                                  else\n                                    \
    \                                                    \n                      \
    \                                                                  words = words[2:end]\n\
    \                                                                            \
    \            \n                                                              \
    \                          if all(islower(word))\n                           \
    \                                                                 return words\n\
    \                                                                            \
    \            else\n                                                          \
    \                                  \n                                        \
    \                                                    words = words[2:end]\n  \
    \                                                                            \
    \              \n                                                            \
    \                                    if all(islower(word\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxij13ott.jl:132\nin expression starting at\
    \ /tmp/tmpxij13ott.jl:132\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \" \"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n\
    \    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words\
    \ if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for\
    \ w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if w !=\
    \ \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n\
    \    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words\
    \ if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n\
    \    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words\
    \ if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\n\"]\n    words = [w for w in words if w != \"\\r\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvh60b2h1.jl:59\nin expression starting at\
    \ /tmp/tmpvh60b2h1.jl:59\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmp9nwd0_h6.jl:54\nin expression starting at /tmp/tmp9nwd0_h6.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt)\n    \n    if length(words) == 0\n   \
    \     return txt\n    \n    words = [w for w in words if w != \"\"]\n    \n  \
    \  if length(words) == 0\n        return txt\n    \n    words = [w for w in words\
    \ if w != \",\"]\n    \n    if length(words) == 0\n        return txt\n    \n\
    \    words = [w for w in words if w != \" \"]\n    \n    if length(words) == 0\n\
    \        return txt\n    \n    words = [w for w in words if w != \"\\n\"]\n  \
    \  \n    if length(words) == 0\n        return txt\n    \n    words = [w for w\
    \ in words if w != \"\\t\"]\n    \n    if length(words) == 0\n        return txt\n\
    \    \n    words = [w for w in words if w != \"\\r\"]\n    \n    if length(words)\
    \ == 0\n        return txt\n    \n    words = [w for w in words if w != \"\\t\"\
    ]\n    \n    if length(words) == 0\n        return txt\n    \n    words = [w for\
    \ w in words if w != \"\\r\"]\n    \n    if length(words) == 0\n        return\
    \ txt\n    \n    words = [w for w in words if w != \"\\n\"]\n    \n    if length(words)\
    \ == 0\n        return txt\n    \n    words = [w for w in words if w != \"\\t\"\
    ]\n    \n    if length(words) == 0\n        return txt\n    \n    words = [w for\
    \ w in words if w != \"\\r\"]\n    \n    if length(words) == 0\n        return\
    \ txt\n    \n    words = [w for w in words if w != \"\\n\"]\n    \n    if length(words)\
    \ == 0\n        return txt\n    \n    words = [w for w in words if w != \"\\t\"\
    ]\n    \n    if length(words) == 0\n        return txt\n    \n    words = [w for\
    \ w in words if w != \"\\r\"]\n    \n    if length(words) == 0\n        return\
    \ txt\n    \n    words = [w for w in words if w != \"\\n\"]\n    \n    if length(words)\
    \ == 0\n        return txt\n    \n    words = [w for w in words if w != \"\\t\"\
    ]\n    \n    if length(words) == 0\n        return txt\n    \n    words = [w for\
    \ w in words if w != \"\\r\"]\n    \n    if length(words) == 0\n        return\
    \ txt\n    \n    words = [w for w in words if w != \"\\n\"]\n    \n    if length(words)\
    \ == 0\n        return txt\n    \n    words = [w for w in words if w != \"\\t\"\
    ]\n    \n    if length(words) == 0\n        return txt\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ke8t9x9.jl:1\nin expression starting at /tmp/tmp6ke8t9x9.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = Vector{String}()\n\
    \    for word in words\n        push!(words_split, word)\n    end\n    return\
    \ words_split\nend\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello,world!\")\n</cell>\n\
    <code language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of words and returns the number of words\
    \ in the vector that contain an even number of letters.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ytnodgb.jl:21\nin expression starting at\
    \ /tmp/tmp0ytnodgb.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \".\"]\n    words = [w for w in words if w != \"!\"]\n    words\
    \ = [w for w in words if w != \"?\"]\n    words = [w for w in words if w != \"\
    !\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for w in words\
    \ if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w\
    \ for w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n\
    \    words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwi01if4c.jl:59\nin expression starting at\
    \ /tmp/tmpwi01if4c.jl:59\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt)\n    \n    if length(words) == 0\n   \
    \     return words\n    else\n        \n        words = words[2:end]\n       \
    \ \n        if all(islower(word))\n            return words\n        else\n  \
    \          \n            words = words[2:end]\n            \n            words\
    \ = words[2:end]\n            \n            return words\n        end\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0uq5lx8k.jl:35\nin expression starting at\
    \ /tmp/tmp0uq5lx8k.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    \n    if length(words) == 0\n  \
    \      return words\n    end\n    \n    words = split(txt, \",\")\n    \n    if\
    \ length(words) == 0\n        return words\n    end\n    \n    words = split(txt,\
    \ \"-\")\n    \n    if length(words) == 0\n        return words\n    end\n   \
    \ \n    words = split(txt, \";\")\n    \n    if length(words) == 0\n        return\
    \ words\n    end\n    \n    words = split(txt, \":\")\n    \n    if length(words)\
    \ == 0\n        return words\n    end\n    \n    words = split(txt, \"/\")\n \
    \   \n    if length(words) == 0\n        return words\n    end\n    \n    words\
    \ = split(txt, \"\\\\\")\n    \n    if length(words) == 0\n        return words\n\
    \    end\n    \n    words = split(txt, \"'\")\n    \n    if length(words) == 0\n\
    \        return words\n    end\n    \n    words = split(txt, \"\\\"\")\n    \n\
    \    if length(words) == 0\n        return words\n    end\n    \n    words = split(txt,\
    \ \"?\")\n    \n    if length(words) == 0\n        return words\n    end\n   \
    \ \n    words = split(txt, \"!\")\n    \n    if length(words) == 0\n        return\
    \ words\n    end\n    \n    words = split(txt, \"#\")\n    \n    if length(words)\
    \ == 0\n        return words\n    end\n    \n    words = split(txt, \"$\")\n \
    \   \n    if length(words) == 0\n        return words\n    end\n    \n    words\
    \ = split(txt, \"%\")\n    \n    if length(words) == 0\n        return words\n\
    \    end\n    \n    words = split(txt, \"^\")\n    \n    if length(words) == 0\n\
    \        return words\n    end\n    \n    words = split(txt, \"&\")\n    \n  \
    \  if length(words) == 0\n        return words\n    end\n    \n    words = split(txt,\
    \ \"*\")\n    \n    if length(words) == 0\n        return words\n    end\n   \
    \ \n    words = split(txt, \"(\")\n    \n    if length(words) == 0\n        return\
    \ words\n    end\n    \n    words = split(txt, \")\")\n    \n    if length(words)\
    \ == 0\n        return words\n    end\n    \n    words = split(txt, \"+\")\n \
    \   \n    if length(words) == 0\n        return words\n    end\n    \n    words\
    \ = split(txt, \"-\")\n    \n    if length(words) == 0\n        return words\n\
    \    end\n    \n    words = split(txt, \"=\")\n    \n    if length(words) == 0\n\
    \        return words\n    end\n    \n    words = split(txt, \"<\")\n    \n  \
    \  if length(words) == 0\n        return words\n\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0fd6ibh4.jl:86\nin expression starting at\
    \ /tmp/tmp0fd6ibh4.jl:86\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt)\n    \n    if length(words) == 0\n   \
    \     return words\n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa91e079w.jl:1\nin expression starting at /tmp/tmpa91e079w.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words_split = Vector{String}(undef, 0)\n\
    \    for word in words\n        if !contains(word, \" \")\n            words_split\
    \ = words_split ++ [word]\n        else\n            words_split = words_split\
    \ ++ split(word)\n        end\n    end\n    return length(words_split)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,
    0 broken.

    in expression starting at /tmp/tmphr5ig05f.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmphr5ig05f.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ ++ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main\
    \ /tmp/tmphr5ig05f.jl:18\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphr5ig05f.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphr5ig05f.jl:29\ntest set:\
    \ Error During Test at /tmp/tmphr5ig05f.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: ++\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmphr5ig05f.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphr5ig05f.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphr5ig05f.jl:29\ntest set:\
    \ Error During Test at /tmp/tmphr5ig05f.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: ++\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmphr5ig05f.jl:18\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmphr5ig05f.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphr5ig05f.jl:29\ntest set:\
    \ Error During Test at /tmp/tmphr5ig05f.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ ++ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main\
    \ /tmp/tmphr5ig0"
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = filter(x -> !isempty(x),\
    \ words)\n    words = filter(x -> !isascii(x), words)\n    words = filter(x ->\
    \ !islowercase(x), words)\n    words = filter(x -> !isuppercase(x), words)\n \
    \   words = filter(x -> !isdigit(x), words)\n    words = filter(x -> !issymbol(x),\
    \ words)\n    words = filter(x -> !isascii(x), words)\n    words = filter(x ->\
    \ !islowercase(x), words)\n    words = filter(x -> !isuppercase(x), words)\n \
    \   words = filter(x -> !isdigit(x), words)\n    words = filter(x -> !issymbol(x),\
    \ words)\n    words = filter(x -> !isascii(x), words)\n    words = filter(x ->\
    \ !islowercase(x), words)\n    words = filter(x -> !isuppercase(x), words)\n \
    \   words = filter(x -> !isdigit(x), words)\n    words = filter(x -> !issymbol(x),\
    \ words)\n    words = filter(x -> !isascii(x), words)\n    words = filter(x ->\
    \ !islowercase(x), words)\n    words = filter(x -> !isuppercase(x), words)\n \
    \   words = filter(x -> !isdigit(x), words)\n    words = filter(x -> !issymbol(x),\
    \ words)\n    words = filter(x -> !isascii(x), words)\n    words = filter(x ->\
    \ !islowercase(x), words)\n    words = filter(x -> !isuppercase(x), words)\n \
    \   words = filter(x -> !isdigit(x), words)\n    words = filter(x -> !issymbol(x),\
    \ words)\n    words = filter(x -> !isascii(x), words)\n    words = filter(x ->\
    \ !islowercase(x), words)\n    words = filter(x -> !isuppercase(x), words)\n \
    \   words = filter(x -> !isdigit(x), words)\n    words = filter(x -> !issymbol(x),\
    \ words)\n    words = filter(x -> !isascii(x), words)\n    words = filter(x ->\
    \ !islowercase(x), words)\n    words = filter(x -> !isuppercase(x), words)\n \
    \   words = filter(x -> !isdigit(x), words)\n    words = filter(x -> !issymbol(x),\
    \ words)\n    words = filter(x -> !isascii(x), words)\n    words = filter(x ->\
    \ !islowercase(x), words)\n    words = filter(x -> !isuppercase(x), words)\n \
    \   words = filter(x -> !isdigit(x), words)\n    words = filter(x -> !issymbol(x),\
    \ words)\n    words = filter(x -> !isascii(x), words)\n    words = filter(x ->\
    \ !islowercase(x), words)\n    words = filter(x -> !isuppercase(x), words)\n \
    \   words = filter(x -> !isdigit(x), words)\n    words = filter(x -> !issymbol(x),\
    \ \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpysb6koid.jl:63\nin expression starting at\
    \ /tmp/tmpysb6koid.jl:63\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmp9nwd0_h6.jl:54\nin expression starting at /tmp/tmp9nwd0_h6.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_vec = Vector{String}(undef,\
    \ 0)\n    for word in words\n        words_vec += split(word, \",\")\n    end\n\
    \    return words_vec\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    count_letters(txt::String)\n\
    \    Count the number of lower-case letters with odd order in the alphabet, ord('a')\
    \ = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    >>> count_letters(\"\
    Hello world!\")\n    3\n    >>> count_letters(\"Hello,world!\")\n    3\n    >>>\
    \ count_letters(\"abcdef\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk9wlc8du.jl:21\nin expression starting at\
    \ /tmp/tmpk9wlc8du.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = split(txt, \",\")\n\
    \    if length(words_split) == 0 \n        return words\n    else\n        return\
    \ words_split\n    end\nend\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj9_j9ya2.jl:22\nin expression starting at\
    \ /tmp/tmpj9_j9ya2.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \" \"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words\
    \ if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for\
    \ w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n\
    \    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for\
    \ w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n    words\
    \ = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if w !=\
    \ \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words\
    \ if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb479l0da.jl:59\nin expression starting at\
    \ /tmp/tmpb479l0da.jl:59\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    else\n        words = split(txt, \" \")\n        return Vector{String}(words)\n\
    \    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvcrs5918.jl:22\nin expression starting at\
    \ /tmp/tmpvcrs5918.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_vec = Vector{String}(undef,\
    \ 0)\n    for word in words\n        words_vec += split(word, \",\")\n    end\n\
    \    return words_vec\nend\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    Hello world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello,world!\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of words and returns a vector\
    \ of words with all words capitalized.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcp9wh9yf.jl:21\nin expression starting at\
    \ /tmp/tmpcp9wh9yf.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    if length(words) == 0\n        return length(words)\n    else\n \
    \       return words\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nI like\
    \ your answer but I think it would be more helpful if you explained what your\
    \ code does. Also, please don't use backticks for code blocks, use 4 spaces instead.\n\
    <|/ c |>\n<| c |>\nI added some explanation, thank you for the suggestion.\n<|/\
    \ c |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpummg90oh.jl:22\nin expression starting at\
    \ /tmp/tmpummg90oh.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    \n    if length(words) == 0\n  \
    \      return words\n    \n    words = [w for w in words if w != \"\"]\n    \n\
    \    if length(words) == 0\n        return words\n    \n    words = [w for w in\
    \ words if w != \",\"]\n    \n    if length(words) == 0\n        return words\n\
    \    \n    words = [w for w in words if w != \"a\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    words = [w for w in words if w != \"b\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    words = [w\
    \ for w in words if w != \"c\"]\n    \n    if length(words) == 0\n        return\
    \ words\n    \n    words = [w for w in words if w != \"d\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    words = [w for w in words if w != \"e\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    words = [w\
    \ for w in words if w != \"f\"]\n    \n    if length(words) == 0\n        return\
    \ words\n    \n    words = [w for w in words if w != \"g\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    words = [w for w in words if w != \"h\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    words = [w\
    \ for w in words if w != \"i\"]\n    \n    if length(words) == 0\n        return\
    \ words\n    \n    words = [w for w in words if w != \"j\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    words = [w for w in words if w != \"k\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    words = [w\
    \ for w in words if w != \"l\"]\n    \n    if length(words) == 0\n        return\
    \ words\n    \n    words = [w for w in words if w != \"m\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    words = [w for w in words if w != \"n\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    words = [w\
    \ for w in words if w != \"o\"]\n    \n    if length(words) == 0\n        return\
    \ words\n    \n    words = [w for w in words if w != \"p\"]\n    \n    if length(words)\
    \ == 0\n        return words\n    \n    words = [w for w in words if w != \"q\"\
    ]\n    \n    if length(words) == 0\n        return words\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp87x2emws.jl:1\nin expression starting at /tmp/tmp87x2emws.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    \n    words = split(txt, \" \")\n    \n    word_counts = Dict{String, Int64}()\n\
    \    for word in words\n        word_counts[word] = get(word_counts, word, 0)\
    \ + 1\n    end\n    \n    word_counts = sort(word_counts, by=x->x[1], rev=true)\n\
    \    \n    word_counts = filter(x -> x[1] % 2 != 0, word_counts)\n    \n    word_counts\
    \ = filter(x -> x[1] % 2 == 0, word_counts)\n    \n    word_counts = map(x ->\
    \ x[1], word_counts)\n    \n    word_counts = collect(word_counts)\n    \n   \
    \ word_counts = collect(word_counts)\n    \n    word_counts = collect(word_counts)\n\
    \    \n    word_counts = collect(word_counts)\n    \n    word_counts = collect(word_counts)\n\
    \    \n    word_counts = collect(word_counts)\n    \n    word_counts = collect(word_counts)\n\
    \    \n    word_counts = collect(word_counts)\n    \n    word_counts = collect(word_counts)\n\
    \    \n    word_counts = collect(word_counts)\n    \n    word_counts = collect(word_counts)\n\
    \    \n    word_counts = collect(word_counts)\n    \n    word_counts = collect(word_counts)\n\
    \    \n    word_counts = collect(word_counts)\n    \n    word_counts = collect(word_counts)\n\
    \    \n    word_counts = collect(word_counts)\n    \n    word_counts = collect(word_counts)\n\
    \    \n    word_counts = collect(word_counts)\n    \n    word_counts = collect(word_counts)\n\
    \    \n    word_counts = collect(word_counts)\n    \n    word_counts = collect(word_counts)\n\
    \    \n    word_counts = collect(word_counts)\n    \n    word_counts = collect(word_counts)\n\
    \    \n    word_counts = collect(word_counts)\n    \n    word_counts = collect(word_counts)\n\
    \    \n    word_counts = collect(word_counts)\n    \n    word_counts = collect(word_counts)\n\
    \    \n    word_counts = collect(word_counts)\n    \n    word_counts = collect(word_counts)\n\
    \    \n    word_counts = collect(word_counts)\n    \n    word_counts = collect(word_counts)\n\
    \    \n    word_counts = colle\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeuc7fa_5.jl:1\nin expression starting at /tmp/tmpeuc7fa_5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmp9nwd0_h6.jl:54\nin expression starting at /tmp/tmp9nwd0_h6.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if length(txt) == 0 \n        return [] \n    else \n        words\
    \ = split(txt, ' ') \n        words = [w for w in words if w != \"\"] \n     \
    \   words = [w for w in words if w != \",\"] \n        words = [w for w in words\
    \ if w != \"abcdef\"] \n        return words\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppdpkcntq.jl:24\nin expression starting at\
    \ /tmp/tmppdpkcntq.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words = [w for w in words if w != \"\"\
    ]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \" \"]\n    words = [w for w in words if w != \".\"]\n    words = [w\
    \ for w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n\
    \    words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgfv3e1h3.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgfv3e1h3.jl:1\n\
    in expression starting at /tmp/tmpgfv3e1h3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    word_counts = Dict()\n    for word in words\n\
    \        word_counts[word] = get(word_counts, word, 0) + 1\n    end\n    word_counts\
    \ = collect(values(word_counts))\n    word_counts = sort(word_counts)\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[word_counts mod 2 != 0]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[word_counts\
    \ mod 2 != 0]\n    word_counts = word_counts[2:end]\n    word_counts = word_counts[word_counts\
    \ mod 2 != 0]\n    word_counts = word_counts[2:end]\n    word_counts = word_counts[word_counts\
    \ mod 2 != 0]\n    word_counts = word_counts[2:end]\n    word_counts = word_counts[word_counts\
    \ mod 2 != 0]\n    word_counts = word_counts[2:end]\n    word_counts = word_counts[word_counts\
    \ mod 2 != 0]\n    word_counts = word_counts[2:end]\n    word_counts = word_counts[word_counts\
    \ mod 2 != 0]\n    word_counts = word_counts[2:end]\n    word_counts = word_counts[word_counts\
    \ mod 2 != 0]\n    word_counts = word_counts[2:end]\n    word_counts = word_counts[word_counts\
    \ mod 2 != 0]\n    word_counts = word_counts[2:end]\n    word_counts = word_counts[word_counts\
    \ mod 2 != 0]\n    word_counts = word_counts[2:end]\n    word_counts = word_counts[word_counts\
    \ mod 2 != 0]\n    word_counts = word_counts[2:end]\n    word_counts = word_counts[word_counts\
    \ mod 2 != 0]\n    word_counts = word_counts[2:end]\n    word_counts = word_counts[word_counts\
    \ mod 2 != 0]\n    word_counts = word_counts[2:end]\n    word_counts = word_counts[word_counts\
    \ mod 2 != 0]\n    word_counts = word_counts[2:end]\n    word_counts = word_counts[word_counts\
    \ mod 2 != 0]\n    word_counts = word_counts[2:end]\n    word_counts = word_counts[word_counts\
    \ mod 2 != 0]\n    word_counts = word_counts[2:end]\n    word_counts = word_counts[word_counts\
    \ mod 2 != 0]\n    word_counts = word_counts[2:end]\n    word_counts = word_counts[word_counts\
    \ mod 2 != 0]\n    word_counts = word_counts[2:end]\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp35srws1y.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp35srws1y.jl:1\n\
    in expression starting at /tmp/tmp35srws1y.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = words[words != \"\"]\n \
    \   words = words[words != \",\"]\n    words = words[words != \".\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpevd23nin.jl:71\nin expression starting at\
    \ /tmp/tmpevd23nin.jl:71\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt)\n    \n    word_counts = Dict()\n    for\
    \ word in words\n        word_counts[word] = get(word_counts, word, 0) + 1\n \
    \   end\n    \n    word_counts = sort(word_counts, by=x->x[1], rev=true)\n   \
    \ \n    word_counts = reverse(word_counts)\n    \n    word_counts = filter(x ->\
    \ x[1] > 1, word_counts)\n    \n    word_counts = map(x -> x[1], word_counts)\n\
    \    \n    word_counts = filter(x -> x != 0, word_counts)\n    \n    word_counts\
    \ = sort(word_counts, by=x->x[1], rev=true)\n    \n    word_counts = reverse(word_counts)\n\
    \    \n    word_counts = map(x -> x[1], word_counts)\n    \n    word_counts =\
    \ filter(x -> x != 0, word_counts)\n    \n    word_counts = sort(word_counts,\
    \ by=x->x[1], rev=true)\n    \n    word_counts = reverse(word_counts)\n    \n\
    \    word_counts = map(x -> x[1], word_counts)\n    \n    word_counts = filter(x\
    \ -> x != 0, word_counts)\n    \n    word_counts = sort(word_counts, by=x->x[1],\
    \ rev=true)\n    \n    word_counts = reverse(word_counts)\n    \n    word_counts\
    \ = map(x -> x[1], word_counts)\n    \n    word_counts = filter(x -> x != 0, word_counts)\n\
    \    \n    word_counts = sort(word_counts, by=x->x[1], rev=true)\n    \n    word_counts\
    \ = reverse(word_counts)\n    \n    word_counts = map(x -> x[1], word_counts)\n\
    \    \n    word_counts = filter(x -> x != 0, word_counts)\n    \n    word_counts\
    \ = sort(word_counts, by=x->x[1], rev=true)\n    \n    word_counts = reverse(word_counts)\n\
    \    \n    word_counts = map(x -> x[1], word_counts)\n    \n    word_counts =\
    \ filter(x -> x != 0, word_counts)\n    \n    word_counts = sort(word_counts,\
    \ by=x->x[1], rev=true)\n    \n    word_counts = reverse(word_counts)\n    \n\
    \    word_counts = map(x -> x[1], word_counts)\n    \n    word_counts = filter(x\
    \ -> x != 0, word_counts)\n    \n    word_counts = sort(word_counts, by=x->x[1],\
    \ rev=true)\n    \n    word_count\nusing Test\n\n@testset begin\n\ncandidate =\
    \ split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxr37u78y.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxr37u78y.jl:1\n\
    in expression starting at /tmp/tmpxr37u78y.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    \n\
    \    if txt.includes(\",\")\n        return txt.split(\",\")\n    elseif txt.includes(\"\
    !\")\n        return txt.split(\"!\")\n    elseif txt.includes(\"?\")\n      \
    \  return txt.split(\"?\")\n    elseif txt.includes(\".\")\n        return txt.split(\"\
    .\")\n    elseif txt.includes(\",\")\n        return txt.split(\",\")\n    elseif\
    \ txt.includes(\"!\")\n        return txt.split(\"!\")\n    elseif txt.includes(\"\
    ?\")\n        return txt.split(\"?\")\n    elseif txt.includes(\".\")\n      \
    \  return txt.split(\".\")\n    elseif txt.includes(\",\")\n        return txt.split(\"\
    ,\")\n    elseif txt.includes(\"!\")\n        return txt.split(\"!\")\n    elseif\
    \ txt.includes(\"?\")\n        return txt.split(\"?\")\n    elseif txt.includes(\"\
    .\")\n        return txt.split(\".\")\n    elseif txt.includes(\",\")\n      \
    \  return txt.split(\",\")\n    elseif txt.includes(\"!\")\n        return txt.split(\"\
    !\")\n    elseif txt.includes(\"?\")\n        return txt.split(\"?\")\n    elseif\
    \ txt.includes(\".\")\n        return txt.split(\".\")\n    elseif txt.includes(\"\
    ,\")\n        return txt.split(\",\")\n    elseif txt.includes(\"!\")\n      \
    \  return txt.split(\"!\")\n    elseif txt.includes(\"?\")\n        return txt.split(\"\
    ?\")\n    elseif txt.includes(\".\")\n        return txt.split(\".\")\n    elseif\
    \ txt.includes(\",\")\n        return txt.split(\",\")\n    elseif txt.includes(\"\
    !\")\n        return txt.split(\"!\")\n    elseif txt.includes(\"?\")\n      \
    \  return txt.split(\"?\")\n    elseif txt.includes(\".\")\n        return txt.split(\"\
    .\")\n    elseif txt.includes(\",\")\n        return txt.split(\",\")\n    elseif\
    \ txt.includes(\"!\")\n        return txt.split(\"!\")\n    elseif txt.includes(\"\
    ?\")\n        return txt.split(\"?\")\n    elseif txt.includes(\".\")\n      \
    \  return txt.split(\".\")\n    elseif txt.includes(\",\")\n        return txt.split(\"\
    ,\")\n    elseif txt.includes(\"!\")\n        return txt.split(\"!\")\n    elseif\
    \ txt.includes(\"?\")\n        return txt.split(\"?\")\n    elseif txt.includes(\"\
    .\")\n        return txt.split(\".\")\n    elseif txt.includes(\",\")\n      \
    \  return txt.split(\",\")\n    elseif txt.includes(\"!\")\n        return txt.split(\"\
    !\")\n    elseif txt.includes(\"?\")\n        return txt.split(\"?\")\n    elseif\
    \ txt.includes(\".\")\n        return txt.split(\".\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvrj884sf.jl:1\nin expression starting at /tmp/tmpvrj884sf.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    word_counts = Dict()\n    for word\
    \ in words\n        word_counts[word] = get(word_counts, word, 0) + 1\n    end\n\
    \    word_counts = collect(values(word_counts))\n    word_counts = sort(word_counts)\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5s4cwapj.jl:67\nin expression starting at\
    \ /tmp/tmp5s4cwapj.jl:67\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"abcdef\"]\n    return length(words)\nend\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    Hello,world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of words and\
    \ returns a vector of pairs of words. Each pair should contain an index and a\
    \ word.\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4lkcqhdk.jl:20\nin expression starting at\
    \ /tmp/tmp4lkcqhdk.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if isempty(txt)\n        return txt\n    else\n        words =\
    \ split(txt, \" \")\n        words = [w for w in words if w != \"\"]\n       \
    \ words = [w for w in words if w != \",\"]\n        words = [w for w in words\
    \ if w != \".\"]\n        words = [w for w in words if w != \"!\"]\n        words\
    \ = [w for w in words if w != \"?\"]\n        words = [w for w in words if w !=\
    \ \"!\"]\n        words = [w for w in words if w != \"?\"]\n        words = [w\
    \ for w in words if w != \"!\"]\n        words = [w for w in words if w != \"\
    ?\"]\n        words = [w for w in words if w != \"!\"]\n        words = [w for\
    \ w in words if w != \"?\"]\n        words = [w for w in words if w != \"!\"]\n\
    \        words = [w for w in words if w != \"?\"]\n        words = [w for w in\
    \ words if w != \"!\"]\n        words = [w for w in words if w != \"?\"]\n   \
    \     words = [w for w in words if w != \"!\"]\n        words = [w for w in words\
    \ if w != \"?\"]\n        words = [w for w in words if w != \"!\"]\n        words\
    \ = [w for w in words if w != \"?\"]\n        words = [w for w in words if w !=\
    \ \"!\"]\n        words = [w for w in words if w != \"?\"]\n        words = [w\
    \ for w in words if w != \"!\"]\n        words = [w for w in words if w != \"\
    ?\"]\n        words = [w for w in words if w != \"!\"]\n        words = [w for\
    \ w in words if w != \"?\"]\n        words = [w for w in words if w != \"!\"]\n\
    \        words = [w for w in words if w != \"?\"]\n        words = [w for w in\
    \ words if w != \"!\"]\n        words = [w for w in words if w != \"?\"]\n   \
    \     words = [w for w in words if w != \"!\"]\n        words = [w for w in words\
    \ if w != \"?\"]\n        words = [w for w in words if w != \"!\"]\n        words\
    \ = [w for w in words if w != \"?\"]\n        words = [w for w in words if w !=\
    \ \"!\"]\n        words = [w for w in words if w != \"?\"]\n        words = [w\
    \ for w in words if w != \"!\"]\n        words = [w for w in words if w != \"\
    ?\"]\n        words = [w for w in words if w != \"!\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz1moi04a.jl:61\nin expression starting at\
    \ /tmp/tmpz1moi04a.jl:61\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    word_counts = Dict()\n    for word\
    \ in words\n        word_counts[word] = get(word_counts, word, 0) + 1\n    end\n\
    \    word_counts = sort(word_counts)\n    word_counts = reverse(collect(values(word_counts)))\n\
    \    word_counts = filter(x -> x % 2 == 1, word_counts)\n    word_counts = filter(x\
    \ -> x % 2 == 0, word_counts)\n    word_counts = collect(word_counts)\n    word_counts\
    \ = collect(zip(word_counts, words))\n    return word_counts\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"Hello,world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    abcdef\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ words and returns a vector of words split on commas ',' if the number of commas\
    \ equals the number of words in the text\n    You should also split on whitespaces\
    \ if no whitespaces exists in the text you should split on commas ',' if no commas\
    \ exists you should return the number of lower-case letters with odd order in\
    \ the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n\
    \    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"]\n    >>> split_words(\"\
    Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>> split_words(\"abcdef\")\n\
    \    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp45umwmcu.jl:27\nin expression starting at\
    \ /tmp/tmp45umwmcu.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    \n    if length(words) == 0\n  \
    \      return words\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpb6arjpou.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb6arjpou.jl:1\n\
    in expression starting at /tmp/tmpb6arjpou.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    word_counts = Dict()\n    for word\
    \ in words\n        word_counts[word] = get(word_counts, word, 0) + 1\n    end\n\
    \    word_counts = sort(word_counts, by=x->x[1], rev=true)\n    word_counts =\
    \ Dict([(k, v[1]) for (k, v) in word_counts])\n    word_counts = sort(word_counts,\
    \ by=x->x[2], rev=true)\n    word_counts = Dict([(k, v[1]) for (k, v) in word_counts])\n\
    \    word_counts = sort(word_counts, by=x->x[3], rev=true)\n    word_counts =\
    \ Dict([(k, v[1]) for (k, v) in word_counts])\n    word_counts = sort(word_counts,\
    \ by=x->x[4], rev=true)\n    word_counts = Dict([(k, v[1]) for (k, v) in word_counts])\n\
    \    word_counts = sort(word_counts, by=x->x[5], rev=true)\n    word_counts =\
    \ Dict([(k, v[1]) for (k, v) in word_counts])\n    word_counts = sort(word_counts,\
    \ by=x->x[6], rev=true)\n    word_counts = Dict([(k, v[1]) for (k, v) in word_counts])\n\
    \    word_counts = sort(word_counts, by=x->x[7], rev=true)\n    word_counts =\
    \ Dict([(k, v[1]) for (k, v) in word_counts])\n    word_counts = sort(word_counts,\
    \ by=x->x[8], rev=true)\n    word_counts = Dict([(k, v[1]) for (k, v) in word_counts])\n\
    \    word_counts = sort(word_counts, by=x->x[9], rev=true)\n    word_counts =\
    \ Dict([(k, v[1]) for (k, v) in word_counts])\n    word_counts = sort(word_counts,\
    \ by=x->x[10], rev=true)\n    word_counts = Dict([(k, v[1]) for (k, v) in word_counts])\n\
    \    word_counts = sort(word_counts, by=x->x[11], rev=true)\n    word_counts =\
    \ Dict([(k, v[1]) for (k, v) in word_counts])\n    word_counts = sort(word_counts,\
    \ by=x->x[12], rev=true)\n    word_counts = Dict([(k, v[1]) for (k, v) in word_counts])\n\
    \    word_counts = sort(word_counts, by=x->x[13], rev=true)\n    word_counts =\
    \ Dict([(k, v[1]) for (k, v) in word_counts])\n    word_counts = sort(word_counts,\
    \ by=x->x[\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptygh59d3.jl:1\nin expression starting at /tmp/tmptygh59d3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \".\"]\n    words = [w for w in words if w != \"?\"]\n    words\
    \ = [w for w in words if w != \"!\"]\n    words = [w for w in words if w != \"\
    !\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for w in words\
    \ if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w\
    \ for w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n\
    \    words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj3i8jhor.jl:59\nin expression starting at\
    \ /tmp/tmpj3i8jhor.jl:59\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if isempty(txt)\n        return Vector{String}()\n    else\n  \
    \      words = split(txt, \" \")\n        words = words[words != \"\"]\n     \
    \   words = words[words != \",\"]\n        words = words[words != \".\"]\n   \
    \     words = words[words != \"!\"]\n        words = words[words != \"?\"]\n \
    \       words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp6gj5i95b.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6gj5i95b.jl:1\n\
    in expression starting at /tmp/tmp6gj5i95b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    \n    words = [w for w in words\
    \ if w != \"\"]\n    \n    if length(words) == 0\n        return length(words)\n\
    \    end\n    \n    words = [w for w in words if w != \",\"]\n    \n    if length(words)\
    \ == 0\n        return length(words)\n    end\n    \n    words = [w for w in words\
    \ if w != \"a\" and w != \"b\" and w != \"c\" and w != \"d\" and w != \"e\" and\
    \ w != \"f\" and w != \"g\" and w != \"h\" and w != \"i\" and w != \"j\" and w\
    \ != \"k\" and w != \"l\" and w != \"m\" and w != \"n\" and w != \"o\" and w !=\
    \ \"p\" and w != \"q\" and w != \"r\" and w != \"s\" and w != \"t\" and w != \"\
    u\" and w != \"v\" and w != \"w\" and w != \"x\" and w != \"y\" and w != \"z\"\
    ]\n    \n    if length(words) == 0\n        return length(words)\n    end\n  \
    \  \n    return length(words)\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpvx_m9cec.jl:28\nin expression starting at /tmp/tmpvx_m9cec.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    word_counts = Dict()\n    for word\
    \ in words\n        if !haskey(word_counts, word)\n            word_counts[word]\
    \ = 1\n        else\n            word_counts[word] += 1\n        end\n    end\n\
    \    word_counts = sort(collect(values(word_counts)), by=x->x)\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t\
    @test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfdhe6old.jl:1\nin expression starting at /tmp/tmpfdhe6old.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \" \"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n\
    \    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words\
    \ if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for\
    \ w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if w !=\
    \ \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n\
    \    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words\
    \ if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n\
    \    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words\
    \ if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\n\"]\n    words = [w for w in words if w != \"\\r\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvh60b2h1.jl:59\nin expression starting at\
    \ /tmp/tmpvh60b2h1.jl:59\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \".\"]\n    words = [w for w in words if w != \"!\"]\n    words\
    \ = [w for w in words if w != \"?\"]\n    words = [w for w in words if w != \"\
    !\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for w in words\
    \ if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w\
    \ for w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n\
    \    words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwi01if4c.jl:59\nin expression starting at\
    \ /tmp/tmpwi01if4c.jl:59\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    word_counts = Dict{String, Int64}()\n\
    \    for word in words\n        if !haskey(word_counts, word)\n            word_counts[word]\
    \ = 1\n        else\n            word_counts[word] += 1\n        end\n    end\n\
    \    word_counts = collect(values(word_counts))\n    word_counts = sort(word_counts)\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpc8m4gg3f.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc8m4gg3f.jl:1\n\
    in expression starting at /tmp/tmpc8m4gg3f.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    if length(words) == 0\n        return words\n\
    \    \n    words = split(txt, \",\")\n    if length(words) == 0\n        return\
    \ words\n    \n    words = split(txt, \" \")\n    if length(words) == 0\n    \
    \    return words\n    \n    words = split(txt, \" \")\n    if length(words) ==\
    \ 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if length(words)\
    \ == 0\n        return words\n    \n    words = split(txt, \" \")\n    if \nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing condition in \"if\" at /tmp/tmp1nt617xz.jl:127\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp1nt617xz.jl:128\nin expression\
    \ starting at /tmp/tmp1nt617xz.jl:128\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    word_counts = Dict()\n    for word\
    \ in words\n        word_counts[word] = get(word_counts, word, 0) + 1\n    end\n\
    \    word_counts = sort(word_counts, by=x->x[1], rev=true)\n    word_counts =\
    \ reverse(word_counts)\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = sort(word_counts, by=x->x[2], rev=true)\n    word_counts = reverse(word_counts)\n\
    \    word_counts = word_counts[2:end]\n    word_counts = sort(word_counts, by=x->x[3],\
    \ rev=true)\n    word_counts = reverse(word_counts)\n    word_counts = word_counts[2:end]\n\
    \    word_counts = sort(word_counts, by=x->x[4], rev=true)\n    word_counts =\
    \ reverse(word_counts)\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = sort(word_counts, by=x->x[5], rev=true)\n    word_counts = reverse(word_counts)\n\
    \    word_counts = word_counts[2:end]\n    word_counts = sort(word_counts, by=x->x[6],\
    \ rev=true)\n    word_counts = reverse(word_counts)\n    word_counts = word_counts[2:end]\n\
    \    word_counts = sort(word_counts, by=x->x[7], rev=true)\n    word_counts =\
    \ reverse(word_counts)\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = sort(word_counts, by=x->x[8], rev=true)\n    word_counts = reverse(word_counts)\n\
    \    word_counts = word_counts[2:end]\n    word_counts = sort(word_counts, by=x->x[9],\
    \ rev=true)\n    word_counts = reverse(word_counts)\n    word_counts = word_counts[2:end]\n\
    \    word_counts = sort(word_counts, by=x->x[10], rev=true)\n    word_counts =\
    \ reverse(word_counts)\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = sort(word_counts, by=x->x[11], rev=true)\n    word_counts = reverse(word_counts)\n\
    \    word_counts = word_counts[2:end]\n    word_counts = sort(word_counts, by=x->x[12],\
    \ rev=true)\n    word_counts = reverse(word_counts)\n    word_counts = word_counts[2:end]\n\
    \    word_counts = sort(word_counts, by=x->x[13], rev=true)\n    word_counts =\
    \ reverse(word_\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t\
    @test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpusz3jenj.jl:57\nin expression starting at\
    \ /tmp/tmpusz3jenj.jl:57\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = words[words != \"\"]\n \
    \   words = words[words != \",\"]\n    words = words[words != \"and\"]\n    words\
    \ = words[words != \"or\"]\n    words = words[words != \"but\"]\n    words = words[words\
    \ != \"for\"]\n    words = words[words != \"with\"]\n    words = words[words !=\
    \ \"in\"]\n    words = words[words != \"on\"]\n    words = words[words != \"to\"\
    ]\n    words = words[words != \"as\"]\n    words = words[words != \"at\"]\n  \
    \  words = words[words != \"to\"]\n    words = words[words != \"on\"]\n    words\
    \ = words[words != \"in\"]\n    words = words[words != \"with\"]\n    words =\
    \ words[words != \"for\"]\n    words = words[words != \"but\"]\n    words = words[words\
    \ != \"or\"]\n    words = words[words != \"and\"]\n    words = words[words !=\
    \ \"as\"]\n    words = words[words != \"at\"]\n    words = words[words != \"on\"\
    ]\n    words = words[words != \"in\"]\n    words = words[words != \"with\"]\n\
    \    words = words[words != \"for\"]\n    words = words[words != \"but\"]\n  \
    \  words = words[words != \"or\"]\n    words = words[words != \"and\"]\n    words\
    \ = words[words != \"as\"]\n    words = words[words != \"at\"]\n    words = words[words\
    \ != \"on\"]\n    words = words[words != \"in\"]\n    words = words[words != \"\
    with\"]\n    words = words[words != \"for\"]\n    words = words[words != \"but\"\
    ]\n    words = words[words != \"or\"]\n    words = words[words != \"and\"]\n \
    \   words = words[words != \"as\"]\n    words = words[words != \"at\"]\n    words\
    \ = words[words != \"on\"]\n    words = words[words != \"in\"]\n    words = words[words\
    \ != \"with\"]\n    words = words[words != \"for\"]\n    words = words[words !=\
    \ \"but\"]\n    words = words[words != \"or\"]\n    words = words[words != \"\
    and\"]\n    words = words[words != \"as\"]\n    words = words[words != \"at\"\
    ]\n    words = words[words != \"on\"]\n    words = words[words != \"\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd9apdgfo.jl:71\nin expression starting at\
    \ /tmp/tmpd9apdgfo.jl:71\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words = words[words != \"\"]\n    words\
    \ = words[words != \",\"]\n    words = words[words != \".\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkuzqsoae.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkuzqsoae.jl:1\n\
    in expression starting at /tmp/tmpkuzqsoae.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    if length(words) == 0\n        return words\n\
    \    \n    words_split = split(words)\n    \n    words_split = [w for w in words_split\
    \ if w != \"\"]\n    \n    words_split = [w for w in words_split if w != \",\"\
    ]\n    \n    words_split = [w for w in words_split if w != \" \"]\n    \n    words_split\
    \ = [w for w in words_split if w != \"\\t\"]\n    \n    words_split = [w for w\
    \ in words_split if w != \"\\n\"]\n    \n    words_split = [w for w in words_split\
    \ if w != \"\\r\"]\n    \n    words_split = [w for w in words_split if w != \"\
    \\t\"]\n    \n    words_split = [w for w in words_split if w != \"\\n\"]\n   \
    \ \n    words_split = [w for w in words_split if w != \"\\r\"]\n    \n    words_split\
    \ = [w for w in words_split if w != \"\\t\"]\n    \n    words_split = [w for w\
    \ in words_split if w != \"\\n\"]\n    \n    words_split = [w for w in words_split\
    \ if w != \"\\r\"]\n    \n    words_split = [w for w in words_split if w != \"\
    \\t\"]\n    \n    words_split = [w for w in words_split if w != \"\\n\"]\n   \
    \ \n    words_split = [w for w in words_split if w != \"\\r\"]\n    \n    words_split\
    \ = [w for w in words_split if w != \"\\t\"]\n    \n    words_split = [w for w\
    \ in words_split if w != \"\\n\"]\n    \n    words_split = [w for w in words_split\
    \ if w != \"\\r\"]\n    \n    words_split = [w for w in words_split if w != \"\
    \\t\"]\n    \n    words_split = [w for w in words_split if w != \"\\n\"]\n   \
    \ \n    words_split = [w for w in words_split if w != \"\\r\"]\n    \n    words_split\
    \ = [w for w in words_split if w != \"\\t\"]\n    \n    words_split = [w for w\
    \ in words_split if w != \"\\n\"]\n    \n    words_split = [w for w in words_split\
    \ if w != \"\\r\"]\n    \n    words_split = [w for w in words_split if w != \"\
    \\t\"]\n    \n    words_split = [w for w in words_split if w != \"\\n\"]\n   \
    \ \n    words_split = [w for w in words_split if w != \"\\r\"]\n    \n    words_split\
    \ = [w for w in words_split if w != \"\\t\"]\n    \n    words_split = [w for w\
    \ in words_split if w \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmp42l0ask5.jl:77\nin expression starting at /tmp/tmp42l0ask5.jl:77\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt)\n    \n    if length(words) == 0\n   \
    \     return words\n    \n    words_with_commas = words[:]\n    \n    for word\
    \ in words\n        words_with_commas = words_with_commas.append(word)\n    end\n\
    \    \n    words_with_commas = words_with_commas[words_with_commas[end] .!= \"\
    ,\"]\n    \n    if length(words_with_commas) == 0\n        return words\n    end\n\
    \    \n    words_with_commas = words_with_commas[words_with_commas[end] .!= \"\
    ,\"]\n    \n    if length(words_with_commas) == 0\n        return words\n    end\n\
    \    \n    words_with_commas = words_with_commas[words_with_commas[end] .!= \"\
    ,\"]\n    \n    if length(words_with_commas) == 0\n        return words\n    end\n\
    \    \n    words_with_commas = words_with_commas[words_with_commas[end] .!= \"\
    ,\"]\n    \n    if length(words_with_commas) == 0\n        return words\n    end\n\
    \    \n    words_with_commas = words_with_commas[words_with_commas[end] .!= \"\
    ,\"]\n    \n    if length(words_with_commas) == 0\n        return words\n    end\n\
    \    \n    words_with_commas = words_with_commas[words_with_commas[end] .!= \"\
    ,\"]\n    \n    if length(words_with_commas) == 0\n        return words\n    end\n\
    \    \n    words_with_commas = words_with_commas[words_with_commas[end] .!= \"\
    ,\"]\n    \n    if length(words_with_commas) == 0\n        return words\n    end\n\
    \    \n    words_with_commas = words_with_commas[words_with_commas[end] .!= \"\
    ,\"]\n    \n    if length(words_with_commas) == 0\n        return words\n    end\n\
    \    \n    words_with_commas = words_with_commas[words_with_commas[end] .!= \"\
    ,\"]\n    \n    if length(words_with_commas) == 0\n        return words\n    end\n\
    \    \n    words_with_commas = words_with_commas[words_with_commas[end] .!= \"\
    ,\"]\n    \n    if length(words_with_commas) == 0\n        return words\n    end\n\
    \    \n    words_with_commas = words_with_commas[words_with_commas[end] .!= \"\
    ,\"]\n    \n    if length(words_with_commas) == 0\n        return words\n    end\n\
    \    \n    words_with_commas = words_with_commas[words_with_commas[end] \nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyvklyqte.jl:1\nin expression starting at /tmp/tmpyvklyqte.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return txt\n    else\n        words = split(txt,\
    \ \" \")\n        words = words[words != \"\"]\n        return words\n    end\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,string |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfxy40435.jl:25\nin expression starting at\
    \ /tmp/tmpfxy40435.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = words[words != \"\"]\n \
    \   words = words[words != \",\"]\n    words = words[words != \".\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpevd23nin.jl:71\nin expression starting at\
    \ /tmp/tmpevd23nin.jl:71\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    word_counts = Dict()\n    for w in words\n\
    \        if !haskey(word_counts, w)\n            word_counts[w] = 1\n        else\n\
    \            word_counts[w] += 1\n        end\n    end\n    word_counts = sort(collect(values(word_counts)))\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = \nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpce384wz2.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpce384wz2.jl:1\n\
    in expression starting at /tmp/tmpce384wz2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_vec = Vector{String}()\n \
    \   for word in words\n        if !contains(word, \",\")\n            words_vec\
    \ += split(word, \"_\")\n        else\n            words_vec += split(word, \"\
    ,\")\n        end\n    end\n    return words_vec\nend\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| c |>\nThis does not seem to work. `split_words(\"Hello world!\")` returns\
    \ `[\"Hello\", \"world!\"]` instead of `[\"Hello\", \"world!\"]`.\n<|/ c |>\n\
    <| c |>\nI tested it and it works fine. Maybe you have a typo or something else?\n\
    <|/ c |>\n<| c |>\nI tested it again and it works fine for me. Maybe you have\
    \ a typo or something else?\n<|/ c |>\n<| c |>\nI tested it again and it works\
    \ fine for me. Maybe you have a typo or something else?\n<|/ c |>\n<| c |>\nI\
    \ tested it again and it works fine for me. Maybe you have a typo or something\
    \ else?\n<|/ c |>\n<| a dscore=2 |>\nI wrote a package for this: https://github.com/jamie-may/SplitWords\n\
    <code>\nusing SplitWords\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7jedmlhj.jl:25\nin expression starting at\
    \ /tmp/tmp7jedmlhj.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = words[words != \"\"]\n \
    \   if length(words) == 0\n        return length(words)\n    else\n        return\
    \ words\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nI guess you mean\
    \ `words = split(txt, \" \")` instead of `words = split(txt, \",\")`\n<|/ c |>\n\
    <| c |>\nThanks, I fixed it\n<|/ c |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd346uy29.jl:22\nin expression starting at\
    \ /tmp/tmpd346uy29.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \" \"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words\
    \ if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for\
    \ w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n\
    \    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for\
    \ w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n    words\
    \ = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if w !=\
    \ \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words\
    \ if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb479l0da.jl:59\nin expression starting at\
    \ /tmp/tmpb479l0da.jl:59\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words_split = Vector{String}(undef, 0)\n\
    \    for w in words\n        words_split = words_split ++ split(w)\n    end\n\
    \    words_split\nend\n</cell>\n<code language=julia-1.0>\nsplit_words(\"Hello\
    \ world!\")\n</cell>\n<code language=julia-1.0>\nsplit_words(\"Hello,world!\"\
    )\n</cell>\n<code language=julia-1.0>\nsplit_words(\"abcdef\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of words and returns a vector\
    \ of strings where each string is a concatenation of all the words in the original\
    \ vector\nseparated by a space (\" \").\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8qdzd8rw.jl:21\nin expression starting at\
    \ /tmp/tmp8qdzd8rw.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt)\n    \n    if length(words) == 0\n   \
    \     return words\n    \n    words_split = split(words)\n    \n    if length(words_split)\
    \ == 0 \n        return words\n    \n    words_split\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnaop2hi9.jl:1\nin expression starting at /tmp/tmpnaop2hi9.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    \n    if length(words) == 0\n  \
    \      return words\n    end\n    \n    if length(words) == 1\n        return\
    \ words\n    end\n    \n    if length(words) == 2\n        return words\n    end\n\
    \    \n    if length(words) == 3\n        return words\n    end\n    \n    if\
    \ length(words) == 4\n        return words\n    end\n    \n    if length(words)\
    \ == 5\n        return words\n    end\n    \n    if length(words) == 6\n     \
    \   return words\n    end\n    \n    if length(words) == 7\n        return words\n\
    \    end\n    \n    if length(words) == 8\n        return words\n    end\n   \
    \ \n    if length(words) == 9\n        return words\n    end\n    \n    if length(words)\
    \ == 10\n        return words\n    end\n    \n    if length(words) == 11\n   \
    \     return words\n    end\n    \n    if length(words) == 12\n        return\
    \ words\n    end\n    \n    if length(words) == 13\n        return words\n   \
    \ end\n    \n    if length(words) == 14\n        return words\n    end\n    \n\
    \    if length(words) == 15\n        return words\n    end\n    \n    if length(words)\
    \ == 16\n        return words\n    end\n    \n    if length(words) == 17\n   \
    \     return words\n    end\n    \n    if length(words) == 18\n        return\
    \ words\n    end\n    \n    if length(words) == 19\n        return words\n   \
    \ end\n    \n    if length(words) == 20\n        return words\n    end\n    \n\
    \    if length(words) == 21\n        return words\n    end\n    \n    if length(words)\
    \ == 22\n        return words\n    end\n    \n    if length(words) == 23\n   \
    \     return words\n    end\n    \n    if length(words) == 24\n        return\
    \ words\n    end\n    \n    if length(words) == 25\n        return words\n   \
    \ end\n    \n    if length(words) == 26\n        return words\n    end\n    \n\
    \    if length(words) == 27\n        return words\n    end\n    \n    if length(words)\
    \ == 28\n        return words\n    end\n    \n    if length(words) == 29\n   \
    \     return words\n    end\n    \n    if length(words) == 30\n        return\
    \ words\n    end\n    \n    if length(words) == 31\n        return words\n   \
    \ end\n    \n    if length(words) == 32\n        return words\n    end\n    \n\
    \    if length(words) == 33\n        return words\n    end\n    \n    if length(words)\
    \ == 34\n        return words\n    end\n    \n    if length(words) == 35\n   \
    \     return words\n    end\n    \n    if length(words) == 36\n        return\
    \ words\n    end\n    \n    if length(words) == 37\n        return words\n   \
    \ end\n    \n    if length(words) == 38\n        return words\n    end\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp32h57ih2.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp32h57ih2.jl:1\n\
    in expression starting at /tmp/tmp32h57ih2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"abcdef\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz1234567890\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+1234567890\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*()_+1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$%\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdqdan3d1.jl:22\nin expression starting at\
    \ /tmp/tmpdqdan3d1.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    word_counts = Dict{String, Int64}()\n \
    \   for word in words\n        if !haskey(word_counts, word)\n            word_counts[word]\
    \ = 1\n        else\n            word_counts[word] += 1\n        end\n    end\n\
    \    word_counts = collect(values(word_counts))\n    word_counts = sort(word_counts)\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplqilt8sr.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplqilt8sr.jl:1\n\
    in expression starting at /tmp/tmplqilt8sr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \" \"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppwd9u4ut.jl:59\nin expression starting at\
    \ /tmp/tmppwd9u4ut.jl:59\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    words = words[2:end]\n    words\
    \ = words[2:end]\n    words = words[2:end]\n    \nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzfnwg8xc.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzfnwg8xc.jl:1\n\
    in expression starting at /tmp/tmpzfnwg8xc.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"abcdef\"]\n    return words\nend\n</cell>\n<code language=julia-1.3>\n\
    split_words(\"Hello world!\")\n</cell>\n<code language=julia-1.3>\nsplit_words(\"\
    Hello,world!\")\n</cell>\n<code language=julia-1.3>\nsplit_words(\"abcdef\")\n\
    </cell>\n<code language=julia-1.3>\nsplit_words(\"Hello world!\", \" \")\n</cell>\n\
    <code language=julia-1.3>\nsplit_words(\"Hello world!\", \",\")\n</cell>\n<code\
    \ language=julia-1.3>\nsplit_words(\"Hello world!\", \"abcdef\")\n</cell>\n<code\
    \ language=julia-1.3>\nsplit_words(\"Hello world!\", \" \")\n</cell>\n<code language=julia-1.3>\n\
    split_words(\"Hello world!\", \",\")\n</cell>\n<code language=julia-1.3>\nsplit_words(\"\
    Hello world!\", \"abcdef\")\n</cell>\n<code language=julia-1.3>\nsplit_words(\"\
    Hello world!\", \" \")\n</cell>\n<code language=julia-1.3>\nsplit_words(\"Hello\
    \ world!\", \",\")\n</cell>\n<code language=julia-1.3>\nsplit_words(\"Hello world!\"\
    , \"abcdef\")\n</cell>\n<code language=julia-1.3>\nsplit_words(\"Hello world!\"\
    , \" \")\n</cell>\n<code language=julia-1.3>\nsplit_words(\"Hello world!\", \"\
    ,\")\n</cell>\n<code language=julia-1.3>\nsplit_words(\"Hello world!\", \"abcdef\"\
    )\n</cell>\n<code language=julia-1.3>\nsplit_words(\"Hello world!\", \" \")\n\
    </cell>\n<code language=julia-1.3>\nsplit_words(\"Hello world!\", \",\")\n</cell>\n\
    <code language=julia-1.3>\nsplit_words(\"Hello world!\", \"abcdef\")\n</cell>\n\
    <code language=julia-1.3>\nsplit_words(\"Hello world!\", \" \")\n</cell>\n<code\
    \ language=julia-1.3>\nsplit_words(\"Hello world!\", \",\")\n</cell>\n<code language=julia-1.3>\n\
    split_words(\"Hello world!\", \"abcdef\")\n</cell>\n<code language=julia-1.3>\n\
    split_words(\"Hello world!\", \" \")\n</cell>\n<code language=julia-1.3>\nsplit_words(\"\
    Hello world!\", \",\")\n</cell>\n<code language=julia-1.3>\nsplit_words(\"Hello\
    \ world!\", \"\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdl7ydt3u.jl:20\nin expression starting at\
    \ /tmp/tmpdl7ydt3u.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    words_split = []\n \
    \   \n    for word in words\n        words_split.push(word)\n    end\n    \n \
    \   words_split = unique(words_split)\n    \n    if length(words_split) == 0 \n\
    \        return length(words)\n    end\n    \n    words_split = sort(words_split)\n\
    \    \n    words_split = words_split[words_split .!= \"\"]\n    \n    if length(words_split)\
    \ == 0 \n        return length(words)\n    end\n    \n    words_split = words_split[words_split\
    \ .!= \",\"]\n    \n    if length(words_split) == 0 \n        return length(words)\n\
    \    end\n    \n    words_split = words_split[words_split .!= \".\"]\n    \n \
    \   if length(words_split) == 0 \n        return length(words)\n    end\n    \n\
    \    words_split = words_split[words_split .!= \",.\"]\n    \n    if length(words_split)\
    \ == 0 \n        return length(words)\n    end\n    \n    words_split = words_split[words_split\
    \ .!= \",,\"]\n    \n    if length(words_split) == 0 \n        return length(words)\n\
    \    end\n    \n    words_split = words_split[words_split .!= \",.,\"]\n    \n\
    \    if length(words_split) == 0 \n        return length(words)\n    end\n   \
    \ \n    words_split = words_split[words_split .!= \",,,\"]\n    \n    if length(words_split)\
    \ == 0 \n        return length(words)\n    end\n    \n    words_split = words_split[words_split\
    \ .!= \",,,,\"]\n    \n    if length(words_split) == 0 \n        return length(words)\n\
    \    end\n    \n    words_split = words_split[words_split .!= \",,,,,\"]\n   \
    \ \n    if length(words_split) == 0 \n        return length(words)\n    end\n\
    \    \n    words_split = words_split[words_split .!= \",,,,,,\"]\n    \n    if\
    \ length(words_split) == 0 \n        return length(words)\n    end\n    \n   \
    \ words_split = words_split[words_split .!= \",,,,,,,\"]\n    \n    if length(words_split)\
    \ == 0 \n        return length(words)\n    end\n    \n    words_split = words_split[words_split\
    \ .!= \",,,,,,,,\"]\n    \n    if length(words_split) == 0 \n        return length(words)\n\
    \    end\n    \n    words_split = words_split[words_split .!= \",,,,,,,,,\"]\n\
    \    \n    if length(words_split) == 0 \n        return length(words)\n    end\n\
    \    \n    words_split = words_split[words_split .!= \",,,,,,,,,,\"]\n    \n \
    \   if length(words_split) == 0 \n        return length(words)\n    end\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmxkwvns_.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmxkwvns_.jl:1\n\
    in expression starting at /tmp/tmpmxkwvns_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = map(lowercase, words)\n\
    \    words = filter(!is_empty, words)\n    words = filter(!is_empty, words)\n\
    \    words = filter(!is_empty, words)\n    words = filter(!is_empty, words)\n\
    \    words = filter(!is_empty, words)\n    words = filter(!is_empty, words)\n\
    \    words = filter(!is_empty, words)\n    words = filter(!is_empty, words)\n\
    \    words = filter(!is_empty, words)\n    words = filter(!is_empty, words)\n\
    \    words = filter(!is_empty, words)\n    words = filter(!is_empty, words)\n\
    \    words = filter(!is_empty, words)\n    words = filter(!is_empty, words)\n\
    \    words = filter(!is_empty, words)\n    words = filter(!is_empty, words)\n\
    \    words = filter(!is_empty, words)\n    words = filter(!is_empty, words)\n\
    \    words = filter(!is_empty, words)\n    words = filter(!is_empty, words)\n\
    \    words = filter(!is_empty, words)\n    words = filter(!is_empty, words)\n\
    \    words = filter(!is_empty, words)\n    words = filter(!is_empty, words)\n\
    \    words = filter(!is_empty, words)\n    words = filter(!is_empty, words)\n\
    \    words = filter(!is_empty, words)\n    words = filter(!is_empty, words)\n\
    \    words = filter(!is_empty, words)\n    words = filter(!is_empty, words)\n\
    \    words = filter(!is_empty, words)\n    words = filter(!is_empty, words)\n\
    \    words = filter(!is_empty, words)\n    words = filter(!is_empty, words)\n\
    \    words = filter(!is_empty, words)\n    words = filter(!is_empty, words)\n\
    \    words = filter(!is_empty, words)\n    words = filter(!is_empty, words)\n\
    \    words = filter(!is_empty, words)\n    words = filter(!is_empty, words)\n\
    \    words = filter(!is_empty, words)\n    words = filter(!is_empty, words)\n\
    \    words = filter(!is_empty, words)\n    words = filter(!is_empty, words)\n\
    \    words = filter(!is_empty, words)\n    words = filter(!is_empty, words)\n\
    \    words = filter(!is_empty, words)\n    words = filter(!is_empty, words)\n\
    \    words = filter(!is_empty, words)\n    words = filter(!is_empty, words)\n\
    \    words = filter(!is_empty, words)\n    words = filter(!is_empty, words)\n\
    \    words = filter(!is_empty, words)\n    words = filter(!is_empty, words)\n\
    \    words = filter(!is_empty, words)\n    words = filter(!is_empty, words)\n\
    \    words = filter(!is_empty, words)\n    words = filter(!is_empty, words)\n\
    \    words = filter(!is_empty, words)\n    words = filter(!is_empty, words)\n\
    \    words = filter(!is_empty, words)\n    words = filter(!is_empty, words)\n\
    \    words = \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8d9l9hkv.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8d9l9hkv.jl:1\n\
    in expression starting at /tmp/tmp8d9l9hkv.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if isempty(txt)\n        return Vector{String}()\n    elseif isempty(txt)\n\
    \        return txt\n    else\n        words = split(txt, \" \")\n        words\
    \ = [w for w in words if w != \"\"]\n        words = [w for w in words if w !=\
    \ \",\"]\n        words = [w for w in words if w != \"-\"]\n        words = [w\
    \ for w in words if w != \"_\"]\n        words = [w for w in words if w != \"\
    !\"]\n        words = [w for w in words if w != \"?\"]\n        words = [w for\
    \ w in words if w != \"!\"]\n        words = [w for w in words if w != \"?\"]\n\
    \        words = [w for w in words if w != \"-\"]\n        words = [w for w in\
    \ words if w != \"_\"]\n        words = [w for w in words if w != \"?\"]\n   \
    \     words = [w for w in words if w != \"!\"]\n        words = [w for w in words\
    \ if w != \"?\"]\n        words = [w for w in words if w != \"-\"]\n        words\
    \ = [w for w in words if w != \"_\"]\n        words = [w for w in words if w !=\
    \ \"?\"]\n        words = [w for w in words if w != \"!\"]\n        words = [w\
    \ for w in words if w != \"?\"]\n        words = [w for w in words if w != \"\
    -\"]\n        words = [w for w in words if w != \"_\"]\n        words = [w for\
    \ w in words if w != \"?\"]\n        words = [w for w in words if w != \"!\"]\n\
    \        words = [w for w in words if w != \"?\"]\n        words = [w for w in\
    \ words if w != \"-\"]\n        words = [w for w in words if w != \"_\"]\n   \
    \     words = [w for w in words if w != \"?\"]\n        words = [w for w in words\
    \ if w != \"!\"]\n        words = [w for w in words if w != \"?\"]\n        words\
    \ = [w for w in words if w != \"-\"]\n        words = [w for w in words if w !=\
    \ \"_\"]\n        words = [w for w in words if w != \"?\"]\n        words = [w\
    \ for w in words if w != \"!\"]\n        words = [w for w in words if w != \"\
    ?\"]\n        words = [w for w in words if w != \"-\"]\n        words = [w for\
    \ w in words if w != \"_\"]\n        words = [w for w in words if w != \"?\"]\n\
    \        words = [w for w in words if \nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpu90fmfk2.jl:59\nin expression starting at /tmp/tmpu90fmfk2.jl:59\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\r\"\n        return Vector{String}()\n    elseif txt == \"\\t\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\r\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\t\\n\"\n        return Vector{String}()\n    elseif txt\
    \ == \"\\n\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n   \
    \     return Vector{String}()\n    elseif txt == \"\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\n\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\n\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\n\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\n\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\n\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\n\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\n\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\n\"\n        return \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphe0bnmfk.jl:1\nin expression starting at /tmp/tmphe0bnmfk.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"abcdef\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHI\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnkd0_gkr.jl:29\nin expression starting at\
    \ /tmp/tmpnkd0_gkr.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"abcdef\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}\\\
    \\|;:'\\\"<>,.?/\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}\\\
    \\|;:'\\\"<>,.?/:;'\\\"<>,.?/\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}\\\
    \\|;:'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\
    \"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\
    \"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\
    \"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\
    \"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\
    \"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,.?/:;'\\\"<>,\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$%\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2jo4v9jn.jl:20\nin expression starting at\
    \ /tmp/tmp2jo4v9jn.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_without_whitespace = filter(x\
    \ -> !contains(x, \" \"), words)\n    words_without_commas = filter(x -> !contains(x,\
    \ \",\"), words_without_whitespace)\n    words_without_commas_without_whitespace\
    \ = filter(x -> !contains(x, \" \"), words_without_commas)\n    words_without_commas_without_whitespace_without_commas\
    \ = filter(x -> !contains(x, \",\"), words_without_commas_without_whitespace)\n\
    \    words_without_commas_without_whitespace_without_commas_without_whitespace\
    \ = filter(x -> !contains(x, \" \"), words_without_commas_without_whitespace_without_commas)\n\
    \    words_without_commas_without_whitespace_without_commas_without_whitespace_without_commas\
    \ = filter(x -> !contains(x, \",\"), words_without_commas_without_whitespace_without_commas_without_whitespace)\n\
    \    words_without_commas_without_whitespace_without_commas_without_whitespace_without_commas_without_whitespace\
    \ = filter(x -> !contains(x, \" \"), words_without_commas_without_whitespace_without_commas_without_whitespace_without_commas)\n\
    \    words_without_commas_without_whitespace_without_commas_without_whitespace_without_commas_without_whitespace_without_commas\
    \ = filter(x -> !contains(x, \",\"), words_without_commas_without_whitespace_without_commas_without_whitespace_without_commas_without_whitespace)\n\
    \    words_without_commas_without_whitespace_without_commas_without_whitespace_without_commas_without_whitespace_without_commas_without_whitespace\
    \ = filter(x -> !contains(x, \" \"), words_without_commas_without_whitespace_without_commas_without_whitespace_without_commas_without_whitespace_without_commas)\n\
    \    words_without_commas_without_whitespace_without_commas_without_whitespace_without_commas_without_whitespace_without_commas_without_whitespace_without_commas\
    \ = filter(x -> !contains(x, \",\"), words_without_commas_without_whitespace_without_commas_without_whitespace_without_commas_without_whitespace_without_commas_without_whitespace)\n\
    \    words_without_commas_without_whitespace_without_commas_without_whitespace_without_commas_without_whitespace_without_commas_without_whitespace_without_commas_without_whitespace\
    \ = filter(x -> !contains(x, \" \"), words_without_commas_without_whitespace_without_commas_without_whitespace_without_commas_without_whitespace_without_commas_without_whitespace_without_commas)\n\
    \    words_without_commas_without_whitespace_without_commas_without_whitespace_without_commas_without_whitespace_without_commas_without_whitespace_without_commas_without_whitespace_without_commas\
    \ = filter(x -> !contains(x, \",\"), words_without_commas_without_whitespace_without_commas_without_whitespace_\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl1o1m37m.jl:27\nin expression starting at\
    \ /tmp/tmpl1o1m37m.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmp9nwd0_h6.jl:54\nin expression starting at /tmp/tmp9nwd0_h6.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"abcdef\"]\n    return length(words)\nend\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"Hello world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    Hello,world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n\
    </cell>\n<text>\nExercise\nWrite a function that takes a vector of words and returns\
    \ a vector of words with all words capitalized.\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnx3g9rll.jl:20\nin expression starting at\
    \ /tmp/tmpnx3g9rll.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    words_vec = []\n   \
    \ \n    for word in words\n        words_vec += split(word, \",\")\n    end\n\
    \    \n    words_vec = words_vec[findall(x -> !isempty(x), words_vec)]\n    \n\
    \    words_vec = words_vec[findall(x -> !isempty(x), words_vec)]\n    \n    words_vec\
    \ = words_vec[findall(x -> !isempty(x), words_vec)]\n    \n    words_vec = words_vec[findall(x\
    \ -> !isempty(x), words_vec)]\n    \n    words_vec = words_vec[findall(x -> !isempty(x),\
    \ words_vec)]\n    \n    words_vec = words_vec[findall(x -> !isempty(x), words_vec)]\n\
    \    \n    words_vec = words_vec[findall(x -> !isempty(x), words_vec)]\n    \n\
    \    words_vec = words_vec[findall(x -> !isempty(x), words_vec)]\n    \n    words_vec\
    \ = words_vec[findall(x -> !isempty(x), words_vec)]\n    \n    words_vec = words_vec[findall(x\
    \ -> !isempty(x), words_vec)]\n    \n    words_vec = words_vec[findall(x -> !isempty(x),\
    \ words_vec)]\n    \n    words_vec = words_vec[findall(x -> !isempty(x), words_vec)]\n\
    \    \n    words_vec = words_vec[findall(x -> !isempty(x), words_vec)]\n    \n\
    \    words_vec = words_vec[findall(x -> !isempty(x), words_vec)]\n    \n    words_vec\
    \ = words_vec[findall(x -> !isempty(x), words_vec)]\n    \n    words_vec = words_vec[findall(x\
    \ -> !isempty(x), words_vec)]\n    \n    words_vec = words_vec[findall(x -> !isempty(x),\
    \ words_vec)]\n    \n    words_vec = words_vec[findall(x -> !isempty(x), words_vec)]\n\
    \    \n    words_vec = words_vec[findall(x -> !isempty(x), words_vec)]\n    \n\
    \    words_vec = words_vec[findall(x -> !isempty(x), words_vec)]\n    \n    words_vec\
    \ = words_vec[findall(x -> !isempty(x), words_vec)]\n    \n    words_vec = words_vec[findall(x\
    \ -> !isempty(x), words_vec)]\n    \n    words_vec = words_vec[findall(x -> !isempty(x),\
    \ words_vec)]\n    \n    words_vec = words_vec[findall(x -> !isempty(x), words_vec\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprz7qprxg.jl:70\nin expression starting at\
    \ /tmp/tmprz7qprxg.jl:70\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if length(words) ==\
    \ 0\n        return words\n    \n    if length(words) == 1 \n        return words\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9_fsyhh8.jl:1\nin expression starting at /tmp/tmp9_fsyhh8.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    words_vector = Vector{String}(undef,\
    \ 0)\n    \n    for word in words\n        words_vector = words_vector ++ [word]\n\
    \    end\n    \n    words_vector = words_vector[findall(x -> !isascii(x), words_vector)]\n\
    \    \n    words_vector = words_vector[findall(x -> !isascii(x), words_vector)]\n\
    \    \n    words_vector = words_vector[findall(x -> !isascii(x), words_vector)]\n\
    \    \n    words_vector = words_vector[findall(x -> !isascii(x), words_vector)]\n\
    \    \n    words_vector = words_vector[findall(x -> !isascii(x), words_vector)]\n\
    \    \n    words_vector = words_vector[findall(x -> !isascii(x), words_vector)]\n\
    \    \n    words_vector = words_vector[findall(x -> !isascii(x), words_vector)]\n\
    \    \n    words_vector = words_vector[findall(x -> !isascii(x), words_vector)]\n\
    \    \n    words_vector = words_vector[findall(x -> !isascii(x), words_vector)]\n\
    \    \n    words_vector = words_vector[findall(x -> !isascii(x), words_vector)]\n\
    \    \n    words_vector = words_vector[findall(x -> !isascii(x), words_vector)]\n\
    \    \n    words_vector = words_vector[findall(x -> !isascii(x), words_vector)]\n\
    \    \n    words_vector = words_vector[findall(x -> !isascii(x), words_vector)]\n\
    \    \n    words_vector = words_vector[findall(x -> !isascii(x), words_vector)]\n\
    \    \n    words_vector = words_vector[findall(x -> !isascii(x), words_vector)]\n\
    \    \n    words_vector = words_vector[findall(x -> !isascii(x), words_vector)]\n\
    \    \n    words_vector = words_vector[findall(x -> !isascii(x), words_vector)]\n\
    \    \n    words_vector = words_vector[findall(x -> !isascii(x), words_vector)]\n\
    \    \n    words_vector = words_vector[findall(x -> !isascii(x), words_vector)]\n\
    \    \n    words_vector = words_vector[findall(x -> !isascii(x), words_vector)]\n\
    \    \n    words_vector = words_vector[findall(x -> !isascii(x), words_vector)]\n\
    \    \n    words_vector = words_vector[findall(x -> !isascii(x), words_vector)]\n\
    \    \n    words_vector = words_vector[findall(x -> !isascii(x), words_vector)]\n\
    \    \n    words_vector = words_vector[findall(\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_xhre39f.jl:72\nin expression starting at\
    \ /tmp/tmp_xhre39f.jl:72\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmp9nwd0_h6.jl:54\nin expression starting at /tmp/tmp9nwd0_h6.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words_without_whitespace = filter(x->!isempty(x),\
    \ words)\n    words_without_commas = filter(x->isempty(x), words_without_whitespace)\n\
    \    words_without_commas = filter(x->!isempty(x), words_without_commas)\n   \
    \ words_without_commas = filter(x->!islower(x), words_without_commas)\n    words_without_commas\
    \ = filter(x->!isupper(x), words_without_commas)\n    words_without_commas = filter(x->!isdigit(x),\
    \ words_without_commas)\n    words_without_commas = filter(x->!isspace(x), words_without_commas)\n\
    \    words_without_commas = filter(x->!issymbol(x), words_without_commas)\n  \
    \  words_without_commas = filter(x->!isempty(x), words_without_commas)\n    words_without_commas\
    \ = filter(x->!isempty(x), words_without_commas)\n    words_without_commas = filter(x->!isempty(x),\
    \ words_without_commas)\n    words_without_commas = filter(x->!isempty(x), words_without_commas)\n\
    \    words_without_commas = filter(x->!isempty(x), words_without_commas)\n   \
    \ words_without_commas = filter(x->!isempty(x), words_without_commas)\n    words_without_commas\
    \ = filter(x->!isempty(x), words_without_commas)\n    words_without_commas = filter(x->!isempty(x),\
    \ words_without_commas)\n    words_without_commas = filter(x->!isempty(x), words_without_commas)\n\
    \    words_without_commas = filter(x->!isempty(x), words_without_commas)\n   \
    \ words_without_commas = filter(x->!isempty(x), words_without_commas)\n    words_without_commas\
    \ = filter(x->!isempty(x), words_without_commas)\n    words_without_commas = filter(x->!isempty(x),\
    \ words_without_commas)\n    words_without_commas = filter(x->!isempty(x), words_without_commas)\n\
    \    words_without_commas = filter(x->!isempty(x), words_without_commas)\n   \
    \ words_without_commas = filter(x->!isempty(x), words_without_commas)\n    words_without_commas\
    \ = filter(x->!isempty(x), words_without_commas)\n    words_without_commas = filter(x->!isempty(x),\
    \ words_without_commas\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx71w6i2k.jl:41\nin expression starting at\
    \ /tmp/tmpx71w6i2k.jl:41\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \" \"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n\
    \    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words\
    \ if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for\
    \ w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if w !=\
    \ \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n\
    \    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words\
    \ if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n\
    \    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words\
    \ if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\n\"]\n    words = [w for w in words if w != \"\\r\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvh60b2h1.jl:59\nin expression starting at\
    \ /tmp/tmpvh60b2h1.jl:59\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_without_commas = filter(x\
    \ -> !contains(x, \",\"), words)\n    words_without_comma_count = length(words_without_commas)\n\
    \    words_without_comma_count = words_without_comma_count/2 if words_without_comma_count%2\
    \ == 0 else words_without_comma_count/2-1\n    words_without_comma_count = words_without_comma_count/2\
    \ if words_without_comma_count%2 == 0 else words_without_comma_count/2-1\n   \
    \ words_without_comma_count = words_without_comma_count/2 if words_without_comma_count%2\
    \ == 0 else words_without_comma_count/2-1\n    words_without_comma_count = words_without_comma_count/2\
    \ if words_without_comma_count%2 == 0 else words_without_comma_count/2-1\n   \
    \ words_without_comma_count = words_without_comma_count/2 if words_without_comma_count%2\
    \ == 0 else words_without_comma_count/2-1\n    words_without_comma_count = words_without_comma_count/2\
    \ if words_without_comma_count%2 == 0 else words_without_comma_count/2-1\n   \
    \ words_without_comma_count = words_without_comma_count/2 if words_without_comma_count%2\
    \ == 0 else words_without_comma_count/2-1\n    words_without_comma_count = words_without_comma_count/2\
    \ if words_without_comma_count%2 == 0 else words_without_comma_count/2-1\n   \
    \ words_without_comma_count = words_without_comma_count/2 if words_without_comma_count%2\
    \ == 0 else words_without_comma_count/2-1\n    words_without_comma_count = words_without_comma_count/2\
    \ if words_without_comma_count%2 == 0 else words_without_comma_count/2-1\n   \
    \ words_without_comma_count = words_without_comma_count/2 if words_without_comma_count%2\
    \ == 0 else words_without_comma_count/2-1\n    words_without_comma_count = words_without_comma_count/2\
    \ if words_without_comma_count%2 == 0 else words_without_comma_count/2-1\n   \
    \ words_without_comma_count = words_without_comma_count/2 if words_without_comma_count%2\
    \ == 0 else words_without_comma_count/2-1\n    words_without_comma_count = words_without_comma_count/2\
    \ if words_without_comma_count%2 == 0 else words_without_comma_count/2-1\n   \
    \ words_without_comma_count = words_without_comma_count/2 if words_without_comma_count%2\
    \ == 0 else words_without_comma_count/2-1\n    words_without_comma_count = words_without_comma_count/2\
    \ if words_without_comma_count%2 == 0 else words_without_comma_count/2-1\n   \
    \ words_without_comma_count = words_without_comma_count/2 if words_without_comma_count%2\
    \ == 0 else words_without_comma_count/2-1\n    words_without_comma_count = words_without_comma_count/2\
    \ if words_without_comma_count\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmplc_j8m8e.jl:13 expected\
    \ \"end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplc_j8m8e.jl:17\n\
    in expression starting at /tmp/tmplc_j8m8e.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = words[words != \"\"]\n \
    \   words = words[words != \",\"]\n    words = words[words != \"and\"]\n    words\
    \ = words[words != \"or\"]\n    words = words[words != \"but\"]\n    words = words[words\
    \ != \"for\"]\n    words = words[words != \"with\"]\n    words = words[words !=\
    \ \"as\"]\n    words = words[words != \"in\"]\n    words = words[words != \"on\"\
    ]\n    words = words[words != \"as\"]\n    words = words[words != \"with\"]\n\
    \    words = words[words != \"for\"]\n    words = words[words != \"as\"]\n   \
    \ words = words[words != \"on\"]\n    words = words[words != \"in\"]\n    words\
    \ = words[words != \"as\"]\n    words = words[words != \"with\"]\n    words =\
    \ words[words != \"for\"]\n    words = words[words != \"as\"]\n    words = words[words\
    \ != \"on\"]\n    words = words[words != \"in\"]\n    words = words[words != \"\
    as\"]\n    words = words[words != \"with\"]\n    words = words[words != \"for\"\
    ]\n    words = words[words != \"as\"]\n    words = words[words != \"on\"]\n  \
    \  words = words[words != \"in\"]\n    words = words[words != \"as\"]\n    words\
    \ = words[words != \"with\"]\n    words = words[words != \"for\"]\n    words =\
    \ words[words != \"as\"]\n    words = words[words != \"on\"]\n    words = words[words\
    \ != \"in\"]\n    words = words[words != \"as\"]\n    words = words[words != \"\
    with\"]\n    words = words[words != \"for\"]\n    words = words[words != \"as\"\
    ]\n    words = words[words != \"on\"]\n    words = words[words != \"in\"]\n  \
    \  words = words[words != \"as\"]\n    words = words[words != \"with\"]\n    words\
    \ = words[words != \"for\"]\n    words = words[words != \"as\"]\n    words = words[words\
    \ != \"on\"]\n    words = words[words != \"in\"]\n    words = words[words != \"\
    as\"]\n    words = words[words != \"with\"]\n    words = words[words != \"for\"\
    ]\n    words = words[words != \"as\"]\n    words = words[words != \"\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnz5cafqz.jl:71\nin expression starting at\
    \ /tmp/tmpnz5cafqz.jl:71\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    word_counts = Dict{String, Int64}()\n\
    \    for word in words\n        if !haskey(word_counts, word)\n            word_counts[word]\
    \ = 1\n        else\n            word_counts[word] += 1\n        end\n    end\n\
    \    word_counts = collect(values(word_counts))\n    word_counts = sort(word_counts)\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpc8m4gg3f.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc8m4gg3f.jl:1\n\
    in expression starting at /tmp/tmpc8m4gg3f.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words = [w for w in words if w != \"\"\
    ]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \" \"]\n    words = [w for w in words if w != \"\\n\"]\n    words =\
    \ [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\
    \\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n   \
    \ words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if\
    \ w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in\
    \ words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n   \
    \ words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if\
    \ w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\\
    t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in\
    \ words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n   \
    \ words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if\
    \ w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w\
    \ for w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\\
    n\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n   \
    \ words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if\
    \ w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    r\"]\n    words = [w for w in words if w != \"\\n\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgrmuuwe_.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgrmuuwe_.jl:1\n\
    in expression starting at /tmp/tmpgrmuuwe_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    word_counts = Dict()\n    for word\
    \ in words\n        word_counts[word] = get(word_counts, word, 0) + 1\n    end\n\
    \    word_counts = sort(word_counts)\n    word_counts = reverse(collect(values(word_counts)))\n\
    \    word_counts = filter(x -> x % 2 == 1, word_counts)\n    word_counts = map(x\
    \ -> x, word_counts)\n    word_counts = collect(word_counts)\n    return word_counts\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    count_words(txt::String)\n\
    \    Count the number of times each word appears in a string\n    \n    Arguments\n\
    \    ---------\n    txt :: String\n        Text to count words from\n    \n  \
    \  Returns\n    -------\n    word_counts :: Dict{String, Int}\n        Dictionary\
    \ of word counts\n    \n    Examples\n    --------\n    >>> count_words(\"Hello\
    \ world!\")\n    Dict(\"Hello\" => 1, \"world!\" => 1)\n    >>> count_words(\"\
    Hello world! Hello world!\")\n    Dict(\"Hello\" => 2, \"world!\" => 2)\n    >>>\
    \ count_words(\"Hello world! Hello world! Hello world!\")\n    Dict(\"Hello\"\
    \ => 3, \"world!\" => 3)\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr6eesxse.jl:26\nin expression starting at\
    \ /tmp/tmpr6eesxse.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \".\"]\n    words = [w for w in words if w != \"?\"]\n    words\
    \ = [w for w in words if w != \"!\"]\n    words = [w for w in words if w != \"\
    !\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for w in words\
    \ if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w\
    \ for w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n\
    \    words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"!\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj3i8jhor.jl:59\nin expression starting at\
    \ /tmp/tmpj3i8jhor.jl:59\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return txt\n    elseif txt == \"\\t\"\n  \
    \      return txt\n    elseif txt == \"\\r\"\n        return txt\n    elseif txt\
    \ == \"\\t\"\n        return txt\n    elseif txt == \"\\n\"\n        return txt\n\
    \    elseif txt == \"\\r\"\n        return txt\n    elseif txt == \"\\t\"\n  \
    \      return txt\n    elseif txt == \"\\n\"\n        return txt\n    elseif txt\
    \ == \"\\r\"\n        return txt\n    elseif txt == \"\\t\"\n        return txt\n\
    \    elseif txt == \"\\n\"\n        return txt\n    elseif txt == \"\\r\"\n  \
    \      return txt\n    elseif txt == \"\\t\"\n        return txt\n    elseif txt\
    \ == \"\\n\"\n        return txt\n    elseif txt == \"\\r\"\n        return txt\n\
    \    elseif txt == \"\\t\"\n        return txt\n    elseif txt == \"\\n\"\n  \
    \      return txt\n    elseif txt == \"\\r\"\n        return txt\n    elseif txt\
    \ == \"\\t\"\n        return txt\n    elseif txt == \"\\n\"\n        return txt\n\
    \    elseif txt == \"\\r\"\n        return txt\n    elseif txt == \"\\t\"\n  \
    \      return txt\n    elseif txt == \"\\n\"\n        return txt\n    elseif txt\
    \ == \"\\r\"\n        return txt\n    elseif txt == \"\\t\"\n        return txt\n\
    \    elseif txt == \"\\n\"\n        return txt\n    elseif txt == \"\\r\"\n  \
    \      return txt\n    elseif txt == \"\\t\"\n        return txt\n    elseif txt\
    \ == \"\\n\"\n        return txt\n    elseif txt == \"\\r\"\n        return txt\n\
    \    elseif txt == \"\\t\"\n        return txt\n    elseif txt == \"\\n\"\n  \
    \      return txt\n    elseif txt == \"\\r\"\n        return txt\n    elseif txt\
    \ == \"\\t\"\n        return txt\n    elseif txt == \"\\n\"\n        return txt\n\
    \    elseif txt == \"\\r\"\n        return txt\n    elseif txt == \"\\t\"\n  \
    \      return txt\n    elseif txt == \"\\n\"\n        return txt\n    elseif txt\
    \ == \"\\r\"\n        return txt\n    elseif txt == \"\\t\"\n        return txt\n\
    \    elseif txt == \"\\n\"\n        return txt\n    elseif txt == \"\\r\"\n  \
    \      return txt\n    elseif txt == \"\\t\"\n        return txt\n    elseif txt\
    \ == \"\\n\"\n        return txt\n    elseif txt == \"\\r\"\n        return txt\n\
    \    elseif txt == \"\\t\"\n        return txt\n    elseif txt == \"\\n\"\n  \
    \      return txt\n    elseif txt == \"\\r\"\n        return txt\n    elseif txt\
    \ == \"\\t\"\n        return txt\n    elseif txt == \"\\n\"\n        return txt\n\
    \    elseif txt == \"\\r\"\n        return txt\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx6pnd_qj.jl:1\nin expression starting at /tmp/tmpx6pnd_qj.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = Vector{String}(undef,\
    \ 0)\n    for w in words\n        if w != \"\"\n            words_split = words_split\
    \ ++ [w]\n        end\n    end\n    words_split = words_split ++ [length(words)]\n\
    \    words_split = words_split .- words_split .% 2\n    return words_split\nend\n\
    </code>\n<|/ a tags=julia |>\n<| c |>\nThis does not provide an answer to the\
    \ question. To critique or request clarification from an author, leave a comment\
    \ below their post. - [From Review](/review/low-quality-posts/17045148)\n<|/ c\
    \ |>\n<| c |>\nThis does provide an answer to the question. He asked how to split\
    \ a string on whitespace and commas and then count the number of letters with\
    \ odd order in the alphabet. He also asked how to do this in Julia. He also asked\
    \ how to do this without using any packages. He also asked how to do this without\
    \ using any packages. He also asked how to do this without using any packages.\
    \ He also asked how to do this without using any packages. He also asked how to\
    \ do this without using any packages. He also asked how to do this without using\
    \ any packages. He also asked how to do this without using any packages. He also\
    \ asked how to do this without using any packages. He also asked how to do this\
    \ without using any packages. He also asked how to do this without using any packages.\
    \ He also asked how to do this without using any packages. He also asked how to\
    \ do this without using any packages. He also asked how to do this without using\
    \ any packages. He also asked how to do this without using any packages. He also\
    \ asked how to do this without using any packages. He also asked how to do this\
    \ without using any packages. He also asked how to do this without using any packages.\
    \ He also asked how to do this without using any packages. He also asked how to\
    \ do this without using any packages. He also asked how to do this without using\
    \ any packages. He also asked how to do this without using any packages. He also\
    \ asked how to do this without using any packages. He also asked how to do this\
    \ without using any packages. He also asked how to do this without using any packages.\
    \ He also asked how to do this without using any packages. He also asked how to\
    \ do this without using any packages. He also asked how to do this without using\
    \ any packages. He also as\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5x4fkw0x.jl:25\nin expression starting at\
    \ /tmp/tmp5x4fkw0x.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmp9nwd0_h6.jl:54\nin expression starting at /tmp/tmp9nwd0_h6.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmp9nwd0_h6.jl:54\nin expression starting at /tmp/tmp9nwd0_h6.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \".\"]\n    words = [w for w in words if w != \"!\"]\n    words\
    \ = [w for w in words if w != \"?\"]\n    words = [w for w in words if w != \"\
    !\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for w in words\
    \ if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w\
    \ for w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n\
    \    words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwi01if4c.jl:59\nin expression starting at\
    \ /tmp/tmpwi01if4c.jl:59\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    \n    if length(words) == 0\n  \
    \      return words\n    \n    words = [w for w in words if w != \"\"]\n    \n\
    \    if length(words) == 0\n        return words\n    \n    if length(words) ==\
    \ 1 \n        return words\n    \n    words = [w for w in words if w != \"\"]\n\
    \    \n    if length(words) == 0\n        return words\n    \n    if length(words)\
    \ == 1 \n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    if length(words)\
    \ == 1 \n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    if length(words)\
    \ == 1 \n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    if length(words)\
    \ == 1 \n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    if length(words)\
    \ == 1 \n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    if length(words)\
    \ == 1 \n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    if length(words)\
    \ == 1 \n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    if length(words)\
    \ == 1 \n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    if length(words)\
    \ == 1 \n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    if length(words)\
    \ == 1 \n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    if length(words)\
    \ == 1 \n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    if length(words)\
    \ == 1 \n        return words\n    \n    words = [w for w in words if w != \"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmph69ifyd3.jl:124\nin expression starting at /tmp/tmph69ifyd3.jl:124\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmp9nwd0_h6.jl:54\nin expression starting at /tmp/tmp9nwd0_h6.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    else\n        words = split(txt, \" \")\n        return Vector{String}(words)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpil4d7mnv.jl:24

    '
  stdout: "test set: Error During Test at /tmp/tmpil4d7mnv.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  type\
    \ String has no field trim\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] split_words(txt::String)\n     @ Main /tmp/tmpil4d7mnv.jl:14\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpil4d7mnv.jl:27 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpil4d7mnv.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpil4d7mnv.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  type String has no\
    \ field trim\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] split_words(txt::String)\n     @ Main /tmp/tmpil4d7mnv.jl:14\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpil4d7mnv.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpil4d7mnv.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpil4d7mnv.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  type String has\
    \ no field trim\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] split_words(txt::String)\n     @ Main /tmp/tmpil4d7mnv.jl:14\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpil4d7mnv.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpil4d7mnv.jl:26\ntest set:\
    \ Error During Test at /tmp/tmpil4d7mnv.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hel"
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    else\n        words = split(txt, \" \")\n        words = [w for w in words\
    \ if w != \"\"]\n        return words\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of words and returns a vector of words\
    \ with all words capitalized.\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5tkz8x_m.jl:23\nin expression starting at\
    \ /tmp/tmp5tkz8x_m.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    word_counts = Dict()\n    for word\
    \ in words\n        if !haskey(word_counts, word)\n            word_counts[word]\
    \ = 1\n        else\n            word_counts[word] += 1\n    end\n    word_counts\
    \ = collect(values(word_counts))\n    word_counts = sort(word_counts)\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[2:end]\n    word_counts = word_counts[2:end]\n    word_counts\
    \ = word_counts[\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t\
    @test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_969d_7i.jl:1\nin expression starting at /tmp/tmp_969d_7i.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = Vector{String}(undef,\
    \ 0)\n    words_split = [word for word in words if word != \"\"]\n    words_split\
    \ = words_split + [word for word in words if word != \"\"]\n    words_split =\
    \ words_split + [word for word in words if word != \"\"]\n    words_split = words_split\
    \ + [word for word in words if word != \"\"]\n    words_split = words_split +\
    \ [word for word in words if word != \"\"]\n    words_split = words_split + [word\
    \ for word in words if word != \"\"]\n    words_split = words_split + [word for\
    \ word in words if word != \"\"]\n    words_split = words_split + [word for word\
    \ in words if word != \"\"]\n    words_split = words_split + [word for word in\
    \ words if word != \"\"]\n    words_split = words_split + [word for word in words\
    \ if word != \"\"]\n    words_split = words_split + [word for word in words if\
    \ word != \"\"]\n    words_split = words_split + [word for word in words if word\
    \ != \"\"]\n    words_split = words_split + [word for word in words if word !=\
    \ \"\"]\n    words_split = words_split + [word for word in words if word != \"\
    \"]\n    words_split = words_split + [word for word in words if word != \"\"]\n\
    \    words_split = words_split + [word for word in words if word != \"\"]\n  \
    \  words_split = words_split + [word for word in words if word != \"\"]\n    words_split\
    \ = words_split + [word for word in words if word != \"\"]\n    words_split =\
    \ words_split + [word for word in words if word != \"\"]\n    words_split = words_split\
    \ + [word for word in words if word != \"\"]\n    words_split = words_split +\
    \ [word for word in words if word != \"\"]\n    words_split = words_split + [word\
    \ for word in words if word != \"\"]\n    words_split = words_split + [word for\
    \ word in words if word != \"\"]\n    words_split = words_split + [word for word\
    \ in words if word != \"\"]\n    words_split = words_split + [word for word in\
    \ words if word != \"\"]\n    words_split = words_split + [word for word in words\
    \ if word != \"\"]\n    words_split = words_split + [word for word in words if\
    \ word != \"\"]\n    words_split = words_split + [word for word in words if word\
    \ != \"\"]\n    words_split = words_split + [word for word in words if word !=\
    \ \"\"]\n    words_split = words_\nusing Test\n\n@testset begin\n\ncandidate =\
    \ split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfrzq_lat.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfrzq_lat.jl:1\n\
    in expression starting at /tmp/tmpfrzq_lat.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"abcdef\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGH\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcrogdjjd.jl:27\nin expression starting at\
    \ /tmp/tmpcrogdjjd.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words = [w for w in words if w != \"\"\
    ]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"-\"]\n    words = [w for w in words if w != \"_\"]\n    words = [w\
    \ for w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n\
    \    words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"-\"]\n    words = [w for\
    \ w in words if w != \"_\"]\n    words = [w for w in words if w != \"-\"]\n  \
    \  words = [w for w in words if w != \"_\"]\n    words = [w for w in words if\
    \ w != \"-\"]\n    words = [w for w in words if w != \"_\"]\n    words = [w for\
    \ w in words if w != \"-\"]\n    words = [w for w in words if w != \"_\"]\n  \
    \  words = [w for w in words if w != \"-\"]\n    words = [w for w in words if\
    \ w != \"_\"]\n    words = [w for w in words if w != \"-\"]\n    words = [w for\
    \ w in words if w != \"_\"]\n    words = [w for w in words if w != \"-\"]\n  \
    \  words = [w for w in words if w != \"_\"]\n    words = [w for w in words if\
    \ w != \"-\"]\n    words = [w for w in words if w != \"_\"]\n    words = [w for\
    \ w in words if w != \"-\"]\n    words = [w for w in words if w != \"_\"]\n  \
    \  words = [w for w in words if w != \"-\"]\n    words = [w for w in words if\
    \ w != \"_\"]\n    words = [w for w in words if w != \"-\"]\n    words = [w for\
    \ w in words if w != \"_\"]\n    words = [w for w in words if w != \"-\"]\n  \
    \  words = [w for w in words if w != \"_\"]\n    words = [w for w in words if\
    \ w != \"-\"]\n    words = [w for w in words if w != \"_\"]\n    words = [w for\
    \ w in words if w != \"-\"]\n    words = [w for w in words if w != \"_\"]\n  \
    \  words = [w for w in words if w != \"-\"]\n    words = [w for w in words if\
    \ w != \"_\"]\n    words = [w for w in words if w != \"-\"]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxja2d9lp.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxja2d9lp.jl:1\n\
    in expression starting at /tmp/tmpxja2d9lp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmp9nwd0_h6.jl:54\nin expression starting at /tmp/tmp9nwd0_h6.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \" \"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words\
    \ if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for\
    \ w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n\
    \    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for\
    \ w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n    words\
    \ = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if w !=\
    \ \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words\
    \ if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb479l0da.jl:59\nin expression starting at\
    \ /tmp/tmpb479l0da.jl:59\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    \n    words = split(txt, \" \")\n    \n    words_without_commas = filter(x->!contains(x,\
    \ \",\"), words)\n    \n    words_without_commas_without_whitespaces = filter(x->!contains(x,\
    \ \" \"), words_without_commas)\n    \n    words_without_commas_without_whitespaces_without_commas\
    \ = filter(x->!contains(x, \",\"), words_without_commas_without_whitespaces)\n\
    \    \n    words_without_commas_without_whitespaces_without_commas_without_whitespaces\
    \ = filter(x->!contains(x, \" \"), words_without_commas_without_whitespaces_without_commas)\n\
    \    \n    words_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas\
    \ = filter(x->!contains(x, \",\"), words_without_commas_without_whitespaces_without_commas_without_whitespaces)\n\
    \    \n    words_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas_without_whitespaces\
    \ = filter(x->!contains(x, \" \"), words_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas)\n\
    \    \n    words_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas\
    \ = filter(x->!contains(x, \",\"), words_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas_without_whitespaces)\n\
    \    \n    words_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas_without_whitespaces\
    \ = filter(x->!contains(x, \" \"), words_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas)\n\
    \    \n    words_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas\
    \ = filter(x->!contains(x, \",\"), words_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas_without_whitespaces)\n\
    \    \n    words_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas_without_whitespaces\
    \ = filter(x->!contains(x, \" \"), words_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas)\n\
    \    \n    words_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas_without_whitespaces_without_commas_without_whitespace\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplpnlmbik.jl:1\nin expression starting at /tmp/tmplpnlmbik.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    word_counts = Dict()\n    for word\
    \ in words\n        word_counts[word] = get(word_counts, word, 0) + 1\n    end\n\
    \    word_counts = sort(word_counts)\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppw7baff6.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppw7baff6.jl:1\n\
    in expression starting at /tmp/tmppw7baff6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"abcdef\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLM\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqgj_0dst.jl:36\nin expression starting at\
    \ /tmp/tmpqgj_0dst.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if isempty(txt)\n        return Vector{String}()\n    else\n  \
    \      words = split(txt, \" \")\n        return words\n    end\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a vector of words and returns\
    \ a vector of words split on commas if no commas exists in the text you\n    should\
    \ split on whitespaces if no whitespaces exists in the text you should return\
    \ the number of lower-case letters with odd order in the\n    alphabet, ord('a')\
    \ = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    >>> split_words(\"Hello\
    \ world!\")\n    [\"Hello\", \"world!\"]\n    >>> split_words(\"Hello,world!\"\
    )\n    [\"Hello\", \"world!\"]\n    >>> split_words(\"abcdef\")\n    3\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqkllmplb.jl:21\nin expression starting at\
    \ /tmp/tmpqkllmplb.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if isempty(txt)\n        return Vector{String}()\n    else\n  \
    \      words = split(txt, \" \")\n        words = words[words != \"\"]\n     \
    \   return words\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of words and returns a vector of words split on commas ','\
    \ if the number of commas equals the number of words in the vector\nExamples\n\
    >>> split_words_commas([\"Hello\", \"world!\"])\n[\"Hello\", \"world!\"]\n>>>\
    \ split_words_commas([\"Hello\", \"world!\", \"Hello\", \"world!\"])\n[\"Hello\"\
    , \"world!\"]\n>>> split_words_commas([\"Hello\", \"world!\", \"Hello\", \"world!\"\
    , \"Hello\", \"world!\"])\n[\"Hello\", \"world!\"]\n>>> split_words_commas([\"\
    Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\",\
    \ \"world!\"])\n[\"Hello\", \"world!\"]\n>>> split_words_commas([\"Hello\", \"\
    world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"\
    , \"Hello\", \"world!\", \"Hello\", \"world!\"])\n[\"Hello\", \"world!\"]\n>>>\
    \ split_words_commas([\"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\"\
    , \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"\
    , \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\"\
    , \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"\
    , \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\"\
    , \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"\
    , \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\"\
    , \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"\
    , \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\"\
    , \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"\
    , \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\"\
    , \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"\
    , \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\"\
    , \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"\
    , \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\"\
    , \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"\
    , \"Hello\", \"\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t\
    @test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgrpy1vp9.jl:22\nin expression starting at\
    \ /tmp/tmpgrpy1vp9.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmp9nwd0_h6.jl:54\nin expression starting at /tmp/tmp9nwd0_h6.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    else\n        words = split(txt, \" \")\n        return words\n    end\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,string |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdxpb2u3v.jl:22\nin expression starting at\
    \ /tmp/tmpdxpb2u3v.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if length(words) ==\
    \ 0\n        return words\n    \n    words_split = split(txt, \",\")\n    \n \
    \   if length(words_split) == 0\n        return words\n    \n    words_split =\
    \ split(txt, \",\")\n    \n    if length(words_split) == 0\n        return words\n\
    \    \n    words_split = split(txt, \",\")\n    \n    if length(words_split) ==\
    \ 0\n        return words\n    \n    words_split = split(txt, \",\")\n    \n \
    \   if length(words_split) == 0\n        return words\n    \n    words_split =\
    \ split(txt, \",\")\n    \n    if length(words_split) == 0\n        return words\n\
    \    \n    words_split = split(txt, \",\")\n    \n    if length(words_split) ==\
    \ 0\n        return words\n    \n    words_split = split(txt, \",\")\n    \n \
    \   if length(words_split) == 0\n        return words\n    \n    words_split =\
    \ split(txt, \",\")\n    \n    if length(words_split) == 0\n        return words\n\
    \    \n    words_split = split(txt, \",\")\n    \n    if length(words_split) ==\
    \ 0\n        return words\n    \n    words_split = split(txt, \",\")\n    \n \
    \   if length(words_split) == 0\n        return words\n    \n    words_split =\
    \ split(txt, \",\")\n    \n    if length(words_split) == 0\n        return words\n\
    \    \n    words_split = split(txt, \",\")\n    \n    if length(words_split) ==\
    \ 0\n        return words\n    \n    words_split = split(txt, \",\")\n    \n \
    \   if length(words_split) == 0\n        return words\n    \n    words_split =\
    \ split(txt, \",\")\n    \n    if length(words_split) == 0\n        return words\n\
    \    \n    words_split = split(txt, \",\")\n    \n    if length(words_split) ==\
    \ 0\n        return words\n    \n    words_split = split(txt, \",\")\n    \n \
    \   if length(words_split) == 0\n        return words\n    \n    words_split =\
    \ split(txt, \",\")\n    \n    if length(words_split) == 0\n        return words\n\
    \    \n    words_split = split(txt, \",\")\n    \n    if length(words_split) ==\
    \ 0\n        return words\n    \n    words_split = split(txt, \",\")\n    \n \
    \   if length(words_split) == 0\n        return words\n    \n    words_split =\
    \ split(txt, \",\")\n    \n    if length(words_split) == 0\n        return words\n\
    \    \n    words_split = split(txt, \",\")\n    \n    if length(words_split) ==\
    \ 0\n        return words\n    \n    words_split = split(txt, \",\")\n    \n \
    \   if length(words_split) == 0\n        return words\n    \n    words_split =\
    \ split(txt, \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8w0mh9l3.jl:133\nin expression starting at\
    \ /tmp/tmp8w0mh9l3.jl:133\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if isempty(txt)\n        return Vector{String}()\n    else\n  \
    \      words = split(txt, \" \")\n        words_no_commas = words\n        words_no_commas\
    \ = words_no_commas[findall(x -> !isdigit(x), words_no_commas)]\n        words_no_commas\
    \ = words_no_commas[findall(x -> !isalpha(x), words_no_commas)]\n        words_no_commas\
    \ = words_no_commas[findall(x -> !islower(x), words_no_commas)]\n        words_no_commas\
    \ = words_no_commas[findall(x -> !isupper(x), words_no_commas)]\n        words_no_commas\
    \ = words_no_commas[findall(x -> !isspace(x), words_no_commas)]\n        words_no_commas\
    \ = words_no_commas[findall(x -> !isempty(x), words_no_commas)]\n        words_no_commas\
    \ = words_no_commas[findall(x -> length(x) > 1, words_no_commas)]\n        return\
    \ words_no_commas\n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n\
    \    count_words(txt::String)::Int64\n    Given a string of words, return a vector\
    \ of words split on whitespace, if no whitespaces exists in the text you\n   \
    \ should split on commas ',' if no commas exists you should return the number\
    \ of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b')\
    \ = 1, ... ord('z') = 25\n    Examples\n    >>> count_words(\"Hello world!\")\n\
    \    3\n    >>> count_words(\"Hello,world!\")\n    3\n    >>> count_words(\"abcdef\"\
    )\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm1ejiuoz.jl:29\nin expression starting at\
    \ /tmp/tmpm1ejiuoz.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if isempty(txt)\n        return Vector{String}()\n    else\n  \
    \      words = split(txt, \" \")\n        words = words[words != \"\"]\n     \
    \   words = words[words != \",\"]\n        words = words[words != \".\"]\n   \
    \     words = words[words != \"!\"]\n        words = words[words != \"?\"]\n \
    \       words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        words = words[words != \"!\"]\n        words = words[words != \"?\"]\n\
    \        \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp6gj5i95b.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6gj5i95b.jl:1\n\
    in expression starting at /tmp/tmp6gj5i95b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \" \"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppwd9u4ut.jl:59\nin expression starting at\
    \ /tmp/tmppwd9u4ut.jl:59\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"abcdef\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzABCDEFGHI\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnkd0_gkr.jl:29\nin expression starting at\
    \ /tmp/tmpnkd0_gkr.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    word_counts = Dict{String, Int64}()\n\
    \    for word in words\n        if !haskey(word_counts, word)\n            word_counts[word]\
    \ = 1\n        else\n            word_counts[word] += 1\n        end\n    end\n\
    \    word_counts = collect(values(word_counts))\n    word_counts = sort(word_counts)\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpc8m4gg3f.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc8m4gg3f.jl:1\n\
    in expression starting at /tmp/tmpc8m4gg3f.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = Vector{String}(undef,\
    \ 0)\n    words_split = [word for word in words if word != \"\"]\n    words_split\
    \ = [word for word in words_split if word != \",\"]\n    words_split = [word for\
    \ word in words_split if word != \"\"]\n    words_split = [word for word in words_split\
    \ if word != \",\"]\n    words_split = [word for word in words_split if word !=\
    \ \"\"]\n    words_split = [word for word in words_split if word != \",\"]\n \
    \   words_split = [word for word in words_split if word != \"\"]\n    words_split\
    \ = [word for word in words_split if word != \",\"]\n    words_split = [word for\
    \ word in words_split if word != \"\"]\n    words_split = [word for word in words_split\
    \ if word != \",\"]\n    words_split = [word for word in words_split if word !=\
    \ \"\"]\n    words_split = [word for word in words_split if word != \",\"]\n \
    \   words_split = [word for word in words_split if word != \"\"]\n    words_split\
    \ = [word for word in words_split if word != \",\"]\n    words_split = [word for\
    \ word in words_split if word != \"\"]\n    words_split = [word for word in words_split\
    \ if word != \",\"]\n    words_split = [word for word in words_split if word !=\
    \ \"\"]\n    words_split = [word for word in words_split if word != \",\"]\n \
    \   words_split = [word for word in words_split if word != \"\"]\n    words_split\
    \ = [word for word in words_split if word != \",\"]\n    words_split = [word for\
    \ word in words_split if word != \"\"]\n    words_split = [word for word in words_split\
    \ if word != \",\"]\n    words_split = [word for word in words_split if word !=\
    \ \"\"]\n    words_split = [word for word in words_split if word != \",\"]\n \
    \   words_split = [word for word in words_split if word != \"\"]\n    words_split\
    \ = [word for word in words_split if word != \",\"]\n    words_split = [word for\
    \ word in words_split if word != \"\"]\n    words_split = [word for word in words_split\
    \ if word != \",\"]\n    words_split = [word for word in words_split if word !=\
    \ \"\"]\n    words_split = [word for word in words_split if word != \",\"]\n \
    \   words_split = [word for word in words_split if word != \"\"]\n    words_split\
    \ = [word for word in words_split if word != \",\"]\n    words_split = [word for\
    \ word in words_split if word != \"\"]\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk4qfzbzc.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk4qfzbzc.jl:1\n\
    in expression starting at /tmp/tmpk4qfzbzc.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \" \"]\n    words = [w for w in words if w != \"\\n\"]\n    words\
    \ = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for\
    \ w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n\
    \    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words\
    \ if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words\
    \ = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if w !=\
    \ \"\\r\"]\n    words = [w for w in words if w != \"\\t\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppwd9u4ut.jl:59\nin expression starting at\
    \ /tmp/tmppwd9u4ut.jl:59\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    else\n        words = split(txt, \" \")\n        words = [w for w in words\
    \ if w != \"\"]\n        return words\n    end\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyo9awzwp.jl:23\nin expression starting at\
    \ /tmp/tmpyo9awzwp.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words = [w for w in words if w != \"\"\
    ]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \" \"]\n    words = [w for w in words if w != \"\\n\"]\n    words =\
    \ [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\
    \\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n   \
    \ words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if\
    \ w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in\
    \ words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n   \
    \ words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if\
    \ w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\\
    t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in\
    \ words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n   \
    \ words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if\
    \ w != \"\\n\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w\
    \ for w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\\
    n\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n   \
    \ words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if\
    \ w != \"\\r\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    r\"]\n    words = [w for w in words if w != \"\\n\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgrmuuwe_.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgrmuuwe_.jl:1\n\
    in expression starting at /tmp/tmpgrmuuwe_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    \n    if length(words) == 0\n  \
    \      return words\n    else\n        \n        words = split(txt, \",\")\n \
    \       \n        if length(words) == 0\n            return words\n        else\n\
    \            \n            words = split(txt, \" \")\n            \n         \
    \   if length(words) == 0\n                return words\n            else\n  \
    \              \n                words = split(txt, \",\")\n                \n\
    \                if length(words) == 0\n                    return words\n   \
    \             else\n                    \n                    words = split(txt,\
    \ \" \")\n                    \n                    if length(words) == 0\n  \
    \                      return words\n                    else\n              \
    \          \n                        words = split(txt, \",\")\n             \
    \           \n                        if length(words) == 0\n                \
    \            return words\n                        else\n                    \
    \        \n                            words = split(txt, \" \")\n           \
    \                 \n                            if length(words) == 0\n      \
    \                          return words\n                            else\n  \
    \                              \n                                words = split(txt,\
    \ \",\")\n                                \n                                if\
    \ length(words) == 0\n                                    return words\n     \
    \                           else\n                                    \n     \
    \                               words = split(txt, \" \")\n                  \
    \                  \n                                    if length(words) == 0\n\
    \                                        return words\n                      \
    \              else\n                                        \n              \
    \                          words = split(txt, \",\")\n                       \
    \                 \n                                        if length(words) ==\
    \ 0\n                                            return words\n              \
    \                          else\n                                            \n\
    \                                            words = split(txt, \" \")\n     \
    \                                       \n                                   \
    \         if length(words) == 0\n                                            \
    \    return words\n                                            else\n        \
    \                                        \n                                  \
    \              words = split(txt, \",\")\n                                   \
    \             \n                                                if length(words)\
    \ == 0\n                                                    return words\n   \
    \                                             else\n                         \
    \                           \n                                               \
    \     words = split(txt, \" \")\n                                            \
    \        \n                                                    if length(words)\
    \ == 0\n                                                        return words\n\
    \                                                    else\n                  \
    \                                      \n                                    \
    \                    words = split(txt, \",\")\n                             \
    \                           \n                                               \
    \         if length(words) == 0\n                                            \
    \                return words\n                                              \
    \          else\n                                                            \n\
    \                                                            words = split(txt,\
    \ \" \")\n                                                            \n     \
    \                                                       if length(words) == 0\n\
    \                                                                return words\n\
    \                                                            else\n          \
    \                                                      \n                    \
    \                                            words = split(txt, \",\")\n     \
    \                                                           \n               \
    \                                                 if length(words) == 0\n    \
    \                                                                return words\n\
    \                                                                else\n      \
    \                                                              \n            \
    \                                                        words = split(txt, \"\
    \ \")\n                                                                    \n\
    \                                                                    if length(words)\
    \ == 0\n                                                                     \
    \                   return words\n                                           \
    \                         else\n                                             \
    \                           \n                                               \
    \                         words = split(txt, \",\")\n                        \
    \                                                \n                          \
    \                                              if length(words) == 0\n       \
    \                                                                     return words\n\
    \                                                                        else\n\
    \                                                                            \n\
    \                                                                            words\
    \ = split(txt, \" \")\n                                                      \
    \                      \n                                                    \
    \                        if length(words) == 0\n                             \
    \                                                   return words\n           \
    \                                                                 else\n     \
    \                                                                           \n\
    \                                                                            \
    \    words = split(txt, \",\")\n                                             \
    \                                   \n                                       \
    \                                         if length(words) == 0\n            \
    \                                                                        return\
    \ words\n                                                                    \
    \            else\n\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpukl0rerp.jl:130\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpukl0rerp.jl:1\n\
    in expression starting at /tmp/tmpukl0rerp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    words = split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n\
    \    return words\nend\n</cell>\n<code language=julia-1.3>\nsplit_words(\"Hello\
    \ world!\")\n</cell>\n<code language=julia-1.3>\nsplit_words(\"Hello,world!\"\
    )\n</cell>\n<code language=julia-1.3>\nsplit_words(\"abcdef\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of words and returns a vector\
    \ of words with all words capitalized.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpca1udovp.jl:21\nin expression starting at\
    \ /tmp/tmpca1udovp.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = Vector{String}()\n\
    \    for word in words\n        if !contains(word, \",\")\n            words_split\
    \ = [word | words_split]\n        else\n            words_split = split(word,\
    \ \",\")\n        end\n    end\n    words_split = words_split[words_split .!=\
    \ \"\"]\n    words_split = words_split[words_split .!= \" \"]\n    words_split\
    \ = words_split[words_split .!= nothing]\n    words_split = words_split[words_split\
    \ .!= nothing]\n    words_split = words_split[words_split .!= nothing]\n    words_split\
    \ = words_split[words_split .!= nothing]\n    words_split = words_split[words_split\
    \ .!= nothing]\n    words_split = words_split[words_split .!= nothing]\n    words_split\
    \ = words_split[words_split .!= nothing]\n    words_split = words_split[words_split\
    \ .!= nothing]\n    words_split = words_split[words_split .!= nothing]\n    words_split\
    \ = words_split[words_split .!= nothing]\n    words_split = words_split[words_split\
    \ .!= nothing]\n    words_split = words_split[words_split .!= nothing]\n    words_split\
    \ = words_split[words_split .!= nothing]\n    words_split = words_split[words_split\
    \ .!= nothing]\n    words_split = words_split[words_split .!= nothing]\n    words_split\
    \ = words_split[words_split .!= nothing]\n    words_split = words_split[words_split\
    \ .!= nothing]\n    words_split = words_split[words_split .!= nothing]\n    words_split\
    \ = words_split[words_split .!= nothing]\n    words_split = words_split[words_split\
    \ .!= nothing]\n    words_split = words_split[words_split .!= nothing]\n    words_split\
    \ = words_split[words_split .!= nothing]\n    words_split = words_split[words_split\
    \ .!= nothing]\n    words_split = words_split[words_split .!= nothing]\n    words_split\
    \ = words_split[words_split .!= nothing]\n    words_split = words_split[words_split\
    \ .!= nothing]\n    words_split = words_split[words_split .!= nothing]\n    words_split\
    \ = words_split[words_split .!= nothing]\n    words_split = words_split[words_split\
    \ .!= nothing]\n    words_split = words_split[words_split .!= nothing]\n    words_split\
    \ = words_split[words_split .!= nothing]\n    words_split = words_split[words_split\
    \ .!= nothing]\n    words_split = words_split[words_split .!= nothing]\n    words_split\
    \ = words_split[\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t\
    @test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv5nl_77p.jl:1\nin expression starting at /tmp/tmpv5nl_77p.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = Vector{String}(undef,\
    \ 0)\n    for word in words\n        if word != \"\"\n            words_split\
    \ = push!(words_split, word)\n        end\n    end\n    words_split\nend\n</cell>\n\
    <code language=julia-1.3>\nsplit_words(\"Hello world!\")\n</cell>\n<code language=julia-1.3>\n\
    split_words(\"Hello,world!\")\n</cell>\n<code language=julia-1.3>\nsplit_words(\"\
    abcdef\")\n</cell>\n<code language=julia-1.3>\nsplit_words(\"Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpns3meqgf.jl:23\nin expression starting at\
    \ /tmp/tmpns3meqgf.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    else\n        words = split(txt, \" \")\n        return Vector{String}(words)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello,world!\")\n</cell>\n\
    <code language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of words and returns a vector of words\
    \ split on commas ',' if the number of commas equals the number of words in the\
    \ vector you should\nsplit on whitespaces if no commas exists in the text you\
    \ should return the number of lower-case letters with odd order in the\nalphabet,\
    \ ord('a') = 0, ord('b') = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"\
    Hello world!\")\n[\"Hello\", \"world!\"]\n>>> split_words(\"Hello,world!\")\n\
    [\"Hello\", \"world!\"]\n>>> split_words(\"abcdef\")\n3\n\"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcml4xhcf.jl:22\nin expression starting at\
    \ /tmp/tmpcml4xhcf.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_vec = Vector{String}(undef,\
    \ 0)\n    for word in words\n        words_vec += split(word, \",\")\n    end\n\
    \    words_vec\nend\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of words\
    \ and returns a vector of words split on commas ',' if the number of commas equals\
    \ the number of words in the vector, otherwise return the number of commas in\
    \ the vector\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpozsitiaw.jl:21\nin expression starting at\
    \ /tmp/tmpozsitiaw.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_no_whitespace = filter(x ->\
    \ !contains(x, \" \"), words)\n    words_no_comma = filter(x -> !contains(x, \"\
    ,\"), words)\n    words_no_odd_order = filter(x -> ord(x) % 2 != 0, words)\n \
    \   \n    if length(words_no_whitespace) == length(words_no_comma) == length(words_no_odd_order)\n\
    \        return words\n    else\n        return words_no_whitespace\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    count_words(txt::String)\n\
    \    Count the number of words in a string\n    \n    Arguments\n    ---------\n\
    \    txt :: String\n        Text to count words from\n    \n    Returns\n    -------\n\
    \    count :: Int64\n        Number of words in txt\n    Examples\n    --------\n\
    \    >>> count_words(\"Hello world!\")\n    6\n    >>> count_words(\"Hello world!\
    \ Hello world!\")\n    7\n    >>> count_words(\"Hello world! Hello world! Hello\
    \ world!\")\n    8\n    >>> count_words(\"Hello world! Hello world! Hello world!\
    \ Hello world!\")\n    9\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3urb27ts.jl:25\nin expression starting at\
    \ /tmp/tmp3urb27ts.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"abcdef\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[]{};:,./<>?\\\
    |`~\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[]{};:,./<>?\\\
    |`~,.\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[]{};:,./<>?\\\
    |`~,.,\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[]{};:,./<>?\\\
    |`~,.,.\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[]{};:,./<>?\\\
    |`~,.,.,\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()-_=+[]{};:,./<>?\\\
    |`~,.,.,.\"]\n    word\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$%\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa2z4wk47.jl:21\nin expression starting at\
    \ /tmp/tmpa2z4wk47.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmp9nwd0_h6.jl:54\nin expression starting at /tmp/tmp9nwd0_h6.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if isempty(txt)\n        return Vector{String}()\n    elseif length(txt)\
    \ == 1 \n        return txt\n    elseif length(txt) == 2 \n        return txt\n\
    \    elseif length(txt) == 3 \n        return txt\n    elseif length(txt) == 4\
    \ \n        return txt\n    elseif length(txt) == 5 \n        return txt\n   \
    \ elseif length(txt) == 6 \n        return txt\n    elseif length(txt) == 7 \n\
    \        return txt\n    elseif length(txt) == 8 \n        return txt\n    elseif\
    \ length(txt) == 9 \n        return txt\n    elseif length(txt) == 10 \n     \
    \   return txt\n    elseif length(txt) == 11 \n        return txt\n    elseif\
    \ length(txt) == 12 \n        return txt\n    elseif length(txt) == 13 \n    \
    \    return txt\n    elseif length(txt) == 14 \n        return txt\n    elseif\
    \ length(txt) == 15 \n        return txt\n    elseif length(txt) == 16 \n    \
    \    return txt\n    elseif length(txt) == 17 \n        return txt\n    elseif\
    \ length(txt) == 18 \n        return txt\n    elseif length(txt) == 19 \n    \
    \    return txt\n    elseif length(txt) == 20 \n        return txt\n    elseif\
    \ length(txt) == 21 \n        return txt\n    elseif length(txt) == 22 \n    \
    \    return txt\n    elseif length(txt) == 23 \n        return txt\n    elseif\
    \ length(txt) == 24 \n        return txt\n    elseif length(txt) == 25 \n    \
    \    return txt\n    elseif length(txt) == 26 \n        return txt\n    elseif\
    \ length(txt) == 27 \n        return txt\n    elseif length(txt) == 28 \n    \
    \    return txt\n    elseif length(txt) == 29 \n        return txt\n    elseif\
    \ length(txt) == 30 \n        return txt\n    elseif length(txt) == 31 \n    \
    \    return txt\n    elseif length(txt) == 32 \n        return txt\n    elseif\
    \ length(txt) == 33 \n        return txt\n    elseif length(txt) == 34 \n    \
    \    return txt\n    elseif length(txt) == 35 \n        return txt\n    elseif\
    \ length(txt) == 36 \n        return txt\n    elseif length(txt) == 37 \n    \
    \    return txt\n    elseif length(txt) == 38 \n        return txt\n    elseif\
    \ length(txt) == 39 \n        return txt\n    elseif length(txt) == 40 \n    \
    \    return txt\n    elseif length(txt) == 41 \n        return txt\n    elseif\
    \ length(txt) == 42 \n        return txt\n    elseif length(txt) == 43 \n    \
    \    return txt\n    elseif length(txt) == 44 \n        return txt\n    elseif\
    \ length(txt) == 45 \n        return txt\n    elseif length(txt) == 46 \n    \
    \    return txt\n    elseif length(txt) == 47 \n        return txt\n    elseif\
    \ length(txt) == 48 \n        return txt\n    elseif length(txt) == 49 \n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp61363pg5.jl:1\nin expression starting at /tmp/tmp61363pg5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    \n    words = split(txt, \" \")\n    \n    word_counts = Dict{String, Int64}()\n\
    \    for word in words\n        if word != \"\"\n            word_counts[word]\
    \ = get(word_counts, word, 0) + 1\n        end\n    end\n    \n    sorted_word_counts\
    \ = sort(collect(values(word_counts)), by=x->x)\n    \n    word_counts_sorted\
    \ = Dict{String, Int64}()\n    for word in sorted_word_counts\n        if word\
    \ != \"\"\n            word_counts_sorted[word] = get(word_counts_sorted, word,\
    \ 0) + 1\n        end\n    end\n    \n    word_counts_sorted = sort(collect(values(word_counts_sorted)),\
    \ by=x->x)\n    \n    word_counts_sorted = Dict{String, Int64}()\n    for word\
    \ in word_counts_sorted\n        if word != \"\"\n            word_counts_sorted[word]\
    \ = get(word_counts_sorted, word, 0) + 1\n        end\n    end\n    \n    word_counts_sorted\
    \ = sort(collect(values(word_counts_sorted)), by=x->x)\n    \n    word_counts_sorted\
    \ = Dict{String, Int64}()\n    for word in word_counts_sorted\n        if word\
    \ != \"\"\n            word_counts_sorted[word] = get(word_counts_sorted, word,\
    \ 0) + 1\n        end\n    end\n    \n    word_counts_sorted = sort(collect(values(word_counts_sorted)),\
    \ by=x->x)\n    \n    word_counts_sorted = Dict{String, Int64}()\n    for word\
    \ in word_counts_sorted\n        if word != \"\"\n            word_counts_sorted[word]\
    \ = get(word_counts_sorted, word, 0) + 1\n        end\n    end\n    \n    word_counts_sorted\
    \ = Dict{String, Int64}()\n    for word in word_counts_sorted\n        if word\
    \ != \"\"\n            word_counts_sorted[word] = get(word_counts_sorted, word,\
    \ 0) + 1\n        end\n    end\n    \n    word_counts_sorted = Dict{String, Int64}()\n\
    \    for word in word_counts_sorted\n        if word != \"\"\n            word_counts_sorted[word]\
    \ = get(word_counts_sorted, word, 0) + 1\n        end\n    end\n    \n    word_counts_sorted\
    \ = Dict{String, Int64}()\n    for word in word_counts_sorted\n        if word\
    \ != \"\"\n            word_counts_sorted[word] = get(word_counts_sorted, word,\
    \ 0) + 1\n        end\n    end\n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_daag1jf.jl:1\nin expression starting at /tmp/tmp_daag1jf.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"]\n    words = [w for w in words if w != \"\
    ,\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w in words\
    \ if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w\
    \ for w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n\
    \    words = [w for w in words if w != \",\"]\n    words = [w for w in words if\
    \ w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for\
    \ w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n   \
    \ words = [w for w in words if w != \"\"]\n    words = [w for w in words if w\
    \ != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for w\
    \ in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words\
    \ = [w for w in words if w != \",\"]\n    words = [w for w in words if w != \"\
    \"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w\
    \ for w in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n\
    \    words = [w for w in words if w != \"\"]\n    words = [w for w in words if\
    \ w != \",\"]\n    words = [w for w in words if w != \"\"]\n    words = [w for\
    \ w in words if w != \",\"]\n    words = [w for w in words if w != \"\"]\n   \
    \ words = [w for w in words if w != \",\"]\n    words = [w for w in words if w\
    \ != \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w\
    \ in words if w != \"\"]\n    words = [w for w in words if w != \",\"]\n    words\
    \ = [w for w in words if w != \"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmp9nwd0_h6.jl:54\nin expression starting at /tmp/tmp9nwd0_h6.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    \n    if length(words) == 0\n  \
    \      return words\n    \n    words = [w for w in words if w != \"\"]\n    \n\
    \    if length(words) == 0\n        return words\n    \n    if length(words) ==\
    \ 1\n        return words\n    \n    words = [w for w in words if w != \"\"]\n\
    \    \n    if length(words) == 0\n        return words\n    \n    if length(words)\
    \ == 1\n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    if length(words)\
    \ == 1\n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    if length(words)\
    \ == 1\n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    if length(words)\
    \ == 1\n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    if length(words)\
    \ == 1\n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    if length(words)\
    \ == 1\n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    if length(words)\
    \ == 1\n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    if length(words)\
    \ == 1\n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    if length(words)\
    \ == 1\n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    if length(words)\
    \ == 1\n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    if length(words)\
    \ == 1\n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n    \n    if length(words)\
    \ == 1\n        return words\n    \n    words = [w for w in words if w != \"\"\
    ]\n    \n    if length(words) == 0\n        return words\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjw1fbh6p.jl:1\nin expression starting at /tmp/tmpjw1fbh6p.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    else\n        words = split(txt, \" \")\n        words = [w for w in words\
    \ if w != \"\"]\n        words = [w for w in words if w != \",\"]\n        words\
    \ = [w for w in words if w != \"\\n\"]\n        words = [w for w in words if w\
    \ != \"\\r\"]\n        words = [w for w in words if w != \"\\t\"]\n        words\
    \ = [w for w in words if w != \"!\"]\n        words = [w for w in words if w !=\
    \ \"?\"]\n        words = [w for w in words if w != \"-\"]\n        words = [w\
    \ for w in words if w != \"_\"]\n        words = [w for w in words if w != \"\
    (\"]\n        words = [w for w in words if w != \")\"]\n        words = [w for\
    \ w in words if w != \"[\"]\n        words = [w for w in words if w != \"]\"]\n\
    \        words = [w for w in words if w != \"{\"]\n        words = [w for w in\
    \ words if w != \"}\"]\n        words = [w for w in words if w != \"|\"]\n   \
    \     words = [w for w in words if w != \"\\\\\"]\n        words = [w for w in\
    \ words if w != \"^\"]\n        words = [w for w in words if w != \"$\"]\n   \
    \     words = [w for w in words if w != \"*\"]\n        words = [w for w in words\
    \ if w != \"?\"]\n        words = [w for w in words if w != \"!\"]\n        words\
    \ = [w for w in words if w != \"#\"]\n        words = [w for w in words if w !=\
    \ \"$\"]\n        words = [w for w in words if w != \"%\"]\n        words = [w\
    \ for w in words if w != \"^\"]\n        words = [w for w in words if w != \"\
    &\"]\n        words = [w for w in words if w != \"*\"]\n        words = [w for\
    \ w in words if w != \"(\"]\n        words = [w for w in words if w != \")\"]\n\
    \        words = [w for w in words if w != \"[\"]\n        words = [w for w in\
    \ words if w != \"]\"]\n        words = [w for w in words if w != \"{\"]\n   \
    \     words = [w for w in words if w != \"}\"]\n        words = [w for w in words\
    \ if w != \"|\"]\n        words = [w for w in words if w != \"\\\\\"]\n      \
    \  words = [w for w in words if w != \"^\"]\n        word\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf2ye04_p.jl:37\nin expression starting at\
    \ /tmp/tmpf2ye04_p.jl:37\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_vec = Vector{String}(undef,\
    \ 0)\n    for word in words\n        if word != \"\"\n            words_vec +=\
    \ split(word, \",\")\n        end\n    end\n    words_vec = words_vec[words_vec\
    \ .!= \"\"]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec\
    \ .!= \",\"]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec =\
    \ words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"\
    ]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec\
    \ .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec =\
    \ words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"\
    ]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec\
    \ .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec =\
    \ words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"\
    ]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec\
    \ .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec =\
    \ words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"\
    ]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec\
    \ .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec =\
    \ words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"\
    ]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec\
    \ .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec =\
    \ words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"\
    ]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec\
    \ .!= \" \"]\n    words_vec = words_vec[words_vec \nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppjksz8zx.jl:1\nin expression starting at /tmp/tmppjksz8zx.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \"abcdef\"]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}<>|:;'?/~,.;\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}<>|:;'?/~,.;,\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}<>|:;'?/~,.;,.\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}<>|:;'?/~,.;,.,\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}<>|:;'?/~,.;,.,.\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}<>|:;'?/~,.;,.,.,\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}<>|:;'?/~,.;,.,.,.\"\
    ]\n    words = [w for w in words if w != \"abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()-_=+[]{}<>|:;'?/~,.;,.,.,.,\"\
    ]\n    words = [w for w in word\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$%\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8pvryrn_.jl:20\nin expression starting at\
    \ /tmp/tmp8pvryrn_.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \" \"]\n    words = [w for w in words if w != \"-\"]\n    words\
    \ = [w for w in words if w != \"_\"]\n    words = [w for w in words if w != \"\
    !\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for w in words\
    \ if w != \"-\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w\
    \ for w in words if w != \"!\"]\n    words = [w for w in words if w != \"-\"]\n\
    \    words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"-\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"-\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"-\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"-\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"-\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"-\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"-\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"-\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"-\"]\n    words = [w for w in words if w != \"?\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpejbdel3w.jl:59\nin expression starting at\
    \ /tmp/tmpejbdel3w.jl:59\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_vec = Vector{String}(undef,\
    \ 0)\n    for w in words\n        if w != \"\"\n            words_vec += split(w,\
    \ \",\")\n        end\n    end\n    words_vec = words_vec[words_vec .!= \"\"]\n\
    \    words_vec = words_vec[words_vec .!= \",\"]\n    words_vec = words_vec[words_vec\
    \ .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec =\
    \ words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"\
    ]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec\
    \ .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec =\
    \ words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"\
    ]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec\
    \ .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec =\
    \ words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"\
    ]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec\
    \ .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec =\
    \ words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"\
    ]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec\
    \ .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec =\
    \ words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"\
    ]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec\
    \ .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec =\
    \ words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec .!= \" \"\
    ]\n    words_vec = words_vec[words_vec .!= \" \"]\n    words_vec = words_vec[words_vec\
    \ .!= \" \"]\n    words_vec = words_vec[words_vec \nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnhcwzrae.jl:1\nin expression starting at /tmp/tmpnhcwzrae.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if isempty(words)\n\
    \        return words\n    else\n        \n        words_split = split(words,\
    \ \",\")\n        \n        if isempty(words_split)\n            return words\n\
    \        else\n            \n            words_split = split(words_split, \" \"\
    )\n            \n            if isempty(words_split)\n                return words\n\
    \            else\n                \n                words_split = split(words_split,\
    \ \"\")\n                \n                if isempty(words_split)\n         \
    \           return words\n                else\n                    \n       \
    \             words_split = split(words_split, \"\")\n                    \n \
    \                   if isempty(words_split)\n                        return words\n\
    \                    else\n                        \n                        words_split\
    \ = split(words_split, \"\")\n                        \n                     \
    \   if isempty(words_split)\n                            return words\n      \
    \                  else\n                            \n                      \
    \      words_split = split(words_split, \"\")\n                            \n\
    \                            if isempty(words_split)\n                       \
    \         return words\n                            else\n                   \
    \             \n                                words_split = split(words_split,\
    \ \"\")\n                                \n                                if\
    \ isempty(words_split)\n                                    return words\n   \
    \                             else\n                                    \n   \
    \                                 words_split = split(words_split, \"\")\n   \
    \                                 \n                                    if isempty(words_split)\n\
    \                                        return words\n                      \
    \              else\n                                        \n              \
    \                          words_split = split(words_split, \"\")\n          \
    \                              \n                                        if isempty(words_split)\n\
    \                                            return words\n                  \
    \                      else\n                                            \n  \
    \                                          words_split = split(words_split, \"\
    \")\n                                            \n                          \
    \                  if isempty(words_split)\n                                 \
    \               return words\n                                            else\n\
    \                                                \n                          \
    \                      words_split = split(words_split, \"\")\n              \
    \                                  \n                                        \
    \        if isempty(words_split)\n                                           \
    \         return words\n                                                else\n\
    \                                                    \n                      \
    \                              words_split = split(words_split, \"\")\n      \
    \                                              \n                            \
    \                        if isempty(words_split)\n                           \
    \                             return words\n                                 \
    \                   else\n                                                   \
    \     \n                                                        words_split =\
    \ split(words_split, \"\")\n                                                 \
    \       \n                                                        return words\n\
    \                                end\n                            end\n      \
    \                  end\n                    end\n                end\n       \
    \     end\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\n    count_words(txt::String)\nusing Test\n\n@testset begin\n\ncandidate =\
    \ split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppayj8odg.jl:105\nin expression starting at\
    \ /tmp/tmppayj8odg.jl:105\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_without_commas = filter(x\
    \ -> !contains(x, \",\"), words)\n    words_without_commas_with_odd_order = filter(x\
    \ -> contains(x, \",\") && contains(x, \"a\") && contains(x, \"b\") && contains(x,\
    \ \"c\") && contains(x, \"d\") && contains(x, \"e\") && contains(x, \"f\"), words_without_commas)\n\
    \    words_without_commas_with_odd_order_with_odd_order = filter(x -> contains(x,\
    \ \",\") && contains(x, \"a\") && contains(x, \"b\") && contains(x, \"c\") &&\
    \ contains(x, \"d\") && contains(x, \"e\") && contains(x, \"f\") && contains(x,\
    \ \"g\") && contains(x, \"h\") && contains(x, \"i\") && contains(x, \"j\") &&\
    \ contains(x, \"k\") && contains(x, \"l\") && contains(x, \"m\") && contains(x,\
    \ \"n\") && contains(x, \"o\") && contains(x, \"p\") && contains(x, \"q\") &&\
    \ contains(x, \"r\") && contains(x, \"s\") && contains(x, \"t\") && contains(x,\
    \ \"u\") && contains(x, \"v\") && contains(x, \"w\") && contains(x, \"x\") &&\
    \ contains(x, \"y\") && contains(x, \"z\"), words_without_commas_with_odd_order)\n\
    \    words_without_commas_with_odd_order_with_odd_order_with_odd_order = filter(x\
    \ -> contains(x, \",\") && contains(x, \"a\") && contains(x, \"b\") && contains(x,\
    \ \"c\") && contains(x, \"d\") && contains(x, \"e\") && contains(x, \"f\") &&\
    \ contains(x, \"g\") && contains(x, \"h\") && contains(x, \"i\") && contains(x,\
    \ \"j\") && contains(x, \"k\") && contains(x, \"l\") && contains(x, \"m\") &&\
    \ contains(x, \"n\") && contains(x, \"o\") && contains(x, \"p\") && contains(x,\
    \ \"q\") && contains(x, \"r\") && contains(x, \"s\") && contains(x, \"t\") &&\
    \ contains(x, \"u\") && contains(x, \"v\") && contains(x, \"w\") && contains(x,\
    \ \"x\") && contains(x, \"y\") && contains(x, \"z\") && contains(x, \"a\") &&\
    \ contains(x, \"b\") && contains(x, \"c\") && contains(x, \"d\") && contains(x,\
    \ \"e\") && contains(x, \"f\") && contains(x, \"g\") && contains(x, \"h\") &&\
    \ contains(x, \"i\") && contains(x, \"j\") && contains(x, \"k\") && contains(\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg8d0ev9_.jl:21\nin expression starting at\
    \ /tmp/tmpg8d0ev9_.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    \n\
    \    words = split(txt, \" \")\n    \n    word_counts = Dict{String, Int64}()\n\
    \    for word in words\n        if word in word_counts\n            word_counts[word]\
    \ += 1\n        else\n            word_counts[word] = 1\n        end\n    end\n\
    \    \n    word_counts = collect(values(word_counts))\n    \n    word_counts =\
    \ sort(word_counts)\n    \n    word_counts = word_counts[2:end]\n    \n    word_counts\
    \ = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n    \n   \
    \ word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpunwz0w0s.jl:1\nin expression starting at /tmp/tmpunwz0w0s.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    \n    words = split(txt, \" \")\n    \n    word_counts = Dict{String, Int64}()\n\
    \    for word in words\n        word_counts[word] = get(word_counts, word, 0)\
    \ + 1\n    end\n    \n    word_counts = collect(values(word_counts))\n    \n \
    \   word_counts = sort(word_counts)\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_counts = word_counts[2:end]\n    \n    word_counts = word_counts[2:end]\n\
    \    \n    word_count\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp602zux49.jl:1\nin expression starting at /tmp/tmp602zux49.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = map(x -> lowercase(x), words)\n\
    \    words = filter(x -> !isempty(x), words)\n    words = filter(x -> x != \"\
    ,\", words)\n    words = filter(x -> x != \" \", words)\n    words = filter(x\
    \ -> x != \"\", words)\n    return words\nend\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| c |>\nThis doesn't seem to work if you have a string like `\" , , , ,\
    \ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,\
    \ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,\
    \ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,\
    \ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,\
    \ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,\
    \ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,\
    \ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,\
    \ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,\
    \ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,\
    \ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , ,\
    \ , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , , \nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmrekluxv.jl:22\nin expression starting at\
    \ /tmp/tmpmrekluxv.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = Vector{String}(undef,\
    \ 0)\n    for word in words\n        if !isempty(word)\n            words_split\
    \ = push!(words_split, word)\n        end\n    end\n    words_split\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of words and returns\
    \ a vector of unique words. \nExamples\n>>> unique_words = [\"Hello\", \"world!\"\
    , \"Hello\", \"world!\"]\n>>> unique_words\n[\"Hello\", \"world!\"]\n>>> unique_words(unique_words)\n\
    [\"Hello\", \"world!\"]\n>>> unique_words([\"Hello\", \"world!\", \"Hello\", \"\
    world!\"])\n[\"Hello\", \"world!\"]\n>>> unique_words([\"Hello\", \"world!\",\
    \ \"Hello\", \"world!\", \"Hello\", \"world!\"])\n[\"Hello\", \"world!\"]\n>>>\
    \ unique_words([\"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"\
    , \"Hello\", \"world!\"])\n[\"Hello\", \"world!\"]\n>>> unique_words([\"Hello\"\
    , \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"\
    , \"Hello\", \"world!\"])\n[\"Hello\", \"world!\"]\n>>> unique_words([\"Hello\"\
    , \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"\
    , \"Hello\", \"world!\", \"Hello\", \"world!\"])\n[\"Hello\", \"world!\"]\n>>>\
    \ unique_words([\"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"\
    , \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\"\
    , \"world!\"])\n[\"Hello\", \"world!\"]\n>>> unique_words([\"Hello\", \"world!\"\
    , \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\"\
    , \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"\
    , \"Hello\", \"world!\"])\n[\"Hello\", \"world!\"]\n>>> unique_words([\"Hello\"\
    , \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"\
    , \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\"\
    , \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"\
    , \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\"\
    , \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"\
    , \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\"\
    , \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"\
    , \"Hello\", \"world!\", \"Hello\nusing Test\n\n@testset begin\n\ncandidate =\
    \ split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdk2_dobf.jl:23\nin expression starting at\
    \ /tmp/tmpdk2_dobf.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if isempty(txt)\n        return txt\n    else\n        words =\
    \ split(txt, \" \")\n        words_no_spaces = filter(x -> !isspace(x), words)\n\
    \        words_no_commas = filter(x -> !iscomma(x), words)\n        words_no_commas_no_spaces\
    \ = filter(x -> !isspace(x), words_no_commas)\n        return length(words_no_spaces)\
    \ + length(words_no_commas_no_spaces) + length(words_no_commas)\n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ a vector of words split on commas if no commas exists in the text you should\n\
    split on whitespaces if no whitespaces exists in the text you should return the\
    \ number of lower-case letters with odd order in the\nalphabet, ord('a') = 0,\
    \ ord('b') = 1, ... ord('z') = 25\nExamples\n>>> split_words(\"Hello world!\"\
    )\n[\"Hello\", \"world!\"]\n>>> split_words(\"Hello,world!\")\n[\"Hello\", \"\
    world!\"]\n>>> split_words(\"abcdef\")\n3\n>>> split_words(\"Hello world! Hello\
    \ world! Hello world!\")\n[\"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\"\
    , \"world!\"]\n>>> split_words(\"Hello world! Hello world! Hello world! Hello\
    \ world!\")\n[\"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"\
    , \"Hello\", \"world!\"]\n>>> split_words(\"Hello world! Hello world! Hello world!\
    \ Hello world! Hello world!\")\n[\"Hello\", \"world!\", \"Hello\", \"world!\"\
    , \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"]\n>>> split_words(\"\
    Hello world! Hello world! Hello world! Hello world! Hello world! Hello world!\
    \ Hello world!\")\n[\"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"\
    world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"\
    ]\n>>> split_words(\"Hello world! Hello world! Hello world! Hello world! Hello\
    \ world! Hello world! Hello world! Hello world!\")\n[\"Hello\", \"world!\", \"\
    Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\",\
    \ \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\"]\n>>> split_words(\"\
    Hello world! Hello world! Hello world! Hello world! Hello world! Hello world!\
    \ Hello world! Hello world! Hello world! Hello world!\")\n[\"Hello\", \"world!\"\
    , \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\", \"world!\", \"Hello\"\
    , \"world!\", \"Hello\", \"world\nusing Test\n\n@testset begin\n\ncandidate =\
    \ split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdhrhh_sg.jl:24\nin expression starting at\
    \ /tmp/tmpdhrhh_sg.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\t\"\n        return Vector{String}()\n    elseif txt == \"\\r\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\t\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\r\"\n        return Vector{String}()\n    elseif txt == \"\\t\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\r\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\t\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\r\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\t\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\n\"\n        return Vector{String}()\n    elseif txt == \"\\r\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\t\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\r\"\n        return Vector{String}()\n    elseif txt == \"\\t\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\r\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\t\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\r\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\t\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\n\"\n        return Vector{String}()\n    elseif txt == \"\\r\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\t\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\r\"\n        return Vector{String}()\n    elseif txt == \"\\t\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\n\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\r\"\n        return Vector{String}()\n    elseif txt ==\
    \ \"\\t\"\n        return Vector{String}()\n    elseif txt == \"\\n\"\n      \
    \  return Vector{String}()\n    elseif txt == \"\\r\"\n        return Vector{String}()\n\
    \nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpofnhl_cr.jl:1\nin expression starting at /tmp/tmpofnhl_cr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = split(txt, \",\")\n\
    \    if length(words) == length(words_split)\n        return words\n    else\n\
    \        return words_split\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbiwzj_i7.jl:22\nin expression starting at\
    \ /tmp/tmpbiwzj_i7.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = Vector{String}()\n\
    \    for w in words\n        words_split = words_split ++ split(w, \",\")\n  \
    \  end\n    words_split = words_split ++ split(lowercase(words), \"\")\n    words_split\
    \ = words_split ++ [lowercase(words[end-1])]\n    words_split = words_split ++\
    \ [lowercase(words[end])]\n    words_split = words_split ++ [lowercase(words[end-1])]\n\
    \    words_split = words_split ++ [lowercase(words[end])]\n    words_split = words_split\
    \ ++ [lowercase(words[end-1])]\n    words_split = words_split ++ [lowercase(words[end])]\n\
    \    words_split = words_split ++ [lowercase(words[end-1])]\n    words_split =\
    \ words_split ++ [lowercase(words[end])]\n    words_split = words_split ++ [lowercase(words[end-1])]\n\
    \    words_split = words_split ++ [lowercase(words[end])]\n    words_split = words_split\
    \ ++ [lowercase(words[end-1])]\n    words_split = words_split ++ [lowercase(words[end])]\n\
    \    words_split = words_split ++ [lowercase(words[end-1])]\n    words_split =\
    \ words_split ++ [lowercase(words[end])]\n    words_split = words_split ++ [lowercase(words[end-1])]\n\
    \    words_split = words_split ++ [lowercase(words[end])]\n    words_split = words_split\
    \ ++ [lowercase(words[end-1])]\n    words_split = words_split ++ [lowercase(words[end])]\n\
    \    words_split = words_split ++ [lowercase(words[end-1])]\n    words_split =\
    \ words_split ++ [lowercase(words[end])]\n    words_split = words_split ++ [lowercase(words[end-1])]\n\
    \    words_split = words_split ++ [lowercase(words[end])]\n    words_split = words_split\
    \ ++ [lowercase(words[end-1])]\n    words_split = words_split ++ [lowercase(words[end])]\n\
    \    words_split = words_split ++ [lowercase(words[end-1])]\n    words_split =\
    \ words_split ++ [lowercase(words[end])]\n    words_split = words_split ++ [lowercase(words[end-1])]\n\
    \    words_split = words_split ++ [lowercase(words[end])]\n    words_split = words_split\
    \ ++ [lowercase(words[end-1])]\n    words_split = words_split ++ [lowercase(words[end])]\n\
    \    words_split = words_split ++ [lowercase(words[end-1])]\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgr91o1v0.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgr91o1v0.jl:1\n\
    in expression starting at /tmp/tmpgr91o1v0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = words[words != \"\"]\n \
    \   words = words[words != \",\"]\n    words = words[words != \".\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpevd23nin.jl:71\nin expression starting at\
    \ /tmp/tmpevd23nin.jl:71\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    \n    if isempty(words)\n      \
    \  return words\n    else\n        words_split = split(words, \",\")\n       \
    \ \n        if isempty(words_split)\n            return words\n        else\n\
    \            words_split2 = split(words_split, \" \")\n            \n        \
    \    if isempty(words_split2)\n                return words\n            else\n\
    \                words_split3 = split(words_split2, \" \")\n                \n\
    \                if isempty(words_split3)\n                    return words\n\
    \                else\n                    words_split4 = split(words_split3,\
    \ \" \")\n                    \n                    if isempty(words_split4)\n\
    \                        return words\n                    else\n            \
    \            words_split5 = split(words_split4, \" \")\n                     \
    \   \n                        if isempty(words_split5)\n                     \
    \       return words\n                        else\n                         \
    \   words_split6 = split(words_split5, \" \")\n                            \n\
    \                            if isempty(words_split6)\n                      \
    \          return words\n                            else\n                  \
    \              words_split7 = split(words_split6, \" \")\n                   \
    \             \n                                if isempty(words_split7)\n   \
    \                                 return words\n                             \
    \   else\n                                    words_split8 = split(words_split7,\
    \ \" \")\n                                    \n                             \
    \       if isempty(words_split8)\n                                        return\
    \ words\n                                    else\n                          \
    \              words_split9 = split(words_split8, \" \")\n                   \
    \                     \n                                        if isempty(words_split9)\n\
    \                                            return words\n                  \
    \                      else\n                                            words_split10\
    \ = split(words_split9, \" \")\n                                            \n\
    \                                            if isempty(words_split10)\n     \
    \                                           return words\n                   \
    \                         else\n                                             \
    \   words_split11 = split(words_split10, \" \")\n                            \
    \                    \n                                                if isempty(words_split11)\n\
    \                                                    return words\n          \
    \                                      else\n                                \
    \                    words_split12 = split(words_split11, \" \")\n           \
    \                                         \n                                 \
    \                   if isempty(words_split12)\n                              \
    \                          return words\n                                    \
    \                else\n                                                      \
    \  words_split13 = split(words_split12, \" \")\n                             \
    \                           \n                                               \
    \         return words_split13\n                                             \
    \   end\n                                            end\n                   \
    \                     end\n                                    end\n         \
    \                       end\n                            end\n               \
    \         end\n                    end\n                end\n            end\n\
    \        end\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and returns the number of words in the string. \nExamples\n>>>\
    \ count_words(\"Hello world!\")\n5\n>>> count_words(\"Hello world!,\")\n4\n>>>\
    \ count_words(\"Hello world!,\")\n4\n>>> count_words(\"Hello world!,\")\n4\n>>>\
    \ count_words(\"Hello world!,\")\n4\n>>> count_words(\"Hello world!,\")\n4\n>>>\
    \ count_words(\"Hello world!,\")\nusing Test\n\n@testset begin\n\ncandidate =\
    \ split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvfatojey.jl:95\nin expression starting at\
    \ /tmp/tmpvfatojey.jl:95\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = map(lowercase,words)\n \
    \   words = filter(!is_blank,words)\n    words = filter(!is_digit,words)\n   \
    \ words = filter(!is_letter,words)\n    words = filter(!is_punctuation,words)\n\
    \    words = filter(!is_whitespace,words)\n    words = filter(!is_comma,words)\n\
    \    words = filter(!is_odd_order,words)\n    return words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmpqduiyt85.jl:27

    '
  stdout: "test set: Error During Test at /tmp/tmpqduiyt85.jl:30\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  UndefVarError:\
    \ is_blank not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @\
    \ Main /tmp/tmpqduiyt85.jl:16\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqduiyt85.jl:30 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqduiyt85.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpqduiyt85.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  UndefVarError: is_blank\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpqduiyt85.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqduiyt85.jl:31 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqduiyt85.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpqduiyt85.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  UndefVarError: is_blank\
    \ not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n     @ Main /tmp/tmpqduiyt85.jl:16\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqduiyt85.jl:32 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqduiyt85.jl:29\ntest set:\
    \ Error During Test at /tmp/tmpqduiyt85.jl:33\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"]\n  UndefVarError:\
    \ is_blank not defined\n  Stacktrace:\n   [1] split_words(txt::String)\n  "
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words_split = Vector{String}()\n    words_split.push!(words)\n\
    \    words_split.push!(split(txt, \",\"))\n    words_split.push!(split(txt, \"\
    .\"))\n    words_split.push!(split(txt, \";\"))\n    words_split.push!(split(txt,\
    \ \" \"))\n    words_split.push!(split(txt, \"-\"))\n    words_split.push!(split(txt,\
    \ \"/\"))\n    words_split.push!(split(txt, \"\\\\\"))\n    words_split.push!(split(txt,\
    \ \"'\"))\n    words_split.push!(split(txt, \"!\"))\n    words_split.push!(split(txt,\
    \ \"?\"))\n    words_split.push!(split(txt, \"(\"))\n    words_split.push!(split(txt,\
    \ \")\"))\n    words_split.push!(split(txt, \"[\"))\n    words_split.push!(split(txt,\
    \ \"]\"))\n    words_split.push!(split(txt, \"{\"))\n    words_split.push!(split(txt,\
    \ \"}\"))\n    words_split.push!(split(txt, \"|\"))\n    words_split.push!(split(txt,\
    \ \"~\"))\n    words_split.push!(split(txt, \"-\"))\n    words_split.push!(split(txt,\
    \ \"+\"))\n    words_split.push!(split(txt, \"=\"))\n    words_split.push!(split(txt,\
    \ \";\"))\n    words_split.push!(split(txt, \".\"))\n    words_split.push!(split(txt,\
    \ \"?\"))\n    words_split.push!(split(txt, \"!\"))\n    words_split.push!(split(txt,\
    \ \"(\"))\n    words_split.push!(split(txt, \")\"))\n    words_split.push!(split(txt,\
    \ \"[\"))\n    words_split.push!(split(txt, \"]\"))\n    words_split.push!(split(txt,\
    \ \"{\"))\n    words_split.push!(split(txt, \"}\"))\n    words_split.push!(split(txt,\
    \ \"|\"))\n    words_split.push!(split(txt, \"~\"))\n    words_split.push!(split(txt,\
    \ \"-\"))\n    words_split.push!(split(txt, \"+\"))\n    words_split.push!(split(txt,\
    \ \"=\"))\n    words_split.push!(split(txt, \";\"))\n    words_split.push!(split(txt,\
    \ \".\"))\n    words_split.push!(split(txt, \"?\"))\n    words_split.push!(split(txt,\
    \ \"!\"))\n    words_split.push!(split(txt, \"(\"))\n    words_split.push!(split(txt,\
    \ \")\"))\n    words_split.push!(split(txt, \"[\"))\n    words_split.push!(split(txt,\
    \ \"]\"))\n    words_split.push!(split(\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpumz6g1rc.jl:64\nin expression starting at\
    \ /tmp/tmpumz6g1rc.jl:64\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    \n    if txt.chars().filter(x -> x == ' ').length == 0\n        return split(txt,\
    \ \",\")\n    else\n        return split(txt, \" \")\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8pf7obsl.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8pf7obsl.jl:1\n\
    in expression starting at /tmp/tmp8pf7obsl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if isempty(txt)\n        return Vector{String}()\n    else\n  \
    \      words = split(txt, \" \")\n        words = [w for w in words if w != \"\
    \"]\n        words = [w for w in words if w != \",\"]\n        words = [w for\
    \ w in words if w != \".\"]\n        words = [w for w in words if w != \"!\"]\n\
    \        words = [w for w in words if w != \"?\"]\n        words = [w for w in\
    \ words if w != \"!\"]\n        words = [w for w in words if w != \"?\"]\n   \
    \     words = [w for w in words if w != \"!\"]\n        words = [w for w in words\
    \ if w != \"?\"]\n        words = [w for w in words if w != \"!\"]\n        words\
    \ = [w for w in words if w != \"?\"]\n        words = [w for w in words if w !=\
    \ \"!\"]\n        words = [w for w in words if w != \"?\"]\n        words = [w\
    \ for w in words if w != \"!\"]\n        words = [w for w in words if w != \"\
    ?\"]\n        words = [w for w in words if w != \"!\"]\n        words = [w for\
    \ w in words if w != \"?\"]\n        words = [w for w in words if w != \"!\"]\n\
    \        words = [w for w in words if w != \"?\"]\n        words = [w for w in\
    \ words if w != \"!\"]\n        words = [w for w in words if w != \"?\"]\n   \
    \     words = [w for w in words if w != \"!\"]\n        words = [w for w in words\
    \ if w != \"?\"]\n        words = [w for w in words if w != \"!\"]\n        words\
    \ = [w for w in words if w != \"?\"]\n        words = [w for w in words if w !=\
    \ \"!\"]\n        words = [w for w in words if w != \"?\"]\n        words = [w\
    \ for w in words if w != \"!\"]\n        words = [w for w in words if w != \"\
    ?\"]\n        words = [w for w in words if w != \"!\"]\n        words = [w for\
    \ w in words if w != \"?\"]\n        words = [w for w in words if w != \"!\"]\n\
    \        words = [w for w in words if w != \"?\"]\n        words = [w for w in\
    \ words if w != \"!\"]\n        words = [w for w in words if w != \"?\"]\n   \
    \     words = [w for w in words if w != \"!\"]\n        words = [w for w in words\
    \ if w != \"?\"]\n        words = [w for w in word\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmps_i6eklt.jl:56\nin expression starting at /tmp/tmps_i6eklt.jl:56\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if txt == \"\" \n        return [] \n    else \n        words =\
    \ split(txt, \" \") \n        words = [w for w in words if w != \"\"] \n     \
    \   words = [w for w in words if w != \",\"] \n        words = [w for w in words\
    \ if w != \" \"]\n        return words\n    end\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8kgx2iyw.jl:24\nin expression starting at\
    \ /tmp/tmp8kgx2iyw.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return txt\n    elseif txt == \"\\t\"\n  \
    \      return txt\n    elseif txt == \"\\r\"\n        return txt\n    elseif txt\
    \ == \"\\t\"\n        return txt\n    elseif txt == \"\\n\"\n        return txt\n\
    \    elseif txt == \"\\r\"\n        return txt\n    elseif txt == \"\\t\"\n  \
    \      return txt\n    elseif txt == \"\\n\"\n        return txt\n    elseif txt\
    \ == \"\\r\"\n        return txt\n    elseif txt == \"\\t\"\n        return txt\n\
    \    elseif txt == \"\\n\"\n        return txt\n    elseif txt == \"\\r\"\n  \
    \      return txt\n    elseif txt == \"\\t\"\n        return txt\n    elseif txt\
    \ == \"\\n\"\n        return txt\n    elseif txt == \"\\r\"\n        return txt\n\
    \    elseif txt == \"\\t\"\n        return txt\n    elseif txt == \"\\n\"\n  \
    \      return txt\n    elseif txt == \"\\r\"\n        return txt\n    elseif txt\
    \ == \"\\t\"\n        return txt\n    elseif txt == \"\\n\"\n        return txt\n\
    \    elseif txt == \"\\r\"\n        return txt\n    elseif txt == \"\\t\"\n  \
    \      return txt\n    elseif txt == \"\\n\"\n        return txt\n    elseif txt\
    \ == \"\\r\"\n        return txt\n    elseif txt == \"\\t\"\n        return txt\n\
    \    elseif txt == \"\\n\"\n        return txt\n    elseif txt == \"\\r\"\n  \
    \      return txt\n    elseif txt == \"\\t\"\n        return txt\n    elseif txt\
    \ == \"\\n\"\n        return txt\n    elseif txt == \"\\r\"\n        return txt\n\
    \    elseif txt == \"\\t\"\n        return txt\n    elseif txt == \"\\n\"\n  \
    \      return txt\n    elseif txt == \"\\r\"\n        return txt\n    elseif txt\
    \ == \"\\t\"\n        return txt\n    elseif txt == \"\\n\"\n        return txt\n\
    \    elseif txt == \"\\r\"\n        return txt\n    elseif txt == \"\\t\"\n  \
    \      return txt\n    elseif txt == \"\\n\"\n        return txt\n    elseif txt\
    \ == \"\\r\"\n        return txt\n    elseif txt == \"\\t\"\n        return txt\n\
    \    elseif txt == \"\\n\"\n        return txt\n    elseif txt == \"\\r\"\n  \
    \      return txt\n    elseif txt == \"\\t\"\n        return txt\n    elseif txt\
    \ == \"\\n\"\n        return txt\n    elseif txt == \"\\r\"\n        return txt\n\
    \    elseif txt == \"\\t\"\n        return txt\n    elseif txt == \"\\n\"\n  \
    \      return txt\n    elseif txt == \"\\r\"\n        return txt\n    elseif txt\
    \ == \"\\t\"\n        return txt\n    elseif txt == \"\\n\"\n        return txt\n\
    \    elseif txt == \"\\r\"\n        return txt\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx6pnd_qj.jl:1\nin expression starting at /tmp/tmpx6pnd_qj.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words = [w for w in words if w != \"\"\
    ]\n    if length(words) == 0\n        return length(words)\n    else\n       \
    \ return words\n    end\nend\n</code>\n<|/ a tags=julia,string |>\n<| c |>\nThis\
    \ doesn't seem to work. `split_words(\"Hello world!\")` returns `[\"Hello\", \"\
    world!\"]` instead of `[\"Hello\", \"world!\"]`.\n<|/ c |>\n<| c |>\nI tested\
    \ it on julia 0.6.2 and it works. What version are you using?\n<|/ c |>\n<| c\
    \ |>\nI'm using julia 0.6.2\n<|/ c |>\n<| c |>\nI tested it on julia 0.6.2 and\
    \ it works. What version are you using?\n<|/ c |>\n<| c |>\nI'm using julia 0.6.2\n\
    <|/ c |>\n<| a tags=julia,string |>\nI like to use regular expressions for this\
    \ kind of thing:\n<code>\njulia> using Regexp\nusing Test\n\n@testset begin\n\n\
    candidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"\
    world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t\
    @test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpom2g3ap2.jl:22\nin expression starting at\
    \ /tmp/tmpom2g3ap2.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words = words[words != \"\"]\n    if length(words)\
    \ == 0\n        return words\n    else\n        words = words[2:end]\n       \
    \ words = words[words != \"\"]\n        return words\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nsplit_words(\"Hello world!\")\n</cell>\n<code language=julia-1.0>\n\
    split_words(\"Hello,world!\")\n</cell>\n<code language=julia-1.0>\nsplit_words(\"\
    abcdef\")\n</cell>\n<code language=julia-1.0>\nsplit_words(\"Hello world!,\")\n\
    </cell>\n<code language=julia-1.0>\nsplit_words(\"Hello world!,\")\n</cell>\n\
    <code language=julia-1.0>\nsplit_words(\"Hello world!,\")\n</cell>\n<code language=julia-1.0>\n\
    split_words(\"Hello world!,\")\n</cell>\n<code language=julia-1.0>\nsplit_words(\"\
    Hello world!,\")\n</cell>\n<code language=julia-1.0>\nsplit_words(\"Hello world!,\"\
    )\n</cell>\n<code language=julia-1.0>\nsplit_words(\"Hello world!,\")\n</cell>\n\
    <code language=julia-1.0>\nsplit_words(\"Hello world!,\")\n</cell>\n<code language=julia-1.0>\n\
    split_words(\"Hello world!,\")\n</cell>\n<code language=julia-1.0>\nsplit_words(\"\
    Hello world!,\")\n</cell>\n<code language=julia-1.0>\nsplit_words(\"Hello world!,\"\
    )\n</cell>\n<code language=julia-1.0>\nsplit_words(\"Hello world!,\")\n</cell>\n\
    <code language=julia-1.0>\nsplit_words(\"Hello world!,\")\n</cell>\n<code language=julia-1.0>\n\
    split_words(\"Hello world!,\")\n</cell>\n<code language=julia-1.0>\nsplit_words(\"\
    Hello world!,\")\n</cell>\n<code language=julia-1.0>\nsplit_words(\"Hello world!,\"\
    )\n</cell>\n<code language=julia-1.0>\nsplit_words(\"Hello world!,\")\n</cell>\n\
    <code language=julia-1.0>\nsplit_words(\"Hello world!,\")\n</cell>\n<code language=julia-1.0>\n\
    split_words(\"Hello world!,\")\n</cell>\n<code language=julia-1.0>\nsplit_words(\"\
    Hello world!,\")\n</cell>\n<code language=julia-1.0>\nsplit_words(\"Hello world!,\"\
    )\n</cell>\n<code language=julia-1.0>\nsplit_words(\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpadjupbiy.jl:24\nin expression starting at\
    \ /tmp/tmpadjupbiy.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in\
    \ words if w != \".\"]\n    words = [w for w in words if w != \"!\"]\n    words\
    \ = [w for w in words if w != \"?\"]\n    words = [w for w in words if w != \"\
    !\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for w in words\
    \ if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w\
    \ for w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n\
    \    words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwi01if4c.jl:59\nin expression starting at\
    \ /tmp/tmpwi01if4c.jl:59\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if length(words) ==\
    \ 0\n        return words\n    \n    if length(words) == 1 \n        return words\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9_fsyhh8.jl:1\nin expression starting at /tmp/tmp9_fsyhh8.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = Vector{String}(undef,\
    \ 0)\n    for w in words\n        words_split = words_split ++ split(w, \",\"\
    )\n    end\n    words_split = words_split ++ split(words, \" \")\n    words_split\
    \ = words_split ++ split(words, \"\\n\")\n    words_split = words_split ++ split(words,\
    \ \"\\r\")\n    words_split = words_split ++ split(words, \"\\t\")\n    words_split\
    \ = words_split ++ split(words, \"\\v\")\n    words_split = words_split ++ split(words,\
    \ \"\\f\")\n    words_split = words_split ++ split(words, \"\\a\")\n    words_split\
    \ = words_split ++ split(words, \"\\e\")\n    words_split = words_split ++ split(words,\
    \ \"\\h\")\n    words_split = words_split ++ split(words, \"\\i\")\n    words_split\
    \ = words_split ++ split(words, \"\\o\")\n    words_split = words_split ++ split(words,\
    \ \"\\v\")\n    words_split = words_split ++ split(words, \"\\e\")\n    words_split\
    \ = words_split ++ split(words, \"\\a\")\n    words_split = words_split ++ split(words,\
    \ \"\\h\")\n    words_split = words_split ++ split(words, \"\\i\")\n    words_split\
    \ = words_split ++ split(words, \"\\o\")\n    words_split = words_split ++ split(words,\
    \ \"\\v\")\n    words_split = words_split ++ split(words, \"\\e\")\n    words_split\
    \ = words_split ++ split(words, \"\\a\")\n    words_split = words_split ++ split(words,\
    \ \"\\h\")\n    words_split = words_split ++ split(words, \"\\i\")\n    words_split\
    \ = words_split ++ split(words, \"\\o\")\n    words_split = words_split ++ split(words,\
    \ \"\\v\")\n    words_split = words_split ++ split(words, \"\\e\")\n    words_split\
    \ = words_split ++ split(words, \"\\a\")\n    words_split = words_split ++ split(words,\
    \ \"\\h\")\n    words_split = words_split ++ split(words, \"\\i\")\n    words_split\
    \ = words_split ++ split(words, \"\\o\")\n    words_split = words_split ++ split(words,\
    \ \"\\v\")\n    words_split = words_split ++ split(words, \"\\e\")\n    words_split\
    \ = words_split ++ split(words, \"\\a\")\n    words_split = words_split ++ split(words,\
    \ \"\\h\")\n    words_split = words_split ++ split(words, \"\\i\")\n    words_split\
    \ = words_split ++ split(words, \"\\o\")\n    words_split = words_split ++ split(words,\
    \ \"\\v\")\n    words_split = words_split ++ split(words, \"\\e\")\n    words_split\
    \ = words_split ++ split(words, \"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpj2nvktzz.jl:27\nin expression starting at /tmp/tmpj2nvktzz.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return txt\n    else\n\
    \        words = split(txt, \" \")\n        words = words[words != \"\"]\n   \
    \     return words\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,
    0 broken.

    in expression starting at /tmp/tmp_wt8n54u.jl:25

    '
  stdout: "test set: Error During Test at /tmp/tmp_wt8n54u.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world!\") == [\"Hello\", \"world!\"]\n  type\
    \ String has no field trim\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42\
    \ [inlined]\n   [2] split_words(txt::String)\n     @ Main /tmp/tmp_wt8n54u.jl:14\n\
    \   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_wt8n54u.jl:28 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_wt8n54u.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp_wt8n54u.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,world!\") == [\"Hello\", \"world!\"]\n  type String has no\
    \ field trim\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] split_words(txt::String)\n     @ Main /tmp/tmp_wt8n54u.jl:14\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_wt8n54u.jl:29 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_wt8n54u.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp_wt8n54u.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"]\n  type String has\
    \ no field trim\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n\
    \   [2] split_words(txt::String)\n     @ Main /tmp/tmp_wt8n54u.jl:14\n   [3] macro\
    \ expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp_wt8n54u.jl:30 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp_wt8n54u.jl:27\ntest set:\
    \ Error During Test at /tmp/tmp_wt8n54u.jl:31\n  Test threw exception\n  Expression:\
    \ candidate(\"Hello,Hel"
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if isempty(txt)\n        return Vector{String}()\n    else\n  \
    \      words = split(txt, \" \")\n        words_without_commas = filter(x->!contains(x,\
    \ \",\"), words)\n        words_without_commas = filter(x->!contains(x, \"-\"\
    ), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"!\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"?\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n        words_without_commas = filter(x->!contains(x,\
    \ \"-\"), words_without_commas)\n        words_without_commas = filter(x->!\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn_3z52o3.jl:44\nin expression starting at\
    \ /tmp/tmpn_3z52o3.jl:44\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_without_commas = filter(x->!contains(x,\
    \ \",\"), words)\n    words_without_commas_without_spaces = filter(x->!contains(x,\
    \ \" \"), words_without_commas)\n    words_without_commas_without_spaces_without_commas\
    \ = filter(x->!contains(x, \",\"), words_without_commas_without_spaces)\n    words_without_commas_without_spaces_without_commas_without_spaces\
    \ = filter(x->!contains(x, \" \"), words_without_commas_without_spaces_without_commas)\n\
    \    words_without_commas_without_spaces_without_commas_without_spaces_without_commas\
    \ = filter(x->!contains(x, \",\"), words_without_commas_without_spaces_without_commas_without_spaces)\n\
    \    words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces\
    \ = filter(x->!contains(x, \" \"), words_without_commas_without_spaces_without_commas_without_spaces_without_commas)\n\
    \    words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas\
    \ = filter(x->!contains(x, \",\"), words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces)\n\
    \    words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces\
    \ = filter(x->!contains(x, \" \"), words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas)\n\
    \    words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas\
    \ = filter(x->!contains(x, \",\"), words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas)\n\
    \    words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces\
    \ = filter(x->!contains(x, \" \"), words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas)\n\
    \    words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas\
    \ = filter(x->!contains(x, \",\"), words_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_commas_without_spaces_without_comma\n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpotozxznl.jl:26\nin expression starting at\
    \ /tmp/tmpotozxznl.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_without_commas = filter(x\
    \ -> x != \",\", words)\n    words_without_commas = filter(x -> x != \"\", words_without_commas)\n\
    \    words_without_commas = filter(x -> x != \" \", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\n\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\r\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\t\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\r\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\t\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\n\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\r\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\t\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\r\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\t\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\n\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\r\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\t\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\r\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\t\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\n\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\r\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\t\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\r\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\t\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\n\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\r\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\t\", words_without_commas)\n  \
    \  words_without_commas = filter(x -> x != \"\\r\", words_without_commas)\n  \
    \  words_\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm2gjuim7.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm2gjuim7.jl:1\n\
    in expression starting at /tmp/tmpm2gjuim7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_without_commas = filter(x\
    \ -> !contains(x, \",\"), words)\n    words_without_commas_without_spaces = filter(x\
    \ -> !contains(x, \" \"), words_without_commas)\n    words_without_commas_without_spaces_without_comma\
    \ = filter(x -> !contains(x, \",\"), words_without_commas_without_spaces)\n  \
    \  words_without_commas_without_spaces_without_comma = filter(x -> !contains(x,\
    \ \" \"), words_without_commas_without_spaces_without_comma)\n    words_without_commas_without_spaces_without_comma\
    \ = filter(x -> !contains(x, \",\"), words_without_commas_without_spaces_without_comma)\n\
    \    words_without_commas_without_spaces_without_comma = filter(x -> !contains(x,\
    \ \" \"), words_without_commas_without_spaces_without_comma)\n    words_without_commas_without_spaces_without_comma\
    \ = filter(x -> !contains(x, \",\"), words_without_commas_without_spaces_without_comma)\n\
    \    words_without_commas_without_spaces_without_comma = filter(x -> !contains(x,\
    \ \" \"), words_without_commas_without_spaces_without_comma)\n    words_without_commas_without_spaces_without_comma\
    \ = filter(x -> !contains(x, \",\"), words_without_commas_without_spaces_without_comma)\n\
    \    words_without_commas_without_spaces_without_comma = filter(x -> !contains(x,\
    \ \" \"), words_without_commas_without_spaces_without_comma)\n    words_without_commas_without_spaces_without_comma\
    \ = filter(x -> !contains(x, \",\"), words_without_commas_without_spaces_without_comma)\n\
    \    words_without_commas_without_spaces_without_comma = filter(x -> !contains(x,\
    \ \" \"), words_without_commas_without_spaces_without_comma)\n    words_without_commas_without_spaces_without_comma\
    \ = filter(x -> !contains(x, \",\"), words_without_commas_without_spaces_without_comma)\n\
    \    words_without_commas_without_spaces_without_comma = filter(x -> !contains(x,\
    \ \" \"), words_without_commas_without_spaces_without_comma)\n    words_without_commas_without_spaces_without_comma\
    \ = filter(x -> !contains(x, \",\"), words_without_commas_without_spaces_without_comma)\n\
    \    words_without_commas_without_spaces_without_comma = filter(x -> !contains(x,\
    \ \" \"), words_without_commas_without_spaces_without_comma)\n    words_without_commas_without_spaces_without_comma\
    \ = filter(x -> !contains(x, \",\"), words_without_commas_without_spaces_without_comma)\n\
    \    words_without_commas_without_spaces_without_comma = filter(x -> !contains(x,\
    \ \" \"), words_\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t\
    @test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4tkiqm9s.jl:33\nin expression starting at\
    \ /tmp/tmp4tkiqm9s.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words = [w for w in words if w != \"\"\
    ]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \" \"]\n    words = [w for w in words if w != \".\"]\n    words = [w\
    \ for w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n\
    \    words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n    words = [w for\
    \ w in words if w != \"?\"]\n    words = [w for w in words if w != \"!\"]\n  \
    \  words = [w for w in words if w != \"?\"]\n    words = [w for w in words if\
    \ w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n    words = [w for\
    \ w in words if w != \"!\"]\n    words = [w for w in words if w != \"?\"]\n  \
    \  words = [w for w in words if w != \"!\"]\n    words = [w for w in words if\
    \ w != \"?\"]\n    words = [w for w in words if w != \"!\"]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgfv3e1h3.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgfv3e1h3.jl:1\n\
    in expression starting at /tmp/tmpgfv3e1h3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    words = split(txt, \" \")\n    words = [w for w in words if w != \"\"]\n\
    \    if length(words) == 0\n        return Vector{String}()\n    words = [w for\
    \ w in words if w != \",\"]\n    if length(words) == 0\n        return length(lowercase(txt))\n\
    \    words = [w for w in words if w != \"a\" and w != \"b\" and w != \"c\" and\
    \ w != \"d\" and w != \"e\" and w != \"f\" and w != \"g\" and w != \"h\" and w\
    \ != \"i\" and w != \"j\" and w != \"k\" and w != \"l\" and w != \"m\" and w !=\
    \ \"n\" and w != \"o\" and w != \"p\" and w != \"q\" and w != \"r\" and w != \"\
    s\" and w != \"t\" and w != \"u\" and w != \"v\" and w != \"w\" and w != \"x\"\
    \ and w != \"y\" and w != \"z\"]\n    if length(words) == 0\n        return length(lowercase(txt))\n\
    \    words = [w for w in words if w != \"a\" and w != \"b\" and w != \"c\" and\
    \ w != \"d\" and w != \"e\" and w != \"f\" and w != \"g\" and w != \"h\" and w\
    \ != \"i\" and w != \"j\" and w != \"k\" and w != \"l\" and w != \"m\" and w !=\
    \ \"n\" and w != \"o\" and w != \"p\" and w != \"q\" and w != \"r\" and w != \"\
    s\" and w != \"t\" and w != \"u\" and w != \"v\" and w != \"w\" and w != \"x\"\
    \ and w != \"y\" and w != \"z\"]\n    if length(words) == 0\n        return length(lowercase(txt))\n\
    \    words = [w for w in words if w != \"a\" and w != \"b\" and w != \"c\" and\
    \ w != \"d\" and w != \"e\" and w != \"f\" and w != \"g\" and w != \"h\" and w\
    \ != \"i\" and w != \"j\" and w != \"k\" and w != \"l\" and w != \"m\" and w !=\
    \ \"n\" and w != \"o\" and w != \"p\" and w != \"q\" and w != \"r\" and w != \"\
    s\" and w != \"t\" and w != \"u\" and w != \"v\" and w != \"w\" and w != \"x\"\
    \ and w != \"y\" and w != \"z\"]\n    if length(words) == 0\n        return length(lowercase(txt))\n\
    \    words = [w for w in words if w != \"a\" and w != \"b\" and w != \"c\" and\
    \ w != \"d\" and w != \"e\" and w != \"f\" and w != \"g\" and w != \"h\" and w\
    \ != \"i\" and w != \"j\" and w != \"k\" and w != \"l\nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpv9hvxi0d.jl:24\nin expression starting at /tmp/tmpv9hvxi0d.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    else\n        words = split(txt, \" \")\n        words = words[words != \"\
    \"]\n        words = words[words != \",\"]\n        words = words[words != \"\
    .\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \"\
    ?\"]\n        words = words[words != \"!\"]\n        words = words[words != \n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv1yedqiq.jl:1\nin expression starting at /tmp/tmpv1yedqiq.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = words[words != \"\"]\n \
    \   words = words[words != \",\"]\n    words = words[words != \"-\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \".\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"-\"]\n    words = words[words != \",\"]\n \
    \   words = words[words != \".\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"-\"]\n    words = words[words\
    \ != \",\"]\n    words = words[words != \".\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"-\"]\n \
    \   words = words[words != \",\"]\n    words = words[words != \".\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"-\"]\n    words = words[words != \",\"]\n    words = words[words != \"\
    .\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"-\"]\n    words = words[words != \",\"]\n    words\
    \ = words[words != \".\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"-\"]\n    words = words[words != \"\
    ,\"]\n    words = words[words != \".\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"-\"]\n    words\
    \ = words[words != \",\"]\n    words = words[words != \".\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    -\"]\n    words = words[words != \",\"]\n    words = words[words != \".\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"-\"]\n    words = words[words != \",\"]\n    words = words[words\
    \ != \".\"]\n    words = words[words != \"?\"]\n    words = words[words != \n\
    using Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz93z4p5l.jl:1\nin expression starting at /tmp/tmpz93z4p5l.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_split = Vector{String}(undef,\
    \ 0)\n    for word in words\n        if !isnothing(word)\n            words_split\
    \ = words_split ++ [word]\n        end\n    end\n    words_split\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzn0wb6qb.jl:23\nin expression starting at\
    \ /tmp/tmpzn0wb6qb.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if isempty(txt)\n        return Vector{String}()\n    else\n  \
    \      return split(txt)\n    end\nend\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    Hello world!\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello,world!\"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"abcdef\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"Hello world!\", \" \")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"Hello world!\", \",\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    Hello world!\", \" \")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello\
    \ world!\", \",\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\"\
    , \" \")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\", \"\
    ,\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\", \" \"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\", \",\")\n\
    </cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\", \" \")\n</cell>\n\
    <code language=julia-1.5>\nsplit_words(\"Hello world!\", \",\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"Hello world!\", \" \")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"Hello world!\", \",\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"\
    Hello world!\", \" \")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello\
    \ world!\", \",\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\"\
    , \" \")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\", \"\
    ,\")\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\", \" \"\
    )\n</cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\", \",\")\n\
    </cell>\n<code language=julia-1.5>\nsplit_words(\"Hello world!\", \" \")\n</cell>\n\
    <code language=julia-1.5>\nsplit_words(\"Hello world!\", \",\")\n</cell>\n<code\
    \ language=julia-1.5>\nsplit_words(\"Hello world!\", \" \")\n</cell>\n<code language=julia-1.5>\n\
    split_words(\"Hello world!\", \",\")\n</cell>\n<code language=juli\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp71tm1qk6.jl:20\nin expression starting at\
    \ /tmp/tmp71tm1qk6.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    word_counts = Dict()\n    for word\
    \ in words\n        word_counts[word] = get(word_counts, word, 0) + 1\n    end\n\
    \    word_counts = collect(values(word_counts))\n    word_counts = sort(word_counts)\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n\
    \    word_counts = word_counts[2:end]\n    word_counts = word_counts[2:\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5s4cwapj.jl:67\nin expression starting at\
    \ /tmp/tmp5s4cwapj.jl:67\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = [w for w in words if w !=\
    \ \"\"]\n    if length(words) == 0\n        return length(words)\n    else\n \
    \       return words\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptmphy1a5.jl:22\nin expression starting at\
    \ /tmp/tmptmphy1a5.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    word_counts = Dict()\n    for w\
    \ in words\n        if !haskey(word_counts, w)\n            word_counts[w] = 1\n\
    \        else\n            word_counts[w] += 1\n    end\n    word_counts = collect(values(word_counts))\n\
    \    word_counts = sort(word_counts)\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[2:end]\n \
    \   word_counts = word_counts[2:end]\n    word_counts = word_counts[\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq4koy0rl.jl:1\nin expression starting at /tmp/tmpq4koy0rl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if isempty(words)\n\
    \        return words\n    end\n    \n    words = split(txt, \",\")\n    \n  \
    \  if isempty(words)\n        return words\n    end\n    \n    words = split(txt,\
    \ \" \")\n    \n    if isempty(words)\n        return words\n    end\n    \n \
    \   words = split(txt, \",\")\n    \n    if isempty(words)\n        return words\n\
    \    end\n    \n    words = split(txt, \" \")\n    \n    if isempty(words)\n \
    \       return words\n    end\n    \n    words = split(txt, \",\")\n    \n   \
    \ if isempty(words)\n        return words\n    end\n    \n    words = split(txt,\
    \ \" \")\n    \n    if isempty(words)\n        return words\n    end\n    \n \
    \   words = split(txt, \",\")\n    \n    if isempty(words)\n        return words\n\
    \    end\n    \n    words = split(txt, \" \")\n    \n    if isempty(words)\n \
    \       return words\n    end\n    \n    words = split(txt, \",\")\n    \n   \
    \ if isempty(words)\n        return words\n    end\n    \n    words = split(txt,\
    \ \" \")\n    \n    if isempty(words)\n        return words\n    end\n    \n \
    \   words = split(txt, \",\")\n    \n    if isempty(words)\n        return words\n\
    \    end\n    \n    words = split(txt, \" \")\n    \n    if isempty(words)\n \
    \       return words\n    end\n    \n    words = split(txt, \",\")\n    \n   \
    \ if isempty(words)\n        return words\n    end\n    \n    words = split(txt,\
    \ \" \")\n    \n    if isempty(words)\n        return words\n    end\n    \n \
    \   words = split(txt, \",\")\n    \n    if isempty(words)\n        return words\n\
    \    end\n    \n    words = split(txt, \" \")\n    \n    if isempty(words)\n \
    \       return words\n    end\n    \n    words = split(txt, \",\")\n    \n   \
    \ if isempty(words)\n        return words\n    end\n    \n    words = split(txt,\
    \ \" \")\n    \n    if isempty(words)\n        return words\n    end\n    \n \
    \   words = split(txt, \",\")\n    \n    if isempty(words)\n        return words\n\
    \    end\n    \n    words = split(txt, \" \")\n    \n    if isempty(words)\n \
    \       return words\n    end\n    \n    words = split(txt, \",\")\n    \n   \
    \ if isempty(words)\n\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\
    \t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\"\
    ) == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") ==\
    \ [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"\
    aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") ==\
    \ 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_qfthmoe.jl:1\nin expression starting at /tmp/tmp_qfthmoe.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words = words[words != \"\"]\n \
    \   words = words[words != \",\"]\n    words = words[words != \".\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpevd23nin.jl:71\nin expression starting at\
    \ /tmp/tmpevd23nin.jl:71\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    else\n        words = split(txt, \" \")\n        words = [w for w in words\
    \ if w != \"\"]\n        return words\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    count_letters(txt::String)\n    Count the number of lower-case letters\
    \ with odd order in the alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> count_letters(\"Hello world!\")\n    3\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello\
    \ world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") ==\
    \ [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnbpym0kf.jl:23\nin expression starting at\
    \ /tmp/tmpnbpym0kf.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words = words[words != \"\"]\n    words\
    \ = words[words != \",\"]\n    words = words[words != \".\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    -\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"-\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"-\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"-\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"-\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    !\"]\n    words = words[words != \"?\"]\n    words = words[words != \"-\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"-\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words != \"\
    ?\"]\n    words = words[words != \"-\"]\n    words = words[words != \"?\"]\n \
    \   words = words[words != \"!\"]\n    words = words[words != \"?\"]\n    words\
    \ = words[words != \"-\"]\n    words = words[words != \"?\"]\n    words = words[words\
    \ != \"!\"]\n    words = words[words != \"?\"]\n    words = words[words != \"\
    -\"]\n    words = words[words != \"?\"]\n    words = words[words != \"!\"]\n \
    \   words = words[words != \"?\"]\n    words = words[words != \"-\"]\n    words\
    \ = words[words != \"?\"]\n    words = words[words != \"!\"]\n    words = words[words\
    \ != \"?\"]\n    words = words[words != \"-\"]\n    words = words[words != \"\
    ?\"]\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvhqzkmqd.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvhqzkmqd.jl:1\n\
    in expression starting at /tmp/tmpvhqzkmqd.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words = [w for w in words if w != \"\"\
    ]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \" \"]\n    words = [w for w in words if w != \"\\n\"]\n    words =\
    \ [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\
    \\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n   \
    \ words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if\
    \ w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n   \
    \ words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if\
    \ w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n   \
    \ words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if\
    \ w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n   \
    \ words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if\
    \ w != \"\\t\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    r\"]\n    words = [w for w in words if w != \"\\t\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1zf8f_ou.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1zf8f_ou.jl:1\n\
    in expression starting at /tmp/tmp1zf8f_ou.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt, \" \")\n    words_vec = Vector{String}(undef,\
    \ 0)\n    for w in words\n        words_vec += split(w, \",\")\n    end\n    return\
    \ words_vec\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpceeps9hx.jl:21\nin expression starting at\
    \ /tmp/tmpceeps9hx.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    txt = txt.trim()\n    if txt == \"\"\n        return Vector{String}()\n\
    \    elseif txt == \"\\n\"\n        return txt\n    else\n        words = split(txt,\
    \ \" \")\n        return Vector{String}(words)\n    end\nend\n</cell>\n<text>\n\
    Exercise 10\nWrite a function that takes a vector of words and returns a vector\
    \ of words with all words capitalized.\nExamples\n>>> capitalize_words([\" hello\
    \ world \", \"  hello world \"])\n[\" Hello world \", \"  Hello world \"]\n>>>\
    \ capitalize_words([\" hello world \", \"  hello world \"])\n[\" Hello world \"\
    , \"  Hello world \"]\n>>> capitalize_words([\" hello world \", \"  hello world\
    \ \"])\n[\" Hello world \", \"  Hello world \"]\n>>> capitalize_words([\" hello\
    \ world \", \"  hello world \"])\n[\" Hello world \", \"  Hello world \"]\n>>>\
    \ capitalize_words([\" hello world \", \"  hello world \"])\n[\" Hello world \"\
    , \"  Hello world \"]\n>>> capitalize_words([\" hello world \", \"  hello world\
    \ \"])\n[\" Hello world \", \"  Hello world \"]\n>>> capitalize_words([\" hello\
    \ world \", \"  hello world \"])\n[\" Hello world \", \"  Hello world \"]\n>>>\
    \ capitalize_words([\" hello world \", \"  hello world \"])\n[\" Hello world \"\
    , \"  Hello world \"]\n>>> capitalize_words([\" hello world \", \"  hello world\
    \ \"])\n[\" Hello world \", \"  Hello world \"]\n>>> capitalize_words([\" hello\
    \ world \", \"  hello world \"])\n[\" Hello world \", \"  Hello world \"]\n>>>\
    \ capitalize_words([\" hello world \", \"  hello world \"])\n[\" Hello world \"\
    , \"  Hello world \"]\n>>> capitalize_words([\" hello world \", \"  hello world\
    \ \"])\n[\" Hello world \", \"  Hello world \"]\n>>> capitalize_words([\" hello\
    \ world \", \"  hello world \"])\n[\" Hello world \", \"  Hello world \"]\n>>>\
    \ capitalize_words([\" hello world \", \"  hello world \"])\n[\" Hello world \"\
    , \"  Hello world \"]\n>>> capitalize_words([\" hello world \", \"  hello world\
    \ \"])\n[\" Hello world \", \"  Hello world \"]\n>>> capitalize_words([\" hello\
    \ world \", \"  hello world \"])\n[\" Hello world \", \"  Hello world \"]\n>>>\
    \ capitalize_words([\" hello world \", \"  hello world \"])\n[\" Hello world \"\
    , \"  Hello world \"]\n>>> capitalize_words([\" hello world \", \"  hello world\
    \ \"])\n[\" Hello world \", \"  Hello world \"]\n>>> capitalize_\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv9240i0m.jl:24\nin expression starting at\
    \ /tmp/tmpv9240i0m.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    words = split(txt)\n    words = [w for w in words if w != \"\"\
    ]\n    words = [w for w in words if w != \",\"]\n    words = [w for w in words\
    \ if w != \" \"]\n    words = [w for w in words if w != \"\\n\"]\n    words =\
    \ [w for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\
    \\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n   \
    \ words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if\
    \ w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w for w in\
    \ words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n   \
    \ words = [w for w in words if w != \"\\r\"]\n    words = [w for w in words if\
    \ w != \"\\t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w\
    \ for w in words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\\
    t\"]\n    words = [w for w in words if w != \"\\n\"]\n    words = [w for w in\
    \ words if w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n   \
    \ words = [w for w in words if w != \"\\n\"]\n    words = [w for w in words if\
    \ w != \"\\r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w\
    \ for w in words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\\
    r\"]\n    words = [w for w in words if w != \"\\t\"]\n    words = [w for w in\
    \ words if w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n   \
    \ words = [w for w in words if w != \"\\t\"]\n    words = [w for w in words if\
    \ w != \"\\n\"]\n    words = [w for w in words if w != \"\\r\"]\n    words = [w\
    \ for w in words if w != \"\\t\"]\n    words = [w for w in words if w != \"\\\
    n\"]\n    words = [w for w in words if w != \"\\r\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq_bp4f2p.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq_bp4f2p.jl:1\n\
    in expression starting at /tmp/tmpq_bp4f2p.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if isempty(txt)\n        return txt\n    else\n        words =\
    \ split(txt, \" \")\n        words_without_commas = filter(x->!(x==\",\"), words)\n\
    \        words_without_commas = filter(x->!(x==\".\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\"!\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\"?\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\":\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\";\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\"<\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\">\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\"@\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\"[\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\"]\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\"{\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\"}\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\"(\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\")\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\":\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\";\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\",\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\".\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\"!\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\"?\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\"<\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\">\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\"@\"), words_without_commas)\n\
    \        words_without_commas = filter(x->!(x==\"[\"), words_without_\nusing Test\n\
    \n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\"\
    , \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"\
    ])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"\
    ])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t\
    @test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3g8zy832.jl:43\nin expression starting at\
    \ /tmp/tmp3g8zy832.jl:43\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    \n    words = split(txt, \" \")\n    \n    if length(words) ==\
    \ 0\n        return length(txt)\n    end\n    \n    \n    if length(words) ==\
    \ 1 \n        return length(txt)\n    end\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = split_words;\n\t@test(candidate(\"Hello world!\") == [\"\
    Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"\
    Hello,Hello,world !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"\
    abcdef\") == 3)\n\t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\"\
    ) == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3xfa4mk7.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3xfa4mk7.jl:1\n\
    in expression starting at /tmp/tmp3xfa4mk7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if txt == \"\" \n        return [] \n    else \n        return\
    \ split(txt, \",\")\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,string\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = split_words;\n\t@test(candidate(\"\
    Hello world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello,world!\"\
    ) == [\"Hello\", \"world!\"])\n\t@test(candidate(\"Hello world,!\") == [\"Hello\"\
    , \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world !\") == [\"Hello,Hello,world\"\
    , \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\t@test(candidate(\"aaabb\") ==\
    \ 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk3k854qj.jl:20\nin expression starting at\
    \ /tmp/tmpk3k854qj.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a string of words, return a vector of words split on\
    \ whitespace, if no whitespaces exists in the text you\n    should split on commas\
    \ ',' if no commas exists you should return the number of lower-case letters with\
    \ odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n\
    \    Examples\n    >>> split_words(\"Hello world!\")\n    [\"Hello\", \"world!\"\
    ]\n    >>> split_words(\"Hello,world!\")\n    [\"Hello\", \"world!\"]\n    >>>\
    \ split_words(\"abcdef\")\n    3\n    \"\"\"\nfunction split_words(txt::String)::Union{Vector{String},\
    \ Int64} \n    if isempty(txt)\n        return Vector{String}()\n    else\n  \
    \      words = split(txt, \" \")\n        words = [w for w in words if w != \"\
    \"]\n        words = [w for w in words if w != \",\"]\n        words = [w for\
    \ w in words if w != \"\"]\n        words = [w for w in words if w != \",\"]\n\
    \        words = [w for w in words if w != \"\"]\n        words = [w for w in\
    \ words if w != \",\"]\n        words = [w for w in words if w != \"\"]\n    \
    \    words = [w for w in words if w != \",\"]\n        words = [w for w in words\
    \ if w != \"\"]\n        words = [w for w in words if w != \",\"]\n        words\
    \ = [w for w in words if w != \"\"]\n        words = [w for w in words if w !=\
    \ \",\"]\n        words = [w for w in words if w != \"\"]\n        words = [w\
    \ for w in words if w != \",\"]\n        words = [w for w in words if w != \"\"\
    ]\n        words = [w for w in words if w != \",\"]\n        words = [w for w\
    \ in words if w != \"\"]\n        words = [w for w in words if w != \",\"]\n \
    \       words = [w for w in words if w != \"\"]\n        words = [w for w in words\
    \ if w != \",\"]\n        words = [w for w in words if w != \"\"]\n        words\
    \ = [w for w in words if w != \",\"]\n        words = [w for w in words if w !=\
    \ \"\"]\n        words = [w for w in words if w != \",\"]\n        words = [w\
    \ for w in words if w != \"\"]\n        words = [w for w in words if w != \",\"\
    ]\n        words = [w for w in words if w != \"\"]\n        words = [w for w in\
    \ words if w != \",\"]\n        words = [w for w in words if w != \"\"]\n    \
    \    words = [w for w in words if w != \",\"]\n        words = [w for w in words\
    \ if w != \"\"]\n        words = [w for w in words if w != \",\"]\n        words\
    \ = [w for w in words if w != \"\"]\n        words = [w for w in words if w !=\
    \ \",\"]\n        words = [w for w in words if w != \"\"]\n        words = [w\
    \ for w in words if w != \",\"]\n        words = [w for w in words if w != \"\"\
    ]\n        words = [w for w in word\nusing Test\n\n@testset begin\n\ncandidate\
    \ = split_words;\n\t@test(candidate(\"Hello world!\") == [\"Hello\", \"world!\"\
    ])\n\t@test(candidate(\"Hello,world!\") == [\"Hello\", \"world!\"])\n\t@test(candidate(\"\
    Hello world,!\") == [\"Hello\", \"world,!\"])\n\t@test(candidate(\"Hello,Hello,world\
    \ !\") == [\"Hello,Hello,world\", \"!\"])\n\t@test(candidate(\"abcdef\") == 3)\n\
    \t@test(candidate(\"aaabb\") == 2)\n\t@test(candidate(\"aaaBb\") == 1)\n\t@test(candidate(\"\
    \") == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpt694eq81.jl:56\nin expression starting at /tmp/tmpt694eq81.jl:56\n"
  stdout: ''
