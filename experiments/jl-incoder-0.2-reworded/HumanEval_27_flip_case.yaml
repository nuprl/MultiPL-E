name: HumanEval_27_flip_case
language: jl
prompt: "\"\"\" For a given string, flip lowercase characters to uppercase and uppercase\
  \ to lowercase.\n    >>> flip_case(\"Hello\")\n    \"hELLO\"\n    \"\"\"\nfunction\
  \ flip_case(string::String)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = flip_case;\n\t@test(candidate(\"\
  \") == \"\")\n\t@test(candidate(\"Hello!\") == \"hELLO!\")\n\t@test(candidate(\"\
  These violent delights have violent ends\") == \"tHESE VIOLENT DELIGHTS HAVE VIOLENT\
  \ ENDS\")\nend\n"
completions: ["    \n    string = string.lower()\n    \n    for char in string:\n\
    \        if char.isupper():\n            string = string.replace(char, char.upper())\n\
    \        else:\n            string = string.replace(char, char.lower())\n    \n\
    \    return string\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\ndef\
    \ flip_case(string):\n    \n    string = string.lower()\n    \n    for char in\
    \ string:\n        if char.isupper():\n            string = string.replace(char,\
    \ char.upper())\n        else:\n            string = string.replace(char, char.lower())\n\
    \    \n    return string\n</code>\n<|/ a tags=string,python |>\n<| a tags=string,python\
    \ |>\n<code>\ndef flip_case(string):\n    \n    string = string.lower()\n    \n\
    \    for char in string:\n        if char.isupper():\n            string = string.replace(char,\
    \ char.upper())\n        else:\n            string = string.replace(char, char.lower())\n\
    \    \n    return string\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\ndef flip_case(string):\n\
    \    \n    string = string.lower()\n    \n    for char in string:\n        if\
    \ char.isupper():\n            string = string.replace(char, char.upper())\n \
    \       else:\n            string = string.replace(char, char.lower())\n    \n\
    \    return string\n</code>\n<|/ a tags=string,python dscore=1 |>\n<| a tags=string,python\
    \ |>\n<code>\ndef flip_case(string):\n    \n    string = string.lower()\n    \n\
    \    for char in string:\n        if char.isupper():\n            string = string.replace(char,\
    \ char.upper())\n        else:\n            string = string.replace(char, char.lower())\n\
    \    \n    return string\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,python\
    \ |>\n<code>\ndef flip_case(string):\n    \n    string = string.lower()\n    \n\
    \    for char in string:\n        if char.isupper():\n            string = string.replace(char,\
    \ char.upper())\n        else:\n            string = string.replace(char, char.lower())\n\
    \    \n    return string\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,python\
    \ |>\n<code>\ndef flip_case(string):\n    \n    string = string.lower()\n    \n\
    \    for char in string:\n        if char.isupper():\n            string = string.replace(char,\
    \ char.upper())\n        else:\n            string = string.replace(char, char.lower())\n\
    \    \n    return string\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\n\
    def flip_case(string):\n    \n    string = string.lower()\n    \n    for char\
    \ in string:\n        if char", "    local result = \"\"\n    for char in string:\n\
    \        if char == char:\n            result += char\n        else\n        \
    \    result += char.upper()\n            result += char.lower()\n        end\n\
    \    end\n    return result\nend\n</cell>\n<code language=julia-1.5>", "    local\
    \ result = \"\"\n    for char in string:\n        if char == char.toUpper():\n\
    \            char = toLower()\n        elif char == char.toLower():\n        \
    \    char = toUpper()\n        end\n        result = result + char\n    end\n\
    \    return result\nend\n</cell>\n<code language=julia-1.5>", "    local result\
    \ = \"\"\n    for char in string:\n        if char == char:\n            result\
    \ += char\n        else\n            result += char.upper()\n            result\
    \ += char.lower()\n        end\n    end\n    return result\nend", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    local result = \"\"\n    for\
    \ char in string:\n        if char == char.toUpper():\n            result = result\
    \ + char.toLower()\n        elseif char == char.toLower():\n            result\
    \ = result + char.toUpper()\n        else\n            result = result + char\n\
    \        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    local result = \"\"\n    for char in string:\n        if char == char:\n  \
    \          result = result + char\n        else\n            result = result +\
    \ char.upper()\n        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    local result = \"\"\n    for char in string:\n        if char == char.toUpper():\n\
    \            result = result + char.toLower()\n        elseif char == char.toLower():\n\
    \            result = result + char.toUpper()\n        else\n            result\
    \ = result + char\n        end\n    end\n    return result\nend", "    \n    local\
    \ result = \"\"\n    \n    for char in string:\n        if char == char:\n   \
    \         result = result + char\n        else\n            result = result +\
    \ char.upper()\n        end\n    end\n    \n    return result\nend\n</cell>\n\
    <code language=julia-1.5>\n@time flip_case(\"Hello\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string.", "    local result = \"\"\n    for c in string:\n        if\
    \ c.isupper():\n            result += \"_\"\n            result += c.lower()\n\
    \        else:\n            result += c\n    return result\nend", "    \n    local\
    \ result = \"\"\n    for char in string:\n        if char == char:\n         \
    \   result += \"_\"\n        else if char == char.upper():\n            result\
    \ += \"_\"\n            result += char.lower()\n        else if char == char.lower():\n\
    \            result += \"_\"\n            result += char.upper()\n        else\
    \ :\n            result += char\n    end\n    return result\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    local result = \"\"\n    for c in string:\n        if c.isupper():\n      \
    \      result += \"_\"\n            result += c.lower()\n        else:\n     \
    \       result += c\n    return result\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>", "    local result = \"\"\n    for character in string:\n      \
    \  if character == character then\n            character = character:upper()\n\
    \        else\n            character = character:lower()\n        end\n      \
    \  result = result .. character\n    end\n    return result\nend\n</cell>\n<code\
    \ language=julia-1.4>", "    \n    string::String \n    \n    local result = \"\
    \"\n    \n    for char in string:\n        if char == char.toUpper():\n      \
    \      result = result + char.toLower()\n        elseif char == char.toLower():\n\
    \            result = result + char.toUpper()\n        else\n            result\
    \ = result + char\n        end\n    end\n    \n    return result\nend", "    local\
    \ result = \"\"\n    for char in string:\n        if char == char:\n         \
    \   result += char\n        else\n            result += char.upper()\n       \
    \     result += char.lower()\n        end\n    end\n    return result\nend\n</cell>\n\
    <code language=julia-1.3>", "    local result = \"\"\n    for char in string:\n\
    \        if char == char.toUpper():\n            char = toUpper(char)\n      \
    \  elif char == char.toLower():\n            char = toLower(char)\n        end\n\
    \        result = result + char\n    return result\nend\n</cell>\n<code language=julia-1.3>",
  "    \n    local result = \"\"\n    \n    for char in string:\n        if char ==\
    \ char:\n            result = result + char\n        else\n            result\
    \ = result + char.upper()\n        end\n    end\n    \n    return result\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    uppercase = string.uppercase()\n\
    \    lowercase = string.lowercase()\n    \n    return lowercase+uppercase\nend\n\
    </cell>\n<code language=julia-1.5>\n@test flip_case(\"Hello\") == \"hELLO\"\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the string with all characters reversed.\nFor example, if the input string is\
    \ \"hello\", the output should be \"olleh\"", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    local result = \"\"\n    for character in string:\n\
    \        if character == character then\n            character = character ..\
    \ \"A\"\n        else\n            character = character .. \"a\"\n        end\n\
    \        result = result .. character\n    end\n    return result\nend\n</cell>\n\
    <code language=julia-1.5>", "    local result = \"\"\n    for c in string:\n \
    \       if c.isupper():\n            result = result + c.lower()\n        else:\n\
    \            result = result + c.upper()\n    return result\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    lowercase_string = string.lower()\n    uppercase_string\
    \ = string.upper()\n    \n    return uppercase_string + lowercase_string\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert flip_case(\"hello\") == \"hELLO\"\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ a string where all characters have been converted to lowercase except for the\
    \ first character.\nFor example, if the input string is \"hello\", the output\
    \ should be \"HeLlO\".", "    \n    uppercase = string.uppercase()\n    lowercase\
    \ = string.lowercase()\n    \n    return uppercase + lowercase\nend", "    local\
    \ result = \"\"\n    for c in string:\n        if c.islower() then\n         \
    \   result = result .. tostring(c:upper()) .. tostring(c:lower())\n        elseif\
    \ c.isupper() then\n            result = result .. tostring(c:lower()) .. tostring(c:upper())\n\
    \        else\n            result = result .. tostring(c)\n        end\n    end\n\
    \    return result\nend\n</cell>\n<code language=julia-1.5>", "    local result\
    \ = \"\"\n    for c in string:\n        if c.isupper():\n            result +=\
    \ \"_\"\n            result += c.lower()\n        else:\n            result +=\
    \ c\n    return result\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,lowercase,uppercase,python\
    \ |>\n<code>\ndef flip_case(string):\n    string = string.lower()\n    string\
    \ = string.replace('a', 'A')\n    string = string.replace('b', 'B')\n    string\
    \ = string.replace('c', 'C')\n    string = string.replace('d', 'D')\n    string\
    \ = string.replace('e', 'E')\n    string = string.replace('f', 'F')\n    string\
    \ = string.replace('g', 'G')\n    string = string.replace('h', 'H')\n    string\
    \ = string.replace('i', 'I')\n    string = string.replace('j', 'J')\n    string\
    \ = string.replace('k', 'K')\n    string = string.replace('l', 'L')\n    string\
    \ = string.replace('m', 'M')\n    string = string.replace('n', 'N')\n    string\
    \ = string.replace('o', 'O')\n    string = string.replace('p', 'P')\n    string\
    \ = string.replace('q', 'Q')\n    string = string.replace('r', 'R')\n    string\
    \ = string.replace('s', 'S')\n    string = string.replace('t', 'T')\n    string\
    \ = string.replace('u', 'U')\n    string = string.replace('v', 'V')\n    string\
    \ = string.replace('w', 'W')\n    string = string.replace('x', 'X')\n    string\
    \ = string.replace('y', 'Y')\n    string = string.replace('z', 'Z')\n    return\
    \ string\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef flip_case(string):\n\
    \    string = string.lower()\n    string = string.replace('a', 'A')\n    string\
    \ = string.replace('b', 'B')\n    string = string.replace('c', 'C')\n    string\
    \ = string.replace('d', 'D')\n    string = string.replace('e', 'E')\n    string\
    \ = string.replace('f', 'F')\n    string = string.replace('g', 'G')\n    string\
    \ = string.replace('h', 'H')\n    string = string.replace('i', 'I')\n    string\
    \ = string.replace('j', 'J')\n    string = string.replace('k', 'K')\n    string\
    \ = string.replace('l', 'L')\n    string = string.replace('m', 'M')\n    string\
    \ = string.replace('n', 'N')\n    string = string.replace('o', 'O')\n    string\
    \ = string.replace('p', 'P')\n    string = string.replace('q', 'Q')\n    string\
    \ = string.replace('r', 'R')\n    string = string.replace('s', 'S')\n    string\
    \ = string.replace('t', 'T')\n    string = string.replace('u', 'U')\n    string\
    \ = string.replace('v', 'V')\n    string = string.replace('w", "    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    local result = \"\"\n    for\
    \ char in string:\n        if char == char:\n            result += char\n    \
    \    else\n            result += char.upper()\n            result += char.lower()\n\
    \        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    \n    string::String\n    \n    string::String\n\
    \    \n    string::String\n    ", "    \n    lowercase_string = string.lower()\n\
    \    uppercase_string = string.upper()\n    \n    return uppercase_string + lowercase_string\n\
    end\n</cell>\n<code language=julia-1.5>\n@test flip_case(\"Hello\") == \"hELLO\"\
    \n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ a string with all uppercase letters replaced by their lowercase counterparts.\
    \ \nFor example, \n\"hello\" becomes \"hELLO\".\n\"HELLO\" becomes \"hELLO\".\n\
    \"HeLLo\" becomes \"hELLO\".\n\"HELLO!\" becomes \"hELLO!\".\n\"HELLO WORLD\"\
    \ becomes \"hELLO WORLD\".\n\"HELLO WORLD!\" becomes \"hELLO WORLD!\".\n\"HELLO\
    \ WORLD!!\" becomes \"hELLO WORLD!!\".\n\"HELLO WORLD!!! \" becomes \"hELLO WORLD!!!\
    \ \".\n\"HELLO WORLD!!!\" becomes \"hELLO WORLD!!!\".\n\"HELLO WORLD!!! \" becomes\
    \ \"hELLO WORLD!!! \".\n\"HELLO WORLD!!!\" becomes \"hELLO WORLD!!!\".\n\"HELLO\
    \ WORLD!!! \" becomes \"hELLO WORLD!!! \".\n\"HELLO WORLD!!!\" becomes \"hELLO\
    \ WORLD!!!\".\n\"HELLO WORLD!!! \" becomes \"hELLO WORLD!!! \".\n\"HELLO WORLD!!!\"\
    \ becomes \"hELLO WORLD!!!\".\n\"HELLO WORLD!!! \" becomes \"hELLO WORLD!!! \"\
    .\n\"HELLO WORLD!!!\" becomes \"hELLO WORLD!!!\".\n\"HELLO WORLD!!! \" becomes\
    \ \"hELLO WORLD!!! \".\n\"HELLO WORLD!!!\" becomes \"hELLO WORLD!!!\".\n\"HELLO\
    \ WORLD!!! \" becomes \"hELLO WORLD!!! \".\n\"HELLO WORLD!!!\" becomes \"hELLO\
    \ WORLD!!!\".\n\"HELLO WORLD!!! \" becomes \"hELLO WORLD!!! \".\n\"HELLO WORLD!!!\"\
    \ becomes \"hELLO WORLD!!!\".\n\"HELLO WOR", "    \n    local result = \"\"\n\
    \    for char in string:\n        if char == char:\n            result += char\n\
    \        else\n            result += char.upper()\n            result += char.lower()\n\
    \        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    local result = \"\"\n    for c in string:\n        if c.islower() then\n  \
    \          result = result .. toupper(c)\n        else\n            result = result\
    \ .. tolower(c)\n        end\n    end\n    return result\nend", "    local result\
    \ = \"\"\n    for c in string:\n        if c.islower() then\n            result\
    \ = result .. toupper(c)\n        elseif c.isupper() then\n            result\
    \ = result .. tolower(c)\n        end\n    end\n    return result\nend\n</cell>\n\
    <code language=julia-1.3>", "    local result = \"\"\n    for char in string:\n\
    \        if char == char:\n            result += \"_\"\n        else\n       \
    \     result += char.upper()\n        end\n    end\n    return result\nend\n</cell>\n\
    <code language=julia-1.5>", "    local result = \"\"\n    for char in string:\n\
    \        if char == char:\n            result += \"_\"\n        else\n       \
    \     result += char.upper()\n        end\n    end\n    return result\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    lowercase_string = string.lower()\n   \
    \ uppercase_string = string.upper()\n    \n    return uppercase_string + lowercase_string\n\
    end", "    \n    string = string.lower()\n    string = string.upper()\n    \n\
    \    return string\nend\n</cell>\n<code language=julia-1.5>\n@test flip_case(\"\
    Hello\") == \"hELLO\"\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the string with all uppercase letters replaced by lowercase\
    \ letters.\nFor example,", "    local result = \"\"\n    for char in string:\n\
    \        if char == char:\n            result += \"_\"\n        else\n       \
    \     result += char\n        end\n    end\n    return result\nend", "    local\
    \ result = \"\"\n    for char in string:\n        if char == char:\n         \
    \   result += \"_\"\n        else\n            result += char\n        end\n \
    \   end\n    return result\nend\n</cell>\n<code language=julia-1.5>", "    local\
    \ result = \"\"\n    for char in string:\n        if char >= 'a' and char <= 'z':\n\
    \            char = 'A' + char - 'a'\n        elif char >= 'A' and char <= 'Z':\n\
    \            char = 'a' + char - 'A'\n        result = result + char\n    return\
    \ result\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,lowercase,uppercase,haskell,char\
    \ |>\n<code>\nimport Data.Char", "    local result = \"\"\n    for char in string:\n\
    \        if char == char:\n            result += char\n        elseif char ==\
    \ char.upper():\n            result += char.lower()\n        elseif char == char.lower():\n\
    \            result += char.upper()\n        end\n    end\n    return result\n\
    end\n</cell>\n<code language=julia-1.5>", "    local result = \"\"\n    for char\
    \ in string:\n        if char == char:\n            result += char\n        else\n\
    \            result += char.upper()\n            result += char.lower()\n    \
    \    end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    local result = \"\"\n    for character in string:\n        if character ==\
    \ character:\n            result += character\n        else\n            result\
    \ += tostring(tolower(character))\n        end\n    end\n    return result\nend",
  "    local result = \"\"\n    for char in string:\n        if char == char:\n  \
    \          result += \"_\"\n        else\n            result += char:lower()\n\
    \        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    local result = \"\"\n    for char in string:\n        if char == char.toUpper():\n\
    \            char = toLower()\n        elif char == char.toLower():\n        \
    \    char = toUpper()\n        end\n        result = result + char\n    return\
    \ result\nend", "    local result = \"\"\n    for char in string:\n        if\
    \ char == char:\n            result += \"_\"\n        elseif char == char.upper():\n\
    \            result += \"_\"\n            result += char.lower()\n        elseif\
    \ char == char.lower():\n            result += char.upper()\n        else\n  \
    \          result += char\n        end\n    end\n    return result\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    string::String\n    \n    lowercase_char::String\n\
    \    uppercase_char::String\n    \n    lowercase_char::String\n    uppercase_char::String\n\
    \    \n    lowercase_char::String\n    uppercase_char::String\n    \n    lowercase_char::String\n\
    \    uppercase_char::String\n    \n    lowercase_char::String\n    uppercase_char::String\n\
    \    \n    lowercase_char::String\n    uppercase_char::String\n    \n    lowercase_char::String\n\
    \    uppercase_char::String\n    \n    lowercase_char::String\n    uppercase_char::String\n\
    \    \n    lowercase_char::String\n    uppercase_char::String\n    \n    lowercase_char::String\n\
    \    uppercase_char::String\n    \n    lowercase_char::String\n    uppercase_char::String\n\
    \    \n    lowercase_char::String\n    uppercase_char::String\n    \n    lowercase_char::String\n\
    \    uppercase_char::String\n    \n    lowercase_char::String\n    uppercase_char::String\n\
    \    \n    lowercase_char::String\n    uppercase_char::String\n    \n    lowercase_char::String\n\
    \    uppercase_char::String\n    \n    lowercase_char::String\n    uppercase_char::String\n\
    \    \n    lowercase_char::String\n    uppercase_char::String\n    \n    lowercase_char::String\n\
    \    uppercase_char::String\n    \n    lowercase_char::String\n    uppercase_char::String\n\
    \    \n    lowercase_char::String\n    uppercase_char::String\n    \n    lowercase_char::String\n\
    \    uppercase_char::String\n    \n    lowercase_char::String\n    uppercase_char::String\n\
    \    \n    lowercase_char::String\n    uppercase_char::String\n    \n    lowercase_char::String\n\
    \    uppercase_char::String\n    \n    lowercase_char::String\n    uppercase_char::String\n\
    \    \n    lowercase_char::String\n    uppercase_char::String\n    \n    lowercase_char::String\n\
    \    uppercase_char::String\n    \n    lowercase_char::String\n    uppercase_char::String\n\
    \    \n    lowercase_char::String\n    uppercase_char::String\n    \n    lowercase_char::String\n\
    \    uppercase_char::String\n    \n    lowercase_char::String\n", "    local result\
    \ = \"\"\n    for c in string:\n        if c.isupper():\n            result =\
    \ result + c.lower()\n        else:\n            result = result + c.upper()\n\
    \    return result\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", " \
    \   local result = \"\"\n    for c in string:\n        if c.isupper():\n     \
    \       result += \"_\"\n            result += c.lower()\n        else:\n    \
    \        result += c\n    return result\n</code>\n<|/ a tags=string,lowercase,uppercase,haskell\
    \ |>\n<| a tags=string,lowercase,uppercase,haskell |>\n<code>\nimport Data.Char",
  "    local result = \"\"\n    for char in string:\n        if char == char:\n  \
    \          result += char\n        elseif char == char.upper():\n            result\
    \ += char.lower()\n        elseif char == char.lower():\n            result +=\
    \ char.upper()\n        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.4>",
  "    local result = \"\"\n    for char in string:\n        if char == char:\n  \
    \          result += char\n        elseif char == char.upper():\n            result\
    \ += char.lower()\n        elseif char == char.lower():\n            result +=\
    \ char.upper()\n        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    local result = \"\"\n    for c in string:\n        if c.isupper():\n      \
    \      result = result + c.lower()\n        else:\n            result = result\
    \ + c.upper()\n    return result\nend\n</cell>\n<code language=julia-1.5>", " \
    \   local result = \"\"\n    for char in string:\n        if char == char:\n \
    \           result += \"_\"\n        else\n            result += char:lower()\n\
    \        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    string = string.lower()\n    string = string.upper()\n    \n    return\
    \ string\n</cell>\n<cell>\n# Test your function\nresult = flip_case(\"hello\"\
    )\nassert result == \"hELLO\", \"Your function returned {}, expected {}\".format(result,\
    \ \n                                                                         \
    \    \"hELLO\")\n</cell>\n<text>\nA. count_substrings\nWrite a function that takes\
    \ in a string and a list of strings as arguments.  The function should return\
    \ a dictionary where the keys are strings that appear in your argument list and\
    \ the values are the counts of how many times those strings appear in your string.",
  "    \n    uppercase = string.uppercase()\n    lowercase = string.lowercase()\n\
    \    \n    return lowercase+uppercase\nend\n</cell>\n<code language=julia-1.5>\n\
    @time flip_case(\"Hello\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and returns a string with all uppercase letters replaced by their\
    \ lowercase counterparts.", "    \n    string::String\n    \n    lower::String\n\
    \    upper::String\n    \n    lower::String\n    upper::String\n    \n    lower::String\n\
    \    upper::String\n    \n    lower::String\n    upper::String\n    \n    lower::String\n\
    \    upper::String\n    \n    lower::String\n    upper::String\n    \n    lower::String\n\
    \    upper::String\n    \n    lower::String\n    upper::String\n    \n    lower::String\n\
    \    upper::String\n    \n    lower::String\n    upper::String\n    \n    lower::String\n\
    \    upper::String\n    \n    lower::String\n    upper::String\n    \n    lower::String\n\
    \    upper::String\n    \n    lower::String\n    upper::String\n    \n    lower::String\n\
    \    upper::String\n    \n    lower::String\n    upper::String\n    \n    lower::String\n\
    \    upper::String\n    \n    lower::String\n    upper::String\n    \n    lower::String\n\
    \    upper::String\n    \n    lower::String\n    upper::String\n    \n    lower::String\n\
    \    upper::String\n    \n    lower::String\n    upper::String\n    \n    lower::String\n\
    \    upper::String\n    \n    lower::String\n    upper::String\n    \n    lower::String\n\
    \    upper::String\n    \n    lower::String\n    upper::String\n    \n    lower::String\n\
    \    upper::String\n    \n    lower::String\n    upper::String\n    \n    lower::String\n\
    \    upper::String\n    \n    lower::String\n    upper::String\n    \n    lower::String\n\
    \    upper::String\n    \n    lower::String\n    upper::String\n    \n    lower::String\n\
    \    upper::String\n    \n    lower::String\n    upper::String\n    \n    lower::String\n\
    \    upper::String\n    \n    lower::String\n    upper::String\n    \n    lower::String\n\
    \    upper::String\n    \n    lower::String\n    upper::String\n    \n    lower::String\n\
    \    upper::String\n    \n    lower::String\n    upper::String\n    \n    lower::String\n\
    \    upper::String\n    \n    lower::String\n    upper::String\n    ", "    local\
    \ result = \"\"\n    for char in string:\n        if char == char:\n         \
    \   result += char\n        elseif char == char.upper():\n            result +=\
    \ char.lower()\n        elseif char == char.lower():\n            result += char.upper()\n\
    \        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.4>",
  "    \n    local result = \"\"\n    for char in string:\n        if char == char:\n\
    \            result += char\n        else\n            result += char.upper()\n\
    \            result += char.lower()\n        end\n    end\n    return result\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    uppercase = string.uppercase()\n\
    \    lowercase = string.lowercase()\n    \n    return uppercase+lowercase\nend\n\
    </cell>\n<code language=julia-1.5>", "    local result = \"\"\n    for char in\
    \ string:\n        if char == char:\n            result += \"_\"\n        else\n\
    \            result += char\n        end\n    end\n    return result\nend\n</cell>\n\
    <code language=julia-1.5>", "    local result = \"\"\n    for c in string:\n \
    \       if c.isupper():\n            result += \"_\"\n            result += c.lower()\n\
    \        else:\n            result += c\n    return result\n</code>\n<|/ a |>\n\
    <| a dscore=1 |>\n<code>", "    \n    local result = \"\"\n    for char in string:\n\
    \        if char == char.toUpper():\n            result += \"_\"\n           \
    \ result += char.toLower()\n        elseif char == char.toLower():\n         \
    \   result += \"_\"\n            result += char.toUpper()\n        else\n    \
    \        result += char\n        end\n    end\n    return result\nend", "    \n\
    \    uppercase = string.uppercase()\n    lowercase = string.lowercase()\n    \n\
    \    return uppercase + lowercase\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ flip_case(\"hello\") == \"hELLO\"\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the string with all uppercase letters replaced\
    \ by their lowercase counterparts.", "    local result = \"\"\n    for c in string:\n\
    \        if c.islower() then\n            result = result .. toupper(c)\n    \
    \    elseif c.isupper() then\n            result = result .. tolower(c)\n    \
    \    end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    string = string.lower()\n    string = string.upper()\n    \n    return\
    \ string\n</cell>\n<cell>\n# TEST FLIP CASE (2b)\nTest.assertEquals(flip_case(\"\
    hello\"), \"hELLO\", \"incorrect result\")\n</cell>\n<text>\nImplement the function\
    \ replace_all\nGiven a string, replaces all instances of a substring with another\
    \ substring.", "    \n    uppercase = string.uppercase()\n    lowercase = string.lowercase()\n\
    \    \n    return lowercase+uppercase\nend\n</cell>\n<code language=julia-1.5>\n\
    @test flip_case(\"Hello\") == \"hELLO\"\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a string and returns the number of uppercase letters.",
  "    local result = \"\"\n    for char in string:\n        if char == char:\n  \
    \          result += char\n        else\n            result += char.upper()\n\
    \            result += char.lower()\n        end\n    end\n    return result\n\
    end\n</cell>\n<code language=julia-1.5>", "    local result = \"\"\n    for c\
    \ in string:\n        if c.islower() then\n            result = result .. tostring(c:upper())\
    \ .. tostring(c:lower())\n        else\n            result = result .. tostring(c:lower())\
    \ .. tostring(c:upper())\n        end\n    end\n    return result\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    mutable result = \"\"\n    for c in string:\n\
    \        if c.isUpper():\n            result += c.lower()\n        else:\n   \
    \         result += c.upper()\n    return result\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\n<code>\ndef flip_case(string):\n    \n    string=string.lower()\n\
    \    \n    string=list(string)\n    \n    string.reverse()\n    \n    string=\"\
    \".join(string)\n    \n    return string\n</code>\n<|/ a tags=string,python |>\n\
    <| a dscore=1 |>\n<code>\ndef flip_case(string):\n    \n    string=string.lower()\n\
    \    \n    string=list(string)\n    \n    string.reverse()\n    \n    string=\"\
    \".join(string)\n    \n    return string\n</code>\n<|/ a tags=string,python |>\n\
    <| a dscore=0 |>\n<code>\ndef flip_case(string):\n    \n    string=string.lower()\n\
    \    \n    string=list(string)\n    \n    string.reverse()\n    \n    string=\"\
    \".join(string)\n    \n    return string\n</code>\n<|/ a tags=string,python |>\n\
    <| c |>\nPlease don't post only code as an answer, but also provide an explanation\
    \ of what your code does and how it solves the problem of the question. Answers\
    \ with an explanation are usually more helpful and of better quality, and are\
    \ more likely to attract upvotes.\n<|/ c |>\n<| c |>\nPlease don't post only code\
    \ as an answer, but also provide an explanation of what your code does and how\
    \ it solves the problem of the question. Answers with an explanation are usually\
    \ more helpful and of better quality, and are more likely to attract upvotes.\n\
    <|/ c |>\n<| c |>\nPlease don't post only code as an answer, but also provide\
    \ an explanation of what your code does and how it solves the problem of the question.\
    \ Answers with an explanation are usually more helpful and of better quality,\
    \ and are more likely to attract upvotes.\n<|/ c |>\n<| a tags=string,python |>\n\
    <code>\ndef flip_case(string):\n    \n    string=string.lower()\n    \n    string=list(string)\n\
    \    \n    string.reverse()\n    \n    string=\"\".join(string)\n    \n    return\
    \ string\n</code>\n<|/ a dscore=0 |>\n<| c |>\nPlease don't post only code as\
    \ an answer, but also provide an explanation of what your code does and how it\
    \ solves the problem of the question. Answers with an explanation are usually\
    \ more helpful", "    local result = \"\"\n    for c in string:\n        if c.isupper():\n\
    \            result += \"_\"\n            result += c.lower()\n        else:\n\
    \            result += c\n    return result\n</code>\n<|/ a dscore=0 |>\n<| c\
    \ |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/27859064)\n\
    <|/ c |>\n<| c |>\nThe question was how to flip case of a string. My answer was\
    \ how to do that. How is that not an answer?\n<|/ c |>\n<| c |>\nThe question\
    \ was how to flip case of a string. My answer was how to do that. How is that\
    \ not an answer?\n<|/ c |>\n<| c |>\nThe question was how to flip case of a string.\
    \ My answer was how to do that. How is that not an answer?\n<|/ c |>\n<| c |>\n\
    The question was how to flip case of a string. My answer was how to do that. How\
    \ is that not an answer?\n<|/ c |>\n<| a |>\n<code>", "    \n    local result\
    \ = \"\"\n    for char in string:\n        if char == char:\n            result\
    \ = result + char\n        elseif char == char.upper():\n            result =\
    \ result + char.lower()\n        elseif char == char.lower():\n            result\
    \ = result + char.upper()\n        end\n    end\n    return result\nend", "  \
    \  local result = \"\"\n    for c in string:\n        if c.isupper():\n      \
    \      result += \"_\"\n            result += c.lower()\n        else:\n     \
    \       result += c\n    return result\n</code>\n<|/ a tags=string,lowercase,uppercase,haskell,replace\
    \ |>\n<| c |>\n`toUpper` and `toLower` are not standard Haskell functions. You\
    \ probably meant `toUpper` and `toLower`.\n<|/ c |>\n<| c |>\nThanks, I fixed\
    \ the typo.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nimport Data.Char", "    \n  \
    \  local result = \"\"\n    for char in string:\n        if char == char:\n  \
    \          result += char\n        else\n            result += char.upper()\n\
    \            result += char.lower()\n        end\n    end\n    return result\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    string = string.lower()\n\
    \    string = string.upper()\n    \n    return string\nend", "    \n    chars\
    \ = string.chars\n    \n    for i in 0..(length(chars)-1)\n        chars[i] =\
    \ chars[i].upper()\n        chars[length(chars)-i-1] = chars[length(chars)-i-1].lower()\n\
    \    end\n    \n    return string(chars)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert flip_case(\"hello\") == \"hELLO\"\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of uppercase letters.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    local result =\
    \ \"\"\n    for char in string:\n        if char == char:\n            result\
    \ = result + char\n        elseif char == char:\n            result = result +\
    \ char.upper()\n        elseif char == char.upper():\n            result = result\
    \ + char.lower()\n        elseif char == char.lower():\n            result = result\
    \ + char.upper()\n        else\n            result = result + char\n        end\n\
    \    end\n    return result\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    local result = \"\"\n\
    \    for c in string:\n        if c.isupper():\n            result += \"_\"\n\
    \            result += c.lower()\n        else:\n            result += c\n   \
    \ return result\n</code>\n<|/ a tags=string,lowercase,uppercase,haskell |>\n<|\
    \ c |>\nThis doesn't work for all cases. For example, `flip_case(\"Hello\")` returns\
    \ `H__e__l__l__o`, not `hELLO`.\n<|/ c |>\n<| c |>\nYes, I see that now. Thanks\
    \ for pointing that out. I will fix it now.\n<|/ c |>\n<| c |>\nI fixed the problem\
    \ you pointed out and added a function that will work for all cases.\n<|/ c |>\n\
    <| c |>\nThe function `flip_case` doesn't work for all cases. For example, `flip_case(\"\
    Hello\")` returns `H__e__l__l__o`, not `hELLO`.\n<|/ c |>\n<| c |>\nI fixed the\
    \ problem you pointed out and added a function that will work for all cases.\n\
    <|/ c |>\n<| a dscore=5 tags=string,lowercase,uppercase,haskell |>\n<code>\nimport\
    \ Data.Char", "    local result = \"\"\n    for c in string:\n        if c.isupper():\n\
    \            result += \"_\"\n            result += c.lower()\n        else:\n\
    \            result += c\n    return result\n</code>\n<|/ a dscore=2 |>\n<| c\
    \ |>\nThis doesn't work for strings with non-ascii characters. For example, `flip_case(\"\
    \xC4\")` returns `\xC3\xA4`.\n<|/ c |>\n<| a dscore=2 |>\n<code>", "    \n   \
    \ string::String\n    \n    string::String\n    \n    string::String\n    \n \
    \   string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    \n    string::String\n    \n    string::String\n    \n\
    \    string::String\n    ", "    \n    uppercase = string.uppercase()\n    lowercase\
    \ = string.lowercase()\n    \n    uppercase = uppercase.replace(uppercase,lowercase)\n\
    \    lowercase = lowercase.replace(lowercase,uppercase)\n    \n    return lowercase\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    local result = \"\"\n   \
    \ for char in string:\n        if char == char:\n            result += \"_\"\n\
    \        else:\n            result += char.upper()\n            result += char.lower()\n\
    \    return result\nend\n</cell>\n<code language=julia-1.5>", "    local result\
    \ = \"\"\n    for c in string:\n        if c.isupper():\n            result =\
    \ result + c.lower()\n        elseif c.islower():\n            result = result\
    \ + c.upper()\n        else\n            result = result + c\n        end\n  \
    \  end\n    return result\nend\n</cell>\n<code language=julia-1.5>", "    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    lowercase_string = string.lower()\n    uppercase_string = string.upper()\n\
    \    \n    return uppercase_string + lowercase_string\nend\n</cell>\n<code language=julia-1.5>",
  "    local result = \"\"\n    for c in string:\n        if c.isupper():\n      \
    \      result += \"_\"\n            result += c.lower()\n        else:\n     \
    \       result += c\n    return result\n</code>\n<|/ a tags=string,uppercase,lowercase,haskell,string\
    \ |>\n<| c |>\n`toUpper` and `toLower` are not in the base library. You'll need\
    \ to import `Data.Char`.\n<|/ c |>\n<| c |>\nThanks, I didn't know that. I've\
    \ edited my answer to include this information.\n<|/ c |>\n<| a tags=string,uppercase,lowercase,haskell,string\
    \ |>\n<code>\nimport Data.Char", "    local result = \"\"\n    for c in string:\n\
    \        if c.isupper():\n            result = result + c.lower()\n        else:\n\
    \            result = result + c.upper()\n    return result\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    local result = \"\"\n    for c in string:\n     \
    \   if c.isupper():\n            result = result + c.lower()\n        elseif c.islower():\n\
    \            result = result + c.upper()\n        else\n            result = result\
    \ + c\n        end\n    end\n    return result\nend", "    local result = \"\"\
    \n    for character in string:\n        if character == toupper(character):\n\
    \            character = tolower(character)\n        result += character\n   \
    \ return result\nend", "    local result = \"\"\n    for char in string:\n   \
    \     if char == char:\n            result += char\n        else\n           \
    \ result += char.upper()\n            result += char.lower()\n        end\n  \
    \  end\n    return result\nend", "    \n    uppercase = string.uppercase()\n \
    \   lowercase = string.lowercase()\n    \n    return uppercase+lowercase\nend\n\
    </cell>\n<code language=julia-1.5>\n@test flip_case(\"Hello\") == \"hELLO\"\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the string with all non-alphanumeric characters removed.\ne.g. \"hello!\" =>\
    \ \"hello\"", "    local result = \"\"\n    for char in string:\n        if char\
    \ == char:\n            result += char\n        else\n            result += char.upper()\n\
    \            result += char.lower()\n        end\n    end\n    return result\n\
    end\n</cell>\n<code language=julia-1.4>", "    \n    local result = \"\"\n   \
    \ for char in string:\n        if char == char.toUpper():\n            char =\
    \ toLower()\n        elif char == char.toLower():\n            char = toUpper()\n\
    \        end\n        result = result + char\n    end\n    return result\nend",
  "    \n    local result = \"\"\n    for char in string:\n        if char == char:\n\
    \            result += \"_\"\n        else\n            result += char\n     \
    \   end\n    end\n    return result\nend", "    local result = \"\"\n    for char\
    \ in string:\n        if char == char:\n            result += \"_\"\n        else\n\
    \            result += char.upper()\n        end\n    end\n    return result\n\
    end\n</cell>\n<code language=julia-1.5>", "    local result = \"\"\n    for c\
    \ in string:\n        if c.isupper():\n            result = result + c.lower()\n\
    \        elseif c.islower():\n            result = result + c.upper()\n      \
    \  else\n            result = result + c\n        end\n    end\n    return result\n\
    end\n</cell>\n<code language=julia-1.4>", "    local result = \"\"\n    for char\
    \ in string:\n        if char == char:\n            result += char\n        else\n\
    \            result += char.upper()\n            result += char.lower()\n    \
    \    end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    local result = \"\"\n    for character in string:\n        if character ==\
    \ character then\n            character = character .. \"A\"\n        else\n \
    \           character = character .. \"a\"\n        end\n        result = result\
    \ .. character\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    lowercase_string = string.lower()\n    uppercase_string = string.upper()\n\
    \    \n    return uppercase_string + lowercase_string\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert flip_case(\"hello\") == \"hELLO\"\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns a string where all characters have\
    \ been converted to lowercase and all characters have been converted to uppercase.",
  "    local result = \"\"\n    for char in string:\n        if char == char:\n  \
    \          result += char\n        elseif char < \"a\" and char > \"z\":\n   \
    \         result += char.upper()\n        elseif char > \"A\" and char < \"Z\"\
    :\n            result += char.lower()\n        else\n            result += char\n\
    \        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.4>",
  "    local result = \"\"\n    for c in string:\n        if c.isupper():\n      \
    \      result = result + c.lower()\n        elseif c.islower():\n            result\
    \ = result + c.upper()\n        else\n            result = result + c\n      \
    \  end\n    end\n    return result\nend", "    \n    string = string.lower()\n\
    \    \n    for i in string.chars:\n        if i.isupper():\n            string\
    \ = string.replace(i, i.upper())\n        else:\n            string = string.replace(i,\
    \ i.lower())\n    \n    return string\n</code>\n<|/ a tags=string,uppercase,lowercase,haskell,replace\
    \ |>\n<| a dscore=1 |>\n<code>\nimport Data.List\nimport Data.Char", "    local\
    \ result = \"\"\n    for char in string:\n        if char == char:\n         \
    \   result += char\n        else\n            result += char.upper()\n       \
    \     result += char.lower()\n        end\n    end\n    return result\nend\n</cell>\n\
    <code language=julia-1.5>", "    local result = \"\"\n    for char in string:\n\
    \        if char == char:\n            result += char\n        else\n        \
    \    result += char.upper()\n            result += char.lower()\n        end\n\
    \    end\n    return result\nend\n</cell>\n<code language=julia-1.5>", "    local\
    \ result = \"\"\n    for char in string:\n        if char == char:\n         \
    \   result += char\n        else\n            result += char.upper()\n       \
    \     result += char.lower()\n        end\n    end\n    return result\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    ", "    local result\
    \ = \"\"\n    for char in string:\n        if char == char.toUpper():\n      \
    \      char = toUpper(char)\n        elif char == char.toLower():\n          \
    \  char = toLower(char)\n        end\n        result = result + char\n    return\
    \ result\nend\n</cell>\n<code language=julia-1.5>", "    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    local\
    \ result = \"\"\n    for char in string:\n        if char == char:\n         \
    \   result += char\n        else\n            result += char.upper()\n       \
    \ end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    \n    string::String \n    \n    string::String\
    \ \n    \n    string::String \n    ", "    local result = \"\"\n    for c in string:\n\
    \        if c.isupper():\n            result = result + c.lower()\n        else:\n\
    \            result = result + c.upper()\n    return result\nend\n</cell>\n<code\
    \ language=julia-1.3>\n@time flip_case(\"Hello\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns the string with all lowercase\
    \ letters replaced by uppercase letters.\nHint: Use a for loop to iterate over\
    \ the characters in the string.", "    local result = \"\"\n    for c in string:\n\
    \        if c.isupper():\n            result = result + c.lower()\n        else:\n\
    \            result = result + c.upper()\n    return result\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=string,lowercase,uppercase,haskell |>\n<code>\nimport Data.Char",
  "    local result = \"\"\n    for c in string:\n        if c.isupper():\n      \
    \      result = result + c.lower()\n        else:\n            result = result\
    \ + c.upper()\n    return result\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't\
    \ work if there are multiple uppercase letters in the string. For example, if\
    \ `string = \"Hello World\"`, then `flip_case(string)` returns `\"hELLO wORLD\"\
    `.\n<|/ c |>\n<| c |>\nYes, you are right. My bad. I've updated my answer.\n<|/\
    \ c |>\n<| a tags=string,lowercase,uppercase,haskell |>\n<code>\nimport Data.Char",
  "    \n    uppercase = string.uppercase()\n    lowercase = string.lowercase()\n\
    \    \n    return lowercase+uppercase[1:len(uppercase)]\nend\n</cell>\n<code language=julia-1.5>\n\
    @time flip_case(\"Hello\")\n</cell>\n<text>\nExercise 2: Write a function that\
    \ takes a string and returns the string with all the characters in lower case\
    \ and upper case separated by a space.\ne.g. \"Hello\" => \"h e l l o\"", "  \
    \  local result = \"\"\n    for c in string:\n        if c.isupper():\n      \
    \      result = result + c.lower()\n        else:\n            result = result\
    \ + c.upper()\n    return result\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>", "    \n    uppercase = string.uppercase()\n    lowercase = string.lowercase()\n\
    \    \n    return lowercase+uppercase[1:uppercase.len()-1]\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@test flip_case(\"Hello\") == \"hELLO\"\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns a string where all\
    \ characters are lowercase except for the first and last characters. For example,",
  "    local result = \"\"\n    for c in string:\n        if c.isupper():\n      \
    \      result = result + c.lower()\n        elseif c.islower():\n            result\
    \ = result + c.upper()\n        else\n            result = result + c\n      \
    \  end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    local result = \"\"\n    \n    for char in string:\n        if char ==\
    \ char:\n            result = result + char\n        elseif char == char.upper():\n\
    \            result = result + char.lower()\n        elseif char == char.lower():\n\
    \            result = result + char.upper()\n        end\n    end\n    \n    return\
    \ result\nend\n</cell>\n<code language=julia-1.5>", "    local result = \"\"\n\
    \    for c in string:\n        if c:lower() == c:upper():\n            result\
    \ = result + c:upper()\n        else\n            result = result + c:lower()\n\
    \        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.3>\n\
    @time flip_case(\"Hello\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of characters in the string.", "    local\
    \ result = \"\"\n    for character in string:\n        if character == character:\n\
    \            result += character\n        else\n            result += tostring(character)\n\
    \        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    local result = \"\"\n    for char in string:\n        if char == char:\n  \
    \          result = result + char\n        elseif char == char:\n            result\
    \ = result + char.upper()\n        elseif char == char.upper():\n            result\
    \ = result + char.lower()\n        elseif char == char.lower():\n            result\
    \ = result + char.upper()\n        else\n            result = result + char\n\
    \        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    local result =\
    \ \"\"\n    for character in string:\n        if character == character then\n\
    \            character = character .. \"A\"\n        else\n            character\
    \ = character .. \"a\"\n        end\n        result = result .. character\n  \
    \  end\n    return result\nend\n</cell>\n<code language=julia-1.5>", "    \n \
    \   string::String \n    \n    lowercase_char::String \n    \n    uppercase_char::String\
    \ \n    \n    lowercase_char::String \n    \n    uppercase_char::String \n   \
    \ \n    lowercase_char::String \n    \n    uppercase_char::String \n    \n   \
    \ lowercase_char::String \n    \n    uppercase_char::String \n    \n    lowercase_char::String\
    \ \n    \n    uppercase_char::String \n    \n    lowercase_char::String \n   \
    \ \n    uppercase_char::String \n    \n    lowercase_char::String \n    \n   \
    \ uppercase_char::String \n    \n    lowercase_char::String \n    \n    uppercase_char::String\
    \ \n    \n    lowercase_char::String \n    \n    uppercase_char::String \n   \
    \ \n    lowercase_char::String \n    \n    uppercase_char::String \n    \n   \
    \ lowercase_char::String \n    \n    uppercase_char::String \n    \n    lowercase_char::String\
    \ \n    \n    uppercase_char::String \n    \n    lowercase_char::String \n   \
    \ \n    uppercase_char::String \n    \n    lowercase_char::String \n    \n   \
    \ uppercase_char::String \n    \n    lowercase_char::String \n    \n    uppercase_char::String\
    \ \n    \n    lowercase_char::String \n    \n    uppercase_char::String \n   \
    \ \n    lowercase_char::String \n    \n    uppercase_char::String \n    \n   \
    \ lowercase_char::String \n    \n    uppercase_char::String \n    \n    lowercase_char::String\
    \ \n    \n    uppercase_char::String \n    \n    lowercase_char::String \n   \
    \ \n    uppercase_char::String \n    \n    lowercase_char::String \n    \n   \
    \ uppercase_char::String \n    \n    lowercase_char::String \n    \n    uppercase_char::String\
    \ \n    \n    lowercase_char::String \n    \n    uppercase_char::String \n   \
    \ \n    lowercase_char::String \n    \n    uppercase_char::String \n    \n   \
    \ lowercase_char::String \n    \n    uppercase_char::String \n    \n    lowercase_char::String\
    \ \n    \n    uppercase_char::String \n    \n    lowercase_char::String \n   \
    \ \n    uppercase_char::String \n    \n    lowercase_char::String \n    \n   \
    \ uppercase_char::String \n    ", "    local result = \"\"\n    for c in string.gmatch(\"\
    %a\")::Vector{String}\n        if c == \"a\"\n            result += \"A\"\n  \
    \      elseif c == \"A\"\n            result += \"a\"\n        elseif c == \"\
    e\"\n            result += \"E\"\n        elseif c == \"E\"\n            result\
    \ += \"e\"\n        elseif c == \"i\"\n            result += \"I\"\n        elseif\
    \ c == \"I\"\n            result += \"i\"\n        elseif c == \"o\"\n       \
    \     result += \"O\"\n        elseif c == \"O\"\n            result += \"o\"\n\
    \        elseif c == \"u\"\n            result += \"U\"\n        elseif c == \"\
    U\"\n            result += \"u\"\n        else\n            result += \"$\" \n\
    \        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    local result = \"\"\n    for char in string:\n        if char == char:\n  \
    \          result += char\n        elseif char == char:\n            result +=\
    \ char.upper()\n        elseif char == char.upper():\n            result += char.lower()\n\
    \        elseif char == char.lower():\n            result += char.upper()\n  \
    \      else\n            result += char\n        end\n    end\n    return result\n\
    end\n</cell>\n<code language=julia-1.5>", "    local result = \"\"\n    for char\
    \ in string:\n        if char == char:\n            result += char\n        else\n\
    \            result += char.upper()\n            result += char.lower()\n    \
    \    end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    local result = \"\"\n    for char in string:\n        if char == char:\n  \
    \          result += \"_\"\n        else\n            result += char\n       \
    \ end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>", " \
    \   local result = \"\"\n    for char in string:\n        if char == char:\n \
    \           result += char\n        else\n            result += char.upper()\n\
    \            result += char.lower()\n        end\n    end\n    return result\n\
    end\n</cell>\n<code language=julia-1.5>", "    local result = \"\"\n    for c\
    \ in string:\n        if c.isupper():\n            result += \"_\"\n         \
    \   result += c.lower()\n        else:\n            result += c\n    return result\n\
    </code>\n<|/ a tags=string,lowercase,uppercase,haskell,replace |>\n<| a |>\n<code>\n\
    import Data.List", "    \n    string::String\n    \n    lowercase_string::String\n\
    \    \n    uppercase_string::String\n    \n    lowercase_string::String\n    \n\
    \    uppercase_string::String\n    \n    lowercase_string::String\n    \n    uppercase_string::String\n\
    \    \n    lowercase_string::String\n    \n    uppercase_string::String\n    \n\
    \    lowercase_string::String\n    \n    uppercase_string::String\n    \n    lowercase_string::String\n\
    \    \n    uppercase_string::String\n    \n    lowercase_string::String\n    \n\
    \    uppercase_string::String\n    \n    lowercase_string::String\n    \n    uppercase_string::String\n\
    \    \n    lowercase_string::String\n    \n    uppercase_string::String\n    \n\
    \    lowercase_string::String\n    \n    uppercase_string::String\n    \n    lowercase_string::String\n\
    \    \n    uppercase_string::String\n    \n    lowercase_string::String\n    \n\
    \    uppercase_string::String\n    \n    lowercase_string::String\n    \n    uppercase_string::String\n\
    \    \n    lowercase_string::String\n    \n    uppercase_string::String\n    \n\
    \    lowercase_string::String\n    \n    uppercase_string::String\n    \n    lowercase_string::String\n\
    \    \n    uppercase_string::String\n    \n    lowercase_string::String\n    \n\
    \    uppercase_string::String\n    \n    lowercase_string::String\n    \n    uppercase_string::String\n\
    \    \n    lowercase_string::String\n    \n    uppercase_string::String\n    \n\
    \    lowercase_string::String\n    \n    uppercase_string::String\n    \n    lowercase_string::String\n\
    \    \n    uppercase_string::String\n    \n    lowercase_string::String\n    \n\
    \    uppercase_string::String\n    \n    lowercase_string::String\n    \n    uppercase_string::String\n\
    \    \n    lowercase_string::String\n    \n    uppercase_string::String\n    \n\
    \    lowercase_string::String\n    \n    uppercase_string::String\n    \n    lowercase_string::String\n\
    \    \n    uppercase_string::String\n    \n    lowercase_string::String\n    \n\
    \    uppercase_string::String\n    \n    lowercase_string::String\n    \n    uppercase_string::String\n\
    \    ", "    local result = \"\"\n    for char in string:\n        if char ==\
    \ char:\n            result += \"_\"\n        elseif char == char.upper():\n \
    \           result += \"_\"\n            result += char.lower()\n        elseif\
    \ char == char.lower():\n            result += char.upper()\n        else\n  \
    \          result += char\n        end\n    end\n    return result\nend\n</cell>\n\
    <code language=julia-1.5>", "    local result = \"\"\n    for char in string:\n\
    \        if char == char:\n            result += char\n        else\n        \
    \    result += char.upper()\n        end\n    end\n    return result\nend\n</cell>\n\
    <code language=julia-1.5>", "    local result = \"\"\n    for char in string:\n\
    \        if char >= 'a' and char <= 'z':\n            char = char.upcase()\n \
    \       elif char >= 'A' and char <= 'Z':\n            char = char.upcase()\n\
    \        elif char >= '0' and char <= '9':\n            char = char.upcase()\n\
    \        else\n            char = char\n        end\n        result = result +\
    \ char\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    local result = \"\"\n    for c in string:\n        if c:lower() == c:upper():\n\
    \            result = result + c:upper()\n        else\n            result = result\
    \ + c:lower()\n        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    local result = \"\"\n    for char in string:\n        if char == char:\n  \
    \          result += char\n        else\n            result += char.upper()\n\
    \        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    local result = \"\"\n    for c in string:\n        if c.isupper():\n      \
    \      result += \"_\"\n            result += c.lower()\n        else:\n     \
    \       result += c\n    return result\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2\
    \ |>\n<code>", "    local result = \"\"\n    for char in string:\n        if char\
    \ == char:\n            result += char\n        else\n            result += char.upper()\n\
    \            result += char.lower()\n        end\n    end\n    return result\n\
    end\n</cell>\n<code language=julia-1.4>", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    local result = \"\"\n    for char in string:\n    \
    \    if char == char:\n            result += char\n        else\n            result\
    \ += char.upper()\n        end\n    end\n    return result\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    local result = \"\"\n    for char in string:\n  \
    \      if char == char:\n            result += \"_\"\n        else\n         \
    \   result += char:upper()\n        end\n    end\n    return result\nend", " \
    \   \n    local result = \"\"\n    \n    for character in string:\n        if\
    \ character == character:\n            result += \"_\"\n        else:\n      \
    \      result += character\n    \n    return result\nend", "    local result =\
    \ \"\"\n    for c in string:\n        if c.isupper():\n            result = result\
    \ + c.lower()\n        elseif c.islower():\n            result = result + c.upper()\n\
    \        else\n            result = result + c\n        end\n    end\n    return\
    \ result\nend\n</cell>\n<code language=julia-1.4>", "    local result = \"\"\n\
    \    for char in string:\n        if char == char:\n            result = result\
    \ + char\n        elseif char == char:\n            result = result + char.upper()\n\
    \        elseif char == char.upper():\n            result = result + char.lower()\n\
    \        elseif char == char.lower():\n            result = result + char.upper()\n\
    \        else\n            result = result + char\n        end\n    end\n    return\
    \ result\nend\n</cell>\n<code language=julia-1.5>", "    local result = \"\"\n\
    \    for c in string:\n        if c.isupper():\n            result = result +\
    \ c.lower()\n        else:\n            result = result + c.upper()\n    return\
    \ result\nend\n</cell>\n<code language=julia-1.5>", "    local result = \"\"\n\
    \    for char in string:\n        if char == char:\n            result += char\n\
    \        else if char < \"a\" and char > \"z\":\n            result += \"A\"\n\
    \        elif char < \"A\" and char > \"Z\":\n            result += \"a\"\n  \
    \      elif char < \"0\" and char > \"9\":\n            result += \"0\"\n    \
    \    else :\n            result += char\n    end\n    return result\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    string = string.lower()\n    string = string.upper()\n\
    \    \n    return string\nend", "    \n    lowercase_string = string.lower()\n\
    \    uppercase_string = string.upper()\n    \n    return uppercase_string + lowercase_string\n\
    end\n</cell>\n<code language=julia-1.5>\n@test flip_case(\"Hello\") == \"hELLO\"\
    \n</cell>\n<text>\nExercise: Write a function that takes a string and returns\
    \ the string with all uppercase characters replaced with their lowercase counterparts.\n\
    Hint: Use a regular expression to find all uppercase characters and replace them\
    \ with their lowercase counterparts.", "    local result = \"\"\n    for character\
    \ in string:\n        if character == character then\n            character =\
    \ character .. \"A\"\n        elseif character == \"A\" then\n            character\
    \ = character .. \"a\"\n        elseif character == \"a\" then\n            character\
    \ = character .. \"A\"\n        end\n        result = result .. character\n  \
    \  end\n    return result\nend", "    local result = \"\"\n    for char in string:\n\
    \        if char >= 'a' and char <= 'z':\n            char = char - 32\n     \
    \   elif char >= 'A' and char <= 'Z':\n            char = char - 64\n        end\n\
    \        result = result .. char\n    end\n    return result\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    uppercase = string.uppercase()\n    lowercase\
    \ = string.lowercase()\n    \n    return lowercase+uppercase\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert flip_case(\"Hello\") == \"hELLO\"\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string.", "    local result = \"\"\n    for char in string:\n       \
    \ if char == char:\n            result = result + char\n        elseif char ==\
    \ char.upper():\n            result = result + char.lower()\n        elseif char\
    \ == char.lower():\n            result = result + char.upper()\n        else\n\
    \            result = result + char\n        end\n    end\n    return result\n\
    end", "    \n    chars = string.chars\n    \n    for i in 0..(length(chars)-1)\n\
    \        chars[i] = chars[i].upper()\n        chars[length(chars)-i-1] = chars[length(chars)-i-1].lower()\n\
    \    end\n    \n    return string(chars)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    count_substrings(string::String)::Int64", "    local result = \"\"\
    \n    for c in string:\n        if c.isupper():\n            result += \"_\"\n\
    \            result += c.lower()\n        else:\n            result += c\n   \
    \ return result\n</code>\n<|/ a tags=string,lowercase,uppercase,haskell,string\
    \ |>\n<| c |>\nThis doesn't work for all cases. `flip_case(\"aBcD\")` returns\
    \ `aBcD` instead of `aBcD_`\n<|/ c |>\n<| c |>\n: Yes, I noticed that and fixed\
    \ it. I also added a version that doesn't use recursion.\n<|/ c |>\n<| c |>\n\
    : I added a version that doesn't use recursion.\n<|/ c |>\n<| a tags=string,lowercase,uppercase,haskell,string\
    \ |>\n<code>\nimport Data.Char", "    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    local result = \"\"\n    for c in string:\n        if c.isupper():\n\
    \            result = result + c.lower()\n        else:\n            result =\
    \ result + c.upper()\n    return result\n</code>\n<|/ a tags=string,lowercase,uppercase,haskell\
    \ |>\n<| a dscore=4 |>\n<code>\nimport Data.Char", "    \n    local result = \"\
    \"\n    for char in string:\n        if char == char.toUpper():\n            char\
    \ = char.toLower()\n        elif char == char.toLower():\n            char = char.toUpper()\n\
    \        \n        result = result .. char\n    \n    return result\nend", " \
    \   local result = \"\"\n    for char in string:\n        if char == char:\n \
    \           result += \"_\"\n        else\n            result += char\n      \
    \  end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    local result = \"\"\n    for character in string:\n        if character ==\
    \ character then\n            character = character .. \"a\"\n        else\n \
    \           character = character .. \"A\"\n        end\n        result = result\
    \ .. character\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    local result = \"\"\n    for char in string:\n        if char == char:\n  \
    \          result += char\n        else if char.isupper():\n            result\
    \ += char.lower()\n        else if char.islower():\n            result += char.upper()\n\
    \        else :\n            result += char\n    return result\nend\n</cell>\n\
    <code language=julia-1.4>", "    \n    local result = \"\"\n    for char in string:\n\
    \        if char == char:\n            result += char\n        else\n        \
    \    result += char.upper()\n            result += char.lower()\n        end\n\
    \    end\n    return result\nend\n</cell>\n<code language=julia-1.5>", "    local\
    \ result = \"\"\n    for character in string:\n        if character == character\
    \ then\n            character = character:upper()\n        else\n            character\
    \ = character:lower()\n        end\n        result = result .. character\n   \
    \ end\n    return result\nend\n</cell>\n<code language=julia-1.5>", "    local\
    \ result = \"\"\n    for c in string:\n        if c.isupper():\n            result\
    \ += \"_\"\n            result += c.lower()\n        else:\n            result\
    \ += c\n    return result\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,lowercase,uppercase,haskell\
    \ |>\n<code>\nimport Data.List", "    \n    uppercase = string.uppercase()\n \
    \   lowercase = string.lowercase()\n    \n    return uppercase+lowercase\nend\n\
    </cell>\n<code language=julia-1.5>\n@test flip_case(\"Hello\") == \"hELLO\"\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a string and returns\
    \ the string with all non-alphanumeric characters removed.\ne.g. \"hello!\" =>\
    \ \"hello\"", "    \n    local result = \"\"\n    for char in string:\n      \
    \  if char == char:\n            result += \"_\"\n        else:\n            result\
    \ += char.upper()\n    return result\nend", "    local result = \"\"\n    for\
    \ char in string:\n        if char == char:\n            result += \"_\"\n   \
    \     else\n            result += char\n        end\n    end\n    return result\n\
    end\n</cell>\n<code language=julia-1.5>", "    local result = \"\"\n    for c\
    \ in string:\n        if c:lower() == c:upper():\n            result += c.upper()\n\
    \        else:\n            result += c.lower()\n    return result\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>", "    local result = \"\"\n    for\
    \ c in string:\n        if c.islower() then\n            result =  result .. c.toupper()\n\
    \        elseif c.isupper() then\n            result =  result .. c.tolower()\n\
    \        end\n    end\n    return result\nend", "    local result = \"\"\n   \
    \ for char in string:\n        if char == char:\n            result += char\n\
    \        else\n            result += char.upper()\n            result += char.lower()\n\
    \        end\n    end\n    return result\nend", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    local result = \"\"\n    for char in string:\n\
    \        if char == char:\n            result += char\n        else if char.isupper():\n\
    \            result += char.lower()\n        else if char.islower():\n       \
    \     result += char.upper()\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    local result = \"\"\n    for char in string:\n        if char == char:\n  \
    \          result = result + char\n        elseif char == char.upper():\n    \
    \        result = result + char.lower()\n        elseif char == char.lower():\n\
    \            result = result + char.upper()\n        end\n    end\n    return\
    \ result\nend\n</cell>\n<code language=julia-1.5>", "    \n    lowercase_chars\
    \ = string.lower()\n    uppercase_chars = string.upper()\n    \n    return uppercase_chars\
    \ + lowercase_chars\nend\n</cell>\n<code language=julia-1.5>\n@test flip_case(\"\
    Hello\") == \"hELLO\"\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the string with all spaces replaced by underscores.", " \
    \   local result = \"\"\n    for char in string:\n        if char == char:\n \
    \           result += \"_\"\n        else\n            result += char:upper()\n\
    \        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.4>",
  "    local result = \"\"\n    for c in string:\n        if c.isupper():\n      \
    \      result = result + c.lower()\n        else:\n            result = result\
    \ + c.upper()\n    return result\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    chars = string.chars\n    \n    for i in 0..(length(chars)-1)\n        chars[i]\
    \ = chars[i].toUpper()\n    end\n    \n    return join(chars, \"\")\nend\n</cell>\n\
    <code language=julia-1.5>\n@test flip_case(\"Hello\") == \"hELLO\"\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns a string\
    \ where all characters have been converted to lowercase.\nFor example, \n>>> to_lowercase(\"\
    hello\")\n\"hello\"\n>>> to_lowercase(\"HELLO\")\n\"hello\"\n>>> to_lowercase(\"\
    HellO\")\n\"hello\"\n>>> to_lowercase(\"HellO\")\n\"hello\"\n>>> to_lowercase(\"\
    HellO\")\n\"hello\"\n>>> to_lowercase(\"HellO\")\n\"hello\"\n>>> to_lowercase(\"\
    HellO\")\n\"hello\"\n>>> to_lowercase(\"HellO\")\n\"hello\"\n>>> to_lowercase(\"\
    HellO\")\n\"hello\"\n>>> to_lowercase(\"HellO\")\n\"hello\"\n>>> to_lowercase(\"\
    HellO\")\n\"hello\"\n>>> to_lowercase(\"HellO\")\n\"hello\"\n>>> to_lowercase(\"\
    HellO\")\n\"hello\"\n>>> to_lowercase(\"HellO\")\n\"hello\"\n>>> to_lowercase(\"\
    HellO\")\n\"hello\"\n>>> to_lowercase(\"HellO\")\n\"hello\"\n>>> to_lowercase(\"\
    HellO\")\n\"hello\"\n>>> to_lowercase(\"HellO\")\n\"hello\"\n>>> to_lowercase(\"\
    HellO\")\n\"hello\"\n>>> to_lowercase(\"HellO\")\n\"hello\"\n>>> to_lowercase(\"\
    HellO\")\n\"hello\"\n>>> to_lowercase(\"HellO\")\n\"hello\"\n>>> to_lowercase(\"\
    HellO\")\n\"hello\"\n>>> to_lowercase(\"HellO\")\n\"hello\"\n>>> to_lowercase(\"\
    HellO\")\n\"hello\"\n>>> to_lowercase(\"HellO\")\n\"hello\"\n>>> to_lowercase(\"\
    HellO\")\n\"hello\"\n>>> to_lowercase(\"HellO\")\n\"hello\"\n>>> to_lowercase(\"\
    HellO\")\n\"hello\"\n>>> to_lowercase(\"HellO\")\n\"hello\"\n>>> to_lowercase(\"\
    HellO\")\n\"hello\"\n>>> to_lowercase(\"HellO\")\n\"hello\"\n>>> to_lowercase(\"\
    HellO", "    local result = \"\"\n    for char in string:\n        if char ==\
    \ char:\n            result = result + char\n        else\n            result\
    \ = result + char.upper()\n        end\n    end\n    return result\nend\n</cell>\n\
    <code language=julia-1.5>", "    local result = \"\"\n    for c in string.gmatch(\"\
    %a\")::Vector{Char} \n        if c.isupper() \n            then result .= c.tolower()\
    \ \n            else result .= c.toupper()\n        end\n    end\n    return result\n\
    end\n</cell>\n<code language=julia-1.5>", "    local result = \"\"\n    for c\
    \ in string:\n        if c.isupper():\n            result += \"_\"\n         \
    \   result += c.lower()\n        else:\n            result += c\n    return result\n\
    </code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work for all cases, for example\
    \ `flip_case(\"aBcD\")` returns `aBcD` instead of `aBc_D`.\n<|/ c |>\n<| c |>\n\
    Yes, I agree. That's why I added the comment \"For a given string, flip lowercase\
    \ characters to uppercase and uppercase to lowercase.\" I assumed that OP would\
    \ have figured out how to do that himself. But thanks for pointing it out.\n<|/\
    \ c |>\n<| a tags=string,lua |>\n<code>", "    local result = \"\"\n    for char\
    \ in string:\n        if char == char:\n            result += \"_\"\n        else\n\
    \            result += char:lower()\n        end\n    end\n    return result\n\
    end\n</cell>\n<code language=julia-1.5>", "    local result = \"\"\n    for char\
    \ in string:\n        if char == char:\n            result += char\n        else\n\
    \            result += char.upper()\n        end\n    end\n    return result\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    local result = \"\"\n   \
    \ for char in string:\n        if char == char:\n            result += char\n\
    \        else\n            result += char.upper()\n            result += char.lower()\n\
    \        end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    local result = \"\"\n    for char in string:\n        if char == char:\n  \
    \          result += char\n        else\n            result += char.upper()\n\
    \            result += char.lower()\n        end\n    end\n    return result\n\
    end\n</cell>\n<code language=julia-1.5>", "    local result = \"\"\n    for c\
    \ in string:\n        if c.isupper():\n            result += \"_\"\n         \
    \   result += c.lower()\n        else:\n            result += c\n    return result\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=string,lowercase,uppercase,haskell |>\n\
    <code>\nimport Data.Char", "    \n    local result = \"\"\n    for char in string:\n\
    \        if char == char:\n            result = result + char\n        elseif\
    \ char == char.upper():\n            result = result + char.lower()\n        elseif\
    \ char == char.lower():\n            result = result + char.upper()\n        end\n\
    \    end\n    return result\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    lowercase = string.lower()\n    uppercase = string.upper()\n    \n    return\
    \ lowercase + uppercase\nend\n</cell>\n<code language=julia-1.5>\n@test flip_case(\"\
    Hello\") == \"hELLO\"\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the string with all uppercase letters replaced by their\
    \ lowercase counterparts.\ne.g. \"Hello\" => \"hELLO\"\nHint: Use regular expressions",
  "    local result = \"\"\n    for character in string:\n        if character ==\
    \ character:\n            result += \"_\"\n        else\n            result +=\
    \ character\n        end\n    end\n    return result\nend", "    \n    local result\
    \ = \"\"\n    for char in string:\n        if char == char:\n            result\
    \ += \"_\"\n        else:\n            result += char.upper()\n    return result\n\
    end\n</cell>\n<code language=julia-1.5>\n@test flip_case(\"Hello\") == \"hELLO\"\
    \n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ a string where all characters are converted to lowercase except for the first\
    \ character.", "    \n    uppercase = string.uppercase()\n    lowercase = string.lowercase()\n\
    \    \n    return uppercase + lowercase\nend\n</cell>\n<code language=julia-1.5>\n\
    @test flip_case(\"Hello\") == \"hELLO\"\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a string and returns the string with all vowels replaced\
    \ by an underscore.", "    \n    lowercase_string = string.lower()\n    uppercase_string\
    \ = string.upper()\n    \n    return uppercase_string + lowercase_string\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    string::String \n    \n    lowercase_chars\
    \ = string.chars\n    uppercase_chars = string.chars.map(&:upcase)\n    \n   \
    \ string.chars = lowercase_chars + uppercase_chars\n    \n    return string\n\
    end\n</cell>\n<code language=julia-1.5>", "    local result = \"\"\n    for char\
    \ in string:\n        if char == char:\n            result += char\n        else\n\
    \            result += char.upper()\n            result += char.lower()\n    \
    \    end\n    end\n    return result\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    local result = \"\"\n    for char in string:\n        if char == char:\n\
    \            result += char\n        else\n            result += char.upper()\n\
    \            result += char.lower()\n        end\n    end\n    return result\n\
    end\n</cell>\n<code language=julia-1.5>", "    local result = \"\"\n    for char\
    \ in string:\n        if char == char:\n            result += \"_\"\n        else\n\
    \            result += char.upper()\n        end\n    end\n    return result\n\
    end\n</cell>\n<code language=julia-1.5>", "    local result = \"\"\n    for char\
    \ in string:\n        if char >= 'a' and char <= 'z':\n            result += char.upper()\n\
    \        elif char >= 'A' and char <= 'Z':\n            result += char.lower()\n\
    \        else :\n            result += char\n    return result\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
