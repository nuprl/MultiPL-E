name: HumanEval_105_by_length
language: jl
results:
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if arr.length == 0 \n        return Vector{String}()\n    end\n    \n\
    \    arr = sort(arr)\n    \n    digits = Vector{String}(\"\")\n    \n    for i\
    \ in arr\n        if i > 9\n            digits = push!(digits, names[i])\n   \
    \     else\n            digits = push!(digits, names[i])\n        end\n    end\n\
    \    \n    return digits\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7ra0ig1j.jl:42\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp7ra0ig1j.jl:19\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7ra0ig1j.jl:42 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7ra0ig1j.jl:41\ntest set:\
    \ Error During Test at /tmp/tmp7ra0ig1j.jl:43\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmp7ra0ig1j.jl:19\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7ra0ig1j.jl:43 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7ra0ig1j.jl:41\ntest set:\
    \ Error During Test at /tmp/tmp7ra0ig1j.jl:44\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmp7ra0ig1j.jl:19\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmp7ra0ig1j.jl:44 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmp7ra0ig1j.jl:41\ntest set:\
    \ Error During Test at /tmp/tmp7ra0ig1j.jl:45\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7ra0ig1j.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if arr.length == 0\n        return Vector{String}()\n    \n    arr = sort(arr)\n\
    \    arr = reverse(arr)\n    arr = map(x -> \"One\"[x], arr)\n    \n    return\
    \ arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpipiey328.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpipiey328.jl:1\n\
    in expression starting at /tmp/tmpipiey328.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if !arr.isEmpty \n        arr = arr |> sort() |> reverse() |> map(x->\"\
    One\"..\"Nine\"[x]) |> Vector{String}\n    end\n    arr\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings containing the\
    \ names of the numbers that are between 1 and 9 inclusive.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpog7g_s4z.jl:24\nin expression starting at\
    \ /tmp/tmpog7g_s4z.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    if length(arr) == 0 \n        return Vector{String}()\n    end\n\
    \    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map(x\
    \ -> \"One\" <= x && x <= \"Nine\" ? x : error(\"Invalid number\"), arr)\n   \
    \ \n    return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise: Write a function that takes a\
    \ vector of integers and returns a vector of strings that represent each of the\
    \ numbers from 1 to 9 inclusive.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\"\
    , \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmponmnk0dg.jl:32\nin expression starting at\
    \ /tmp/tmponmnk0dg.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    if length(arr) == 0\n        return Vector{String}()\n    end\n\
    \    \n    arr = sort(arr)\n    \n    digits = Vector{Int64}()\n    \n    for\
    \ x in arr\n        if x < 1 || x > 9\n            continue\n        end\n   \
    \     push!(digits, x)\n    end\n    \n    digits = reverse(digits)\n    \n  \
    \  names = Vector{String}()\n    \n    for x in digits\n        push!(names, name(x))\n\
    \    end\n    \n    return names\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([1, -1, 55])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector of integers and returns the sum of the integers\
    \ squared. For example:\n>>> square_sum([1, 2, 3])\n25\n>>> square_sum([-1, 0,\
    \ 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>> square_sum([-1,\
    \ 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>>\
    \ square_sum([-1, 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>> square_sum([-1,\
    \ 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>>\
    \ square_sum([-1, 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>> square_sum([-1,\
    \ 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>>\
    \ square_sum([-1, 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>> square_sum([-1,\
    \ 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>>\
    \ square_sum([-1, 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>> square_sum([-1,\
    \ 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>>\
    \ square_sum([-1, 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>> square_sum([-1,\
    \ 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>> square_sum([-1, 0, 1])\n1\n>>>\
    \ square_sum([-1, 0, 1])\n1\n>>> square_sum([\nusing Test\n\n@testset begin\n\n\
    candidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi2oz8160.jl:45\nin expression starting at\
    \ /tmp/tmpi2oz8160.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if arr.length == 0\n        return Vector{String}()\n    \n    sorted_arr\
    \ = sort(arr)\n    reverse(sorted_arr)\n    \n    digits = Vector{String}()\n\
    \    for i in sorted_arr\n        push!(digits, names[i])\n    end\n    \n   \
    \ return digits\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns a vector of strings that represent each of\
    \ the numbers from 1 to 9 inclusive, sorted from smallest to largest.\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc6mjm6xr.jl:32\nin expression starting at\
    \ /tmp/tmpc6mjm6xr.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    if length(arr) == 0 \n        return Vector{String}() \n    else\
    \ \n        \n        arr = sort(arr)\n        \n        arr = reverse(arr)\n\
    \        \n        arr = map(x -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr)\n\
    \        \n        return arr\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the integers \nbetween 1 and 9 inclusive in descending order. For example,\
    \ if the input vector is [2, 1, 1, 4, 5, 8, 2, 3], the output vector should be\
    \ [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"\
    ].\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo5qr2gh0.jl:33\nin expression starting at\
    \ /tmp/tmpo5qr2gh0.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0 \n        return Vector{String}() \n    else \n  \
    \      arr = sort(arr) \n        arr = reverse(arr) \n        arr = map(x -> \"\
    One\" if x == 1 \n                else if x == 2 \n                    then \"\
    Two\" \n                    else if x == 3 \n                        then \"Three\"\
    \ \n                        else if x == 4 \n                            then\
    \ \"Four\" \n                            else if x == 5 \n                   \
    \             then \"Five\" \n                                else if x == 6 \n\
    \                                    then \"Six\" \n                         \
    \           else if x == 7 \n                                        then \"Seven\"\
    \ \n                                        else if x == 8 \n                \
    \                            then \"Eight\" \n                               \
    \             else \"Nine\" \n                    else x \n                end,\
    \ arr) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([1])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeyjkmdji.jl:24\nin expression starting at\
    \ /tmp/tmpeyjkmdji.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0 \n        return Vector{String}() \n    else \n  \
    \      arr = sort(arr) \n        arr = reverse(arr) \n        arr = map(x -> \"\
    One\"..\"Nine\"[x], arr) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns a vector of strings that represent\
    \ each of the integers \nin the vector in descending order.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpamfmgoe9.jl:28\nin expression starting at\
    \ /tmp/tmpamfmgoe9.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    if length(arr) == 0\n        return Vector{String}()\n    end\n\
    \    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map(x\
    \ -> \"One\"[x], arr)\n    \n    arr = map(x -> \"Two\"[x], arr)\n    \n    arr\
    \ = map(x -> \"Three\"[x], arr)\n    \n    arr = map(x -> \"Four\"[x], arr)\n\
    \    \n    arr = map(x -> \"Five\"[x], arr)\n    \n    arr = map(x -> \"Six\"\
    [x], arr)\n    \n    arr = map(x -> \"Seven\"[x], arr)\n    \n    arr = map(x\
    \ -> \"Eight\"[x], arr)\n    \n    arr = map(x -> \"Nine\"[x], arr)\n    \n  \
    \  return arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns a vector\
    \ of strings that represent each of the numbers from 1 to 9 inclusive.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1,\
    \ 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\"\
    , \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpracsrukc.jl:48\nin expression starting at\
    \ /tmp/tmpracsrukc.jl:48\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0 \n        return [] \n    else \n        arr = arr\
    \ |> sort() |> reverse() \n        arr = arr |> map((x -> \"One\"..\"Nine\"[x-1])\
    \ |> collect) \n        return arr \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    by_length([])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t\
    @test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"\
    Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphkm02ydt.jl:27\nin expression starting at\
    \ /tmp/tmphkm02ydt.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    arr = arr |> sort() |> reverse() |> map(x->\"One\"..\"Nine\"[x])\
    \ |> Vector{String}\n    \n    if arr.length == 0\n        Vector{String}()\n\
    \    else\n        arr\n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n\
    <code language=julia-1.5>\nby_length([1, -1, 55])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector of integers and returns a vector of strings\
    \ that represent each of the integers \nbetween 1 and 9 inclusive, with each digit\
    \ replaced by its corresponding name from \"One\", \"Two\", \"Three\", \"Four\"\
    , \n\"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nusing Test\n\n@testset\
    \ begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3])\
    \ == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"\
    One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\t@test(candidate([1,\
    \ -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2]) == [\"Three\", \"Two\"\
    , \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\", \"Eight\", \"Four\"])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpchd4xydg.jl:28\nin expression starting at\
    \ /tmp/tmpchd4xydg.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    if length(arr) == 0 \n        return Vector{String}()\n    end\n\
    \    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map(x\
    \ -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr)\n    \n    return arr\nend\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ a vector of strings that represent each of the numbers from 1 to 9 inclusive,\
    \ with the number represented as a string in \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzrnxfp7q.jl:32\nin expression starting at\
    \ /tmp/tmpzrnxfp7q.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    arr = sort(arr)\n    \n    names = Vector{String}(undef, 9)\n  \
    \  for i in 1:9\n        names[i] = \"One\"\n    end\n    \n    for i in arr\n\
    \        if i < 1 || i > 9\n            continue\n        end\n        \n    \
    \    j = i - 1\n        if j % 10 == 1\n            j = j / 10\n            names[j]\
    \ = \"One\"\n        end\n        if j % 10 == 2\n            j = j / 10\n   \
    \         names[j] = \"Two\"\n        end\n        if j % 10 == 3\n          \
    \  j = j / 10\n            names[j] = \"Three\"\n        end\n        if j % 10\
    \ == 4\n            j = j / 10\n            names[j] = \"Four\"\n        end\n\
    \        if j % 10 == 5\n            j = j / 10\n            names[j] = \"Five\"\
    \n        end\n        if j % 10 == 6\n            j = j / 10\n            names[j]\
    \ = \"Six\"\n        end\n        if j % 10 == 7\n            j = j / 10\n   \
    \         names[j] = \"Seven\"\n        end\n        if j % 10 == 8\n        \
    \    j = j / 10\n            names[j] = \"Eight\"\n        end\n        if j %\
    \ 10 == 9\n            j = j / 10\n            names[j] = \"Nine\"\n        end\n\
    \    end\n    \n    return names\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([1, -1, 55])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\nby_length([\nusing Test\n\
    \n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5,\
    \ 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ufk_tes.jl:73\nin expression starting at\
    \ /tmp/tmp6ufk_tes.jl:73\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    if length(arr) == 0 \n        return Vector{String}() \n    else\
    \ \n        arr = sort(arr)\n        arr = reverse(arr)\n        arr = map(x ->\
    \ \"One\" if x == 1 \n            else if x == 2 \n                \"Two\" \n\
    \            else if x == 3 \n                \"Three\" \n            else if\
    \ x == 4 \n                \"Four\" \n            else if x == 5 \n          \
    \      \"Five\" \n            else if x == 6 \n                \"Six\" \n    \
    \        else if x == 7 \n                \"Seven\" \n            else if x ==\
    \ 8 \n                \"Eight\" \n            else if x == 9 \n              \
    \  \"Nine\" \n            else \n                \"\" \n            , arr)\n \
    \       return arr\n    end\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1,\
    \ 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4,\
    \ 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5,\
    \ 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2,\
    \ 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2,\
    \ 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\nby_length([2, 1,\
    \ 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=juli\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp97jzbmt.jl:25\nin expression starting at\
    \ /tmp/tmpp97jzbmt.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    if arr.length == 0 \n        return Vector{String}()\n    end\n\
    \    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = replace(arr,\
    \ 1, \"One\")\n    arr = replace(arr, 2, \"Two\")\n    arr = replace(arr, 3, \"\
    Three\")\n    arr = replace(arr, 4, \"Four\")\n    arr = replace(arr, 5, \"Five\"\
    )\n    arr = replace(arr, 6, \"Six\")\n    arr = replace(arr, 7, \"Seven\")\n\
    \    arr = replace(arr, 8, \"Eight\")\n    arr = replace(arr, 9, \"Nine\")\n \
    \   \n    return arr\nend\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\
    \t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpy_xyeei4.jl:45\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpy_xyeei4.jl:20\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpy_xyeei4.jl:45 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpy_xyeei4.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpy_xyeei4.jl:46\n  Test threw exception\n  Expression:\
    \ candidate(Vector{Int64}([])) == Vector{String}([])\n  type Array has no field\
    \ length\n  Stacktrace:\n   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n \
    \  [2] by_length(arr::Vector{Int64})\n     @ Main /tmp/tmpy_xyeei4.jl:20\n   [3]\
    \ macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpy_xyeei4.jl:46 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpy_xyeei4.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpy_xyeei4.jl:47\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  type Array has no field length\n  Stacktrace:\n\
    \   [1] getproperty\n     @ ./Base.jl:42 [inlined]\n   [2] by_length(arr::Vector{Int64})\n\
    \     @ Main /tmp/tmpy_xyeei4.jl:20\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [4] macro expansion\n     @ /tmp/tmpy_xyeei4.jl:47 [inlined]\n\
    \   [5] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [6] top-level scope\n     @ /tmp/tmpy_xyeei4.jl:44\ntest set:\
    \ Error During Test at /tmp/tmpy_xyeei4.jl:48\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy_xyeei4.jl:42\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    if length(arr) == 0 \n        return [] \n    else \n        \n\
    \        sorted_arr = sort(arr)\n        \n        sorted_arr_reversed = reverse(sorted_arr)\n\
    \        \n        sorted_arr_reversed_str = \"\".join(map(str, sorted_arr_reversed))\n\
    \        \n        sorted_arr_reversed_str = replace(sorted_arr_reversed_str,\
    \ \"0\", \"One\")\n        sorted_arr_reversed_str = replace(sorted_arr_reversed_str,\
    \ \"1\", \"Two\")\n        sorted_arr_reversed_str = replace(sorted_arr_reversed_str,\
    \ \"2\", \"Three\")\n        sorted_arr_reversed_str = replace(sorted_arr_reversed_str,\
    \ \"3\", \"Four\")\n        sorted_arr_reversed_str = replace(sorted_arr_reversed_str,\
    \ \"4\", \"Five\")\n        sorted_arr_reversed_str = replace(sorted_arr_reversed_str,\
    \ \"5\", \"Six\")\n        sorted_arr_reversed_str = replace(sorted_arr_reversed_str,\
    \ \"6\", \"Seven\")\n        sorted_arr_reversed_str = replace(sorted_arr_reversed_str,\
    \ \"7\", \"Eight\")\n        sorted_arr_reversed_str = replace(sorted_arr_reversed_str,\
    \ \"8\", \"Nine\")\n        \n        return sorted_arr_reversed_str\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns a vector of strings that represent each of the numbers from 1 to\
    \ 9 inclusive, with the corresponding name for each number in the vector. For\
    \ example, if the vector is [2, 1, 1, 4, 5, 8, 2, 3], the function should return\
    \ [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\"]. Do not use the built-in function map!.\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd_37k91v.jl:43\nin expression starting at\
    \ /tmp/tmpd_37k91v.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0 \n        return Vector{String}()\n    end\n    \n\
    \    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map(x -> \"\
    One\" <= x && x <= \"Nine\" ? x : error(\"Invalid input\"), arr)\n    \n    return\
    \ arr\nend\n</cell>\n<code language=julia-1.5>\nby_length([])\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    by_length([1, -1, 55])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns a vector of strings containing the names of\
    \ the numbers that are between 1 and 9 inclusive.\nusing Test\n\n@testset begin\n\
    \ncandidate = by_length;\n\t@test(candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\"\
    , \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{String}([]))\n\t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1,\
    \ -1, 3, 2]) == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) ==\
    \ [\"Nine\", \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph9x1nxif.jl:31\nin expression starting at\
    \ /tmp/tmph9x1nxif.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    \n    if length(arr) == 0 \n        return Vector{String}()\n    end\n\
    \    \n    arr = sort(arr)\n    \n    arr = reverse(arr)\n    \n    arr = map(x\
    \ -> \"One\" <= x && x <= \"Nine\" ? x : \"\", arr)\n    \n    return arr\nend\n\
    using Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpy80uf3ri.jl:37\n  Test threw exception\n\
    \  Expression: candidate([2, 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  MethodError: no method\
    \ matching isless(::String, ::Int64)\n  Closest candidates are:\n    isless(::AbstractString,\
    \ !Matched::AbstractString) at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:344\n\
    \    isless(!Matched::AbstractFloat, ::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:186\n\
    \    isless(!Matched::Real, ::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:430\n\
    \    ...\n  Stacktrace:\n    [1] <(x::String, y::Int64)\n      @ Base ./operators.jl:352\n\
    \    [2] <=(x::String, y::Int64)\n      @ Base ./operators.jl:401\n    [3] (::var\"\
    #1#2\")(x::Int64)\n      @ Main /tmp/tmpy80uf3ri.jl:28\n    [4] iterate\n    \
    \  @ ./generator.jl:47 [inlined]\n    [5] _collect\n      @ ./array.jl:744 [inlined]\n\
    \    [6] collect_similar\n      @ ./array.jl:653 [inlined]\n    [7] map\n    \
    \  @ ./abstractarray.jl:2867 [inlined]\n    [8] by_length(arr::Vector{Int64})\n\
    \      @ Main /tmp/tmpy80uf3ri.jl:28\n    [9] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [10] macro expansion\n      @ /tmp/tmpy80uf3ri.jl:37 [inlined]\n\
    \   [11] macro expansion\n      @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [12] top-level scope\n      @ /tmp/tmpy80uf3ri.jl:36\ntest set:\
    \ Error During Test at /tmp/tmpy80uf3ri.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([1, -1, 55]) == [\"One\"]\n  MethodError: no method matching isless(::String,\
    \ ::Int64)\n  Closest candidates are:\n    isless(::AbstractString, !Matched::AbstractString)\
    \ at /shared/centos7/julia/1.7.3/share/julia/base/strings/basic.jl:344\n    isless(!Matched::AbstractFloat,\
    \ ::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:186\n \
    \   isless(!Matched::Real, ::Real) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:430\n\
    \    ...\n  Stacktrace:\n    [1] <(x::St"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy80uf3ri.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a vector of integers, sort the integers that are between\
    \ 1 and 9 inclusive,\n    reverse the resulting vector, and then replace each\
    \ digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n   \
    \ >>> by_length([2, 1, 1, 4, 5, 8, 2, 3])\n    [\"Eight\", \"Five\", \"Four\"\
    , \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the vector is\
    \ empty, return an empty vector:\n    >>> by_length([])\n    []\n    \n      If\
    \ the vector has any strange number ignore it:\n    >>> by_length([1, -1, 55])\n\
    \    [\"One\"]\n    \"\"\"\nfunction by_length(arr::Vector{Int64})::Vector{String}\
    \ \n    if length(arr) == 0 \n        return [] \n    end\n    \n    sorted_arr\
    \ = sort(arr)\n    \n    sorted_arr_reverse = reverse(sorted_arr)\n    \n    sorted_arr_reverse.map!(x->\"\
    One\"..\"Nine\"[x])\n    \n    return sorted_arr_reverse\nend\n</cell>\n<code\
    \ language=julia-1.5>\nby_length([2, 1, 1, 4, 5, 8, 2, 3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the vector\
    \ in reverse order, but with each digit replaced by its corresponding name from\
    \ \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\"\
    , \"Nine\".\nusing Test\n\n@testset begin\n\ncandidate = by_length;\n\t@test(candidate([2,\
    \ 1, 1, 4, 5, 8, 2, 3]) == [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\"\
    , \"Two\", \"One\", \"One\"])\n\t@test(candidate(Vector{Int64}([])) == Vector{String}([]))\n\
    \t@test(candidate([1, -1, 55]) == [\"One\"])\n\t@test(candidate([1, -1, 3, 2])\
    \ == [\"Three\", \"Two\", \"One\"])\n\t@test(candidate([9, 4, 8]) == [\"Nine\"\
    , \"Eight\", \"Four\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0mqjx_9a.jl:31\nin expression starting at\
    \ /tmp/tmp0mqjx_9a.jl:31\n"
  exit_code: 1
  status: SyntaxError
