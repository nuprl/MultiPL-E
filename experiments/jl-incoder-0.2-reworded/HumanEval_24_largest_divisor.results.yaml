language: jl
name: HumanEval_24_largest_divisor
results:
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 then return 1\n    else if n%2==0 then return n//2\n    else return\
    \ largest_divisor(n//2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n positive\
    \ integers greater than or equal to n. For example, first_n_positive(10) should\
    \ return [10, 11, 12, 13, 14, 15].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmevq8xih.jl:6\nin expression starting at /tmp/tmpmevq8xih.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp648cuxio.jl:7\nin expression starting at /tmp/tmp648cuxio.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\n\
    \        if n % 2 == 0 \n            largest_divisor(n/2) \n        else \n  \
    \          largest_divisor(n/2) \n        end\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    @time largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of divisors of n that are less than or equal to n.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbra9s6nq.jl:17\nin expression starting at\
    \ /tmp/tmpbra9s6nq.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4ievznsy.jl:12\nin expression starting at\
    \ /tmp/tmp4ievznsy.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 then return 1\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.0>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpb203_6ve.jl:6\nin expression starting at /tmp/tmpb203_6ve.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the first n prime numbers. \n\
    Hint: Use a for loop and a prime number test.\nusing Test\n\n@testset begin\n\n\
    candidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmh2130v5.jl:12\nin expression starting at\
    \ /tmp/tmpmh2130v5.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of divisors of n\
    \ that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3gtssqmd.jl:11\nin expression starting at\
    \ /tmp/tmp3gtssqmd.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n        if\
    \ n%2==0\n            largest_divisor(n/2)\n        else\n            largest_divisor(n/2)\
    \ \n        end\n    end\nend\n</cell>\n<code language=julia-1.4>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of a given number. For example, for the number 15, there are two divisors: 5\
    \ and 3.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkpzxv13k.jl:17\nin expression starting at\
    \ /tmp/tmpkpzxv13k.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n        if\
    \ n%2==0\n            largest_divisor(n/2)\n        end\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of divisors of a\
    \ given number. For example, for the number 12, the number of divisors is 3.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpto13xr56.jl:15\nin expression starting at\
    \ /tmp/tmpto13xr56.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxtfjm595.jl:12\nin expression starting at\
    \ /tmp/tmpxtfjm595.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp2c6bhzj.jl:12\nin expression starting at\
    \ /tmp/tmpp2c6bhzj.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that finds the smallest number that divides n evenly,\
    \ larger than n\nHint: use largest_divisor\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzf0uvpo0.jl:12\nin expression starting at\
    \ /tmp/tmpzf0uvpo0.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. \nThe factorial of a number $n$ is defined as $n! = n * (n - 1)\
    \ * (n - 2) * ... * 1$. \nFor example, 5! = 5 x 4 x 3 x 2 x 1 = 120. \nWrite a\
    \ function that returns the factorial of a given number $n$. \nThe factorial of\
    \ a number $n$ is defined as $n! = n * (n - 1) * (n - 2) * ... * 1$. \nFor example,\
    \ 5! = 5 x 4 x 3 x 2 x 1 = 120. \nHint: Use a while loop to solve this problem.\
    \ \nHint: Use a for loop to solve this problem. \nHint: Use a recursive function\
    \ to solve this problem. \nHint: Use a while loop to solve this problem. \nHint:\
    \ Use a for loop to solve this problem. \nHint: Use a recursive function to solve\
    \ this problem. \nHint: Use a while loop to solve this problem. \nHint: Use a\
    \ for loop to solve this problem. \nHint: Use a recursive function to solve this\
    \ problem. \nHint: Use a while loop to solve this problem. \nHint: Use a for loop\
    \ to solve this problem. \nHint: Use a recursive function to solve this problem.\
    \ \nHint: Use a while loop to solve this problem. \nHint: Use a for loop to solve\
    \ this problem. \nHint: Use a recursive function to solve this problem. \nHint:\
    \ Use a while loop to solve this problem. \nHint: Use a for loop to solve this\
    \ problem. \nHint: Use a recursive function to solve this problem. \nHint: Use\
    \ a while loop to solve this problem. \nHint: Use a for loop to solve this problem.\
    \ \nHint: Use a recursive function to solve this problem. \nHint: Use a while\
    \ loop to solve this problem. \nHint: Use a for loop to solve this problem. \n\
    Hint: Use a recursive function to solve this problem. \nHint: Use a while loop\
    \ to solve this problem. \nHint: Use a for loop to solve this problem. \nHint:\
    \ Use a recursive function to solve this problem. \nHint: Use a while loop to\
    \ solve this problem. \nHint: Use a for loop to solve this problem. \nHint: Use\
    \ a recursive function to solve this problem. \nHint\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb7en_4g4.jl:7\nin expression starting at /tmp/tmpb7en_4g4.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(100)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjsyej5jl.jl:6\nin expression starting at /tmp/tmpjsyej5jl.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that finds the smallest number that divides\
    \ n evenly, larger than n\n    >>> smallest_divisor(15)\n    3\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq1u8cjc0.jl:11\nin expression starting at\
    \ /tmp/tmpq1u8cjc0.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of a given number\
    \ n. For example, for n = 15, there are 4 divisors: 1, 2, 3, and 5.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2u0ylmqh.jl:12\nin expression starting at\
    \ /tmp/tmp2u0ylmqh.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that computes the factorial of a\
    \ given number. For example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpk8rk13ih.jl:6\nin expression starting at /tmp/tmpk8rk13ih.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\n@time largest_divisor(15)\n</cell>\n\
    <text>\nExercise 4\nWrite a function that returns the smallest number that divides\
    \ n evenly, smaller than n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6w901jxu.jl:12\nin expression starting at\
    \ /tmp/tmp6w901jxu.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that returns the smallest number\
    \ that divides n evenly, smaller than n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxezrofe2.jl:12\nin expression starting at\
    \ /tmp/tmpxezrofe2.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of a given number. For example, for the number 12, there are two divisors: 2\
    \ and 3. The function should return the number of divisors.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5fxgzuwo.jl:7\nin expression starting at /tmp/tmp5fxgzuwo.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfsyjoluy.jl:6\nin expression starting at /tmp/tmpfsyjoluy.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 then return n\n    else if n%2==0 then return largest_divisor(n/2)\n\
    \    else return largest_divisor(n/2) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of divisors of a given number n. For example, for n = 10, the function\
    \ should return 3.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnb7t6wuc.jl:6\nin expression starting at /tmp/tmpnb7t6wuc.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else \n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 7: Write a function that returns the smallest number that divides n evenly,\
    \ larger than n\n    >>> smallest_divisor(15)\n    3\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4p0tfows.jl:12\nin expression starting at\
    \ /tmp/tmp4p0tfows.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0\n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4zmx9x93.jl:7\nin expression starting at /tmp/tmp4zmx9x93.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that finds the largest prime factor\
    \ of a given number. For example, for the number 12, you should return 2. For\
    \ this problem, you should use the sieve of Eratosthenes. A prime number is a\
    \ natural number greater than 1 that has no positive divisors other than 1 and\
    \ itself.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpofbg1p3q.jl:6\nin expression starting at /tmp/tmpofbg1p3q.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that returns the largest number\
    \ that divides n evenly, smaller than n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr1zhduu8.jl:12\nin expression starting at\
    \ /tmp/tmpr1zhduu8.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else if n%2==0 \n        return largest_divisor(n/2)\
    \ \n    else \n        return largest_divisor(n/2) + 1 \nend \n</cell>\n<code\
    \ language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of divisors of n that are less than or equal\
    \ to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjqt6ap31.jl:8\nin expression starting at /tmp/tmpjqt6ap31.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@code_warntype largest_divisor(15)\n\
    </cell>\n<text>\nExercise 5\nWrite a function that returns the factorial of a\
    \ given number\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsuaexgvd.jl:12\nin expression starting at\
    \ /tmp/tmpsuaexgvd.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 1 \n        return 1 \n    else if n % 2 == 0 \n        return\
    \ largest_divisor(n/2) \n    else \n        return largest_divisor(3*n+1) + 1\
    \ \nend\n</cell>\n<code language=julia-1.0>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx2wez9lt.jl:8\nin expression starting at /tmp/tmpx2wez9lt.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of divisors of a\
    \ given number n. \nFor example, for n = 15, the function should return 3.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6_h3l0oc.jl:12\nin expression starting at\
    \ /tmp/tmp6_h3l0oc.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    if n%2==0 then return\
    \ n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.4>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6zjo1441.jl:6\nin expression starting at /tmp/tmp6zjo1441.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the smallest number that divides n evenly,\
    \ smaller than n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr8rb6gi3.jl:12\nin expression starting at\
    \ /tmp/tmpr8rb6gi3.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(100)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number. For example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpe70tx84d.jl:6\nin expression starting at /tmp/tmpe70tx84d.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    if n%2==0 then return\
    \ n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.3>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the smallest number that divides n evenly, smaller than n\nHint: use largest_divisor(n)\
    \ function\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpecgkorsb.jl:6\nin expression starting at /tmp/tmpecgkorsb.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1) +\
    \ largest_divisor(n-2) \nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. \nFor example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpadjwvliz.jl:11\nin expression starting at\
    \ /tmp/tmpadjwvliz.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\n\
    \        if n%2==0 \n            largest_divisor(n/2)\n        else \n       \
    \     largest_divisor(n/2)+1\n        end\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the factorial of a given number. For example, factorial(5) = 5 \xD7 4 \xD7 3\
    \ \xD7 2 \xD7 1\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm4nhte25.jl:17\nin expression starting at\
    \ /tmp/tmpm4nhte25.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the factorial of a\
    \ given number. \nFor a given number n, find the factorial of n\n    >>> factorial(5)\n\
    \    120\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt72ibfz_.jl:6\nin expression starting at /tmp/tmpt72ibfz_.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp65_dzr3b.jl:6\nin expression starting at /tmp/tmp65_dzr3b.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.0>\n@time largest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. \nHint: Use a recursive function.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6y1qrq3a.jl:11\nin expression starting at\
    \ /tmp/tmp6y1qrq3a.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 0 \n        0\n    else\n        largest_divisor(n / 2)\n    \
    \    if n % 2 == 0\n            largest_divisor(n / 2)\n        else\n       \
    \     largest_divisor(n / 2)\n        end\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the factorial of a given number. \nFor example,\
    \ factorial(5) = 5 x 4 x 3 x 2 x 1 = 120\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf26hpkdu.jl:17\nin expression starting at\
    \ /tmp/tmpf26hpkdu.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n\
    <text>\nExercise: Write a function that finds the largest number that divides\
    \ n evenly, smaller than n\nHint: Use a recursive function\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmfdl_36w.jl:12\nin expression starting at\
    \ /tmp/tmpmfdl_36w.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n prime numbers.\
    \ \nHint: Use a while loop and a prime number sieve.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpml5il9sb.jl:7\nin expression starting at /tmp/tmpml5il9sb.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcgmt87xi.jl:12\nin expression starting at\
    \ /tmp/tmpcgmt87xi.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo2ucippd.jl:12\nin expression starting at\
    \ /tmp/tmpo2ucippd.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpco6iwtvu.jl:12\nin expression starting at\
    \ /tmp/tmpco6iwtvu.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\n\
    \        if n%2==0 \n            return n \n        else \n            return\
    \ largest_divisor(n//2)\nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd3zjdcr8.jl:15\nin expression starting at\
    \ /tmp/tmpd3zjdcr8.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number. \nFor example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg3imxhno.jl:6\nin expression starting at /tmp/tmpg3imxhno.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.0>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpk8r89pou.jl:6\nin expression starting at /tmp/tmpk8r89pou.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<text>\nExercise 9\nWrite a function that returns the factorial\
    \ of a given number. For example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp43y0scao.jl:12\nin expression starting at\
    \ /tmp/tmp43y0scao.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first n prime numbers. \nHint: use\
    \ the function primes(n) from the package Primes.jl.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd8bs8axk.jl:12\nin expression starting at\
    \ /tmp/tmpd8bs8axk.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp65_dzr3b.jl:6\nin expression starting at /tmp/tmp65_dzr3b.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1 \n    else \n        largest_divisor(n-1) + 1 \nend\n\
    </cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the smallest number that divides n evenly,\
    \ smaller than n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2mszlk94.jl:11\nin expression starting at\
    \ /tmp/tmp2mszlk94.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    if n%2==0 then return\
    \ n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of divisors of a given number n. For example, for the number 12,\
    \ the number of divisors is 3.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzmrfse9c.jl:6\nin expression starting at /tmp/tmpzmrfse9c.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n%2==0 then return n\n    else return largest_divisor(n/2)\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of a given number.\
    \ For example, for the number 15, the number of divisors is 3.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmped9kv007.jl:6\nin expression starting at /tmp/tmped9kv007.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1) +\
    \ largest_divisor(n-2) \n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the smallest number\
    \ that divides n evenly, smaller than n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsfi74k1j.jl:12\nin expression starting at\
    \ /tmp/tmpsfi74k1j.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9tvksqej.jl:12\nin expression starting at\
    \ /tmp/tmp9tvksqej.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a given number. \n\
    For example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy52772xb.jl:12\nin expression starting at\
    \ /tmp/tmpy52772xb.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.0>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that finds the largest prime factor\
    \ of a given number. \nFor example, given n = 24, the largest prime factor is\
    \ 5.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpoz_9c1ea.jl:6\nin expression starting at /tmp/tmpoz_9c1ea.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1) \nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of divisors of n\
    \ that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgkdbes7z.jl:7\nin expression starting at /tmp/tmpgkdbes7z.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0\n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1)\n    end\nend\n</cell>\n<code language=julia-1.0>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the smallest number\
    \ that divides n evenly, smaller than n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwwhzpcaw.jl:7\nin expression starting at /tmp/tmpwwhzpcaw.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n\
    <text>\nExercise: Write a function that returns the largest number that divides\
    \ n evenly, smaller than n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm7vbx9vs.jl:12\nin expression starting at\
    \ /tmp/tmpm7vbx9vs.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the smallest number that divides n evenly,\
    \ smaller than n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqgp8jb8j.jl:12\nin expression starting at\
    \ /tmp/tmpqgp8jb8j.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the first n prime numbers.\
    \ \nHint: use an iterator to generate prime numbers. \nHint: use an iterator to\
    \ generate prime numbers. \nHint: use an iterator to generate prime numbers. \n\
    Hint: use an iterator to generate prime numbers. \nHint: use an iterator to generate\
    \ prime numbers. \nHint: use an iterator to generate prime numbers. \nHint: use\
    \ an iterator to generate prime numbers. \nHint: use an iterator to generate prime\
    \ numbers. \nHint: use an iterator to generate prime numbers. \nHint: use an iterator\
    \ to generate prime numbers. \nHint: use an iterator to generate prime numbers.\
    \ \nHint: use an iterator to generate prime numbers. \nHint: use an iterator to\
    \ generate prime numbers. \nHint: use an iterator to generate prime numbers. \n\
    Hint: use an iterator to generate prime numbers. \nHint: use an iterator to generate\
    \ prime numbers. \nHint: use an iterator to generate prime numbers. \nHint: use\
    \ an iterator to generate prime numbers. \nHint: use an iterator to generate prime\
    \ numbers. \nHint: use an iterator to generate prime numbers. \nHint: use an iterator\
    \ to generate prime numbers. \nHint: use an iterator to generate prime numbers.\
    \ \nHint: use an iterator to generate prime numbers. \nHint: use an iterator to\
    \ generate prime numbers. \nHint: use an iterator to generate prime numbers. \n\
    Hint: use an iterator to generate prime numbers. \nHint: use an iterator to generate\
    \ prime numbers. \nHint: use an iterator to generate prime numbers. \nHint: use\
    \ an iterator to generate prime numbers. \nHint: use an iterator to generate prime\
    \ numbers. \nHint: use an iterator to generate prime numbers. \nHint: use an iterator\
    \ to generate prime numbers. \nHint: use an iterator to generate prime numbers.\
    \ \nHint: use an iterator to generate prime numbers. \nHint: use an iterator to\
    \ generate prime numbers. \nHint: use an iterator to generate prime numbers. \n\
    Hint: use an iterator to generate prime numbers. \nHint: use an iterator to generate\
    \ prime numbers. \nHint: use an iterator to generate prime numbers. \nHint: use\
    \ an iterator to generate prime numbers. \nHint: use an iterator to generate prime\
    \ \nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp96vqd6h_.jl:7\nin expression starting at /tmp/tmp96vqd6h_.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 0 \n        0\n    else\n        largest_divisor(n-1) + n / largest_divisor(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(100)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the first n prime numbers. \n\
    Hint: use the sieve of Eratosthenes (https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes)\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppp_a9ddl.jl:11\nin expression starting at\
    \ /tmp/tmppp_a9ddl.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the factorial\
    \ of a given number. \nFor a given number n, find the factorial of n\n    >>>\
    \ factorial(5)\n    120\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr2bxmz4f.jl:12\nin expression starting at\
    \ /tmp/tmpr2bxmz4f.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then return n \n    else \n        largest_divisor(n\
    \ / 2)\n    end\nend\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of n that are smaller than n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp80j7j876.jl:7\nin expression starting at /tmp/tmp80j7j876.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\n\
    \        if n%2==0 \n            largest_divisor(n/2)\n        else \n       \
    \     largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number. For example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp35gr0jib.jl:15\nin expression starting at\
    \ /tmp/tmp35gr0jib.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps1xcbfc3.jl:12\nin expression starting at\
    \ /tmp/tmps1xcbfc3.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 1\n        return n\n    \n    largest_divisor = largest_divisor(n\
    \ / 2)\n    if n % 2 == 0\n        return largest_divisor\n    else\n        return\
    \ largest_divisor + 1\nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(100)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of a given number n. \nFor example, for n = 10, the function should return 3.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeolel490.jl:15\nin expression starting at\
    \ /tmp/tmpeolel490.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the smallest number that divides n evenly,\
    \ smaller than n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppi7pk_82.jl:12\nin expression starting at\
    \ /tmp/tmppi7pk_82.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n%2==0 then return n\n    else return largest_divisor(n/2)\n\
    end\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a given number. For\
    \ example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptl7w34pk.jl:6\nin expression starting at /tmp/tmptl7w34pk.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.0>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. For example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8cmbj463.jl:6\nin expression starting at /tmp/tmp8cmbj463.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@code_warntype largest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of a given number. For example, for the number 12, there are 3 divisors: 1,\
    \ 2, and 3.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t\
    @test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) ==\
    \ 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyny24x6x.jl:12\nin expression starting at\
    \ /tmp/tmpyny24x6x.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.0>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the factorial of a given number.\
    \ \nThe factorial of a number $n$ is defined as:\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn5w3zc4g.jl:11\nin expression starting at\
    \ /tmp/tmpn5w3zc4g.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1) \n\
    \        if n%2==0 \n            then largest_divisor(n/2) \n            else\
    \ largest_divisor(n/2) \n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of divisors of n that are less than or equal to n.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpibrpgnfk.jl:11\nin expression starting at\
    \ /tmp/tmpibrpgnfk.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n@time largest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that finds the smallest number that divides\
    \ n evenly, larger than n\nHint: Use a recursive function\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptsbg1phm.jl:12\nin expression starting at\
    \ /tmp/tmptsbg1phm.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the factorial of a given number. \nThe factorial of a number $n$ is defined\
    \ as:\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfltydno7.jl:8\nin expression starting at /tmp/tmpfltydno7.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.0>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number. \nFor a given number n, find the factorial of n\n    >>> factorial(5)\n\
    \    120\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_v4y69v9.jl:6\nin expression starting at /tmp/tmp_v4y69v9.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 then return 1\n    else if n%2==0 then return n//2\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.0>\n@time largest_divisor(150)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number. \nThe factorial of a number $n$ is defined as $n! = n  (n-1) \
    \ (n-2)  ...  1  $. \nFor example, 5! = 5 x 4 x 3 x 2 x 1 = 120.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_gcfbamx.jl:6\nin expression starting at /tmp/tmp_gcfbamx.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n%2==0 then return n\n    else return largest_divisor(n/2)\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 5\nWrite a function that returns the number of divisors of a given number\
    \ n. For example, for the number 12, there are two divisors: 2 and 3.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr8u4vept.jl:6\nin expression starting at /tmp/tmpr8u4vept.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else if n%2==0 \n        return largest_divisor(n/2)\
    \ \n    else \n        return largest_divisor(n/2) + 1 \nend \n</cell>\n<code\
    \ language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that finds the smallest number that divides n evenly, smaller than\
    \ n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcb4_l4lv.jl:8\nin expression starting at /tmp/tmpcb4_l4lv.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the largest number that divides n evenly,\
    \ smaller than n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwiqjo06j.jl:12\nin expression starting at\
    \ /tmp/tmpwiqjo06j.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the smallest number that divides n evenly,\
    \ smaller than n\nHint: use largest_divisor(n) function\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0qim159n.jl:12\nin expression starting at\
    \ /tmp/tmp0qim159n.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    if n%2==0 then return\
    \ n\n    \n    largest_divisor(n/2)\n    \nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(100)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of divisors of a given number n. \nFor example, for n = 10,\
    \ the function should return 3.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprwkwjk3x.jl:6\nin expression starting at /tmp/tmprwkwjk3x.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ divisors of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptnxvmq6s.jl:12\nin expression starting at\
    \ /tmp/tmptnxvmq6s.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 5\nWrite a function that returns\
    \ the number of divisors of a given number. For example, for the number 15, the\
    \ number of divisors is 3.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyiiu635m.jl:8\nin expression starting at /tmp/tmpyiiu635m.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes an array of numbers\
    \ and returns the sum of the squares of the numbers.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpteqyln8w.jl:12\nin expression starting at\
    \ /tmp/tmpteqyln8w.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\n@time largest_divisor(15)\n</cell>\n\
    <text>\nExercise: Write a function that finds the largest prime factor of a given\
    \ number. Hint: use the sieve of Eratosthenes algorithm.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0f8oujls.jl:12\nin expression starting at\
    \ /tmp/tmp0f8oujls.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else \n        return largest_divisor(n-1)\
    \ + n\nend\n</cell>\n<code language=julia-1.0>\n@time largest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the first n prime numbers. \n\
    Hint: use primes() from Primes.jl\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t\
    @test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvvsp05f2.jl:11\nin expression starting at\
    \ /tmp/tmpvvsp05f2.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    if n%2==0 then return\
    \ n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the smallest number that is divisible by all numbers from 1 to n. For example,\
    \ smallest_divisor(15) should return 15. Make sure your code works with negative\
    \ numbers as well.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpaqe4k98j.jl:6\nin expression starting at /tmp/tmpaqe4k98j.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n%2==0 then return n\n    else return largest_divisor(n/2)\n\
    end\n</cell>\n<code language=julia-1.4>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a given number. \n\
    For example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp34qlin8h.jl:6\nin expression starting at /tmp/tmp34qlin8h.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1) \n    end\nend\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of a given number. For example, for the number 12, there are 2 divisors: 2 and\
    \ 3. Note that 1 is not a divisor of 12. Write a recursive function that computes\
    \ the number of divisors of a given number.\nusing Test\n\n@testset begin\n\n\
    candidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzgdih788.jl:7\nin expression starting at /tmp/tmpzgdih788.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9tvksqej.jl:12\nin expression starting at\
    \ /tmp/tmp9tvksqej.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a given number. \n\
    For example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcqvkkhrb.jl:12\nin expression starting at\
    \ /tmp/tmpcqvkkhrb.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of divisors of n\
    \ that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3h5q89ey.jl:11\nin expression starting at\
    \ /tmp/tmp3h5q89ey.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else if n%2==0 \n        largest_divisor(n/2)\n\
    \    else \n        largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.0>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the smallest number that divides n evenly, smaller than n.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk13pecfo.jl:8\nin expression starting at /tmp/tmpk13pecfo.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2) + 1\nend\n</cell>\n<code language=julia-1.3>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the smallest number that divides n evenly, smaller than n.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgff3_qt4.jl:8\nin expression starting at /tmp/tmpgff3_qt4.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<text>\nExercise 10\nWrite a function that returns the first n prime\
    \ numbers. \nThe function should take one parameter, n, which represents the number\
    \ of prime numbers to return.\nThe function should return a list of prime numbers,\
    \ where each number in the list is a prime number between 2 and n (inclusive).\n\
    For example, if the function were called with n = 10, the function should return\
    \ [2, 3, 4, 5, 7, 11, 13, 17, 19]\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t\
    @test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8rtcz4ug.jl:12\nin expression starting at\
    \ /tmp/tmp8rtcz4ug.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0 \n    else if n%2==0 then return n \n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.0>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 7: Write a function that returns the smallest number\
    \ that divides n evenly, smaller than n\n    >>> smallest_divisor(15)\n    3\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t\
    @test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) ==\
    \ 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwzvanbh3.jl:6\nin expression starting at /tmp/tmpwzvanbh3.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.4>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the smallest number that divides n evenly, larger than n\nHint: use largest_divisor(n)\
    \ function\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_1u7zaw3.jl:8\nin expression starting at /tmp/tmp_1u7zaw3.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj5is3k0u.jl:8\nin expression starting at /tmp/tmpj5is3k0u.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number. For example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdydf3bl8.jl:6\nin expression starting at /tmp/tmpdydf3bl8.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpj6v_dkmm.jl:6\nin expression starting at /tmp/tmpj6v_dkmm.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\n\
    \        if n%2==0 \n            return n \n        else \n            return\
    \ largest_divisor(n//2)\nend\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of a given number. For example, for the number 12, there are two divisors: 2\
    \ and 3. Write a function that returns the number of divisors of a given number\
    \ n. For example, for the number 12, there are two divisors: 2 and 3.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpprc_nvuj.jl:15\nin expression starting at\
    \ /tmp/tmpprc_nvuj.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the smallest number that divides\
    \ n evenly, larger than n\n    >>> smallest_divisor(15)\n    3\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0eigckql.jl:11\nin expression starting at\
    \ /tmp/tmp0eigckql.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2) + 1\nend\n</cell>\n<code language=julia-1.3>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpst_hgnrc.jl:8\nin expression starting at /tmp/tmpst_hgnrc.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else \n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of divisors of n\
    \ that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeoikaetm.jl:12\nin expression starting at\
    \ /tmp/tmpeoikaetm.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@code_warntype largest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the largest number\
    \ that divides n evenly, smaller than n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppkz67401.jl:12\nin expression starting at\
    \ /tmp/tmppkz67401.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbzvjxjvl.jl:12\nin expression starting at\
    \ /tmp/tmpbzvjxjvl.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the smallest number that divides n evenly, smaller than n.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpve79_72f.jl:8\nin expression starting at /tmp/tmpve79_72f.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else \n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the largest number that divides n evenly,\
    \ smaller than n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo66xd0zg.jl:12\nin expression starting at\
    \ /tmp/tmpo66xd0zg.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\n\
    \        if n%2==0 \n            return n\n        else \n            return largest_divisor(n/2)\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ow8v8wb.jl:15\nin expression starting at\
    \ /tmp/tmp9ow8v8wb.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n@time largest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of divisors of a\
    \ given number n. For example, for the number 15, there are 4 divisors: 1, 2,\
    \ 3, and 5.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t\
    @test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) ==\
    \ 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_hpb7s2m.jl:12\nin expression starting at\
    \ /tmp/tmp_hpb7s2m.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppt34k0bg.jl:12\nin expression starting at\
    \ /tmp/tmppt34k0bg.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1 \n    else \n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the largest number that divides\
    \ n evenly, smaller than n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp716rt8mg.jl:12\nin expression starting at\
    \ /tmp/tmp716rt8mg.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<text>\nExercise 7\nWrite a function that checks if a given number\
    \ is prime. Hint: you can use the primes function from the Julia standard library.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6xpq9hdp.jl:12\nin expression starting at\
    \ /tmp/tmp6xpq9hdp.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(100)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the first n prime numbers. \nHint: use the sieve of Eratosthenes algorithm\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr0qq3iob.jl:8\nin expression starting at /tmp/tmpr0qq3iob.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.5>\n@time largest_divisor(150)\n\
    </cell>\n<text>\nProblem 7: Find the largest prime factor of a number\nThe prime\
    \ factors of a number are all the numbers less than or equal to it except 1 and\
    \ itself. \nFor example, 6 is a prime factor of 36, and 12 is a prime factor of\
    \ 60.\nThe largest prime factor is 60.\nThe smallest prime factor is 2.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp11g9n60s.jl:11\nin expression starting at\
    \ /tmp/tmp11g9n60s.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n==1 then return 1\n    else if n%2==0\
    \ then return largest_divisor(n/2)\n    else return largest_divisor(n/2) + 1\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiromn9hx.jl:6\nin expression starting at /tmp/tmpiromn9hx.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<text>\nExercise 10\nWrite a function that returns the smallest\
    \ number that divides n evenly, smaller than n.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf1r76ayp.jl:12\nin expression starting at\
    \ /tmp/tmpf1r76ayp.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the squares\
    \ of the first n positive integers. \nFor example, sum_of_squares(10) = 55. \n\
    This function should work for any value of n.\nusing Test\n\n@testset begin\n\n\
    candidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeqm5d6o5.jl:11\nin expression starting at\
    \ /tmp/tmpeqm5d6o5.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqr_ar4rf.jl:7\nin expression starting at /tmp/tmpqr_ar4rf.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of n that are\
    \ smaller than n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjppztpu1.jl:12\nin expression starting at\
    \ /tmp/tmpjppztpu1.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 1 \n        1 \n    else \n        largest_divisor(n / 2) \n \
    \   end\nend\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the smallest number that divides\
    \ n evenly, smaller than n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb6rhoopy.jl:12\nin expression starting at\
    \ /tmp/tmpb6rhoopy.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the largest number\
    \ that can be divided by all the numbers from 1 to n.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwjtwluqy.jl:12\nin expression starting at\
    \ /tmp/tmpwjtwluqy.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n \n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the smallest number\
    \ that divides n evenly, smaller than n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprhwktfkj.jl:6\nin expression starting at /tmp/tmprhwktfkj.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the factorial of a given number.\
    \ For example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpye0beymx.jl:12\nin expression starting at\
    \ /tmp/tmpye0beymx.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of a given number.\
    \ For example, for the number 15, there are three divisors: 1, 2, and 5. The function\
    \ should return 3.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn0yb0glg.jl:12\nin expression starting at\
    \ /tmp/tmpn0yb0glg.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else \n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvz4iufvk.jl:12\nin expression starting at\
    \ /tmp/tmpvz4iufvk.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\n@code_warntype largest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. For example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc5tp8xmd.jl:12\nin expression starting at\
    \ /tmp/tmpc5tp8xmd.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n@code_warntype largest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk1qhb_jj.jl:12\nin expression starting at\
    \ /tmp/tmpk1qhb_jj.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    if n%2==0 then return\
    \ n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpx8hii_gq.jl:6\nin expression starting at /tmp/tmpx8hii_gq.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0\n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. \nFor a given number n, find the factorial of n. \nFor a given\
    \ number n, find the factorial of n. \nFor a given number n, find the factorial\
    \ of n. \nFor a given number n, find the factorial of n. \nFor a given number\
    \ n, find the factorial of n. \nFor a given number n, find the factorial of n.\
    \ \nFor a given number n, find the factorial of n. \nFor a given number n, find\
    \ the factorial of n. \nFor a given number n, find the factorial of n. \nFor a\
    \ given number n, find the factorial of n. \nFor a given number n, find the factorial\
    \ of n. \nFor a given number n, find the factorial of n. \nFor a given number\
    \ n, find the factorial of n. \nFor a given number n, find the factorial of n.\
    \ \nFor a given number n, find the factorial of n. \nFor a given number n, find\
    \ the factorial of n. \nFor a given number n, find the factorial of n. \nFor a\
    \ given number n, find the factorial of n. \nFor a given number n, find the factorial\
    \ of n. \nFor a given number n, find the factorial of n. \nFor a given number\
    \ n, find the factorial of n. \nFor a given number n, find the factorial of n.\
    \ \nFor a given number n, find the factorial of n. \nFor a given number n, find\
    \ the factorial of n. \nFor a given number n, find the factorial of n. \nFor a\
    \ given number n, find the factorial of n. \nFor a given number n, find the factorial\
    \ of n. \nFor a given number n, find the factorial of n. \nFor a given number\
    \ n, find the factorial of n. \nFor a given number n, find the factorial of n.\
    \ \nFor a given number n, find the factorial of n. \nFor a given number n, find\
    \ the factorial of n. \nFor a given number n, find the factorial of n. \nFor a\
    \ given number n, find the factorial of n. \nFor a given number n, find the factorial\
    \ of n. \nFor a given number n, find the factorial of n. \nFor a given number\
    \ n, find the factorial of n. \nFor a given number n, find the factorial of n.\
    \ \nFor a given number n, find the factorial of n. \nFor a given number n, find\
    \ the factorial of n. \nFor a given number n, find the factorial \nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwxuwgsa_.jl:7\nin expression starting at /tmp/tmpwxuwgsa_.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.0>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 4\nWrite a function that finds\
    \ the smallest number that divides n evenly, smaller than n.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgz8ow5er.jl:8\nin expression starting at /tmp/tmpgz8ow5er.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the largest prime factor of a given\
    \ number. For example, given n = 24, the largest prime factor is 5.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmponac51kt.jl:12\nin expression starting at\
    \ /tmp/tmponac51kt.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the factorial\
    \ of a given number. \nFor a given number n, find the factorial of n. \nFor a\
    \ given number n, find the factorial of n. \nFor a given number n, find the factorial\
    \ of n. \nFor a given number n, find the factorial of n. \nFor a given number\
    \ n, find the factorial of n. \nFor a given number n, find the factorial of n.\
    \ \nFor a given number n, find the factorial of n. \nFor a given number n, find\
    \ the factorial of n. \nFor a given number n, find the factorial of n. \nFor a\
    \ given number n, find the factorial of n. \nFor a given number n, find the factorial\
    \ of n. \nFor a given number n, find the factorial of n. \nFor a given number\
    \ n, find the factorial of n. \nFor a given number n, find the factorial of n.\
    \ \nFor a given number n, find the factorial of n. \nFor a given number n, find\
    \ the factorial of n. \nFor a given number n, find the factorial of n. \nFor a\
    \ given number n, find the factorial of n. \nFor a given number n, find the factorial\
    \ of n. \nFor a given number n, find the factorial of n. \nFor a given number\
    \ n, find the factorial of n. \nFor a given number n, find the factorial of n.\
    \ \nFor a given number n, find the factorial of n. \nFor a given number n, find\
    \ the factorial of n. \nFor a given number n, find the factorial of n. \nFor a\
    \ given number n, find the factorial of n. \nFor a given number n, find the factorial\
    \ of n. \nFor a given number n, find the factorial of n. \nFor a given number\
    \ n, find the factorial of n. \nFor a given number n, find the factorial of n.\
    \ \nFor a given number n, find the factorial of n. \nFor a given number n, find\
    \ the factorial of n. \nFor a given number n, find the factorial of n. \nFor a\
    \ given number n, find the factorial of n. \nFor a given number n, find the factorial\
    \ of n. \nFor a given number n, find the factorial of n. \nFor a given number\
    \ n, find the factorial of n. \nFor a given number n, find the factorial of n.\
    \ \nFor a given number n, find the factorial of n. \nFor a given number n, find\
    \ the factorial of n. \nFor a given number n, find the factorial of n. \nFor a\
    \ given number n, find the factorial of n. \nFor a given number n, find the factorial\
    \ of \nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphjub8h5b.jl:12\nin expression starting at\
    \ /tmp/tmphjub8h5b.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpco6iwtvu.jl:12\nin expression starting at\
    \ /tmp/tmpco6iwtvu.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 0 \n        0\n    else if n % 2 == 0 \n        largest_divisor(n\
    \ / 2)\n    else \n        largest_divisor(3 * n + 1) \nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(15); @time largest_divisor(150)\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the first n prime numbers. \nHint: Use a while\
    \ loop to keep checking the condition of n being prime until you find n prime\
    \ numbers. \nHint: Use a boolean array to keep track of which numbers have been\
    \ checked and which haven't. \nHint: Use a for loop to iterate over all numbers\
    \ from 2 to n. \nHint: Use a while loop to keep checking the condition of n being\
    \ prime until you find n prime numbers. \nHint: Use a boolean array to keep track\
    \ of which numbers have been checked and which haven't. \nHint: Use a for loop\
    \ to iterate over all numbers from 2 to n. \nHint: Use a while loop to keep checking\
    \ the condition of n being prime until you find n prime numbers. \nHint: Use a\
    \ boolean array to keep track of which numbers have been checked and which haven't.\
    \ \nHint: Use a for loop to iterate over all numbers from 2 to n. \nHint: Use\
    \ a while loop to keep checking the condition of n being prime until you find\
    \ n prime numbers. \nHint: Use a boolean array to keep track of which numbers\
    \ have been checked and which haven't. \nHint: Use a for loop to iterate over\
    \ all numbers from 2 to n. \nHint: Use a while loop to keep checking the condition\
    \ of n being prime until you find n prime numbers. \nHint: Use a boolean array\
    \ to keep track of which numbers have been checked and which haven't. \nHint:\
    \ Use a for loop to iterate over all numbers from 2 to n. \nHint: Use a while\
    \ loop to keep checking the condition of n being prime until you find n prime\
    \ numbers. \nHint: Use a boolean array to keep track of which numbers have been\
    \ checked and which haven't. \nHint: Use a for loop to iterate over all numbers\
    \ from 2 to n. \nHint: Use a while loop to keep checking the condition of n being\
    \ prime until you find n prime numbers. \nHint: Use a boolean array to keep track\
    \ of which numbers have been checked and which haven't. \nHint: Use a for loop\
    \ to iterate over all numbers from 2 to n. \nHint: Use a while loop to keep checking\
    \ the condition of n being prime until you find n prime numbers. \n\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpznjjsn6g.jl:8\nin expression starting at /tmp/tmpznjjsn6g.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ divisors of a given number n. For example, for the number 12, there are two\
    \ divisors: 2 and 3. For the number 6, there are three divisors: 1, 3, and 6.\
    \ For the number 15, there are four divisors: 1, 2, 3, and 5.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpliuhzm4i.jl:12\nin expression starting at\
    \ /tmp/tmpliuhzm4i.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 0 \n        0\n    else \n        largest_divisor(n-1) + 1 \n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of divisors of n\
    \ that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphrjp0lnu.jl:12\nin expression starting at\
    \ /tmp/tmphrjp0lnu.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of divisors of n\
    \ that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvqejzki6.jl:11\nin expression starting at\
    \ /tmp/tmpvqejzki6.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 then return n\n    else if n%2==0 then return largest_divisor(n/2)\n\
    \    else return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.3>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the smallest number that divides n evenly, smaller than n.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwyv9f373.jl:6\nin expression starting at /tmp/tmpwyv9f373.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    if n%2==0 then return\
    \ n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp28nt56s8.jl:6\nin expression starting at /tmp/tmp28nt56s8.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 0 \n        0\n    else\n        largest_divisor(n / 2)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnp1bvca1.jl:12\nin expression starting at\
    \ /tmp/tmpnp1bvca1.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a given number. \n\
    For example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo83rii8p.jl:12\nin expression starting at\
    \ /tmp/tmpo83rii8p.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else if n%2==0 \n        return largest_divisor(n/2)\
    \ \n    else \n        return largest_divisor(n/2) + 1 \nend \n</cell>\n<code\
    \ language=julia-1.5>\n@time largest_divisor(150)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the first n positive integers such that $n! > 10^9$,\
    \ where $n$ is given as an input argument.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp1c69x2w.jl:8\nin expression starting at /tmp/tmpp1c69x2w.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0 \n    else if n%2==0 then return n \n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. For example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp940jezvz.jl:6\nin expression starting at /tmp/tmp940jezvz.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a number n and returns the number of digits in n. For example, f(1234567890)\
    \ = 5.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz0uj2o18.jl:8\nin expression starting at /tmp/tmpz0uj2o18.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_glg149z.jl:12\nin expression starting at\
    \ /tmp/tmp_glg149z.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n\
    <text>\nExercise 7\nWrite a function that returns the smallest number that divides\
    \ n evenly, smaller than n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk7h74qxv.jl:12\nin expression starting at\
    \ /tmp/tmpk7h74qxv.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that finds the smallest number that divides\
    \ n evenly, smaller than n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9wwo_naq.jl:11\nin expression starting at\
    \ /tmp/tmp9wwo_naq.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of divisors of n\
    \ that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmo4xynwb.jl:11\nin expression starting at\
    \ /tmp/tmpmo4xynwb.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsp4k6n5v.jl:12\nin expression starting at\
    \ /tmp/tmpsp4k6n5v.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfhnxpd5w.jl:12\nin expression starting at\
    \ /tmp/tmpfhnxpd5w.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the smallest number that divides n evenly, smaller than n.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpclfxftq1.jl:8\nin expression starting at /tmp/tmpclfxftq1.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.0>\nlargest_divisor(15)\n</cell>\n\
    <text>\nProblem 7: Find the largest prime factor of the number 600851475143 \n\
    The largest prime factor of the number 600851475143 is\n5143 \n(7143 \xD7 7143\
    \ \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143\
    \ \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143\
    \ \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143\
    \ \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143\
    \ \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143\
    \ \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143\
    \ \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143\
    \ \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143\
    \ \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7143 \xD7 7\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsfie_9wz.jl:11\nin expression starting at\
    \ /tmp/tmpsfie_9wz.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_fv7b5xr.jl:11\nin expression starting at\
    \ /tmp/tmp_fv7b5xr.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1 \n    else \n        largest_divisor(n-1) + 1 \nend\n\
    </cell>\n<code language=julia-1.5>\n@time largest_divisor(100)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a given number. \n\
    For instance, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxm661rrg.jl:11\nin expression starting at\
    \ /tmp/tmpxm661rrg.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n@time largest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of divisors of n\
    \ that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprfmzb2jj.jl:12\nin expression starting at\
    \ /tmp/tmprfmzb2jj.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the largest prime factor\
    \ of a given number. For example, if the number is 17, it should return 3. Note\
    \ that 1 is not a prime factor.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzch10dtv.jl:6\nin expression starting at /tmp/tmpzch10dtv.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of a given number. For example, for the number 12, there are two divisors: 2\
    \ and 3.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp3uks6bf.jl:7\nin expression starting at /tmp/tmpp3uks6bf.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    @time largest_divisor(100)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of divisors of n that are less than or equal to n.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg5wqev3h.jl:8\nin expression starting at /tmp/tmpg5wqev3h.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the smallest number that divides n evenly,\
    \ smaller than n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcvbcs0gf.jl:12\nin expression starting at\
    \ /tmp/tmpcvbcs0gf.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0\n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype largest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of n that are smaller than n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmperlsinqz.jl:7\nin expression starting at /tmp/tmperlsinqz.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmporl1lhr_.jl:8\nin expression starting at /tmp/tmporl1lhr_.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjkwjhxic.jl:12\nin expression starting at\
    \ /tmp/tmpjkwjhxic.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0\n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of n that are smaller than n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdzvz9rdw.jl:7\nin expression starting at /tmp/tmpdzvz9rdw.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1 \n    else \n        largest_divisor(n-1) + 1 \nend\n\
    </cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a given number. \n\
    For a given number n, find the factorial of n \n    >>> factorial(5)\n    120\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t\
    @test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) ==\
    \ 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnfh6x73q.jl:11\nin expression starting at\
    \ /tmp/tmpnfh6x73q.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 then return 1\n    else if n%2==0 then return largest_divisor(n/2)\n\
    \    else return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the first n prime numbers. \nHint: use the sieve of Eratosthenes algorithm\n\
    using Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbp6rlxn8.jl:6\nin expression starting at /tmp/tmpbp6rlxn8.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend \n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of divisors of n\
    \ that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvqejzki6.jl:11\nin expression starting at\
    \ /tmp/tmpvqejzki6.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of a given number n. For example, for n = 12, there are only three divisors:\
    \ 1, 2, and 3.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzui_2fle.jl:7\nin expression starting at /tmp/tmpzui_2fle.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    if n%2==0 then return\
    \ n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.0>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the factorial of a given number. \nThe factorial of a number $n$ is defined\
    \ as\n$$\nn! = n \\times n-1 \\times n-2 \\times ...\n$$\nFor example, $5! = 5\
    \ \\times 4 \\times 3 \\times 2 \\times 1 = 120$\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp333qa08k.jl:6\nin expression starting at /tmp/tmp333qa08k.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then return n \n    else \n        largest_divisor(n\
    \ / 2) \n    end\nend\n</cell>\n<code language=julia-1.4>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number. \nThe factorial of a number $n$ is defined as the product of all\
    \ the positive integers less than or equal to $n$. \nFor example, $5! = 5 \\times\
    \ 4 \\times 3 \\times 2 \\times 1 = 120$. \nWrite a recursive function factorial(n)\
    \ that returns the factorial of a given number. \nFor example, factorial(5) =\
    \ 5 \\times 4 \\times 3 \\times 2 \\times 1 = 120. \nWrite a iterative function\
    \ factorial(n) that returns the factorial of a given number. \nFor example, factorial(5)\
    \ = 5 \\times 4 \\times 3 \\times 2 \\times 1 = 120. \nWrite a function that returns\
    \ the factorial of a given number. \nThe factorial of a number $n$ is defined\
    \ as the product of all the positive integers less than or equal to $n$. \nFor\
    \ example, $5! = 5 \\times 4 \\times 3 \\times 2 \\times 1 = 120$. \nWrite a recursive\
    \ function factorial(n) that returns the factorial of a given number. \nFor example,\
    \ factorial(5) = 5 \\times 4 \\times 3 \\times 2 \\times 1 = 120. \nWrite a iterative\
    \ function factorial(n) that returns the factorial of a given number. \nFor example,\
    \ factorial(5) = 5 \\times 4 \\times 3 \\times 2 \\times 1 = 120. \nWrite a function\
    \ that returns the factorial of a given number. \nThe factorial of a number $n$\
    \ is defined as the product of all the positive integers less than or equal to\
    \ $n$. \nFor example, $5! = 5 \\times 4 \\times 3 \\times 2 \\times 1 = 120$.\
    \ \nWrite a recursive function factorial(n) that returns the factorial of a given\
    \ number. \nFor example, factorial(5) = 5 \\times 4 \\times 3 \\times 2 \\times\
    \ 1 = 120. \nWrite a iterative function factorial(n) that returns the factorial\
    \ of a given number. \nFor example, factorial(5) = 5 \\times 4 \\times 3 \\times\
    \ 2 \\times 1 = 120. \nWrite a function that returns the factorial of a given\
    \ number. \nThe factorial of a number $n$ is defined as the product of all the\
    \ positive integers less than or equal to $n$. \nFor example, $5! = 5 \\times\
    \ 4 \\times 3 \\times 2 \\times 1 = 120$. \nWrite a recursive \nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9xew_vv2.jl:7\nin expression starting at /tmp/tmp9xew_vv2.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\n\
    \        if n % 2 == 0 \n            largest_divisor(n/2) \n        else \n  \
    \          largest_divisor(n/2) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvq1ctjfj.jl:16\nin expression starting at\
    \ /tmp/tmpvq1ctjfj.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the factorial of a given number. \nThe factorial of a number $n$ is defined\
    \ as:\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwgv8dt14.jl:8\nin expression starting at /tmp/tmpwgv8dt14.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n%2==0 then return n\n    else return largest_divisor(n/2)\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 5\nWrite a function that returns the number of divisors of a given number.\
    \ For example, for the number 12, there are two divisors: 2 and 3. Your function\
    \ should return the number of divisors, not just print them.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmc8g5mvk.jl:6\nin expression starting at /tmp/tmpmc8g5mvk.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2)+1\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of divisors of a given number n. For example, for n = 10, the function\
    \ should return 3.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp11o3tyrn.jl:8\nin expression starting at /tmp/tmp11o3tyrn.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsp4k6n5v.jl:12\nin expression starting at\
    \ /tmp/tmpsp4k6n5v.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp2c6bhzj.jl:12\nin expression starting at\
    \ /tmp/tmpp2c6bhzj.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpj6v_dkmm.jl:6\nin expression starting at /tmp/tmpj6v_dkmm.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n        if\
    \ n%2==0\n            largest_divisor(n/2)\n        else\n            largest_divisor(n/2)+1\n\
    \        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(100)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1st9cth2.jl:17\nin expression starting at\
    \ /tmp/tmp1st9cth2.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    if n%2==0 then return\
    \ n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.3>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of divisors of n that are less than or equal to n.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdai0qpr2.jl:6\nin expression starting at /tmp/tmpdai0qpr2.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n@time largest_divisor(100)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of divisors of a\
    \ given number n. For example, for n = 10, the function should return 3.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa1elyw2p.jl:12\nin expression starting at\
    \ /tmp/tmpa1elyw2p.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    if n%2==0 then return\
    \ n\n    else return largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.0>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the factorial of a given number. \nFor example, factorial(5) = 5 \xD7 4 \xD7\
    \ 3 \xD7 2 \xD7 1\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpu2k4qyxg.jl:6\nin expression starting at /tmp/tmpu2k4qyxg.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.3>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number. \nFor a given number n, find the factorial of n\n    >>> factorial(5)\n\
    \    120\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqma6wxzl.jl:6\nin expression starting at /tmp/tmpqma6wxzl.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of a given number n. For example, for the number 15, the number of divisors\
    \ is 5.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpngs0g4d5.jl:6\nin expression starting at /tmp/tmpngs0g4d5.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    else if n%2==0 then return n\n    else return\
    \ largest_divisor(n/2)\nend\n</cell>\n<code language=julia-1.0>\nlargest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number. For example, factorial(5) = 5 * 4 * 3 * 2 * 1 = 120\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\
    \t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp47p3fcl4.jl:6\nin expression starting at /tmp/tmp47p3fcl4.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@code_warntype largest_divisor(15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the largest number\
    \ that divides n evenly, smaller than n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2mbrz7gs.jl:12\nin expression starting at\
    \ /tmp/tmp2mbrz7gs.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<text>\nExercise 7\nWrite a function that returns the factorial\
    \ of a given number. \nFor a given number n, find the factorial of n. \nFor a\
    \ given number n, find the factorial of n. \nFor a given number n, find the factorial\
    \ of n. \nFor a given number n, find the factorial of n. \nFor a given number\
    \ n, find the factorial of n. \nFor a given number n, find the factorial of n.\
    \ \nFor a given number n, find the factorial of n. \nFor a given number n, find\
    \ the factorial of n. \nFor a given number n, find the factorial of n. \nFor a\
    \ given number n, find the factorial of n. \nFor a given number n, find the factorial\
    \ of n. \nFor a given number n, find the factorial of n. \nFor a given number\
    \ n, find the factorial of n. \nFor a given number n, find the factorial of n.\
    \ \nFor a given number n, find the factorial of n. \nFor a given number n, find\
    \ the factorial of n. \nFor a given number n, find the factorial of n. \nFor a\
    \ given number n, find the factorial of n. \nFor a given number n, find the factorial\
    \ of n. \nFor a given number n, find the factorial of n. \nFor a given number\
    \ n, find the factorial of n. \nFor a given number n, find the factorial of n.\
    \ \nFor a given number n, find the factorial of n. \nFor a given number n, find\
    \ the factorial of n. \nFor a given number n, find the factorial of n. \nFor a\
    \ given number n, find the factorial of n. \nFor a given number n, find the factorial\
    \ of n. \nFor a given number n, find the factorial of n. \nFor a given number\
    \ n, find the factorial of n. \nFor a given number n, find the factorial of n.\
    \ \nFor a given number n, find the factorial of n. \nFor a given number n, find\
    \ the factorial of n. \nFor a given number n, find the factorial of n. \nFor a\
    \ given number n, find the factorial of n. \nFor a given number n, find the factorial\
    \ of n. \nFor a given number n, find the factorial of n. \nFor a given number\
    \ n, find the factorial of n. \nFor a given number n, find the factorial of n.\
    \ \nFor a given number n, find the factorial of n. \nFor a given number n, find\
    \ the factorial of n. \nFor a given number n, find the factorial of n. \nFor a\
    \ given number n, find the factorial of n. \nFor a given number n, find the factorial\
    \ of \nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd6ha6w3b.jl:12\nin expression starting at\
    \ /tmp/tmpd6ha6w3b.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        largest_divisor(n-1)\n\
    \        if n%2==0 \n            largest_divisor(n/2)\n        else \n       \
    \     largest_divisor(n/2) \n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of divisors of a given number n. \nFor example, for n = 10, the function\
    \ should return 3.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb49xnxnb.jl:16\nin expression starting at\
    \ /tmp/tmpb49xnxnb.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    else\n        largest_divisor(n - 1) \n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a given number. For\
    \ example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7)\
    \ == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx4gp84g5.jl:12\nin expression starting at\
    \ /tmp/tmpx4gp84g5.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.4>\n@code_warntype largest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. \nFor a given number n, find the factorial of n\n    >>> factorial(5)\n\
    \    120\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprbkpcie_.jl:12\nin expression starting at\
    \ /tmp/tmprbkpcie_.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjnqqattg.jl:12\nin expression starting at\
    \ /tmp/tmpjnqqattg.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return n\n    else if n%2==0 \n        return largest_divisor(n/2)\n\
    \    else \n        return largest_divisor(n/2) + 1\nend\n</cell>\n<code language=julia-1.0>\n\
    @time largest_divisor(15)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of divisors of n that are less than or equal to n.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3)\
    \ == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9kz18fwa.jl:8\nin expression starting at /tmp/tmp9kz18fwa.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n % 2 == 0 \n        then largest_divisor(n / 2)\n        else largest_divisor(3\
    \ * n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of divisors\
    \ of n that are less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_divisor;\n\t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\
    \t@test(candidate(10) == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49)\
    \ == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"largest_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgzkfeqww.jl:7\nin expression starting at /tmp/tmpgzkfeqww.jl:7\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 then return 0\n    if n==1 then return 1\n    \n    largest_divisor\
    \ = 1\n    for d in divisors(n) do \n        if d%2==0 then \n            if n%d==0\
    \ then \n                if largest_divisor<d+1 then \n                    largest_divisor\
    \ = d+1\n                end\n            end\n        end\n    end\n    return\
    \ largest_divisor\nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(150)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of divisors\
    \ of a given number. For example, for the number 12, the number of divisors is\
    \ 3. The function should return 3 if the number is divisible by 1, 2, and 3, and\
    \ 0 otherwise.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpw_of9l_k.jl:6\nin expression starting at /tmp/tmpw_of9l_k.jl:6\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        1 \n    else \n        largest_divisor(n-1) + 1 \nend\n\
    </cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of divisors of n that are less than\
    \ or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpalxnihpc.jl:11\nin expression starting at\
    \ /tmp/tmpalxnihpc.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n == 0 \n        0\n    else\n        largest_divisor(n-1) + n // largest_divisor(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of divisors of n that are\
    \ less than or equal to n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03qf8r9d.jl:11\nin expression starting at\
    \ /tmp/tmp03qf8r9d.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==1 \n        return 1 \n    else \n        return largest_divisor(n-1)\
    \ + 1 \nend\n</cell>\n<code language=julia-1.5>\n@time largest_divisor(15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the factorial of a given number.\
    \ \nFor example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_divisor;\n\t@test(candidate(3) == 1)\n\t\
    @test(candidate(7) == 1)\n\t@test(candidate(10) == 5)\n\t@test(candidate(100)\
    \ == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy33phm4l.jl:11\nin expression starting at\
    \ /tmp/tmpy33phm4l.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\nfunction largest_divisor(n::Int64)::Int64\
    \ \n    if n==0 \n        0\n    else\n        largest_divisor(n-1)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nlargest_divisor(15)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the smallest number that divides n evenly,\
    \ smaller than n.\nusing Test\n\n@testset begin\n\ncandidate = largest_divisor;\n\
    \t@test(candidate(3) == 1)\n\t@test(candidate(7) == 1)\n\t@test(candidate(10)\
    \ == 5)\n\t@test(candidate(100) == 50)\n\t@test(candidate(49) == 7)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyyemjna3.jl:12\nin expression starting at\
    \ /tmp/tmpyyemjna3.jl:12\n"
  stdout: ''
