name: HumanEval_97_multiply
language: jl
prompt: "\"\"\"Complete the function that takes two integers and returns \n    the\
  \ product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
  \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>> multiply(2020,\
  \ 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"\nfunction multiply(a::Int64,\
  \ b::Int64)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
  \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) ==\
  \ 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
  \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
completions: ["    if b == 0 \n        return 0 \n    else \n        return (a * b)\
    \ mod 10 \n    end\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n\
    </cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14, -15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of occurrences of \n    each character in the string. \n    Examples:\n\
    \    >>> count_chars(\"hello\")\n    Dict(\"h\"=>1, \"e\"=>1, \"l\"=>2, \"o\"\
    =>1)\n    >>> count_chars(\"helloworld\")\n    Dict(\"h\"=>2, \"e\"=>1, \"l\"\
    =>2, \"o\"=>1, \"w\"=>2, \"r\"=>1, \"d\"=>1)\n    \"\"\"", "    if b == 0 \n \
    \       0\n    else\n        (a*b).digits\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the sum of its unit digits. \nAssume the input is\
    \ always valid.\nExamples:\n>>> sum(148, 412)\n16\n>>> sum(19, 28)\n72\n>>> sum(2020,\
    \ 1851)\n0\n>>> sum(14, -15)\n20\n\"\"\"", "    if b == 0 \n        0\n    else\n\
    \        (a * 10 + b) mod 10\nend\n</cell>\n<code language=julia-1.0>\n@assert\
    \ multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the sum of the digits of its input. \nAssume that\
    \ the input is always valid.\nExamples:\n>>> sum(1234)\n4\n>>> sum(123)\n3\n>>>\
    \ sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)", "    if b == 0 \n        0\n\
    \    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif b < 10\
    \ \n        a * 10\n    elseif b < 100 \n        a * 10 + b\n    elseif b < 1000\
    \ \n        a * 10 + b / 10\n    elseif b < 10000 \n        a * 10 + b / 100\n\
    \    elseif b < 100000 \n        a * 10 + b / 1000\n    elseif b < 1000000 \n\
    \        a * 10 + b / 10000\n    elseif b < 10000000 \n        a * 10 + b / 100000\n\
    \    elseif b < 100000000 \n        a * 10 + b / 1000000\n    elseif b < 1000000000\
    \ \n        a * 10 + b / 10000000\n    elseif b < 10000000000 \n        a * 10\
    \ + b / 100000000\n    elseif b < 100000000000 \n        a * 10 + b / 1000000000\n\
    \    elseif b < 1000000000000 \n        a * 10 + b / 10000000000\n    elseif b\
    \ < 10000000000000 \n        a * 10 + b / 100000000000\n    elseif b < 100000000000000\
    \ \n        a * 10 + b / 1000000000000\n    elseif b < 1000000000000000 \n   \
    \     a * 10 + b / 10000000000000\n    elseif b < 10000000000000000 \n       \
    \ a * 10 + b / 100000000000000\n    elseif b < 100000000000000000 \n        a\
    \ * 10 + b / 1000000000000000\n    elseif b < 1000000000000000000 \n        a\
    \ * 10 + b / 10000000000000000\n    elseif b < 10000000000000000000 \n       \
    \ a * 10 + b / 100000000000000000\n    elseif b < 100000000000000000000 \n   \
    \     a * 10 + b / 1000000000000000000\n    elseif b < 1000000000000000000000\
    \ \n        a * 10 + b / 10000000000000000000\n    elseif b < 10000000000000000000000\
    \ \n        a * 10 + b / 100000000000000000000\n    elseif b < 100000000000000000000000\
    \ \n        a * 10 + b / 1000000000000000000000\n    elseif b < 1000000000000000000000000\
    \ \n        a * 10 + b / 10000000000000000000000\n    elseif b < 10000000000000000000000000\
    \ \n        a * 10 + b / 100000000000000000000000\n    elseif b < 100000000000000000000000000\
    \ \n        a * 10 + b / 1000000000000000000000000\n    elseif b < 1000000000000000000000000000\
    \ \n        a * 10 + b / 10000000000000000000000000\n    elseif b < 10000000000000000000000000000\
    \ \n        a * 10 + b / 100000000000000000000000000\n    elseif b < 100000000000000000000000000000\
    \ \n        a", "    if b == 0 \n        0\n    elseif b < 0 \n        0\n   \
    \ elseif b > 0 \n        0\n    elseif b == 1 \n        a\n    elseif b == -1\
    \ \n        0\n    elseif b == -2\n        0\n    elseif b == -3\n        0\n\
    \    elseif b == -4\n        0\n    elseif b == -5\n        0\n    elseif b ==\
    \ -6\n        0\n    elseif b == -7\n        0\n    elseif b == -8\n        0\n\
    \    elseif b == 9\n        0\n    elseif b == 10\n        0\n    elseif b ==\
    \ 11\n        0\n    elseif b == 12\n        0\n    elseif b == 13\n        0\n\
    \    elseif b == 14\n        0\n    elseif b == 15\n        0\n    elseif b ==\
    \ 16\n        0\n    elseif b == 17\n        0\n    elseif b == 18\n        0\n\
    \    elseif b == 19\n        0\n    elseif b == 20\n        0\n    elseif b ==\
    \ 21\n        0\n    elseif b == 22\n        0\n    elseif b == 23\n        0\n\
    \    elseif b == 24\n        0\n    elseif b == 25\n        0\n    elseif b ==\
    \ 26\n        0\n    elseif b == 27\n        0\n    elseif b == 28\n        0\n\
    \    elseif b == 29\n        0\n    elseif b == 30\n        0\n    elseif b ==\
    \ 31\n        0\n    elseif b == 32\n        0\n    elseif b == 33\n        0\n\
    \    elseif b == 34\n        0\n    elseif b == 35\n        0\n    elseif b ==\
    \ 36\n        0\n    elseif b == 37\n        0\n    elseif b == 38\n        0\n\
    \    elseif b == 39\n        0\n    elseif b == 40\n        0\n    elseif b ==\
    \ 41\n        0\n    elseif b == 42\n        0\n    elseif b == 43\n        0\n\
    \    elseif b == 44\n        0\n    elseif b == 45\n        0\n    elseif b ==\
    \ 46\n        0\n    elseif b == 47\n        0\n    elseif b == 48\n        0\n\
    \    elseif b == 49\n        0\n    elseif b == 50\n        0\n    elseif b ==\
    \ 51\n        0\n    elseif b == 52\n        0\n    elseif b == 53\n        0\n\
    \    elseif b == 54\n        0\n    else", "    if b == 0 \n        0\n    elseif\
    \ b < 0 \n        0\n    elseif b > a \n        0\n    elseif b == a \n      \
    \  a\n    elseif b > a \n        0\n    elseif b == a \n        a\n    elseif\
    \ b > a \n        0\n    elseif b == a \n        a\n    elseif b > a \n      \
    \  0\n    elseif b == a \n        a\n    elseif b > a \n        0\n    elseif\
    \ b == a \n        a\n    elseif b > a \n        0\n    elseif b == a \n     \
    \   a\n    elseif b > a \n        0\n    elseif b == a \n        a\n    elseif\
    \ b > a \n        0\n    elseif b == a \n        a\n    elseif b > a \n      \
    \  0\n    elseif b == a \n        a\n    elseif b > a \n        0\n    elseif\
    \ b == a \n        a\n    elseif b > a \n        0\n    elseif b == a \n     \
    \   a\n    elseif b > a \n        0\n    elseif b == a \n        a\n    elseif\
    \ b > a \n        0\n    elseif b == a \n        a\n    elseif b > a \n      \
    \  0\n    elseif b == a \n        a\n    elseif b > a \n        0\n    elseif\
    \ b == a \n        a\n    elseif b > a \n        0\n    elseif b == a \n     \
    \   a\n    elseif b > a \n        0\n    elseif b == a \n        a\n    elseif\
    \ b > a \n        0\n    elseif b == a \n        a\n    elseif b > a \n      \
    \  0\n    elseif b == a \n        a\n    elseif b > a \n        0\n    elseif\
    \ b == a \n        a\n    elseif b > a \n        0\n    elseif b == a \n     \
    \   a\n    elseif b > a \n        0\n    elseif b == a \n        a\n    elseif\
    \ b > a \n        0\n    elseif b == a \n        a\n    elseif b > a \n      \
    \  0\n    elseif b == a \n        a\n    elseif b > a \n        0\n    elseif\
    \ b == a \n        a\n    elseif b > a \n        0\n    elseif b == a \n     \
    \   a\n    elseif b > a \n        0\n    elseif b == a \n        a\n    elseif\
    \ b > a \n        0\n    elseif b == a \n        a\n    elseif b > a \n      \
    \  0\n    elseif b == a \n        a\n    elseif ", "    if b == 0 \n        0\n\
    \    else\n        (a * b) % 10\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0\n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes two integers and returns the sum of the unit digits of\
    \ their product \n    (i.e., if the product is $10^1$, then the sum is $10^1$).\n\
    \    Assume the input is always valid.\n    Examples:\n    >>> sum(148, 412)\n\
    \    16\n    >>> sum(19, 28)\n    72\n    >>> sum(2020, 1851)\n    0\n    >>>\
    \ sum(14, -15)\n    20\n    \"\"\"", "    if b == 0 \n        0\n    elseif b\
    \ < 0 \n        0\n    elseif b > 9 \n        0\n    elseif b < a \n        0\n\
    \    else\n        (a * b) % 10\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of characters in that\
    \ string.\nExamples:\n>>> count_characters(\"Hello World\")\n10\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!!\")\n12\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_", "    if b == 0 \n        0\n    else\n   \
    \     (a * 10^(b-1)) * (10^(b-1))\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"",
  "    if b == 0 \n        0\n    else\n        (a*b).digits()\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the product of their unit digits.\nAssume the input is always valid.\nExamples:\n\
    >>> multiply([148, 412])\n16\n>>> multiply([19, 28])\n72\n>>> multiply([2020,\
    \ 1851])\n0\n>>> multiply([14, -15])\n20\n\"\"\"", "    if b == 0 \n        return\
    \ 0 \n    else \n        return (a * b) mod 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that takes two integers and returns their sum.\nExamples:\n>>> add(3,\
    \ 4)\n7\n>>> add(10, -2)\n8\n>>> add(10, 0)\n10\n>>> add(10, -10)\n0\n>>> add(10,\
    \ -100)\n-10\n>>> add(10, -1000)\n-10\n>>> add(10, -10000)\n-10\n>>> add(10, -100000)\n\
    -10\n>>> add(10, -1000000000)\n-10\n>>> add(10, -1000000000000)\n-10\n>>> add(10,\
    \ -100000000000000)\n-10\n>>> add(10, -100000000000000000)\n-10\n>>> add(10, -1000000000000000000)\n\
    -10\n>>> add(10, -100000000000000000000)\n-10\n>>> add(10, -10000000000000000000000)\n\
    -10\n>>> add(10, -1000000000000000000000000)\n-10\n>>> add(10, -100000000000000000000000000)\n\
    -10\n>>> add(10, -10000000000000000000000000000)\n-10\n>>> add(10, -1000000000000000000000000000000)\n\
    -10\n>>> add(10, -100000000000000000000000000000000)\n-10\n>>> add(10, -10000000000000000000000000000000000)\n\
    -10\n>>> add(10, -1000000000000000000000000000000000000)\n-10\n>>> add(10, -100000000000000000000000000000000000000)\n\
    -10\n>>> add(10, -10000000000000000000000000000000000000000)\n-10\n>>> add(10,\
    \ -1000000000000000000000000000000000000000000)\n-10\n>>> add(10, -100000000000000000000000000000000000000000000)\n\
    -10\n>>> add(10, -10000000000000000000000000000000000000000000000)\n-10\n>>> add(10,\
    \ -10000000000000000000000000000000000000000000000000)\n-10\n>>> add(10, -10000000000000000000000000000000000000000000000000000)\n\
    -10\n>>> add(10, -1000000000000000000000000000000000000000000000000000000)\n-10\n\
    >>> add(10, -100000000000000000000000000000000000000000000000000000000)\n-10\n\
    >>> add(10, -10000000000000000000000000000000000000000000000000000000)\n-10\n\
    >>> add(10, -1000000000000000000000000000000000000000000000000000000000)\n-10\n\
    >>> add(10, -100000000000000000000000000000000000000000000000000000000)\n-10\n\
    >>> add(10, -10000000000000000000000000000000000000000000000000000000)\n-10\n\
    >>> add(10, -1000000000000000000000000000000000000000000000000000000000)\n-10\n\
    >>> add(10, -100000000000000000000000000000000000000000000000000000000)\n-10\n\
    >>> add(10, -10000000000000000000000000000000000000000000000000000000)\n-10\n\
    >>> add(10, -1000000000000000000000000000000000000000000000000000000000)\n-10",
  "    if b == 0 \n        0\n    elseif b < 0 \n        0\n    elseif b > 0 \n  \
    \      (a * 10 + b) * 10\n    else\n        0\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of two integers. \nThe function\
    \ should accept two integers and return their sum.\nExamples:\n>>> add(4, 5)\n\
    9\n>>> add(6, 8)\n12\n>>> add(10, -2)\n8\n>>> add(10, 0)\n10\n>>> add(10, -10)\n\
    0\n>>> add(10, -100)\n0\n>>> add(10, -200)\n0\n>>> add(10, -300)\n0\n>>> add(10,\
    \ -400)\n0\n>>> add(10, -500)\n0\n>>> add(10, -600)\n0\n>>> add(10, -700)\n0\n\
    >>> add(10, -800)\n0\n>>> add(10, -900)\n0\n>>> add(10, -1000)\n0\n>>> add(10,\
    \ -1100)\n0\n>>> add(10, -1200)\n0\n>>> add(10, -1300)\n0\n>>> add(10, -1400)\n\
    0\n>>> add(10, -1500)\n0\n>>> add(10, -16)\n0\n>>> add(10, -18)\n0\n>>> add(10,\
    \ -20)\n0\n>>> add(10, -22)\n0\n>>> add(10, -24)\n0\n>>> add(10, -26)\n0\n>>>\
    \ add(10, -28)\n0\n>>> add(10, -30)\n0\n>>> add(10, -32)\n0\n>>> add(10, -34)\n\
    0\n>>> add(10, -36)\n0\n>>> add(10, -38)\n0\n>>> add(10, -40)\n0\n>>> add(10,\
    \ -42)\n0\n>>> add(10, -44)\n0\n>>> add(10, -46)\n0\n>>> add(10, -48)\n0\n>>>\
    \ add(10, -50)\n0\n>>> add(10, -52)\n0\n>>> add(10, -54)\n0\n>>> add(10, -56)\n\
    0\n>>> add(10, -58)\n0\n>>> add(10, -60)\n0\n>>> add(10, -62)\n0\n>>> add(10,\
    \ -64)\n0\n>>> add(10, -66)\n0\n>>> add(10, -68)\n0\n>>> add(10, -70)\n0\n>>>\
    \ add(10, -72)\n0\n>>> add(10, -74)\n0\n>>> add(10, -76)\n0\n>>> add(10, -78)\n\
    0\n>>> add(10, -", "    if b == 0 \n        0\n    elseif b < 0 \n        0\n\
    \    elseif b > 0 \n        a * 10^(b-1)\n    else\n        a * 10^(b-1)\n   \
    \ end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes two integers\
    \ and returns the sum of the unit digits of their product (as described above).\n\
    Examples:\n>>> sum(148, 412)\n16\n>>> sum(19, 28)\n72\n>>> sum(2020, 1851)\n0\n\
    >>> sum(14, -15)\n20\n\"\"\"", "    if a < 0 || b < 0\n        return 0 \n   \
    \ elseif b == 0\n        return a\n    else\n        return a*b\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes two\
    \ integers and returns \n    the product of their unit digits.\n    Assume the\
    \ input is always valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n\
    \    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>>\
    \ multiply(14, -15)\n    20\n    \"\"\"", "    if a < 0 || b < 0\n        error(\"\
    Invalid input\")\n    elseif b == 0\n        0\n    elseif b == 1\n        a\n\
    \    else\n        (a * b) / gcd(a, b)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the squares of the unit digits of\
    \ an integer.\nExamples:\n>>> sum_square_digits(148)\n14\n>>> sum_square_digits(19)\n\
    23\n>>> sum_square_digits(2020)\n0\n>>> sum_square_digits(14)\n20\n>>> sum_square_digits(-15)\n\
    -20\n>>> sum_square_digits(0)\n0\n>>> sum_square_digits(1)\n1\n>>> sum_square_digits(2)\n\
    4\n>>> sum_square_digits(3)\n9\n>>> sum_square_digits(4)\n16\n>>> sum_square_digits(5)\n\
    25\n>>> sum_square_digits(6)\n36\n>>> sum_square_digits(7)\n49\n>>> sum_square_digits(8)\n\
    64\n>>> sum_square_digits(9)\n81\n>>> sum_square_digits(10)\n100\n>>> sum_square_digits(11)\n\
    121\n>>> sum_square_digits(12)\n144\n>>> sum_square_digits(13)\n169\n>>> sum_square_digits(14)\n\
    196\n>>> sum_square_digits(15)\n225\n>>> sum_square_digits(16)\n256\n>>> sum_square_digits(17)\n\
    289\n>>> sum_square_digits(18)\n324\n>>> sum_square_digits(19)\n353\n>>> sum_square_digits(20)\n\
    384\n>>> sum_square_digits(21)\n421\n>>> sum_square_digits(22)\n460\n>>> sum_square_digits(23)\n\
    495\n>>> sum_square_digits(24)\n532\n>>> sum_square_digits(25)\n571\n>>> sum_square_digits(26)\n\
    618\n>>> sum_square_digits(27)\n660\n>>> sum_square_digits(28)\n698\n>>> sum_square_digits(29)\n\
    737\n>>> sum_square_digits(30)\n780\n>>> sum_square_digits(31)\n817\n>>> sum_square_digits(32)\n\
    850\n>>> sum_square_digits(33)\n896\n>>> sum_square_digits(34)\n935\n>>> sum_square_digits(35)\n\
    972\n>>> sum_square_", "    if b == 0 \n        return 0 \n    else \n       \
    \ return (a * b) \nend \n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the digits of its input. \nAssume that the input is always valid.\
    \ \nExamples:\n>>> sum(12345)\n15\n>>> sum(10)\n10\n>>> sum(0)\n0\n>>> sum(123456789)\n\
    21\n>>> sum(1234567890)\n21\n>>> sum(12345678901)\n21\n>>> sum(123456789012)\n\
    21\n>>> sum(1234567890123)\n21\n>>> sum(12345678901234)\n21\n>>> sum(123456789012345)\n\
    21\n>>> sum(12345678901234567)\n21\n>>> sum(123456789012345678)\n21\n>>> sum(1234567890123456788)\n\
    21\n>>> sum(12345678901234567889)\n21\n>>> sum(123456789012345678899)\n21\n>>>\
    \ sum(1234567890123456788999)\n21\n>>> sum(12345678901234567889999)\n21\n>>> sum(123456789012345678899999)\n\
    21\n>>> sum(1234567890123456788999999)\n21\n>>> sum(12345678901234567889999999)\n\
    21\n>>> sum(1234567890123456788999999999)\n21\n>>> sum(12345678901234567889999999999)\n\
    21\n>>> sum(123456789012345678899999999999)\n21\n>>> sum(123456789012345678899999999989)\n\
    21\n>>> sum(1234567890123456788999999999890)\n21\n>>> sum(12345678901234567889999999998900)\n\
    21\n>>> sum(1234567890123456788999999999890001)\n21\n>>> sum(12345678901234567889999999998900012)\n\
    21\n>>> sum(123456789012345678899999999989000123)\n21\n>>> sum(1234567890123456788999999999890001234)\n\
    21\n>>> sum(12345678901234567889999999998900012345)\n21\n>>> sum(1234567890123456788999999999890001234567)\n\
    21\n>>> sum(12345678901234567889999999998900012345678)\n21\n>>> sum(123456789012345678899999999989000123456788)\n\
    21\n>>> sum(1234567890123456788999999999890001234567889)\n21\n>>> sum(12345678901234567889999999998900012345678899)\n\
    21\n>>> sum(123456789012345678899999999989000123456788999)\n21\n>>> sum(1234567890",
  "    if b == 0\n        return 0\n    \n    if a < 0\n        return multiply(-a,\
    \ -b)\n    \n    if b < 0\n        return multiply(a, b * -1)\n    \n    if b\
    \ == 0\n        return a\n    \n    if a < b\n        return multiply(a, b)\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if a < 0 || b < 0\n \
    \       error(\"Invalid input\")\n    elseif b == 0\n        return a\n    else\n\
    \        return a * b\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes an array of integers and returns the sum of the unit digits. \nThe\
    \ function should raise an error if the array is empty.\nExamples:\n>>> sum([148,\
    \ 412])\n16\n>>> sum([19, 28])\n72\n>>> sum([2020, 1851])\n0\n>>> sum([14, -15])\n\
    20\n>>> sum([14])\n14\n>>> sum([-14])\n-14\n>>> sum([148, 412])\n16\n>>> sum([19,\
    \ 28])\n72\n>>> sum([2020, 1851])\n0\n>>> sum([14, -15])\n20\n>>> sum([14])\n\
    14\n>>> sum([-14])\n-14\n>>> sum([148, 412])\n16\n>>> sum([19, 28])\n72\n>>> sum([2020,\
    \ 1851])\n0\n>>> sum([14, -15])\n20\n>>> sum([14])\n14\n>>> sum([-14])\n-14\n\
    >>> sum([148, 412])\n16\n>>> sum([19, 28])\n72\n>>> sum([2020, 1851])\n0\n>>>\
    \ sum([14, -15])\n20\n>>> sum([14])\n14\n>>> sum([-14])\n-14\n>>> sum([148, 412])\n\
    16\n>>> sum([19, 28])\n72\n>>> sum([2020, 1851])\n0\n>>> sum([14, -15])\n20\n\
    >>> sum([14])\n14\n>>> sum([-14])\n-14\n>>> sum([148, 412])\n16\n>>> sum([19,\
    \ 28])\n72\n>>> sum([2020, 1851])\n0\n>>> sum([14, -15])\n20\n>>> sum([14])\n\
    14\n>>> sum([-14])\n-14\n>>> sum([148, 412])\n16\n>>> sum([19, 28])\n72\n>>> sum([2020,\
    \ 1851])\n0\n>>> sum([14, -15])\n20\n>>> sum([14])\n14\n>>> sum([-14])\n-14\n\
    >>> sum([148, 412])\n16\n>>> sum([19, 28])\n72\n>>> sum([2020, 1851])\n0\n>>>\
    \ sum([14, -15])\n20\n>>> sum([14])\n14\n>>> sum([-14])\n-14\n>>> sum([148, 412])\n\
    16\n>>> sum([19, 28])\n72\n>>> sum([2020, 1851])\n0\n>>> sum([14, -15])\n20\n\
    >>> sum([14])\n14\n>>> sum([-14])\n-14\n>>> sum([148, 412])\n16\n>>> sum([19,\
    \ 28])\n72\n>>> sum([2020, ", "    if a < 0 || b < 0\n        error(\"Invalid\
    \ input\")\n    elseif b == 0\n        0\n    else\n        (a * b) % 10\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148, 412) ==\
    \ 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0\n@assert\
    \ multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and returns the number of characters in it.\nExamples:\n>>> count_characters(\"\
    Hello World\")\n12\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!!\")\n12\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World", "    if b == 0 \n\
    \        0\n    elseif b < 0 \n        0\n    elseif b > 0 \n        (a * 10^(b\
    \ % 10)) % 10\n    else\n        0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"",
  "    if b == 0\n        return 0\n    else\n        return (a*b)/b\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes two\
    \ integers and returns \n    the product of their unit digits.\n    Assume the\
    \ input is always valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n\
    \    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>>\
    \ multiply(14, -15)\n    20\n    \"\"\"", "    if b == 0 \n        return 0 \n\
    \    else \n        return (a * 10 + b) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of its unit digits.\nAssume the input is\
    \ always valid.\nExamples:\n>>> sum(148, 412)\n16\n>>> sum(19, 28)\n72\n>>> sum(2020,\
    \ 1851)\n0\n>>> sum(14, -15)\n20\n\"\"\"", "    if a < 0 or b < 0 \n        error(\"\
    The input must be positive\")\n    else if a == 0 || b == 0\n        error(\"\
    The input must be positive\")\n    else \n        return (a * b) / gcd(a, b)\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes\
    \ two integers and returns \n    the sum of their unit digits.\n    Assume the\
    \ input is always valid.\n    Examples:\n    >>> add(148, 412)\n    168\n    >>>\
    \ add(19, 28)\n    72\n    >>> add(2020, 1851)\n    2020\n    >>> add(14, -15)\n\
    \    14\n    \"\"\"", "    if b == 0 \n        return 0 \n    else \n        return\
    \ (a * b) mod 10 \nend \n\"\"\"Complete the function that takes two integers and\
    \ returns \n    the sum of their unit digits.\n    Assume the input is always\
    \ valid.\n    Examples:\n    >>> add(148, 412)\n    168\n    >>> add(19, 28)\n\
    \    72\n    >>> add(2020, 1851)\n    2020\n    >>> add(14, -15)\n    14\n   \
    \ \"\"\"", "    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else\
    \ if a == 0 || b == 0\n        return 0\n    else\n        return (a * b) % 10\n\
    \    end\nend", "    if a < 0 || b < 0\n        error(\"Invalid input\")\n   \
    \ elseif b == 0\n        error(\"Invalid input\")\n    else\n        return a\
    \ * b\n    end\nend\n</cell>\n<code language=julia-1.0>", "    if b == 0 \n  \
    \      return 0 \n    else \n        return (a * 10 + b) \nend \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n\
    \    \n    \n\"\"\"\n    ", "    if b == 0\n        return 0\n    else if a ==\
    \ 0\n        return b\n    else if a < 0\n        return multiply(abs(a), -b)\n\
    \    else if a > 9\n        return multiply(a/10, b%10)\n    else\n        return\
    \ a*b\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14, -15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nExamples:\n>>> count_characters(\"\
    Hello World\")\n12\n>>> count_characters(\"Hello World!\")\n9\n>>> count_characters(\"\
    Hello World!!\")\n10\n>>> count_characters(\"Hello World!!!\")\n11\n>>> count_characters(\"\
    Hello World!!!\")\n11\n>>> count_characters(\"Hello World!!!\")\n11\n>>> count_characters(\"\
    Hello World!!!\")\n11\n>>> count_characters(\"Hello World!!!\")\n11\n>>> count_characters(\"\
    Hello World!!!\")\n11\n>>> count_characters(\"Hello World!!!\")\n11\n>>> count_characters(\"\
    Hello World!!!\")\n11\n>>> count_characters(\"Hello World!!!\")\n11\n>>> count_characters(\"\
    Hello World!!!\")\n11\n>>> count_characters(\"Hello World!!!\")\n11\n>>> count_characters(\"\
    Hello World!!!\")\n11\n>>> count_characters(\"Hello World!!!\")\n11\n>>> count_characters(\"\
    Hello World!!!\")\n11\n>>> count_characters(\"Hello World!!!\")\n11\n>>> count_characters(\"\
    Hello World!!!\")\n11\n>>> count_characters(\"Hello World!!!\")\n11\n>>> count_characters(\"\
    Hello World!!!\")\n11\n>>> count_characters(\"Hello World!!!\")\n11\n>>> count_characters(\"\
    Hello World!!!\")\n11\n>>> count_characters(\"Hello World!!!\")\n11\n>>> count_characters(\"\
    Hello World!!!\")\n11\n>>> count_characters(\"Hello World!!!\")\n11\n>>> count_characters(\"\
    Hello World!!!\")\n11\n>>> count_characters(\"Hello World!!!\")\n11\n>>> count_characters(\"\
    Hello World!!!\")\n11\n>>> count_characters(\"Hello World!!!\")\n11\n>>> count_characters(\"\
    Hello World!!!\")\n11\n>>> count_characters(\"Hello World!!!\")\n11\n>>> count_characters(\"\
    Hello World!!!\")\n11\n>>> count_characters(\"Hello World!!!\")\n11\n>>> count_characters(\"",
  "    if b == 0\n        0\n    elseif b < 0\n        0\n    else\n        (a * 10\
    \ + b) mod 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148,\
    \ 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) ==\
    \ 0\n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes two integers and returns their sum.\nExamples:\n>>> add(148, 412)\n\
    168\n>>> add(19, 28)\n72\n>>> add(2020, 1851)\n2020\n>>> add(14, -15)\n20\n</text>\n\
    <code language=julia-1.5>", "    if a < 0 || b < 0\n        error(\"Invalid input\"\
    )\n    elseif b == 0\n        return a\n    else\n        return a * b\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test the function\n@test multiply(148,\
    \ 412) == 16\n@test multiply(19, 28) == 72\n@test multiply(2020, 1851) == 0\n\
    @test multiply(14, -15) == 20\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the squares of the unit digits of an integer.\nExamples:\n\
    >>> sum_squares_digits(148)\n16\n>>> sum_squares_digits(19)\n71\n>>> sum_squares_digits(2020)\n\
    0\n>>> sum_squares_digits(14)\n20\n>>> sum_squares_digits(-14)\n20\n>>> sum_squares_digits(-15)\n\
    20\n>>> sum_squares_digits(-16)\n20\n>>> sum_squares_digits(-18)\n20\n>>> sum_squares_digits(-20)\n\
    20\n>>> sum_squares_digits(-21)\n20\n>>> sum_squares_digits(-24)\n20\n>>> sum_squares_digits(-25)\n\
    20\n>>> sum_squares_digits(-26)\n20\n>>> sum_squares_digits(-27)\n20\n>>> sum_squares_digits(-28)\n\
    20\n>>> sum_squares_digits(-29)\n20\n>>> sum_squares_digits(-30)\n20\n>>> sum_squares_digits(-31)\n\
    20\n>>> sum_squares_digits(-32)\n20\n>>> sum_squares_digits(-33)\n20\n>>> sum_squares_digits(-34)\n\
    20\n>>> sum_squares_digits(-35)\n20\n>>> sum_squares_digits(-36)\n20\n>>> sum_squares_digits(-37)\n\
    20\n>>> sum_squares_digits(-38)\n20\n>>> sum_squares_digits(-39)\n20\n>>> sum_squares_digits(-40)\n\
    20\n>>> sum_squares_digits(-41)\n20\n>>> sum_squares_digits(-42)\n20\n>>> sum_squares_digits(-43)\n\
    20\n>>> sum_squares_digits(-44)\n20\n>>> sum_squares_digits(-45)\n20\n>>> sum_squares_digits(-46)\n\
    20\n>>> sum_squares_digits(-47)\n20\n>>> sum_squares_digits(-48)\n20\n>>> sum_squares_digits(",
  "    if b == 0 \n        return 0 \n    else \n        return (a * b) \n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert\
    \ multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14,\
    \ -15) == 20\n</cell>\n<text>\nExercise 2\nWrite a function that takes two integers\
    \ and returns the sum of the unit digits of their product \n(that is, the product\
    \ of the unit digits of their sum).\nExamples:\n>>> multiply(148, 412)\n16\n>>>\
    \ multiply(19, 28)\n72\n>>> multiply(2020, 1851)\n0\n>>> multiply(14, -15)\n20\n\
    Hint: You can use the function multiply to complete this exercise.", "    if a\
    \ < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n        0\n\
    \    else\n        (a * b).digits\n    end\nend", "    if b == 0 \n        return\
    \ 0 \n    else \n        return (a * b) % (10^9 + 7)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14, -15) ==\
    \ 20\n</cell>\n<text>\nExercise 2\nWrite a function that takes an integer and\
    \ returns the sum of its unit digits.\nExamples:\n>>> sum(148)\n16\n>>> sum(19)\n\
    28\n>>> sum(2020)\n1851\n>>> sum(14)\n20\n</text>\n<code language=julia-1.5>",
  "    if b == 0 \n        return 0 \n    else \n        return (a * b) % (10^9 +\
    \ 7)\n    end\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14, -15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes two integers and returns\
    \ the sum of the \n    unit digits of their product (modulo 10^9 + 7).\n    Assume\
    \ the input is always valid.\n    Examples:\n    >>> sum(148, 412)\n    16\n \
    \   >>> sum(19, 28)\n    72\n    >>> sum(2020, 1851)\n    0\n    >>> sum(14, -15)\n\
    \    20\n    \"\"\"", "    if b == 0\n        0\n    elseif b < 0\n        0\n\
    \    else\n        (a * 10 + b) mod 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0\n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes two integers and returns their sum.\nAs a reminder, sum\
    \ is the sum of the numbers from 1 to n.\nExamples:\n>>> sum(range(1, 10))\n55\n\
    >>> sum(range(10, 0, -1))\n0\n>>> sum(range(10, 0, -2))\n0\n>>> sum(range(10,\
    \ 0, -3))\n10\n>>> sum(range(10, 0, -4))\n10\n>>> sum(range(10, 0, -5))\n10\n\
    >>> sum(range(10, 0, -6))\n10\n>>> sum(range(10, 0, -7))\n10\n>>> sum(range(10,\
    \ 0, -8))\n10\n>>> sum(range(10, 0, -9))\n10\n>>> sum(range(10, 0, -10))\n10\n\
    >>> sum(range(10, 0, -11))\n10\n>>> sum(range(10, 0, -12))\n10\n>>> sum(range(10,\
    \ 0, -13))\n10\n>>> sum(range(10, 0, -14))\n10\n>>> sum(range(10, 0, -15))\n10\n\
    >>> sum(range(10, 0, -16))\n10\n>>> sum(range(10, 0, -17))\n10\n>>> sum(range(10,\
    \ 0, -18))\n10\n>>> sum(range(10, 0, -19))\n10\n>>> sum(range(10, 0, -20))\n10\n\
    >>> sum(range(10, 0, -21))\n10\n>>> sum(range(10, 0, -22))\n10\n>>> sum(range(10,\
    \ 0, -23))\n10\n>>> sum(range(10, 0, -24))\n10\n>>> sum(range(10, 0, -25))\n10\n\
    >>> sum(range(10, 0, -26))\n10\n>>> sum(range(10, 0, -27))\n10\n>>> sum(range(10,\
    \ 0, -28))\n10\n>>> sum(range(10, 0, -29))\n10\n>>> sum(range(10, 0, -30))\n10\n\
    >>> sum(range(10, 0, -31))\n10\n>>> sum(range(10, 0, -32))\n10\n>>> sum(range(10,\
    \ 0, -33))\n10\n>>> sum(range(10, 0, -34))\n10\n>>> sum(range(10, 0, -35))\n10\n\
    >>> sum(range(10, 0, -36))\n10\n>>> sum(range(10, 0, -37))\n10\n>>> sum(range(10,\
    \ 0, -38", "    if b == 0 \n        0\n    else\n        (a * 10 + b) mod 10\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148, 412)\
    \ == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0 \n\
    @assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes two integers and returns the sum of the \n    unit digits of their\
    \ product (that is, the product of their unit \n    digits). Assume the input\
    \ is always valid.\n    Examples:\n    >>> sum(148, 412)\n    16\n    >>> sum(19,\
    \ 28)\n    72\n    >>> sum(2020, 1851)\n    0\n    >>> sum(14, -15)\n    20\n\
    \    \"\"\"", "    if b == 0\n        0\n    else\n        (a * 10 * b) mod 10\n\
    end\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work. Try `multiply(148, 412)`\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I even tested it on Julia 0.6.2\n\
    <|/ c |>\n<| c |>\nI tested it on Julia 0.6.2 and it works. I even tested it on\
    \ Julia 0.6.2\n<|/ c |>\n<| c |>\nI tested it on Julia 0.6.2 and it works. I even\
    \ tested it on Julia 0.6.2\n<|/ c |>\n<| c |>\nI tested it on Julia 0.6.2 and\
    \ it works. I even tested it on Julia 0.6.2\n<|/ c |>\n<| a dscore=2 |>\n<code>",
  "    if b == 0 \n        0\n    elseif b < 0 \n        0\n    elseif b > a \n  \
    \      0\n    elseif b == a \n        a\n    elseif b > a \n        0\n    elseif\
    \ b < a \n        0\n    elseif b == a \n        a\n    elseif b == 0 \n     \
    \   a\n    elseif b > 0 \n        0\n    elseif b < 0 \n        0\n    elseif\
    \ b > a \n        0\n    elseif b == a \n        a\n    elseif b > a \n      \
    \  0\n    elseif b < a \n        0\n    elseif b == a \n        a\n    elseif\
    \ b == 0 \n        a\n    elseif b > 0 \n        0\n    elseif b < 0 \n      \
    \  0\n    elseif b > a \n        0\n    elseif b == a \n        a\n    elseif\
    \ b > a \n        0\n    elseif b < a \n        0\n    elseif b == a \n      \
    \  a\n    elseif b == 0 \n        a\n    elseif b > 0 \n        0\n    elseif\
    \ b < 0 \n        0\n    elseif b > a \n        0\n    elseif b == a \n      \
    \  a\n    elseif b > a \n        0\n    elseif b < a \n        0\n    elseif b\
    \ == a \n        a\n    elseif b == 0 \n        a\n    elseif b > 0 \n       \
    \ 0\n    elseif b < 0 \n        0\n    elseif b > a \n        0\n    elseif b\
    \ == a \n        a\n    elseif b > a \n        0\n    elseif b < a \n        0\n\
    \    elseif b == a \n        a\n    elseif b == 0 \n        a\n    elseif b >\
    \ 0 \n        0\n    elseif b < 0 \n        0\n    elseif b > a \n        0\n\
    \    elseif b == a \n        a\n    elseif b > a \n        0\n    elseif b < a\
    \ \n        0\n    elseif b == a \n        a\n    elseif b == 0 \n        a\n\
    \    elseif b > 0 \n        0\n    elseif b < 0 \n        0\n    elseif b > a\
    \ \n        0\n    elseif b == a \n        a\n    elseif b > a \n        0\n \
    \   elseif b < a \n        0\n    elseif b == a \n        a\n    elseif b == 0\
    \ \n        a\n    elseif b > 0 \n        0\n    elseif b < 0 \n        0\n  \
    \  elseif b > a \n        0\n    elseif b", "    if b == 0 \n        0\n    else\n\
    \        (a * 10 + b) mod 10\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    Complete the function that takes two integers and returns \n    the product of\
    \ their unit digits.\n    Assume the input is always valid.\n    Examples:\n \
    \   >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"",
  "    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n  \
    \      0\n    elseif a == 0\n        0\n    else\n        (a * b).digits[1..-1].product\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    >>> multiply(148, 412)\n\
    \    16\n    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n\
    \    >>> multiply(14, -15)\n    20\n    \"\"\"", "    if b == 0 \n        0\n\
    \    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif b < a\
    \ \n        0\n    elseif b == a \n        1\n    elseif b > a \n        0\n \
    \   elseif b == 0 \n        0\n    elseif b == 1 \n        a\n    elseif b ==\
    \ 2 \n        a * 10\n    elseif b == 3 \n        a * 100\n    elseif b == 4 \n\
    \        a * 1000\n    elseif b == 5 \n        a * 10000\n    elseif b == 6 \n\
    \        a * 100000\n    elseif b == 7 \n        a * 1000000\n    elseif b ==\
    \ 8 \n        a * 10000000\n    elseif b == 9 \n        a * 100000000\n    elseif\
    \ b == 10 \n        a * 1000000000\n    elseif b == 11 \n        a * 10000000000\n\
    \    elseif b == 12 \n        a * 100000000000\n    elseif b == 13 \n        a\
    \ * 1000000000000\n    elseif b == 14 \n        a * 10000000000000\n    elseif\
    \ b == 15 \n        a * 100000000000000\n    elseif b == 16 \n        a * 1000000000000000\n\
    \    elseif b == 17 \n        a * 10000000000000000\n    elseif b == 18 \n   \
    \     a * 100000000000000000\n    elseif b == 19 \n        a * 1000000000000000000\n\
    \    elseif b == 20 \n        a * 10000000000000000000\n    elseif b == 21 \n\
    \        a * 100000000000000000000\n    elseif b == 22 \n        a * 1000000000000000000000\n\
    \    elseif b == 23 \n        a * 10000000000000000000000\n    elseif b == 24\
    \ \n        a * 100000000000000000000000\n    elseif b == 25 \n        a * 1000000000000000000000000\n\
    \    elseif b == 26 \n        a * 10000000000000000000000000\n    elseif b ==\
    \ 27 \n        a * 100000000000000000000000000\n    elseif b == 28 \n        a\
    \ * 1000000000000000000000000000\n    elseif b == 29 \n        a * 10000000000000000000000000000\n\
    \    elseif b == 30 \n        a * 100000000000000000000000000000\n    elseif b\
    \ == 31 \n        a * 1000000000000000000000000000000\n    elseif b == 32 \n \
    \       a * 10000000000000000000000000000000\n    elseif b == 33 \n        a *\
    \ 100000000000000000000000000000000\n    elseif b == 34 \n        a * 1000000000000000000000000000000000\n\
    \    elseif b == 35\n        a * 1000000000000000000000000000000000\n    elseif\
    \ b == 36\n        a * 1000000000000000000000000000000000\n    elseif b == 37\n\
    \        a * 1000000000000000000000000000000000\n    elseif b == 38\n        a\
    \ * 1000000000000000000000000000000000\n    elseif b == 39\n        a * 1000000000000000000000000000000000\n\
    \    else", "    if b == 0 \n        0\n    elseif b < 0 \n        0\n    elseif\
    \ b > 0 \n        a * 10^(b-1)\n    else\n        0\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14, -15) ==\
    \ 20\n</cell>\n<text>\nExercise 2\nWrite a function that takes two integers and\
    \ returns the sum of the unit digits. \nAssume that the input is always valid.\n\
    Examples:\n>>> sum(148, 412)\n16\n>>> sum(19, 28)\n72\n>>> sum(2020, 1851)\n0\n\
    >>> sum(14, -15)\n20\n\"\"\"", "    if b == 0\n        return 0\n    \n    if\
    \ a < 0\n        return multiply(-a, b) * -1\n    \n    if b < 0\n        return\
    \ multiply(a, b) * -1\n    \n    if a < b\n        return multiply(a, b) * -1\n\
    \    \n    if a > b\n        return multiply(-a, b) * -1\n    \n    if a < 0\n\
    \        return multiply(-a, b) * -1\n    \n    if b < 0\n        return multiply(a,\
    \ b) * -1\n    \n    if a < b\n        return multiply(a, b) * -1\n    \n    if\
    \ a > b\n        return multiply(-a, b) * -1\n    \n    if a < 0\n        return\
    \ multiply(-a, b) * -1\n    \n    if b < 0\n        return multiply(a, b) * -1\n\
    \    \n    if a < b\n        return multiply(a, b) * -1\n    \n    if a > b\n\
    \        return multiply(-a, b) * -1\n    \n    if a < 0\n        return multiply(-a,\
    \ b) * -1\n    \n    if b < 0\n        return multiply(a, b) * -1\n    \n    if\
    \ a < b\n        return multiply(a, b) * -1\n    \n    if a > b\n        return\
    \ multiply(-a, b) * -1\n    \n    if a < 0\n        return multiply(-a, b) * -1\n\
    \    \n    if b < 0\n        return multiply(a, b) * -1\n    \n    if a < b\n\
    \        return multiply(a, b) * -1\n    \n    if a > b\n        return multiply(-a,\
    \ b) * -1\n    \n    if a < 0\n        return multiply(-a, b) * -1\n    \n   \
    \ if b < 0\n        return multiply(a, b) * -1\n    \n    if a < b\n        return\
    \ multiply(a, b) * -1\n    \n    if a > b\n        return multiply(-a, b) * -1\n\
    \    \n    if a < 0\n        return multiply(-a, b) * -1\n    \n    if b < 0\n\
    \        return multiply(a, b) * -1\n    \n    if a < b\n        return multiply(a,\
    \ b) * -1\n    \n    if a > b\n        return multiply(-a, b) * -1\n    \n   \
    \ if a < 0\n        return multiply(-a, b) * -1\n    \n    if b < 0\n        return\
    \ multiply(a, b) * -1\n    \n    if a < b\n        return multiply(a, b) * -1\n\
    \    \n    if a > b\n        return multiply(-a, b) * -1\n    \n    if a < 0\n\
    \        return multiply(-a, b) * -1\n    \n    if b < 0\n        return multiply(a,\
    \ b) * -1\n    \n    if a < b\n        return multiply(a, b) * -1\n    \n    if\
    \ a > b\n        return multiply(-a, b) * -1\n    \n    if a < 0\n        return\
    \ multiply(-a, b) * -1\n    \n    if b < 0", "    if b == 0 \n        0\n    elseif\
    \ b < 0 \n        0\n    elseif b > 0 \n        (a * 10^(b%10)) * (10^(b/10))\n\
    \    else\n        0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    Complete the function that takes two integers and returns \n    the product of\
    \ their unit digits.\n    Assume the input is always valid.\n    Examples:\n \
    \   >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"",
  "    if b == 0 \n        return 0 \n    else \n        return (a * 10 + b) \nend\
    \ \n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14, -15)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes two integers and returns the sum of the unit digits of\
    \ their product.\nExamples:\n>>> multiply(148, 412)\n16\n>>> multiply(19, 28)\n\
    72\n>>> multiply(2020, 1851)\n0\n>>> multiply(14, -15)\n20\nHint: Use a loop to\
    \ iterate over the digits of your product and add them together.", "    if b ==\
    \ 0 \n        0\n    elseif b < 0 \n        0\n    elseif b > 0 \n        a *\
    \ 10^(b-1)\n    else\n        a * 10^(-b)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    multiply(148, 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\n\
    multiply(14, -15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes two\
    \ integers and returns the sum of the unit digits of their product \n    (i.e.\
    \ the product of their unit digits).\n    Assume the input is always valid.\n\
    \    Examples:\n    >>> sum(148, 412)\n    16\n    >>> sum(19, 28)\n    72\n \
    \   >>> sum(2020, 1851)\n    0\n    >>> sum(14, -15)\n    20\n    \"\"\"", " \
    \   if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a == 0 ||\
    \ b == 0\n        return 0\n    else\n        return (a * b) % 10\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nExamples:\n>>> count_characters(\"\
    Hello World\")\n12\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!!\")\n12\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_character", "    if b == 0\n        0\n    else\n\
    \        (a*b).digits()\n    end\nend", "    if b == 0 \n        0\n    else\n\
    \        (a * 10 + b) mod 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"",
  "    if b == 0 \n        0\n    elseif b < 0 \n        0\n    elseif b > 9 \n  \
    \      0\n    elseif b < a \n        0\n    elseif b == a \n        1\n    elseif\
    \ b > a \n        0\n    elseif b == 0 \n        0\n    elseif b == 1 \n     \
    \   1\n    elseif b == 2 \n        2\n    elseif b == 3 \n        6\n    elseif\
    \ b == 4 \n        24\n    elseif b == 5 \n        120\n    elseif b == 6 \n \
    \       720\n    elseif b == 7 \n        5040\n    elseif b == 8 \n        40320\n\
    \    elseif b == 9 \n        362880\n    elseif b == 10 \n        3628800\n  \
    \  elseif b == 11 \n        39916800\n    elseif b == 12 \n        479001600\n\
    \    elseif b == 13 \n        6227020800\n    elseif b == 14 \n        87178291200\n\
    \    elseif b == 15 \n        1307674368000\n    elseif b == 16 \n        20922789888000\n\
    \    elseif b == 17 \n        355687428096000\n    elseif b == 18 \n        6402373705728000\n\
    \    elseif b == 19 \n        121645100408832000\n    elseif b == 20 \n      \
    \  2432902008176640000\n    elseif b == 21 \n        51090942171709440000\n  \
    \  elseif b == 22 \n        1124000727777607680000\n    elseif b == 23 \n    \
    \    25852016738884976640000\n    elseif b == 24 \n        620448401733239439360000\n\
    \    elseif b == 25 \n        15511210043330985984000000\n    elseif b == 26 \n\
    \        403291461126605635584000000\n    elseif b == 27 \n        10888869450418352160768000000\n\
    \    elseif b == 28 \n        304888344611713860501504000000\n    elseif b ==\
    \ 29 \n        8841761993739701954543616000000\n    elseif b == 30 \n        265252859812191058636308480000000\n\
    \    elseif b == 31 \n        8222838654177922817725562880000000\n    elseif b\
    \ == 32 \n        17592186044416862704291213372960000000\n    elseif b == 33",
  "    if b == 0 \n        return 0 \n    else \n        return (a * b) mod 10 \n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes\
    \ two integers and returns \n    the product of their unit digits.\n    Assume\
    \ the input is always valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n\
    \    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>>\
    \ multiply(14, -15)\n    20\n    \"\"\"", "    if b == 0 \n        return 0 \n\
    \    else \n        return (a * b) mod 10 \nend\n</cell>\n<code language=julia-1.5>\n\
    multiply(148, 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\n\
    multiply(14, -15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes in\
    \ two integers and returns the sum of the \n    unit digits of their product (modulo\
    \ 10).\n    Assume the input is always valid.\n    Examples:\n    >>> sum(148,\
    \ 412)\n    16\n    >>> sum(19, 28)\n    72\n    >>> sum(2020, 1851)\n    0\n\
    \    >>> sum(14, -15)\n    20\n    \"\"\"", "    if a < 0 || b < 0 \n        error(\"\
    Invalid input\")\n    elseif b == 0 \n        error(\"Invalid input\")\n    elseif\
    \ b == 1 \n        return a\n    elseif b > a \n        error(\"Invalid input\"\
    )\n    else\n        return a * b\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if b == 0 \n        0\n    elseif b < 0 \n        0\n    elseif b > 9 \n  \
    \      0\n    elseif b == 0 \n        a\n    elseif b < 0 \n        0\n    elseif\
    \ b > 9 \n        0\n    elseif b == 0 \n        a\n    elseif b < 0 \n      \
    \  0\n    elseif b > 9 \n        0\n    elseif b == 0 \n        a\n    elseif\
    \ b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif b == 0 \n      \
    \  a\n    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif b\
    \ == 0 \n        a\n    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n\
    \    elseif b == 0 \n        a\n    elseif b < 0 \n        0\n    elseif b > 9\
    \ \n        0\n    elseif b == 0 \n        a\n    elseif b < 0 \n        0\n \
    \   elseif b > 9 \n        0\n    elseif b == 0 \n        a\n    elseif b < 0\
    \ \n        0\n    elseif b > 9 \n        0\n    elseif b == 0 \n        a\n \
    \   elseif b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif b == 0\
    \ \n        a\n    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n  \
    \  elseif b == 0 \n        a\n    elseif b < 0 \n        0\n    elseif b > 9 \n\
    \        0\n    elseif b == 0 \n        a\n    elseif b < 0 \n        0\n    elseif\
    \ b > 9 \n        0\n    elseif b == 0 \n        a\n    elseif b < 0 \n      \
    \  0\n    elseif b > 9 \n        0\n    elseif b == 0 \n        a\n    elseif\
    \ b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif b == 0 \n      \
    \  a\n    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif b\
    \ == 0 \n        a\n    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n\
    \    elseif b == 0 \n        a\n    elseif b < 0 \n        0\n    elseif b > 9\
    \ \n        0\n    elseif b == 0 \n        a\n    elseif b < 0 \n        0\n \
    \   elseif b > 9 \n        0\n    elseif b == 0 \n        a\n    elseif b < 0\
    \ \n        0\n    else", "    if b == 0 \n        return 0 \n    else \n    \
    \    return (a * b) mod 10 \nend \n\"\"\"\n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if b == 0 \n        return 0 \n    else\
    \ \n        return (a * b) mod 10\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes two integers and returns their sum.\nExamples:\n>>>\
    \ add(148, 412)\n168\n>>> add(19, 28)\n42\n>>> add(2020, 1851)\n2020\n>>> add(14,\
    \ -15)\n14", "    if a < 0 || b < 0 \n        error(\"The input must be positive\"\
    )\n    elseif b == 0 \n        error(\"The input must be positive\")\n    elseif\
    \ b == 1 \n        return a\n    else\n        return a * multiply(a//10, b%10)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    >>> multiply(148, 412)\n\
    \    16\n    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n\
    \    >>> multiply(14, -15)\n    20\n    \"\"\"", "    if b == 0\n        0\n \
    \   else\n        (a * 10 + b) mod 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0\n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes two integers and returns the sum of the \n    unit digits\
    \ of their product (that is, the sum of the digits of \n    the product of the\
    \ unit digits). Assume that the input is always valid.\n    Examples:\n    >>>\
    \ sum(multiply(148, 412))\n    16\n    >>> sum(multiply(19, 28))\n    72\n   \
    \ >>> sum(multiply(2020, 1851))\n    0\n    >>> sum(multiply(14, -15))\n    20\n\
    \    \"\"\"", "    if b == 0 \n        0\n    elseif b < 0 \n        0\n    elseif\
    \ b > 0 \n        (a * 10 + b) * 10\n    else\n        0\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of two integers. \n\
    Assume the input is always valid.\nExamples:\n>>> add(14, 12)\n24\n>>> add(19,\
    \ 28)\n42\n>>> add(2020, 1851)\n0\n>>> add(14, -15)\n20\n</text>", "    if b ==\
    \ 0 \n        return 0 \n    else \n        return (a * b) mod 10 \nend\n</cell>\n\
    <code language=julia-1.0>", "    if b == 0 \n        0\n    elseif b < 0 \n  \
    \      0\n    elseif b > 9 \n        0\n    elseif b < 10 \n        a * 10\n \
    \   elseif b < 100 \n        a * 10 + b\n    elseif b < 1000 \n        a * 10\
    \ + b * 10\n    elseif b < 10000 \n        a * 10 + b * 100\n    elseif b < 100000\
    \ \n        a * 10 + b * 1000\n    elseif b < 1000000 \n        a * 10 + b * 10000\n\
    \    elseif b < 10000000 \n        a * 10 + b * 100000\n    elseif b < 100000000\
    \ \n        a * 10 + b * 1000000\n    elseif b < 1000000000 \n        a * 10 +\
    \ b * 10000000\n    elseif b < 10000000000 \n        a * 10 + b * 100000000\n\
    \    elseif b < 100000000000 \n        a * 10 + b * 1000000000\n    elseif b <\
    \ 1000000000000 \n        a * 10 + b * 10000000000\n    elseif b < 10000000000000\
    \ \n        a * 10 + b * 100000000000\n    elseif b < 100000000000000 \n     \
    \   a * 10 + b * 1000000000000\n    elseif b < 1000000000000000 \n        a *\
    \ 10 + b * 10000000000000\n    elseif b < 10000000000000000 \n        a * 10 +\
    \ b * 100000000000000\n    elseif b < 100000000000000000 \n        a * 10 + b\
    \ * 1000000000000000\n    elseif b < 1000000000000000000 \n        a * 10 + b\
    \ * 10000000000000000\n    elseif b < 10000000000000000000 \n        a * 10 +\
    \ b * 100000000000000000\n    elseif b < 100000000000000000000 \n        a * 10\
    \ + b * 1000000000000000000\n    elseif b < 1000000000000000000000 \n        a\
    \ * 10 + b * 10000000000000000000\n    elseif b < 10000000000000000000000 \n \
    \       a * 10 + b * 100000000000000000000\n    elseif b < 100000000000000000000000\
    \ \n        a * 10 + b * 1000000000000000000000\n    elseif b < 1000000000000000000000000\
    \ \n        a * 10 + b * 10000000000000000000000\n    elseif b < 10000000000000000000000000\
    \ \n        a * 10 + b * 100000000000000000000000\n    elseif b < 100000000000000000000000000\
    \ \n        a * 10 + b * 1000000000000000000000000\n    elseif b < 1000000000000000000000000000\
    \ \n        a * 10 + b * 10000000000000000000000000\n    elseif b < 10000000000000000000000000000\
    \ \n        a * 10 + b * 100000000000000000000000000\n    elseif b < 100000000000000000000000000000\
    \ \n        a", "    if b == 0 \n        0\n    elseif b < 0 \n        0\n   \
    \ elseif b > 0 \n        a * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 *\
    \ 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10\
    \ * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 *\
    \ 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10\
    \ * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 *\
    \ 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10\
    \ * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 *\
    \ 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10\
    \ * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 *\
    \ 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10\
    \ * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 *\
    \ 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10\
    \ * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 *\
    \ 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10\
    \ * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 *\
    \ 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10\
    \ * 10", "    if b == 0 \n        0\n    else\n        (a*b).digits\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert\
    \ multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14,\
    \ -15) == 20\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum\
    \ of the digits of its input. \nAssume that the input is always valid.\nExamples:\n\
    >>> sum(148, 412)\n16\n>>> sum(19, 28)\n72\n>>> sum(2020, 1851)\n0\n>>> sum(14,\
    \ -15)\n20\n\"\"\"", "    if b == 0 \n        return 0 \n    else \n        return\
    \ (a * b) mod 10 \nend \n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n\
    </cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14, -15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes two integers and returns\
    \ the sum of the unit digits of their product \n    (i.e., if the product is 148,\
    \ the function should return 16).\n    Assume the input is always valid.\n   \
    \ Examples:\n    >>> sum(148, 412)\n    16\n    >>> sum(19, 28)\n    72\n    >>>\
    \ sum(2020, 1851)\n    0\n    >>> sum(14, -15)\n    20\n    \"\"\"", "    if a\
    \ < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n        return\
    \ a\n    else\n        return a * b\n    end\nend", "    if a < 0 || b < 0 \n\
    \        error(\"Invalid input\")\n    else if a == 0 || b == 0\n        error(\"\
    Invalid input\")\n    else\n        return a * b\nend\n</cell>\n<code language=julia-1.5>\n\
    multiply(148, 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\n\
    multiply(14, -15)\n</cell>\n<text>\nExercise 3\nWrite a function that takes an\
    \ integer and returns the sum of its unit digits.\nExamples:\n>>> sum(148)\n16\n\
    >>> sum(19)\n28\n>>> sum(2020)\n1851\n>>> sum(14)\n20\n</text>\n<code language=julia-1.5>",
  "    if b == 0 \n        return 0 \n    else \n        return (a * b) % (10^9 +\
    \ 7)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148,\
    \ 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) ==\
    \ 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes two integers and returns the sum of the \n    unit digits of their\
    \ product (modulo 10^9 + 7).\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> sum(148, 412)\n    16\n    >>> sum(19, 28)\n    72\n    >>> sum(2020,\
    \ 1851)\n    0\n    >>> sum(14, -15)\n    20\n    \"\"\"", "    if b == 0 \n \
    \       0\n    else\n        (a*b).digits\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"",
  "    if b == 0 \n        return 0 \n    else \n        return (a * b) mod 10 \n\
    end \n\"\"\"\nComplete the function that takes two integers and returns \n   \
    \ the sum of the unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> sum(148, 412)\n    168\n    >>> sum(19, 28)\n    72\n    >>> sum(2020,\
    \ 1851)\n    2020\n    >>> sum(14, -15)\n    20\n    \"\"\"", "    if b == 0 \n\
    \        0\n    else\n        (a * 10 + b) mod 10\n    end\nend\n</cell>\n<code\
    \ language=julia-1.4>\n\"\"\"Complete the function that takes two integers and\
    \ returns \n    the product of their unit digits.\n    Assume the input is always\
    \ valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19,\
    \ 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n\
    \    20\n    \"\"\"", "    if b == 0 \n        return 0 \n    else \n        return\
    \ (a * b) \nend \n\"\"\"\nComplete the function that takes two integers and returns\
    \ \n    the product of their unit digits and a unit digit of '0'.\n    Assume\
    \ the input is always valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n\
    \    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>>\
    \ multiply(14, -15)\n    20\n    \"\"\"", "    if b == 0 \n        0\n    else\n\
    \        (a * 10 + b) mod 10\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| c\
    \ |>\nThis doesn't work. `multiply(148, 412)` returns `16`, but `multiply(19,\
    \ 28)` returns `72`.\n<|/ c |>\n<| c |>\nYes, I missed that case. Thanks for pointing\
    \ it out. I've updated the answer.\n<|/ c |>\n<| c |>\nThanks for your answer!\
    \ I really appreciate it! I did some research and found that Julia has `divmod`\
    \ which does exactly what I want.\n<|/ c |>\n<| c |>\nI added my own answer, which\
    \ I believe is more efficient.\n<|/ c |>\n<| a dscore=2 |>\nI did some research\
    \ and found that Julia has divmod which does exactly what I want.\n<code>", " \
    \   if b == 0 \n        0\n    elseif b < 0 \n        0\n    elseif b > a \n \
    \       0\n    else\n        (a * b) % 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes an integer $n$ and returns the number of digits in\
    \ $n$. \nExamples:\n$$\nn_digits(123) = 2\nn_digits(1245) = 3\nn_digits(12456)\
    \ = 4\n$$", "    if b == 0 \n        0\n    elseif b < 0 \n        0\n    elseif\
    \ b > 0 \n        0\n    elseif b == 0 \n        a\n    else\n        multiply(a\
    \ % 10, (b / 10) * 10) + a % 10\n    end\nend\n</code>\n<|/ a tags=julia,recursion\
    \ |>\n<| a tags=julia,recursion |>\nHere is a solution using recursion:\n<code>",
  "    if b == 0 \n        return 0 \n    else \n        return (a * b) % 10\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert\
    \ multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14,\
    \ -15) == 20\n</cell>\n<text>\nExercise 3\nWrite a function that takes two integers\
    \ and returns the sum of the unit digits. \nAssume the input is always valid.\n\
    Examples:\n>>> sum(148, 412)\n16\n>>> sum(19, 28)\n72\n>>> sum(2020, 1851)\n0\n\
    >>> sum(14, -15)\n20\n\"\"\"", "    if b == 0\n        0\n    else\n        (a\
    \ * 10 + b) mod 10\n    end\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148,\
    \ 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14, -15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes two integers and returns\
    \ the sum of their unit digits.\nAssume the input is always valid.\nExamples:\n\
    >>> add(148, 412)\n168\n>>> add(19, 28)\n72\n>>> add(2020, 1851)\n0\n>>> add(14,\
    \ -15)\n20\n</text>\n<code language=julia-1.5>", "    if b == 0 \n        return\
    \ 0 \n    else \n        return (a * b) mod 10\nend\n</cell>\n<code language=julia-1.0>\n\
    multiply(148, 412)\n</cell>\n<code language=julia-1.0>\nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.0>\nmultiply(2020, 1851)\n</cell>\n<code language=julia-1.0>\n\
    multiply(14, -15)\n</cell>\n<text>\nExercise 3\nWrite a function that takes two\
    \ integers and returns the sum of the unit digits of their product \n    (i.e.,\
    \ if the product is 148, the function should return 1 + 8).\n    For example,\
    \ add(148, 412) should return 16.\n    \n    Use a while loop to solve this problem.\n\
    \    \n    Use a for loop to solve this problem.\n    \n    Use a for loop to\
    \ solve this problem.\n    \n    Use a for loop to solve this problem.\n    \n\
    \    Use a for loop to solve this problem.\n    \n    Use a for loop to solve\
    \ this problem.\n    \n    Use a for loop to solve this problem.\n    \n    Use\
    \ a for loop to solve this problem.\n    \n    Use a for loop to solve this problem.\n\
    \    \n    Use a for loop to solve this problem.\n    \n    Use a for loop to\
    \ solve this problem.\n    \n    Use a for loop to solve this problem.\n    \n\
    \    Use a for loop to solve this problem.\n    \n    Use a for loop to solve\
    \ this problem.\n    \n    Use a for loop to solve this problem.\n    \n    Use\
    \ a for loop to solve this problem.\n    \n    Use a for loop to solve this problem.\n\
    \    \n    Use a for loop to solve this problem.\n    \n    Use a for loop to\
    \ solve this problem.\n    \n    Use a for loop to solve this problem.\n    \n\
    \    Use a for loop to solve this problem.\n    \n    Use a for loop to solve\
    \ this problem.\n    \n    Use a for loop to solve this problem.\n    \n    Use\
    \ a for loop to solve this problem.\n    \n    Use a for loop to solve this problem.\n\
    \    \n    Use a for loop to solve this problem.\n    \n    Use a for loop to\
    \ solve this problem.\n    \n    Use a for loop to solve this problem.\n    \n\
    \    Use a for loop to solve this problem.\n    \n    Use a for loop to solve\
    \ this problem.\n    \n    Use a for loop to solve this problem.\n    \n    Use\
    \ a ", "    if b == 0 \n        0\n    else \n        (a * b) % 10\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes an integer and returns the sum\
    \ of the unit digits. \nFor example, the sum of the unit digits of the number\
    \ 148 would be 1 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 +\
    \ 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 +\
    \ 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 +\
    \ 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 +\
    \ 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 +\
    \ 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 +\
    \ 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 +\
    \ 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 +\
    \ 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 +\
    \ 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 +\
    \ 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 +\
    \ 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 + 8 +\
    \ 8 + 8 + 8 + 8 + 8", "    if b == 0 \n        0\n    elseif b < 0 \n        0\n\
    \    elseif b > 0 \n        a * 10^(b-1)\n    else\n        0\n    end\nend\n\
    </code>\n<|/ a tags=julia |>\n<| c |>\nThis does not work. `multiply(148, 412)`\
    \ returns `16`, not `72`.\n<|/ c |>\n<| c |>\nI fixed the code so it now works.\
    \ I tested it before posting.\n<|/ c |>\n<| c |>\nI tested it again and it works.\
    \ I must have had a typo when I first tested it.\n<|/ c |>\n<| c |>\nI tested\
    \ it again and it works. I must have had a typo when I first tested it.\n<|/ c\
    \ |>\n<| c |>\nI tested it again and it works. I must have had a typo when I first\
    \ tested it.\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    if a < 0 || b < 0\n  \
    \      error(\"Invalid input\")\n    else if a == 0 || b == 0\n        return\
    \ 0\n    else\n        return (a * b) % 10\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes an integer and returns the sum of the digits\
    \ of that integer.\nExamples:\n>>> sum(148)\n8\n>>> sum(19)\n7\n>>> sum(2020)\n\
    0\n>>> sum(14)\n4\n>>> sum(15)\n5\n>>> sum(0)\n0\n>>> sum(1)\n1\n>>> sum(2)\n\
    2\n>>> sum(3)\n3\n>>> sum(4)\n4\n>>> sum(5)\n5\n>>> sum(6)\n6\n>>> sum(7)\n7\n\
    >>> sum(8)\n8\n>>> sum(9)\n9\n>>> sum(10)\n10\n>>> sum(11)\n11\n>>> sum(12)\n\
    12\n>>> sum(13)\n13\n>>> sum(14)\n14\n>>> sum(15)\n15\n>>> sum(16)\n16\n>>> sum(17)\n\
    17\n>>> sum(18)\n18\n>>> sum(19)\n19\n>>> sum(20)\n20\n>>> sum(21)\n21\n>>> sum(22)\n\
    22\n>>> sum(23)\n23\n>>> sum(24)\n24\n>>> sum(25)\n25\n>>> sum(26)\n26\n>>> sum(27)\n\
    27\n>>> sum(28)\n28\n>>> sum(29)\n29\n>>> sum(30)\n30\n>>> sum(31)\n31\n>>> sum(32)\n\
    32\n>>> sum(33)\n33\n>>> sum(34)\n34\n>>> sum(35)\n35\n>>> sum(36)\n36\n>>> sum(37)\n\
    37\n>>> sum(38)\n38\n>>> sum(39)\n39\n>>> sum(40)\n40\n>>> sum(41)\n41\n>>> sum(42)\n\
    42\n>>> sum(43)\n43\n>>> sum(44)\n44\n>>> sum(45)\n45\n>>> sum(46)\n46\n>>> sum(47)\n\
    47\n>>> sum(48)\n48\n>>> sum(49)\n49\n>>> sum(50)\n50\n>>> sum(51)\n51\n>>> sum(52)\n\
    52\n>>> sum(53)\n53\n>>> sum(54)\n54\n>>> sum(55)\n55\n>>> sum(56)\n56\n>>> sum(57)\n\
    57\n>>> sum(58)\n58\n>>> sum(59)\n59\n>>> sum(60)\n60\n>>> sum(61)\n61\n>>> sum(62)\n\
    62\n>>> sum(63)\n", "    if b == 0 \n        0\n    else\n        (a * 10 + b)\
    \ mod 10\n    end\nend\n</code>\n<|/ a tags=julia,function |>\n<| c |>\nThank\
    \ you for your answer. I tried your code, but I got this error message: ```MethodError:\
    \ no method matching multiply(::Int64, ::Int64)```\n<|/ c |>\n<| c |>\nI edited\
    \ my answer to include the full code I tested with. Can you try it again?\n<|/\
    \ c |>\n<| c |>\nI tested it again and it worked! Thank you so much!\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>", "    if b == 0 \n        return 0 \n    else \n   \
    \     return (a * 10 + b) \n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"",
  "    if b == 0 \n        return 0 \n    else \n        return a * b\n</code>\n<|/\
    \ a tags=haskell,functional-programming |>\n<| a dscore=0 |>\n<code>\nimport Data.List",
  "    if b == 0 \n        0\n    elseif b < 0 \n        0\n    elseif b > 0 \n  \
    \      (a * 10^(b % 10)) % 10\n    else\n        0\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0\n@assert multiply(14, -15) == 20\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the digits\
    \ of its argument. \nFor example, add(123, 456) should return 71.", "    if b\
    \ == 0 \n        0\n    else\n        (a * 10 + b) mod 10\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes two integers and returns the sum\
    \ of the \n    unit digits of their product (modulo 10).\n    Assume the input\
    \ is always valid.\n    Examples:\n    >>> sum(148, 412)\n    16\n    >>> sum(19,\
    \ 28)\n    72\n    >>> sum(2020, 1851)\n    0\n    >>> sum(14, -15)\n    20\n\
    \    \"\"\"", "    if b == 0 \n        0\n    else\n        (a * b) % 10\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148, 412) ==\
    \ 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert\
    \ multiply(14, -15) == 20\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the digits of its input. \nAssume that the input is always\
    \ valid.\nExamples:\n>>> sum(148, 412)\n16\n>>> sum(19, 28)\n72\n>>> sum(2020,\
    \ 1851)\n0\n>>> sum(14, -15)\n20\n\"\"\"", "    if b == 0 \n        0\n    elseif\
    \ b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif b < 10 \n      \
    \  a * 10\n    elseif b < 100 \n        a * 10 + b\n    elseif b < 1000 \n   \
    \     a * 10 + b * 10\n    elseif b < 10000 \n        a * 10 + b * 100\n    elseif\
    \ b < 100000 \n        a * 10 + b * 1000\n    elseif b < 1000000 \n        a *\
    \ 10 + b * 10000\n    elseif b < 10000000 \n        a * 10 + b * 100000\n    elseif\
    \ b < 100000000 \n        a * 10 + b * 1000000\n    elseif b < 1000000000 \n \
    \       a * 10 + b * 10000000\n    elseif b < 10000000000 \n        a * 10 + b\
    \ * 100000000\n    elseif b < 100000000000 \n        a * 10 + b * 1000000000\n\
    \    elseif b < 1000000000000 \n        a * 10 + b * 10000000000\n    elseif b\
    \ < 10000000000000 \n        a * 10 + b * 100000000000\n    elseif b < 100000000000000\
    \ \n        a * 10 + b * 1000000000000\n    elseif b < 1000000000000000 \n   \
    \     a * 10 + b * 10000000000000\n    elseif b < 10000000000000000 \n       \
    \ a * 10 + b * 100000000000000\n    elseif b < 100000000000000000 \n        a\
    \ * 10 + b * 1000000000000000\n    elseif b < 1000000000000000000 \n        a\
    \ * 10 + b * 10000000000000000\n    elseif b < 10000000000000000000 \n       \
    \ a * 10 + b * 100000000000000000\n    elseif b < 100000000000000000000 \n   \
    \     a * 10 + b * 1000000000000000000\n    elseif b < 1000000000000000000000\
    \ \n        a * 10 + b * 10000000000000000000\n    elseif b < 10000000000000000000000\
    \ \n        a * 10 + b * 100000000000000000000\n    elseif b < 100000000000000000000000\
    \ \n        a * 10 + b * 1000000000000000000000\n    elseif b < 1000000000000000000000000\
    \ \n        a * 10 + b * 10000000000000000000000\n    elseif b < 10000000000000000000000000\
    \ \n        a * 10 + b * 100000000000000000000000\n    elseif b < 100000000000000000000000000\
    \ \n        a * 10 + b * 1000000000000000000000000\n    elseif b < 1000000000000000000000000000\
    \ \n        a * 10 + b * 10000000000000000000000000\n    elseif b < 10000000000000000000000000000\
    \ \n        a * 10 + b * 100000000000000000000000000\n    elseif b < 100000000000000000000000000000\
    \ \n        a", "    if b == 0 \n        return 0 \n    else \n        return\
    \ (a * b) mod 10\n    end\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148,\
    \ 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14, -15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes two integers and returns\
    \ the sum of the unit digits. \nAssume the input is always valid.\nExamples:\n\
    >>> sum(148, 412)\n16\n>>> sum(19, 28)\n72\n>>> sum(2020, 1851)\n0\n>>> sum(14,\
    \ -15)\n20\n\"\"\"", "    if b == 0 \n        return 0 \n    else \n        return\
    \ (a * b) \n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148,\
    \ 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) ==\
    \ 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the sum of its unit digits. \nAssume that the input is always valid.\n\
    Examples:\n>>> sum(148, 412)\n16\n>>> sum(19, 28)\n72\n>>> sum(2020, 1851)\n0\n\
    >>> sum(14, -15)\n20\n\"\"\"", "    if b == 0 \n        return 0 \n    else \n\
    \        return (a * b) mod 10 \nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"",
  "    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n  \
    \      return a\n    else\n        return a*b\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes an integer and returns the sum of the\
    \ unit digits of that integer.\nExamples:\n>>> sum(148)\n16\n>>> sum(19)\n7\n\
    >>> sum(2020)\n0\n>>> sum(14)\n20\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n\
    15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n\
    15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n\
    15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n\
    15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n\
    15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n\
    15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n\
    15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n\
    15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n\
    15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n\
    15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n\
    15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n\
    15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n\
    15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n\
    15\n>>> sum(15)\n15\n>>> sum(15)\n15\n>>> sum(15)\n15", "    if b == 0 \n    \
    \    0\n    elseif b < 0 \n        0\n    elseif b > 0 \n        0\n    elseif\
    \ b == 0 \n        a\n    else\n        multiply(a/10, b%10)*10 + a*b%10\n   \
    \ end\nend\n</code>\n<|/ a tags=recursion,julia,algorithm |>\n<| c |>\nThis doesn't\
    \ work. Try it with `multiply(148, 412)`.\n<|/ c |>\n<| c |>\nI fixed the bug.\
    \ Thanks for pointing it out.\n<|/ c |>\n<| a dscore=2 |>\nThe other answers here\
    \ are great, but I wanted to add my own.\nI wrote a package called UnitDigits\
    \ that does this for you. Here are some examples:\n<code>\njulia> using UnitDigits",
  "    if b == 0 \n        0\n    else\n        (a * 10 + b) mod 10\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14, -15) ==\
    \ 20\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ digits of its input. \nAssume that the input is always valid.\nExamples:\n>>>\
    \ sum(1234)\n4\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)",
  "    if b == 0 \n        0\n    elseif b < 0 \n        0\n    elseif b > 0 \n  \
    \      0\n    elseif b == 0 \n        a\n    elseif b == 1 \n        a\n    elseif\
    \ b == 2 \n        a * 10\n    elseif b == 3 \n        a * 100\n    elseif b ==\
    \ 4 \n        a * 1000\n    elseif b == 5 \n        a * 10000\n    elseif b ==\
    \ 6 \n        a * 100000\n    elseif b == 7 \n        a * 1000000\n    elseif\
    \ b == 8 \n        a * 10000000\n    elseif b == 9 \n        a * 100000000\n \
    \   elseif b == 10 \n        a * 1000000000\n    elseif b == 11 \n        a *\
    \ 10000000000\n    elseif b == 12 \n        a * 100000000000\n    elseif b ==\
    \ 13 \n        a * 1000000000000\n    elseif b == 14 \n        a * 10000000000000\n\
    \    elseif b == 15 \n        a * 100000000000000\n    elseif b == 16 \n     \
    \   a * 1000000000000000\n    elseif b == 17 \n        a * 10000000000000000\n\
    \    elseif b == 18 \n        a * 100000000000000000\n    elseif b == 19 \n  \
    \      a * 1000000000000000000\n    elseif b == 20 \n        a * 10000000000000000000\n\
    \    elseif b == 21 \n        a * 100000000000000000000\n    elseif b == 22 \n\
    \        a * 1000000000000000000000\n    elseif b == 23 \n        a * 10000000000000000000000\n\
    \    elseif b == 24 \n        a * 100000000000000000000000\n    elseif b == 25\
    \ \n        a * 1000000000000000000000000\n    elseif b == 26 \n        a * 10000000000000000000000000\n\
    \    elseif b == 27 \n        a * 100000000000000000000000000\n    elseif b ==\
    \ 28 \n        a * 1000000000000000000000000000\n    elseif b == 29 \n       \
    \ a * 10000000000000000000000000000\n    elseif b == 30 \n        a * 100000000000000000000000000000\n\
    \    elseif b == 31 \n        a * 1000000000000000000000000000000\n    elseif\
    \ b == 32 \n        a * 10000000000000000000000000000000\n    elseif b == 33 \n\
    \        a * 100000000000000000000000000000000\n    elseif b == 34 \n        a\
    \ * 1000000000000000000000000000000000\n    elseif b == 35\n        a * 10000000000000000000000000000000000\n\
    \    elseif b == 36\n        a * 100000000000000000000000000000000000\n    elseif\
    \ b == 37\n        a * 1000000000000000000000000000000000000\n    elseif b ==\
    \ 38\n        a * 10000000000000000000000000000000000000\n    elseif b == 39\n\
    \        a * 100000000000000000000000000000000000000\n    elseif b == 40\n   \
    \     a * 1000000000000000000000000000000000000000\n    elseif b == 41\n     \
    \   a * 10000000000000000000000000000000000", "    if b == 0 \n        return\
    \ 0 \n    else \n        return (a * b) % (10^9 + 7)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14, -15) ==\
    \ 20\n</cell>\n<text>\nProblem 3\nWrite a function that takes a string and returns\
    \ the number of times each character appears in the string.\nExamples:\n>>> count_chars(\"\
    hello\")\n{'h': 2, 'e': 2, 'l': 2, 'o': 1}\n>>> count_chars(\"How are you?\")\n\
    {'H': 1, 'e': 1, 'l': 2, 'o': 2, '?': 1}\n>>> count_chars(\"The quick brown fox\
    \ jumps over the lazy dog\")\n{'T': 2, 'h': 2, 'q': 2, 'u': 2, 'e': 2, 'r': 2,\
    \ 'n': 2, 'g': 2, 'o': 2, 'f': 2, 'x': 2, 'j': 2, 's': 2, 'u': 2, 'y': 2, 'k':\
    \ 2, 'w': 2, 'o': 2, 'v': 2, 'e': 2, 'd': 2, 'l': 2, 'y': 2, 'o': 2, 'h': 2, 'g':\
    \ 2, 'm': 2, 'p': 2, 'o': 2}\n>>> count_chars(\"The quick brown fox jumps over\
    \ the lazy dog\")\n{'T': 2, 'h': 2, 'q': 2, 'u': 2, 'e': 2, 'r': 2, 'n': 2, 'g':\
    \ 2, 'o': 2, 'f': 2, 'x': 2, 'j': 2, 's': 2, 'u': 2, 'y': 2, 'k': 2, 'w': 2, 'o':\
    \ 2, 'v': 2, 'e': 2, 'd': 2, 'l': 2, 'y': 2, 'o': 2, 'h': 2, 'g': 2, 'm': 2, 'p':\
    \ 2, 'o': 2}\n>>> count_chars(\"The quick brown fox jumps over the lazy dog\"\
    )\n{'T': 2, 'h': 2, 'q': 2, 'u': 2, 'e': 2, 'r': 2, 'n': 2, 'g': 2, 'o': 2, 'f':\
    \ 2, 'x': 2, 'j': 2, 's': 2, 'u': 2, 'y': 2, 'k': 2, 'w': 2, 'o': 2, 'v': 2, 'e':\
    \ 2, 'd': 2, 'l': 2, 'y': 2, 'o': 2, 'h': 2, 'g': 2, 'm': 2, 'p': 2, 'o': 2}\n\
    >>> count_chars(\"The quick brown fox jumps over the lazy dog\")\n{'T': 2, 'h':\
    \ 2, 'q': 2, 'u': 2, 'e': 2, 'r': 2, 'n': 2, 'g': 2, 'o': 2, 'f': 2, 'x': 2, 'j':\
    \ 2, 's': 2, 'u': 2, 'y': 2, 'k': 2, 'w': 2, '", "    if b == 0 \n        0\n\
    \    elseif b < 0 \n        0\n    elseif b > a \n        0\n    elseif b == a\
    \ \n        a\n    else\n        multiply(b, a % b)\n    end\nend\n</code>\n<|/\
    \ a tags=julia,recursion,algorithm |>\n<| a dscore=2 |>\nI wrote a recursive function\
    \ which returns the product of its unit digits. I used the fact that if n is divisible\
    \ by 10, then its unit digits will be divisible by 10 as well. \n<code>", "  \
    \  if b == 0 \n        return 0 \n    else \n        return (a * b) mod 10 \n\
    end \n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14, -15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an integer and returns the sum of the unit digits of that\
    \ integer.\nExamples:\n>>> sum(148)\n2\n>>> sum(19)\n3\n>>> sum(2020)\n0\n>>>\
    \ sum(14)\n4\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n\
    >>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n\
    5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n5\n>>> sum(15)\n", "    if b ==\
    \ 0\n        return a\n    \n    if a < 0\n        return multiply(-a, b)\n  \
    \  \n    if b < 0\n        return multiply(a, -b)\n    \n    if a < b\n      \
    \  return multiply(a, b)\n    \n    if a > b\n        return multiply(-a, b)\n\
    \    \n    if a < b\n        return multiply(a, b)\n    \n    return 0\nend",
  "    if a < 0 || b < 0\n        error(\"Invalid input\")\n    else\n        return\
    \ a * b\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the\
    \ function that takes two integers and returns \n    the product of their unit\
    \ digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148,\
    \ 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n\
    \    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"", "    if a < 0 || b < 0\
    \ \n        error(\"Invalid input\")\n    else if a == 0 || b == 0\n        error(\"\
    Invalid input\")\n    else\n        return (a * b) % 10\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of characters in the string.\nExamples:\n>>> count_characters(\"Hello World\"\
    )\n12\n>>> count_characters(\"Hello World!\")\n10\n>>> count_characters(\"Hello\
    \ World!\", true)\n5\n>>> count_characters(\"Hello World!\", false)\n6\n>>> count_characters(\"\
    Hello World!\", true)\n5\n>>> count_characters(\"Hello World!\", false)\n6\n>>>\
    \ count_characters(\"Hello World!\", true)\n5\n>>> count_characters(\"Hello World!\"\
    , false)\n6\n>>> count_characters(\"Hello World!\", true)\n5\n>>> count_characters(\"\
    Hello World!\", false)\n6\n>>> count_characters(\"Hello World!\", true)\n5\n>>>\
    \ count_characters(\"Hello World!\", false)\n6\n>>> count_characters(\"Hello World!\"\
    , true)\n5\n>>> count_characters(\"Hello World!\", false)\n6\n>>> count_characters(\"\
    Hello World!\", true)\n5\n>>> count_characters(\"Hello World!\", false)\n6\n>>>\
    \ count_characters(\"Hello World!\", true)\n5\n>>> count_characters(\"Hello World!\"\
    , false)\n6\n>>> count_characters(\"Hello World!\", true)\n5\n>>> count_characters(\"\
    Hello World!\", false)\n6\n>>> count_characters(\"Hello World!\", true)\n5\n>>>\
    \ count_characters(\"Hello World!\", false)\n6\n>>> count_characters(\"Hello World!\"\
    , true)\n5\n>>> count_characters(\"Hello World!\", false)\n6\n>>> count_characters(\"\
    Hello World!\", true)\n5\n>>> count_characters(\"Hello World!\", false)\n6\n>>>\
    \ count_characters(\"Hello World!\", true)\n5\n>>> count_characters(\"Hello World!\"\
    , false)\n6\n>>> count_characters(\"Hello World!\", true)\n5\n>>> count_characters(\"\
    Hello World!\", false)\n6\n>>> count_characters(\"Hello World!\", true)\n5\n>>>\
    \ count_characters(\"Hello World!\", false)\n6\n>>> count_characters(\"Hello World!\"\
    , true)\n5\n>>> count_characters(\"Hello World!\", false)\n6\n>>> count_characters(\"\
    Hello World!\", true)\n5\n>>> count_characters(\"Hello World!\", false)\n6\n>>>\
    \ count_character", "    if a < 0 or b < 0\n        error(\"Invalid input\")\n\
    \    elseif b == 0\n        0\n    else\n        (a * b).digits\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes two\
    \ integers and returns \n    the product of their unit digits.\n    Assume the\
    \ input is always valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n\
    \    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>>\
    \ multiply(14, -15)\n    20\n    \"\"\"", "    if a < 0 || b < 0\n        error(\"\
    Invalid input\")\n    elseif b == 0\n        return a\n    else\n        return\
    \ a*b\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if b == 0 \n  \
    \      0\n    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif\
    \ b == 0 \n        a\n    elseif b == 1 \n        10\n    elseif b == 2 \n   \
    \     20\n    elseif b == 3 \n        30\n    elseif b == 4 \n        40\n   \
    \ elseif b == 5 \n        50\n    elseif b == 6 \n        60\n    elseif b ==\
    \ 7 \n        70\n    elseif b == 8 \n        80\n    elseif b == 9 \n       \
    \ 90\n    elseif b == 10 \n        100\n    elseif b == 11 \n        110\n   \
    \ elseif b == 12 \n        120\n    elseif b == 13 \n        130\n    elseif b\
    \ == 14 \n        140\n    elseif b == 15 \n        150\n    elseif b == 16 \n\
    \        160\n    elseif b == 17 \n        170\n    elseif b == 18 \n        180\n\
    \    elseif b == 19 \n        190\n    elseif b == 20 \n        200\n    elseif\
    \ b == 21 \n        210\n    elseif b == 22 \n        220\n    elseif b == 23\
    \ \n        230\n    elseif b == 24 \n        240\n    elseif b == 25 \n     \
    \   250\n    elseif b == 26 \n        260\n    elseif b == 27 \n        270\n\
    \    elseif b == 28 \n        280\n    elseif b == 29 \n        290\n    elseif\
    \ b == 30 \n        300\n    elseif b == 31 \n        310\n    elseif b == 32\
    \ \n        320\n    elseif b == 33 \n        330\n    elseif b == 34 \n     \
    \   340\n    elseif b == 35\n        350\n    elseif b == 36\n        360\n  \
    \  elseif b == 37\n        370\n    elseif b == 38\n        380\n    elseif b\
    \ == 39\n        390\n    elseif b == 40\n        400\n    elseif b == 41 \n \
    \       410\n    elseif b == 42 \n        420\n    elseif b == 43 \n        430\n\
    \    elseif b == 44 \n        440\n    elseif b == 45 \n        450\n    elseif\
    \ b == 46 \n        460\n    elseif b == 47 \n        470\n    elseif b == 48\
    \ \n        480\n    elseif b == 49 \n        490\n    elseif b == 50\n      \
    \  500\n    elseif b == 51 \n        510\n    elseif b == 52 \n        520\n \
    \   elseif b == 53 \n        530\n    elseif b == 54", "    if b == 0 \n     \
    \   0\n    elseif b < 0 \n        0\n    elseif b > 0 \n        (a * 10^(b-1))\
    \ * 10^(b-2)\n    else\n        0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"",
  "    if b == 0 \n        0\n    elseif b < 0 \n        0\n    elseif b > 9 \n  \
    \      0\n    elseif b < a \n        0\n    elseif b == a \n        1\n    elseif\
    \ b > a \n        0\n    elseif b == 0 \n        0\n    elseif b == 1 \n     \
    \   1\n    elseif b == 2 \n        2\n    elseif b == 3 \n        6\n    elseif\
    \ b == 4 \n        24\n    elseif b == 5 \n        120\n    elseif b == 6 \n \
    \       720\n    elseif b == 7 \n        5040\n    elseif b == 8 \n        40320\n\
    \    elseif b == 9 \n        362880\n    elseif b == 10 \n        3628800\n  \
    \  elseif b == 11 \n        39916800\n    elseif b == 12 \n        479001600\n\
    \    elseif b == 13 \n        6227020800\n    elseif b == 14 \n        87178291200\n\
    \    elseif b == 15 \n        1307674368000\n    elseif b == 16 \n        20922789888000\n\
    \    elseif b == 17 \n        355687428096000\n    elseif b == 18 \n        6402373705728000\n\
    \    elseif b == 19 \n        121645100408832000\n    elseif b == 20 \n      \
    \  2432902008176640000\n    elseif b == 21 \n        51090942171709440000\n  \
    \  elseif b == 22 \n        1124000727777607680000\n    elseif b == 23 \n    \
    \    25852016738884976640000\n    elseif b == 24 \n        620448401733239439360000\n\
    \    elseif b == 25 \n        15511210043330985984000000\n    elseif b == 26 \n\
    \        403291461126605635584000000\n    elseif b == 27 \n        10888869450418352160768000000\n\
    \    elseif b == 28 \n        304888344611713860501504000000\n    elseif b ==\
    \ 29 \n        8841761993739701954543616000000\n    elseif b == 30 \n        265252859812191058636308480000000\n\
    \    elseif b == 31 \n        8222838654177922817725562880000000\n    elseif b\
    \ == 32 \n        17592186044416862704291213372960000000\n    elseif b == 33",
  "    if b == 0 \n        return 0 \n    else \n        return (a * b) mod 10 \n\
    end\n</cell>\n<code language=julia-1.5>", "    if a < 0 or b < 0 \n        error(\"\
    The input must be positive\")\n    else if a == 0 || b == 0\n        error(\"\
    The input must be positive\")\n    else\n        return a*b\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Complete the function that takes two integers\
    \ and returns \n    the product of their unit digits.\n    Assume the input is\
    \ always valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19,\
    \ 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n\
    \    20\n    \"\"\"", "    if b == 0 \n        0\n    else\n        (a * b) %\
    \ 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148,\
    \ 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) ==\
    \ 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the digits of its input. \nFor example, add(123, 456)\
    \ should return 7. \nAssume that the input is always valid.\nExamples:\n>>> add(148,\
    \ 412)\n7\n>>> add(19, 28)\n11\n>>> add(2020, 1851)\n0\n>>> add(14, -15)\n20\n\
    \"\"\"", "    if b == 0 \n        0\n    else\n        (a * 10 + b) mod 10\n \
    \   end\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis doesn't work. `multiply(148,\
    \ 412)` returns `16`, not `72`.\n<|/ c |>\n<| c |>\nThanks, I fixed the answer\n\
    <|/ c |>\n<| a dscore=2 |>\nI believe that this is what you are looking for:\n\
    <code>", "    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif\
    \ b == 0\n        return a\n    else\n        return a * b\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Complete the function that takes two integers\
    \ and returns \n    the product of their unit digits.\n    Assume the input is\
    \ always valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19,\
    \ 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n\
    \    20\n    \"\"\"", "    if b == 0 \n        0\n    else\n        (a * 10^(b-1))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148, 412)\
    \ == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0 \n\
    @assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a positive integer $n$ and returns the number of digits in $n$. \n\
    Examples:\n$n = 1$: returns 1\n$n = 2$: returns 2\n$n = 3$: returns 3\n$n = 4$:\
    \ returns 3\n$n = 5$: returns 3\n$n = 6$: returns 3\n$n = 7$: returns 3\n$n =\
    \ 8$: returns 3\n$n = 9$: returns 3\n$n = 10$: returns 4\n$n = 11$: returns 4\n\
    $n = 12$: returns 4\n$n = 13$: returns 4\n$n = 14$: returns 4\n$n = 15$: returns\
    \ 4\n$n = 16$: returns 4\n$n = 17$: returns 4\n$n = 18$: returns 4\n$n = 19$:\
    \ returns 4\n$n = 20$: returns 4\n$n = 21$: returns 4\n$n = 22$: returns 4\n$n\
    \ = 23$: returns 4\n$n = 24$: returns 4\n$n = 25$: returns 4\n$n = 26$: returns\
    \ 4\n$n = 27$: returns 4\n$n = 28$: returns 4\n$n = 29$: returns 4\n$n = 30$:\
    \ returns 4\n$n = 31$: returns 4\n$n = 32$: returns 4\n$n = 33$: returns 4\n$n\
    \ = 34$: returns 4\n$n = 35$: returns 4\n$n = 36$: returns 4\n$n = 37$: returns\
    \ 4\n$n = 38$: returns 4\n$n = 39$: returns 4\n$n = 40$: returns 4\n$n = 01$:\
    \ returns 4\n$n = 02$: returns 4\n$n = 03$: returns 4\n$n = 04$: returns 4\n$n\
    \ = 05$: returns 4\n$n = 06$: returns 4\n$n = 07$: returns 4\n$n = 08$: returns\
    \ 4\n$n = 09$: returns 4\n$n = 10$: returns 4\n$n = 11$: returns 4\n$n = 12",
  "    if b == 0 \n        return 0 \n    else \n        return (a * b) mod 10 \n\
    end\n</cell>\n<code language=julia-1.5>", "    if b == 0 \n        0\n    else\n\
    \        (a * 10 + b) mod 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes two integers and returns the sum of the unit digits\
    \ of their product \n(that is, the sum of the digits of their product of their\
    \ unit digits).\nExamples:\n>>> multiply(148, 412)\n16\n>>> multiply(19, 28)\n\
    72\n>>> multiply(2020, 1851)\n0\n>>> multiply(14, -15)\n20\nHint: You can use\
    \ the function multiply to compute the product of two integers. \nThen you can\
    \ use the function sum to compute the sum of the digits of their product.", " \
    \   if b == 0 \n        0\n    elseif b < 0 \n        0\n    elseif b > 0 \n \
    \       (a * 10^(b-1)) * 10^(b-2)\n    else\n        0\n    end\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes two integers and returns the sum\
    \ of the \n    unit digits of their product (without using multiplication).\n\
    \    Assume the input is always valid.\n    Examples:\n    >>> sum(148, 412)\n\
    \    16\n    >>> sum(19, 28)\n    72\n    >>> sum(2020, 1851)\n    0\n    >>>\
    \ sum(14, -15)\n    20\n    \"\"\"", "    if b == 0 \n        return 0 \n    else\
    \ \n        return (a * b) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of characters in it.\
    \ \nFor example, \n    count_chars(\"hello\") should return 5.\n    count_chars(\"\
    helloworld\") should return 10.\n    count_chars(\"helloworld!\") should return\
    \ 17.\n    count_chars(\"helloworld!\", true) should return 17.\n    count_chars(\"\
    helloworld!\", false) should return 0.\n    count_chars(\"helloworld!\", true)\
    \ should return 17.\n    count_chars(\"helloworld!\", false) should return 0.\n\
    \    count_chars(\"helloworld!\", true) should return 17.\n    count_chars(\"\
    helloworld!\", false) should return 0.\n    count_chars(\"helloworld!\", true)\
    \ should return 17.\n    count_chars(\"helloworld!\", false) should return 0.\n\
    \    count_chars(\"helloworld!\", true) should return 17.\n    count_chars(\"\
    helloworld!\", false) should return 0.\n    count_chars(\"helloworld!\", true)\
    \ should return 17.\n    count_chars(\"helloworld!\", false) should return 0.\n\
    \    count_chars(\"helloworld!\", true) should return 17.\n    count_chars(\"\
    helloworld!\", false) should return 0.\n    count_chars(\"helloworld!\", true)\
    \ should return 17.\n    count_chars(\"helloworld!\", false) should return 0.\n\
    \    count_chars(\"helloworld!\", true) should return 17.\n    count_chars(\"\
    helloworld!\", false) should return 0.\n    count_chars(\"helloworld!\", true)\
    \ should return 17.\n    count_chars(\"helloworld!\", false) should return 0.\n\
    \    count_chars(\"helloworld!\", true) should return 17.\n    count_chars(\"\
    helloworld!\", false) should return 0.\n    count_chars(\"helloworld!\", true)\
    \ should return 17.\n    count_chars(\"helloworld!\", false) should return 0.\n\
    \    count_chars(\"helloworld!\", true) should return 17.\n    count_chars(\"\
    helloworld!\", false) should return 0.\n    count_chars(\"helloworld!\", true)\
    \ should return 17.\n    count_chars(\"helloworld!\", false) should return 0.\n",
  "    if a < 0 || b < 0\n        error(\"The input must be positive\")\n    elseif\
    \ b == 0\n        error(\"The input must be positive\")\n    elseif b == 1\n \
    \       return a\n    else\n        return a*b\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"",
  "    if b == 0 \n        0\n    else\n        (a * 10 + b) mod 10\n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes two integers and returns\
    \ the sum of the \n    unit digits of their product digits.\n    Assume the input\
    \ is always valid.\n    Examples:\n    >>> sum(148, 412)\n    16\n    >>> sum(19,\
    \ 28)\n    72\n    >>> sum(2020, 1851)\n    0\n    >>> sum(14, -15)\n    20\n\
    \    \"\"\"", "    if b == 0 \n        0\n    elseif b < 0 \n        0\n    elseif\
    \ b > 9 \n        0\n    elseif b < 10 \n        10 * b\n    elseif b < 100 \n\
    \        10 * b * 10\n    elseif b < 1000 \n        10 * b * 10 * 10\n    elseif\
    \ b < 10000 \n        10 * b * 10 * 10 * 10\n    elseif b < 100000 \n        10\
    \ * b * 10 * 10 * 10 * 10\n    elseif b < 1000000 \n        10 * b * 10 * 10 *\
    \ 10 * 10 * 10\n    elseif b < 10000000 \n        10 * b * 10 * 10 * 10 * 10 *\
    \ 10 * 10\n    elseif b < 100000000 \n        10 * b * 10 * 10 * 10 * 10 * 10\
    \ * 10 * 10\n    elseif b < 1000000000 \n        10 * b * 10 * 10 * 10 * 10 *\
    \ 10 * 10 * 10 * 10\n    elseif b < 10000000000 \n        10 * b * 10 * 10 * 10\
    \ * 10 * 10 * 10 * 10 * 10 * 10\n    elseif b < 100000000000 \n        10 * b\
    \ * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10\n    elseif b < 1000000000000\
    \ \n        10 * b * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10\n  \
    \  elseif b < 10000000000000 \n        10 * b * 10 * 10 * 10 * 10 * 10 * 10 *\
    \ 10 * 10 * 10 * 10 * 10 * 10\n    elseif b < 100000000000000 \n        10 * b\
    \ * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10\n    elseif\
    \ b < 1000000000000000 \n        10 * b * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10\
    \ * 10 * 10 * 10 * 10 * 10 * 10\n    elseif b < 10000000000000000 \n        10\
    \ * b * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 *\
    \ 10\n    elseif b < 100000000000000000 \n        10 * b * 10 * 10 * 10 * 10 *\
    \ 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10 * 10\n    elseif b < 1000000000000000000\
    \ \n        10 * b * 10 * 10 * 10", "    if b == 0 \n        0\n    elseif b <\
    \ 0 \n        0\n    elseif b > 9 \n        0\n    elseif b < 10 \n        a *\
    \ 10\n    elseif b < 100 \n        a * 10 + b\n    elseif b < 1000 \n        a\
    \ * 10 + b * 10\n    elseif b < 10000 \n        a * 10 + b * 100\n    elseif b\
    \ < 100000 \n        a * 10 + b * 1000\n    elseif b < 1000000 \n        a * 10\
    \ + b * 10000\n    elseif b < 10000000 \n        a * 10 + b * 100000\n    elseif\
    \ b < 100000000 \n        a * 10 + b * 1000000\n    elseif b < 1000000000 \n \
    \       a * 10 + b * 10000000\n    elseif b < 10000000000 \n        a * 10 + b\
    \ * 100000000\n    elseif b < 100000000000 \n        a * 10 + b * 1000000000\n\
    \    elseif b < 1000000000000 \n        a * 10 + b * 10000000000\n    elseif b\
    \ < 10000000000000 \n        a * 10 + b * 100000000000\n    elseif b < 100000000000000\
    \ \n        a * 10 + b * 1000000000000\n    elseif b < 1000000000000000 \n   \
    \     a * 10 + b * 10000000000000\n    elseif b < 10000000000000000 \n       \
    \ a * 10 + b * 100000000000000\n    elseif b < 100000000000000000 \n        a\
    \ * 10 + b * 1000000000000000\n    elseif b < 1000000000000000000 \n        a\
    \ * 10 + b * 10000000000000000\n    elseif b < 10000000000000000000 \n       \
    \ a * 10 + b * 100000000000000000\n    elseif b < 100000000000000000000 \n   \
    \     a * 10 + b * 1000000000000000000\n    elseif b < 1000000000000000000000\
    \ \n        a * 10 + b * 10000000000000000000\n    elseif b < 10000000000000000000000\
    \ \n        a * 10 + b * 100000000000000000000\n    elseif b < 100000000000000000000000\
    \ \n        a * 10 + b * 1000000000000000000000\n    elseif b < 1000000000000000000000000\
    \ \n        a * 10 + b * 10000000000000000000000\n    elseif b < 10000000000000000000000000\
    \ \n        a * 10 + b * 100000000000000000000000\n    elseif b < 100000000000000000000000000\
    \ \n        a * 10 + b * 1000000000000000000000000\n    elseif b < 1000000000000000000000000000\
    \ \n        a * 10 + b * 10000000000000000000000000\n    elseif b < 10000000000000000000000000000\
    \ \n        a * 10 + b * 100000000000000000000000000\n    elseif b < 100000000000000000000000000000\
    \ \n        a", "    if b == 0 \n        return 0 \n    else \n        return\
    \ (a * b) mod 10\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n\
    </cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14, -15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes two integers and returns\
    \ their sum.\nAssume that the input is always valid.\nExamples:\n>>> sum(148,\
    \ 412)\n168\n>>> sum(19, 28)\n72\n>>> sum(2020, 1851)\n0\n>>> sum(14, -15)\n20\n\
    </text>\n<code language=julia-1.5>", "    if b == 0 \n        return 0 \n    else\
    \ \n        return (a * b % 10) * 10 + a \nend \n</cell>\n<code language=julia-1.5>\n\
    multiply(148, 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\n\
    multiply(14, -15)\n</cell>\n<text>\nExercise\nWrite a function that takes two\
    \ integers and returns the sum of the unit digits of their product (without using\
    \ multiplication).", "    if b == 0 \n        return 0 \n    else \n        return\
    \ a * b\n</code>\n<|/ a tags=haskell,functional-programming |>\n<| c |>\n`multiply`\
    \ doesn't need to return `0` when the second argument is `0`.\n<|/ c |>\n<| c\
    \ |>\nThanks, I fixed it.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nimport Data.List",
  "    if b == 0 \n        return 0 \n    else \n        return (a * b) % 10\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148, 412) ==\
    \ 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert\
    \ multiply(14, -15) == 20\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes two integers and returns the sum of their unit digits.\nAssume the input\
    \ is always valid.\nExamples:\n>>> add(148, 412)\n16\n>>> add(19, 28)\n72\n>>>\
    \ add(2020, 1851)\n0\n>>> add(14, -15)\n20\n\"\"\"", "    if b == 0 \n       \
    \ return 0 \n    else \n        return (a * b) mod 10 \nend\n</cell>\n<code language=julia-1.5>",
  "    if b == 0 \n        0\n    else\n        (a * 10 + b) mod 10\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert\
    \ multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0\n@assert multiply(14,\
    \ -15) == 20\n</cell>\n<text>\nExercise 3\nWrite a function that takes two integers\
    \ and returns their sum.\nAs a reminder, here are some examples of valid inputs:",
  "    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n  \
    \      0\n    elseif b == 1\n        a\n    else\n        multiply(a % 10, (b\
    \ - a) / 10)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete\
    \ the function that takes two integers and returns \n    the product of their\
    \ unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>>\
    \ multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>> multiply(2020,\
    \ 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"", "    if a < 0\
    \ || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n        0\n \
    \   elseif b == 1\n        a\n    else\n        (a * b) % 10\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the digits of an\
    \ integer.\nExamples:\n>>> sum(1234)\n4\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>>\
    \ sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n", "    if b == 0 \n        0\n    else \n        (a * b)\
    \ mod 10\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148, 412)\
    \ == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0 \n\
    @assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the digits of its input. \nAssume that the input is\
    \ always valid.\nExamples:\n>>> sum(1234)\n4\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(0)\n0\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n", "    if a < 0 || b < 0\n        error(\"\
    Invalid input\")\n    elseif b == 0\n        0\n    elseif b == 1\n        a\n\
    \    else\n        multiply(a/10, b%10) * 10 + a%10\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes an integer and returns the sum of its\
    \ unit digits.\nExamples:\n>>> sum(148)\n16\n>>> sum(19)\n28\n>>> sum(2020)\n\
    1851\n>>> sum(14)\n20\n>>> sum(15)\n20\n>>> sum(0)\n0\n>>> sum(1)\n1\n>>> sum(2)\n\
    2\n>>> sum(3)\n3\n>>> sum(4)\n4\n>>> sum(5)\n5\n>>> sum(6)\n6\n>>> sum(7)\n7\n\
    >>> sum(8)\n8\n>>> sum(9)\n9\n>>> sum(10)\n10\n>>> sum(11)\n11\n>>> sum(12)\n\
    12\n>>> sum(13)\n13\n>>> sum(14)\n14\n>>> sum(15)\n15\n>>> sum(16)\n16\n>>> sum(17)\n\
    17\n>>> sum(18)\n18\n>>> sum(19)\n19\n>>> sum(20)\n20\n>>> sum(21)\n21\n>>> sum(22)\n\
    22\n>>> sum(23)\n23\n>>> sum(24)\n24\n>>> sum(25)\n25\n>>> sum(26)\n26\n>>> sum(27)\n\
    27\n>>> sum(28)\n28\n>>> sum(29)\n29\n>>> sum(30)\n30\n>>> sum(31)\n31\n>>> sum(32)\n\
    32\n>>> sum(33)\n33\n>>> sum(34)\n34\n>>> sum(35)\n35\n>>> sum(36)\n36\n>>> sum(37)\n\
    37\n>>> sum(38)\n38\n>>> sum(39)\n39\n>>> sum(40)\n40\n>>> sum(41)\n41\n>>> sum(42)\n\
    42\n>>> sum(43)\n43\n>>> sum(44)\n44\n>>> sum(45)\n45\n>>> sum(46)\n46\n>>> sum(47)\n\
    47\n>>> sum(48)\n48\n>>> sum(49)\n49\n>>> sum(50)\n50\n>>> sum(51)\n51\n>>> sum(52)\n\
    52\n>>> sum(53)\n53\n>>> sum(54)\n54\n>>> sum(55)\n55\n>>> sum(56)\n56\n>>> sum(57)\n\
    57\n>>> sum(58)\n58\n>>> sum(59)\n59\n>>> sum(60)\n60\n>>> sum(61)\n61\n", " \
    \   if b == 0\n        return a\n    \n    digits = floor(log10(abs(b)))\n   \
    \ \n    if digits < 0\n        digits = -digits\n    \n    unitDigits = b / 10^digits\n\
    \    \n    return a * unitDigits\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148,\
    \ 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14, -15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes two integers and returns\
    \ the sum of the unit digits of their product \n(e.g., multiply(148, 412) returns\
    \ 16).\nAssume that the input is always valid.\nExamples:\n>>> multiply(148, 412)\n\
    16\n>>> multiply(19, 28)\n72\n>>> multiply(2020, 1851)\n0\n>>> multiply(14, -15)\n\
    20\n</text>\n<code language=julia-1.5>", "    if b == 0 \n        0\n    else\
    \ \n        (a * b) mod 10\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Complete\
    \ the function that takes two integers and returns \n    the product of their\
    \ unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>>\
    \ multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>> multiply(2020,\
    \ 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"", "    if b == 0\
    \ \n        return 0 \n    else \n        return a * b\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=haskell,functional-programming |>\n<code>\nimport Data.List",
  "    if b == 0 \n        0\n    else \n        multiply(b, a % b)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14, -15)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the sum of two integers, \n    but only if the second\
    \ integer is positive.\n    Examples:\n    >>> add(3, 4)\n    7\n    >>> add(3,\
    \ -4)\n    3\n    >>> add(3, 0)\n    3\n    >>> add(3, -0)\n    3\n    \"\"\"",
  "    if b == 0 \n        0\n    else\n        if a < 0 \n            0\n       \
    \ else\n            a % b\n        end\n    end\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| c |>\nThe `if` statement can be simplified to `if a < 0 then 0 else a\
    \ % b end`.\n<|/ c |>\n<| c |>\nI agree, but I wanted to keep it close to the\
    \ original code as much as possible.\n<|/ c |>\n<| a tags=julia |>\n<code>", " \
    \   if b == 0 \n        return 0 \n    else \n        return (a * 10 + b) \n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14, -15)\n\
    </cell>\n<text>\nExercise: Write a function that takes two integers and returns\
    \ the sum of the unit digits of their product (without using multiplication).",
  "    if b == 0 \n        0\n    elseif b < 0 \n        0\n    elseif b > 0 \n  \
    \      a * 10 * multiply(a, -b)\n    else\n        0\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14, -15) ==\
    \ 20\n</cell>\n<text>\nExercise 3\nWrite a function that takes two integers and\
    \ returns the sum of the unit digits of their product \n    For example: \n  \
    \  >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>> multiply(2020,\
    \ 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    >>> multiply(148, 412)\n\
    \    16\n    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n\
    \    >>> multiply(14, -15)\n    20\n    >>> multiply(148, 412)\n    16\n    >>>\
    \ multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14,\
    \ -15)\n    20\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n\
    \    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n\
    \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    >>> multiply(148,\
    \ 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n\
    \    0\n    >>> multiply(14, -15)\n    20\n    >>> multiply(148, 412)\n    16\n\
    \    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>>\
    \ multiply(14, -15)\n    20\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19,\
    \ 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n\
    \    20\n    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n\
    \    >>> multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    >>>\
    \ multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>> multiply(2020,\
    \ 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    >>> multiply(148, 412)\n\
    \    16\n    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n\
    \    >>> multiply(14, -15)\n    20\n    >>> multiply(", "    if b == 0 \n    \
    \    0\n    elseif b < 0 \n        0\n    elseif b > 0 \n        a * 10^(b-1)\n\
    \    else\n        0\n    end\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148,\
    \ 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14, -15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes two integers and returns\
    \ their sum.\nAssume the input is always valid.\nExamples:\n>>> add(148, 412)\n\
    16\n>>> add(19, 28)\n72\n>>> add(2020, 1851)\n0\n>>> add(14, -15)\n20\n\"\"\"",
  "    if b == 0\n        return 0\n    \n    mult_digits = zeros(10)\n    \n    mult_digits[a%10]\
    \ = a%10\n    \n    mult_digits[b%10] = b%10\n    \n    mult_digits = mult_digits[2:end]\n\
    \    \n    mult_digits = mult_digits * 10\n    \n    mult_digits = sum(mult_digits)\n\
    \    \n    return mult_digits\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148,\
    \ 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14, -15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes two integers and returns\
    \ the sum of the unit digits of their product \n    (i.e. the sum of the digits\
    \ of the product of their unit digits).\n    For example, multiply(148, 412) returns\
    \ 16 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 +\
    \ 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 +\
    \ 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 +\
    \ 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 +\
    \ 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 +\
    \ 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 +\
    \ 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 +\
    \ 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 +\
    \ 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 +\
    \ 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 +\
    \ 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 +\
    \ 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 +\
    \ 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 +\
    \ 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 +\
    \ 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 +\
    \ 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 +\
    \ 0 + 0 + 0 + ", "    if b == 0 \n        return 0 \n    else \n        return\
    \ a * b\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>", "    if b == 0 \n     \
    \   0\n    elseif b < 0 \n        0\n    elseif b > a \n        0\n    else\n\
    \        (a * b) % 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    Complete the function that takes two integers and returns \n    the product of\
    \ their unit digits.\n    Assume the input is always valid.\n    Examples:\n \
    \   >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"",
  "    if b == 0 \n        return 0 \n    else \n        return (a * b) \n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if b == 0 \n        0\n    elseif\
    \ b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif b < 10 \n      \
    \  a * 10\n    elseif b < 100 \n        a * 10 + b\n    elseif b < 1000 \n   \
    \     a * 10 + b / 10\n    elseif b < 10000 \n        a * 10 + b / 100\n    elseif\
    \ b < 100000 \n        a * 10 + b / 1000\n    elseif b < 1000000 \n        a *\
    \ 10 + b / 10000\n    elseif b < 10000000 \n        a * 10 + b / 100000\n    elseif\
    \ b < 100000000 \n        a * 10 + b / 1000000\n    elseif b < 1000000000 \n \
    \       a * 10 + b / 10000000\n    elseif b < 10000000000 \n        a * 10 + b\
    \ / 100000000\n    elseif b < 100000000000 \n        a * 10 + b / 1000000000\n\
    \    elseif b < 1000000000000 \n        a * 10 + b / 10000000000\n    elseif b\
    \ < 10000000000000 \n        a * 10 + b / 100000000000\n    elseif b < 100000000000000\
    \ \n        a * 10 + b / 1000000000000\n    elseif b < 1000000000000000 \n   \
    \     a * 10 + b / 10000000000000\n    elseif b < 10000000000000000 \n       \
    \ a * 10 + b / 100000000000000\n    elseif b < 100000000000000000 \n        a\
    \ * 10 + b / 1000000000000000\n    elseif b < 1000000000000000000 \n        a\
    \ * 10 + b / 10000000000000000\n    elseif b < 10000000000000000000 \n       \
    \ a * 10 + b / 100000000000000000\n    elseif b < 100000000000000000000 \n   \
    \     a * 10 + b / 1000000000000000000\n    elseif b < 1000000000000000000000\
    \ \n        a * 10 + b / 10000000000000000000\n    elseif b < 10000000000000000000000\
    \ \n        a * 10 + b / 100000000000000000000\n    elseif b < 100000000000000000000000\
    \ \n        a * 10 + b / 1000000000000000000000\n    elseif b < 1000000000000000000000000\
    \ \n        a * 10 + b / 10000000000000000000000\n    elseif b < 10000000000000000000000000\
    \ \n        a * 10 + b / 100000000000000000000000\n    elseif b < 100000000000000000000000000\
    \ \n        a * 10 + b / 1000000000000000000000000\n    elseif b < 1000000000000000000000000000\
    \ \n        a * 10 + b / 10000000000000000000000000\n    elseif b < 10000000000000000000000000000\
    \ \n        a * 10 + b / 100000000000000000000000000\n    elseif b < 100000000000000000000000000000\
    \ \n        a", "    if b == 0 \n        0\n    elseif b < 0 \n        0\n   \
    \ elseif b > 9 \n        0\n    elseif b < a \n        0\n    elseif b == a \n\
    \        1\n    elseif b > a \n        0\n    elseif b == 0 \n        0\n    elseif\
    \ b == 1 \n        a\n    elseif b == 2 \n        a * 10\n    elseif b == 3 \n\
    \        a * 100\n    elseif b == 4 \n        a * 1000\n    elseif b == 5 \n \
    \       a * 10000\n    elseif b == 6 \n        a * 100000\n    elseif b == 7 \n\
    \        a * 1000000\n    elseif b == 8 \n        a * 10000000\n    elseif b ==\
    \ 9 \n        a * 100000000\n    elseif b == 10 \n        a * 1000000000\n   \
    \ elseif b == 11 \n        a * 10000000000\n    elseif b == 12 \n        a * 100000000000\n\
    \    elseif b == 13 \n        a * 1000000000000\n    elseif b == 14 \n       \
    \ a * 10000000000000\n    elseif b == 15 \n        a * 100000000000000\n    elseif\
    \ b == 16 \n        a * 1000000000000000\n    elseif b == 17 \n        a * 10000000000000000\n\
    \    elseif b == 18 \n        a * 100000000000000000\n    elseif b == 19 \n  \
    \      a * 1000000000000000000\n    elseif b == 20 \n        a * 10000000000000000000\n\
    \    elseif b == 21 \n        a * 100000000000000000000\n    elseif b == 22 \n\
    \        a * 1000000000000000000000\n    elseif b == 23 \n        a * 10000000000000000000000\n\
    \    elseif b == 24 \n        a * 100000000000000000000000\n    elseif b == 25\
    \ \n        a * 1000000000000000000000000\n    elseif b == 26 \n        a * 10000000000000000000000000\n\
    \    elseif b == 27 \n        a * 100000000000000000000000000\n    elseif b ==\
    \ 28 \n        a * 1000000000000000000000000000\n    elseif b == 29 \n       \
    \ a * 10000000000000000000000000000\n    elseif b == 30 \n        a * 100000000000000000000000000000\n\
    \    elseif b == 31 \n        a * 1000000000000000000000000000000\n    elseif\
    \ b == 32 \n        a * 10000000000000000000000000000000\n    elseif b == 33 \n\
    \        a * 100000000000000000000000000000000\n    elseif b == 34 \n        a\
    \ * 1000000000000000000000000000000000\n    elseif b == 35\n        a * 1000000000000000000000000000000000\n\
    \    elseif b == 36\n        a * 1000000000000000000000000000000000\n    elseif\
    \ b == 37\n        a * 1000000000000000000000000000000000\n    elseif b == 38\n\
    \        a * 1000000000000000000000000000000000\n    elseif b == 39\n        a\
    \ * 1000000000000000000000000000000000\n    elseif ", "    if b == 0 \n      \
    \  0\n    elseif b < 0 \n        0\n    elseif b > a \n        0\n    else\n \
    \       (a * b) % 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes two integers and returns their sum.\nExamples:\n>>>\
    \ add(3, 4)\n7\n>>> add(5, -2)\n3\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>>\
    \ add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n\
    >>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n\
    0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n\
    0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n\
    0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n\
    0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n\
    0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n\
    0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n\
    0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n\
    0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n\
    0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n\
    0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n>>> add(10, -2)\n0\n", "    if a <\
    \ 0 or b < 0 \n        error(\"Invalid input\")\n    else if a == 0 || b == 0\n\
    \        error(\"Invalid input\")\n    else\n        return a * b\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\n\"\"\"\n    digits(a::Int64)::Array{Int64}\n\
    \    digits(a::Int64, b::Int64)::Array{Int64}\n    digits(a::Int64, b::Int64)::Array{Int64}\n\
    \    digits(a::Int64, b::Int64)::Array{Int64}\n    digits(a::Int64, b::Int64)::Array{Int64}\n\
    \    digits(a::Int64, b::Int64)::Array{Int64}\n    digits(a::Int64, b::Int64)::Array{Int64}\n\
    \    digits(a::Int64, b::Int64)::Array{Int64}\n    digits(a::Int64, b::Int64)::Array{Int64}\n\
    \    digits(a::Int64, b::Int64)::Array{Int64}\n    digits(a::Int64, b::Int64)::Array{Int64}\n\
    \    digits(a::Int64, b::Int64)::Array{Int64}\n    digits(a::Int64, b::Int64)::Array{Int64}\n\
    \    digits(a::Int64, b::Int64)::Array{Int64}\n    digits(a::Int64, b::Int64)::Array{Int64}\n\
    \    digits(a::Int64, b::Int64)::Array{Int64}\n    digits(a::Int64, b::Int64)::Array{Int64}\n\
    \    digits(a::Int64, b::Int64)::Array{Int64}\n    digits(a::Int64, b::Int64)::Array{Int64}\n\
    \    digits(a::Int64, b::Int64)::Array{Int64}\n    digits(a::Int64, b::Int64)::Array{Int64}\n\
    \    digits(a::Int64, b::Int64)::Array{Int64}\n    digits(a::Int64, b::Int64)::Array{Int64}\n\
    \    digits(a::Int64, b::Int64)::Array{Int64}\n    digits(a::Int64, b::Int", " \
    \   if b == 0 \n        return 0 \n    else \n        return (a * b) mod 10\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148, 412)\
    \ == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0 \n\
    @assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes an integer $n$ and returns the number of digits in $n$. \nExamples:\n\
    $n = 10$ should return $2$\n$n = 100$ should return $3$\n$n = 1000$ should return\
    \ $4$\n$n = 10000$ should return $5$\n$n = 100000$ should return $6$\n$n = 1000000$\
    \ should return $7$\n$n = 10000000$ should return $8$\n$n = 100000000$ should\
    \ return $9$\n$n = 1000000000$ should return $10$\n$n = 10000000000$ should return\
    \ $11$\n$n = 100000000000$ should return $12$\n$n = 1000000000000$ should return\
    \ $13$\n$n = 10000000000000$ should return $14$\n$n = 100000000000000$ should\
    \ return $15$\n$n = 1000000000000000$ should return $16$\n$n = 10000000000000000$\
    \ should return $17$\n$n = 100000000000000000$ should return $18$\n$n = 1000000000000000000$\
    \ should return $19$\n$n = 10000000000000000000$ should return $20$\n$n = 100000000000000000000$\
    \ should return $21$\n$n = 1000000000000000000000$ should return $22$\n$n = 10000000000000000000000$\
    \ should return $23$\n$n = 100000000000000000000000$ should return $24$\n$n =\
    \ 1000000000000000000000000$ should return $25$\n$n = 10000000000000000000000000$\
    \ should return $26$\n$n = 100000000000000000000000000$ should return $27$\n$n\
    \ = 1000000000000000000000000000$ should return $28$\n$n = 10000000000000000000000000000$\
    \ should return $29$\n$n = 100000000000000000000000000000$ should return $30$\n\
    $n = 1000000000000000000000000000000$ should return $31$\n$n = 10000000000000000000000000000000$\
    \ should return $32$\n$n = 100000000000000000000000000000000$ should return $33$\n\
    $n = 1000000000000000000000000000000000$ should return $34$\n$n = 10000000000000000000000000000000000$\
    \ should return $35$\n$n = 100000000000000000000000000000000000$ should return\
    \ $36$\n$n = 100", "    if b == 0 \n        return 0 \n    else \n        return\
    \ (a * 10 * b) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete\
    \ the function that takes two integers and returns \n    the product of their\
    \ unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>>\
    \ multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>> multiply(2020,\
    \ 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"", "    if b == 0\
    \ \n        0\n    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n  \
    \  elseif b == 0 \n        a\n    elseif b == 1 \n        10\n    elseif b ==\
    \ 2 \n        20\n    elseif b == 3 \n        30\n    elseif b == 4 \n       \
    \ 40\n    elseif b == 5 \n        50\n    elseif b == 6 \n        60\n    elseif\
    \ b == 7 \n        70\n    elseif b == 8 \n        80\n    elseif b == 9 \n  \
    \      90\n    elseif b == 10 \n        100\n    elseif b == 11 \n        110\n\
    \    elseif b == 12 \n        120\n    elseif b == 13 \n        130\n    elseif\
    \ b == 14 \n        140\n    elseif b == 15 \n        150\n    elseif b == 16\
    \ \n        160\n    elseif b == 17 \n        170\n    elseif b == 18 \n     \
    \   180\n    elseif b == 19 \n        190\n    elseif b == 20 \n        200\n\
    \    elseif b == 21 \n        210\n    elseif b == 22 \n        220\n    elseif\
    \ b == 23 \n        230\n    elseif b == 24 \n        240\n    elseif b == 25\
    \ \n        250\n    elseif b == 26 \n        260\n    elseif b == 27 \n     \
    \   270\n    elseif b == 28 \n        280\n    elseif b == 29 \n        290\n\
    \    elseif b == 30 \n        300\n    elseif b == 31 \n        310\n    elseif\
    \ b == 32 \n        320\n    elseif b == 33 \n        330\n    elseif b == 34\
    \ \n        340\n    elseif b == 35\n        350\n    elseif b == 36\n       \
    \ 360\n    elseif b == 37\n        370\n    elseif b == 38\n        380\n    elseif\
    \ b == 39\n        390\n    elseif b == 40\n        400\n    elseif b == 41 \n\
    \        410\n    elseif b == 42 \n        420\n    elseif b == 43 \n        430\n\
    \    elseif b == 44\n        440\n    elseif b == 45\n        450\n    elseif\
    \ b == 46\n        460\n    elseif b == 47\n        470\n    elseif b == 48\n\
    \        480\n    elseif b == 49\n        490\n    elseif b == 50\n        500\n\
    \    elseif b == 51 \n        510\n    elseif b == 52 \n        520\n    elseif\
    \ b == 53 \n        530\n    elseif b == 54\n        540\n", "    if b == 0 \n\
    \        0\n    else \n        multiply(b, a % b)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.4>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.4>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.4>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.4>\nmultiply(14, -15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes two integers and returns their sum.\nExamples:\n>>> add(4,\
    \ 5)\n9\n>>> add(2, -3)\n5\n>>> add(2, 0)\n2\n>>> add(2, -2)\n0\n>>> add(2, -3)\n\
    5\n>>> add(2, -4)\n-2\n>>> add(2, -5)\n-5\n>>> add(2, -6)\n-6\n>>> add(2, -7)\n\
    -7\n>>> add(2, -8)\n-8\n>>> add(2, -9)\n-9\n>>> add(2, -10)\n-10\n>>> add(2, -11)\n\
    -11\n>>> add(2, -12)\n-12\n>>> add(2, -13)\n-13\n>>> add(2, -14)\n-14\n>>> add(2,\
    \ -15)\n-15\n>>> add(2, -16)\n-16\n>>> add(2, -17)\n-17\n>>> add(2, -18)\n-18\n\
    >>> add(2, -19)\n-19\n>>> add(2, -20)\n-20\n>>> add(2, -21)\n-21\n>>> add(2, -22)\n\
    -22\n>>> add(2, -23)\n-23\n>>> add(2, -24)\n-24\n>>> add(2, -25)\n-25\n>>> add(2,\
    \ -26)\n-26\n>>> add(2, -27)\n-27\n>>> add(2, -28)\n-28\n>>> add(2, -29)\n-29\n\
    >>> add(2, -30)\n-30\n>>> add(2, -31)\n-31\n>>> add(2, -32)\n-32\n>>> add(2, -33)\n\
    -33\n>>> add(2, -34)\n-34\n>>> add(2, -35)\n-35\n>>> add(2, -36)\n-36\n>>> add(2,\
    \ -37)\n-37\n>>> add(2, -38)\n-38\n>>> add(2, -39)\n-39\n>>> add(2, -40)\n-40\n\
    >>> add(2, -41)\n-41\n>>> add(2, -42)\n-42\n>>> add(2, -43)\n-43\n>>> add(2, -44)\n\
    -44\n>>> add(2, ", "    if b == 0 \n        0\n    elseif b < 0 \n        0\n\
    \    elseif b > 9 \n        0\n    elseif b < a \n        0\n    else\n      \
    \  (a * b) % 10\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of characters in the string.\nExamples:\n\
    >>> count_characters(\"Hello World\")\n12\n>>> count_characters(\"Hello World!\"\
    )\n11\n>>> count_characters(\"Hello World!!\")\n12\n>>> count_characters(\"Hello\
    \ World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_character", "    if b == 0 \n        return 0\
    \ \n    else \n        return (a * b) mod 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that returns the sum of the digits of its input argument, \n    multiplied\
    \ by its unit digit.\n    Assume the input is always valid.\n    Examples:\n \
    \   >>> sum(148, 412)\n    16\n    >>> sum(19, 28)\n    72\n    >>> sum(2020,\
    \ 1851)\n    0\n    >>> sum(14, -15)\n    20\n    \"\"\"", "    if a < 0 || b\
    \ < 0 \n        error(\"Invalid input\")\n    elseif b == 0 \n        return a\n\
    \    elseif b == 1 \n        return a * b\n    elseif b > 1 \n        return multiply(a,\
    \ b / 10)\n    elseif b < 0 \n        return multiply(a, -b / 10)\n    else \n\
    \        return multiply(a, b % 10)\nend\n</cell>\n<code language=julia-1.0>\n\
    multiply(148, 412)\n</cell>\n<code language=julia-1.0>\nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.0>\nmultiply(2020, 1851)\n</cell>\n<code language=julia-1.0>\n\
    multiply(14, -15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes two\
    \ integers and returns the sum of the unit digits. \nAssume the input is always\
    \ valid.\nExamples:\n>>> sum(148, 412)\n16\n>>> sum(19, 28)\n72\n>>> sum(2020,\
    \ 1851)\n0\n>>> sum(14, -15)\n20\n</text>\n<code language=julia-1.0>", "    if\
    \ b == 0 \n        0\n    elseif b < 0 \n        0\n    elseif b > 9 \n      \
    \  0\n    elseif b < 10 \n        a * 10\n    else\n        a * 10 + b\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes two integers and\
    \ returns their sum.\nExamples:\n>>> sum(148, 412)\n16\n>>> sum(19, 28)\n72\n\
    >>> sum(2020, 1851)\n0\n>>> sum(14, -15)\n20\n</text>", "    if b == 0\n     \
    \   return 0\n    \n    if a < 0\n        return -multiply(abs(a), b)\n    \n\
    \    if b < 0\n        return -multiply(a, b + abs(b))\n    \n    if a < b\n \
    \       return multiply(a - b, b)\n    \n    return a * b\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14, -15) ==\
    \ 20\n</cell>\n<text>\nProblem 7\nWrite a function that returns the number of\
    \ digits in an integer.\nExamples:\n>>> digits(148)\n3\n>>> digits(19)\n2\n>>>\
    \ digits(2020)\n4\n>>> digits(0)\n0\n>>> digits(-14)\n-1\n>>> digits(-15)\n-2\n\
    >>> digits
  "    if b == 0 \n        0\n    else\n        (a * 10 + b) mod 10\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\n@assert multiply(148, 412) == 16\n@assert\
    \ multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14,\
    \ -15) == 20\n</cell>\n<text>\nExercise 2\nWrite a function that takes two integers\
    \ and returns their sum.\nAssume the input is always valid.\nExamples:\n>>> add(148,\
    \ 412)\n164\n>>> add(19, 28)\n73\n>>> add(2020, 1851)\n2020\n>>> add(14, -15)\n\
    14\n</text>\n<code language=julia-1.0>", "    if b == 0\n        0\n    else\n\
    \        (a * 10 + b) mod 10\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes two integers and returns the sum of the \n    unit digits\
    \ of their product (that is, the sum of the unit digits of the\n    product of\
    \ the two integers). Assume the input is always valid.\n    Examples:\n    >>>\
    \ sum(148, 412)\n    16\n    >>> sum(19, 28)\n    72\n    >>> sum(2020, 1851)\n\
    \    0\n    >>> sum(14, -15)\n    20\n    \"\"\"", "    if a < 0 || b < 0 \n \
    \       error(\"Invalid input\")\n    elseif b == 0 \n        error(\"Invalid\
    \ input\")\n    elseif b == 1 \n        return a\n    elseif b == 2 \n       \
    \ return a * 10\n    elseif b == 3 \n        return a * 100\n    elseif b == 4\
    \ \n        return a * 1000\n    elseif b == 5 \n        return a * 10000\n  \
    \  elseif b == 6 \n        return a * 100000\n    elseif b == 7 \n        return\
    \ a * 1000000\n    elseif b == 8 \n        return a * 10000000\n    elseif b ==\
    \ 9 \n        return a * 100000000\n    else\n        error(\"Invalid input\"\
    )\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if b == 0 \n      \
    \  0\n    else\n        (a * 10 + b) mod 10\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    multiply(148, 412)\n</cell>\n<code language=julia-1.4>\nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.4>\nmultiply(2020, 1851)\n</cell>\n<code language=julia-1.4>\n\
    multiply(14, -15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of characters in it.\nExamples:\n>>> count_chars(\"\
    Hello World\")\n12\n>>> count_chars(\"Hello World!\")\n11\n>>> count_chars(\"\
    Hello World!!\")\n12\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"\
    Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"\
    Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"\
    Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"\
    Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"\
    Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"\
    Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"\
    Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"\
    Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"\
    Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"\
    Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"\
    Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"\
    Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"\
    Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"\
    Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"\
    Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"\
    Hello World!!!\")\n13\n>>> count_chars(\"Hello World!!!\")\n13\n>>> count_chars(\"\
    Hello World!!!\")\n", "    if a < 0 || b < 0\n        error(\"Invalid input\"\
    )\n    elseif b == 0\n        return a\n    else\n        return a*b\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes two integers and\
    \ returns the sum of the \nunit digits of their product (that is, the sum of the\
    \ digits of the \nproduct of the two numbers). Assume the input is always valid.\n\
    Examples:\n>>> sum(148, 412)\n16\n>>> sum(19, 28)\n72\n>>> sum(2020, 1851)\n0\n\
    >>> sum(14, -15)\n20\n\"\"\"", "    if b == 0 \n        return 0 \n    else \n\
    \        return (a * b) mod 10 \nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"",
  "    if b == 0 \n        return 0 \n    else \n        return (a * b) mod 10 \n\
    end\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14, -15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an integer and returns the sum of its unit digits.\nExamples:\n\
    >>> sum(148)\n16\n>>> sum(19)\n28\n>>> sum(2020)\n1851\n>>> sum(14)\n20\n>>> sum(15)\n\
    0\n>>> sum(0)\n0\n>>> sum(10)\n10\n>>> sum(100)\n100\n>>> sum(1000)\n1000\n>>>\
    \ sum(10000)\n10000\n>>> sum(100000)\n100000\n>>> sum(1000000)\n1000000\n>>> sum(10000000)\n\
    10000000\n>>> sum(100000000)\n100000000\n>>> sum(1000000000)\n1000000000\n>>>\
    \ sum(10000000000)\n10000000000\n>>> sum(100000000000)\n100000000000\n>>> sum(1000000000000)\n\
    1000000000000\n>>> sum(1000000000001)\n1000000000001\n>>> sum(1000000000002)\n\
    1000000000002\n>>> sum(1000000000003)\n1000000000003\n>>> sum(1000000000004)\n\
    1000000000004\n>>> sum(1000000000005)\n1000000000005\n>>> sum(1000000000006)\n\
    1000000000006\n>>> sum(1000000000007)\n1000000000007\n>>> sum(1000000000008)\n\
    1000000000008\n>>> sum(1000000000009)\n1000000000009\n>>> sum(1000000000010)\n\
    1000000000010\n>>> sum(1000000000011)\n1000000000011\n>>> sum(1000000000012)\n\
    1000000000012\n>>> sum(1000000000013)\n1000000000013\n>>> sum(1000000000014)\n\
    1000000000014\n>>> sum(1000000000015)\n1000000000015\n>>> sum(1000000000016)\n\
    1000000000016\n>>> sum(1000000000017)\n1000000000017\n>>> sum(1000000000018)\n\
    1000000000018\n>>> sum(1000000000019)\n1000000000019\n>>> sum(1000000000020)\n\
    1000000000020\n>>> sum(1000000000021)\n1000000000021\n>>> sum(1000000000022)\n\
    1000000000022\n>>> sum(1000000000023)\n1000000000023\n>>> sum(1000000000024)\n\
    1000000000024\n>>> sum(1000000000025)\n1000000000025\n>>> sum(1000000000026)\n\
    1000000000026\n", "    if a < 0 || b < 0\n        error(\"Invalid input\")\n \
    \   elseif b == 0\n        0\n    elseif b == 1\n        a\n    else\n       \
    \ multiply(a/10, b%10)*10 + multiply(a%10, b)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if b == 0 \n        return 0 \n    else \n        return (a * 10 + b) \nend\n\
    </cell>\n<code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert\
    \ multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14,\
    \ -15) == 20\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the digits of its input. \nAssume that the input is always valid.\nExamples:\n\
    >>> sum(1234)\n4\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n",
  "    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n  \
    \      0\n    else\n        (a * b).digits\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if b == 0 \n        0\n    else\n        (a * 10 + b) mod 10\nend\n</cell>\n\
    <code language=julia-1.5>", "    if b == 0 \n        0\n    else\n        (a *\
    \ b) % 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148,\
    \ 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) ==\
    \ 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the sum of the digits of its input. \nAssume that the input is\
    \ always valid.\nExamples:\n>>> sum(148, 412)\n16\n>>> sum(19, 28)\n72\n>>> sum(2020,\
    \ 1851)\n0\n>>> sum(14, -15)\n20\n\"\"\"", "    if b == 0 \n        0\n    else\
    \ \n        if a < 0 \n            multiply(-a, -b)\n        else \n         \
    \   multiply(a, -b)\n    end\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148,\
    \ 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14, -15)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes two integers and returns\
    \ the sum of the unit digits of their product \n    For example: multiply(148,\
    \ 412) should return 16 + 12 = 26\n    \n    Use a while loop to solve this problem.\
    \ \n    \n    Use a for loop to solve this problem. \n    \n    Use a recursive\
    \ function to solve this problem. \n    \n    Use a while loop to solve this problem.\
    \ \n    \n    Use a for loop to solve this problem. \n    \n    Use a recursive\
    \ function to solve this problem. \n    \n    Use a while loop to solve this problem.\
    \ \n    \n    Use a for loop to solve this problem. \n    \n    Use a recursive\
    \ function to solve this problem. \n    \n    Use a while loop to solve this problem.\
    \ \n    \n    Use a for loop to solve this problem. \n    \n    Use a recursive\
    \ function to solve this problem. \n    \n    Use a while loop to solve this problem.\
    \ \n    \n    Use a for loop to solve this problem. \n    \n    Use a recursive\
    \ function to solve this problem. \n    \n    Use a while loop to solve this problem.\
    \ \n    \n    Use a for loop to solve this problem. \n    \n    Use a recursive\
    \ function to solve this problem. \n    \n    Use a while loop to solve this problem.\
    \ \n    \n    Use a for loop to solve this problem. \n    \n    Use a recursive\
    \ function to solve this problem. \n    \n    Use a while loop to solve this problem.\
    \ \n    \n    Use a for loop to solve this problem. \n    \n    Use a recursive\
    \ function to solve this problem. \n    \n    Use a while loop to solve this problem.\
    \ \n    \n    Use a for loop to solve this problem. \n    \n    Use a recursive\
    \ function to solve this problem. \n    \n    Use a while loop to solve this problem.\
    \ \n    \n    Use a for loop to solve this problem. \n    \n    Use a recursive\
    \ function to ", "    if b == 0 \n        0\n    else\n        (a * 10 + b) mod\
    \ 10\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes two\
    \ integers and returns the sum of the \n    unit digits of their product (that\
    \ is, the sum of the digits of the \n    product of the two integers). Assume\
    \ the input is always valid.\n    Examples:\n    >>> sum(148, 412)\n    16\n \
    \   >>> sum(19, 28)\n    72\n    >>> sum(2020, 1851)\n    0\n    >>> sum(14, -15)\n\
    \    20\n    \"\"\"", "    if b == 0 \n        0\n    else\n        (a*b).digits()\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if b == 0 \n        0\n\
    \    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif b < a\
    \ \n        0\n    else\n        (a * b) % 10\n    end\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nI like your solution, but I believe it would be better to use a\
    \ `while` loop instead of `if` statements.\n<|/ c |>\n<| c |>\nI agree with you.\
    \ I was just trying to solve the problem as I saw the problem and thought of solving\
    \ it this way. Thanks for your suggestion.\n<|/ c |>\n<| a dscore=1 |>\n<code>",
  "    if a < 0 || b < 0\n        return 0 \n    else if a == 0 || b == 0\n      \
    \  return 0 \n    else if a == 0\n        return b \n    else \n        return\
    \ a * b\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    >>> multiply(148, 412)\n\
    \    16\n    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n\
    \    >>> multiply(14, -15)\n    20\n    \"\"\"", "    if b == 0 \n        0\n\
    \    else \n        (a*b).digits[end] = (a*b).digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].digits[end].",
  "    if b == 0 \n        0\n    elseif b < 0 \n        0\n    elseif b > 9 \n  \
    \      0\n    elseif b < 10 \n        a * 10\n    elseif b < 100 \n        a *\
    \ 10 + b\n    elseif b < 1000 \n        a * 10 + b / 10\n    elseif b < 10000\
    \ \n        a * 10 + b / 100\n    elseif b < 100000 \n        a * 10 + b / 1000\n\
    \    elseif b < 1000000 \n        a * 10 + b / 10000\n    elseif b < 10000000\
    \ \n        a * 10 + b / 100000\n    elseif b < 100000000 \n        a * 10 + b\
    \ / 1000000\n    elseif b < 1000000000 \n        a * 10 + b / 10000000\n    elseif\
    \ b < 10000000000 \n        a * 10 + b / 100000000\n    elseif b < 100000000000\
    \ \n        a * 10 + b / 1000000000\n    elseif b < 1000000000000 \n        a\
    \ * 10 + b / 10000000000\n    elseif b < 10000000000000 \n        a * 10 + b /\
    \ 100000000000\n    elseif b < 100000000000000 \n        a * 10 + b / 1000000000000\n\
    \    elseif b < 1000000000000000 \n        a * 10 + b / 10000000000000\n    elseif\
    \ b < 10000000000000000 \n        a * 10 + b / 100000000000000\n    elseif b <\
    \ 100000000000000000 \n        a * 10 + b / 1000000000000000\n    elseif b < 1000000000000000000\
    \ \n        a * 10 + b / 10000000000000000\n    elseif b < 10000000000000000000\
    \ \n        a * 10 + b / 100000000000000000\n    elseif b < 100000000000000000000\
    \ \n        a * 10 + b / 1000000000000000000\n    elseif b < 1000000000000000000000\
    \ \n        a * 10 + b / 10000000000000000000\n    elseif b < 10000000000000000000000\
    \ \n        a * 10 + b / 100000000000000000000\n    elseif b < 100000000000000000000000\
    \ \n        a * 10 + b / 1000000000000000000000\n    elseif b < 1000000000000000000000000\
    \ \n        a * 10 + b / 10000000000000000000000\n    elseif b < 10000000000000000000000000\
    \ \n        a * 10 + b / 100000000000000000000000\n    elseif b < 100000000000000000000000000\
    \ \n        a * 10 + b / 1000000000000000000000000\n    elseif b < 1000000000000000000000000000\
    \ \n        a * 10 + b / 10000000000000000000000000\n    elseif b < 10000000000000000000000000000\
    \ \n        a * 10 + b / 100000000000000000000000000\n    elseif b < 100000000000000000000000000000\
    \ \n        a", "    if b == 0 \n        0\n    elseif b < 0 \n        0\n   \
    \ elseif b > 9 \n        0\n    elseif b == 0 \n        a\n    elseif b == 1 \n\
    \        10\n    elseif b == 2 \n        20\n    elseif b == 3 \n        30\n\
    \    elseif b == 4 \n        40\n    elseif b == 5 \n        50\n    elseif b\
    \ == 6 \n        60\n    elseif b == 7 \n        70\n    elseif b == 8 \n    \
    \    80\n    elseif b == 9 \n        90\n    elseif b == 10 \n        100\n  \
    \  elseif b == 11 \n        110\n    elseif b == 12 \n        120\n    elseif\
    \ b == 13 \n        130\n    elseif b == 14 \n        140\n    elseif b == 15\
    \ \n        150\n    elseif b == 16 \n        160\n    elseif b == 17 \n     \
    \   170\n    elseif b == 18 \n        180\n    elseif b == 19 \n        190\n\
    \    elseif b == 20 \n        200\n    elseif b == 21 \n        210\n    elseif\
    \ b == 22 \n        220\n    elseif b == 23 \n        230\n    elseif b == 24\
    \ \n        240\n    elseif b == 25 \n        250\n    elseif b == 26 \n     \
    \   260\n    elseif b == 27 \n        270\n    elseif b == 28 \n        280\n\
    \    elseif b == 29 \n        290\n    elseif b == 30 \n        300\n    elseif\
    \ b == 31 \n        310\n    elseif b == 32 \n        320\n    elseif b == 33\
    \ \n        330\n    elseif b == 34 \n        340\n    elseif b == 35\n      \
    \  350\n    elseif b == 36\n        360\n    elseif b == 37\n        370\n   \
    \ elseif b == 38\n        380\n    elseif b == 39\n        390\n    elseif b ==\
    \ 40\n        400\n    elseif b == 41\n        410\n    elseif b == 42\n     \
    \   420\n    elseif b == 43\n        430\n    elseif b == 44\n        440\n  \
    \  elseif b == 45\n        450\n    elseif b == 46\n        460\n    elseif b\
    \ == 47\n        470\n    elseif b == 48\n        480\n    elseif b == 49\n  \
    \      490\n    elseif b == 50\n        500\n    elseif b == 51\n        510\n\
    \    elseif b == 52\n        520\n    elseif b == 53\n        530\n    elseif\
    \ b == ", "    if a < 0 || b < 0\n        return -1\n    else\n        return\
    \ a*b\n    end\nend\n</cell>\n<code language=julia-1.5>\n# Test your function\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == -1\n@assert multiply(14, -15) == 20\n</cell>\n<text>\nProblem 3\nThe\
    \ Fibonacci sequence is defined by the formula:", "    if a < 0 || b < 0\n   \
    \     error(\"Invalid input\")\n    elseif b == 0\n        0\n    elseif b ==\
    \ 1\n        a\n    else\n        multiply(a/10, b%10) * 10 + a%10\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14, -15)\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a positive integer and returns the sum of its unit digits.\n\
    Examples:\n>>> sum(148)\n16\n>>> sum(19)\n28\n>>> sum(2020)\n1851\n>>> sum(14)\n\
    20\n>>> sum(-15)\n20\n>>> sum(0)\n0\n>>> sum(1)\n1\n>>> sum(2)\n2\n>>> sum(3)\n\
    3\n>>> sum(4)\n4\n>>> sum(5)\n5\n>>> sum(6)\n6\n>>> sum(7)\n7\n>>> sum(8)\n8\n\
    >>> sum(9)\n9\n>>> sum(10)\n10\n>>> sum(11)\n11\n>>> sum(12)\n12\n>>> sum(13)\n\
    13\n>>> sum(14)\n14\n>>> sum(15)\n15\n>>> sum(16)\n16\n>>> sum(17)\n17\n>>> sum(18)\n\
    18\n>>> sum(19)\n19\n>>> sum(20)\n20\n>>> sum(21)\n21\n>>> sum(22)\n22\n>>> sum(23)\n\
    23\n>>> sum(24)\n24\n>>> sum(25)\n25\n>>> sum(26)\n26\n>>> sum(27)\n27\n>>> sum(28)\n\
    28\n>>> sum(29)\n29\n>>> sum(30)\n30\n>>> sum(31)\n31\n>>> sum(32)\n32\n>>> sum(33)\n\
    33\n>>> sum(34)\n34\n>>> sum(35)\n35\n>>> sum(36)\n36\n>>> sum(37)\n37\n>>> sum(38)\n\
    38\n>>> sum(39)\n39\n>>> sum(40)\n40\n>>> sum(41)\n41\n>>> sum(42)\n42\n>>> sum(43)\n\
    43\n>>> sum(44)\n44\n>>> sum(45)\n45\n>>> sum(46)\n46\n>>> sum(47)\n47\n>>> sum(48)\n\
    48\n>>> sum(49)\n49\n>>> sum(50)\n50\n>>> sum(51)\n51\n>>> sum(52)\n52\n>>> ",
  "    if b == 0 \n        0\n    elseif b < 0 \n        0\n    elseif b > 0 \n  \
    \      (a * 10 + b) \n    else\n        0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"",
  "    if b == 0 \n        return 0 \n    else \n        return (a * b) mod 10 \n\
    end\n</cell>\n<code language=julia-1.4>\n\"\"\"Complete the function that takes\
    \ two integers and returns \n    the product of their unit digits.\n    Assume\
    \ the input is always valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n\
    \    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>>\
    \ multiply(14, -15)\n    20\n    \"\"\"", "    if a < 0 || b < 0\n        return\
    \ -1\n    else if a == 0 || b == 0\n        return 0\n    else\n        return\
    \ (a * b) % 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete\
    \ the function that takes two integers and returns \n    the product of their\
    \ unit digits.\n    Assume the input is always valid.\n    Examples:\n    >>>\
    \ multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>> multiply(2020,\
    \ 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"", "    if b == 0\
    \ \n        return 0 \n    else \n        return (a * b) mod 10 \nend\n</cell>\n\
    <code language=julia-1.0>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.0>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.0>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.0>\nmultiply(14, -15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes two integers and returns their sum.\nExamples:\n>>> add(4,\
    \ 5)\n10\n>>> add(2, 3)\n5\n>>> add(10, -5)\n5\n>>> add(10, 0)\n10\n>>> add(10,\
    \ -10)\n0\n>>> add(10, -100)\n10\n>>> add(10, -1000)\n10\n>>> add(10, -10000)\n\
    10\n>>> add(10, -100000)\n10\n>>> add(10, -1000000)\n10\n>>> add(10, -10000000)\n\
    10\n>>> add(10, -100000000)\n10\n>>> add(10, -1000000000)\n10\n>>> add(10, -10000000000)\n\
    10\n>>> add(10, -100000000000)\n10\n>>> add(10, -1000000000000)\n10\n>>> add(10,\
    \ -10000000000000)\n10\n>>> add(10, -100000000000000)\n10\n>>> add(10, -1000000000000000)\n\
    10\n>>> add(10, -10000000000000000)\n10\n>>> add(10, -100000000000000000)\n10\n\
    >>> add(10, -1000000000000000000)\n10\n>>> add(10, -10000000000000000000)\n10\n\
    >>> add(10, -100000000000000000000)\n10\n>>> add(10, -100000000000000000000)\n\
    10\n>>> add(10, -100000000000000000000)\n10\n>>> add(10, -100000000000000000000)\n\
    10\n>>> add(10, -100000000000000000000)\n10\n>>> add(10, -100000000000000000000)\n\
    10\n>>> add(10, -100000000000000000000)\n10\n>>> add(10, -100000000000000000000)\n\
    10\n>>> add(10, -100000000000000000000)\n10\n>>> add(10, -100000000000000000000)\n\
    10\n>>> add(10, -100000000000000000000)\n10\n>>> add(10, -100000000000000000000)\n\
    10\n>>> add(10, -100000000000000000000)\n10\n>>> add(10, -100000000000000000000)\n\
    10\n>>> add(10, -100000000000000000000)\n10\n>>> add(10, -100000000000000000000)\n\
    10\n>>> add(10, -100000000000000000000)\n10\n>>> add(10, -100000000000000000000)\n\
    10\n>>> add(10, -100000000000000000000)\n10\n>>> add(10, -100000000000000000000)\n\
    10\n>>> add(10, -100", "    if b == 0 \n        0\n    elseif b < 0 \n       \
    \ 0\n    elseif b > 0 \n        0\n    else\n        (a * 10 + b) mod 10\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14, -15)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the sum of the digits\
    \ of its input. \nAssume that the input is always valid.\nExamples:\n>>> sum(148,\
    \ 412)\n16\n>>> sum(19, 28)\n72\n>>> sum(2020, 1851)\n0\n>>> sum(14, -15)\n20\n\
    </text>\n<code language=julia-1.5>", "    if b == 0 \n        0\n    else\n  \
    \      (a * 10 + b) mod 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    multiply(148, 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\n\
    multiply(14, -15)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns the number of characters in the string.\nExamples:\n>>> count_characters(\"\
    Hello World\")\n10\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!!\")\n12\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n", "    if b == 0 \n        0\n    else \n        if a < 0\
    \ \n            0\n        else \n            multiply(abs(a), abs(b)) \n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes\
    \ two integers and returns \n    the product of their unit digits.\n    Assume\
    \ the input is always valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n\
    \    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>>\
    \ multiply(14, -15)\n    20\n    \"\"\"", "    if a < 0 || b < 0\n        error(\"\
    Invalid input\")\n    elseif b == 0\n        0\n    elseif a == 0\n        0\n\
    \    else\n        (a * b) % 10\n    end\nend", "    if a < 0 || b < 0\n     \
    \   error(\"Invalid input\")\n    else if a == 0 || b == 0\n        return 0\n\
    \    else\n        return (a * b) % 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0\n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of its unit digits. \nAssume the input is always\
    \ valid.\nExamples:\n>>> sum(148, 412)\n16\n>>> sum(19, 28)\n72\n>>> sum(2020,\
    \ 1851)\n0\n>>> sum(14, -15)\n20\n\"\"\"", "    if b == 0 \n        0\n    elseif\
    \ b < 0 \n        0\n    elseif b > 0 \n        (a * 10 + b) \n    elseif b <\
    \ 0 \n        0\n    elseif b > 0 \n        0\n    else \n        0\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14, -15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an integer and returns the sum of its unit digits.\nExamples:\n\
    >>> sum(148)\n16\n>>> sum(19)\n28\n>>> sum(2020)\n1851\n>>> sum(14)\n20\n>>> sum(-15)\n\
    20\n>>> sum(0)\n0\n>>> sum(NaN)\n0\n>>> sum(Inf)\n0\n>>> sum(true)\n0\n>>> sum(true)\n\
    0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>>\
    \ sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n\
    0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>>\
    \ sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n\
    0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>>\
    \ sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n\
    0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>>\
    \ sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n\
    0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>>\
    \ sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n\
    0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>> sum(true)\n0\n>>>\
    \ sum(true)\n0\n", "    if b == 0 \n        0\n    else\n        (a * 10 + b)\
    \ mod 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the\
    \ function that takes two integers and returns \n    the product of their unit\
    \ digits.\n    Assume the input is always valid.\n    Examples:\n    >>> multiply(148,\
    \ 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n\
    \    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"", "    if a < 0 || b < 0\n\
    \        error(\"The inputs must be positive\")\n    elseif b == 0\n        0\n\
    \    else\n        (a * b).digits\n    end\nend\n</cell>\n<text>\nExercise: Write\
    \ a function that takes an integer and returns the sum of the unit digits of that\
    \ integer.\nExamples:\n>>> sum(148)\n16\n>>> sum(19)\n72\n>>> sum(2020)\n0\n>>>\
    \ sum(14)\n20\n>>> sum(-15)\n20\n</text>", "    if b == 0 \n        0\n    elseif\
    \ b < 0 \n        0\n    elseif b > 0 \n        a * 10^(b-1)\n    else\n     \
    \   0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    >>> multiply(148, 412)\n\
    \    16\n    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n\
    \    >>> multiply(14, -15)\n    20\n    \"\"\"", "    if b == 0 \n        0\n\
    \    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif b < a\
    \ \n        0\n    elseif b == a \n        1\n    elseif b > a \n        0\n \
    \   elseif b == 0 \n        0\n    elseif b == 1 \n        1\n    elseif b ==\
    \ 2 \n        2\n    elseif b == 3 \n        6\n    elseif b == 4 \n        24\n\
    \    elseif b == 5 \n        120\n    elseif b == 6 \n        720\n    elseif\
    \ b == 7 \n        5040\n    elseif b == 8 \n        40320\n    elseif b == 9\
    \ \n        362880\n    elseif b == 10 \n        3628800\n    elseif b == 11 \n\
    \        39916800\n    elseif b == 12 \n        479001600\n    elseif b == 13\
    \ \n        6227020800\n    elseif b == 14 \n        87178291200\n    elseif b\
    \ == 15 \n        1307674368000\n    elseif b == 16 \n        20922789888000\n\
    \    elseif b == 17 \n        355687428096000\n    elseif b == 18 \n        6402373705728000\n\
    \    elseif b == 19 \n        121645100408832000\n    elseif b == 20 \n      \
    \  2432902008176640000\n    elseif b == 21 \n        51090942171709440000\n  \
    \  elseif b == 22 \n        1124000727777607680000\n    elseif b == 23 \n    \
    \    25852016738884976640000\n    elseif b == 24 \n        620448401733239439360000\n\
    \    elseif b == 25 \n        15511210043330985984000000\n    elseif b == 26 \n\
    \        403291461126605635584000000\n    elseif b == 27 \n        10888869450418352160768000000\n\
    \    elseif b == 28 \n        304888344611713860501504000000\n    elseif b ==\
    \ 29 \n        8841761993739701954543616000000\n    elseif b == 30 \n        265252859812191058636308480000000\n\
    \    elseif b == 31 \n        8222838654177922817725562880000000\n    elseif b\
    \ == 32 \n        17592186044416862704291213372960000000\n    elseif b == 33",
  "    if b == 0\n        0\n    else\n        (a * 10 + b) mod 10\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert\
    \ multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14,\
    \ -15) == 20\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum\
    \ of the digits of its input. \nAssume that the input is always valid.\nExamples:\n\
    >>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n\
    6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(123)\n6\n>>> sum(12",
  "    if b == 0 \n        return 0 \n    else \n        return (a * 10 + b) \n  \
    \  end\nend\n</cell>\n<code language=julia-1.0>\nmultiply(148, 412)\n</cell>\n\
    <code language=julia-1.0>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.0>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.0>\nmultiply(14, -15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes two integers and returns\
    \ their sum.\nAs a reminder, Julia has a built-in function called sum that does\
    \ this for you.\nExamples:\n>>> sum(148, 412)\n16\n>>> sum(19, 28)\n72\n>>> sum(2020,\
    \ 1851)\n0\n>>> sum(14, -15)\n20\n</text>\n<code language=julia-1.0>", "    if\
    \ a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n      \
    \  0\n    else\n        (a * b).digits\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes two integers and returns the sum of the \n  \
    \  unit digits of their product (assuming the input is valid).\n    Examples:\n\
    \    >>> sum(148, 412)\n    16\n    >>> sum(19, 28)\n    72\n    >>> sum(2020,\
    \ 1851)\n    0\n    >>> sum(14, -15)\n    20\n    \"\"\"", "    if a < 0 || b\
    \ < 0 \n        error(\"Invalid input\")\n    else if a == 0 || b == 0\n     \
    \   error(\"Invalid input\")\n    else\n        return a * b\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test the function \nmultiply(148, 412)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of characters in the string.\nExamples:\n>>> count_characters(\"Hello World\"\
    )\n10\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"Hello\
    \ World!!\")\n12\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_", "    if a < 0 or b < 0\n        error(\"Invalid\
    \ input\")\n    else if a == 0\n        error(\"Invalid input\")\n    else if\
    \ b == 0\n        error(\"Invalid input\")\n    else\n        return a * b\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an integer and returns\
    \ the sum of the unit digits. \nExamples:\n>>> sum(148)\n16\n>>> sum(19)\n28\n\
    >>> sum(2020)\n1851\n>>> sum(14)\n20\n>>> sum(-15)\n20\n</text>", "    if b ==\
    \ 0 \n        0\n    elseif b < 0 \n        0\n    elseif b > a \n        0\n\
    \    elseif b == a \n        a\n    else\n        multiply(b, a % b)\n    end\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer to the\
    \ question. To critique or request clarification from an author, leave a comment\
    \ below their post. - [From Review](/review/low-quality-posts/27818883)\n<|/ c\
    \ |>\n<| c |>\nI believe it does answer the question. He asked how to implement\
    \ the function `multiply`, which I did in the code snippet above. He also asked\
    \ how to implement the function `isUnitDigit`, which I did in the code snippet\
    \ above. He also asked how to implement the function `isUnitDigit`, which I did\
    \ in the code snippet above. He also asked how to implement the function `isUnitDigit`,\
    \ which I did in the code snippet above. He also asked how to implement the function\
    \ `isUnitDigit`, which I did in the code snippet above. He also asked how to implement\
    \ the function `isUnitDigit`, which I did in the code snippet above. He also asked\
    \ how to implement the function `isUnitDigit`, which I did in the code snippet\
    \ above. He also asked how to implement the function `isUnitDigit`, which I did\
    \ in the code snippet above.\n<|/ c |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post. - [From Review](/review/low-quality-posts/27818883)\n\
    <|/ c |>\n<| c |>\nI believe it does answer the question. He asked how to implement\
    \ the function `multiply`, which I did in the code snippet above. He also asked\
    \ how to implement the function `isUnitDigit`, which I did in the code snippet\
    \ above. He also asked how to implement the function `isUnitDigit`, which I did\
    \ in the code snippet above. He also asked how to implement the function `isUnitDigit`,\
    \ which I did in the code snippet above. He also asked how to implement the function\
    \ `isUnitDigit`, which I did in the code snippet above. He also asked how to implement\
    \ the function `isUnitDigit`, which I did ", "    if b == 0 \n        return 0\
    \ \n    else \n        return a * b \nend \n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"",
  "    if b == 0 \n        0\n    elseif b < 0 \n        0\n    elseif b > 0 \n  \
    \      a * 10^(b-1)\n    else\n        0\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"",
  "    if a < 0 or b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n  \
    \      return a\n    elseif b == 1\n        return a * b\n    else\n        return\
    \ a * b / 10\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14, -15)\n\
    </cell>\n<text>\nExercise: Write a function that takes two integers and returns\
    \ the sum of the unit digits of their product (without using multiplication).",
  "    if b == 0 \n        return 0 \n    else \n        return (a * b) mod 10 \n\
    end\n</cell>\n<code language=julia-1.3>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.3>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.3>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.3>\nmultiply(14, -15)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of characters in it.\n\
    Examples:\n>>> count_characters(\"Hello World\")\n10\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!\")"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
