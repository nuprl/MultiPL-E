name: HumanEval_97_multiply
language: jl
prompt: "\"\"\"Complete the function that takes two integers and returns \n    the\
  \ product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
  \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>> multiply(2020,\
  \ 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"\nfunction multiply(a::Int64,\
  \ b::Int64)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
  \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) ==\
  \ 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
  \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
completions: ["    if b == 0 \n        return 0 \n    else \n        return (a * b)\
    \ mod 10 \n    end\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n\
    </cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14, -15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of occurrences of \n    each character in the string. \n    Examples:\n\
    \    >>> count_chars(\"hello\")\n    Dict(\"h\"=>1, \"e\"=>1, \"l\"=>2, \"o\"\
    =>1)\n    >>> count_chars(\"helloworld\")\n    Dict(\"h\"=>2, \"e\"=>1, \"l\"\
    =>2, \"o\"=>1, \"w\"=>2, \"r\"=>1, \"d\"=>1)\n    \"\"\"", "    if b == 0 \n \
    \       0\n    else\n        (a*b).digits\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the sum of its unit digits. \nAssume the input is\
    \ always valid.\nExamples:\n>>> sum(148, 412)\n16\n>>> sum(19, 28)\n72\n>>> sum(2020,\
    \ 1851)\n0\n>>> sum(14, -15)\n20\n\"\"\"", "    if b == 0 \n        0\n    else\n\
    \        (a * 10 + b) mod 10\nend\n</cell>\n<code language=julia-1.0>\n@assert\
    \ multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the sum of the digits of its input. \nAssume that\
    \ the input is always valid.\nExamples:\n>>> sum(1234)\n4\n>>> sum(123)\n3\n>>>\
    \ sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)\n\
    3\n>>> sum(123)\n3\n>>> sum(123)\n3\n>>> sum(123)", "    if b == 0 \n        0\n\
    \    elseif b < 0 \n        0\n    elseif b > 9 \n        0\n    elseif b < 10\
    \ \n        a * 10\n    elseif b < 100 \n        a * 10 + b\n    elseif b < 1000\
    \ \n        a * 10 + b / 10\n    elseif b < 10000 \n        a * 10 + b / 100\n\
    \    elseif b < 100000 \n        a * 10 + b / 1000\n    elseif b < 1000000 \n\
    \        a * 10 + b / 10000\n    elseif b < 10000000 \n        a * 10 + b / 100000\n\
    \    elseif b < 100000000 \n        a * 10 + b / 1000000\n    elseif b < 1000000000\
    \ \n        a * 10 + b / 10000000\n    elseif b < 10000000000 \n        a * 10\
    \ + b / 100000000\n    elseif b < 100000000000 \n        a * 10 + b / 1000000000\n\
    \    elseif b < 1000000000000 \n        a * 10 + b / 10000000000\n    elseif b\
    \ < 10000000000000 \n        a * 10 + b / 100000000000\n    elseif b < 100000000000000\
    \ \n        a * 10 + b / 1000000000000\n    elseif b < 1000000000000000 \n   \
    \     a * 10 + b / 10000000000000\n    elseif b < 10000000000000000 \n       \
    \ a * 10 + b / 100000000000000\n    elseif b < 100000000000000000 \n        a\
    \ * 10 + b / 1000000000000000\n    elseif b < 1000000000000000000 \n        a\
    \ * 10 + b / 10000000000000000\n    elseif b < 10000000000000000000 \n       \
    \ a * 10 + b / 100000000000000000\n    elseif b < 100000000000000000000 \n   \
    \     a * 10 + b / 1000000000000000000\n    elseif b < 1000000000000000000000\
    \ \n        a * 10 + b / 10000000000000000000\n    elseif b < 10000000000000000000000\
    \ \n        a * 10 + b / 100000000000000000000\n    elseif b < 100000000000000000000000\
    \ \n        a * 10 + b / 1000000000000000000000\n    elseif b < 1000000000000000000000000\
    \ \n        a * 10 + b / 10000000000000000000000\n    elseif b < 10000000000000000000000000\
    \ \n        a * 10 + b / 100000000000000000000000\n    elseif b < 100000000000000000000000000\
    \ \n        a * 10 + b / 1000000000000000000000000\n    elseif b < 1000000000000000000000000000\
    \ \n        a * 10 + b / 10000000000000000000000000\n    elseif b < 10000000000000000000000000000\
    \ \n        a * 10 + b / 100000000000000000000000000\n    elseif b < 100000000000000000000000000000\
    \ \n        a", "    if b == 0 \n        0\n    elseif b < 0 \n        0\n   \
    \ elseif b > 0 \n        0\n    elseif b == 1 \n        a\n    elseif b == -1\
    \ \n        0\n    elseif b == -2\n        0\n    elseif b == -3\n        0\n\
    \    elseif b == -4\n        0\n    elseif b == -5\n        0\n    elseif b ==\
    \ -6\n        0\n    elseif b == -7\n        0\n    elseif b == -8\n        0\n\
    \    elseif b == 9\n        0\n    elseif b == 10\n        0\n    elseif b ==\
    \ 11\n        0\n    elseif b == 12\n        0\n    elseif b == 13\n        0\n\
    \    elseif b == 14\n        0\n    elseif b == 15\n        0\n    elseif b ==\
    \ 16\n        0\n    elseif b == 17\n        0\n    elseif b == 18\n        0\n\
    \    elseif b == 19\n        0\n    elseif b == 20\n        0\n    elseif b ==\
    \ 21\n        0\n    elseif b == 22\n        0\n    elseif b == 23\n        0\n\
    \    elseif b == 24\n        0\n    elseif b == 25\n        0\n    elseif b ==\
    \ 26\n        0\n    elseif b == 27\n        0\n    elseif b == 28\n        0\n\
    \    elseif b == 29\n        0\n    elseif b == 30\n        0\n    elseif b ==\
    \ 31\n        0\n    elseif b == 32\n        0\n    elseif b == 33\n        0\n\
    \    elseif b == 34\n        0\n    elseif b == 35\n        0\n    elseif b ==\
    \ 36\n        0\n    elseif b == 37\n        0\n    elseif b == 38\n        0\n\
    \    elseif b == 39\n        0\n    elseif b == 40\n        0\n    elseif b ==\
    \ 41\n        0\n    elseif b == 42\n        0\n    elseif b == 43\n        0\n\
    \    elseif b == 44\n        0\n    elseif b == 45\n        0\n    elseif b ==\
    \ 46\n        0\n    elseif b == 47\n        0\n    elseif b == 48\n        0\n\
    \    elseif b == 49\n        0\n    elseif b == 50\n        0\n    elseif b ==\
    \ 51\n        0\n    elseif b == 52\n        0\n    elseif b == 53\n        0\n\
    \    elseif b == 54\n        0\n    else", "    if b == 0 \n        0\n    elseif\
    \ b < 0 \n        0\n    elseif b > a \n        0\n    elseif b == a \n      \
    \  a\n    elseif b > a \n        0\n    elseif b == a \n        a\n    elseif\
    \ b > a \n        0\n    elseif b == a \n        a\n    elseif b > a \n      \
    \  0\n    elseif b == a \n        a\n    elseif b > a \n        0\n    elseif\
    \ b == a \n        a\n    elseif b > a \n        0\n    elseif b == a \n     \
    \   a\n    elseif b > a \n        0\n    elseif b == a \n        a\n    elseif\
    \ b > a \n        0\n    elseif b == a \n        a\n    elseif b > a \n      \
    \  0\n    elseif b == a \n        a\n    elseif b > a \n        0\n    elseif\
    \ b == a \n        a\n    elseif b > a \n        0\n    elseif b == a \n     \
    \   a\n    elseif b > a \n        0\n    elseif b == a \n        a\n    elseif\
    \ b > a \n        0\n    elseif b == a \n        a\n    elseif b > a \n      \
    \  0\n    elseif b == a \n        a\n    elseif b > a \n        0\n    elseif\
    \ b == a \n        a\n    elseif b > a \n        0\n    elseif b == a \n     \
    \   a\n    elseif b > a \n        0\n    elseif b == a \n        a\n    elseif\
    \ b > a \n        0\n    elseif b == a \n        a\n    elseif b > a \n      \
    \  0\n    elseif b == a \n        a\n    elseif b > a \n        0\n    elseif\
    \ b == a \n        a\n    elseif b > a \n        0\n    elseif b == a \n     \
    \   a\n    elseif b > a \n        0\n    elseif b == a \n        a\n    elseif\
    \ b > a \n        0\n    elseif b == a \n        a\n    elseif b > a \n      \
    \  0\n    elseif b == a \n        a\n    elseif b > a \n        0\n    elseif\
    \ b == a \n        a\n    elseif b > a \n        0\n    elseif b == a \n     \
    \   a\n    elseif b > a \n        0\n    elseif b == a \n        a\n    elseif\
    \ b > a \n        0\n    elseif b == a \n        a\n    elseif b > a \n      \
    \  0\n    elseif b == a \n        a\n    elseif ", "    if b == 0 \n        0\n\
    \    else\n        (a * b) % 10\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0\n@assert multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes two integers and returns the sum of the unit digits of\
    \ their product \n    (i.e., if the product is $10^1$, then the sum is $10^1$).\n\
    \    Assume the input is always valid.\n    Examples:\n    >>> sum(148, 412)\n\
    \    16\n    >>> sum(19, 28)\n    72\n    >>> sum(2020, 1851)\n    0\n    >>>\
    \ sum(14, -15)\n    20\n    \"\"\"", "    if b == 0 \n        0\n    elseif b\
    \ < 0 \n        0\n    elseif b > 9 \n        0\n    elseif b < a \n        0\n\
    \    else\n        (a * b) % 10\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of characters in that\
    \ string.\nExamples:\n>>> count_characters(\"Hello World\")\n10\n>>> count_characters(\"\
    Hello World!\")\n11\n>>> count_characters(\"Hello World!!\")\n12\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_", "    if b == 0 \n        0\n    else\n   \
    \     (a * 10^(b-1)) * (10^(b-1))\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\"",
  "    if b == 0 \n        0\n    else\n        (a*b).digits()\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the product of their unit digits.\nAssume the input is always valid.\nExamples:\n\
    >>> multiply([148, 412])\n16\n>>> multiply([19, 28])\n72\n>>> multiply([2020,\
    \ 1851])\n0\n>>> multiply([14, -15])\n20\n\"\"\"", "    if b == 0 \n        return\
    \ 0 \n    else \n        return (a * b) mod 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that takes two integers and returns their sum.\nExamples:\n>>> add(3,\
    \ 4)\n7\n>>> add(10, -2)\n8\n>>> add(10, 0)\n10\n>>> add(10, -10)\n0\n>>> add(10,\
    \ -100)\n-10\n>>> add(10, -1000)\n-10\n>>> add(10, -10000)\n-10\n>>> add(10, -100000)\n\
    -10\n>>> add(10, -1000000000)\n-10\n>>> add(10, -1000000000000)\n-10\n>>> add(10,\
    \ -100000000000000)\n-10\n>>> add(10, -100000000000000000)\n-10\n>>> add(10, -1000000000000000000)\n\
    -10\n>>> add(10, -100000000000000000000)\n-10\n>>> add(10, -10000000000000000000000)\n\
    -10\n>>> add(10, -1000000000000000000000000)\n-10\n>>> add(10, -100000000000000000000000000)\n\
    -10\n>>> add(10, -10000000000000000000000000000)\n-10\n>>> add(10, -1000000000000000000000000000000)\n\
    -10\n>>> add(10, -100000000000000000000000000000000)\n-10\n>>> add(10, -10000000000000000000000000000000000)\n\
    -10\n>>> add(10, -1000000000000000000000000000000000000)\n-10\n>>> add(10, -100000000000000000000000000000000000000)\n\
    -10\n>>> add(10, -10000000000000000000000000000000000000000)\n-10\n>>> add(10,\
    \ -1000000000000000000000000000000000000000000)\n-10\n>>> add(10, -100000000000000000000000000000000000000000000)\n\
    -10\n>>> add(10, -10000000000000000000000000000000000000000000000)\n-10\n>>> add(10,\
    \ -10000000000000000000000000000000000000000000000000)\n-10\n>>> add(10, -10000000000000000000000000000000000000000000000000000)\n\
    -10\n>>> add(10, -1000000000000000000000000000000000000000000000000000000)\n-10\n\
    >>> add(10, -100000000000000000000000000000000000000000000000000000000)\n-10\n\
    >>> add(10, -10000000000000000000000000000000000000000000000000000000)\n-10\n\
    >>> add(10, -1000000000000000000000000000000000000000000000000000000000)\n-10\n\
    >>> add(10, -100000000000000000000000000000000000000000000000000000000)\n-10\n\
    >>> add(10, -10000000000000000000000000000000000000000000000000000000)\n-10\n\
    >>> add(10, -1000000000000000000000000000000000000000000000000000000000)\n-10\n\
    >>> add(10, -100000000000000000000000000000000000000000000000000000000)\n-10\n\
    >>> add(10, -10000000000000000000000000000000000000000000000000000000)\n-10\n\
    >>> add(10, -1000000000000000000000000000000000000000000000000000000000)\n-10",
  "    if b == 0 \n        0\n    elseif b < 0 \n        0\n    elseif b > 0 \n  \
    \      (a * 10 + b) * 10\n    else\n        0\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of two integers. \nThe function\
    \ should accept two integers and return their sum.\nExamples:\n>>> add(4, 5)\n\
    9\n>>> add(6, 8)\n12\n>>> add(10, -2)\n8\n>>> add(10, 0)\n10\n>>> add(10, -10)\n\
    0\n>>> add(10, -100)\n0\n>>> add(10, -200)\n0\n>>> add(10, -300)\n0\n>>> add(10,\
    \ -400)\n0\n>>> add(10, -500)\n0\n>>> add(10, -600)\n0\n>>> add(10, -700)\n0\n\
    >>> add(10, -800)\n0\n>>> add(10, -900)\n0\n>>> add(10, -1000)\n0\n>>> add(10,\
    \ -1100)\n0\n>>> add(10, -1200)\n0\n>>> add(10, -1300)\n0\n>>> add(10, -1400)\n\
    0\n>>> add(10, -1500)\n0\n>>> add(10, -16)\n0\n>>> add(10, -18)\n0\n>>> add(10,\
    \ -20)\n0\n>>> add(10, -22)\n0\n>>> add(10, -24)\n0\n>>> add(10, -26)\n0\n>>>\
    \ add(10, -28)\n0\n>>> add(10, -30)\n0\n>>> add(10, -32)\n0\n>>> add(10, -34)\n\
    0\n>>> add(10, -36)\n0\n>>> add(10, -38)\n0\n>>> add(10, -40)\n0\n>>> add(10,\
    \ -42)\n0\n>>> add(10, -44)\n0\n>>> add(10, -46)\n0\n>>> add(10, -48)\n0\n>>>\
    \ add(10, -50)\n0\n>>> add(10, -52)\n0\n>>> add(10, -54)\n0\n>>> add(10, -56)\n\
    0\n>>> add(10, -58)\n0\n>>> add(10, -60)\n0\n>>> add(10, -62)\n0\n>>> add(10,\
    \ -64)\n0\n>>> add(10, -66)\n0\n>>> add(10, -68)\n0\n>>> add(10, -70)\n0\n>>>\
    \ add(10, -72)\n0\n>>> add(10, -74)\n0\n>>> add(10, -76)\n0\n>>> add(10, -78)\n\
    0\n>>> add(10, -", "    if b == 0 \n        0\n    elseif b < 0 \n        0\n\
    \    elseif b > 0 \n        a * 10^(b-1)\n    else\n        a * 10^(b-1)\n   \
    \ end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes two integers\
    \ and returns the sum of the unit digits of their product (as described above).\n\
    Examples:\n>>> sum(148, 412)\n16\n>>> sum(19, 28)\n72\n>>> sum(2020, 1851)\n0\n\
    >>> sum(14, -15)\n20\n\"\"\"", "    if a < 0 || b < 0\n        return 0 \n   \
    \ elseif b == 0\n        return a\n    else\n        return a*b\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes two\
    \ integers and returns \n    the product of their unit digits.\n    Assume the\
    \ input is always valid.\n    Examples:\n    >>> multiply(148, 412)\n    16\n\
    \    >>> multiply(19, 28)\n    72\n    >>> multiply(2020, 1851)\n    0\n    >>>\
    \ multiply(14, -15)\n    20\n    \"\"\"", "    if a < 0 || b < 0\n        error(\"\
    Invalid input\")\n    elseif b == 0\n        0\n    elseif b == 1\n        a\n\
    \    else\n        (a * b) / gcd(a, b)\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the squares of the unit digits of\
    \ an integer.\nExamples:\n>>> sum_square_digits(148)\n14\n>>> sum_square_digits(19)\n\
    23\n>>> sum_square_digits(2020)\n0\n>>> sum_square_digits(14)\n20\n>>> sum_square_digits(-15)\n\
    -20\n>>> sum_square_digits(0)\n0\n>>> sum_square_digits(1)\n1\n>>> sum_square_digits(2)\n\
    4\n>>> sum_square_digits(3)\n9\n>>> sum_square_digits(4)\n16\n>>> sum_square_digits(5)\n\
    25\n>>> sum_square_digits(6)\n36\n>>> sum_square_digits(7)\n49\n>>> sum_square_digits(8)\n\
    64\n>>> sum_square_digits(9)\n81\n>>> sum_square_digits(10)\n100\n>>> sum_square_digits(11)\n\
    121\n>>> sum_square_digits(12)\n144\n>>> sum_square_digits(13)\n169\n>>> sum_square_digits(14)\n\
    196\n>>> sum_square_digits(15)\n225\n>>> sum_square_digits(16)\n256\n>>> sum_square_digits(17)\n\
    289\n>>> sum_square_digits(18)\n324\n>>> sum_square_digits(19)\n353\n>>> sum_square_digits(20)\n\
    384\n>>> sum_square_digits(21)\n421\n>>> sum_square_digits(22)\n460\n>>> sum_square_digits(23)\n\
    495\n>>> sum_square_digits(24)\n532\n>>> sum_square_digits(25)\n571\n>>> sum_square_digits(26)\n\
    618\n>>> sum_square_digits(27)\n660\n>>> sum_square_digits(28)\n698\n>>> sum_square_digits(29)\n\
    737\n>>> sum_square_digits(30)\n780\n>>> sum_square_digits(31)\n817\n>>> sum_square_digits(32)\n\
    850\n>>> sum_square_digits(33)\n896\n>>> sum_square_digits(34)\n935\n>>> sum_square_digits(35)\n\
    972\n>>> sum_square_", "    if b == 0 \n        return 0 \n    else \n       \
    \ return (a * b) \nend \n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the digits of its input. \nAssume that the input is always valid.\
    \ \nExamples:\n>>> sum(12345)\n15\n>>> sum(10)\n10\n>>> sum(0)\n0\n>>> sum(123456789)\n\
    21\n>>> sum(1234567890)\n21\n>>> sum(12345678901)\n21\n>>> sum(123456789012)\n\
    21\n>>> sum(1234567890123)\n21\n>>> sum(12345678901234)\n21\n>>> sum(123456789012345)\n\
    21\n>>> sum(12345678901234567)\n21\n>>> sum(123456789012345678)\n21\n>>> sum(1234567890123456788)\n\
    21\n>>> sum(12345678901234567889)\n21\n>>> sum(123456789012345678899)\n21\n>>>\
    \ sum(1234567890123456788999)\n21\n>>> sum(12345678901234567889999)\n21\n>>> sum(123456789012345678899999)\n\
    21\n>>> sum(1234567890123456788999999)\n21\n>>> sum(12345678901234567889999999)\n\
    21\n>>> sum(1234567890123456788999999999)\n21\n>>> sum(12345678901234567889999999999)\n\
    21\n>>> sum(123456789012345678899999999999)\n21\n>>> sum(123456789012345678899999999989)\n\
    21\n>>> sum(1234567890123456788999999999890)\n21\n>>> sum(12345678901234567889999999998900)\n\
    21\n>>> sum(1234567890123456788999999999890001)\n21\n>>> sum(12345678901234567889999999998900012)\n\
    21\n>>> sum(123456789012345678899999999989000123)\n21\n>>> sum(1234567890123456788999999999890001234)\n\
    21\n>>> sum(12345678901234567889999999998900012345)\n21\n>>> sum(1234567890123456788999999999890001234567)\n\
    21\n>>> sum(12345678901234567889999999998900012345678)\n21\n>>> sum(123456789012345678899999999989000123456788)\n\
    21\n>>> sum(1234567890123456788999999999890001234567889)\n21\n>>> sum(12345678901234567889999999998900012345678899)\n\
    21\n>>> sum(123456789012345678899999999989000123456788999)\n21\n>>> sum(1234567890",
  "    if b == 0\n        return 0\n    \n    if a < 0\n        return multiply(-a,\
    \ -b)\n    \n    if b < 0\n        return multiply(a, b * -1)\n    \n    if b\
    \ == 0\n        return a\n    \n    if a < b\n        return multiply(a, b)\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if a < 0 || b < 0\n \
    \       error(\"Invalid input\")\n    elseif b == 0\n        return a\n    else\n\
    \        return a * b\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes an array of integers and returns the sum of the unit digits. \nThe\
    \ function should raise an error if the array is empty.\nExamples:\n>>> sum([148,\
    \ 412])\n16\n>>> sum([19, 28])\n72\n>>> sum([2020, 1851])\n0\n>>> sum([14, -15])\n\
    20\n>>> sum([14])\n14\n>>> sum([-14])\n-14\n>>> sum([148, 412])\n16\n>>> sum([19,\
    \ 28])\n72\n>>> sum([2020, 1851])\n0\n>>> sum([14, -15])\n20\n>>> sum([14])\n\
    14\n>>> sum([-14])\n-14\n>>> sum([148, 412])\n16\n>>> sum([19, 28])\n72\n>>> sum([2020,\
    \ 1851])\n0\n>>> sum([14, -15])\n20\n>>> sum([14])\n14\n>>> sum([-14])\n-14\n\
    >>> sum([148, 412])\n16\n>>> sum([19, 28])\n72\n>>> sum([2020, 1851])\n0\n>>>\
    \ sum([14, -15])\n20\n>>> sum([14])\n14\n>>> sum([-14])\n-14\n>>> sum([148, 412])\n\
    16\n>>> sum([19, 28])\n72\n>>> sum([2020, 1851])\n0\n>>> sum([14, -15])\n20\n\
    >>> sum([14])\n14\n>>> sum([-14])\n-14\n>>> sum([148, 412])\n16\n>>> sum([19,\
    \ 28])\n72\n>>> sum([2020, 1851])\n0\n>>> sum([14, -15])\n20\n>>> sum([14])\n\
    14\n>>> sum([-14])\n-14\n>>> sum([148, 412])\n16\n>>> sum([19, 28])\n72\n>>> sum([2020,\
    \ 1851])\n0\n>>> sum([14, -15])\n20\n>>> sum([14])\n14\n>>> sum([-14])\n-14\n\
    >>> sum([148, 412])\n16\n>>> sum([19, 28])\n72\n>>> sum([2020, 1851])\n0\n>>>\
    \ sum([14, -15])\n20\n>>> sum([14])\n14\n>>> sum([-14])\n-14\n>>> sum([148, 412])\n\
    16\n>>> sum([19, 28])\n72\n>>> sum([2020, 1851])\n0\n>>> sum([14, -15])\n20\n\
    >>> sum([14])\n14\n>>> sum([-14])\n-14\n>>> sum([148, 412])\n16\n>>> sum([19,\
    \ 28])\n72\n>>> sum([2020, ", "    if a < 0 || b < 0\n        error(\"Invalid\
    \ input\")\n    elseif b == 0\n        0\n    else\n        (a * b) % 10\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148, 412) ==\
    \ 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0\n@assert\
    \ multiply(14, -15) == 20\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and returns the number of characters in it.\nExamples:\n>>> count_characters(\"\
    Hello World\")\n12\n>>> count_characters(\"Hello World!\")\n11\n>>> count_characters(\"\
    Hello World!!\")\n12\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World!!!\")\n13\n>>> count_characters(\"\
    Hello World!!!\")\n13\n>>> count_characters(\"Hello World", "    if b == 0 \n\
    \        0\n    elseif b < 0 \n        0\n    elseif b > 0 \n        (a * 10^(b\
    \ % 10)) % 10\n    else\n        0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    >>> multiply(148, 412)\n    16\n    >>> multiply(19, 28)\n    72\n    >>>\
    \ multiply(2020, 1851)\n    0\n    >>> multiply(14, -15)\n    20\n    \"\"\""]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
