name: HumanEval_158_find_max
language: jl
prompt: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
  \ contains different words. Return the word with maximum number\n    of unique characters.\
  \ If multiple strings have maximum number of unique\n    characters, return the\
  \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
  , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\", \"\
  game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n    \"\
  aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
  name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
  , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"\
  aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
  play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
  we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"\
  are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\"\
  , \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\
  \t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
completions: ["    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_", "    unique_chars\
    \ = Set()\n    for word in words \n        unique_chars = unique_chars + Set(word)\n\
    \    end\n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars = unique_chars\
    \ - Set(\"z\")\n    unique_chars = unique_chars - Set(\"A\")\n    unique_chars\
    \ = unique_chars - Set(\"Z\")\n    unique_chars = unique_chars - Set(\"0\")\n\
    \    unique_chars = unique_chars - Set(\"9\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"$\")\n    unique_chars\
    \ = unique_chars - Set(\"%\")\n    unique_chars = unique_chars - Set(\"&\")\n\
    \    unique_chars = unique_chars - Set(\"*\")\n    unique_chars = unique_chars\
    \ - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n    unique_chars\
    \ = unique_chars - Set(\"+\")\n    unique_chars = unique_chars - Set(\",\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\"/\")\n    unique_chars = unique_chars - Set(\"[\")\n\
    \    unique_chars = unique_chars - Set(\"]\")\n    unique_chars = unique_chars\
    \ - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n    unique_chars\
    \ = unique_chars - Set(\"^\")\n    unique_chars = unique_chars - Set(\"~\")\n\
    \    unique_chars = unique_chars - Set(\"|\")\n    unique_chars = unique_chars\
    \ - Set(\"~\")\n    unique_chars = unique_chars - Set(\"~\")\n    unique_chars\
    \ = unique_chars - Set(\"~\")\n    unique_chars = unique_chars - Set(\"~\")\n\
    \    unique_chars = unique_chars - Set(\"~\")\n    unique_chars = unique_chars\
    \ - Set(\"~\")\n    unique_chars = unique_chars - Set(\"~\")\n    unique_chars\
    \ = unique_chars - Set(\"~\")\n    unique_chars = unique_chars - Set(\"~\")\n\
    \    unique_chars = unique_chars - Set(\"~\")\n    unique_chars = unique_chars\
    \ - Set(\"~\")\n    unique_chars = unique_chars - Set(\"~\")\n    unique_chars\
    \ = unique_chars - Set(\"~\")\n    unique_chars = unique_chars - Set(\"~\")\n\
    \    unique_chars = unique_chars - Set(\"~\")\n    unique_chars = unique_chars\
    \ - Set(\"", "    unique_chars = Set()\n    unique_chars_count = 0\n    \n   \
    \ for word in words\n        for char in word\n            unique_chars.add(char)\n\
    \            unique_chars_count += 1\n    end\n    \n    if unique_chars_count\
    \ > unique_chars_count\n        return words[1]\n    else\n        return words[0]\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a vector\
    \ of strings and a vector of integers. Return the string with maximum number of\n\
    unique characters. If multiple strings have maximum number of unique characters,\
    \ return the one which comes first in lexicographical order.", "    unique_chars\
    \ = Set{String}()\n    unique_chars.update!(words)\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    unique_chars.last\nend", "    unique_chars =\
    \ Set{String}()\n    for word in words\n        unique_chars = unique_chars +\
    \ Set(word)\n    end\n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars\
    \ = unique_chars - Set(\"z\")\n    unique_chars = unique_chars - Set(\"A\")\n\
    \    unique_chars = unique_chars - Set(\"Z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"$\")\n    unique_chars = unique_chars - Set(\"%\")\n\
    \    unique_chars = unique_chars - Set(\"^\")\n    unique_chars = unique_chars\
    \ - Set(\"&\")\n    unique_chars = unique_chars - Set(\"*\")\n    unique_chars\
    \ = unique_chars - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n\
    \    unique_chars = unique_chars - Set(\"+\")\n    unique_chars = unique_chars\
    \ - Set(\",\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n\
    \    unique_chars = unique_chars - Set(\"<\")\n    unique_chars = unique_chars\
    \ - Set(\"<\")\n    unique_chars = unique_chars - Set(\"=\")\n    unique_chars\
    \ = unique_chars - Set(\">\")\n    unique_chars = unique_chars - Set(\"?\")\n\
    \    unique_chars = unique_chars - Set(\"!\")\n    unique_chars = unique_chars\
    \ - Set(\"@\")\n    unique_chars = unique_chars - Set(\"[\")\n    unique_chars\
    \ = unique_chars - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n\
    \    unique_chars = unique_chars - Set(\"}\")\n    unique_chars = unique_chars\
    \ - Set(\"|\")\n    unique_chars = unique_chars - Set(\"~\")\n    unique_chars\
    \ = unique_chars - Set(\"`\")\n    unique_chars = unique_chars - Set(\"~\")\n\
    \    unique_chars = unique_chars - Set(\"`\")\n    unique_chars = unique_chars\
    \ - Set(\"`\")\n    unique_chars = unique_chars - Set(\"`\")\n    unique_chars\
    \ = unique_chars - Set(\"`\")\n    unique_chars = unique_chars - Set(\"`\")\n\
    \    unique_chars = unique_chars - Set(\"`\")\n    unique_chars = unique_chars\
    \ - Set(\"`\")\n    unique_chars = unique_chars - Set(\"`\")\n    unique_chars\
    \ = unique_chars - Set(\"`\")\n    unique_chars = unique_chars - Set(\"", "  \
    \  \n    unique_chars = Set{String}()\n    \n    for word in words \n        for\
    \ char in word\n            unique_chars.add(char)\n    end\n    \n    unique_chars\
    \ = unique_chars.toSet()\n    \n    unique_chars = unique_chars.sort\n    \n \
    \   if length(unique_chars) > length(words)\n        return words[end]\n    else\n\
    \        return words[end]\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that accepts a vector of strings and returns a vector of strings. \n\
    The vector contains different words. \nThe function should return the same vector\
    \ but with each word capitalized.", "    unique_chars = Set()\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.union(words[1])\n\
    \    unique_chars = unique_chars.union(words[2])\n    unique_chars = unique_chars.union(words[3])\n\
    \    unique_chars = unique_chars.union(words[4])\n    unique_chars = unique_chars.union(words[5])\n\
    \    unique_chars = unique_chars.union(words[6])\n    unique_chars = unique_chars.union(words[7])\n\
    \    unique_chars = unique_chars.union(words[8])\n    unique_chars = unique_chars.union(words[9])\n\
    \    unique_chars = unique_chars.union(words[10])\n    unique_chars = unique_chars.union(words[11])\n\
    \    unique_chars = unique_chars.union(words[12])\n    unique_chars = unique_chars.union(words[13])\n\
    \    unique_chars = unique_chars.union(words[14])\n    unique_chars = unique_chars.union(words[15])\n\
    \    unique_chars = unique_chars.union(words[16])\n    unique_chars = unique_chars.union(words[17])\n\
    \    unique_chars = unique_chars.union(words[18])\n    unique_chars = unique_chars.union(words[19])\n\
    \    unique_chars = unique_chars.union(words[20])\n    unique_chars = unique_chars.union(words[21])\n\
    \    unique_chars = unique_chars.union(words[22])\n    unique_chars = unique_chars.union(words[23])\n\
    \    unique_chars = unique_chars.union(words[24])\n    unique_chars = unique_chars.union(words[25])\n\
    \    unique_chars = unique_chars.union(words[26])\n    unique_chars = unique_chars.union(words[27])\n\
    \    unique_chars = unique_chars.union(words[28])\n    unique_chars = unique_chars.union(words[29])\n\
    \    unique_chars = unique_chars.union(words[30])\n    unique_chars = unique_chars.union(words[31])\n\
    \    unique_chars = unique_chars.union(words[32])\n    unique_chars = unique_chars.union(words[33])\n\
    \    unique_chars = unique_chars.union(words[34])\n    unique_chars = unique_chars.union(words[35])\n\
    \    unique_chars = unique_chars.union(words[36])\n    unique_chars = unique_chars.union(words[37])\n\
    \    unique_chars = unique_chars.union(words[38])\n    unique_chars = unique_chars.union(words[39])",
  "    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars | Set{Char}(words[1])\n\
    \    for word in words[2:end]\n        unique_chars = unique_chars | Set{Char}(word)\n\
    \    end\n    unique_chars = unique_chars - Set{Char}(\"\")\n    return words[end][end]\
    \ if (end-1) == length(words) && length(unique_chars) == 1 \n    \n    return\
    \ words[end][end] if length(unique_chars) == 1 \n    \n    return words[end][end]\
    \ if length(unique_chars) > 1 \n    \n    return words[end][end] if length(unique_chars)\
    \ == 1 \n    \n    return words[end][end] if length(unique_chars) > 1 \n    \n\
    \    return words[end][end] if length(unique_chars) == 1 \n    \n    return words[end][end]\
    \ if length(unique_chars) > 1 \n    \n    return words[end][end] if length(unique_chars)\
    \ == 1 \n    \n    return words[end][end] if length(unique_chars) > 1 \n    \n\
    \    return words[end][end] if length(unique_chars) == 1 \n    \n    return words[end][end]\
    \ if length(unique_chars) > 1 \n    \n    return words[end][end] if length(unique_chars)\
    \ == 1 \n    \n    return words[end][end] if length(unique_chars) > 1 \n    \n\
    \    return words[end][end] if length(unique_chars) == 1 \n    \n    return words[end][end]\
    \ if length(unique_chars) > 1 \n    \n    return words[end][end] if length(unique_chars)\
    \ == 1 \n    \n    return words[end][end] if length(unique_chars) > 1 \n    \n\
    \    return words[end][end] if length(unique_chars) == 1 \n    \n    return words[end][end]\
    \ if length(unique_chars) > 1 \n    \n    return words[end][end] if length(unique_chars)\
    \ == 1 \n    \n    return words[end][end] if length(unique_chars) > 1 \n    \n\
    \    return words[end][end] if length(unique_chars) == 1 \n    \n    return words[end][end]\
    \ if length(unique_chars) > 1 \n    \n    return words[end][end] if length(unique_chars)\
    \ == 1 \n    \n    return words[end][end] if length(unique_chars) > 1 \n    \n\
    \    return words[end][end] if length(unique_chars) == 1 \n    \n    return words[end][end]\
    \ if length(unique_chars) > 1 \n    \n    return words[end][end] if length(unique_chars)\
    \ == 1 \n    \n    return words[end][end] if length(unique_chars) > 1 \n    \n\
    \    return words[end][end] if length(unique_char", "    word_counts = Dict{String,\
    \ Int}()\n    for word in words \n        word_counts[word] = get(word_counts,\
    \ word, 0) + 1\n    end\n    \n    word_counts = sort(word_counts)\n    \n   \
    \ word_counts[word_counts[length(word_counts)]]\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that accepts a vector of strings and a vector of integers. \n    The\
    \ vector contains different words. Return the word with maximum number\n    of\
    \ unique characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.", "    unique_chars\
    \ = Set{Char}(\"\")\n    for word in words \n        for char in word\n      \
    \      unique_chars = unique_chars + char\n    end\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"z\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"A\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"Z\")\n    unique_chars = unique_chars - Set{Char}(\"0\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"_\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"$\")\n    unique_chars = unique_chars - Set{Char}(\".\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\",\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\":\")\n    unique_chars = unique_chars - Set{Char}(\";\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"(\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\")\")\n    unique_chars = unique_chars - Set{Char}(\"[\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"]\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"{\")\n    unique_chars = unique_chars - Set{Char}(\"}\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\":\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\";\")\n    unique_chars = unique_chars - Set{Char}(\"(\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\")\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"[\")\n    unique_chars = unique_chars - Set{Char}(\"]\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"{\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"}\")\n    unique_chars = unique_chars - Set{Char}(\":\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\";\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"(\")\n    unique_chars = unique_chars - Set{Char}(\")\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"[\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"]\")\n    unique_chars = unique_chars - Set{Char}(\"{\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"}\")\n    unique_chars = unique_",
  "    unique_chars = Set()\n    for word in words\n        for char in word\n   \
    \         unique_chars.add(char)\n    end\n    unique_chars = unique_chars - Set(\"\
    a\")\n    unique_chars = unique_chars - Set(\"z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"9\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"a\")\n\
    \    unique_chars = unique_chars - Set(\"z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"9\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"a\")\n\
    \    unique_chars = unique_chars - Set(\"z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"9\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"a\")\n\
    \    unique_chars = unique_chars - Set(\"z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"9\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"a\")\n\
    \    unique_chars = unique_chars - Set(\"z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"9\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"a\")\n\
    \    unique_chars = unique_chars - Set(\"z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"9\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"a\")\n\
    \    unique_chars = unique_chars - Set(\"z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"9\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"a\")\n\
    \    unique_chars = unique_chars - Set(\"z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"9\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"a\")\n\
    \    unique_chars = unique_chars - Set(\"z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")", "    unique_chars = Set{Char}(\"\")\n    unique_chars.update(\"\
    a\")\n    unique_chars.update(\"b\")\n    unique_chars.update(\"c\")\n    unique_chars.update(\"\
    d\")\n    unique_chars.update(\"e\")\n    unique_chars.update(\"f\")\n    unique_chars.update(\"\
    g\")\n    unique_chars.update(\"h\")\n    unique_chars.update(\"i\")\n    unique_chars.update(\"\
    j\")\n    unique_chars.update(\"k\")\n    unique_chars.update(\"l\")\n    unique_chars.update(\"\
    m\")\n    unique_chars.update(\"n\")\n    unique_chars.update(\"o\")\n    unique_chars.update(\"\
    p\")\n    unique_chars.update(\"q\")\n    unique_chars.update(\"r\")\n    unique_chars.update(\"\
    s\")\n    unique_chars.update(\"t\")\n    unique_chars.update(\"u\")\n    unique_chars.update(\"\
    v\")\n    unique_chars.update(\"w\")\n    unique_chars.update(\"x\")\n    unique_chars.update(\"\
    y\")\n    unique_chars.update(\"z\")\n    unique_chars.update(\"A\")\n    unique_chars.update(\"\
    B\")\n    unique_chars.update(\"C\")\n    unique_chars.update(\"D\")\n    unique_chars.update(\"\
    E\")\n    unique_chars.update(\"F\")\n    unique_chars.update(\"G\")\n    unique_chars.update(\"\
    H\")\n    unique_chars.update(\"I\")\n    unique_chars.update(\"J\")\n    unique_chars.update(\"\
    K\")\n    unique_chars.update(\"L\")\n    unique_chars.update(\"M\")\n    unique_chars.update(\"\
    N\")\n    unique_chars.update(\"O\")\n    unique_chars.update(\"P\")\n    unique_chars.update(\"\
    Q\")\n    unique_chars.update(\"R\")\n    unique_chars.update(\"S\")\n    unique_chars.update(\"\
    T\")\n    unique_chars.update(\"U\")\n    unique_chars.update(\"V\")\n    unique_chars.update(\"\
    W\")\n    unique_chars.update(\"X\")\n    unique_chars.update(\"Y\")\n    unique_chars.update(\"\
    Z\")\n    unique_chars.update(\"a\")\n    unique_chars.update(\"b\")\n    unique_chars.update(\"\
    c\")\n    unique_chars.update(\"d\")\n    unique_chars.update(\"e\")", "    unique_chars\
    \ = Set{Char}(\"\")\n    for word in words \n        for char in word\n      \
    \      unique_chars.add(char)\n    end\n    unique_chars = unique_chars - Set{Char}(\"\
    \")\n    unique_chars = unique_chars.sorted()\n    unique_chars = unique_chars[end]\n\
    \    return unique_chars\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ accepts a vector of strings and returns the word with maximum number\nof unique\
    \ characters. If multiple strings have maximum number of unique\ncharacters, return\
    \ the one which comes first in lexicographical order.", "    unique_chars = Set{String}()\n\
    \    unique_chars.update([word for word in words])\n    unique_chars.update([word[::-1]\
    \ for word in words])\n    unique_chars.update([word[::-1] for word in words])\n\
    \    unique_chars.update([word[::-1] for word in words])\n    unique_chars.update([word[::-1]\
    \ for word in words])\n    unique_chars.update([word[::-1] for word in words])\n\
    \    unique_chars.update([word[::-1] for word in words])\n    unique_chars.update([word[::-1]\
    \ for word in words])\n    unique_chars.update([word[::-1] for word in words])\n\
    \    unique_chars.update([word[::-1] for word in words])\n    unique_chars.update([word[::-1]\
    \ for word in words])\n    unique_chars.update([word[::-1] for word in words])\n\
    \    unique_chars.update([word[::-1] for word in words])\n    unique_chars.update([word[::-1]\
    \ for word in words])\n    unique_chars.update([word[::-1] for word in words])\n\
    \    unique_chars.update([word[::-1] for word in words])\n    unique_chars.update([word[::-1]\
    \ for word in words])\n    unique_chars.update([word[::-1] for word in words])\n\
    \    unique_chars.update([word[::-1] for word in words])\n    unique_chars.update([word[::-1]\
    \ for word in words])\n    unique_chars.update([word[::-1] for word in words])\n\
    \    unique_chars.update([word[::-1] for word in words])\n    unique_chars.update([word[::-1]\
    \ for word in words])\n    unique_chars.update([word[::-1] for word in words])\n\
    \    unique_chars.update([word[::-1] for word in words])\n    unique_chars.update([word[::-1]\
    \ for word in words])\n    unique_chars.update([word[::-1] for word in words])\n\
    \    unique_chars.update([word[::-1] for word in words])\n    unique_chars.update([word[::-1]\
    \ for word in words])\n    unique_chars.update([word[::-1] for word in words])\n\
    \    unique_chars.update([word[::-1] for word in words])\n    unique_chars.update([word[::-1]\
    \ for word in words])\n    unique_chars.update([word[::-1] for word in words])\n\
    \    unique_chars.update([word[::-1] for word in words])\n    unique_chars.update([word[::-1]\
    \ for word in words])\n    unique_chars.update([word[::-1] for word in words])\n\
    \    unique_chars.update([word[::-1] for word in words])\n    unique_chars.update([word[::-1]\
    \ for word in words])\n    unique_chars.update([word[::-1] for ", "    \n    unique_chars\
    \ = Set()\n    \n    for word in words\n        for char in word\n           \
    \ unique_chars.add(char)\n    end\n    \n    unique_chars = unique_chars - Set(\"\
    a\")\n    \n    if length(unique_chars) == 0\n        return words[1]\n    else\n\
    \        unique_chars = unique_chars - Set(\"a\")\n        \n        if length(unique_chars)\
    \ == 0\n            return words[2]\n        else\n            unique_chars =\
    \ unique_chars - Set(\"a\")\n            \n            if length(unique_chars)\
    \ == 0\n                return words[3]\n            else\n                unique_chars\
    \ = unique_chars - Set(\"a\")\n                \n                if length(unique_chars)\
    \ == 0\n                    return words[4]\n                else\n          \
    \          unique_chars = unique_chars - Set(\"a\")\n                    \n  \
    \                  if length(unique_chars) == 0\n                        return\
    \ words[5]\n                    else\n                        unique_chars = unique_chars\
    \ - Set(\"a\")\n                        \n                        if length(unique_chars)\
    \ == 0\n                            return words[6]\n                        else\n\
    \                            unique_chars = unique_chars - Set(\"a\")\n      \
    \                      \n                            if length(unique_chars) ==\
    \ 0\n                                return words[7]\n                       \
    \     else\n                                unique_chars = unique_chars - Set(\"\
    a\")\n                                \n                                if length(unique_chars)\
    \ == 0\n                                    return words[8]\n                \
    \                else\n                                    unique_chars = unique_chars\
    \ - Set(\"a\")\n                                    \n                       \
    \             if length(unique_chars) == 0\n                                 \
    \       return words[9]\n                                    else\n          \
    \                              unique_chars = unique_chars - Set(\"a\")\n    \
    \                                    \n                                      \
    \  if length(unique_chars) == 0\n                                            return\
    \ words[10]\n                                        else\n                  \
    \                          unique_chars = unique_chars - Set(\"a\")\n        \
    \                                    \n                                      \
    \      if length(unique_chars) == 0\n                                        \
    \        return words[11]\n                                            else\n\
    \                                                unique_chars = unique_chars -\
    \ Set(\"a\")\n                                                \n             \
    \                                   if length(unique_chars) == 0\n           \
    \                                         return words[12]\n                 \
    \                               else\n                                       \
    \             unique_chars = unique_chars - Set(\"a\")\n                     \
    \                               \n                                           \
    \         if length(unique_chars) == 0\n                                     \
    \                   return words[13]\n                                       \
    \             else\n                                                        unique_chars\
    \ = unique_chars - Set(\"a\")\n                                              \
    \          \n                                                        if length(unique_chars)\
    \ == 0\n                                                            return words[14]\n\
    \                                                        else\n              \
    \                                              unique_chars = unique_chars - Set(\"\
    a\")\n                                                            \n         \
    \                                                   if length(unique_chars) ==\
    \ 0\n                                                                return words[15]\n\
    \                                                            else\n          \
    \                                                      unique_chars = unique_chars\
    \ - Set(\"a\")\n                                                             \
    \   \n                                                                if length(unique_chars)\
    \ == 0\n                                                                    return\
    \ words[16]\n                                                                else\n\
    \                                                                    unique_chars\
    \ = unique_chars - Set(\"a\")\n                                              \
    \                      \n", "    unique_chars = Set{String}()\n    for word in\
    \ words\n        for char in word\n            unique_chars.add(char)\n    end\n\
    \    unique_chars = unique_chars - Set(\"a\")\n    unique_chars = unique_chars\
    \ - Set(\"A\")\n    unique_chars = unique_chars - Set(\"0\")\n    unique_chars\
    \ = unique_chars - Set(\"1\")\n    unique_chars = unique_chars - Set(\"2\")\n\
    \    unique_chars = unique_chars - Set(\"3\")\n    unique_chars = unique_chars\
    \ - Set(\"4\")\n    unique_chars = unique_chars - Set(\"5\")\n    unique_chars\
    \ = unique_chars - Set(\"6\")\n    unique_chars = unique_chars - Set(\"7\")\n\
    \    unique_chars = unique_chars - Set(\"8\")\n    unique_chars = unique_chars\
    \ - Set(\"9\")\n    unique_chars = unique_chars - Set(\"+\")\n    unique_chars\
    \ = unique_chars - Set(\"-\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"$\")\n    unique_chars = unique_chars - Set(\"%\")\n    unique_chars\
    \ = unique_chars - Set(\"&\")\n    unique_chars = unique_chars - Set(\"(\")\n\
    \    unique_chars = unique_chars - Set(\")\")\n    unique_chars = unique_chars\
    \ - Set(\"[\")\n    unique_chars = unique_chars - Set(\"]\")\n    unique_chars\
    \ = unique_chars - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n\
    \    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\",\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\",\")\n    unique_chars = unique_chars\
    \ - Set(\";\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\",\")\n    unique_chars = unique_chars - Set(\";\")\n\
    \    unique_chars = unique_chars - Set(\":\")\n    unique_chars = unique_chars\
    \ - Set(\",\")\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\",\")\n\
    \    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_char", "    unique_chars = Set()\n    unique_chars_count\
    \ = Dict()\n    for word in words\n        unique_chars = unique_chars + Set(word)\n\
    \        unique_chars_count[word] = length(unique_chars)\n    end\n    \n    unique_chars_sorted\
    \ = sort(unique_chars_count)\n    \n    unique_chars_sorted[end]\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that accepts a vector of strings and a vector\
    \ of integers. \n    The vector contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.", "    word_counts = Dict{String, Int}()\n    for word in words\n   \
    \     if word in word_counts\n            word_counts[word] += 1\n        else\n\
    \            word_counts[word] = 1\n    end\n    \n    sorted_word_counts = sort(collect(values(word_counts)),\
    \ by=length, rev=true)\n    \n    word_with_max_count = sorted_word_counts[1]\n\
    \    \n    for word in sorted_word_counts\n        if word_with_max_count < word_counts[word]\n\
    \            word_with_max_count = word_counts[word]\n        end\n    end\n \
    \   \n    return word_with_max_count\nend", "    unique_chars = Set{String}()\n\
    \    for w in words\n        for c in w\n            unique_chars.add(c)\n   \
    \ end\n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars = unique_chars\
    \ - Set(\"A\")\n    unique_chars = unique_chars - Set(\"0\")\n    unique_chars\
    \ = unique_chars - Set(\"1\")\n    unique_chars = unique_chars - Set(\"2\")\n\
    \    unique_chars = unique_chars - Set(\"3\")\n    unique_chars = unique_chars\
    \ - Set(\"4\")\n    unique_chars = unique_chars - Set(\"5\")\n    unique_chars\
    \ = unique_chars - Set(\"6\")\n    unique_chars = unique_chars - Set(\"7\")\n\
    \    unique_chars = unique_chars - Set(\"8\")\n    unique_chars = unique_chars\
    \ - Set(\"9\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"$\")\n    unique_chars = unique_chars - Set(\"%\")\n\
    \    unique_chars = unique_chars - Set(\"&\")\n    unique_chars = unique_chars\
    \ - Set(\"*\")\n    unique_chars = unique_chars - Set(\"(\")\n    unique_chars\
    \ = unique_chars - Set(\")\")\n    unique_chars = unique_chars - Set(\"+\")\n\
    \    unique_chars = unique_chars - Set(\",\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\"/\")\n\
    \    unique_chars = unique_chars - Set(\"<\")\n    unique_chars = unique_chars\
    \ - Set(\"<>\")\n    unique_chars = unique_chars - Set(\"=\")\n    unique_chars\
    \ = unique_chars - Set(\"+\")\n    unique_chars = unique_chars - Set(\"?\")\n\
    \    unique_chars = unique_chars - Set(\"!\")\n    unique_chars = unique_chars\
    \ - Set(\"~\")\n    unique_chars = unique_chars - Set(\"@\")\n    unique_chars\
    \ = unique_chars - Set(\"$\")\n    unique_chars = unique_chars - Set(\"%\")\n\
    \    unique_chars = unique_chars - Set(\"^\")\n    unique_chars = unique_chars\
    \ - Set(\"&\")\n    unique_chars = unique_chars - Set(\"*\")\n    unique_chars\
    \ = unique_chars - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n\
    \    unique_chars = unique_chars - Set(\"+\")\n    unique_chars = unique_chars\
    \ - Set(\",\")\n    unique_chars = unique_chars - ", "    unique_chars = Set{String}()\n\
    \    for word in words \n        for char in word\n            unique_chars.add(char)\n\
    \            if unique_chars.size > max_chars\n                max_chars = unique_chars.size\n\
    \            end\n        end\n    end\n    return words[words.index(max_chars)]\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a vector of strings\
    \ and returns a vector of booleans indicating whether each string contains only\
    \ alphabetic characters or not. Return this vector as a new vector.", "    unique_chars\
    \ = Set()\n    unique_chars_count = Dict()\n    for word in words \n        for\
    \ char in word\n            if !contains(unique_chars, char)\n               \
    \ unique_chars += char\n                unique_chars_count[char] = get(unique_chars_count,\
    \ char, 0) + 1\n            else\n                if unique_chars_count[char]\
    \ > unique_chars_count[get(unique_chars, char, 1)]\n                    unique_chars[get(unique_chars,\
    \ char, 1)] = char\n                    unique_chars_count[get(unique_chars, char,\
    \ 1)] = 1\n                end\n            end\n        end\n    end\n    unique_chars\
    \ = unique_chars[end]\n    unique_chars_count[unique_chars] = unique_chars_count[unique_chars]\
    \ + 1\n    return unique_chars\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ accepts a vector of strings and a vector of integers. Return the string with\
    \ maximum number of\nunique characters. If multiple strings have maximum number\
    \ of unique characters, return the one which comes first in lexicographical order.",
  "    word_counts = Dict{String, Int}()\n    for word in words\n        word_counts[word]\
    \ = get(word_counts, word, 0) + 1\n    end\n    word_counts = sort(word_counts,\
    \ by=x->-get(x, \"count\"))\n    word_counts = word_counts[end]\n    return word_counts[\"\
    word\"]\nend", "    \n    unique_chars = Set()\n    \n    for word in words\n\
    \        for char in word\n            unique_chars.add(char)\n    end\n    \n\
    \    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[1]\n    else\n        unique_chars = unique_chars\
    \ - Set(\"a\")\n        \n        if length(unique_chars) == 0\n            return\
    \ words[2]\n        else\n            unique_chars = unique_chars - Set(\"a\"\
    )\n            \n            if length(unique_chars) == 0\n                return\
    \ words[3]\n            else\n                unique_chars = unique_chars - Set(\"\
    a\")\n                \n                if length(unique_chars) == 0\n       \
    \             return words[4]\n                else\n                    unique_chars\
    \ = unique_chars - Set(\"a\")\n                    \n                    if length(unique_chars)\
    \ == 0\n                        return words[5]\n                    else\n  \
    \                      unique_chars = unique_chars - Set(\"a\")\n            \
    \            \n                        if length(unique_chars) == 0\n        \
    \                    return words[6]\n                        else\n         \
    \                   unique_chars = unique_chars - Set(\"a\")\n               \
    \             \n                            if length(unique_chars) == 0\n   \
    \                             return words[7]\n                            else\n\
    \                                unique_chars = unique_chars - Set(\"a\")\n  \
    \                              \n                                if length(unique_chars)\
    \ == 0\n                                    return words[8]\n                \
    \                else\n                                    unique_chars = unique_chars\
    \ - Set(\"a\")\n                                    \n                       \
    \             if length(unique_chars) == 0\n                                 \
    \       return words[9]\n                                    else\n          \
    \                              unique_chars = unique_chars - Set(\"a\")\n    \
    \                                    \n                                      \
    \  if length(unique_chars) == 0\n                                            return\
    \ words[10]\n                                        else\n                  \
    \                          unique_chars = unique_chars - Set(\"a\")\n        \
    \                                    \n                                      \
    \      if length(unique_chars) == 0\n                                        \
    \        return words[11]\n                                            else\n\
    \                                                unique_chars = unique_chars -\
    \ Set(\"a\")\n                                                \n             \
    \                                   if length(unique_chars) == 0\n           \
    \                                         return words[12]\n                 \
    \                               else\n                                       \
    \             unique_chars = unique_chars - Set(\"a\")\n                     \
    \                               \n                                           \
    \         if length(unique_chars) == 0\n                                     \
    \                   return words[13]\n                                       \
    \             else\n                                                        unique_chars\
    \ = unique_chars - Set(\"a\")\n                                              \
    \          \n                                                        if length(unique_chars)\
    \ == 0\n                                                            return words[14]\n\
    \                                                        else\n              \
    \                                              unique_chars = unique_chars - Set(\"\
    a\")\n                                                            \n         \
    \                                                   if length(unique_chars) ==\
    \ 0\n                                                                return words[15]\n\
    \                                                            else\n          \
    \                                                      unique_chars = unique_chars\
    \ - Set(\"a\")\n                                                             \
    \   \n                                                                if length(unique_chars)\
    \ == 0\n                                                                    return\
    \ words[16]\n                                                                else\n\
    \                                                                    unique_chars\
    \ = unique_chars - Set(\"a\")\n                                              \
    \                      \n", "    unique_chars = Set{Char}(\"\")\n    for word\
    \ in words \n        for char in word\n            unique_chars = unique_chars\
    \ + char\n    end\n    unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars\
    \ = unique_chars - Set{Char}(\"A\")\n    unique_chars = unique_chars - Set{Char}(\"\
    0\")\n    unique_chars = unique_chars - Set{Char}(\".\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"_\")\n    unique_chars = unique_chars - Set{Char}(\",\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\";\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\":\")\n    unique_chars = unique_chars - Set{Char}(\"!\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"?\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\":\")\n    unique_chars = unique_chars - Set{Char}(\".\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"_\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\",\")\n    unique_chars = unique_chars - Set{Char}(\";\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\":\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"!\")\n    unique_chars = unique_chars - Set{Char}(\"?\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\".\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"_\")\n    unique_chars = unique_chars - Set{Char}(\",\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\";\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\":\")\n    unique_chars = unique_chars - Set{Char}(\"!\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"?\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\".\")\n    unique_chars = unique_chars - Set{Char}(\"_\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\",\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\";\")\n    unique_chars = unique_chars - Set{Char}(\":\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"!\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"?\")\n    unique_chars = unique_chars - Set{Char}(\".\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"", "    unique_chars = Set{String}()\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(&lowercase))\n    unique_chars\
    \ = unique_chars.union(words.map(&uppercase))\n    unique_chars = unique_chars.union(words.map(&digit))\n\
    \    unique_chars = unique_chars.union(words.map(&punct))\n    unique_chars =\
    \ unique_chars.union(words.map(&nonascii))\n    unique_chars = unique_chars.union(words.map(&unicode))\n\
    \    unique_chars = unique_chars.union(words.map(&isascii))\n    unique_chars\
    \ = unique_chars.union(words.map(&isspace))\n    unique_chars = unique_chars.union(words.map(&isdigit))\n\
    \    unique_chars = unique_chars.union(words.map(&islower))\n    unique_chars\
    \ = unique_chars.union(words.map(&isupper))\n    unique_chars = unique_chars.union(words.map(&isalnum))\n\
    \    unique_chars = unique_chars.union(words.map(&isalpha))\n    unique_chars\
    \ = unique_chars.union(words.map(&isascii))\n    unique_chars = unique_chars.union(words.map(&isspace))\n\
    \    unique_chars = unique_chars.union(words.map(&isdigit))\n    unique_chars\
    \ = unique_chars.union(words.map(&islower))\n    unique_chars = unique_chars.union(words.map(&isupper))\n\
    \    unique_chars = unique_chars.union(words.map(&isalnum))\n    unique_chars\
    \ = unique_chars.union(words.map(&isalpha))\n    unique_chars = unique_chars.union(words.map(&isascii))\n\
    \    unique_chars = unique_chars.union(words.map(&isspace))\n    unique_chars\
    \ = unique_chars.union(words.map(&isdigit))\n    unique_chars = unique_chars.union(words.map(&islower))\n\
    \    unique_chars = unique_chars.union(words.map(&isupper))\n    unique_chars\
    \ = unique_chars.union(words.map(&isalnum))\n    unique_chars = unique_chars.union(words.map(&isalpha))\n\
    \    unique_chars = unique_chars.union(words.map(&isascii))\n    unique_chars\
    \ = unique_chars.union(words.map(&isspace))\n    unique_chars = unique_chars.union(words.map(&isdigit))\n\
    \    unique_chars = unique_chars.union(words.map(&islower))\n    unique_chars\
    \ = unique_chars.union(words.map(&isupper))\n", "    unique_chars = Set{String}()\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words.map(w\
    \ => w))\n    unique_chars = unique_chars.union(words.map(w => w.lower()))\n \
    \   unique_chars = unique_chars.union(words.map(w => w.upper()))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.capitalize()))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.reverse()))\n    unique_chars = unique_chars.union(words.map(w => w.reverse().lower()))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse().upper()))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse().capitalize()))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse().reverse()))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse().reverse().lower()))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse().reverse().upper()))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse().reverse().capitalize()))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse().reverse().reverse()))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse().reverse().reverse().lower()))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse().reverse().reverse().upper()))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse().reverse().reverse().capitalize()))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse().reverse().reverse().reverse()))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse().reverse().reverse().reverse().lower()))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse().reverse().reverse().reverse().upper()))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse().reverse().reverse().reverse().capitalize()))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse().reverse().reverse().reverse().reverse()))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse().reverse().reverse().reverse().reverse().lower()))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse().reverse().reverse().reverse().reverse().upper()))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse().reverse().reverse().reverse().reverse().capitalize()))",
  "    \n    unique_chars = Set{Char}()\n    \n    for word in words \n        for\
    \ char in word\n            unique_chars.add(char)\n        end\n    end\n   \
    \ \n    unique_chars = unique_chars.toSet()\n    \n    if unique_chars.size >\
    \ 1\n        unique_chars = unique_chars.toSortedSet()\n    end\n    \n    return\
    \ unique_chars.first\nend", "    unique_chars = Set{String}()\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.keys() \n    unique_chars\
    \ = unique_chars.sort\n    unique_chars = unique_chars[end]\n    return unique_chars\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    , \"dddd\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\", \"dddd\", \"eeeeee\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    , \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"\
    , \"kkkk\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"\
    , \"kkkk\", \"llll\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"\
    , \"jjjj\", \"kkkk\", \"llll\", \"mmmm\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"\
    eeeeee\", \"ffff\", \"", "    unique_chars = Set()\n    unique_chars_count = 0\n\
    \    \n    for word in words\n        unique_chars = unique_chars + Set(word)\n\
    \        unique_chars_count = length(unique_chars)\n    end\n    \n    if unique_chars_count\
    \ > length(words)\n        return words[1]\n    else\n        return words[end]\n\
    \    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that accepts a vector\
    \ of strings and returns a vector of booleans indicating whether each string contains\
    \ only unique characters or not.", "    unique_chars = Set()\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_", "    word_counts = Dict{String, Int}()\n    for\
    \ word in words\n        word_counts[word] = get(word_counts, word, 0) + 1\n \
    \   end\n    sorted_word_counts = sort(collect(values(word_counts)), by=x->-x)\n\
    \    return sorted_word_counts[1][1]\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that accepts a vector of strings and a vector of integers. Return\
    \ the string that comes first in lexicographical order of the vector of strings\
    \ and that comes first in lexicographical order of the vector of integers.", " \
    \   unique_chars = Set{Char}(\"\")\n    for word in words\n        unique_chars\
    \ = unique_chars | Set(word)\n    end\n    unique_chars = unique_chars - Set(\"\
    a\")\n    unique_chars = unique_chars - Set(\"z\")\n    unique_chars = unique_chars\
    \ - Set(\"A\")\n    unique_chars = unique_chars - Set(\"Z\")\n    unique_chars\
    \ = unique_chars - Set(\"0\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")", "    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_", "    unique_chars = Set{String}()\n    unique_chars.clear()\n\
    \    unique_chars.update!(words)\n    unique_chars.sort!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n", "    unique_chars\
    \ = Set()\n    for word in words\n        unique_chars = unique_chars | Set(word)\n\
    \    end\n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars = unique_chars\
    \ - Set(\"z\")\n    unique_chars = unique_chars - Set(\"A\")\n    unique_chars\
    \ = unique_chars - Set(\"Z\")\n    unique_chars = unique_chars - Set(\"0\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"$\")\n    unique_chars = unique_chars - Set(\"%\")\n    unique_chars\
    \ = unique_chars - Set(\"&\")\n    unique_chars = unique_chars - Set(\"*\")\n\
    \    unique_chars = unique_chars - Set(\"(\")\n    unique_chars = unique_chars\
    \ - Set(\")\")\n    unique_chars = unique_chars - Set(\"+\")\n    unique_chars\
    \ = unique_chars - Set(\",\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\":\")\n    unique_chars = unique_chars\
    \ - Set(\";\")\n    unique_chars = unique_chars - Set(\"<\")\n    unique_chars\
    \ = unique_chars - Set(\"<\")\n    unique_chars = unique_chars - Set(\">\")\n\
    \    unique_chars = unique_chars - Set(\"=\")\n    unique_chars = unique_chars\
    \ - Set(\"?\")\n    unique_chars = unique_chars - Set(\"!\")\n    unique_chars\
    \ = unique_chars - Set(\"@\")\n    unique_chars = unique_chars - Set(\"$\")\n\
    \    unique_chars = unique_chars - Set(\"%\")\n    unique_chars = unique_chars\
    \ - Set(\"^\")\n    unique_chars = unique_chars - Set(\"~\")\n    unique_chars\
    \ = unique_chars - Set(\"*\")\n    unique_chars = unique_chars - Set(\"(\")\n\
    \    unique_chars = unique_chars - Set(\")\")\n    unique_chars = unique_chars\
    \ - Set(\"+\")\n    unique_chars = unique_chars - Set(\",\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\"<\")\n    unique_chars = unique_chars - Set(\"<\")\n    unique_chars\
    \ = unique_chars - Set(\">\")\n    unique_chars = unique_chars - Set(\"=\")\n\
    \    unique_chars = unique_chars - Set(\"?\")\n    unique_chars = unique_chars\
    \ - Set(\"!\")\n    unique_chars = unique_chars - Set(\"@\")\n", "    unique_chars\
    \ = Set{Char}(\"\")\n    for word in words \n        for char in word\n      \
    \      unique_chars = unique_chars + char\n    end\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"A\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"0\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"9\")\n    unique_chars = unique_chars - Set{Char}(\"_\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"_\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"_\")\n    unique_chars = unique_chars - Set{Char}(\"_\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"_\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"_\")\n    unique_chars = unique_chars - Set{Char}(\"_\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"_\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"_\")\n    unique_chars = unique_chars - Set{Char}(\"_\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"_\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"_\")\n    unique_chars = unique_chars - Set{Char}(\"_\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"_\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"_\")\n    unique_chars = unique_chars - Set{Char}(\"_\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"_\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"_\")\n    unique_chars = unique_chars - Set{Char}(\"_\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"_\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"_\")\n    unique_chars = unique_chars - Set{Char}(\"_\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"_\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"_\")\n    unique_chars = unique_chars - Set{Char}(\"_\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"_\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"_\")\n    unique_chars = unique_chars - Set{Char}(\"_\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"_\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"_\")\n    unique_chars = unique_", "    unique_chars = Set{String}()\n\
    \    for word in words \n        for char in word\n            unique_chars[char]\
    \ <- unique_chars[char] + 1\n    end\n    \n    unique_chars = unique_chars.keys\n\
    \    unique_chars = sort(unique_chars)\n    \n    unique_chars[end] <-\n     \
    \   length(unique_chars) - length(unique_chars[end])\n    \n    unique_chars[end]\
    \ <-\n        length(unique_chars) - length(unique_chars[end])\n    \n    unique_chars[end]\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a vector of strings\
    \ and returns a vector of strings. \nThe vector contains different words. Return\
    \ the word with maximum number\nof unique characters. If multiple strings have\
    \ maximum number of unique\ncharacters, return the one which comes first in lexicographical\
    \ order.", "    unique_chars = Set{String}()\n    for word in words \n       \
    \ for char in word\n            unique_chars.add(char)\n    end\n    \n    if\
    \ unique_chars.size > 1\n        unique_chars.sort\n    end\n    \n    return\
    \ words[unique_chars.first]\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ accepts a vector of strings and returns a vector of booleans indicating whether\
    \ each string has unique characters or not.", "    unique_chars = Set{String}()\n\
    \    unique_chars.update(*words)\n    unique_chars.sort!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!",
  "    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_", " \
    \   unique_chars = Set{String}()\n    for word in words \n        for char in\
    \ word\n            unique_chars[char] = unique_chars[char] + 1\n    end\n   \
    \ unique_chars = unique_chars.keys\n    unique_chars.sort()\n    return unique_chars[end]\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a vector of strings\
    \ and a vector of integers. \n    The vector contains different words. Return\
    \ the word with maximum number\n    of unique characters. If multiple strings\
    \ have maximum number of unique\n    characters, return the one which comes first\
    \ in lexicographical order.", "    unique_chars = Set{String}()\n    for word\
    \ in words \n        unique_chars = unique_chars + Set{String}(word)\n    end\n\
    \    unique_chars = unique_chars - Set{String}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"b\")\n    unique_chars = unique_chars - Set{String}(\"c\")\n\
    \    unique_chars = unique_chars - Set{String}(\"d\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"e\")\n    unique_chars = unique_chars - Set{String}(\"f\")\n\
    \    unique_chars = unique_chars - Set{String}(\"g\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"h\")\n    unique_chars = unique_chars - Set{String}(\"i\")\n\
    \    unique_chars = unique_chars - Set{String}(\"j\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"k\")\n    unique_chars = unique_chars - Set{String}(\"l\")\n\
    \    unique_chars = unique_chars - Set{String}(\"m\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"n\")\n    unique_chars = unique_chars - Set{String}(\"o\")\n\
    \    unique_chars = unique_chars - Set{String}(\"p\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"q\")\n    unique_chars = unique_chars - Set{String}(\"r\")\n\
    \    unique_chars = unique_chars - Set{String}(\"s\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"t\")\n    unique_chars = unique_chars - Set{String}(\"u\")\n\
    \    unique_chars = unique_chars - Set{String}(\"v\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"w\")\n    unique_chars = unique_chars - Set{String}(\"x\")\n\
    \    unique_chars = unique_chars - Set{String}(\"y\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"z\")\n    unique_chars = unique_chars - Set{String}(\"A\")\n\
    \    unique_chars = unique_chars - Set{String}(\"B\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"C\")\n    unique_chars = unique_chars - Set{String}(\"D\")\n\
    \    unique_chars = unique_chars - Set{String}(\"E\")\n    unique_chars = unique_chars\
    \ - Set{String}(\"F\")\n    unique_chars = unique_chars - Set{", "    unique_chars\
    \ = Set{String}()\n    for word in words \n        for char in word\n        \
    \    unique_chars.add(char)\n    end\n    \n    if unique_chars.size == words.length\n\
    \        return words[end]\n    else \n        unique_chars = unique_chars.sorted()\n\
    \        unique_chars.reverse()\n        for word in words \n            if unique_chars.contains(word)\n\
    \                return word\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that accepts a vector of strings and returns a vector of strings. \n\
    The vector contains different words. \nReturn the word with maximum number of\
    \ unique characters. If multiple strings have maximum number of unique characters,\
    \ return the one which comes first in lexicographical order.", "    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars = unique_chars.union(Set(words))\n    unique_chars\
    \ = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(word", "    unique_chars = Set{String}()\n\
    \    word_with_max_unique_chars = \"\"\n    for word in words \n        unique_chars\
    \ = unique_chars | Set(word)\n        if unique_chars.size > word_with_max_unique_chars.length\n\
    \            word_with_max_unique_chars = word\n        end\n    end\n    return\
    \ word_with_max_unique_chars\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ accepts a vector of strings and a vector of integers. \n    The vector contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.", "    \n    unique_chars =\
    \ Set{String}()\n    \n    for w in words\n        for c in w\n            unique_chars.add(c)\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[1]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[2]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[3]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[4]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[5]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[6]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[7]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[8]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[9]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[10]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[11]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[12]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[13]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[14]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[15]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[16]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n", "    unique_chars\
    \ = Set{Char}()\n    unique_chars.update([c for c in words[1]])\n    for w in\
    \ words[2:end]\n        unique_chars.update([c for c in w])\n    return words[1]\
    \ if unique_chars.size == words[1].size else words[2]\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that accepts a vector of strings and returns a vector\
    \ of booleans indicating whether each string contains only unique characters.",
  "    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words.map(w => w[1]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[2]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[3]))\n    unique_chars = unique_chars.union(words.map(w => w[4]))\n   \
    \ unique_chars = unique_chars.union(words.map(w => w[5]))\n    unique_chars =\
    \ unique_chars.union(words.map(w => w[6]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[7]))\n    unique_chars = unique_chars.union(words.map(w => w[8]))\n   \
    \ unique_chars = unique_chars.union(words.map(w => w[9]))\n    unique_chars =\
    \ unique_chars.union(words.map(w => w[10]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[11]))\n    unique_chars = unique_chars.union(words.map(w => w[12]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[13]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[14]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[15]))\n    unique_chars = unique_chars.union(words.map(w => w[16]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[17]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[18]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[19]))\n    unique_chars = unique_chars.union(words.map(w => w[20]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[21]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[22]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[23]))\n    unique_chars = unique_chars.union(words.map(w => w[24]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[25]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[26]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[27]))\n    unique_chars = unique_chars.union(words.map(w => w[28]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[29]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w", "    unique_chars = Set{String}()\n\
    \    unique_chars.update(*words)\n    unique_chars.sort!()\n    unique_chars.reverse!()\n\
    \    \n    for word in unique_chars\n        if length(word) == length(words[1])\n\
    \            return word\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that accepts a vector of strings and returns a vector of strings. Each\
    \ element of the returned vector is the word with maximum number of unique characters.\
    \ If the word has maximum number of unique characters, return it without modifying\
    \ the original vector. Otherwise return an empty string.", "    unique_chars =\
    \ Set{Char}(\"\")\n    for word in words \n        for c in word\n           \
    \ unique_chars = unique_chars + c\n    end\n    unique_chars = unique_chars -\
    \ Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars\
    \ = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"\
    a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"a\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"a\")\n   \
    \ unique_chars = unique_chars - ", "    unique_chars = Set()\n    unique_chars_count\
    \ = Set()\n    for word in words\n        unique_chars = unique_chars + Set(word)\n\
    \        unique_chars_count = unique_chars_count + Set(word) \n    end\n    \n\
    \    if length(unique_chars) == length(unique_chars_count)\n        return words[argmax(unique_chars_count)]\n\
    \    else\n        return words[argmax(unique_chars)]\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that accepts a vector of strings and a vector\
    \ of integers. Return the word with maximum number of unique characters. If multiple\
    \ strings have maximum number of unique characters, return the one which comes\
    \ first in lexicographical order.", "    unique_chars = Set{String}()\n    unique_chars.update(*words)\n\
    \    unique_chars.sort!()\n    \n    unique_chars.max() \nend\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that accepts a vector of strings and returns a vector\
    \ of strings. \nThe vector contains different words. \nReturn the word with maximum\
    \ number of unique characters. If multiple strings have maximum number of unique\
    \ characters, return the one which comes first in lexicographical order.", " \
    \   unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.keys() \n    unique_chars = unique_chars.sort\n\
    \    unique_chars = unique_chars[1]\n    return unique_chars\nend\n</cell>\n<code\
    \ language=julia-1.4>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n<code\
    \ language=julia-1.4>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code\
    \ language=julia-1.4>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that accepts a vector of strings and a vector of\
    \ integers. Return the word with maximum number of unique characters. If multiple\
    \ strings have maximum number of unique characters, return the one which comes\
    \ first in lexicographical order.", "    unique_chars = Set()\n    for word in\
    \ words\n        unique_chars = unique_chars | Set(word)\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"a\")\n    unique_chars = unique_chars - Set(\"b\")\n\
    \    unique_chars = unique_chars - Set(\"c\")\n    unique_chars = unique_chars\
    \ - Set(\"d\")\n    unique_chars = unique_chars - Set(\"e\")\n    unique_chars\
    \ = unique_chars - Set(\"f\")\n    unique_chars = unique_chars - Set(\"g\")\n\
    \    unique_chars = unique_chars - Set(\"h\")\n    unique_chars = unique_chars\
    \ - Set(\"i\")\n    unique_chars = unique_chars - Set(\"j\")\n    unique_chars\
    \ = unique_chars - Set(\"k\")\n    unique_chars = unique_chars - Set(\"l\")\n\
    \    unique_chars = unique_chars - Set(\"m\")\n    unique_chars = unique_chars\
    \ - Set(\"n\")\n    unique_chars = unique_chars - Set(\"o\")\n    unique_chars\
    \ = unique_chars - Set(\"p\")\n    unique_chars = unique_chars - Set(\"q\")\n\
    \    unique_chars = unique_chars - Set(\"r\")\n    unique_chars = unique_chars\
    \ - Set(\"s\")\n    unique_chars = unique_chars - Set(\"t\")\n    unique_chars\
    \ = unique_chars - Set(\"u\")\n    unique_chars = unique_chars - Set(\"v\")\n\
    \    unique_chars = unique_chars - Set(\"w\")\n    unique_chars = unique_chars\
    \ - Set(\"x\")\n    unique_chars = unique_chars - Set(\"y\")\n    unique_chars\
    \ = unique_chars - Set(\"z\")\n    unique_chars = unique_chars - Set(\"A\")\n\
    \    unique_chars = unique_chars - Set(\"B\")\n    unique_chars = unique_chars\
    \ - Set(\"C\")\n    unique_chars = unique_chars - Set(\"D\")\n    unique_chars\
    \ = unique_chars - Set(\"E\")\n    unique_chars = unique_chars - Set(\"F\")\n\
    \    unique_chars = unique_chars - Set(\"G\")\n    unique_chars = unique_chars\
    \ - Set(\"H\")\n    unique_chars = unique_chars - Set(\"I\")\n    unique_chars\
    \ = unique_chars - Set(\"J\")\n    unique_chars = unique_chars - Set(\"K\")\n\
    \    unique_chars = unique_chars - Set(\"L\")\n    unique_chars = unique_chars\
    \ - Set(\"M\")\n    unique_chars = unique_chars - Set(\"N\")\n    unique_chars\
    \ = unique_chars - Set(\"O\")\n    ", "    unique_chars = Set()\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_char", "    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_", "    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n", "    unique_chars = Set{Char}()\n\
    \    for word in words \n        for char in word\n            unique_chars.add(char)\n\
    \            unique_chars.delete(char.upper())\n            unique_chars.delete(char.lower())\n\
    \        end\n    end\n    unique_chars = unique_chars.toSet()\n    unique_chars.sort!()\n\
    \    return words[unique_chars.last]\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that accepts a vector of strings and a vector of integers. \n    Each\
    \ integer represents the number of unique characters in each string. \n    For\
    \ example, if the first string has 5 unique characters and the second string has\
    \ 3 unique characters, \n    then the first string has 5 unique characters and\
    \ the second string has 3 unique characters. \n    Write a function that returns\
    \ the string with the maximum number of unique characters. \n    For example,\
    \ if the first string has 5 unique characters and the second string has 3 unique\
    \ characters, \n    then the first string has 5 unique characters and the second\
    \ string has 3 unique characters. \n    Write a function that returns the string\
    \ with the maximum number of unique characters. \n    For example, if the first\
    \ string has 5 unique characters and the second string has 3 unique characters,\
    \ \n    then the first string has 5 unique characters and the second string has\
    \ 3 unique characters. \n    Write a function that returns the string with the\
    \ maximum number of unique characters. \n    For example, if the first string\
    \ has 5 unique characters and the second string has 3 unique characters, \n  \
    \  then the first string has 5 unique characters and the second string has 3 unique\
    \ characters. \n    Write a function that returns the string with the maximum\
    \ number of unique characters. \n    For example, if the first string has 5 unique\
    \ characters and the second string has 3 unique characters, \n    then the first\
    \ string has 5 unique characters and the second string has 3 unique characters.\
    \ \n    Write a function that returns the string with the maximum number of unique\
    \ characters. \n    For example, if the first string has 5 unique characters and\
    \ the second string has 3 unique characters, \n    then the first string has 5\
    \ unique characters and the second string has 3 unique characters. \n    Write\
    \ a function that returns the string with the maximum number of unique characters.\
    \ \n    For example, if the first string has 5 unique characters and the second\
    \ string has 3 unique characters, \n    then the first string has 5 unique characters\
    \ and the second string has 3 unique characters. \n    Write a function that returns\
    \ the string with the maximum number of unique characters. \n    For example,\
    \ if the first string has 5 unique characters and the second ", "    unique_chars\
    \ = Set()\n    for word in words \n        for char in word\n            unique_chars.add(char)\n\
    \    end\n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars = unique_chars\
    \ - Set(\"A\")\n    unique_chars = unique_chars - Set(\"0\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\",\")\n\
    \    unique_chars = unique_chars - Set(\"!\")\n    unique_chars = unique_chars\
    \ - Set(\"?\")\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\"(\")\n\
    \    unique_chars = unique_chars - Set(\")\")\n    unique_chars = unique_chars\
    \ - Set(\"[\")\n    unique_chars = unique_chars - Set(\"]\")\n    unique_chars\
    \ = unique_chars - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n\
    \    unique_chars = unique_chars - Set(\"{\")\n    unique_chars = unique_chars\
    \ - Set(\"}\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\",\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\"(\")\n\
    \    unique_chars = unique_chars - Set(\")\")\n    unique_chars = unique_chars\
    \ - Set(\"[\")\n    unique_chars = unique_chars - Set(\"]\")\n    unique_chars\
    \ = unique_chars - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n\
    \    unique_chars = unique_chars - Set(\"{\")\n    unique_chars = unique_chars\
    \ - Set(\"}\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\",\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\"(\")\n\
    \    unique_chars = unique_chars - Set(\")\")\n    unique_chars = unique_chars\
    \ - Set(\"[\")\n    unique_chars = unique_chars - Set(\"]\")", "    \n    unique_chars\
    \ = Set()\n    \n    for word in words\n        for char in word\n           \
    \ unique_chars.add(char)\n    end\n    \n    unique_chars = unique_chars - Set(\"\
    a\")\n    \n    if length(unique_chars) == 0\n        return words[1]\n    end\n\
    \    \n    unique_chars = unique_chars - Set(\"z\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[2]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    \n    if length(unique_chars) == 0\n        return words[3]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"9\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[4]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\".\")\n    \n    if length(unique_chars) == 0\n        return words[5]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"_\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[6]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[7]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"z\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[8]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    \n    if length(unique_chars) == 0\n        return words[9]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"9\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[10]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\".\")\n    \n    if length(unique_chars) == 0\n        return words[11]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"_\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[12]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[13]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"z\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[14]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    \n    if length(unique_chars) == 0\n        return words[15]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"9\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[16]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\".\")", "    word_counts = Dict()\n    for word in words\n        word_counts[word]\
    \ = get(word_counts, word, 0) + 1\n    end\n    word_counts = sort(word_counts,\
    \ by=x->-length(x))\n    word_counts = word_counts[end]\n    word_counts = word_counts[1]\n\
    \    return word_counts\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ accepts a vector of strings and returns a vector of strings. \nThe vector contains\
    \ different words. \nThe function should return the same vector but with words\
    \ sorted alphabetically.", "    unique_chars = Set{String}()\n    for word in\
    \ words \n        for char in word\n            unique_chars.add(char)\n    end\n\
    \    \n    if unique_chars.size > 1\n        unique_chars = unique_chars.sort\n\
    \    end\n    \n    return unique_chars[1]\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that accepts a vector of strings and a vector of integers. \n    The\
    \ vector contains different words. Return the word with maximum number\n    of\
    \ unique characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.", "    unique_chars\
    \ = Set{String}()\n    unique_chars.update([w for w in words])\n    unique_chars.update([w[1:]\
    \ for w in words])\n    unique_chars.update([w[2:] for w in words])\n    unique_chars.update([w[3:]\
    \ for w in words])\n    unique_chars.update([w[4:] for w in words])\n    unique_chars.update([w[5:]\
    \ for w in words])\n    unique_chars.update([w[6:] for w in words])\n    unique_chars.update([w[7:]\
    \ for w in words])\n    unique_chars.update([w[8:] for w in words])\n    unique_chars.update([w[9:]\
    \ for w in words])\n    unique_chars.update([w[10:] for w in words])\n    unique_chars.update([w[11:]\
    \ for w in words])\n    unique_chars.update([w[12:] for w in words])\n    unique_chars.update([w[13:]\
    \ for w in words])\n    unique_chars.update([w[14:] for w in words])\n    unique_chars.update([w[15:]\
    \ for w in words])\n    unique_chars.update([w[16:] for w in words])\n    unique_chars.update([w[17:]\
    \ for w in words])\n    unique_chars.update([w[18:] for w in words])\n    unique_chars.update([w[19:]\
    \ for w in words])\n    unique_chars.update([w[20:] for w in words])\n    unique_chars.update([w[21:]\
    \ for w in words])\n    unique_chars.update([w[22:] for w in words])\n    unique_chars.update([w[23:]\
    \ for w in words])\n    unique_chars.update([w[24:] for w in words])\n    unique_chars.update([w[25:]\
    \ for w in words])\n    unique_chars.update([w[26:] for w in words])\n    unique_chars.update([w[27:]\
    \ for w in words])\n    unique_chars.update([w[28:] for w in words])\n    unique_chars.update([w[29:]\
    \ for w in words])\n    unique_chars.update([w[31:] for w in words])\n    unique_chars.update([w[32:]\
    \ for w in words])\n    unique_chars.update([w[33:] for w in words])\n    unique_chars.update([w[34:]\
    \ for w in words])\n    unique_chars.update([w[35:] for w in words])\n    unique_chars.update([w",
  "    \n    unique_chars = Set()\n    \n    for word in words \n        unique_chars\
    \ = unique_chars | Set(word)\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"a\")\n    \n    if length(unique_chars) > length(words)\n        return\
    \ words[end]\n    else\n        return words[end]\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that accepts a vector of strings and a vector of\
    \ integers. \n    The vector contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.", "    unique_chars = Set{Char}(\"\")\n    for word in words \n     \
    \   for char in word\n            unique_chars <- unique_chars + char\n      \
    \  end\n    end\n    \n    if length(unique_chars) == length(words)\n        return\
    \ words[end]\n    else\n        unique_chars = sort(unique_chars)\n        for\
    \ word in words\n            if unique_chars[end] == words[end]\n            \
    \    return words[end]\n            end\n        end\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <code language=julia-1.4>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n\
    <code language=julia-1.4>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n\
    <code language=julia-1.4>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <code language=julia-1.4>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <code language=julia-1.4>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <code language=julia-1.4>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <code language=julia-1.4>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <code language=julia-1.4>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <code language=julia-1.4>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <code language=julia-1.4>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <code language=julia-1.4>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <code language=julia-1.4>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <code language=julia-1.4>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <code language=julia-1.4>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <code language=julia-1.4>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <code language=julia-1.4>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <code language=julia-1.4>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <code language=julia-1.4>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <code language=julia-1.4>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <code language=julia-1.4>", "    unique_chars = Set{String}()\n    for w in words\n\
    \        unique_chars = unique_chars | Set(w)\n    end\n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    unique_chars = unique_chars - Set(\"z\")\n    unique_chars\
    \ = unique_chars - Set(\"0\")\n    unique_chars = unique_chars - Set(\"9\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\",\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n\
    \    unique_chars = unique_chars - Set(\"(\")\n    unique_chars = unique_chars\
    \ - Set(\")\")\n    unique_chars = unique_chars - Set(\"[\")\n    unique_chars\
    \ = unique_chars - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n\
    \    unique_chars = unique_chars - Set(\"}\")\n    unique_chars = unique_chars\
    \ - Set(\"'\")\n    unique_chars = unique_chars - Set(\"\\\"\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\",\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"z\")\n    unique_chars = unique_chars - Set(\"a\")\n\
    \    unique_chars = unique_chars - Set(\"0\")\n    unique_chars = unique_chars\
    \ - Set(\"9\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\",\")\n\
    \    unique_chars = unique_chars - Set(\":\")\n    unique_chars = unique_chars\
    \ - Set(\";\")\n    unique_chars = unique_chars - Set(\"(\")\n    unique_chars\
    \ = unique_chars - Set(\")\")\n    unique_chars = unique_chars - Set(\"[\")\n\
    \    unique_chars = unique_chars - Set(\"]\")\n    unique_chars = unique_chars\
    \ - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n    unique_chars\
    \ = unique_chars - Set(\"'\")\n    unique_chars = unique_chars - Set(\"\\\"\"\
    )\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\",\")\n    unique_chars\
    \ = unique_char", "    \n    unique_chars = Set{String}()\n    \n    for word\
    \ in words \n        unique_chars = unique_chars | Set(word)\n    end\n    \n\
    \    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return words[1]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0 \n        return words[2]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return words[3]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0 \n        return words[4]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return words[5]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0 \n        return words[6]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return words[7]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0 \n        return words[8]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return words[9]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0 \n        return words[10]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return words[11]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0 \n        return words[12]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return words[13]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0 \n        return words[14]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0 \n        return words[15]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0 \n        return words[16]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n", "    unique_chars\
    \ = Set{Char}(\"\")\n    for w in words\n        for c in w\n            unique_chars\
    \ = unique_chars + c\n    end\n    \n    if length(unique_chars) == 0\n      \
    \  return \"\"\n    end\n    \n    unique_chars = sort(unique_chars)\n    \n \
    \   unique_chars = unique_chars[end]\n    \n    return unique_chars\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that accepts a vector of strings and returns\
    \ a vector of strings. Each element of the returned vector should contain the\
    \ number of unique characters in that string.", "    \n    unique_chars = Set{Char}(\"\
    \")\n    \n    for word in words\n        for char in word\n            unique_chars\
    \ <- unique_chars + char\n        end\n    end\n    \n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    \n    if length(unique_chars) == 0\n        return \"\
    no word\"\n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"a\")\n\
    \    \n    if length(unique_chars) == 0\n        return \"no word\"\n    end\n\
    \    \n    unique_chars = unique_chars - Set{Char}(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"no word\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    \n    if length(unique_chars) == 0\n        return \"\
    no word\"\n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"a\")\n\
    \    \n    if length(unique_chars) == 0\n        return \"no word\"\n    end\n\
    \    \n    unique_chars = unique_chars - Set{Char}(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"no word\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    \n    if length(unique_chars) == 0\n        return \"\
    no word\"\n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"a\")\n\
    \    \n    if length(unique_chars) == 0\n        return \"no word\"\n    end\n\
    \    \n    unique_chars = unique_chars - Set{Char}(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"no word\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    \n    if length(unique_chars) == 0\n        return \"\
    no word\"\n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"a\")\n\
    \    \n    if length(unique_chars) == 0\n        return \"no word\"\n    end\n\
    \    \n    unique_chars = unique_chars - Set{Char}(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"no word\"\n    end\n    \n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    \n    if length(unique_chars) == 0\n        return \"\
    no word\"\n    end\n    \n    unique_chars = unique_chars - Set{Char}(\"a\")\n\
    \    \n    if length(unique_chars) == 0\n        return \"no word\"\n    end\n\
    \    \n    unique_chars = unique_chars - Set{Char}(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"no word", "    unique_chars = Set()\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_", "    unique_chars = Set()\n    unique_chars_count\
    \ = 0\n    \n    for word in words\n        unique_chars = unique_chars + Set(word)\n\
    \        unique_chars_count = unique_chars_count + length(word)\n    end\n   \
    \ \n    if unique_chars_count > length(words)\n        return words[end]\n   \
    \ else\n        \n        unique_chars_count = length(words)\n        \n     \
    \   for word in words\n            unique_chars = unique_chars - Set(word)\n \
    \           unique_chars_count = unique_chars_count - length(word)\n        end\n\
    \        \n        if unique_chars_count > length(words)\n            return words[end]\n\
    \        else\n            return words[end]\n        end\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <code language=julia-1.5>\n", "    unique_chars = Set{String}()\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.union(words[1])\n\
    \    unique_chars = unique_chars.union(words[2])\n    unique_chars = unique_chars.union(words[3])\n\
    \    unique_chars = unique_chars.union(words[4])\n    unique_chars = unique_chars.union(words[5])\n\
    \    unique_chars = unique_chars.union(words[6])\n    unique_chars = unique_chars.union(words[7])\n\
    \    unique_chars = unique_chars.union(words[8])\n    unique_chars = unique_chars.union(words[9])\n\
    \    unique_chars = unique_chars.union(words[10])\n    unique_chars = unique_chars.union(words[11])\n\
    \    unique_chars = unique_chars.union(words[12])\n    unique_chars = unique_chars.union(words[13])\n\
    \    unique_chars = unique_chars.union(words[14])\n    unique_chars = unique_chars.union(words[15])\n\
    \    unique_chars = unique_chars.union(words[16])\n    unique_chars = unique_chars.union(words[17])\n\
    \    unique_chars = unique_chars.union(words[18])\n    unique_chars = unique_chars.union(words[19])\n\
    \    unique_chars = unique_chars.union(words[20])\n    unique_chars = unique_chars.union(words[21])\n\
    \    unique_chars = unique_chars.union(words[22])\n    unique_chars = unique_chars.union(words[23])\n\
    \    unique_chars = unique_chars.union(words[24])\n    unique_chars = unique_chars.union(words[25])\n\
    \    unique_chars = unique_chars.union(words[26])\n    unique_chars = unique_chars.union(words[27])\n\
    \    unique_chars = unique_chars.union(words[28])\n    unique_chars = unique_chars.union(words[29])\n\
    \    unique_chars = unique_chars.union(words[30])\n    unique_chars = unique_chars.union(words[31])\n\
    \    unique_chars = unique_chars.union(words[32])\n    unique_chars = unique_chars.union(words[33])\n\
    \    unique_chars = unique_chars.union(words[34])\n    unique_chars = unique_chars.union(words[35])\n\
    \    unique_chars = unique_chars.union(words[36])\n    unique_chars = unique_chars.union(words[37])\n\
    \    unique_chars = unique_chars.union(words[38])\n    unique_chars = unique_chars.union(word",
  "    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_char", "    unique_chars\
    \ = Set()\n    unique_chars_counts = Dict()\n    for word in words\n        unique_chars\
    \ = unique_chars + Set(word)\n        unique_chars_counts[length(unique_chars)]\
    \ = unique_chars_counts[length(unique_chars)] + 1\n    end\n    \n    unique_chars_counts\
    \ = Dict(unique_chars_counts)\n    \n    sorted_unique_chars = collect(unique_chars)\n\
    \    \n    sorted_unique_chars_counts = collect(unique_chars_counts)\n    \n \
    \   sorted_unique_chars_counts = sort_by(sorted_unique_chars_counts, :last)\n\
    \    \n    sorted_unique_chars_counts = reverse(sorted_unique_chars_counts)\n\
    \    \n    sorted_unique_chars_counts = reverse(sorted_unique_chars_counts)\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    word_counts = Dict{String, Int}()\n    for word in\
    \ words\n        word_counts[word] = get(word_counts, word, 0) + 1\n    end\n\
    \    word_counts = sort(word_counts)\n    return word_counts[1][1]\nend\n</cell>\n\
    <code language=julia-1.0>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n\
    <code language=julia-1.0>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n\
    <code language=julia-1.0>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <text>\nExercise: Write a function that accepts a vector of strings and returns\
    \ a vector of strings. Each string in the returned vector should contain one word\
    \ from the input vector. \n    Each word in the returned vector should contain\
    \ maximum number of unique characters.", "    unique_chars = Set()\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_", "    \n    unique_chars = Set()\n    \n    for w\
    \ in words\n        unique_chars = unique_chars | Set(w)\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"a\")\n    unique_chars = unique_chars - Set(\"A\")\n\
    \    \n    unique_chars = unique_chars - Set(\"0\")\n    unique_chars = unique_chars\
    \ - Set(\"1\")\n    \n    unique_chars = unique_chars - Set(\"2\")\n    unique_chars\
    \ = unique_chars - Set(\"3\")\n    \n    unique_chars = unique_chars - Set(\"\
    4\")\n    unique_chars = unique_chars - Set(\"5\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"6\")\n    unique_chars = unique_chars - Set(\"7\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"8\")\n    unique_chars = unique_chars - Set(\"9\")\n\
    \    \n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"$\")\n    \n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\",\")\n    \n    unique_chars = unique_chars - Set(\"\
    :\")\n    unique_chars = unique_chars - Set(\";\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"[\")\n    unique_chars = unique_chars - Set(\"]\")\n\
    \    \n    unique_chars = unique_chars - Set(\"{\")\n    unique_chars = unique_chars\
    \ - Set(\"}\")\n    \n    unique_chars = unique_chars - Set(\"!\")\n    unique_chars\
    \ = unique_chars - Set(\"?\")\n    \n    unique_chars = unique_chars - Set(\"\
    *\")\n    unique_chars = unique_chars - Set(\"+\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"+\")\n    unique_chars = unique_chars - Set(\"+\")\n\
    \    \n    unique_chars = unique_chars - Set(\"+\")\n    unique_chars = unique_chars\
    \ - Set(\"+\")\n    \n    unique_chars = unique_chars - Set(\"+\")\n    unique_chars\
    \ = unique_chars - Set(\"+\")\n    \n    unique_chars = unique_chars - Set(\"\
    +\")\n    unique_chars = unique_chars - Set(\"+\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"+\")\n    unique_chars = unique_", "    \n    unique_chars = Set()\n\
    \    \n    for word in words\n        unique_chars = unique_chars | Set(word)\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars\
    \ = unique_chars - Set(\"A\")\n    \n    unique_chars = unique_chars - Set(\"\
    0\")\n    unique_chars = unique_chars - Set(\"1\")\n    \n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\"_\")\n    \n    unique_chars\
    \ = unique_chars - Set(\",\")\n    unique_chars = unique_chars - Set(\";\")\n\
    \    \n    unique_chars = unique_chars - Set(\":\")\n    unique_chars = unique_chars\
    \ - Set(\";\")\n    \n    unique_chars = unique_chars - Set(\"(\")\n    unique_chars\
    \ = unique_chars - Set(\")\")\n    \n    unique_chars = unique_chars - Set(\"\
    [\")\n    unique_chars = unique_chars - Set(\"]\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n    \n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n\
    \    \n    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n    \n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\";\")\n    \n    unique_chars = unique_chars\
    \ - Set(\";\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    \n    unique_chars = unique_chars - Set(\"\
    ;\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars = unique_chars\
    \ - Set(\";\")\n    \n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n\
    \    \n    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n    \n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\";\")\n    \n", "    unique_chars = Set{String}()\n\
    \    for w in words\n        unique_chars = unique_chars | Set(w)\n    end\n \
    \   unique_chars = unique_chars - Set(\"a\")\n    unique_chars = unique_chars\
    \ - Set(\"z\")\n    unique_chars = unique_chars - Set(\"A\")\n    unique_chars\
    \ = unique_chars - Set(\"Z\")\n    unique_chars = unique_chars - Set(\"0\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")", "    \n    unique_chars = Set()\n    \n    for\
    \ word in words \n        for char in word\n            unique_chars.add(char)\n\
    \        end\n    end\n    \n    unique_chars = unique_chars.toArray()\n    \n\
    \    unique_chars = unique_chars[unique_chars..end]\n    \n    unique_chars =\
    \ unique_chars[unique_chars..end]\n    \n    unique_chars = unique_chars[unique_chars..end]\n\
    \    \n    unique_chars = unique_chars[unique_chars..end]\n    \n    unique_chars\
    \ = unique_chars[unique_chars..end]\n    \n    unique_chars = unique_chars[unique_chars..end]\n\
    \    \n    unique_chars = unique_chars[unique_chars..end]\n    \n    unique_chars\
    \ = unique_chars[unique_chars..end]\n    \n    unique_chars = unique_chars[unique_chars..end]\n\
    \    \n    unique_chars = unique_chars[unique_chars..end]\n    \n    unique_chars\
    \ = unique_chars[unique_chars..end]\n    \n    unique_chars = unique_chars[unique_chars..end]\n\
    \    \n    unique_chars = unique_chars[unique_chars..end]\n    \n    unique_chars\
    \ = unique_chars[unique_chars..end]\n    \n    unique_chars = unique_chars[unique_chars..end]\n\
    \    \n    unique_chars = unique_chars[unique_chars..end]\n    \n    unique_chars\
    \ = unique_chars[unique_chars..end]\n    \n    unique_chars = unique_chars[unique_chars..end]\n\
    \    \n    unique_chars = unique_chars[unique_chars..end]\n    \n    unique_chars\
    \ = unique_chars[unique_chars..end]\n    \n    unique_chars = unique_chars[unique_chars..end]\n\
    \    \n    unique_chars = unique_chars[unique_chars..end]\n    \n    unique_chars\
    \ = unique_chars[unique_chars..end]\n    \n    unique_chars = unique_chars[unique_chars..end]\n\
    \    \n    unique_chars = unique_chars[unique_chars..end]\n    \n    unique_chars\
    \ = unique_chars[unique_chars..end]\n    \n    unique_chars = unique_chars[unique_chars..end]\n\
    \    \n    unique_chars = unique_chars[unique_chars..end]\n    \n    unique_chars\
    \ = unique_chars[unique_chars..end]\n    \n    unique_chars = unique_chars[unique_chars..end]\n\
    \    \n    unique_chars = unique_chars[unique_chars..end]\n    \n    unique_char",
  "    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.keys() \n    unique_chars = unique_chars.sort\n\
    \    unique_chars = unique_chars[1]\n    return unique_chars\nend\n</cell>\n<code\
    \ language=julia-1.4>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that accepts a vector of strings and a vector of\
    \ integers. Return the string with maximum number of\nunique characters. If multiple\
    \ strings have maximum number of unique characters, return the one which comes\
    \ first in lexicographical order.", "    unique_chars = Set{String}()\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_", "    word_count = Dict{String, Int}()\n    for word in words\n\
    \        if !haskey(word_count, word)\n            word_count[word] = 1\n    \
    \    else\n            word_count[word] += 1\n    end\n    \n    word_count =\
    \ sort(word_count, by=x->length(x))\n    word_count = reverse(sort(word_count,\
    \ by=x->x[1]))\n    \n    word_count = reverse(sort(word_count, by=x->x[1])) \n\
    \    \n    return word_count[1]\nend\n</cell>\n<code language=julia-1.4>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ accepts a vector of strings and a vector of integers. Return the word with maximum\
    \ number of unique characters. If multiple strings have maximum number of unique\
    \ characters, return the one which comes first in lexicographical order.", " \
    \   unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_", " \
    \   unique_chars = Set{String}()\n    unique_chars.update(*words)\n    unique_chars.sort!()\n\
    \    \n    unique_chars.max() \nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ accepts a vector of strings and a vector of integers. \n    The vector contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.", "    unique_chars = Set{Char}(\"\
    \")\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[1]))\n    unique_chars = unique_chars.union(words.map(w => w[2]))\n   \
    \ unique_chars = unique_chars.union(words.map(w => w[3]))\n    unique_chars =\
    \ unique_chars.union(words.map(w => w[4]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[5]))\n    unique_chars = unique_chars.union(words.map(w => w[6]))\n   \
    \ unique_chars = unique_chars.union(words.map(w => w[7]))\n    unique_chars =\
    \ unique_chars.union(words.map(w => w[8]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[9]))\n    unique_chars = unique_chars.union(words.map(w => w[10]))\n  \
    \  unique_chars = unique_chars.union(words.map(w => w[11]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[12]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[13]))\n    unique_chars = unique_chars.union(words.map(w => w[14]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[15]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[16]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[17]))\n    unique_chars = unique_chars.union(words.map(w => w[18]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[19]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[20]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[21]))\n    unique_chars = unique_chars.union(words.map(w => w[22]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[23]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[24]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[25]))\n    unique_chars = unique_chars.union(words.map(w => w[26]))\n \
    \   unique_chars = unique_chars.union(words.map(w => w[27]))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w[28]))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w[29]))\n    unique_chars = unique_chars.union(words.map(w => w", "    unique_chars\
    \ = Set()\n    unique_chars_count = Dict()\n    for word in words \n        for\
    \ char in word\n            if char in unique_chars\n                unique_chars_count[char]\
    \ += 1\n            else\n                unique_chars.add(char)\n           \
    \     unique_chars_count[char] = 1\n    end\n    unique_chars_count = sort(unique_chars_count)\n\
    \    unique_chars_count = unique_chars_count[end]\n    return words[end]\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that accepts a vector of strings\
    \ and a vector of integers. \n    The vector contains different words. Return\
    \ the word with maximum number\n    of unique characters. If multiple strings\
    \ have maximum number of unique\n    characters, return the one which comes first\
    \ in lexicographical order.", "    unique_chars = Set{Char}(\"\")\n    unique_chars\
    \ = unique_chars.union(*words)\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(chars, words))\n    unique_chars = unique_chars.union(*map(chars,\
    \ words))\n    unique_chars = unique_chars.union(*map(chars, words))\n    unique_chars\
    \ = unique_chars.union(*map(char", "    \n    unique_chars = Set()\n    \n   \
    \ for word in words\n        for char in word\n            unique_chars.add(char)\n\
    \    end\n    \n    unique_chars = unique_chars.toSet()\n    \n    if length(unique_chars)\
    \ > length(words)\n        return words[end]\n    else\n        return find_max(unique_chars)\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a vector\
    \ of strings and a vector of integers. \n    The vector contains different words.\
    \ Return the word with maximum number\n    of unique characters. If multiple strings\
    \ have maximum number of unique\n    characters, return the one which comes first\
    \ in lexicographical order.", "    unique_chars = Set()\n    for word in words\n\
    \        unique_chars = unique_chars + Set(word)\n    end\n    unique_chars =\
    \ unique_chars - Set(\"a\")\n    unique_chars = unique_chars - Set(\"z\")\n  \
    \  unique_chars = unique_chars - Set(\"A\")\n    unique_chars = unique_chars -\
    \ Set(\"Z\")\n    unique_chars = unique_chars - Set(\"0\")\n    unique_chars =\
    \ unique_chars - Set(\"9\")\n    unique_chars = unique_chars - Set(\"_\")\n  \
    \  unique_chars = unique_chars - Set(\"$\")\n    unique_chars = unique_chars -\
    \ Set(\"%\")\n    unique_chars = unique_chars - Set(\"&\")\n    unique_chars =\
    \ unique_chars - Set(\"*\")\n    unique_chars = unique_chars - Set(\"(\")\n  \
    \  unique_chars = unique_chars - Set(\")\")\n    unique_chars = unique_chars -\
    \ Set(\"+\")\n    unique_chars = unique_chars - Set(\",\")\n    unique_chars =\
    \ unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\":\")\n  \
    \  unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars -\
    \ Set(\"/\")\n    unique_chars = unique_chars - Set(\"[\")\n    unique_chars =\
    \ unique_chars - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n  \
    \  unique_chars = unique_chars - Set(\"}\")\n    unique_chars = unique_chars -\
    \ Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n    unique_chars =\
    \ unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n  \
    \  unique_chars = unique_chars - Set(\"=\")\n    unique_chars = unique_chars -\
    \ Set(\"+\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars =\
    \ unique_chars - Set(\"$\")\n    unique_chars = unique_chars - Set(\"%\")\n  \
    \  unique_chars = unique_chars - Set(\"&\")\n    unique_chars = unique_chars -\
    \ Set(\"*\")\n    unique_chars = unique_chars - Set(\"(\")\n    unique_chars =\
    \ unique_chars - Set(\")\")\n    unique_chars = unique_chars - Set(\"+\")\n  \
    \  unique_chars = unique_chars - Set(\",\")\n    unique_chars = unique_chars -\
    \ Set(\".\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars =\
    \ unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\"/\")\n  \
    \  unique_chars = unique_chars - Set(\"[", "    unique_chars = Set{String}()\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words[1])\n\
    \    unique_chars = unique_chars.union(words[2])\n    unique_chars = unique_chars.union(words[3])\n\
    \    unique_chars = unique_chars.union(words[4])\n    unique_chars = unique_chars.union(words[5])\n\
    \    unique_chars = unique_chars.union(words[6])\n    unique_chars = unique_chars.union(words[7])\n\
    \    unique_chars = unique_chars.union(words[8])\n    unique_chars = unique_chars.union(words[9])\n\
    \    unique_chars = unique_chars.union(words[10])\n    unique_chars = unique_chars.union(words[11])\n\
    \    unique_chars = unique_chars.union(words[12])\n    unique_chars = unique_chars.union(words[13])\n\
    \    unique_chars = unique_chars.union(words[14])\n    unique_chars = unique_chars.union(words[15])\n\
    \    unique_chars = unique_chars.union(words[16])\n    unique_chars = unique_chars.union(words[17])\n\
    \    unique_chars = unique_chars.union(words[18])\n    unique_chars = unique_chars.union(words[19])\n\
    \    unique_chars = unique_chars.union(words[20])\n    unique_chars = unique_chars.union(words[21])\n\
    \    unique_chars = unique_chars.union(words[22])\n    unique_chars = unique_chars.union(words[23])\n\
    \    unique_chars = unique_chars.union(words[24])\n    unique_chars = unique_chars.union(words[25])\n\
    \    unique_chars = unique_chars.union(words[26])\n    unique_chars = unique_chars.union(words[27])\n\
    \    unique_chars = unique_chars.union(words[28])\n    unique_chars = unique_chars.union(words[29])\n\
    \    unique_chars = unique_chars.union(words[30])\n    unique_chars = unique_chars.union(words[31])\n\
    \    unique_chars = unique_chars.union(words[32])\n    unique_chars = unique_chars.union(words[33])\n\
    \    unique_chars = unique_chars.union(words[34])\n    unique_chars = unique_chars.union(words[35])\n\
    \    unique_chars = unique_chars.union(words[36])\n    unique_chars = unique_chars.union(words[37])\n\
    \    unique_chars = unique_chars.union(words[38])\n    unique_chars = unique_chars.union(word",
  "    \n    unique_chars = Set{Char}()\n    \n    for word in words\n        for\
    \ char in word\n            unique_chars.add(char)\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"a\")\n    \n    if length(unique_chars) == 0\n      \
    \  return words[1]\n    end\n    \n    unique_chars = unique_chars - Set(\"a\"\
    )\n    \n    if length(unique_chars) == 0\n        return words[2]\n    end\n\
    \    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[3]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[4]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[5]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[6]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[7]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[8]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[9]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[10]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[11]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[12]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[13]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[14]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[15]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[16]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n", "    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_", "    word_counts = Dict{String, Int}()\n    for\
    \ word in words\n        if !haskey(word_counts, word)\n            word_counts[word]\
    \ = 0\n        end\n        word_counts[word] += 1\n    end\n    \n    word_counts\
    \ = sort(word_counts, by=x->length(x))\n    \n    return word_counts[1][1]\nend\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that accepts a vector of strings\
    \ and returns a vector of strings. Each string in the returned vector should contain\
    \ the maximum number of unique characters. If the number of unique characters\
    \ is less than the length of the string, return an empty string.", "    word_counts\
    \ = Dict{String, Int}()\n    for word in words\n        word_counts[word] = get(word_counts,\
    \ word, 0) + 1\n    end\n    word_counts = Dict{String, Int}([(k, v) for (k, v)\
    \ in word_counts if v > 1])\n    word_counts = Dict{String, Int}([(k, v) for (k,\
    \ v) in word_counts if v == 1])\n    word_counts = Dict{String, Int}([(k, v) for\
    \ (k, v) in word_counts if v == word_counts[minimum_key(word_counts)]])\n    word_counts\
    \ = Dict{String, Int}([(k, v) for (k, v) in word_counts if v == word_counts[maximum_key(word_counts)]])\n\
    \    word_counts = Dict{String, Int}([(k, v) for (k, v) in word_counts if v ==\
    \ word_counts[minimum_key(word_counts)]])\n    word_counts = Dict{String, Int}([(k,\
    \ v) for (k, v) in word_counts if v == word_counts[maximum_key(word_counts)]])\n\
    \    word_counts = Dict{String, Int}([(k, v) for (k, v) in word_counts if v ==\
    \ word_counts[minimum_key(word_counts)]])\n    word_counts = Dict{String, Int}([(k,\
    \ v) for (k, v) in word_counts if v == word_counts[maximum_key(word_counts)]])\n\
    \    word_counts = Dict{String, Int}([(k, v) for (k, v) in word_counts if v ==\
    \ word_counts[minimum_key(word_counts)]])\n    word_counts = Dict{String, Int}([(k,\
    \ v) for (k, v) in word_counts if v == word_counts[maximum_key(word_counts)]])\n\
    \    word_counts = Dict{String, Int}([(k, v) for (k, v) in word_counts if v ==\
    \ word_counts[minimum_key(word_counts)]])\n    word_counts = Dict{String, Int}([(k,\
    \ v) for (k, v) in word_counts if v == word_counts[maximum_key(word_counts)]])\n\
    \    word_counts = Dict{String, Int}([(k, v) for (k, v) in word_counts if v ==\
    \ word_counts[minimum_key(word_counts)]])\n    word_counts = Dict{String, Int}([(k,\
    \ v) for (k, v) in word_counts if v == word_counts[maximum_key(word_counts)]])\n\
    \    word_counts = Dict{String, Int}([(k, v) for (k, v) in word_counts if v ==\
    \ word_counts[minimum_key(word_counts)]])\n    word_counts = Dict{String, Int}([(k,\
    \ v) for (k, v) in word_counts if ", "    \n    unique_chars = Set()\n    \n \
    \   for word in words\n        unique_chars = unique_chars + Set(word)\n    end\n\
    \    \n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars = unique_chars\
    \ - Set(\"b\")\n    unique_chars = unique_chars - Set(\"c\")\n    unique_chars\
    \ = unique_chars - Set(\"d\")\n    unique_chars = unique_chars - Set(\"e\")\n\
    \    unique_chars = unique_chars - Set(\"f\")\n    unique_chars = unique_chars\
    \ - Set(\"g\")\n    unique_chars = unique_chars - Set(\"h\")\n    unique_chars\
    \ = unique_chars - Set(\"i\")\n    unique_chars = unique_chars - Set(\"j\")\n\
    \    unique_chars = unique_chars - Set(\"k\")\n    unique_chars = unique_chars\
    \ - Set(\"l\")\n    unique_chars = unique_chars - Set(\"m\")\n    unique_chars\
    \ = unique_chars - Set(\"n\")\n    unique_chars = unique_chars - Set(\"o\")\n\
    \    unique_chars = unique_chars - Set(\"p\")\n    unique_chars = unique_chars\
    \ - Set(\"q\")\n    unique_chars = unique_chars - Set(\"r\")\n    unique_chars\
    \ = unique_chars - Set(\"s\")\n    unique_chars = unique_chars - Set(\"t\")\n\
    \    unique_chars = unique_chars - Set(\"u\")\n    unique_chars = unique_chars\
    \ - Set(\"v\")\n    unique_chars = unique_chars - Set(\"w\")\n    unique_chars\
    \ = unique_chars - Set(\"x\")\n    unique_chars = unique_chars - Set(\"y\")\n\
    \    unique_chars = unique_chars - Set(\"z\")\n    unique_chars = unique_chars\
    \ - Set(\"A\")\n    unique_chars = unique_chars - Set(\"B\")\n    unique_chars\
    \ = unique_chars - Set(\"C\")\n    unique_chars = unique_chars - Set(\"D\")\n\
    \    unique_chars = unique_chars - Set(\"E\")\n    unique_chars = unique_chars\
    \ - Set(\"F\")\n    unique_chars = unique_chars - Set(\"G\")\n    unique_chars\
    \ = unique_chars - Set(\"H\")\n    unique_chars = unique_chars - Set(\"I\")\n\
    \    unique_chars = unique_chars - Set(\"J\")\n    unique_chars = unique_chars\
    \ - Set(\"K\")\n    unique_chars = unique_chars - Set(\"L\")\n    unique_chars\
    \ = unique_chars - Set(\"M\")\n    unique_chars = unique_chars - Set(\"N\")\n\
    \    unique_chars = unique_chars - Set(\"", "    \n    unique_chars = Set{String}()\n\
    \    \n    for word in words\n        unique_chars = unique_chars ++ Set(word)\n\
    \    end\n    \n    unique_chars = unique_chars |> Set\n    \n    if length(unique_chars)\
    \ > length(words)\n        return words[end]\n    else\n        \n        unique_chars\
    \ = unique_chars |> Set\n        \n        unique_chars = unique_chars |> Set\n\
    \        \n        if length(unique_chars) > length(words)\n            return\
    \ words[end]\n        else\n            \n            unique_chars = unique_chars\
    \ |> Set\n            \n            unique_chars = unique_chars |> Set\n     \
    \       \n            if length(unique_chars) > length(words)\n              \
    \  return words[end]\n            else\n                \n                unique_chars\
    \ = unique_chars |> Set\n                \n                unique_chars = unique_chars\
    \ |> Set\n                \n                if length(unique_chars) > length(words)\n\
    \                    return words[end]\n                else\n               \
    \     \n                    unique_chars = unique_chars |> Set\n             \
    \       \n                    unique_chars = unique_chars |> Set\n           \
    \         \n                    if length(unique_chars) > length(words)\n    \
    \                    return words[end]\n                    else\n           \
    \             \n                        unique_chars = unique_chars |> Set\n \
    \                       \n                        unique_chars = unique_chars\
    \ |> Set\n                        \n                        if length(unique_chars)\
    \ > length(words)\n                            return words[end]\n           \
    \             else\n                            \n                           \
    \ unique_chars = unique_chars |> Set\n                            \n         \
    \                   unique_chars = unique_chars |> Set\n                     \
    \       \n                            if length(unique_chars) > length(words)\n\
    \                                return words[end]\n                         \
    \   else\n                                \n                                unique_chars\
    \ = unique_chars |> Set\n                                \n                  \
    \              unique_chars = unique_chars |> Set\n                          \
    \      \n                                if length(unique_chars) > length(words)\n\
    \                                    return words[end]\n                     \
    \           else\n                                    \n                     \
    \               unique_chars = unique_chars |> Set\n                         \
    \           \n                                    unique_chars = unique_chars\
    \ |> Set\n                                    \n                             \
    \       if length(unique_chars) > length(words)\n                            \
    \            return words[end]\n                                    else\n   \
    \                                     \n                                     \
    \   unique_chars = unique_chars |> Set\n                                     \
    \   \n                                        unique_chars = unique_chars |> Set\n\
    \                                        \n                                  \
    \      if length(unique_chars) > length(words)\n                             \
    \               return words[end]\n                                        else\n\
    \                                            \n                              \
    \              unique_chars = unique_chars |> Set\n                          \
    \                  \n                                            unique_chars\
    \ = unique_chars |> Set\n                                            \n      \
    \                                      if length(unique_chars) > length(words)\n\
    \                                                return words[end]\n         \
    \                                   else\n                                   \
    \             \n                                                unique_", "  \
    \  \n    unique_chars = Set{String}()\n    \n    for word in words\n        for\
    \ char in word\n            unique_chars.add(char)\n    end\n    \n    unique_chars\
    \ = unique_chars - Set(\"a\")\n    \n    if length(unique_chars) == 0\n      \
    \  return words[1]\n    end\n    \n    unique_chars = unique_chars - Set(\"z\"\
    )\n    \n    if length(unique_chars) == 0\n        return words[2]\n    end\n\
    \    \n    unique_chars = unique_chars - Set(\"z\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[3]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"z\")\n    \n    if length(unique_chars) == 0\n        return words[4]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"z\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[5]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"z\")\n    \n    if length(unique_chars) == 0\n        return words[6]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"z\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[7]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"z\")\n    \n    if length(unique_chars) == 0\n        return words[8]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"z\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[9]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"z\")\n    \n    if length(unique_chars) == 0\n        return words[10]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"z\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[11]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"z\")\n    \n    if length(unique_chars) == 0\n        return words[12]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"z\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[13]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"z\")\n    \n    if length(unique_chars) == 0\n        return words[14]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"z\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[15]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"z\")\n    \n    if length(unique_chars) == 0\n        return words[16]\n\
    \    end\n", "    unique_chars = Set{Char}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.keys() \n    unique_chars = unique_chars.sort\n\
    \    unique_chars = unique_chars[1]\n    return unique_chars\nend", "    unique_chars\
    \ = Set{String}()\n    for word in words \n        for char in word\n        \
    \    unique_chars.add(char)\n    end\n    unique_chars = unique_chars - Set{String}()\n\
    \    if length(unique_chars) == 0\n        return words[1]\n    else\n       \
    \ unique_chars = unique_chars - Set{String}()\n        unique_chars = unique_chars\
    \ - Set{String}()\n        unique_chars = unique_chars - Set{String}()\n     \
    \   unique_chars = unique_chars - Set{String}()\n        unique_chars = unique_chars\
    \ - Set{String}()\n        unique_chars = unique_chars - Set{String}()\n     \
    \   unique_chars = unique_chars - Set{String}()\n        unique_chars = unique_chars\
    \ - Set{String}()\n        unique_chars = unique_chars - Set{String}()\n     \
    \   unique_chars = unique_chars - Set{String}()\n        unique_chars = unique_chars\
    \ - Set{String}()\n        unique_chars = unique_chars - Set{String}()\n     \
    \   unique_chars = unique_chars - Set{String}()\n        unique_chars = unique_chars\
    \ - Set{String}()\n        unique_chars = unique_chars - Set{String}()\n     \
    \   unique_chars = unique_chars - Set{String}()\n        unique_chars = unique_chars\
    \ - Set{String}()\n        unique_chars = unique_chars - Set{String}()\n     \
    \   unique_chars = unique_chars - Set{String}()\n        unique_chars = unique_chars\
    \ - Set{String}()\n        unique_chars = unique_chars - Set{String}()\n     \
    \   unique_chars = unique_chars - Set{String}()\n        unique_chars = unique_chars\
    \ - Set{String}()\n        unique_chars = unique_chars - Set{String}()\n     \
    \   unique_chars = unique_chars - Set{String}()\n        unique_chars = unique_chars\
    \ - Set{String}()\n        unique_chars = unique_chars - Set{String}()\n     \
    \   unique_chars = unique_chars - Set{String}()\n        unique_chars = unique_chars\
    \ - Set{String}()\n        unique_chars = unique_chars - Set{String}()\n     \
    \   unique_chars = unique_chars - Set{String}()\n        unique_chars = unique_chars\
    \ - Set{String}()\n        unique_chars = unique_chars - Set{String}()\n     \
    \   unique_chars = unique_chars - Set{String}()\n        unique_chars = unique_chars\
    \ - Set{String}()\n        unique_chars = unique_", "    unique_chars = Set()\n\
    \    unique_chars_count = Set()\n    for word in words\n        unique_chars =\
    \ unique_chars | Set(word)\n        unique_chars_count = unique_chars_count |\
    \ Set(length(unique_chars))\n    end\n    \n    if length(unique_chars) == length(unique_chars_count)\n\
    \        return words[argmax(words)]\n    else\n        unique_chars_count = sort(unique_chars_count)\n\
    \        unique_chars = sort(unique_chars)\n        \n        unique_chars_count\
    \ = unique_chars_count[end]\n        unique_chars = unique_chars[end]\n      \
    \  \n        if unique_chars_count > length(unique_chars)\n            return\
    \ words[argmax(words)]\n        else\n            return unique_chars\n      \
    \  end\n    end\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\",\
    \ \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\"\
    , \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts\
    \ a vector of strings and a vector of integers. Return the string that has the\
    \ maximum number of occurrences of the integers in the vector. For example, if\
    \ the vector is [\"a\", \"b\", \"c\", \"a\", \"b\", \"c\", \"d\"] and the integer\
    \ vector is [1, 1, 2], the function should return \"c\".", "    word_counts =\
    \ Dict{String, Int}()\n    for word in words\n        if !haskey(word_counts,\
    \ word)\n            word_counts[word] = 1\n        else\n            word_counts[word]\
    \ += 1\n    end\n    \n    sorted_word_counts = sort(collect(values(word_counts)),\
    \ by=length, reverse=true)\n    \n    if length(sorted_word_counts) == 1\n   \
    \     return sorted_word_counts[1]\n    else\n        return sorted_word_counts[1][1]\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a vector\
    \ of strings and a vector of integers. Return the string that comes first in lexicographical\
    \ order of the vector of strings and a vector of the integers that correspond\
    \ to the positions of the strings in the original vector.", "    unique_chars\
    \ = Set{String}()\n    for word in words\n        for char in word\n         \
    \   unique_chars[char] <- unique_chars[char] + 1\n    end\n    \n    unique_chars\
    \ = unique_chars.keys\n    unique_chars = sort(unique_chars)\n    \n    unique_chars[end]\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    ])\n</cell>\n<text>\nExercise: Write a function that accepts a vector of strings\
    \ and returns the word with maximum number of unique characters. If the word has\
    \ maximum number of unique characters, return the first word in the lexicographical\
    \ order.", "    unique_chars = Set{String}()\n    for word in words \n       \
    \ for char in word\n            unique_chars.add(char)\n    end\n    unique_chars\
    \ = unique_chars - Set(\"a\")\n    unique_chars = unique_chars - Set(\"A\")\n\
    \    unique_chars = unique_chars - Set(\"0\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"$\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"$\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"$\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"$\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"$\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"$\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"$\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"$\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"$\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"$\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"$\")\n    ", "    unique_chars = Set{String}()\n    for word in words\n\
    \        for char in word\n            unique_chars.add(char)\n    end\n    unique_chars\
    \ = unique_chars - Set(\"a\")\n    unique_chars = unique_chars - Set(\"A\")\n\
    \    unique_chars = unique_chars - Set(\"0\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    ", "    unique_chars = Set()\n    for word in words\n    \
    \    unique_chars = unique_chars | Set(word)\n    end\n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    unique_chars = unique_chars - Set(\"z\")\n    unique_chars\
    \ = unique_chars - Set(\"A\")\n    unique_chars = unique_chars - Set(\"Z\")\n\
    \    unique_chars = unique_chars - Set(\"0\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\",\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n    unique_chars\
    \ = unique_chars - Set(\"[\")\n    unique_chars = unique_chars - Set(\"]\")\n\
    \    unique_chars = unique_chars - Set(\"{\")\n    unique_chars = unique_chars\
    \ - Set(\"}\")\n    unique_chars = unique_chars - Set(\"'\")\n    unique_chars\
    \ = unique_chars - Set(\"\\\"\")\n    unique_chars = unique_chars - Set(\";\"\
    )\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars = unique_chars\
    \ - Set(\",\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"'\")\n\
    \    unique_chars = unique_chars - Set(\"\\\"\")\n    unique_chars = unique_chars\
    \ - Set(\";\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\"[\")\n    unique_chars = unique_chars - Set(\"]\")\n\
    \    unique_chars = unique_chars - Set(\"{\")\n    unique_chars = unique_chars\
    \ - Set(\"}\")\n    unique_chars = unique_chars - Set(\"'\")\n    unique_chars\
    \ = unique_chars - Set(\"\\\"\")\n    unique_chars = unique_chars - Set(\";\"\
    )\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars = unique_chars\
    \ - Set(\",\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"'\")\n\
    \    unique_chars = unique_chars - Set(\"\\\"\")\n    unique_chars = unique_chars\
    \ - Set(\";\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\"[\")", "    \n    unique_chars = Set()\n    \n    for\
    \ word in words\n        unique_chars = unique_chars | Set(word)\n    end\n  \
    \  \n    if length(unique_chars) > length(words)\n        return words[end]\n\
    \    else\n        return find_max(unique_chars)\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that accepts a vector of strings and a vector of\
    \ integers. \n    The vector contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.", "    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_", "    unique_chars\
    \ = Set{Char}(\"\")\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_", "    unique_chars\
    \ = Set()\n    for word in words \n        unique_chars = unique_chars | Set(word)\n\
    \    end\n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars = unique_chars\
    \ - Set(\"z\")\n    unique_chars = unique_chars - Set(\"A\")\n    unique_chars\
    \ = unique_chars - Set(\"Z\")\n    unique_chars = unique_chars - Set(\"0\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\",\")\n    unique_chars\
    \ = unique_chars - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n\
    \    unique_chars = unique_chars - Set(\":\")\n    unique_chars = unique_chars\
    \ - Set(\";\")\n    unique_chars = unique_chars - Set(\"(\")\n    unique_chars\
    \ = unique_chars - Set(\")\")\n    unique_chars = unique_chars - Set(\"[\")\n\
    \    unique_chars = unique_chars - Set(\"]\")\n    unique_chars = unique_chars\
    \ - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n    unique_chars\
    \ = unique_chars - Set(\"'\")\n    unique_chars = unique_chars - Set(\"\\\"\"\
    )\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\",\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\"!\")\n\
    \    unique_chars = unique_chars - Set(\"?\")\n    unique_chars = unique_chars\
    \ - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n    unique_chars\
    \ = unique_chars - Set(\"[\")\n    unique_chars = unique_chars - Set(\"]\")\n\
    \    unique_chars = unique_chars - Set(\"{\")\n    unique_chars = unique_chars\
    \ - Set(\"}\")\n    unique_chars = unique_chars - Set(\"'\")\n    unique_chars\
    \ = unique_chars - Set(\"\\\"\")\n    unique_chars = unique_chars - Set(\";\"\
    )\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars = unique_chars\
    \ - Set(\",\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n\
    \    unique_chars = unique_chars - Set(\"(\")\n    unique_chars = unique_chars\
    \ - Set(\")\")\n    unique_chars = unique_chars - Set(\"[\")", "    unique_chars\
    \ = Set{Char}(\"\")\n    for w in words\n        unique_chars = unique_chars |\
    \ Set(w)\n    end\n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars\
    \ = unique_chars - Set(\"z\")\n    unique_chars = unique_chars - Set(\"A\")\n\
    \    unique_chars = unique_chars - Set(\"Z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")", "    \n    unique_chars = Set{String}()\n\
    \    \n    for word in words \n        for char in word\n            unique_chars.add(char)\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"a\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"z\")\n    \n    if length(unique_chars) == 0\n        return \"z\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"0\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"0\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"9\")\n    \n    if length(unique_chars) == 0\n        return \"9\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\".\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \".\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"_\")\n    \n    if length(unique_chars) == 0\n        return \"_\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"$\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"$\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"%\")\n    \n    if length(unique_chars) == 0\n        return \"%\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"&\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"&\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"(\")\n    \n    if length(unique_chars) == 0\n        return \"(\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\")\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \")\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"+\")\n    \n    if length(unique_chars) == 0\n        return \"+\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\"=\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \"=\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\";\")\n    \n    if length(unique_chars) == 0\n        return \";\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\":\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \":\"\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\",\")\n    \n    if length(unique_chars) == 0\n        return \",\"\n \
    \   end\n    \n    unique_chars = unique_chars - Set(\".\")\n    \n    if length(unique_chars)\
    \ == 0\n        return \".\"\n    end\n    \n    unique_chars = unique_", "  \
    \  word_counts = Dict{String, Int}()\n    for word in words \n        word_counts[word]\
    \ = get(word_counts, word, 0) + 1\n    end\n    \n    sorted_word_counts = sort(collect(word_counts))\n\
    \    \n    word_with_max_count = sorted_word_counts[end]\n    \n    if length(sorted_word_counts)\
    \ > 1\n        word_with_max_count = sorted_word_counts[1]\n    end\n    \n  \
    \  return word_with_max_count\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ accepts a vector of strings and returns a vector of booleans indicating whether\
    \ each string contains at least one of the words in the input vector.", "    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[2])\n\
    \    unique_chars = unique_chars.union(words[3])\n    unique_chars = unique_chars.union(words[4])\n\
    \    unique_chars = unique_chars.union(words[5])\n    unique_chars = unique_chars.union(words[6])\n\
    \    unique_chars = unique_chars.union(words[7])\n    unique_chars = unique_chars.union(words[8])\n\
    \    unique_chars = unique_chars.union(words[9])\n    unique_chars = unique_chars.union(words[10])\n\
    \    unique_chars = unique_chars.union(words[11])\n    unique_chars = unique_chars.union(words[12])\n\
    \    unique_chars = unique_chars.union(words[13])\n    unique_chars = unique_chars.union(words[14])\n\
    \    unique_chars = unique_chars.union(words[15])\n    unique_chars = unique_chars.union(words[16])\n\
    \    unique_chars = unique_chars.union(words[17])\n    unique_chars = unique_chars.union(words[18])\n\
    \    unique_chars = unique_chars.union(words[19])\n    unique_chars = unique_chars.union(words[20])\n\
    \    unique_chars = unique_chars.union(words[21])\n    unique_chars = unique_chars.union(words[22])\n\
    \    unique_chars = unique_chars.union(words[23])\n    unique_chars = unique_chars.union(words[24])\n\
    \    unique_chars = unique_chars.union(words[25])\n    unique_chars = unique_chars.union(words[26])\n\
    \    unique_chars = unique_chars.union(words[27])\n    unique_chars = unique_chars.union(words[28])\n\
    \    unique_chars = unique_chars.union(words[29])\n    unique_chars = unique_chars.union(words[30])\n\
    \    unique_chars = unique_chars.union(words[31])\n    unique_chars = unique_chars.union(words[32])\n\
    \    unique_chars = unique_chars.union(words[33])\n    unique_chars = unique_chars.union(words[34])\n\
    \    unique_chars = unique_chars.union(words[35])\n    unique_chars = unique_chars.union(words[36])\n\
    \    unique_chars = unique_chars.union(words[37])\n    unique_chars = unique_chars.union(words[38])\n\
    \    unique_chars = unique_chars.union(word", "    \n    unique_chars = Set{String}()\n\
    \    \n    for word in words\n        for char in word\n            unique_chars.add(char)\n\
    \        end\n    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n  \
    \  \n    if length(unique_chars) == 0\n        return words[1]\n    end\n    \n\
    \    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[2]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[3]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[4]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[5]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[6]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[7]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[8]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[9]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[10]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[11]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[12]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[13]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[14]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[15]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[16]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n", "    unique_chars = Set{String}()\n    for w in words\n   \
    \     for c in w\n            unique_chars.add(c)\n    end\n    unique_chars =\
    \ unique_chars - Set(\"a\")\n    unique_chars = unique_chars - Set(\"z\")\n  \
    \  unique_chars = unique_chars - Set(\"A\")\n    unique_chars = unique_chars -\
    \ Set(\"Z\")\n    unique_chars = unique_chars - Set(\"0\")\n    unique_chars =\
    \ unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"$\")\n  \
    \  unique_chars = unique_chars - Set(\"%\")\n    unique_chars = unique_chars -\
    \ Set(\"&\")\n    unique_chars = unique_chars - Set(\"*\")\n    unique_chars =\
    \ unique_chars - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n  \
    \  unique_chars = unique_chars - Set(\"+\")\n    unique_chars = unique_chars -\
    \ Set(\",\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars =\
    \ unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n  \
    \  unique_chars = unique_chars - Set(\"/\")\n    unique_chars = unique_chars -\
    \ Set(\"[\")\n    unique_chars = unique_chars - Set(\"]\")\n    unique_chars =\
    \ unique_chars - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n  \
    \  unique_chars = unique_chars - Set(\"^\")\n    unique_chars = unique_chars -\
    \ Set(\"~\")\n    unique_chars = unique_chars - Set(\"?\")\n    unique_chars =\
    \ unique_chars - Set(\"!\")\n    unique_chars = unique_chars - Set(\"|\")\n  \
    \  unique_chars = unique_chars - Set(\"~\")\n    unique_chars = unique_chars -\
    \ Set(\"*\")\n    unique_chars = unique_chars - Set(\"+\")\n    unique_chars =\
    \ unique_chars - Set(\"?\")\n    unique_chars = unique_chars - Set(\"!\")\n  \
    \  unique_chars = unique_chars - Set(\"(\")\n    unique_chars = unique_chars -\
    \ Set(\")\")\n    unique_chars = unique_chars - Set(\"{\")\n    unique_chars =\
    \ unique_chars - Set(\"}\")\n    unique_chars = unique_chars - Set(\"[\")\n  \
    \  unique_chars = unique_chars - Set(\"]\")\n    unique_chars = unique_chars -\
    \ Set(\"/\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars =\
    \ unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\".\")\n  \
    \  unique_chars = unique_char", "    unique_chars = Set()\n    unique_chars =\
    \ unique_chars.union(words)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_char", "    unique_chars = Set()\n    for word in words\n        for\
    \ char in word\n            unique_chars = unique_chars + char\n    end\n    unique_chars\
    \ = unique_chars - Set(\"a\")\n    unique_chars = unique_chars - Set(\"z\")\n\
    \    unique_chars = unique_chars - Set(\"A\")\n    unique_chars = unique_chars\
    \ - Set(\"Z\")\n    unique_chars = unique_chars - Set(\"0\")\n    unique_chars\
    \ = unique_chars - Set(\"9\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"$\")\n    unique_chars = unique_chars\
    \ - Set(\"%\")\n    unique_chars = unique_chars - Set(\"&\")\n    unique_chars\
    \ = unique_chars - Set(\"*\")\n    unique_chars = unique_chars - Set(\"(\")\n\
    \    unique_chars = unique_chars - Set(\")\")\n    unique_chars = unique_chars\
    \ - Set(\"+\")\n    unique_chars = unique_chars - Set(\",\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\"<\")\n    unique_chars = unique_chars - Set(\"<\")\n    unique_chars\
    \ = unique_chars - Set(\">\")\n    unique_chars = unique_chars - Set(\"?\")\n\
    \    unique_chars = unique_chars - Set(\"!\")\n    unique_chars = unique_chars\
    \ - Set(\"@\")\n    unique_chars = unique_chars - Set(\"$\")\n    unique_chars\
    \ = unique_chars - Set(\"%\")\n    unique_chars = unique_chars - Set(\"^\")\n\
    \    unique_chars = unique_chars - Set(\"~\")\n    unique_chars = unique_chars\
    \ - Set(\"*\")\n    unique_chars = unique_chars - Set(\"+\")\n    unique_chars\
    \ = unique_chars - Set(\"?\")\n    unique_chars = unique_chars - Set(\"{\")\n\
    \    unique_chars = unique_chars - Set(\"}\")\n    unique_chars = unique_chars\
    \ - Set(\"|\")\n    unique_chars = unique_chars - Set(\"}\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n\
    \    unique_chars = unique_chars - Set(\"'\")\n    unique_chars = unique_chars\
    \ - Set(\"\\\"\")\n    unique_chars = unique_chars - Set(\"[\")\n    unique_chars\
    \ = unique_chars - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n\
    \    unique_chars = unique_char", "    unique_chars = Set{String}()\n    unique_chars.update(*words)\n\
    \    unique_chars.sort!()\n    return unique_chars.max() \nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that accepts a vector of strings and a vector of\
    \ integers. \n    The vector contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.", "    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[2])\n\
    \    unique_chars = unique_chars.union(words[3])\n    unique_chars = unique_chars.union(words[4])\n\
    \    unique_chars = unique_chars.union(words[5])\n    unique_chars = unique_chars.union(words[6])\n\
    \    unique_chars = unique_chars.union(words[7])\n    unique_chars = unique_chars.union(words[8])\n\
    \    unique_chars = unique_chars.union(words[9])\n    unique_chars = unique_chars.union(words[10])\n\
    \    unique_chars = unique_chars.union(words[11])\n    unique_chars = unique_chars.union(words[12])\n\
    \    unique_chars = unique_chars.union(words[13])\n    unique_chars = unique_chars.union(words[14])\n\
    \    unique_chars = unique_chars.union(words[15])\n    unique_chars = unique_chars.union(words[16])\n\
    \    unique_chars = unique_chars.union(words[17])\n    unique_chars = unique_chars.union(words[18])\n\
    \    unique_chars = unique_chars.union(words[19])\n    unique_chars = unique_chars.union(words[20])\n\
    \    unique_chars = unique_chars.union(words[21])\n    unique_chars = unique_chars.union(words[22])\n\
    \    unique_chars = unique_chars.union(words[23])\n    unique_chars = unique_chars.union(words[24])\n\
    \    unique_chars = unique_chars.union(words[25])\n    unique_chars = unique_chars.union(words[26])\n\
    \    unique_chars = unique_chars.union(words[27])\n    unique_chars = unique_chars.union(words[28])\n\
    \    unique_chars = unique_chars.union(words[29])\n    unique_chars = unique_chars.union(words[30])\n\
    \    unique_chars = unique_chars.union(words[31])\n    unique_chars = unique_chars.union(words[32])\n\
    \    unique_chars = unique_chars.union(words[33])\n    unique_chars = unique_chars.union(words[34])\n\
    \    unique_chars = unique_chars.union(words[35])\n    unique_chars = unique_chars.union(words[36])\n\
    \    unique_chars = unique_chars.union(words[37])\n    unique_chars = unique_chars.union(words[38])\n\
    \    unique_chars = unique_chars.union(word", "    word_counts = Dict{String,\
    \ Int}()\n    for word in words \n        word_counts[word] = get(word_counts,\
    \ word, 0) + 1\n    end\n    word_counts = sort!(word_counts, by=x->-get(x, \"\
    count\"))\n    word_counts[end][1]\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that accepts a vector of strings and a vector of integers. \n    The\
    \ vector contains different words. Return the word with maximum number\n    of\
    \ unique characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.", "    unique_chars\
    \ = Set()\n    for word in words\n        for char in word\n            unique_chars\
    \ = unique_chars + char\n    end\n    unique_chars = unique_chars - Set(\"a\"\
    )\n    unique_chars = unique_chars - Set(\"A\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"1\")\n    unique_chars\
    \ = unique_chars - Set(\"2\")\n    unique_chars = unique_chars - Set(\"3\")\n\
    \    unique_chars = unique_chars - Set(\"4\")\n    unique_chars = unique_chars\
    \ - Set(\"5\")\n    unique_chars = unique_chars - Set(\"6\")\n    unique_chars\
    \ = unique_chars - Set(\"7\")\n    unique_chars = unique_chars - Set(\"8\")\n\
    \    unique_chars = unique_chars - Set(\"9\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"$\")\n    unique_chars\
    \ = unique_chars - Set(\"%\")\n    unique_chars = unique_chars - Set(\"&\")\n\
    \    unique_chars = unique_chars - Set(\"*\")\n    unique_chars = unique_chars\
    \ - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n    unique_chars\
    \ = unique_chars - Set(\"+\")\n    unique_chars = unique_chars - Set(\",\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\"/\")\n    unique_chars = unique_chars - Set(\"[\")\n\
    \    unique_chars = unique_chars - Set(\"]\")\n    unique_chars = unique_chars\
    \ - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n    unique_chars\
    \ = unique_chars - Set(\"|\")\n    unique_chars = unique_chars - Set(\"~\")\n\
    \    unique_chars = unique_chars - Set(\"^\")\n    unique_chars = unique_chars\
    \ - Set(\"~\")\n    unique_chars = unique_chars - Set(\"~\")\n    unique_chars\
    \ = unique_chars - Set(\"~\")\n    unique_chars = unique_chars - Set(\"~\")\n\
    \    unique_chars = unique_chars - Set(\"~\")\n    unique_chars = unique_chars\
    \ - Set(\"~\")\n    unique_chars = unique_chars - Set(\"~\")\n    unique_chars\
    \ = unique_chars - Set(\"~\")\n    unique_chars = unique_chars - Set(\"~\")\n\
    \    unique_chars = unique_chars - Set(\"~\")", "    \n    unique_chars = Set{String}()\n\
    \    \n    for word in words \n        for char in word\n            unique_chars.add(char)\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[1]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[2]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[3]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[4]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[5]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[6]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[7]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[8]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[9]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[10]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[11]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[12]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[13]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[14]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[15]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[16]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n", "    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n    unique_chars = unique_chars.union(Set(words))\n\
    \    unique_chars = unique_chars.union(Set(words))\n", "    \n    unique_chars\
    \ = Set{String}()\n    \n    for word in words\n        for char in word\n   \
    \         unique_chars.add(char)\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[1]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[2]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[3]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[4]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[5]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[6]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[7]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[8]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[9]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[10]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[11]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[12]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[13]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[14]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n    if length(unique_chars) == 0\n        return words[15]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[16]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"a\")\n    \n", "    \n    unique_chars = Set{String}()\n    \n    for\
    \ word in words \n        for char in word\n            if !contains(unique_chars,\
    \ char)\n                unique_chars.add(char)\n            else\n          \
    \      break\n        end\n    end\n    \n    if length(unique_chars) > length(words)\n\
    \        return words[findfirst(unique_chars)]\n    else\n        return words[findfirst(unique_chars)+1]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\", \"dddd\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\", \"dddd\", \"eeee\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeee\", \"ffff\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    , \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\",\
    \ \"jjjj\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"\
    , \"kkkk\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"\
    , \"kkkk\", \"llll\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\",\
    \ \"jjjj\", \"kkkk\", \"llll\", \"mmmm\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n\
    <code language=julia-1.5>\n", "    unique_chars = Set{String}()\n    word_with_max_unique_chars\
    \ = \"\"\n    for word in words\n        for char in word\n            if !contains(unique_chars,\
    \ char)\n                unique_chars.add(char)\n                if length(unique_chars)\
    \ > length(word_with_max_unique_chars)\n                    word_with_max_unique_chars\
    \ = word\n            end\n        end\n    end\n    return word_with_max_unique_chars\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    ])\n</cell>\n<text>\nExercise 3\nWrite a function that accepts a vector of strings\
    \ and a vector of integers. Return an array of integers containing the number\
    \ of unique characters in each string in the vector. \nThe function should return\
    \ an array of integers containing the number of unique characters in each string\
    \ in the vector.", "    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_", "    unique_chars\
    \ = Set{String}()\n    for word in words\n        unique_chars = unique_chars\
    \ | Set(word)\n    end\n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars\
    \ = unique_chars - Set(\"z\")\n    unique_chars = unique_chars - Set(\"A\")\n\
    \    unique_chars = unique_chars - Set(\"Z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\",\")\n\
    \    unique_chars = unique_chars - Set(\":\")\n    unique_chars = unique_chars\
    \ - Set(\";\")\n    unique_chars = unique_chars - Set(\"?\")\n    unique_chars\
    \ = unique_chars - Set(\"!\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\"!\")\n    unique_chars = unique_chars\
    \ - Set(\"?\")\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\",\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"0\")\n    unique_chars\
    \ = unique_chars - Set(\"A\")\n    unique_chars = unique_chars - Set(\"Z\")\n\
    \    unique_chars = unique_chars - Set(\"a\")\n    unique_chars = unique_chars\
    \ - Set(\"z\")\n    unique_chars = unique_chars - Set(\"0\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\",\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\"?\")\n    unique_chars = unique_chars - Set(\"!\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\",\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"0\")\n    unique_chars = unique_chars - Set(\"A", " \
    \   unique_chars = Set{String}()\n    unique_chars.update(*words)\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!()\n    unique_chars.reverse!()\n    unique_chars.reverse!()\n\
    \    unique_chars.reverse!", "    \n    unique_chars = Set()\n    \n    for word\
    \ in words \n        unique_chars = unique_chars | Set(word)\n    end\n    \n\
    \    unique_chars = unique_chars - Set(\"a\")\n    unique_chars = unique_chars\
    \ - Set(\"A\")\n    \n    unique_chars = unique_chars - Set(\"0\")\n    unique_chars\
    \ = unique_chars - Set(\"1\")\n    \n    unique_chars = unique_chars - Set(\"\
    2\")\n    unique_chars = unique_chars - Set(\"3\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"4\")\n    unique_chars = unique_chars - Set(\"5\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"6\")\n    unique_chars = unique_chars - Set(\"7\")\n\
    \    \n    unique_chars = unique_chars - Set(\"8\")\n    unique_chars = unique_chars\
    \ - Set(\"9\")\n    \n    unique_chars = unique_chars - Set(\"+\")\n    unique_chars\
    \ = unique_chars - Set(\"-\")\n    \n    unique_chars = unique_chars - Set(\"\
    .\")\n    unique_chars = unique_chars - Set(\",\")\n    \n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n\
    \    \n    unique_chars = unique_chars - Set(\"[\")\n    unique_chars = unique_chars\
    \ - Set(\"]\")\n    \n    unique_chars = unique_chars - Set(\"{\")\n    unique_chars\
    \ = unique_chars - Set(\"}\")\n    \n    unique_chars = unique_chars - Set(\"\
    '\")\n    unique_chars = unique_chars - Set('\"')\n    \n    unique_chars = unique_chars\
    \ - Set(\";\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\",\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\"+\")\n    unique_chars = unique_chars\
    \ - Set(\"-\")\n    unique_chars = unique_chars - Set(\"(\")\n    unique_chars\
    \ = unique_chars - Set(\")\")\n    unique_chars = unique_chars - Set(\"[\")\n\
    \    unique_chars = unique_chars - Set(\"]\")\n    unique_chars = unique_chars\
    \ - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n    unique_chars\
    \ = unique_chars - Set(\"'\")\n    unique_chars = unique_chars - Set('\"')\n \
    \   \n", "    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n", "    unique_chars = Set()\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_char", "    unique_chars = Set{Char}()\n    word_with_max_unique_chars\
    \ = \"\"\n    for word in words\n        for char in word\n            if !contains(unique_chars,\
    \ char)\n                unique_chars.add(char)\n                if length(unique_chars)\
    \ > length(word_with_max_unique_chars)\n                    word_with_max_unique_chars\
    \ = word\n            end\n        end\n    end\n    return word_with_max_unique_chars\n\
    end", "    unique_chars = Set{String}()\n    word_with_max_unique_chars = \"\"\
    \n    for word in words\n        for char in word\n            unique_chars[char]\
    \ = unique_chars[char] + 1\n            if unique_chars[char] > word_with_max_unique_chars\n\
    \                word_with_max_unique_chars = char\n            end\n        end\n\
    \    end\n    return word_with_max_unique_chars\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that accepts a vector of strings and returns a vector of strings. \n\
    The vector contains different words. \nThe function should return the same vector\
    \ with each element replaced with its lexicographical order.", "    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_", "    unique_chars\
    \ = Set{String}()\n    for word in words\n        unique_chars = unique_chars\
    \ + Set(word)\n    end\n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars\
    \ = unique_chars - Set(\"z\")\n    unique_chars = unique_chars - Set(\"A\")\n\
    \    unique_chars = unique_chars - Set(\"Z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"9\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\",\")\n    unique_chars = unique_chars\
    \ - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\"(\")\n    unique_chars = unique_chars\
    \ - Set(\")\")\n    unique_chars = unique_chars - Set(\"[\")\n    unique_chars\
    \ = unique_chars - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n\
    \    unique_chars = unique_chars - Set(\"}\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\",\")\n\
    \    unique_chars = unique_chars - Set(\"!\")\n    unique_chars = unique_chars\
    \ - Set(\"?\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n\
    \    unique_chars = unique_chars - Set(\"[\")\n    unique_chars = unique_chars\
    \ - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n    unique_chars\
    \ = unique_chars - Set(\"}\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\",\")\n    unique_chars\
    \ = unique_chars - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n\
    \    unique_chars = unique_chars - Set(\":\")\n    unique_chars = unique_chars\
    \ - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n    unique_chars\
    \ = unique_chars - Set(\"[\")\n    unique_chars = unique_char", "    unique_chars\
    \ = Set{String}()\n    for w in words\n        for c in w\n            if !contains(unique_chars,\
    \ c)\n                unique_chars.add(c)\n            else\n                break\n\
    \        end\n    end\n    \n    if length(unique_chars) > length(words)\n   \
    \     return words[findfirst(unique_chars)] \n    else\n        return words[findfirst(unique_chars,\
    \ 1)]\n    end\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts\
    \ a vector of strings and a vector of integers. \n    The vector contains different\
    \ words. Return the word with maximum number\n    of unique characters. If multiple\
    \ strings have maximum number of unique\n    characters, return the one which\
    \ comes first in lexicographical order.", "    unique_chars = Set{String}()\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.keys()\
    \ \n    unique_chars = unique_chars.sort\n    unique_chars = unique_chars[1]\n\
    \    return unique_chars\nend\n</cell>\n<code language=julia-1.0>\nfind_max([\"\
    name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.0>\nfind_max([\"\
    name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.0>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ accepts a vector of strings and a vector of integers. \n    The vector contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.", "    \n    unique_chars =\
    \ Set()\n    \n    for word in words\n        for char in word\n            unique_chars.add(char)\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[1]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"z\")\n    \n    if length(unique_chars) == 0\n        return words[2]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"0\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[3]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"9\")\n    \n    if length(unique_chars) == 0\n        return words[4]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\".\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[5]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    \n    if length(unique_chars) == 0\n        return words[6]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"$\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[7]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"%\")\n    \n    if length(unique_chars) == 0\n        return words[8]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"&\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[9]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"(\")\n    \n    if length(unique_chars) == 0\n        return words[10]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\")\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[11]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"+\")\n    \n    if length(unique_chars) == 0\n        return words[12]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\",\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[13]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\":\")\n    \n    if length(unique_chars) == 0\n        return words[14]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\";\")\n    \n    if length(unique_chars)\
    \ == 0\n        return words[15]\n    end\n    \n    unique_chars = unique_chars\
    \ - Set(\"=\")\n    \n    if length(unique_chars) == 0\n        return words[16]\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"", "    unique_chars =\
    \ Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_", "    word_counts\
    \ = Dict{String, Int}()\n    for word in words\n        word_counts[word] = get(word_counts,\
    \ word, 0) + 1\n    end\n    \n    sorted_word_counts = sort(collect(values(word_counts)),\
    \ by=x->x)\n    \n    sorted_word_counts = reverse(sorted_word_counts)\n    \n\
    \    sorted_word_counts = sorted_word_counts[2:end]\n    \n    sorted_word_counts\
    \ = reverse(sorted_word_counts)\n    \n    sorted_word_counts = sorted_word_counts[2:end]\n\
    \    \n    sorted_word_counts = reverse(sorted_word_counts)\n    \n    sorted_word_counts\
    \ = sorted_word_counts[2:end]\n    \n    sorted_word_counts = reverse(sorted_word_counts)\n\
    \    \n    sorted_word_counts = sorted_word_counts[2:end]\n    \n    sorted_word_counts\
    \ = reverse(sorted_word_counts)\n    \n    sorted_word_counts = sorted_word_counts[2:end]\n\
    \    \n    sorted_word_counts = reverse(sorted_word_counts)\n    \n    sorted_word_counts\
    \ = sorted_word_counts[2:end]\n    \n    sorted_word_counts = reverse(sorted_word_counts)\n\
    \    \n    sorted_word_counts = sorted_word_counts[2:end]\n    \n    sorted_word_counts\
    \ = reverse(sorted_word_counts)\n    \n    sorted_word_counts = sorted_word_counts[2:end]\n\
    \    \n    sorted_word_counts = reverse(sorted_word_counts)\n    \n    sorted_word_counts\
    \ = sorted_word_counts[2:end]\n    \n    sorted_word_counts = reverse(sorted_word_counts)\n\
    \    \n    sorted_word_counts = sorted_word_counts[2:end]\n    \n    sorted_word_counts\
    \ = reverse(sorted_word_counts)\n    \n    sorted_word_counts = sorted_word_counts[2:end]\n\
    \    \n    sorted_word_counts = reverse(sorted_word_counts)\n    \n    sorted_word_counts\
    \ = sorted_word_counts[2:end]\n    \n    sorted_word_counts = reverse(sorted_word_counts)\n\
    \    \n    sorted_word_counts = sorted_word_counts[2:end]\n    \n    sorted_word_counts\
    \ = reverse(sorted_word_counts)\n    \n    sorted_word_counts = sorted_word_counts[2:end]\n\
    \    \n    sorted_word_counts = reverse(sorted_word_counts)\n    \n    sorted_word_counts\
    \ = sorted_word_counts[2:end]\n    \n    sorted_word_counts = reverse(sorted_word_counts)\n\
    \    \n    sorted_word_counts = sorted_word_counts[2:end]\n    \n    sorted_word_counts\
    \ = reverse(sorted_word_counts)\n    \n    sorted_word_counts = sorted_word_counts[2:end]\n\
    \    ", "    unique_chars = Set{String}()\n    word_with_max_unique_chars = \"\
    \"\n    for word in words\n        for char in word\n            if !contains(unique_chars,\
    \ char)\n                unique_chars.add(char)\n                if length(unique_chars)\
    \ > length(word_with_max_unique_chars)\n                    word_with_max_unique_chars\
    \ = word\n                end\n            end\n        end\n    end\n    return\
    \ word_with_max_unique_chars\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ accepts a vector of strings and a vector of integers. \n    The vector contains\
    \ different words. Return the word with maximum number\n    of unique characters.\
    \ If multiple strings have maximum number of unique\n    characters, return the\
    \ one which comes first in lexicographical order.", "    word_counts = Dict{String,\
    \ Int}()\n    for word in words\n        word_counts[word] = get(word_counts,\
    \ word, 0) + 1\n    end\n    word_counts = sort(word_counts, by=x->-length(x))\n\
    \    return word_counts[1][1]\nend\n</cell>\n<code language=julia-1.4>\nfind_max([\"\
    name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.4>\nfind_max([\"\
    name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.4>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ accepts a vector of strings and a vector of integers. Return true if the vector\
    \ contains words that appear in both vectors.", "    unique_chars = Set{Char}()\n\
    \    unique_chars.update(*words)\n    unique_chars = unique_chars.elements()\n\
    \    unique_chars = sort(unique_chars)\n    unique_chars = unique_chars[end]\n\
    \    unique_chars = unique_chars[2:end]\n    unique_chars = sort(unique_chars)\n\
    \    unique_chars = unique_chars[end]\n    unique_chars = unique_chars[2:end]\n\
    \    unique_chars = sort(unique_chars)\n    unique_chars = unique_chars[end]\n\
    \    unique_chars = unique_chars[2:end]\n    unique_chars = sort(unique_chars)\n\
    \    unique_chars = unique_chars[end]\n    unique_chars = unique_chars[2:end]\n\
    \    unique_chars = sort(unique_chars)\n    unique_chars = unique_chars[end]\n\
    \    unique_chars = unique_chars[2:end]\n    unique_chars = sort(unique_chars)\n\
    \    unique_chars = unique_chars[end]\n    unique_chars = unique_chars[2:end]\n\
    \    unique_chars = sort(unique_chars)\n    unique_chars = unique_chars[end]\n\
    \    unique_chars = unique_chars[2:end]\n    unique_chars = sort(unique_chars)\n\
    \    unique_chars = unique_chars[end]\n    unique_chars = unique_chars[2:end]\n\
    \    unique_chars = sort(unique_chars)\n    unique_chars = unique_chars[end]\n\
    \    unique_chars = unique_chars[2:end]\n    unique_chars = sort(unique_chars)\n\
    \    unique_chars = unique_chars[end]\n    unique_chars = unique_chars[2:end]\n\
    \    unique_chars = sort(unique_chars)\n    unique_chars = unique_chars[end]\n\
    \    unique_chars = unique_chars[2:end]\n    unique_chars = sort(unique_chars)\n\
    \    unique_chars = unique_chars[end]\n    unique_chars = unique_chars[2:end]\n\
    \    unique_chars = sort(unique_chars)\n    unique_chars = unique_chars[end]\n\
    \    unique_chars = unique_chars[2:end]\n    unique_chars = sort(unique_chars)\n\
    \    unique_chars = unique_chars[end]\n    unique_chars = unique_chars[2:end]\n\
    \    unique_chars = sort(unique_chars)\n    unique_chars = unique_chars[end]\n\
    \    unique_chars = unique_chars[2:end]\n    unique_chars = sort(unique_chars)\n\
    \    unique_chars = unique_chars[end]\n    unique_chars = unique_chars[2:end]\n\
    \    unique_chars = sort(unique_chars)\n    unique_chars = unique_chars[end]\n\
    \    unique_chars = unique_chars[2:end]\n    unique_chars = sort(unique_chars)",
  "    \n    unique_chars = Set{Char}(\"\")\n    \n    for word in words \n      \
    \  for char in word\n            unique_chars <- unique_chars + char\n       \
    \ end\n    end\n    \n    if length(unique_chars) > length(words)\n        \n\
    \        for word in words \n            for char in word\n                unique_chars\
    \ <- unique_chars - char\n            end\n        end\n    end\n    \n    unique_chars\
    \ = unique_chars[end]\n    \n    if length(unique_chars) == length(words)\n  \
    \      return words[end]\n    end\n    \n    return words[end]\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that accepts a vector of strings and a vector\
    \ of integers. \n    The vector contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.", "    unique_chars = Set()\n    unique_chars_len = 0\n    unique_chars_index\
    \ = 0\n    for word in words\n        for char in word\n            unique_chars.add(char)\n\
    \            unique_chars_len += 1\n            if unique_chars_len > unique_chars_index\n\
    \                unique_chars_index = unique_chars_len\n            end\n    \
    \    end\n    end\n    return words[unique_chars_index]\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that accepts a vector of strings and a vector of integers. \nThe vector contains\
    \ different words. Return the word with maximum number\nof unique characters.\
    \ If multiple strings have maximum number of unique\ncharacters, return the one\
    \ which comes first in lexicographical order.", "    unique_chars = Set()\n  \
    \  unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words.map(length))\n\
    \    unique_chars = unique_chars.union(words.map(length).map(sort))\n    unique_chars\
    \ = unique_chars.union(words.map(length).map(sort).map(unique))\n    unique_chars\
    \ = unique_chars.union(words.map(length).map(sort).map(unique).map(sort))\n  \
    \  unique_chars = unique_chars.union(words.map(length).map(sort).map(unique).map(sort).map(unique))\n\
    \    unique_chars = unique_chars.union(words.map(length).map(sort).map(unique).map(sort).map(unique).map(unique))\n\
    \    unique_chars = unique_chars.union(words.map(length).map(sort).map(unique).map(sort).map(unique).map(unique).map(unique))\n\
    \    unique_chars = unique_chars.union(words.map(length).map(sort).map(unique).map(sort).map(unique).map(unique).map(unique).map(unique))\n\
    \    unique_chars = unique_chars.union(words.map(length).map(sort).map(unique).map(sort).map(unique).map(unique).map(unique).map(unique).map(unique))\n\
    \    unique_chars = unique_chars.union(words.map(length).map(sort).map(unique).map(sort).map(unique).map(unique).map(unique).map(unique).map(unique).map(unique))\n\
    \    unique_chars = unique_chars.union(words.map(length).map(sort).map(unique).map(sort).map(unique).map(unique).map(unique).map(unique).map(unique).map(unique))\n\
    \    unique_chars = unique_chars.union(words.map(length).map(sort).map(unique).map(sort).map(unique).map(unique).map(unique).map(unique).map(unique).map(unique).map(unique))\n\
    \    unique_chars = unique_chars.union(words.map(length).map(sort).map(unique).map(sort).map(unique).map(unique).map(unique).map(unique).map(unique).map(unique).map(unique))\n\
    \    unique_chars = unique_chars.union(words.map(length).map(sort).map(unique).map(sort).map(unique).map(unique).map(unique).map(unique).map(unique).map(unique).map(unique))\n\
    \    unique_chars = unique_chars.union(words.map(length).map(sort).map(unique).map(sort).map(unique).map(unique).map(unique).map(unique).map(unique).map(unique).map(unique))\n\
    \    unique_chars = unique_chars.union(words.map(length).map(sort).map(unique).",
  "    \n    unique_chars = Set{Char}(\"\")\n    \n    for word in words\n       \
    \ unique_chars |= Set(word)\n    end\n    \n    unique_chars = unique_chars -\
    \ Set(\"a\")\n    unique_chars = unique_chars - Set(\"e\")\n    unique_chars =\
    \ unique_chars - Set(\"i\")\n    unique_chars = unique_chars - Set(\"o\")\n  \
    \  unique_chars = unique_chars - Set(\"u\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"A\")\n    unique_chars = unique_chars - Set(\"E\")\n    unique_chars\
    \ = unique_chars - Set(\"I\")\n    unique_chars = unique_chars - Set(\"O\")\n\
    \    unique_chars = unique_chars - Set(\"U\")\n    \n    unique_chars = unique_chars\
    \ - Set(\"1\")\n    unique_chars = unique_chars - Set(\"2\")\n    unique_chars\
    \ = unique_chars - Set(\"3\")\n    unique_chars = unique_chars - Set(\"4\")\n\
    \    unique_chars = unique_chars - Set(\"5\")\n    unique_chars = unique_chars\
    \ - Set(\"6\")\n    unique_chars = unique_chars - Set(\"7\")\n    unique_chars\
    \ = unique_chars - Set(\"8\")\n    unique_chars = unique_chars - Set(\"9\")\n\
    \    \n    unique_chars = unique_chars - Set(\"0\")\n    \n    unique_chars =\
    \ unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\",\")\n  \
    \  unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars -\
    \ Set(\":\")\n    unique_chars = unique_chars - Set(\"!\")\n    unique_chars =\
    \ unique_chars - Set(\"?\")\n    unique_chars = unique_chars - Set(\"(\")\n  \
    \  unique_chars = unique_chars - Set(\")\")\n    unique_chars = unique_chars -\
    \ Set(\"[\")\n    unique_chars = unique_chars - Set(\"]\")\n    unique_chars =\
    \ unique_chars - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n  \
    \  unique_chars = unique_chars - Set(\":\")\n    unique_chars = unique_chars -\
    \ Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n    unique_chars =\
    \ unique_chars - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n  \
    \  unique_chars = unique_chars - Set(\"[\")\n    unique_chars = unique_chars -\
    \ Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n    unique_chars =\
    \ unique_chars - Set(\"}\")\n    unique_", "    unique_chars = Set()\n    for\
    \ w in words\n        unique_chars = unique_chars | Set(w)\n    end\n    unique_chars\
    \ = unique_chars - Set(\"a\")\n    unique_chars = unique_chars - Set(\"z\")\n\
    \    unique_chars = unique_chars - Set(\"A\")\n    unique_chars = unique_chars\
    \ - Set(\"Z\")\n    unique_chars = unique_chars - Set(\"0\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\",\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n\
    \    unique_chars = unique_chars - Set(\"[\")\n    unique_chars = unique_chars\
    \ - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n    unique_chars\
    \ = unique_chars - Set(\"}\")\n    unique_chars = unique_chars - Set(\"'\")\n\
    \    unique_chars = unique_chars - Set(\"\\\"\")\n    unique_chars = unique_chars\
    \ - Set(\";\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\",\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"'\")\n    unique_chars = unique_chars - Set(\"\\\"\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\"[\")\n    unique_chars = unique_chars\
    \ - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n    unique_chars\
    \ = unique_chars - Set(\"}\")\n    unique_chars = unique_chars - Set(\"'\")\n\
    \    unique_chars = unique_chars - Set(\"\\\"\")\n    unique_chars = unique_chars\
    \ - Set(\";\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\",\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"'\")\n    unique_chars = unique_chars - Set(\"\\\"\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\"[\")", "    unique_chars = Set{Char}(\"\
    \")\n    for w in words\n        unique_chars = unique_chars + Set(w)\n    end\n\
    \    unique_chars = unique_chars - Set(\"a\")\n    unique_chars = unique_chars\
    \ - Set(\"z\")\n    unique_chars = unique_chars - Set(\"A\")\n    unique_chars\
    \ = unique_chars - Set(\"Z\")\n    unique_chars = unique_chars - Set(\"0\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")", "    unique_chars = Set{String}()\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.union(words.map(w\
    \ => w))\n    unique_chars = unique_chars.union(words.map(w => w.reverse))\n \
    \   unique_chars = unique_chars.union(words.map(w => w.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.reverse))\n    unique_chars = unique_chars.union(words.map(w => w.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.reverse))\n    unique_chars = unique_chars.union(words.map(w => w.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.reverse))\n    unique_chars = unique_chars.union(words.map(w => w.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.reverse))\n    unique_chars = unique_chars.union(words.map(w => w.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.reverse))\n    unique_chars = unique_chars.union(words.map(w => w.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.reverse))\n    unique_chars = unique_chars.union(words.map(w => w.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.reverse))\n    unique_chars\
    \ = unique_chars.union(words.map(w => w.reverse))\n    unique_chars = unique_chars.union(words.map(w\
    \ => w.reverse))\n    unique_chars = unique_chars.union(words.map(w => w.reverse))\n\
    \    unique_chars = unique_chars.union(words.map(w => w.", "    unique_chars =\
    \ Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_char", "    unique_chars = Set()\n    for w in words\n        unique_chars\
    \ = unique_chars | Set(w)\n    end\n    unique_chars = unique_chars - Set(\"a\"\
    )\n    unique_chars = unique_chars - Set(\"z\")\n    unique_chars = unique_chars\
    \ - Set(\"A\")\n    unique_chars = unique_chars - Set(\"Z\")\n    unique_chars\
    \ = unique_chars - Set(\"0\")\n    unique_chars = unique_chars - Set(\"9\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"$\")\n    unique_chars = unique_chars - Set(\"%\")\n    unique_chars\
    \ = unique_chars - Set(\"&\")\n    unique_chars = unique_chars - Set(\"*\")\n\
    \    unique_chars = unique_chars - Set(\"(\")\n    unique_chars = unique_chars\
    \ - Set(\")\")\n    unique_chars = unique_chars - Set(\"+\")\n    unique_chars\
    \ = unique_chars - Set(\",\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\"?\")\n    unique_chars\
    \ = unique_chars - Set(\"!\")\n    unique_chars = unique_chars - Set(\"@\")\n\
    \    unique_chars = unique_chars - Set(\"^\")\n    unique_chars = unique_chars\
    \ - Set(\"~\")\n    unique_chars = unique_chars - Set(\"|\")\n    unique_chars\
    \ = unique_chars - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n\
    \    unique_chars = unique_chars - Set(\"~\")\n    unique_chars = unique_chars\
    \ - Set(\"^\")\n    unique_chars = unique_chars - Set(\"~\")\n    unique_chars\
    \ = unique_chars - Set(\"^\")\n    unique_chars = unique_chars - Set(\"~\")\n\
    \    unique_chars = unique_chars - Set(\"^\")\n    unique_chars = unique_chars\
    \ - Set(\"~\")\n    unique_chars = unique_chars - Set(\"^\")\n    unique_chars\
    \ = unique_chars - Set(\"~\")\n    unique_chars = unique_chars - Set(\"^\")\n\
    \    unique_chars = unique_chars - Set(\"~\")\n    unique_chars = unique_chars\
    \ - Set(\"^\")\n    unique_chars = unique_chars - Set(\"~\")\n    unique_chars\
    \ = unique_chars - Set(\"^\")\n    unique_chars = unique_chars - Set(\"~\")\n\
    \    unique_chars = unique_chars - Set(\"", "    unique_chars = Set{String}()\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.elements()\n\
    \    unique_chars = unique_chars.sort\n    unique_chars = unique_chars[end]\n\
    \    return unique_chars\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\", \"dddd\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeee\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeee\", \"ffff\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"\
    eeee\", \"ffff\", \"gggg\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"])\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"\
    dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\", \"jjjj\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"\
    iiii\", \"jjjj\", \"kkkk\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"\
    iiii\", \"jjjj\", \"kkkk\", \"llll\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"\
    iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"\
    eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj", "    unique_chars = Set{Char}(\"\
    \")\n    for word in words\n        for char in word\n            unique_chars\
    \ = unique_chars + char\n    end\n    unique_chars = unique_chars - Set{Char}(\"\
    a\")\n    unique_chars = unique_chars - Set{Char}(\"z\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"A\")\n    unique_chars = unique_chars - Set{Char}(\"Z\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"0\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"_\")\n    unique_chars = unique_chars - Set{Char}(\"$\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\".\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\",\")\n    unique_chars = unique_chars - Set{Char}(\";\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\":\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"?\")\n    unique_chars = unique_chars - Set{Char}(\"!\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\":\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"(\")\n    unique_chars = unique_chars - Set{Char}(\")\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"[\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"]\")\n    unique_chars = unique_chars - Set{Char}(\"{\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"}\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"{\")\n    unique_chars = unique_chars - Set{Char}(\"}\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\":\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\":\")\n    unique_chars = unique_chars - Set{Char}(\":\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\":\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\":\")\n    unique_chars = unique_chars - Set{Char}(\":\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\":\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\":\")\n    unique_chars = unique_chars - Set{Char}(\":\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\":\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\":\")\n    unique_chars = unique_chars - Set{Char}(\"", "    unique_chars\
    \ = Set()\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_", "    unique_chars = Set()\n    unique_chars_count\
    \ = Dict{Char,Int}()\n    for word in words \n        for char in word\n     \
    \       unique_chars.add(char)\n            unique_chars_count[char] = unique_chars_count[char]\
    \ + 1\n    end\n    \n    unique_chars_sorted = unique_chars.sorted()\n    unique_chars_count\
    \ = unique_chars_count.sorted()\n    \n    unique_chars_count = unique_chars_count[unique_chars_sorted[1]]\n\
    \    \n    if unique_chars_count > unique_chars_sorted[1]\n        return unique_chars_sorted[1]\n\
    \    else\n        return unique_chars_sorted[1]\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that accepts a vector of strings and a vector of\
    \ integers. \n    The vector contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.", "    unique_chars = Set{Char}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words[1])\n    unique_chars = unique_chars.union(words[2])\n\
    \    unique_chars = unique_chars.union(words[3])\n    unique_chars = unique_chars.union(words[4])\n\
    \    unique_chars = unique_chars.union(words[5])\n    unique_chars = unique_chars.union(words[6])\n\
    \    unique_chars = unique_chars.union(words[7])\n    unique_chars = unique_chars.union(words[8])\n\
    \    unique_chars = unique_chars.union(words[9])\n    unique_chars = unique_chars.union(words[10])\n\
    \    unique_chars = unique_chars.union(words[11])\n    unique_chars = unique_chars.union(words[12])\n\
    \    unique_chars = unique_chars.union(words[13])\n    unique_chars = unique_chars.union(words[14])\n\
    \    unique_chars = unique_chars.union(words[15])\n    unique_chars = unique_chars.union(words[16])\n\
    \    unique_chars = unique_chars.union(words[17])\n    unique_chars = unique_chars.union(words[18])\n\
    \    unique_chars = unique_chars.union(words[19])\n    unique_chars = unique_chars.union(words[20])\n\
    \    unique_chars = unique_chars.union(words[21])\n    unique_chars = unique_chars.union(words[22])\n\
    \    unique_chars = unique_chars.union(words[23])\n    unique_chars = unique_chars.union(words[24])\n\
    \    unique_chars = unique_chars.union(words[25])\n    unique_chars = unique_chars.union(words[26])\n\
    \    unique_chars = unique_chars.union(words[27])\n    unique_chars = unique_chars.union(words[28])\n\
    \    unique_chars = unique_chars.union(words[29])\n    unique_chars = unique_chars.union(words[30])\n\
    \    unique_chars = unique_chars.union(words[31])\n    unique_chars = unique_chars.union(words[32])\n\
    \    unique_chars = unique_chars.union(words[33])\n    unique_chars = unique_chars.union(words[34])\n\
    \    unique_chars = unique_chars.union(words[35])\n    unique_chars = unique_chars.union(words[36])\n\
    \    unique_chars = unique_chars.union(words[37])\n    unique_chars = unique_chars.union(words[38])\n\
    \    unique_chars = unique_chars.union(word", "    unique_chars = Set{Char}(\"\
    \")\n    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n",
  "    unique_chars = Set()\n    for word in words\n        unique_chars = unique_chars\
    \ + Set(word)\n    end\n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars\
    \ = unique_chars - Set(\"A\")\n    unique_chars = unique_chars - Set(\"0\")\n\
    \    unique_chars = unique_chars - Set(\"1\")\n    unique_chars = unique_chars\
    \ - Set(\"2\")\n    unique_chars = unique_chars - Set(\"3\")\n    unique_chars\
    \ = unique_chars - Set(\"4\")\n    unique_chars = unique_chars - Set(\"5\")\n\
    \    unique_chars = unique_chars - Set(\"6\")\n    unique_chars = unique_chars\
    \ - Set(\"7\")\n    unique_chars = unique_chars - Set(\"8\")\n    unique_chars\
    \ = unique_chars - Set(\"9\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"$\")\n    unique_chars = unique_chars\
    \ - Set(\"%\")\n    unique_chars = unique_chars - Set(\"&\")\n    unique_chars\
    \ = unique_chars - Set(\"*\")\n    unique_chars = unique_chars - Set(\"(\")\n\
    \    unique_chars = unique_chars - Set(\")\")\n    unique_chars = unique_chars\
    \ - Set(\"+\")\n    unique_chars = unique_chars - Set(\",\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\"/\")\n    unique_chars = unique_chars - Set(\"[\")\n    unique_chars\
    \ = unique_chars - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n\
    \    unique_chars = unique_chars - Set(\"}\")\n    unique_chars = unique_chars\
    \ - Set(\"^\")\n    unique_chars = unique_chars - Set(\"~\")\n    unique_chars\
    \ = unique_chars - Set(\"@\")\n    unique_chars = unique_chars - Set(\"|\")\n\
    \    unique_chars = unique_chars - Set(\"~\")\n    unique_chars = unique_chars\
    \ - Set(\"`\")\n    unique_chars = unique_chars - Set(\"~\")\n    unique_chars\
    \ = unique_chars - Set(\"`\")\n    unique_chars = unique_chars - Set(\"~\")\n\
    \    unique_chars = unique_chars - Set(\"`\")\n    unique_chars = unique_chars\
    \ - Set(\"`\")\n    unique_chars = unique_chars - Set(\"`\")\n    unique_chars\
    \ = unique_chars - Set(\"`\")\n    unique_chars = unique_chars - Set", "    word_counts\
    \ = Dict{String, Int}()\n    for word in words\n        if !haskey(word_counts,\
    \ word)\n            word_counts[word] = 1\n        else\n            word_counts[word]\
    \ += 1\n    end\n    \n    sorted_word_counts = sort(collect(values(word_counts)),\
    \ by=x->x)\n    \n    return sorted_word_counts[1][1]\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that accepts a vector of strings and a vector of\
    \ integers. Return the string that comes first in the lexicographical order of\
    \ the strings in the vector and the integer that comes first in the lexicographical\
    \ order of the integers in the vector. If multiple strings have the same number\
    \ of unique characters, return the one that comes first in lexicographical order.",
  "    unique_chars = Set()\n    unique_chars_count = 0\n    \n    for w in words\n\
    \        unique_chars = unique_chars | Set(w)\n        unique_chars_count = unique_chars_count\
    \ + length(w)\n    end\n    \n    if unique_chars_count > length(words)\n    \
    \    return words[end]\n    end\n    \n    unique_chars_count\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <text>\nExercise: Write a function that accepts a vector of strings and returns\
    \ a vector of strings. \n    Each string in the returned vector should contain\
    \ all the unique characters from all the strings in the input vector.\n    \n\
    \    >>> find_unique_chars([\"name\", \"of\", \"string\"])\n    [\"n\", \"o\"\
    , \"s\", \"t\", \"r\", \"i\", \"n\", \"a\", \"m\", \"g\"]\n    >>> find_unique_chars([\"\
    name\", \"enam\", \"game\"])\n    [\"n\", \"e\", \"a\", \"m\", \"g\"]\n    >>>\
    \ find_unique_chars([\"aaaaaaa\", \"bb\", \"cc\"])\n    [\"a\", \"b\", \"c\",\
    \ \"a\", \"b\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"a\"\
    , \"a\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\"\
    , \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"\
    , \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\"\
    , \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\"\
    , \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"a\"\
    , \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\"\
    , \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\"\
    , \"a\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\"\
    , \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"\
    , \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\"\
    , \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\"\
    , \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"a\"\
    , \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\"\
    , \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\"\
    , \"a\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\"\
    , \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"\
    , \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\"\
    , \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\"\
    , \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"a\"\
    , \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\"\
    , \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\"\
    , \"a\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\"\
    , \"a\", \"a\", \"a\", \"a\", \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"\
    , \"b\", \"a\", \"a\", \"a\", \"a\", \"a\", \"", "    word_counts = Dict{String,\
    \ Int}()\n    for word in words \n        word_counts[word] = get(word_counts,\
    \ word, 0) + 1\n    end\n    \n    word_counts = sort(word_counts, by=x->length(x))\n\
    \    \n    word_counts[word_counts[end][1]][1]\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\"])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\"\
    , \"ffff\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gg\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gg\"\
    , \"hh\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gg\", \"hh\", \"ii\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"\
    eeeeee\", \"ffff\", \"gg\", \"hh\", \"ii\", \"jj\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gg\"\
    , \"hh\", \"ii\", \"jj\", \"kk\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gg\", \"hh\", \"\
    ii\", \"jj\", \"kk\", \"ll\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gg\", \"hh\", \"\
    ii\", \"jj\", \"kk\", \"ll\", \"mm\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gg\", \"hh\", \"\
    ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"nn\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gg\"\
    , \"hh\", \"ii\", \"jj\", \"kk\", \"ll\", \"mm\", \"nn\", \"oo\"])\n</cell>\n\
    <code language=julia-1.5>", "    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_char", "    unique_chars\
    \ = Set{String}()\n    unique_chars.update(*words)\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    unique_chars.last\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that accepts a vector of strings and a vector of integers.\
    \ \n    The vector contains different words. Return the word with maximum number\n\
    \    of unique characters. If multiple strings have maximum number of unique\n\
    \    characters, return the one which comes first in lexicographical order.",
  "    unique_chars = Set()\n    for word in words \n        unique_chars = unique_chars\
    \ + Set(word)\n    end\n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars\
    \ = unique_chars - Set(\"z\")\n    unique_chars = unique_chars - Set(\"A\")\n\
    \    unique_chars = unique_chars - Set(\"Z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"9\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"$\")\n\
    \    unique_chars = unique_chars - Set(\"%\")\n    unique_chars = unique_chars\
    \ - Set(\"&\")\n    unique_chars = unique_chars - Set(\"*\")\n    unique_chars\
    \ = unique_chars - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n\
    \    unique_chars = unique_chars - Set(\"+\")\n    unique_chars = unique_chars\
    \ - Set(\",\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n\
    \    unique_chars = unique_chars - Set(\"/\")\n    unique_chars = unique_chars\
    \ - Set(\"[\")\n    unique_chars = unique_chars - Set(\"]\")\n    unique_chars\
    \ = unique_chars - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n\
    \    unique_chars = unique_chars - Set(\"!\")\n    unique_chars = unique_chars\
    \ - Set(\"?\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\"=\")\n\
    \    unique_chars = unique_chars - Set(\"+\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\"*\")\n    unique_chars\
    \ = unique_chars - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n\
    \    unique_chars = unique_chars - Set(\",\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\"=\")\n\
    \    unique_chars = unique_chars - Set(\"+\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\"*\")\n    unique_chars\
    \ = unique_chars - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n",
  "    unique_chars = Set()\n    unique_chars_count = 0\n    \n    for word in words\n\
    \        for char in word\n            unique_chars << char\n            unique_chars_count\
    \ += 1\n        end\n    end\n    \n    if unique_chars_count == 0\n        return\
    \ \"\"\n    end\n    \n    if unique_chars_count == 1\n        return words[1]\n\
    \    end\n    \n    unique_chars = unique_chars.to_array()\n    unique_chars_count\
    \ = unique_chars_count[1]\n    \n    if unique_chars_count == length(unique_chars)\n\
    \        return words[1]\n    end\n    \n    unique_chars = unique_chars[2:end]\n\
    \    unique_chars_count = unique_chars_count[2:end]\n    \n    if unique_chars_count\
    \ == length(unique_chars)\n        return words[1]\n    end\n    \n    unique_chars\
    \ = unique_chars[2:end]\n    unique_chars_count = unique_chars_count[2:end]\n\
    \    \n    if unique_chars_count == length(unique_chars)\n        return words[1]\n\
    \    end\n    \n    unique_chars = unique_chars[2:end]\n    unique_chars_count\
    \ = unique_chars_count[2:end]\n    \n    if unique_chars_count == length(unique_chars)\n\
    \        return words[1]\n    end\n    \n    unique_chars = unique_chars[2:end]\n\
    \    unique_chars_count = unique_chars_count[2:end]\n    \n    if unique_chars_count\
    \ == length(unique_chars)\n        return words[1]\n    end\n    \n    unique_chars\
    \ = unique_chars[2:end]\n    unique_chars_count = unique_chars_count[2:end]\n\
    \    \n    if unique_chars_count == length(unique_chars)\n        return words[1]\n\
    \    end\n    \n    unique_chars = unique_chars[2:end]\n    unique_chars_count\
    \ = unique_chars_count[2:end]\n    \n    if unique_chars_count == length(unique_chars)\n\
    \        return words[1]\n    end\n    \n    unique_chars = unique_chars[2:end]\n\
    \    unique_chars_count = unique_chars_count[2:end]\n    \n    if unique_chars_count\
    \ == length(unique_chars)\n        return words[1]\n    end\n    \n    unique_chars\
    \ = unique_chars[2:end]\n    unique_chars_count = unique_chars_count[2:end]\n\
    \    \n    if unique_chars_count == length(unique_chars)\n        return words[1]\n\
    \    end\n    \n    unique_chars = unique_chars[2:end]\n    unique_chars_count\
    \ = unique_chars_count[2:end]\n    \n    if unique_chars_count == length(unique_chars)\n\
    \        return words[1]\n    end\n    \n    unique_chars = unique_chars[2:end]\n\
    \    unique_chars_count = unique_chars_count[2:end]\n    \n    if unique_chars_count\
    \ == length(unique_char", "    unique_chars = Set()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_char", "    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.filter(x -> x != \"\")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \" \")\n    unique_chars = unique_chars.filter(x -> x != \" \")\n  \
    \  unique_chars = unique_chars.filter(x -> x != \" \")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \" \")\n    unique_chars = unique_chars.filter(x -> x != \" \")\n  \
    \  unique_chars = unique_chars.filter(x -> x != \" \")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \" \")\n    unique_chars = unique_chars.filter(x -> x != \" \")\n  \
    \  unique_chars = unique_chars.filter(x -> x != \" \")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \" \")\n    unique_chars = unique_chars.filter(x -> x != \" \")\n  \
    \  unique_chars = unique_chars.filter(x -> x != \" \")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \" \")\n    unique_chars = unique_chars.filter(x -> x != \" \")\n  \
    \  unique_chars = unique_chars.filter(x -> x != \" \")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \" \")\n    unique_chars = unique_chars.filter(x -> x != \" \")\n  \
    \  unique_chars = unique_chars.filter(x -> x != \" \")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \" \")\n    unique_chars = unique_chars.filter(x -> x != \" \")\n  \
    \  unique_chars = unique_chars.filter(x -> x != \" \")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \" \")\n    unique_chars = unique_chars.filter(x -> x != \" \")\n  \
    \  unique_chars = unique_chars.filter(x -> x != \" \")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \" \")\n    unique_chars = unique_chars.filter(x -> x != \" \")\n  \
    \  unique_chars = unique_chars.filter(x -> x != \" \")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \" \")\n    unique_chars = unique_chars.filter(x -> x != \" \")\n  \
    \  unique_chars = unique_chars.filter(x -> x != \" \")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \" \")\n    unique_chars = unique_chars.filter(x -> x != \" \")\n  \
    \  unique_chars = unique_chars.filter(x -> x != \" \")\n    unique_chars = unique_chars.filter(x\
    \ -> x != \" \")\n    unique_", "    unique_chars = Set{Char}(\"\")\n    unique_chars\
    \ = unique_chars.union(*words)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)\n\
    \    unique_chars = unique_chars.union(unique_chars)\n    unique_chars = unique_chars.union(unique_chars)",
  "    unique_chars = Set{String}()\n    for word in words \n        for char in word\n\
    \            unique_chars.add(char)\n            if unique_chars.size > max_unique_chars\n\
    \                max_unique_chars = unique_chars.size\n            end\n     \
    \   end\n    end\n    return words[max_unique_chars]\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that accepts a vector of strings and a vector of integers. \n    The\
    \ vector contains different words. Return the word with maximum number\n    of\
    \ unique characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.", "    unique_chars\
    \ = Set{String}()\n    unique_chars = unique_chars.union(words)\n    unique_chars\
    \ = unique_chars.union(words[2:end])\n    unique_chars = unique_chars.union(words[3:end])\n\
    \    unique_chars = unique_chars.union(words[4:end])\n    unique_chars = unique_chars.union(words[5:end])\n\
    \    unique_chars = unique_chars.union(words[6:end])\n    unique_chars = unique_chars.union(words[7:end])\n\
    \    unique_chars = unique_chars.union(words[8:end])\n    unique_chars = unique_chars.union(words[9:end])\n\
    \    unique_chars = unique_chars.union(words[10:end])\n    unique_chars = unique_chars.union(words[11:end])\n\
    \    unique_chars = unique_chars.union(words[12:end])\n    unique_chars = unique_chars.union(words[13:end])\n\
    \    unique_chars = unique_chars.union(words[14:end])\n    unique_chars = unique_chars.union(words[15:end])\n\
    \    unique_chars = unique_chars.union(words[16:end])\n    unique_chars = unique_chars.union(words[17:end])\n\
    \    unique_chars = unique_chars.union(words[18:end])\n    unique_chars = unique_chars.union(words[19:end])\n\
    \    unique_chars = unique_chars.union(words[20:end])\n    unique_chars = unique_chars.union(words[21:end])\n\
    \    unique_chars = unique_chars.union(words[22:end])\n    unique_chars = unique_chars.union(words[23:end])\n\
    \    unique_chars = unique_chars.union(words[24:end])\n    unique_chars = unique_chars.union(words[25:end])\n\
    \    unique_chars = unique_chars.union(words[26:end])\n    unique_chars = unique_chars.union(words[27:end])\n\
    \    unique_chars = unique_chars.union(words[28:end])\n    unique_chars = unique_chars.union(words[29:end])\n\
    \    unique_chars = unique_chars.union(words[31:end])\n    unique_chars = unique_chars.union(words[32:end])\n\
    \    unique_chars = unique_chars.union(words[33:end])\n    unique_chars = unique_chars.union(words[34:end])\n\
    \    unique_chars = unique_chars.union(words[35:end])\n    unique_chars = unique_chars.union(words[36:end])\n\
    \    unique_chars = unique_char", "    unique_chars = Set{String}()\n    for word\
    \ in words \n        for char in word\n            unique_chars.add(char)\n  \
    \          if unique_chars.size > max_unique_chars\n                max_unique_chars\
    \ = unique_chars.size\n            end\n        end\n    end\n    return words[max_unique_chars]\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a vector of strings\
    \ and a vector of integers. \n    The vector contains different words. Return\
    \ the word with maximum number\n    of unique characters. If multiple strings\
    \ have maximum number of unique\n    characters, return the one which comes first\
    \ in lexicographical order.", "    unique_chars = Set{Char}(\"\")\n    for word\
    \ in words \n        unique_chars = unique_chars | Set(word)\n    end\n    unique_chars\
    \ = unique_chars - Set(\"a\")\n    unique_chars = unique_chars - Set(\"A\")\n\
    \    unique_chars = unique_chars - Set(\"0\")\n    unique_chars = unique_chars\
    \ - Set(\"1\")\n    unique_chars = unique_chars - Set(\"2\")\n    unique_chars\
    \ = unique_chars - Set(\"3\")\n    unique_chars = unique_chars - Set(\"4\")\n\
    \    unique_chars = unique_chars - Set(\"5\")\n    unique_chars = unique_chars\
    \ - Set(\"6\")\n    unique_chars = unique_chars - Set(\"7\")\n    unique_chars\
    \ = unique_chars - Set(\"8\")\n    unique_chars = unique_chars - Set(\"9\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"$\")\n    unique_chars = unique_chars - Set(\"%\")\n    unique_chars\
    \ = unique_chars - Set(\"&\")\n    unique_chars = unique_chars - Set(\"*\")\n\
    \    unique_chars = unique_chars - Set(\"(\")\n    unique_chars = unique_chars\
    \ - Set(\")\")\n    unique_chars = unique_chars - Set(\"+\")\n    unique_chars\
    \ = unique_chars - Set(\",\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\":\")\n    unique_chars = unique_chars\
    \ - Set(\";\")\n    unique_chars = unique_chars - Set(\"!\")\n    unique_chars\
    \ = unique_chars - Set(\"?\")\n    unique_chars = unique_chars - Set(\"@\")\n\
    \    unique_chars = unique_chars - Set(\"[\")\n    unique_chars = unique_chars\
    \ - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n    unique_chars\
    \ = unique_chars - Set(\"}\")\n    unique_chars = unique_chars - Set(\"^\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"$\")\n    unique_chars = unique_chars - Set(\"%\")\n    unique_chars\
    \ = unique_chars - Set(\"&\")\n    unique_chars = unique_chars - Set(\"*\")\n\
    \    unique_chars = unique_chars - Set(\"(\")\n    unique_chars = unique_chars\
    \ - Set(\")\")\n    unique_chars = unique_chars - Set(\"+\")\n    unique_chars\
    \ = unique_chars - Set(\",\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_char", "    word_counts = Dict{String, Int}()\n   \
    \ for word in words \n        word_counts[word] = get(word_counts, word, 0) +\
    \ 1\n    end\n    word_counts = sort(collect(word_counts))\n    word_counts[word_counts[length(word_counts)]]\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a vector of strings\
    \ and a vector of integers. \n    The vector contains different words. Return\
    \ the word with maximum number\n    of unique characters. If multiple strings\
    \ have maximum number of unique\n    characters, return the one which comes first\
    \ in lexicographical order.", "    unique_chars = Set{String}()\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.filter(w => w !=\
    \ \"\")\n    unique_chars = unique_chars.filter(w => w != \" \")\n    unique_chars\
    \ = unique_chars.filter(w => w != \"\")\n    unique_chars = unique_chars.filter(w\
    \ => w != \" \")\n    unique_chars = unique_chars.filter(w => w != \"\")\n   \
    \ unique_chars = unique_chars.filter(w => w != \" \")\n    unique_chars = unique_chars.filter(w\
    \ => w != \"\")\n    unique_chars = unique_chars.filter(w => w != \" \")\n   \
    \ unique_chars = unique_chars.filter(w => w != \"\")\n    unique_chars = unique_chars.filter(w\
    \ => w != \" \")\n    unique_chars = unique_chars.filter(w => w != \"\")\n   \
    \ unique_chars = unique_chars.filter(w => w != \" \")\n    unique_chars = unique_chars.filter(w\
    \ => w != \"\")\n    unique_chars = unique_chars.filter(w => w != \" \")\n   \
    \ unique_chars = unique_chars.filter(w => w != \"\")\n    unique_chars = unique_chars.filter(w\
    \ => w != \" \")\n    unique_chars = unique_chars.filter(w => w != \"\")\n   \
    \ unique_chars = unique_chars.filter(w => w != \" \")\n    unique_chars = unique_chars.filter(w\
    \ => w != \"\")\n    unique_chars = unique_chars.filter(w => w != \" \")\n   \
    \ unique_chars = unique_chars.filter(w => w != \"\")\n    unique_chars = unique_chars.filter(w\
    \ => w != \" \")\n    unique_chars = unique_chars.filter(w => w != \"\")\n   \
    \ unique_chars = unique_chars.filter(w => w != \" \")\n    unique_chars = unique_chars.filter(w\
    \ => w != \"\")\n    unique_chars = unique_chars.filter(w => w != \" \")\n   \
    \ unique_chars = unique_chars.filter(w => w != \"\")\n    unique_chars = unique_chars.filter(w\
    \ => w != \" \")\n    unique_chars = unique_chars.filter(w => w != \"\")\n   \
    \ unique_chars = unique_chars.filter(w => w != \" \")\n    unique_chars = unique_chars.filter(w\
    \ => w != \"\")\n    unique_chars = unique_chars.filter(w => w != \" \")\n   \
    \ unique_chars = unique_chars.filter(w => w != \"\")\n    unique_chars = unique_chars.filter(w\
    \ => w != \" \")\n    unique_chars = unique_chars.filter(w => w != \"\")\n   \
    \ unique_", "    unique_chars = Set()\n    unique_chars_count = Dict()\n    for\
    \ word in words\n        for char in word\n            if char in unique_chars\n\
    \                unique_chars_count[char] += 1\n            else\n           \
    \     unique_chars.add(char)\n                unique_chars_count[char] = 1\n \
    \   end\n    \n    unique_chars_sorted = sort(unique_chars_count)\n    \n    unique_chars_sorted[end]\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    ])\n</cell>\n<text>\nExercise\nWrite a function that accepts a vector of strings\
    \ and returns a vector of strings. \nThe vector contains different words. Return\
    \ the word with maximum number\nof unique characters. If multiple strings have\
    \ maximum number of unique\ncharacters, return the one which comes first in lexicographical\
    \ order.", "    unique_chars = Set()\n    unique_chars_count = 0\n    for word\
    \ in words\n        unique_chars = unique_chars + Set(word)\n        unique_chars_count\
    \ = length(unique_chars)\n    end\n    \n    if unique_chars_count > length(unique_chars)\n\
    \        return words[end]\n    else\n        unique_chars_count\n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that accepts a vector of strings\
    \ and a vector of integers. \nThe vector contains different words. Return the\
    \ word with maximum number\nof unique characters. If multiple strings have maximum\
    \ number of unique\ncharacters, return the one which comes first in lexicographical\
    \ order.", "    unique_chars = Set()\n    word_with_max_unique_chars = \"\"\n\
    \    for word in words\n        unique_chars = unique_chars | Set(word)\n    \
    \    if length(unique_chars) > length(word_with_max_unique_chars)\n          \
    \  word_with_max_unique_chars = word\n        end\n    end\n    return word_with_max_unique_chars\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a vector of strings\
    \ and a vector of integers. Return the string that has maximum number of unique\
    \ characters in the same position as in the vector of integers.", "    unique_chars\
    \ = Set{Char}()\n    word_with_max_unique_chars = \"\"\n    for word in words\
    \ \n        for char in word\n            if !contains(unique_chars, char)\n \
    \               unique_chars.add(char)\n                if length(unique_chars)\
    \ > length(word_with_max_unique_chars)\n                    word_with_max_unique_chars\
    \ = word\n            end\n        end\n    end\n    return word_with_max_unique_chars\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    ])\n</cell>\n<text>\nExercise\nWrite a function that accepts a vector of strings\
    \ and a vector of integers. \nThe vector contains different words. Return the\
    \ word with maximum number of unique characters. If multiple strings have maximum\
    \ number of unique characters, return the one which comes first in lexicographical\
    \ order.", "    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n    unique_chars = unique_chars.union(union(words))\n\
    \    unique_chars = unique_chars.union(union(words))\n", "    unique_chars = Set()\n\
    \    for word in words\n        unique_chars = unique_chars | Set(word)\n    end\n\
    \    unique_chars = unique_chars - Set(\"a\")\n    unique_chars = unique_chars\
    \ - Set(\"A\")\n    unique_chars = unique_chars - Set(\"0\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\",\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"$\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\"(\")\n\
    \    unique_chars = unique_chars - Set(\"[\")\n    unique_chars = unique_chars\
    \ - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n    unique_chars\
    \ = unique_chars - Set(\"}\")\n    unique_chars = unique_chars - Set(\"!\")\n\
    \    unique_chars = unique_chars - Set(\"?\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\",\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"$\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\"(\")\n\
    \    unique_chars = unique_chars - Set(\"[\")\n    unique_chars = unique_chars\
    \ - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n    unique_chars\
    \ = unique_chars - Set(\"}\")\n    unique_chars = unique_chars - Set(\"!\")\n\
    \    unique_chars = unique_chars - Set(\"?\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\",\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"$\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\"(\")\n\
    \    unique_chars = unique_chars - Set(\"[\")\n    unique_chars = unique_chars\
    \ - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{", "    \n    unique_chars\
    \ = Set()\n    \n    for word in words \n        unique_chars = unique_chars |\
    \ Set(word)\n    end\n    \n    if length(unique_chars) == length(words)\n   \
    \     return words[argmax(words)]\n    else\n        return words[argmax(words)]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\", \"dddd\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\"\
    , \"bb\", \"cc\", \"dddd\", \"eeeeee\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"\
    eeeeee\", \"ffff\", \"gggg\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    , \"dddd\", \"eeeeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\"\
    , \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\"])\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeeeee\"\
    , \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\"\
    , \"nnnn\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\", \"dddd\", \"eeeeee\", \"", "    unique_chars = Set{Char}(\"\")\n   \
    \ for word in words\n        unique_chars = unique_chars + Set(word)\n    end\n\
    \    unique_chars = unique_chars - Set(\"a\")\n    unique_chars = unique_chars\
    \ - Set(\"z\")\n    unique_chars = unique_chars - Set(\"A\")\n    unique_chars\
    \ = unique_chars - Set(\"Z\")\n    unique_chars = unique_chars - Set(\"0\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\",\")\n    unique_chars\
    \ = unique_chars - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n\
    \    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\"(\")\n    unique_chars\
    \ = unique_chars - Set(\")\")\n    unique_chars = unique_chars - Set(\"[\")\n\
    \    unique_chars = unique_chars - Set(\"]\")\n    unique_chars = unique_chars\
    \ - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n    unique_chars\
    \ = unique_chars - Set(\"'\")\n    unique_chars = unique_chars - Set(\"\\\"\"\
    )\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\",\")\n    unique_chars = unique_chars - Set(\"!\")\n\
    \    unique_chars = unique_chars - Set(\"?\")\n    unique_chars = unique_chars\
    \ - Set(\";\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n\
    \    unique_chars = unique_chars - Set(\"[\")\n    unique_chars = unique_chars\
    \ - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n    unique_chars\
    \ = unique_chars - Set(\"}\")\n    unique_chars = unique_chars - Set(\"'\")\n\
    \    unique_chars = unique_chars - Set(\"\\\"\")\n    unique_chars = unique_chars\
    \ - Set(\";\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\",\")\n\
    \    unique_chars = unique_chars - Set(\"!\")\n    unique_chars = unique_chars\
    \ - Set(\"?\")\n    unique_chars = unique_chars - Set", "    unique_chars = Set{String}()\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.keys()\
    \ \n    unique_chars = unique_chars.sort\n    unique_chars = unique_chars[1]\n\
    \    return unique_chars\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\", \"dddd\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeee\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeee\", \"ffff\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"\
    eeee\", \"ffff\", \"gggg\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\"])\n\
    </cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"\
    dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\", \"jjjj\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"\
    iiii\", \"jjjj\", \"kkkk\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"\
    iiii\", \"jjjj\", \"kkkk\", \"llll\"])\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\", \"hhhh\", \"\
    iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"eeee\", \"ffff\", \"gggg\"\
    , \"hhhh\", \"iiii\", \"jjjj\", \"kkkk\", \"llll\", \"mmmm\", \"nnnn\"])\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\", \"dddd\", \"\
    eeee\", \"ffff\", \"gggg\", \"hhhh\", \"iiii\", \"jjjj\", \"", "    unique_chars\
    \ = Set{String}()\n    for word in words \n        for char in word\n        \
    \    unique_chars[char] <-unique_chars[char] + 1\n    end\n    \n    unique_chars\
    \ = unique_chars[end]\n    \n    if unique_chars == length(unique_chars)\n   \
    \     return words[end]\n    else\n        unique_chars = unique_chars[end]\n\
    \        \n        for word in words\n            if unique_chars == length(unique_chars)\n\
    \                return word\n            else\n                unique_chars =\
    \ unique_chars[end]\n            end\n        end\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that accepts a vector of strings and a vector of\
    \ integers. \n    The vector contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.", "    word_counts = Dict{String, Int}()\n    for word in words\n   \
    \     word_counts[word] = get(word_counts, word, 0) + 1\n    end\n    word_counts\
    \ = sort(word_counts, by=x->length(x), rev=true)\n    word_counts[word_counts[end][1]][1]\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that accepts a vector of strings\
    \ and a vector of integers. \n    The vector contains different words. Return\
    \ the word with maximum number\n    of unique characters. If multiple strings\
    \ have maximum number of unique\n    characters, return the one which comes first\
    \ in lexicographical order.", "    \n    unique_chars = Set()\n    \n    for word\
    \ in words \n        unique_chars = unique_chars | Set(word)\n    end\n    \n\
    \    unique_chars = unique_chars - Set(\"a\")\n    unique_chars = unique_chars\
    \ - Set(\"A\")\n    \n    unique_chars = unique_chars - Set(\"0\")\n    unique_chars\
    \ = unique_chars - Set(\"1\")\n    unique_chars = unique_chars - Set(\"2\")\n\
    \    unique_chars = unique_chars - Set(\"3\")\n    unique_chars = unique_chars\
    \ - Set(\"4\")\n    unique_chars = unique_chars - Set(\"5\")\n    unique_chars\
    \ = unique_chars - Set(\"6\")\n    unique_chars = unique_chars - Set(\"7\")\n\
    \    unique_chars = unique_chars - Set(\"8\")\n    unique_chars = unique_chars\
    \ - Set(\"9\")\n    \n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\",\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n    unique_chars\
    \ = unique_chars - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n\
    \    unique_chars = unique_chars - Set(\"[\")\n    unique_chars = unique_chars\
    \ - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n    unique_chars\
    \ = unique_chars - Set(\"}\")\n    unique_chars = unique_chars - Set(\"'\")\n\
    \    unique_chars = unique_chars - Set(\"\\\"\")\n    unique_chars = unique_chars\
    \ - Set(\"`\")\n    unique_chars = unique_chars - Set(\"~\")\n    unique_chars\
    \ = unique_chars - Set(\"*\")\n    unique_chars = unique_chars - Set(\"+\")\n\
    \    unique_chars = unique_chars - Set(\"?\")\n    unique_chars = unique_chars\
    \ - Set(\"!\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\",\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\"!\")\n    unique_chars = unique_chars - Set(\"?\")\n    unique_chars\
    \ = unique_chars - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n\
    \    unique_chars = unique_chars - Set(\"[\")\n    unique_chars = unique_chars\
    \ - Set(\"]\")\n    unique_", "    unique_chars = Set{String}()\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_", "    \n    unique_chars = Set()\n    \n    for w in words\n   \
    \     unique_chars = unique_chars | Set(w)\n    end\n    \n    unique_chars =\
    \ unique_chars - Set(\"a\")\n    unique_chars = unique_chars - Set(\"A\")\n  \
    \  \n    unique_chars = unique_chars - Set(\"0\")\n    unique_chars = unique_chars\
    \ - Set(\"1\")\n    \n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    \n    unique_chars = unique_chars - Set(\"\
    ,\")\n    unique_chars = unique_chars - Set(\";\")\n    \n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"?\")\n    unique_chars = unique_chars - Set(\"!\")\n\
    \    \n    unique_chars = unique_chars - Set(\"!\")\n    unique_chars = unique_chars\
    \ - Set(\"?\")\n    \n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    \n    unique_chars = unique_chars - Set(\"\
    ,\")\n    unique_chars = unique_chars - Set(\";\")\n    \n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"?\")\n    unique_chars = unique_chars - Set(\"!\")\n\
    \    \n    unique_chars = unique_chars - Set(\"!\")\n    unique_chars = unique_chars\
    \ - Set(\"?\")\n    \n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    \n    unique_chars = unique_chars - Set(\"\
    ,\")\n    unique_chars = unique_chars - Set(\";\")\n    \n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n    \n    unique_chars\
    \ = unique_chars - Set(\"?\")\n    unique_chars = unique_chars - Set(\"!\")\n\
    \    \n    unique_chars = unique_chars - Set(\"!\")\n    unique_chars = unique_chars\
    \ - Set(\"?\")\n    \n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    \n    unique_chars = unique_chars - Set(\"\
    ,\")\n    unique_chars = unique_chars - Set(\";\")\n    \n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = ", "    \n    unique_chars = Set{String}()\n\
    \    \n    for word in words \n        unique_chars = unique_chars + Set(word)\n\
    \    end\n    \n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars\
    \ = unique_chars - Set(\"b\")\n    unique_chars = unique_chars - Set(\"c\")\n\
    \    unique_chars = unique_chars - Set(\"d\")\n    unique_chars = unique_chars\
    \ - Set(\"e\")\n    unique_chars = unique_chars - Set(\"f\")\n    unique_chars\
    \ = unique_chars - Set(\"g\")\n    unique_chars = unique_chars - Set(\"h\")\n\
    \    unique_chars = unique_chars - Set(\"i\")\n    unique_chars = unique_chars\
    \ - Set(\"j\")\n    unique_chars = unique_chars - Set(\"k\")\n    unique_chars\
    \ = unique_chars - Set(\"l\")\n    unique_chars = unique_chars - Set(\"m\")\n\
    \    unique_chars = unique_chars - Set(\"n\")\n    unique_chars = unique_chars\
    \ - Set(\"o\")\n    unique_chars = unique_chars - Set(\"p\")\n    unique_chars\
    \ = unique_chars - Set(\"q\")\n    unique_chars = unique_chars - Set(\"r\")\n\
    \    unique_chars = unique_chars - Set(\"s\")\n    unique_chars = unique_chars\
    \ - Set(\"t\")\n    unique_chars = unique_chars - Set(\"u\")\n    unique_chars\
    \ = unique_chars - Set(\"v\")\n    unique_chars = unique_chars - Set(\"w\")\n\
    \    unique_chars = unique_chars - Set(\"x\")\n    unique_chars = unique_chars\
    \ - Set(\"y\")\n    unique_chars = unique_chars - Set(\"z\")\n    unique_chars\
    \ = unique_chars - Set(\"A\")\n    unique_chars = unique_chars - Set(\"B\")\n\
    \    unique_chars = unique_chars - Set(\"C\")\n    unique_chars = unique_chars\
    \ - Set(\"D\")\n    unique_chars = unique_chars - Set(\"E\")\n    unique_chars\
    \ = unique_chars - Set(\"F\")\n    unique_chars = unique_chars - Set(\"G\")\n\
    \    unique_chars = unique_chars - Set(\"H\")\n    unique_chars = unique_chars\
    \ - Set(\"I\")\n    unique_chars = unique_chars - Set(\"J\")\n    unique_chars\
    \ = unique_chars - Set(\"K\")\n    unique_chars = unique_chars - Set(\"L\")\n\
    \    unique_chars = unique_chars - Set(\"M\")\n    unique_chars = unique_chars\
    \ - Set(\"N\")\n    unique_chars = unique_char", "    unique_chars = Set()\n \
    \   for word in words\n        for char in word\n            unique_chars.add(char)\n\
    \    end\n    unique_chars\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that accepts a vector of strings and returns a vector of strings. Each element\
    \ of the returned vector contains the number of unique characters in the corresponding\
    \ element of the original vector.", "    \n    unique_chars = Set()\n    \n  \
    \  for word in words\n        for char in word\n            unique_chars = unique_chars\
    \ + char\n        end\n    end\n    \n    unique_chars = unique_chars |> Set\n\
    \    \n    if length(unique_chars) > length(words)\n        return words[end]\n\
    \    else\n        \n        unique_chars = unique_chars |> Set\n        \n  \
    \      for word in words\n            unique_chars = unique_chars - word\n   \
    \     end\n        \n        unique_chars = unique_chars |> Set\n        \n  \
    \      if length(unique_chars) == length(words)\n            return words[1]\n\
    \        else\n            return words[end]\n        end\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that accepts a vector of strings and a vector\
    \ of integers. \n    The vector contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.", "    unique_chars = Set{String}()\n    for word in words \n       \
    \ for char in word\n            unique_chars.add(char)\n    end\n    unique_chars\
    \ = unique_chars - Set{String}()\n    unique_chars = unique_chars - Set{String}(\"\
    a\")\n    unique_chars = unique_chars - Set{String}(\"A\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"0\")\n    unique_chars = unique_chars - Set{String}(\"\
    _\")\n    unique_chars = unique_chars - Set{String}(\"_\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"_\")\n    unique_chars = unique_chars - Set{String}(\"\
    _\")\n    unique_chars = unique_chars - Set{String}(\"_\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"_\")\n    unique_chars = unique_chars - Set{String}(\"\
    _\")\n    unique_chars = unique_chars - Set{String}(\"_\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"_\")\n    unique_chars = unique_chars - Set{String}(\"\
    _\")\n    unique_chars = unique_chars - Set{String}(\"_\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"_\")\n    unique_chars = unique_chars - Set{String}(\"\
    _\")\n    unique_chars = unique_chars - Set{String}(\"_\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"_\")\n    unique_chars = unique_chars - Set{String}(\"\
    _\")\n    unique_chars = unique_chars - Set{String}(\"_\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"_\")\n    unique_chars = unique_chars - Set{String}(\"\
    _\")\n    unique_chars = unique_chars - Set{String}(\"_\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"_\")\n    unique_chars = unique_chars - Set{String}(\"\
    _\")\n    unique_chars = unique_chars - Set{String}(\"_\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"_\")\n    unique_chars = unique_chars - Set{String}(\"\
    _\")\n    unique_chars = unique_chars - Set{String}(\"_\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"_\")\n    unique_chars = unique_chars - Set{String}(\"\
    _\")\n    unique_chars = unique_chars - Set{String}(\"_\")\n    unique_chars =\
    \ unique_chars - Set{String}(\"_\")\n    unique_chars = unique_chars - Set{String",
  "    unique_chars = Set()\n    for word in words \n        for char in word\n  \
    \          unique_chars.add(char)\n            unique_chars = unique_chars - Set([char])\n\
    \    end\n    unique_chars = unique_chars - Set([\"\"])\n    unique_chars = unique_chars\
    \ - Set([\" \"])\n    unique_chars = unique_chars - Set([\",\"])\n    unique_chars\
    \ = unique_chars - Set([\".\"])\n    unique_chars = unique_chars - Set([\":\"\
    ])\n    unique_chars = unique_chars - Set([\"?\"])\n    unique_chars = unique_chars\
    \ - Set([\"!\"])\n    unique_chars = unique_chars - Set([\"-\"])\n    unique_chars\
    \ = unique_chars - Set([\"/\"])\n    unique_chars = unique_chars - Set([\"\\\\\
    \"])\n    unique_chars = unique_chars - Set([\"|\"])\n    unique_chars = unique_chars\
    \ - Set([\"<\"])\n    unique_chars = unique_chars - Set([\">\"])\n    unique_chars\
    \ = unique_chars - Set([\"=\"])\n    unique_chars = unique_chars - Set([\"+\"\
    ])\n    unique_chars = unique_chars - Set([\"*\"])\n    unique_chars = unique_chars\
    \ - Set([\"(\"])\n    unique_chars = unique_chars - Set([\")\"])\n    unique_chars\
    \ = unique_chars - Set([\"%\"])\n    unique_chars = unique_chars - Set([\"$\"\
    ])\n    unique_chars = unique_chars - Set([\"@\"])\n    unique_chars = unique_chars\
    \ - Set([\"!\"])\n    unique_chars = unique_chars - Set([\"=\"])\n    unique_chars\
    \ = unique_chars - Set([\"%\"])\n    unique_chars = unique_chars - Set([\"$\"\
    ])\n    unique_chars = unique_chars - Set([\"@\"])\n    unique_chars = unique_chars\
    \ - Set([\"!\"])\n    unique_chars = unique_chars - Set([\"=\"])\n    unique_chars\
    \ = unique_chars - Set([\"%\"])\n    unique_chars = unique_chars - Set([\"$\"\
    ])\n    unique_chars = unique_chars - Set([\"@\"])\n    unique_chars = unique_chars\
    \ - Set([\"!\"])\n    unique_chars = unique_chars - Set([\"=\"])\n    unique_chars\
    \ = unique_chars - Set([\"%\"])\n    unique_chars = unique_chars - Set([\"$\"\
    ])\n    unique_chars = unique_chars - Set([\"@\"])\n    unique_chars = unique_chars\
    \ - Set([\"!\"])\n    unique_chars = unique_chars - Set([\"=\"])\n    unique_chars\
    \ = unique_chars - Set([\"%\"])\n    unique_chars = unique_chars - Set([\"", " \
    \   word_counts = Dict{String, Int}()\n    for word in words\n        word_counts[word]\
    \ = get(word_counts, word, 0) + 1\n    end\n    word_counts = sort(word_counts)\n\
    \    word_counts[word_counts[end][1]][1]\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise\nWrite a function\
    \ that accepts a vector of strings and returns the word with maximum number\n\
    \    of unique characters. If multiple strings have maximum number of unique\n\
    \    characters, return the one which comes first in lexicographical order.",
  "    unique_chars = Set{Char}(\"\")\n    for word in words \n        unique_chars\
    \ |= Set(word)\n    end\n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars\
    \ = unique_chars - Set(\"z\")\n    unique_chars = unique_chars - Set(\"A\")\n\
    \    unique_chars = unique_chars - Set(\"Z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\".\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"_\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    ", "    unique_chars = Set()\n\
    \    unique_chars_count = 0\n    for word in words \n        for char in word\n\
    \            unique_chars << char\n            unique_chars_count += 1\n     \
    \       if unique_chars_count > unique_chars_max\n                unique_chars_max\
    \ = unique_chars_count\n                unique_chars_word = word\n           \
    \ end\n        end\n    end\n    return unique_chars_word\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that accepts a vector of strings and a vector of\
    \ integers. \n    The vector contains different words. Return the word with maximum\
    \ number\n    of unique characters. If multiple strings have maximum number of\
    \ unique\n    characters, return the one which comes first in lexicographical\
    \ order.", "    unique_chars = Set{String}()\n    for word in words \n       \
    \ for char in word\n            unique_chars.add(char)\n            unique_chars.discard(char)\n\
    \            if unique_chars.size == word.length\n                return word\n\
    \            unique_chars.clear()\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that accepts a vector of strings and a vector of integers. \n\
    \    The vector contains different words. Return the word with maximum number\n\
    \    of unique characters. If multiple strings have maximum number of unique\n\
    \    characters, return the one which comes first in lexicographical order."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
