name: HumanEval_158_find_max
language: jl
prompt: "\"\"\"Write a function that accepts a vector of strings.\n    The vector\
  \ contains different words. Return the word with maximum number\n    of unique characters.\
  \ If multiple strings have maximum number of unique\n    characters, return the\
  \ one which comes first in lexicographical order.\n\n    >>> find_max([\"name\"\
  , \"of\", \"string\"])\n    \"string\"\n    >>> find_max([\"name\", \"enam\", \"\
  game\"])\n    \"enam\"\n    >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n    \"\
  aaaaaaa\"\n    \"\"\"\nfunction find_max(words::Vector{String})::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = find_max;\n\t@test(candidate([\"\
  name\", \"of\", \"string\"]) == \"string\")\n\t@test(candidate([\"name\", \"enam\"\
  , \"game\"]) == \"enam\")\n\t@test(candidate([\"aaaaaaa\", \"bb\", \"cc\"]) == \"\
  aaaaaaa\")\n\t@test(candidate([\"abc\", \"cba\"]) == \"abc\")\n\t@test(candidate([\"\
  play\", \"this\", \"game\", \"of\", \"footbott\"]) == \"footbott\")\n\t@test(candidate([\"\
  we\", \"are\", \"gonna\", \"rock\"]) == \"gonna\")\n\t@test(candidate([\"we\", \"\
  are\", \"a\", \"mad\", \"nation\"]) == \"nation\")\n\t@test(candidate([\"this\"\
  , \"is\", \"a\", \"prrk\"]) == \"this\")\n\t@test(candidate([\"b\"]) == \"b\")\n\
  \t@test(candidate([\"play\", \"play\", \"play\"]) == \"play\")\nend\n"
completions: ["    unique_chars = Set{String}()\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_chars = unique_chars.union(words)\n\
    \    unique_chars = unique_chars.union(words)\n    unique_", "    unique_chars\
    \ = Set()\n    for word in words \n        unique_chars = unique_chars + Set(word)\n\
    \    end\n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars = unique_chars\
    \ - Set(\"z\")\n    unique_chars = unique_chars - Set(\"A\")\n    unique_chars\
    \ = unique_chars - Set(\"Z\")\n    unique_chars = unique_chars - Set(\"0\")\n\
    \    unique_chars = unique_chars - Set(\"9\")\n    unique_chars = unique_chars\
    \ - Set(\"_\")\n    unique_chars = unique_chars - Set(\"$\")\n    unique_chars\
    \ = unique_chars - Set(\"%\")\n    unique_chars = unique_chars - Set(\"&\")\n\
    \    unique_chars = unique_chars - Set(\"*\")\n    unique_chars = unique_chars\
    \ - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n    unique_chars\
    \ = unique_chars - Set(\"+\")\n    unique_chars = unique_chars - Set(\",\")\n\
    \    unique_chars = unique_chars - Set(\".\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\"/\")\n    unique_chars = unique_chars - Set(\"[\")\n\
    \    unique_chars = unique_chars - Set(\"]\")\n    unique_chars = unique_chars\
    \ - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n    unique_chars\
    \ = unique_chars - Set(\"^\")\n    unique_chars = unique_chars - Set(\"~\")\n\
    \    unique_chars = unique_chars - Set(\"|\")\n    unique_chars = unique_chars\
    \ - Set(\"~\")\n    unique_chars = unique_chars - Set(\"~\")\n    unique_chars\
    \ = unique_chars - Set(\"~\")\n    unique_chars = unique_chars - Set(\"~\")\n\
    \    unique_chars = unique_chars - Set(\"~\")\n    unique_chars = unique_chars\
    \ - Set(\"~\")\n    unique_chars = unique_chars - Set(\"~\")\n    unique_chars\
    \ = unique_chars - Set(\"~\")\n    unique_chars = unique_chars - Set(\"~\")\n\
    \    unique_chars = unique_chars - Set(\"~\")\n    unique_chars = unique_chars\
    \ - Set(\"~\")\n    unique_chars = unique_chars - Set(\"~\")\n    unique_chars\
    \ = unique_chars - Set(\"~\")\n    unique_chars = unique_chars - Set(\"~\")\n\
    \    unique_chars = unique_chars - Set(\"~\")\n    unique_chars = unique_chars\
    \ - Set(\"", "    unique_chars = Set()\n    unique_chars_count = 0\n    \n   \
    \ for word in words\n        for char in word\n            unique_chars.add(char)\n\
    \            unique_chars_count += 1\n    end\n    \n    if unique_chars_count\
    \ > unique_chars_count\n        return words[1]\n    else\n        return words[0]\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>\nfind_max([\"aaaaaaa\", \"bb\"\
    , \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a vector\
    \ of strings and a vector of integers. Return the string with maximum number of\n\
    unique characters. If multiple strings have maximum number of unique characters,\
    \ return the one which comes first in lexicographical order.", "    unique_chars\
    \ = Set{String}()\n    unique_chars.update!(words)\n    unique_chars.sort!()\n\
    \    unique_chars.reverse!()\n    unique_chars.last\nend", "    unique_chars =\
    \ Set{String}()\n    for word in words\n        unique_chars = unique_chars +\
    \ Set(word)\n    end\n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars\
    \ = unique_chars - Set(\"z\")\n    unique_chars = unique_chars - Set(\"A\")\n\
    \    unique_chars = unique_chars - Set(\"Z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"$\")\n    unique_chars = unique_chars - Set(\"%\")\n\
    \    unique_chars = unique_chars - Set(\"^\")\n    unique_chars = unique_chars\
    \ - Set(\"&\")\n    unique_chars = unique_chars - Set(\"*\")\n    unique_chars\
    \ = unique_chars - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n\
    \    unique_chars = unique_chars - Set(\"+\")\n    unique_chars = unique_chars\
    \ - Set(\",\")\n    unique_chars = unique_chars - Set(\".\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\";\")\n\
    \    unique_chars = unique_chars - Set(\"<\")\n    unique_chars = unique_chars\
    \ - Set(\"<\")\n    unique_chars = unique_chars - Set(\"=\")\n    unique_chars\
    \ = unique_chars - Set(\">\")\n    unique_chars = unique_chars - Set(\"?\")\n\
    \    unique_chars = unique_chars - Set(\"!\")\n    unique_chars = unique_chars\
    \ - Set(\"@\")\n    unique_chars = unique_chars - Set(\"[\")\n    unique_chars\
    \ = unique_chars - Set(\"]\")\n    unique_chars = unique_chars - Set(\"{\")\n\
    \    unique_chars = unique_chars - Set(\"}\")\n    unique_chars = unique_chars\
    \ - Set(\"|\")\n    unique_chars = unique_chars - Set(\"~\")\n    unique_chars\
    \ = unique_chars - Set(\"`\")\n    unique_chars = unique_chars - Set(\"~\")\n\
    \    unique_chars = unique_chars - Set(\"`\")\n    unique_chars = unique_chars\
    \ - Set(\"`\")\n    unique_chars = unique_chars - Set(\"`\")\n    unique_chars\
    \ = unique_chars - Set(\"`\")\n    unique_chars = unique_chars - Set(\"`\")\n\
    \    unique_chars = unique_chars - Set(\"`\")\n    unique_chars = unique_chars\
    \ - Set(\"`\")\n    unique_chars = unique_chars - Set(\"`\")\n    unique_chars\
    \ = unique_chars - Set(\"`\")\n    unique_chars = unique_chars - Set(\"", "  \
    \  \n    unique_chars = Set{String}()\n    \n    for word in words \n        for\
    \ char in word\n            unique_chars.add(char)\n    end\n    \n    unique_chars\
    \ = unique_chars.toSet()\n    \n    unique_chars = unique_chars.sort\n    \n \
    \   if length(unique_chars) > length(words)\n        return words[end]\n    else\n\
    \        return words[end]\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that accepts a vector of strings and returns a vector of strings. \n\
    The vector contains different words. \nThe function should return the same vector\
    \ but with each word capitalized.", "    unique_chars = Set()\n    unique_chars\
    \ = unique_chars.union(words)\n    unique_chars = unique_chars.union(words[1])\n\
    \    unique_chars = unique_chars.union(words[2])\n    unique_chars = unique_chars.union(words[3])\n\
    \    unique_chars = unique_chars.union(words[4])\n    unique_chars = unique_chars.union(words[5])\n\
    \    unique_chars = unique_chars.union(words[6])\n    unique_chars = unique_chars.union(words[7])\n\
    \    unique_chars = unique_chars.union(words[8])\n    unique_chars = unique_chars.union(words[9])\n\
    \    unique_chars = unique_chars.union(words[10])\n    unique_chars = unique_chars.union(words[11])\n\
    \    unique_chars = unique_chars.union(words[12])\n    unique_chars = unique_chars.union(words[13])\n\
    \    unique_chars = unique_chars.union(words[14])\n    unique_chars = unique_chars.union(words[15])\n\
    \    unique_chars = unique_chars.union(words[16])\n    unique_chars = unique_chars.union(words[17])\n\
    \    unique_chars = unique_chars.union(words[18])\n    unique_chars = unique_chars.union(words[19])\n\
    \    unique_chars = unique_chars.union(words[20])\n    unique_chars = unique_chars.union(words[21])\n\
    \    unique_chars = unique_chars.union(words[22])\n    unique_chars = unique_chars.union(words[23])\n\
    \    unique_chars = unique_chars.union(words[24])\n    unique_chars = unique_chars.union(words[25])\n\
    \    unique_chars = unique_chars.union(words[26])\n    unique_chars = unique_chars.union(words[27])\n\
    \    unique_chars = unique_chars.union(words[28])\n    unique_chars = unique_chars.union(words[29])\n\
    \    unique_chars = unique_chars.union(words[30])\n    unique_chars = unique_chars.union(words[31])\n\
    \    unique_chars = unique_chars.union(words[32])\n    unique_chars = unique_chars.union(words[33])\n\
    \    unique_chars = unique_chars.union(words[34])\n    unique_chars = unique_chars.union(words[35])\n\
    \    unique_chars = unique_chars.union(words[36])\n    unique_chars = unique_chars.union(words[37])\n\
    \    unique_chars = unique_chars.union(words[38])\n    unique_chars = unique_chars.union(words[39])",
  "    unique_chars = Set{Char}(\"\")\n    unique_chars = unique_chars | Set{Char}(words[1])\n\
    \    for word in words[2:end]\n        unique_chars = unique_chars | Set{Char}(word)\n\
    \    end\n    unique_chars = unique_chars - Set{Char}(\"\")\n    return words[end][end]\
    \ if (end-1) == length(words) && length(unique_chars) == 1 \n    \n    return\
    \ words[end][end] if length(unique_chars) == 1 \n    \n    return words[end][end]\
    \ if length(unique_chars) > 1 \n    \n    return words[end][end] if length(unique_chars)\
    \ == 1 \n    \n    return words[end][end] if length(unique_chars) > 1 \n    \n\
    \    return words[end][end] if length(unique_chars) == 1 \n    \n    return words[end][end]\
    \ if length(unique_chars) > 1 \n    \n    return words[end][end] if length(unique_chars)\
    \ == 1 \n    \n    return words[end][end] if length(unique_chars) > 1 \n    \n\
    \    return words[end][end] if length(unique_chars) == 1 \n    \n    return words[end][end]\
    \ if length(unique_chars) > 1 \n    \n    return words[end][end] if length(unique_chars)\
    \ == 1 \n    \n    return words[end][end] if length(unique_chars) > 1 \n    \n\
    \    return words[end][end] if length(unique_chars) == 1 \n    \n    return words[end][end]\
    \ if length(unique_chars) > 1 \n    \n    return words[end][end] if length(unique_chars)\
    \ == 1 \n    \n    return words[end][end] if length(unique_chars) > 1 \n    \n\
    \    return words[end][end] if length(unique_chars) == 1 \n    \n    return words[end][end]\
    \ if length(unique_chars) > 1 \n    \n    return words[end][end] if length(unique_chars)\
    \ == 1 \n    \n    return words[end][end] if length(unique_chars) > 1 \n    \n\
    \    return words[end][end] if length(unique_chars) == 1 \n    \n    return words[end][end]\
    \ if length(unique_chars) > 1 \n    \n    return words[end][end] if length(unique_chars)\
    \ == 1 \n    \n    return words[end][end] if length(unique_chars) > 1 \n    \n\
    \    return words[end][end] if length(unique_chars) == 1 \n    \n    return words[end][end]\
    \ if length(unique_chars) > 1 \n    \n    return words[end][end] if length(unique_chars)\
    \ == 1 \n    \n    return words[end][end] if length(unique_chars) > 1 \n    \n\
    \    return words[end][end] if length(unique_char", "    word_counts = Dict{String,\
    \ Int}()\n    for word in words \n        word_counts[word] = get(word_counts,\
    \ word, 0) + 1\n    end\n    \n    word_counts = sort(word_counts)\n    \n   \
    \ word_counts[word_counts[length(word_counts)]]\nend\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"of\", \"string\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"name\", \"enam\", \"game\"])\n</cell>\n<code language=julia-1.5>\n\
    find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that accepts a vector of strings and a vector of integers. \n    The\
    \ vector contains different words. Return the word with maximum number\n    of\
    \ unique characters. If multiple strings have maximum number of unique\n    characters,\
    \ return the one which comes first in lexicographical order.", "    unique_chars\
    \ = Set{Char}(\"\")\n    for word in words \n        for char in word\n      \
    \      unique_chars = unique_chars + char\n    end\n    unique_chars = unique_chars\
    \ - Set{Char}(\"a\")\n    unique_chars = unique_chars - Set{Char}(\"z\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"A\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"Z\")\n    unique_chars = unique_chars - Set{Char}(\"0\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"_\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"$\")\n    unique_chars = unique_chars - Set{Char}(\".\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\",\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\":\")\n    unique_chars = unique_chars - Set{Char}(\";\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"(\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\")\")\n    unique_chars = unique_chars - Set{Char}(\"[\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"]\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"{\")\n    unique_chars = unique_chars - Set{Char}(\"}\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\":\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\";\")\n    unique_chars = unique_chars - Set{Char}(\"(\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\")\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"[\")\n    unique_chars = unique_chars - Set{Char}(\"]\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"{\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"}\")\n    unique_chars = unique_chars - Set{Char}(\":\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\";\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"(\")\n    unique_chars = unique_chars - Set{Char}(\")\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"[\")\n    unique_chars = unique_chars\
    \ - Set{Char}(\"]\")\n    unique_chars = unique_chars - Set{Char}(\"{\")\n   \
    \ unique_chars = unique_chars - Set{Char}(\"}\")\n    unique_chars = unique_",
  "    unique_chars = Set()\n    for word in words\n        for char in word\n   \
    \         unique_chars.add(char)\n    end\n    unique_chars = unique_chars - Set(\"\
    a\")\n    unique_chars = unique_chars - Set(\"z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"9\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"a\")\n\
    \    unique_chars = unique_chars - Set(\"z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"9\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"a\")\n\
    \    unique_chars = unique_chars - Set(\"z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"9\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"a\")\n\
    \    unique_chars = unique_chars - Set(\"z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"9\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"a\")\n\
    \    unique_chars = unique_chars - Set(\"z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"9\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"a\")\n\
    \    unique_chars = unique_chars - Set(\"z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"9\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"a\")\n\
    \    unique_chars = unique_chars - Set(\"z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"9\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"a\")\n\
    \    unique_chars = unique_chars - Set(\"z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")\n    unique_chars = unique_chars - Set(\"9\")\n    unique_chars\
    \ = unique_chars - Set(\"_\")\n    unique_chars = unique_chars - Set(\"a\")\n\
    \    unique_chars = unique_chars - Set(\"z\")\n    unique_chars = unique_chars\
    \ - Set(\"0\")", "    unique_chars = Set{Char}(\"\")\n    unique_chars.update(\"\
    a\")\n    unique_chars.update(\"b\")\n    unique_chars.update(\"c\")\n    unique_chars.update(\"\
    d\")\n    unique_chars.update(\"e\")\n    unique_chars.update(\"f\")\n    unique_chars.update(\"\
    g\")\n    unique_chars.update(\"h\")\n    unique_chars.update(\"i\")\n    unique_chars.update(\"\
    j\")\n    unique_chars.update(\"k\")\n    unique_chars.update(\"l\")\n    unique_chars.update(\"\
    m\")\n    unique_chars.update(\"n\")\n    unique_chars.update(\"o\")\n    unique_chars.update(\"\
    p\")\n    unique_chars.update(\"q\")\n    unique_chars.update(\"r\")\n    unique_chars.update(\"\
    s\")\n    unique_chars.update(\"t\")\n    unique_chars.update(\"u\")\n    unique_chars.update(\"\
    v\")\n    unique_chars.update(\"w\")\n    unique_chars.update(\"x\")\n    unique_chars.update(\"\
    y\")\n    unique_chars.update(\"z\")\n    unique_chars.update(\"A\")\n    unique_chars.update(\"\
    B\")\n    unique_chars.update(\"C\")\n    unique_chars.update(\"D\")\n    unique_chars.update(\"\
    E\")\n    unique_chars.update(\"F\")\n    unique_chars.update(\"G\")\n    unique_chars.update(\"\
    H\")\n    unique_chars.update(\"I\")\n    unique_chars.update(\"J\")\n    unique_chars.update(\"\
    K\")\n    unique_chars.update(\"L\")\n    unique_chars.update(\"M\")\n    unique_chars.update(\"\
    N\")\n    unique_chars.update(\"O\")\n    unique_chars.update(\"P\")\n    unique_chars.update(\"\
    Q\")\n    unique_chars.update(\"R\")\n    unique_chars.update(\"S\")\n    unique_chars.update(\"\
    T\")\n    unique_chars.update(\"U\")\n    unique_chars.update(\"V\")\n    unique_chars.update(\"\
    W\")\n    unique_chars.update(\"X\")\n    unique_chars.update(\"Y\")\n    unique_chars.update(\"\
    Z\")\n    unique_chars.update(\"a\")\n    unique_chars.update(\"b\")\n    unique_chars.update(\"\
    c\")\n    unique_chars.update(\"d\")\n    unique_chars.update(\"e\")", "    unique_chars\
    \ = Set{Char}(\"\")\n    for word in words \n        for char in word\n      \
    \      unique_chars.add(char)\n    end\n    unique_chars = unique_chars - Set{Char}(\"\
    \")\n    unique_chars = unique_chars.sorted()\n    unique_chars = unique_chars[end]\n\
    \    return unique_chars\nend\n</cell>\n<code language=julia-1.5>\nfind_max([\"\
    aaaaaaa\", \"bb\", \"cc\"])\n</cell>\n<text>\nExercise\nWrite a function that\
    \ accepts a vector of strings and returns the word with maximum number\nof unique\
    \ characters. If multiple strings have maximum number of unique\ncharacters, return\
    \ the one which comes first in lexicographical order.", "    unique_chars = Set{String}()\n\
    \    unique_chars.update([word for word in words])\n    unique_chars.update([word[::-1]\
    \ for word in words])\n    unique_chars.update([word[::-1] for word in words])\n\
    \    unique_chars.update([word[::-1] for word in words])\n    unique_chars.update([word[::-1]\
    \ for word in words])\n    unique_chars.update([word[::-1] for word in words])\n\
    \    unique_chars.update([word[::-1] for word in words])\n    unique_chars.update([word[::-1]\
    \ for word in words])\n    unique_chars.update([word[::-1] for word in words])\n\
    \    unique_chars.update([word[::-1] for word in words])\n    unique_chars.update([word[::-1]\
    \ for word in words])\n    unique_chars.update([word[::-1] for word in words])\n\
    \    unique_chars.update([word[::-1] for word in words])\n    unique_chars.update([word[::-1]\
    \ for word in words])\n    unique_chars.update([word[::-1] for word in words])\n\
    \    unique_chars.update([word[::-1] for word in words])\n    unique_chars.update([word[::-1]\
    \ for word in words])\n    unique_chars.update([word[::-1] for word in words])\n\
    \    unique_chars.update([word[::-1] for word in words])\n    unique_chars.update([word[::-1]\
    \ for word in words])\n    unique_chars.update([word[::-1] for word in words])\n\
    \    unique_chars.update([word[::-1] for word in words])\n    unique_chars.update([word[::-1]\
    \ for word in words])\n    unique_chars.update([word[::-1] for word in words])\n\
    \    unique_chars.update([word[::-1] for word in words])\n    unique_chars.update([word[::-1]\
    \ for word in words])\n    unique_chars.update([word[::-1] for word in words])\n\
    \    unique_chars.update([word[::-1] for word in words])\n    unique_chars.update([word[::-1]\
    \ for word in words])\n    unique_chars.update([word[::-1] for word in words])\n\
    \    unique_chars.update([word[::-1] for word in words])\n    unique_chars.update([word[::-1]\
    \ for word in words])\n    unique_chars.update([word[::-1] for word in words])\n\
    \    unique_chars.update([word[::-1] for word in words])\n    unique_chars.update([word[::-1]\
    \ for word in words])\n    unique_chars.update([word[::-1] for word in words])\n\
    \    unique_chars.update([word[::-1] for word in words])\n    unique_chars.update([word[::-1]\
    \ for word in words])\n    unique_chars.update([word[::-1] for ", "    \n    unique_chars\
    \ = Set()\n    \n    for word in words\n        for char in word\n           \
    \ unique_chars.add(char)\n    end\n    \n    unique_chars = unique_chars - Set(\"\
    a\")\n    \n    if length(unique_chars) == 0\n        return words[1]\n    else\n\
    \        unique_chars = unique_chars - Set(\"a\")\n        \n        if length(unique_chars)\
    \ == 0\n            return words[2]\n        else\n            unique_chars =\
    \ unique_chars - Set(\"a\")\n            \n            if length(unique_chars)\
    \ == 0\n                return words[3]\n            else\n                unique_chars\
    \ = unique_chars - Set(\"a\")\n                \n                if length(unique_chars)\
    \ == 0\n                    return words[4]\n                else\n          \
    \          unique_chars = unique_chars - Set(\"a\")\n                    \n  \
    \                  if length(unique_chars) == 0\n                        return\
    \ words[5]\n                    else\n                        unique_chars = unique_chars\
    \ - Set(\"a\")\n                        \n                        if length(unique_chars)\
    \ == 0\n                            return words[6]\n                        else\n\
    \                            unique_chars = unique_chars - Set(\"a\")\n      \
    \                      \n                            if length(unique_chars) ==\
    \ 0\n                                return words[7]\n                       \
    \     else\n                                unique_chars = unique_chars - Set(\"\
    a\")\n                                \n                                if length(unique_chars)\
    \ == 0\n                                    return words[8]\n                \
    \                else\n                                    unique_chars = unique_chars\
    \ - Set(\"a\")\n                                    \n                       \
    \             if length(unique_chars) == 0\n                                 \
    \       return words[9]\n                                    else\n          \
    \                              unique_chars = unique_chars - Set(\"a\")\n    \
    \                                    \n                                      \
    \  if length(unique_chars) == 0\n                                            return\
    \ words[10]\n                                        else\n                  \
    \                          unique_chars = unique_chars - Set(\"a\")\n        \
    \                                    \n                                      \
    \      if length(unique_chars) == 0\n                                        \
    \        return words[11]\n                                            else\n\
    \                                                unique_chars = unique_chars -\
    \ Set(\"a\")\n                                                \n             \
    \                                   if length(unique_chars) == 0\n           \
    \                                         return words[12]\n                 \
    \                               else\n                                       \
    \             unique_chars = unique_chars - Set(\"a\")\n                     \
    \                               \n                                           \
    \         if length(unique_chars) == 0\n                                     \
    \                   return words[13]\n                                       \
    \             else\n                                                        unique_chars\
    \ = unique_chars - Set(\"a\")\n                                              \
    \          \n                                                        if length(unique_chars)\
    \ == 0\n                                                            return words[14]\n\
    \                                                        else\n              \
    \                                              unique_chars = unique_chars - Set(\"\
    a\")\n                                                            \n         \
    \                                                   if length(unique_chars) ==\
    \ 0\n                                                                return words[15]\n\
    \                                                            else\n          \
    \                                                      unique_chars = unique_chars\
    \ - Set(\"a\")\n                                                             \
    \   \n                                                                if length(unique_chars)\
    \ == 0\n                                                                    return\
    \ words[16]\n                                                                else\n\
    \                                                                    unique_chars\
    \ = unique_chars - Set(\"a\")\n                                              \
    \                      \n", "    unique_chars = Set{String}()\n    for word in\
    \ words\n        for char in word\n            unique_chars.add(char)\n    end\n\
    \    unique_chars = unique_chars - Set(\"a\")\n    unique_chars = unique_chars\
    \ - Set(\"A\")\n    unique_chars = unique_chars - Set(\"0\")\n    unique_chars\
    \ = unique_chars - Set(\"1\")\n    unique_chars = unique_chars - Set(\"2\")\n\
    \    unique_chars = unique_chars - Set(\"3\")\n    unique_chars = unique_chars\
    \ - Set(\"4\")\n    unique_chars = unique_chars - Set(\"5\")\n    unique_chars\
    \ = unique_chars - Set(\"6\")\n    unique_chars = unique_chars - Set(\"7\")\n\
    \    unique_chars = unique_chars - Set(\"8\")\n    unique_chars = unique_chars\
    \ - Set(\"9\")\n    unique_chars = unique_chars - Set(\"+\")\n    unique_chars\
    \ = unique_chars - Set(\"-\")\n    unique_chars = unique_chars - Set(\".\")\n\
    \    unique_chars = unique_chars - Set(\"_\")\n    unique_chars = unique_chars\
    \ - Set(\"$\")\n    unique_chars = unique_chars - Set(\"%\")\n    unique_chars\
    \ = unique_chars - Set(\"&\")\n    unique_chars = unique_chars - Set(\"(\")\n\
    \    unique_chars = unique_chars - Set(\")\")\n    unique_chars = unique_chars\
    \ - Set(\"[\")\n    unique_chars = unique_chars - Set(\"]\")\n    unique_chars\
    \ = unique_chars - Set(\"{\")\n    unique_chars = unique_chars - Set(\"}\")\n\
    \    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_chars = unique_chars - Set(\",\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\":\")\n\
    \    unique_chars = unique_chars - Set(\",\")\n    unique_chars = unique_chars\
    \ - Set(\";\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\",\")\n    unique_chars = unique_chars - Set(\";\")\n\
    \    unique_chars = unique_chars - Set(\":\")\n    unique_chars = unique_chars\
    \ - Set(\",\")\n    unique_chars = unique_chars - Set(\";\")\n    unique_chars\
    \ = unique_chars - Set(\":\")\n    unique_chars = unique_chars - Set(\",\")\n\
    \    unique_chars = unique_chars - Set(\";\")\n    unique_chars = unique_chars\
    \ - Set(\":\")\n    unique_char", "    unique_chars = Set()\n    unique_chars_count\
    \ = Dict()\n    for word in words\n        unique_chars = unique_chars + Set(word)\n\
    \        unique_chars_count[word] = length(unique_chars)\n    end\n    \n    unique_chars_sorted\
    \ = sort(unique_chars_count)\n    \n    unique_chars_sorted[end]\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that accepts a vector of strings and a vector\
    \ of integers. \n    The vector contains different words. Return the word with\
    \ maximum number\n    of unique characters. If multiple strings have maximum number\
    \ of unique\n    characters, return the one which comes first in lexicographical\
    \ order.", "    word_counts = Dict{String, Int}()\n    for word in words\n   \
    \     if word in word_counts\n            word_counts[word] += 1\n        else\n\
    \            word_counts[word] = 1\n    end\n    \n    sorted_word_counts = sort(collect(values(word_counts)),\
    \ by=length, rev=true)\n    \n    word_with_max_count = sorted_word_counts[1]\n\
    \    \n    for word in sorted_word_counts\n        if word_with_max_count < word_counts[word]\n\
    \            word_with_max_count = word_counts[word]\n        end\n    end\n \
    \   \n    return word_with_max_count\nend", "    unique_chars = Set{String}()\n\
    \    for w in words\n        for c in w\n            unique_chars.add(c)\n   \
    \ end\n    unique_chars = unique_chars - Set(\"a\")\n    unique_chars = unique_chars\
    \ - Set(\"A\")\n    unique_chars = unique_chars - Set(\"0\")\n    unique_chars\
    \ = unique_chars - Set(\"1\")\n    unique_chars = unique_chars - Set(\"2\")\n\
    \    unique_chars = unique_chars - Set(\"3\")\n    unique_chars = unique_chars\
    \ - Set(\"4\")\n    unique_chars = unique_chars - Set(\"5\")\n    unique_chars\
    \ = unique_chars - Set(\"6\")\n    unique_chars = unique_chars - Set(\"7\")\n\
    \    unique_chars = unique_chars - Set(\"8\")\n    unique_chars = unique_chars\
    \ - Set(\"9\")\n    unique_chars = unique_chars - Set(\"_\")\n    unique_chars\
    \ = unique_chars - Set(\"$\")\n    unique_chars = unique_chars - Set(\"%\")\n\
    \    unique_chars = unique_chars - Set(\"&\")\n    unique_chars = unique_chars\
    \ - Set(\"*\")\n    unique_chars = unique_chars - Set(\"(\")\n    unique_chars\
    \ = unique_chars - Set(\")\")\n    unique_chars = unique_chars - Set(\"+\")\n\
    \    unique_chars = unique_chars - Set(\",\")\n    unique_chars = unique_chars\
    \ - Set(\".\")\n    unique_chars = unique_chars - Set(\":\")\n    unique_chars\
    \ = unique_chars - Set(\";\")\n    unique_chars = unique_chars - Set(\"/\")\n\
    \    unique_chars = unique_chars - Set(\"<\")\n    unique_chars = unique_chars\
    \ - Set(\"<>\")\n    unique_chars = unique_chars - Set(\"=\")\n    unique_chars\
    \ = unique_chars - Set(\"+\")\n    unique_chars = unique_chars - Set(\"?\")\n\
    \    unique_chars = unique_chars - Set(\"!\")\n    unique_chars = unique_chars\
    \ - Set(\"~\")\n    unique_chars = unique_chars - Set(\"@\")\n    unique_chars\
    \ = unique_chars - Set(\"$\")\n    unique_chars = unique_chars - Set(\"%\")\n\
    \    unique_chars = unique_chars - Set(\"^\")\n    unique_chars = unique_chars\
    \ - Set(\"&\")\n    unique_chars = unique_chars - Set(\"*\")\n    unique_chars\
    \ = unique_chars - Set(\"(\")\n    unique_chars = unique_chars - Set(\")\")\n\
    \    unique_chars = unique_chars - Set(\"+\")\n    unique_chars = unique_chars\
    \ - Set(\",\")\n    unique_chars = unique_chars - ", "    unique_chars = Set{String}()\n\
    \    for word in words \n        for char in word\n            unique_chars.add(char)\n\
    \            if unique_chars.size > max_chars\n                max_chars = unique_chars.size\n\
    \            end\n        end\n    end\n    return words[words.index(max_chars)]\n\
    end\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"of\", \"string\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"name\", \"enam\", \"game\"\
    ])\n</cell>\n<code language=julia-1.5>\nfind_max([\"aaaaaaa\", \"bb\", \"cc\"\
    ])\n</cell>\n<text>\nExercise 2\nWrite a function that accepts a vector of strings\
    \ and returns a vector of booleans indicating whether each string contains only\
    \ alphabetic characters or not. Return this vector as a new vector."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
