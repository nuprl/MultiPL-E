language: jl
name: HumanEval_78_hex_key
results:
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   digits = num.digits\n    \n    primes = prime_digits(digits)\n    \n    prime_digits_count\
    \ = primes.count\n    \n    prime_digits_count_2 = prime_digits_count * prime_digits_count\n\
    \    \n    prime_digits_count_3 = prime_digits_count_2 * prime_digits_count\n\
    \    \n    prime_digits_count_4 = prime_digits_count_3 * prime_digits_count\n\
    \    \n    prime_digits_count_5 = prime_digits_count_4 * prime_digits_count\n\
    \    \n    prime_digits_count_6 = prime_digits_count_5 * prime_digits_count\n\
    \    \n    prime_digits_count_7 = prime_digits_count_6 * prime_digits_count\n\
    \    \n    prime_digits_count_8 = prime_digits_count_7 * prime_digits_count\n\
    \    \n    prime_digits_count_9 = prime_digits_count_8 * prime_digits_count\n\
    \    \n    prime_digits_count_10 = prime_digits_count_9 * prime_digits_count\n\
    \    \n    prime_digits_count_11 = prime_digits_count_10 * prime_digits_count\n\
    \    \n    prime_digits_count_12 = prime_digits_count_11 * prime_digits_count\n\
    \    \n    prime_digits_count_13 = prime_digits_count_12 * prime_digits_count\n\
    \    \n    prime_digits_count_14 = prime_digits_count_13 * prime_digits_count\n\
    \    \n    prime_digits_count_15 = prime_digits_count_14 * prime_digits_count\n\
    \    \n    prime_digits_count_16 = prime_digits_count_15 * prime_digits_count\n\
    \    \n    prime_digits_count_17 = prime_digits_count_16 * prime_digits_count\n\
    \    \n    prime_digits_count_18 = prime_digits_count_17 * prime_digits_count\n\
    \    \n    prime_digits_count_19 = prime_digits_count_18 * prime_digits_count\n\
    \    \n    prime_digits_count_20 = prime_digits_count_19 * prime_digits_count\n\
    \    \n    prime_digits_count_21 = prime_digits_count_20 * prime_digits_count\n\
    \    \n    prime_digits_count_22 = prime_digits_count_21 * prime_digits_count\n\
    \    \n    prime_digits_count_23 = prime_digits_count_22 * prime_digits_count\n\
    \    \n    prime_digit\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6qkbnpfe.jl:1\nin expression starting at /tmp/tmp6qkbnpfe.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    digits = num.chars\n    \n    primes\
    \ = primes_list(digits)\n    \n    prime_digits = primes.filter(|x| digits.contains(x))\n\
    \    \n    prime_digits_count = prime_digits.count()\n    \n    return prime_digits_count\n\
    end\n</cell>\n<code language=julia-1.1>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.1>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.1>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.1>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.1>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that receives a string and returns the number of characters that are\
    \ not letters.\nExamples:\n>>> not_letters(\"AB\")\n1\n>>> not_letters(\"1077E\"\
    )\n3\n>>> not_letters(\"ABED1A33\")\n4\n>>> not_letters(\"123456789ABCDEF0\")\n\
    6\n>>> not_letters(\"2020\")\n2\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwayrbgxb.jl:29\nin expression starting at\
    \ /tmp/tmpwayrbgxb.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   digits = num.digits\n    \n    primes = prime_digits(digits)\n    \n    prime_digits_count\
    \ = length(primes)\n    \n    prime_digits_count = prime_digits_count + 1\n  \
    \  \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphsrzpb6s.jl:1\nin expression starting at /tmp/tmphsrzpb6s.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = prime_numbers(num)\n    prime_digits\
    \ = primes.map(x -> digits(x))\n    prime_digits = prime_digits.filter(x -> x\
    \ != 0)\n    prime_digits = prime_digits.filter(x -> x != 1)\n    prime_digits\
    \ = prime_digits.filter(x -> x != 2)\n    prime_digits = prime_digits.filter(x\
    \ -> x != 3)\n    prime_digits = prime_digits.filter(x -> x != 4)\n    prime_digits\
    \ = prime_digits.filter(x -> x != 5)\n    prime_digits = prime_digits.filter(x\
    \ -> x != 6)\n    prime_digits = prime_digits.filter(x -> x != 7)\n    prime_digits\
    \ = prime_digits.filter(x -> x != 8)\n    prime_digits = prime_digits.filter(x\
    \ -> x != 9)\n    prime_digits = prime_digits.filter(x -> x != 10)\n    prime_digits\
    \ = prime_digits.filter(x -> x != 11)\n    prime_digits = prime_digits.filter(x\
    \ -> x != 12)\n    prime_digits = prime_digits.filter(x -> x != 13)\n    prime_digits\
    \ = prime_digits.filter(x -> x != 14)\n    prime_digits = prime_digits.filter(x\
    \ -> x != 15)\n    prime_digits = prime_digits.filter(x -> x != 16)\n    prime_digits\
    \ = prime_digits.filter(x -> x != 17)\n    prime_digits = prime_digits.filter(x\
    \ -> x != 18)\n    prime_digits = prime_digits.filter(x -> x != 19)\n    prime_digits\
    \ = prime_digits.filter(x -> x != 20)\n    prime_digits = prime_digits.filter(x\
    \ -> x != 21)\n    prime_digits = prime_digits.filter(x -> x != 22)\n    prime_digits\
    \ = prime_digits.filter(x -> x != 23)\n    prime_digits = prime_digits.filter(x\
    \ -> x != 24)\n    prime_digits = prime_digits.filter(x -> x != 25)\n    prime_digits\
    \ = prime_digits.filter(x -> x != 26)\n    prime_digits = prime_digits.filter(x\
    \ -> x != 27)\n    prime_digits = prime_digits.filter(x -> x != 28)\n    prime_digits\
    \ = prime_digits.filter(x -> x != 29)\n    prime_digits = prime_digits.filter(x\
    \ -> x != 30)\n    prime_digits = prime_digits.filter(x -> x != 31)\n\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphi8a7k0y.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphi8a7k0y.jl:1\n\
    in expression starting at /tmp/tmphi8a7k0y.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ primes_count = 0\n    \n    for prime in primes\n        \n        if num ==\
    \ prime\n            primes_count += 1\n        end\n    end\n    \n    return\
    \ primes_count\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmeignk6i.jl:38\nin expression starting at\
    \ /tmp/tmpmeignk6i.jl:38\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   digits = num.chars\n    \n    primes = prime_digits(digits)\n    \n    prime_digits_count\
    \ = length(primes)\n    \n    hex_count = 0\n    \n    for digit in digits\n \
    \       if digit in primes\n            hex_count += 1\n            \n    return\
    \ hex_count\nend\n</cell>\n<code language=julia-1.0>\nhex_key(\"AB\")\n</cell>\n\
    <code language=julia-1.0>\nhex_key(\"1077E\")\n</cell>\n<code language=julia-1.0>\n\
    hex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.0>\nhex_key(\"123456789ABCDEF0\"\
    )\n</cell>\n<code language=julia-1.0>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that receives a hexadecimal number as a string and counts\
    \ the number of hexadecimal \n    digits that are primes (prime number, or a prime,\
    \ is a natural number \n    greater than 1 that is not a product of two smaller\
    \ natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So\
    \ you have to determine a number of the following digits: 2, 3, 5, 7, \n    B\
    \ (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always\
    \ correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n\
    \    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>> hex_key(\"1077E\")\n \
    \   2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo26ajm43.jl:41\nin expression starting at\
    \ /tmp/tmpo26ajm43.jl:41\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    digits = num.chars\n    \n    primes\
    \ = prime_digits(digits)\n    \n    prime_digits_count = primes.count\n    \n\
    \    prime_digits_count_2 = prime_digits_count * prime_digits_count\n    \n  \
    \  prime_digits_count_3 = prime_digits_count_2 * prime_digits_count\n    \n  \
    \  prime_digits_count_4 = prime_digits_count_3 * prime_digits_count\n    \n  \
    \  prime_digits_count_5 = prime_digits_count_4 * prime_digits_count\n    \n  \
    \  prime_digits_count_6 = prime_digits_count_5 * prime_digits_count\n    \n  \
    \  prime_digits_count_7 = prime_digits_count_6 * prime_digits_count\n    \n  \
    \  prime_digits_count_8 = prime_digits_count_7 * prime_digits_count\n    \n  \
    \  prime_digits_count_9 = prime_digits_count_8 * prime_digits_count\n    \n  \
    \  prime_digits_count_10 = prime_digits_count_9 * prime_digits_count\n    \n \
    \   prime_digits_count_11 = prime_digits_count_10 * prime_digits_count\n    \n\
    \    prime_digits_count_12 = prime_digits_count_11 * prime_digits_count\n    \n\
    \    prime_digits_count_13 = prime_digits_count_12 * prime_digits_count\n    \n\
    \    prime_digits_count_14 = prime_digits_count_13 * prime_digits_count\n    \n\
    \    prime_digits_count_15 = prime_digits_count_14 * prime_digits_count\n    \n\
    \    prime_digits_count_16 = prime_digits_count_15 * prime_digits_count\n    \n\
    \    prime_digits_count_17 = prime_digits_count_16 * prime_digits_count\n    \n\
    \    prime_digits_count_18 = prime_digits_count_17 * prime_digits_count\n    \n\
    \    prime_digits_count_19 = prime_digits_count_18 * prime_digits_count\n    \n\
    \    prime_digits_count_20 = prime_digits_count_19 * prime_digits_count\n    \n\
    \    prime_digits_count_21 = prime_digits_count_20 * prime_digits_count\n    \n\
    \    prime_digits_count_22 = prime_digits_count_21 * prime_digits_count\n    \n\
    \    prime_digits_count_23 = prime_digits_count_22 * prime_digits_count\n    \n\
    \    prime_digits_count_24 = prime_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj02y0ll1.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj02y0ll1.jl:1\n\
    in expression starting at /tmp/tmpj02y0ll1.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ primes_count = primes.count{|x| num.chars.all{|c| c==x}}\n    \n    primes_count\
    \ += primes.count{|x| num.chars.all{|c| c==x.to_i(16)}}\n    \n    return primes_count\n\
    end\n</cell>\n<code language=julia-1.3>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.3>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.3>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.3>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.3>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that receives a hexadecimal number as a string and counts the number\
    \ of hexadecimal \n    digits that are primes (prime number, or a prime, is a\
    \ natural number \n    greater than 1 that is not a product of two smaller natural\
    \ numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C,\
    \ D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal\
    \ 11), D (=decimal 13).\n    Note: you may assume the input is always correct\
    \ or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n\
    \    >>> hex_key(\"AB\")\n    1\n    >>> hex_key(\"1077E\")\n    2\n    >>> hex_key(\"\
    ABED1A33\")\n    4\n    >>> hex_key(\"123456789ABCDEF0\")\n    6\n    >>> hex_key(\"\
    2020\")\n    2\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7tlx7alj.jl:27\nin expression starting at\
    \ /tmp/tmp7tlx7alj.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    num = num.upper()\n    count = 0\n    for\
    \ i in num:\n        if i == 'A' or i == 'B' or i == 'C' or i == 'D' or i == 'E'\
    \ or i == 'F':\n            count += 1\n    return count\n</code>\n<|/ a tags=primes,haskell\
    \ |>\n<| c |>\nThank you very much! I appreciate your help!\n<|/ c |>\n<| c |>\n\
    The `count` function can be written more concisely as `length . filter (== 'A'\
    \ || == 'B' || == 'C' || == 'D' || == 'E' || == 'F') . toUpper`.\n<|/ c |>\n<|\
    \ c |>\nThank you very much! I appreciate your help!\n<|/ c |>\n<| a tags=primes,haskell\
    \ |>\nHere's a solution using Data.List's filter and length functions:\n<code>\n\
    import Data.List\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeqb336s4.jl:27\nin expression starting at\
    \ /tmp/tmpeqb336s4.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ digits = num.chars\n    \n    prime_digits = primes[digits]\n    \n    prime_digits_count\
    \ = prime_digits.count\n    \n    prime_digits_count = prime_digits_count[digits]\n\
    \    \n    prime_digits_count = prime_digits_count[digits]\n    \n    prime_digits_count\
    \ = prime_digits_count[digits]\n    \n    prime_digits_count = prime_digits_count[digits]\n\
    \    \n    prime_digits_count = prime_digits_count[digits]\n    \n    prime_digits_count\
    \ = prime_digits_count[digits]\n    \n    prime_digits_count = prime_digits_count[digits]\n\
    \    \n    prime_digits_count = prime_digits_count[digits]\n    \n    prime_digits_count\
    \ = prime_digits_count[digits]\n    \n    prime_digits_count = prime_digits_count[digits]\n\
    \    \n    prime_digits_count = prime_digits_count[digits]\n    \n    prime_digits_count\
    \ = prime_digits_count[digits]\n    \n    prime_digits_count = prime_digits_count[digits]\n\
    \    \n    prime_digits_count = prime_digits_count[digits]\n    \n    prime_digits_count\
    \ = prime_digits_count[digits]\n    \n    prime_digits_count = prime_digits_count[digits]\n\
    \    \n    prime_digits_count = prime_digits_count[digits]\n    \n    prime_digits_count\
    \ = prime_digits_count[digits]\n    \n    prime_digits_count = prime_digits_count[digits]\n\
    \    \n    prime_digits_count = prime_digits_count[digits]\n    \n    prime_digits_count\
    \ = prime_digits_count[digits]\n    \n    prime_digits_count = prime_digits_count[digits]\n\
    \    \n    prime_digits_count = prime_digits_count[digits]\n    \n    prime_digits_count\
    \ = prime_digits_count[digits]\n    \n    prime_digits_count = prime_digits_count[digits]\n\
    \    \n    prime_digits_count = prime_digits_count[digits]\n    \n    prime_digits_count\
    \ = prime_digits_count[digits]\n    \n    prime_digits_count = prime_digits_count[digits]\n\
    \    \n    prime_digits_count = prime_digits_count[digits]\n    \n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6x3lz0m0.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6x3lz0m0.jl:1\n\
    in expression starting at /tmp/tmp6x3lz0m0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    digits = num.chars\n    \n    primes\
    \ = prime_digits(digits)\n    \n    prime_count = length(primes)\n    \n    prime_count_2\
    \ = prime_count + 1\n    \n    prime_count_3 = prime_count_2 + 1\n    \n    prime_count_4\
    \ = prime_count_3 + 1\n    \n    prime_count_5 = prime_count_4 + 1\n    \n   \
    \ prime_count_6 = prime_count_5 + 1\n    \n    prime_count_7 = prime_count_6 +\
    \ 1\n    \n    prime_count_8 = prime_count_7 + 1\n    \n    prime_count_9 = prime_count_8\
    \ + 1\n    \n    prime_count_10 = prime_count_9 + 1\n    \n    prime_count_11\
    \ = prime_count_10 + 1\n    \n    prime_count_12 = prime_count_11 + 1\n    \n\
    \    prime_count_13 = prime_count_12 + 1\n    \n    prime_count_14 = prime_count_13\
    \ + 1\n    \n    prime_count_15 = prime_count_14 + 1\n    \n    prime_count_16\
    \ = prime_count_15 + 1\n    \n    prime_count_17 = prime_count_16 + 1\n    \n\
    \    prime_count_18 = prime_count_17 + 1\n    \n    prime_count_19 = prime_count_18\
    \ + 1\n    \n    prime_count_20 = prime_count_19 + 1\n    \n    prime_count_21\
    \ = prime_count_20 + 1\n    \n    prime_count_22 = prime_count_21 + 1\n    \n\
    \    prime_count_23 = prime_count_22 + 1\n    \n    prime_count_24 = prime_count_23\
    \ + 1\n    \n    prime_count_25 = prime_count_24 + 1\n    \n    prime_count_26\
    \ = prime_count_25 + 1\n    \n    prime_count_27 = prime_count_26 + 1\n    \n\
    \    prime_count_28 = prime_count_27 + 1\n    \n    prime_count_29 = prime_count_28\
    \ + 1\n    \n    prime_count_30 = prime_count_29 + 1\n    \n    prime_count_31\
    \ = prime_count_30 + 1\n    \n    prime_count_32 = prime_count_31 + 1\n    \n\
    \    prime_count_33 = prime_count_32 + 1\n    \n    prime_count_34 = prime_count_33\
    \ + 1\n    \n    prime_count_35 = prime_count_34 + 1\n    \n    prime_count_36\
    \ = prime_count_35 + 1\n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpct4317in.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpct4317in.jl:1\n\
    in expression starting at /tmp/tmpct4317in.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ digits = num.chars\n    \n    prime_digits = primes.filter(x -> digits.contains(x))\n\
    \    \n    prime_digits_count = prime_digits.count()\n    \n    if prime_digits_count\
    \ > 0 \n        \n        prime_digits_count = prime_digits_count - 1\n      \
    \  \n        prime_digits_count = prime_digits_count + 1\n        \n        return\
    \ prime_digits_count\n    \n    else\n        \n        return 0\n    \nend\n\
    </cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0viypvlx.jl:46\nin expression starting at\
    \ /tmp/tmp0viypvlx.jl:46\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ digits = num.chars\n    \n    count = 0\n    \n    for digit in digits\n   \
    \     \n        if digit in primes\n            count += 1\n            \n   \
    \ return count\nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\"\
    )\n</cell>\n<code language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that receives a string and returns the number of characters\
    \ that are not letters (uppercase or lowercase).\nExamples:\n>>> not_letters(\"\
    abc def\")\n3\n>>> not_letters(\"abc def\")\n0\n>>> not_letters(\"abc def\")\n\
    1\n>>> not_letters(\"abc def\")\n2\n>>> not_letters(\"abc def\")\n3\n>>> not_letters(\"\
    abc def\")\n4\n>>> not_letters(\"abc def\")\n5\n>>> not_letters(\"abc def\")\n\
    6\n>>> not_letters(\"abc def\")\n7\n>>> not_letters(\"abc def\")\n8\n>>> not_letters(\"\
    abc def\")\n9\n>>> not_letters(\"abc def\")\n10\n>>> not_letters(\"abc def\")\n\
    11\n>>> not_letters(\"abc def\")\n12\n>>> not_letters(\"abc def\")\n13\n>>> not_letters(\"\
    abc def\")\n14\n>>> not_letters(\"abc def\")\n15\n>>> not_letters(\"abc def\"\
    )\n16\n>>> not_letters(\"abc def\")\n17\n>>> not_letters(\"abc def\")\n18\n>>>\
    \ not_letters(\"abc def\")\n19\n>>> not_letters(\"abc def\")\n20\n>>> not_letters(\"\
    abc def\")\n21\n>>> not_letters(\"abc def\")\n22\n>>> not_letters(\"abc def\"\
    )\n23\n>>> not_letters(\"abc def\")\n24\n>>> not_letters(\"abc def\")\n25\n>>>\
    \ not_letters(\"abc def\")\n26\n>>> not_letters(\"abc def\")\n27\n>>> not_letters(\"\
    abc def\")\n28\n>>> not_letters(\"abc def\")\n29\n>>> not_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp2h0i62b.jl:38\nin expression starting at\
    \ /tmp/tmpp2h0i62b.jl:38\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    hex_digits = num.chars\n    \n    hex_digits_len = len(hex_digits)\n\
    \    \n    prime_digits_len = len(prime_digits)\n    \n    prime_digits_count\
    \ = prime_digits_len\n    \n    prime_digits_count = prime_digits_count-1\n  \
    \  \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count\nusing Test\n\n@testset begin\n\
    \ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn2brefna.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn2brefna.jl:1\n\
    in expression starting at /tmp/tmpn2brefna.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   digits = num.chars\n    \n    primes = primes_list(digits)\n    \n    primes_count\
    \ = 0\n    for prime in primes\n        if primes_count < prime\n            primes_count\
    \ += 1\n            \n    primes_count += primes_count(digits)\n    \n    return\
    \ primes_count\nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\"\
    )\n</cell>\n<code language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that receives a hexadecimal number as a string and counts\
    \ the number of hexadecimal digits that are primes (prime number, or a prime,\
    \ is a natural number greater than 1 that is not a product of two smaller natural\
    \ numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D,\
    \ E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\n\
    Notes: you may assume the input is always correct or empty string, \nand symbols\
    \ A,B,C,D,E,F are always uppercase.\nExamples:\nhex_key(\"AB\")\n1\nhex_key(\"\
    1077E\")\n2\nhex_key(\"ABED1A33\")\n4\nhex_key(\"123456789ABCDEF0\")\n6\nhex_key(\"\
    2020\")\n2\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu1zh87og.jl:40\nin expression starting at\
    \ /tmp/tmpu1zh87og.jl:40\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    local digits = num\n    local primes\
    \ = [1]\n    local prime_digits = [1]\n    local prime_digit_count = 0\n    local\
    \ prime_digit_count_max = 2\n    local prime_digit_count_min = prime_digit_count_max\n\
    \    local prime_digit_count_max = prime_digit_count_max\n    local prime_digit_count_min\
    \ = prime_digit_count_max\n    local prime_digit_count_max = prime_digit_count_max\n\
    \    local prime_digit_count_min = prime_digit_count_max\n    local prime_digit_count_max\
    \ = prime_digit_count_max\n    local prime_digit_count_min = prime_digit_count_max\n\
    \    local prime_digit_count_max = prime_digit_count_max\n    local prime_digit_count_min\
    \ = prime_digit_count_max\n    local prime_digit_count_max = prime_digit_count_max\n\
    \    local prime_digit_count_min = prime_digit_count_max\n    local prime_digit_count_max\
    \ = prime_digit_count_max\n    local prime_digit_count_min = prime_digit_count_max\n\
    \    local prime_digit_count_max = prime_digit_count_max\n    local prime_digit_count_min\
    \ = prime_digit_count_max\n    local prime_digit_count_max = prime_digit_count_max\n\
    \    local prime_digit_count_min = prime_digit_count_max\n    local prime_digit_count_max\
    \ = prime_digit_count_max\n    local prime_digit_count_min = prime_digit_count_max\n\
    \    local prime_digit_count_max = prime_digit_count_max\n    local prime_digit_count_min\
    \ = prime_digit_count_max\n    local prime_digit_count_max = prime_digit_count_max\n\
    \    local prime_digit_count_min = prime_digit_count_max\n    local prime_digit_count_max\
    \ = prime_digit_count_max\n    local prime_digit_count_min = prime_digit_count_max\n\
    \    local prime_digit_count_max = prime_digit_count_max\n    local prime_digit_count_min\
    \ = prime_digit_count_max\n    local prime_digit_count_max = prime_digit_count_max\n\
    \    local prime_digit_count_min = prime_digit_count_max\n    local prime_digit_count_max\
    \ = prime_digit_count_max\n    local prime_digit_count_min = prime_digit_count_max\n\
    \    local prime_digit_count_max = prime_digit_count_max\n    local prime_digit_count_min\
    \ = prime_digit_count_max\n    local prime_digit_count_max = prime_digit_count_max\n\
    \    local prime_digit_count_min = prime_digit_count_max\n    local prime_digit_count_max\
    \ = prime_digit_count_max\n    local prime_digit_count_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyp3baf4c.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyp3baf4c.jl:1\n\
    in expression starting at /tmp/tmpyp3baf4c.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    local digits = split(num, \"0123456789ABCDEF\"\
    )\n    local primes = prime_digits(digits)\n    local prime_digits_count = count(primes)\n\
    \    local prime_digits_count_prime = prime_digits_count - prime_digits_count\
    \ % 2\n    \n    if prime_digits_count_prime == 0 then\n        return prime_digits_count\n\
    \    else\n        return prime_digits_count_prime\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that receives a hexadecimal number as a string and\
    \ counts the number of hexadecimal digits that are primes (prime number, or a\
    \ prime, is a natural number greater than 1 that is not a product of two smaller\
    \ natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B,\
    \ C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal\
    \ 13).\nNote: the input string may contain symbols A,B,C,D,E,F uppercase or lowercase.\n\
    Examples:\nhex_key(\"AB\")\n1\nhex_key(\"1077E\")\n2\nhex_key(\"ABED1A33\")\n\
    4\nhex_key(\"123456789ABCDEF0\")\n6\nhex_key(\"2020\")\n2\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpddu0gz5m.jl:36\nin expression starting at\
    \ /tmp/tmpddu0gz5m.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   digits = num.chars\n    \n    primes = primes_list(digits)\n    \n    primes_count\
    \ = 0\n    \n    for prime in primes\n        if primes_count < prime\n      \
    \      primes_count += 1\n            \n    return primes_count\nend\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a hexadecimal number as a string and counts the number\
    \ of hexadecimal \n    digits that are primes (prime number, or a prime, is a\
    \ natural number \n    greater than 1 that is not a product of two smaller natural\
    \ numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C,\
    \ D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal\
    \ 11), D (=decimal 13).\n    Note: you may assume the input is always correct\
    \ or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n\
    \    >>> hex_key(\"AB\")\n    1\n    >>> hex_key(\"1077E\")\n    2\n    >>> hex_key(\"\
    ABED1A33\")\n    4\n    >>> hex_key(\"123456789ABCDEF0\")\n    6\n    >>> hex_key(\"\
    2020\")\n    2\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdyk7yap2.jl:39\nin expression starting at\
    \ /tmp/tmpdyk7yap2.jl:39\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   hex_list = num.split(\"\")\n    \n    hex_list[1] = hex_list[1].toUpperCase()\n\
    \    hex_list[2] = hex_list[2].toUpperCase()\n    hex_list[3] = hex_list[3].toUpperCase()\n\
    \    hex_list[4] = hex_list[4].toUpperCase()\n    hex_list[5] = hex_list[5].toUpperCase()\n\
    \    hex_list[6] = hex_list[6].toUpperCase()\n    hex_list[7] = hex_list[7].toUpperCase()\n\
    \    hex_list[8] = hex_list[8].toUpperCase()\n    hex_list[9] = hex_list[9].toUpperCase()\n\
    \    hex_list[10] = hex_list[10].toUpperCase()\n    hex_list[11] = hex_list[11].toUpperCase()\n\
    \    hex_list[12] = hex_list[12].toUpperCase()\n    hex_list[13] = hex_list[13].toUpperCase()\n\
    \    \n    hex_list[1] = hex_list[1] == \"A\" || hex_list[1] == \"B\"\n    hex_list[2]\
    \ = hex_list[2] == \"A\" || hex_list[2] == \"B\"\n    hex_list[3] = hex_list[3]\
    \ == \"A\" || hex_list[3] == \"B\"\n    hex_list[4] = hex_list[4] == \"A\" ||\
    \ hex_list[4] == \"B\"\n    hex_list[5] = hex_list[5] == \"A\" || hex_list[5]\
    \ == \"B\"\n    hex_list[6] = hex_list[6] == \"A\" || hex_list[6] == \"B\"\n \
    \   hex_list[7] = hex_list[7] == \"A\" || hex_list[7] == \"B\"\n    hex_list[8]\
    \ = hex_list[8] == \"A\" || hex_list[8] == \"B\"\n    hex_list[9] = hex_list[9]\
    \ == \"A\" || hex_list[9] == \"B\"\n    hex_list[10] = hex_list[10] == \"A\" ||\
    \ hex_list[10] == \"B\"\n    hex_list[11] = hex_list[11] == \"A\" || hex_list[11]\
    \ == \"B\"\n    hex_list[12] = hex_list[12] == \"A\" || hex_list[12] == \"B\"\n\
    \    hex_list[13] = hex_list[13] == \"A\" || hex_list[13] == \"B\"\n    \n   \
    \ hex_list[1] = hex_list[1] == \"C\" || hex_list[1] == \"D\"\n    hex_list[2]\
    \ = hex_list[2] == \"C\" || hex_list[2] == \"D\"\n    hex_list[3] = hex_list[3]\
    \ == \"C\" || hex_list[3] == \"D\"\n    hex_list[4] = hex_list[4] == \"C\" ||\
    \ hex_list[4] == \"D\"\n    hex_list[5] = hex_list[5] == \"C\" || hex_list[5]\
    \ == \"D\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc9tr4z1f.jl:67\nin expression starting at\
    \ /tmp/tmpc9tr4z1f.jl:67\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ hex_key = 0\n    \n    for i in num\n        \n        if i in primes\n    \
    \        \n            hex_key += 1\n            \n    return hex_key\nend\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a hexadecimal number as a string and counts the number\
    \ of hexadecimal digits that are primes (prime number, or a prime, is a natural\
    \ number greater than 1 that is not a product of two smaller natural numbers).\n\
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime\
    \ numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of\
    \ the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote:\
    \ the input may be empty or contain symbols A,B,C,D,E,F only.\nExamples:\nhex_key(\"\
    AB\")\n1\nhex_key(\"1077E\")\n2\nhex_key(\"ABED1A33\")\n4\nhex_key(\"123456789ABCDEF0\"\
    )\n6\nhex_key(\"2020\")\n2\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3fcokg00.jl:37\nin expression starting at\
    \ /tmp/tmp3fcokg00.jl:37\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   hex = num.chars\n    hex.sort!()\n    \n    primes = Set{Int64}()\n    \n\
    \    for i in hex\n        if i == \"A\" || i == \"B\" || i == \"C\" || i == \"\
    D\" || i == \"E\" || i == \"F\"\n            primes.add(2)\n        else\n   \
    \         primes.add(hex2int(i))\n    end\n    \n    primes.filter!(x->x==2)\n\
    \    \n    return primes.count\nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a string\
    \ and returns the number of characters that are not letters.\nExamples:\n>>> not_letters(\"\
    Hello World!\")\n5\n>>> not_letters(\"Hello World\")\n0\n>>> not_letters(\"Hello\
    \ World!\")\n0\n>>> not_letters(\"Hello World\")\n0\n>>> not_letters(\"Hello World!\"\
    )\n0\n>>> not_letters(\"Hello World\")\n0\n>>> not_letters(\"Hello World!\")\n\
    0\n>>> not_letters(\"Hello World\")\n0\n>>> not_letters(\"Hello World!\")\n0\n\
    >>> not_letters(\"Hello World\")\n0\n>>> not_letters(\"Hello World!\")\n0\n>>>\
    \ not_letters(\"Hello World\")\n0\n>>> not_letters(\"Hello World!\")\n0\n>>> not_letters(\"\
    Hello World\")\n0\n>>> not_letters(\"Hello World!\")\n0\n>>> not_letters(\"Hello\
    \ World\")\n0\n>>> not_letters(\"Hello World!\")\n0\n>>> not_letters(\"Hello World\"\
    )\n0\n>>> not_letters(\"Hello World!\")\n0\n>>> not_letters(\"Hello World\")\n\
    0\n>>> not_letters(\"Hello World!\")\n0\n>>> not_letters(\"Hello World\")\n0\n\
    >>> not_letters(\"Hello World!\")\n0\n>>> not_letters(\"Hello World\")\n0\n>>>\
    \ not_letters(\"Hello World!\")\n0\n>>> not_letters(\"Hello World\")\n0\n>>> not_letters(\"\
    Hello World!\")\n0\n>>> not_letters(\"Hello World\")\n0\n>>> not_letters(\"Hello\
    \ World!\")\n0\n>>> not_\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp07uo2_4r.jl:43\nin expression starting at\
    \ /tmp/tmp07uo2_4r.jl:43\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ digits = num.chars\n    \n    prime_digits = primes.filter(x -> digits.contains(x))\n\
    \    \n    prime_digits_count = prime_digits.count()\n    \n    if prime_digits_count\
    \ == 0 \n        prime_digits_count = primes.filter(x -> digits.contains(x)).count()\n\
    \    \n    return prime_digits_count\nend\n</cell>\n<code language=julia-1.3>\n\
    hex_key(\"AB\")\n</cell>\n<code language=julia-1.3>\nhex_key(\"1077E\")\n</cell>\n\
    <code language=julia-1.3>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.3>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.3>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a hexadecimal\
    \ number as a string and counts the number of hexadecimal digits that are primes\
    \ (prime number, or a prime, is a natural number greater than 1 that is not a\
    \ product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\n\
    So you have to determine a number of the following digits: 2, 3, 5, 7, B (=decimal\
    \ 11), D (=decimal 13).\nNote: the input may be empty or contain symbols A,B,C,D,E,F\
    \ are always uppercase.\nExamples:\nhex_key(\"AB\")\n1\nhex_key(\"1077E\")\n2\n\
    hex_key(\"ABED1A33\")\n4\nhex_key(\"123456789ABCDEF0\")\n6\nhex_key(\"2020\")\n\
    2\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpedijdmw4.jl:38\nin expression starting at\
    \ /tmp/tmpedijdmw4.jl:38\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    digits = num.chars\n    \n    primes\
    \ = prime_digits(digits)\n    \n    prime_digits_count = primes.count\n    \n\
    \    hex_count = prime_digits_count * 2\n    \n    hex_digits = digits[0..(hex_count-1)]\n\
    \    \n    hex_count = hex_digits.count\n    \n    hex_key = 0\n    \n    for\
    \ digit in hex_digits\n        hex_key += digit\n    end\n    \n    return hex_key\n\
    end\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a string and returns the number of characters that are\
    \ not letters.\nExamples:\n>>> not_letters(\"ABCD\")\n3\n>>> not_letters(\"ABCD1234\"\
    )\n4\n>>> not_letters(\"ABCD1234ABCD\")\n5\n>>> not_letters(\"ABCD1234ABCD1234ABCD\"\
    )\n6\n>>> not_lettersn\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbzsarln4.jl:45\nin expression starting at\
    \ /tmp/tmpbzsarln4.jl:45\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = prime_numbers(hex_key(num))\n\
    \    \n    prime_digits = primes.map(|n| hex_key(n.digits))\n    \n    prime_digits\
    \ = prime_digits.filter(|n| n != 0)\n    \n    prime_digits = prime_digits.sum()\n\
    \    \n    return prime_digits\nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 3\nWrite a function that receives a hexadecimal\
    \ number as a string and counts the number of hexadecimal digits that are primes\
    \ (prime number, or a prime, is a natural number greater than 1 that is not a\
    \ product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\n\
    So you have to determine a number of the following digits: 2, 3, 5, 7, B (=decimal\
    \ 11), D (=decimal 13).\nNote: the input may contain symbols A,B,C,D,E,F but you\
    \ may assume the input is always correct or empty string.\nExamples:\nhex_key(\"\
    AB\")\n1\nhex_key(\"1077E\")\n2\nhex_key(\"ABED1A33\")\n4\nhex_key(\"123456789ABCDEF0\"\
    )\n6\nhex_key(\"2020\")\n2\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyo9qz_tp.jl:27\nin expression starting at\
    \ /tmp/tmpyo9qz_tp.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    hex = num.chars\n    \n    hex.sort!\n\
    \    \n    hex.each_index do |i|\n        \n        if hex[i] != \"A\" && hex[i]\
    \ != \"B\" && hex[i] != \"C\" && hex[i] != \"D\" && hex[i] != \"E\" && hex[i]\
    \ != \"F\"\n            \n            hex[i] = hex[i].to_i\n            \n   \
    \         if hex[i] % 2 == 0\n                \n                hex[i] = hex[i]/2\n\
    \                \n            else\n                \n                hex[i]\
    \ = hex[i] + 1\n            end\n            \n        end\n        \n    end\n\
    \    \n    hex.each_index do |i|\n        \n        if hex[i] % 2 == 0\n     \
    \       \n            hex[i] = hex[i]/2\n            \n        else\n        \
    \    \n            hex[i] = hex[i] + 1\n        end\n        \n    end\n    \n\
    \    hex.each_index do |i|\n        \n        if hex[i] % 2 == 0\n           \
    \ \n            hex[i] = hex[i]/2\n            \n        else\n            \n\
    \            hex[i] = hex[i] + 1\n        end\n        \n    end\n    \n    hex.each_index\
    \ do |i|\n        \n        if hex[i] % 2 == 0\n            \n            hex[i]\
    \ = hex[i]/2\n            \n        else\n            \n            hex[i] = hex[i]\
    \ + 1\n        end\n        \n    end\n    \n    hex.each_index do |i|\n     \
    \   \n        if hex[i] % 2 == 0\n            \n            hex[i] = hex[i]/2\n\
    \            \n        else\n            \n            hex[i] = hex[i] + 1\n \
    \       end\n        \n    end\n    \n    hex.each_index do |i|\n        \n  \
    \      if hex[i] % 2 == 0\n            \n            hex[i] = hex[i]/2\n     \
    \       \n        else\n            \n            hex[i] = hex[i] + 1\n      \
    \  end\n        \n    end\n    \n    hex.each_index do |i|\n        \n       \
    \ if hex[i] % 2 == 0\n            \n            hex[i] = hex[i]/2\n          \
    \  \n        else\n            \n            hex[i] = hex[i] + 1\n        end\n\
    \        \n    end\n    \n    hex.each_index do |i|\n        \n        if hex[i]\
    \ % 2 == 0\n            \n            hex[i] = hex[i]/2\n            \n      \
    \  else\n            \n            hex[i] = hex[i] + 1\n        end\n        \n\
    \    end\n    \n    hex.each_index do |i|\n        \n        if hex[i] % 2 ==\
    \ 0\n            \n            hex[i] = hex[i]/2\n            \n        else\n\
    \            \n            hex[i] = hex[i] + 1\n        end\n        \n    end\n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpqeo4e943.jl:23 expected\
    \ \"end\", got \"do\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqeo4e943.jl:29\n\
    in expression starting at /tmp/tmpqeo4e943.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    hex_digits = num.chars\n    \n    prime_digits_count = 0\n    \n  \
    \  for digit in hex_digits\n        if digit in prime_digits\n            prime_digits_count\
    \ += 1\n            \n    return prime_digits_count\nend\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsvt6vp6f.jl:37\nin expression starting at\
    \ /tmp/tmpsvt6vp6f.jl:37\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    digits = num.chars\n    \n    primes\
    \ = prime_digits(digits)\n    \n    prime_digits_count = prime_digits_count(digits)\n\
    \    \n    prime_digits_count = prime_digits_count - 2\n    \n    prime_digits_count\
    \ = prime_digits_count + 2\n    \n    prime_digits_count = prime_digits_count\
    \ + 2\n    \n    prime_digits_count = prime_digits_count + 2\n    \n    prime_digits_count\
    \ = prime_digits_count + 2\n    \n    prime_digits_count = prime_digits_count\
    \ + 2\n    \n    prime_digits_count = prime_digits_count + 2\n    \n    prime_digits_count\
    \ = prime_digits_count + 2\n    \n    prime_digits_count = prime_digits_count\
    \ + 2\n    \n    prime_digits_count = prime_digits_count + 2\n    \n    prime_digits_count\
    \ = prime_digits_count + 2\n    \n    prime_digits_count = prime_digits_count\
    \ + 2\n    \n    prime_digits_count = prime_digits_count + 2\n    \n    prime_digits_count\
    \ = prime_digits_count + 2\n    \n    prime_digits_count = prime_digits_count\
    \ + 2\n    \n    prime_digits_count = prime_digits_count + 2\n    \n    prime_digits_count\
    \ = prime_digits_count + 2\n    \n    prime_digits_count = prime_digits_count\
    \ + 2\n    \n    prime_digits_count = prime_digits_count + 2\n    \n    prime_digits_count\
    \ = prime_digits_count + 2\n    \n    prime_digits_count = prime_digits_count\
    \ + 2\n    \n    prime_digits_count = prime_digits_count + 2\n    \n    prime_digits_count\
    \ = prime_digits_count + 2\n    \n    prime_digits_count = prime_digits_count\
    \ + 2\n    \n    prime_digits_count = prime_digits_count + 2\n    \n    prime_digits_count\
    \ = prime_digits_count + 2\n    \n    prime_digits_count = prime_digits_count\
    \ + 2\n    \n    prime_digits_count = prime_digits_count + 2\n    \n    prime_digits_count\
    \ = prime_digits_count + 2\n    \n    prime_digits_count = prime_\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp12uinsje.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp12uinsje.jl:1\n\
    in expression starting at /tmp/tmp12uinsje.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(100)\n    \n  \
    \  primes_count = primes.count{|x| num.chars.all? {|c| primes.include?(x.to_i(16).to_s(16).chars.index(c))}}\n\
    \    \n    return primes_count\nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise: Write a function that receives a hexadecimal\
    \ number as a string and counts the number of hexadecimal digits that are primes\
    \ (prime number, or a prime, is a natural number greater than 1 that is not a\
    \ product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\n\
    So you have to determine a number of the following digits: 2, 3, 5, 7, B (=decimal\
    \ 11), D (=decimal 13).\nNotes: you may assume the input is always correct or\
    \ empty string, and symbols A,B,C,D,E,F are always uppercase.\nExamples:\nhex_key(\"\
    AB\")\n1\nhex_key(\"1077E\")\n2\nhex_key(\"ABED1A33\")\n4\nhex_key(\"123456789ABCDEF0\"\
    )\n6\nhex_key(\"2020\")\n2\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0gk2c2y8.jl:27\nin expression starting at\
    \ /tmp/tmp0gk2c2y8.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   digits = num.digits\n    \n    primes = primes_list(digits)\n    \n    primes_count\
    \ = primes.count\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp83yv6bad.jl:1\nin expression starting at /tmp/tmp83yv6bad.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    local digits = num\n    local primes\
    \ = prime_digits(digits)\n    local prime_digits_count = length(primes)\n    \n\
    \    if prime_digits_count > 0 then\n        local prime_digits_count_2 = prime_digits_count\
    \ / 2\n        local prime_digits_count_3 = prime_digits_count / 3\n        local\
    \ prime_digits_count_5 = prime_digits_count / 5\n        local prime_digits_count_7\
    \ = prime_digits_count / 7\n        local prime_digits_count_11 = prime_digits_count\
    \ / 11\n        local prime_digits_count_13 = prime_digits_count / 13\n      \
    \  local prime_digits_count_17 = prime_digits_count / 17\n        local prime_digits_count_19\
    \ = prime_digits_count / 19\n        local prime_digits_count_23 = prime_digits_count\
    \ / 23\n        local prime_digits_count_29 = prime_digits_count / 29\n      \
    \  local prime_digits_count_31 = prime_digits_count / 31\n        local prime_digits_count_37\
    \ = prime_digits_count / 37\n        local prime_digits_count_41 = prime_digits_count\
    \ / 41\n        local prime_digits_count_43 = prime_digits_count / 43\n      \
    \  local prime_digits_count_47 = prime_digits_count / 47\n        local prime_digits_count_53\
    \ = prime_digits_count / 53\n        local prime_digits_count_59 = prime_digits_count\
    \ / 59\n        local prime_digits_count_61 = prime_digits_count / 61\n      \
    \  local prime_digits_count_67 = prime_digits_count / 67\n        local prime_digits_count_71\
    \ = prime_digits_count / 71\n        local prime_digits_count_73 = prime_digits_count\
    \ / 73\n        local prime_digits_count_79 = prime_digits_count / 79\n      \
    \  local prime_digits_count_81 = prime_digits_count / 81\n        local prime_digits_count_89\
    \ = prime_digits_count / 89\n        local prime_digits_count_91 = prime_digits_count\
    \ / 91\n        local prime_digits_count_93 = prime_digits_count / 93\n      \
    \  local prime_digits_count_101 = prime_digits_count / 101\n        local prime_digits_count_107\
    \ = prime_digits_count / 107\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzm_b88sw.jl:1\nin expression starting at /tmp/tmpzm_b88sw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    hex_key::Int64 = 0\n    \n    if num\
    \ == \"\"\n        error(\"The input string is empty\")\n    \n    for digit in\
    \ num\n        if digit == \"A\"\n            hex_key += 10\n        else if digit\
    \ == \"B\"\n            hex_key += 11\n        else if digit == \"C\"\n      \
    \      hex_key += 12\n        else if digit == \"D\"\n            hex_key += 13\n\
    \        else if digit == \"E\"\n            hex_key += 14\n        else if digit\
    \ == \"F\"\n            hex_key += 15\n        else if digit == \"0\"\n      \
    \      hex_key += 16\n        else if digit == \"1\"\n            hex_key += 17\n\
    \        else if digit == \"2\"\n            hex_key += 18\n        else if digit\
    \ == \"3\"\n            hex_key += 19\n        else if digit == \"4\"\n      \
    \      hex_key += 20\n        else if digit == \"5\"\n            hex_key += 21\n\
    \        else if digit == \"6\"\n            hex_key += 22\n        else if digit\
    \ == \"7\"\n            hex_key += 23\n        else if digit == \"8\"\n      \
    \      hex_key += 24\n        else if digit == \"9\"\n            hex_key += 25\n\
    \        else if digit == \"A\"\n            hex_key += 26\n        else if digit\
    \ == \"B\"\n            hex_key += 27\n        else if digit == \"C\"\n      \
    \      hex_key += 28\n        else if digit == \"D\"\n            hex_key += 29\n\
    \        else if digit == \"E\"\n            hex_key += 30\n        else if digit\
    \ == \"F\"\n            hex_key += 31\n        else if digit == \"0\"\n      \
    \      hex_key += 32\n        else if digit == \"1\"\n            hex_key += 33\n\
    \        else if digit == \"2\"\n            hex_key += 34\n        else if digit\
    \ == \"3\"\n            hex_key += 35\n        else if digit == \"4\"\n      \
    \      hex_key += 36\n        else if digit == \"5\"\n            hex_key += 37\n\
    \        else if digit == \"6\"\n            hex_key += 38\n        else if digit\
    \ == \"7\"\n            hex_key += 39\n        else if digit == \"8\"\n      \
    \      hex_key += 40\n        else if digit == \"9\"\n            hex_key += 41\n\
    \        else if digit == \"A\"\n            hex_key += 42\n        else if digit\
    \ == \"B\"\n            hex_key += 43\n        else if digit == \"C\"\n      \
    \      hex_key += 44\n        else if digit == \"D\"\n            hex_key += 45\n\
    \        else if digit == \"E\"\n            hex_key += 46\n        else if digit\
    \ == \"F\"\n            hex_key \nusing Test\n\n@testset begin\n\ncandidate =\
    \ hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\
    \t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"\
    123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp92w2pt3i.jl:33\nin expression starting at\
    \ /tmp/tmp92w2pt3i.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    digits = num.chars\n    \n    primes\
    \ = prime_digits(digits)\n    \n    prime_digits_count = primes.count\n    \n\
    \    hex_key = 0\n    \n    if prime_digits_count > 0 \n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_\nusing Test\n\n@testset begin\n\
    \ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5iwc7xek.jl:1\nin expression starting at /tmp/tmp5iwc7xek.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ primes_count = 0\n    \n    for prime in primes\n        \n        if num.contains(prime)\n\
    \            \n            primes_count += 1\n            \n        end\n    end\n\
    \    \n    return primes_count\nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a string\
    \ and returns the number of characters that are not letters (uppercase or lowercase).\n\
    Examples:\n>>> not_letters(\"Hello\")\n3\n>>> not_letters(\"HELLO\")\n4\n>>> not_letters(\"\
    HELLO WORLD\")\n5\n>>> not_letters(\"HELLO WORLD\")\n5\n>>> not_letters(\"HELLO\
    \ WORLD\")\n5\n>>> not_letters(\"HELLO WORLD\")\n5\n>>> not_letters(\"HELLO WORLD\"\
    )\n5\n>>> not_letters(\"HELLO WORLD\")\n5\n>>> not_letters(\"HELLO WORLD\")\n\
    5\n>>> not_letters(\"HELLO WORLD\")\n5\n>>> not_letters(\"HELLO WORLD\")\n5\n\
    >>> not_letters(\"HELLO WORLD\")\n5\n>>> not_letters(\"HELLO WORLD\")\n5\n>>>\
    \ not_letters(\"HELLO WORLD\")\n5\n>>> not_letters(\"HELLO WORLD\")\n5\n>>> not_letters(\"\
    HELLO WORLD\")\n5\n>>> not_letters(\"HELLO WORLD\")\n5\n>>> not_letters(\"HELLO\
    \ WORLD\")\n5\n>>> not_letters(\"HELLO WORLD\")\n5\n>>> not_letters(\"HELLO WORLD\"\
    )\n5\n>>> not_letters(\"HELLO WORLD\")\n5\n>>> not_letters(\"HELLO WORLD\")\n\
    5\n>>> not_letters(\"HELLO WORLD\")\n5\n>>> not_letters(\"HELLO WORLD\")\n5\n\
    >>> not_letters(\"HELLO WORLD\")\n5\n>>> not_letters(\"HELLO WORLD\")\n5\n>>>\
    \ not_letters(\"HELLO \nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3on_r6oj.jl:40\nin expression starting at\
    \ /tmp/tmp3on_r6oj.jl:40\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    hex_key = 0\n    \n    if num == \"\"\
    \n        return hex_key\n    \n    digits = num.chars\n    \n    for i in digits\n\
    \        if i == \"A\"\n            hex_key += 1\n        elif i == \"B\"\n  \
    \          hex_key += 2\n        elif i == \"C\"\n            hex_key += 4\n \
    \       elif i == \"D\"\n            hex_key += 8\n        elif i == \"E\"\n \
    \           hex_key += 16\n        elif i == \"F\"\n            hex_key += 32\n\
    \        else\n            hex_key += 64\n    end\n    \n    return hex_key\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"i\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp26t961vj.jl:35\nin expression starting at /tmp/tmp26t961vj.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ digits = num.chars\n    \n    prime_digits = primes.filter(x -> digits.contains(x))\n\
    \    \n    prime_digits_count = prime_digits.count()\n    \n    return prime_digits_count\n\
    end\n</cell>\n<code language=julia-1.4>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.4>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.4>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.4>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.4>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a hexadecimal number as a string and counts the number\
    \ of hexadecimal digits that are primes (prime number, or a prime, is a natural\
    \ number greater than 1 that is not a product of two smaller natural numbers).\n\
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime\
    \ numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of\
    \ the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\nNote: the\
    \ input may contain symbols A,B,C,D,E,F but you may assume that they are always\
    \ uppercase.\nExamples:\nhex_key(\"AB\")\n1\nhex_key(\"1077E\")\n2\nhex_key(\"\
    ABED1A33\")\n4\nhex_key(\"123456789ABCDEF0\")\n6\nhex_key(\"2020\")\n2\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpctplxxwq.jl:35\nin expression starting at\
    \ /tmp/tmpctplxxwq.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    hex_key::Int64 = 0\n    \n    if num\
    \ == \"\"\n        return hex_key\n    \n    digits = split(num, \"ABCDEF\")\n\
    \    \n    for digit in digits\n        if digit == \"0\"\n            hex_key\
    \ += 1\n        else\n            hex_key += hex_key(digit)\n    \n    return\
    \ hex_key\nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\"\
    )\n</cell>\n<code language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that receives a positive integer and returns the number\
    \ of \n    digits that are divisible by 3. The function should work for any \n\
    \    positive integer.\n    Examples:\n    >>> count_digits(12345)\n    4\n  \
    \  >>> count_digits(123)\n    2\n    >>> count_digits(0)\n    0\n    >>> count_digits(-12345)\n\
    \    4\n    >>> count_digits(-123)\n    2\n    >>> count_digits(-0)\n    0\n \
    \   \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdwf4av6b.jl:40\nin expression starting at\
    \ /tmp/tmpdwf4av6b.jl:40\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ prime_digits = primes.filter(x -> num.contains(x))\n    \n    prime_digits_count\
    \ = prime_digits.count()\n    \n    if prime_digits_count > 1 \n        prime_digits_count\
    \ = prime_digits_count - 1\n    \n    return prime_digits_count\nend\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that receives a string and returns the number of uppercase letters\
    \ in the string.\nExamples:\n>>> count_uppercase_letters(\"Hello World\")\n5\n\
    >>> count_uppercase_letters(\"Hello World!\")\n3\n>>> count_uppercase_letters(\"\
    Hello World!\")\n3\n>>> count_uppercase_letters(\"Hello World!\")\n3\n>>> count_uppercase_letters(\"\
    Hello World!\")\n3\n>>> count_uppercase_letters(\"Hello World!\")\n3\n>>> count_uppercase_letters(\"\
    Hello World!\")\n3\n>>> count_uppercase_letters(\"Hello World!\")\n3\n>>> count_uppercase_letters(\"\
    Hello World!\")\n3\n>>> count_uppercase_letters(\"Hello World!\")\n3\n>>> count_uppercase_letters(\"\
    Hello World!\")\n3\n>>> count_uppercase_letters(\"Hello World!\")\n3\n>>> count_uppercase_letters(\"\
    Hello World!\")\n3\n>>> count_uppercase_letters(\"Hello World!\")\n3\n>>> count_uppercase_letters(\"\
    Hello World!\")\n3\n>>> count_uppercase_letters(\"Hello World!\")\n3\n>>> count_uppercase_letters(\"\
    Hello World!\")\n3\n>>> count_uppercase_letters(\"Hello World!\")\n3\n>>> count_uppercase_letters(\"\
    Hello World!\")\n3\n>>> count_uppercase_letters(\"Hello World!\")\n3\n>>> count_uppercase_letters(\"\
    Hello World!\")\n3\n>>> count_uppercase_letters(\"Hello World!\")\n3\n>>> count_uppercase_letters(\"\
    Hello World!\")\n3\n>>> count_uppercase_letters(\"Hello World!\")\n3\n>>> count_uppercase_letters(\"\
    Hello World!\")\n3\n>>> count_uppercase_letters(\"Hello World!\")\n3\n>>> count_uppercase_letters(\"\
    Hello World!\")\n3\n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t\
    @test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps34lcw01.jl:36\nin expression starting at\
    \ /tmp/tmps34lcw01.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    prime_digits_set = Set(prime_digits)\n    \n    hex_digits_set = Set(num.chars)\n\
    \    \n    hex_digits_set = hex_digits_set - prime_digits_set\n    \n    hex_digits_set\
    \ = hex_digits_set - prime_digits_set - Set([\"A\",\"B\",\"C\",\"D\",\"E\",\"\
    F\"])\n    \n    return length(hex_digits_set)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcxofwo2j.jl:37\nin expression starting at\
    \ /tmp/tmpcxofwo2j.jl:37\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   digits = num.digits\n    \n    primes = primes_list(digits)\n    \n    primes_count\
    \ = primes.count\n    \n    primes_count_prime = primes_count - primes.count\n\
    \    \n    primes_count_prime_prime = primes_count_prime - primes.count\n    \n\
    \    primes_count_prime_prime_prime = primes_count_prime_prime - primes.count\n\
    \    \n    primes_count_prime_prime_prime_prime = primes_count_prime_prime_prime\
    \ - primes.count\n    \n    primes_count_prime_prime_prime_prime_prime = primes_count_prime_prime_prime_prime_prime\
    \ - primes.count\n    \n    primes_count_prime_prime_prime_prime_prime_prime =\
    \ primes_count_prime_prime_prime_prime_prime_prime_prime - primes.count\n    \n\
    \    primes_count_prime_prime_prime_prime_prime_prime_prime = primes_count_prime_prime_prime_prime_prime_prime_prime_prime\
    \ - primes.count\n    \n    primes_count_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = primes_count_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime -\
    \ primes.count\n    \n    primes_count_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = primes_count_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime -\
    \ primes.count\n    \n    primes_count_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = primes_count_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ - primes.count\n    \n    primes_count_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = primes_count_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ - primes.count\n    \n    primes_count_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ = primes_count_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime_prime\
    \ - primes.count\n    \n    primes_count_prime_prime_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpruodhlk7.jl:1\nin expression starting at /tmp/tmpruodhlk7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = prime_digits(num)\n \
    \   \n    prime_digits_count = length(prime_digits)\n    \n    if prime_digits_count\
    \ > 0 \n        \n        prime_digits_count = prime_digits_count - 1\n      \
    \  \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxbr4s9yo.jl:1\nin expression starting at /tmp/tmpxbr4s9yo.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    prime_digits_set = Set(prime_digits)\n    \n    hex_digits = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n\
    \    hex_digits_set = Set(hex_digits)\n    \n    hex_digits_set = hex_digits_set\
    \ - prime_digits_set\n    \n    hex_digits_set = hex_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digits_set - prime_digits_set - prime_digits_set - prime_digits_set\
    \ - prime_digit\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph3in7tg6.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph3in7tg6.jl:1\n\
    in expression starting at /tmp/tmph3in7tg6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ primes_count = 0\n    \n    for prime in primes\n        if num == hex_key(prime)\n\
    \            primes_count += 1\n        end\n    end\n    \n    return primes_count\n\
    end\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that receives a hexadecimal number as a string and counts the number\
    \ of hexadecimal digits that are primes (prime number, or a prime, is a natural\
    \ number greater than 1 that is not a product of two smaller natural numbers).\n\
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime\
    \ numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of\
    \ the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\nNote: the\
    \ input may contain symbols A,B,C,D,E,F but you may assume that they are uppercase.\n\
    Examples:\nhex_key(\"AB\")\n1\nhex_key(\"1077E\")\n2\nhex_key(\"ABED1A33\")\n\
    4\nhex_key(\"123456789ABCDEF0\")\n6\nhex_key(\"2020\")\n2\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcl2pxdmo.jl:37\nin expression starting at\
    \ /tmp/tmpcl2pxdmo.jl:37\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(num) \n    \n \
    \   count = 0\n    for p in primes\n        if hex_dec(num) == p\n           \
    \ count += 1\n        end\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 3\nWrite a function that receives a hexadecimal\
    \ number as a string and counts the number of hexadecimal digits that are primes\
    \ (prime number, or a prime, is a natural number greater than 1 that is not a\
    \ product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\n\
    So you have to determine a number of the following digits: 2, 3, 5, 7, B (=decimal\
    \ 11), D (=decimal 13).\nNote: the input may contain symbols A,B,C,D,E,F but you\
    \ may assume that the input is always correct or empty string, and symbols A,B,C,D,E,F\
    \ are always uppercase.\nExamples:\nhex_key(\"AB\")\n1\nhex_key(\"1077E\")\n2\n\
    hex_key(\"ABED1A33\")\n4\nhex_key(\"123456789ABCDEF0\")\n6\nhex_key(\"2020\")\n\
    2\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcuduwzyg.jl:35\nin expression starting at\
    \ /tmp/tmpcuduwzyg.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   digits = num.chars\n    \n    primes = prime_digits(digits)\n    \n    prime_digits_count\
    \ = prime_digits_count(digits)\n    \n    prime_digits_count_2 = prime_digits_count(digits)\n\
    \    \n    prime_digits_count_3 = prime_digits_count(digits)\n    \n    prime_digits_count_4\
    \ = prime_digits_count(digits)\n    \n    prime_digits_count_5 = prime_digits_count(digits)\n\
    \    \n    prime_digits_count_6 = prime_digits_count(digits)\n    \n    prime_digits_count_7\
    \ = prime_digits_count(digits)\n    \n    prime_digits_count_8 = prime_digits_count(digits)\n\
    \    \n    prime_digits_count_9 = prime_digits_count(digits)\n    \n    prime_digits_count_10\
    \ = prime_digits_count(digits)\n    \n    prime_digits_count_11 = prime_digits_count(digits)\n\
    \    \n    prime_digits_count_12 = prime_digits_count(digits)\n    \n    prime_digits_count_13\
    \ = prime_digits_count(digits)\n    \n    prime_digits_count_14 = prime_digits_count(digits)\n\
    \    \n    prime_digits_count_15 = prime_digits_count(digits)\n    \n    prime_digits_count_16\
    \ = prime_digits_count(digits)\n    \n    prime_digits_count_17 = prime_digits_count(digits)\n\
    \    \n    prime_digits_count_18 = prime_digits_count(digits)\n    \n    prime_digits_count_19\
    \ = prime_digits_count(digits)\n    \n    prime_digits_count_20 = prime_digits_count(digits)\n\
    \    \n    prime_digits_count_21 = prime_digits_count(digits)\n    \n    prime_digits_count_22\
    \ = prime_digits_count(digits)\n    \n    prime_digits_count_23 = prime_digits_count(digits)\n\
    \    \n    prime_digits_count_24 = prime_digits_count(digits)\n    \n    prime_digits_count_25\
    \ = prime_digits_count(digits)\n    \n    prime_digits_count_26 = prime_digits_count(digits)\n\
    \    \n    prime_digits_count_27 = prime_digits_count(digits)\n    \n    prime_digits_count_28\
    \ = \nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0yi5dph4.jl:1\nin expression starting at /tmp/tmp0yi5dph4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    hex_digits = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255]\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfsnvx45m.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfsnvx45m.jl:1\n\
    in expression starting at /tmp/tmpfsnvx45m.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ primes_count = 0\n    \n    for prime in primes\n        if num == prime\n \
    \           primes_count += 1\n        end\n    end\n    \n    return primes_count\n\
    end\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a binary number as a string and counts the number of\
    \ 1's in the binary number.\nExamples:\n>>> bin2dec(\"10101010\")\n4\n>>> bin2dec(\"\
n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvoi7az2j.jl:37\nin expression starting at\
    \ /tmp/tmpvoi7az2j.jl:37\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   digits = num.chars()\n    digits = digits[1..]\n    digits = digits[0..]\n\
    \    digits = digits[0..]\n    digits = digits[0..]\n    digits = digits[0..]\n\
    \    digits = digits[0..]\n    digits = digits[0..]\n    digits = digits[0..]\n\
    \    digits = digits[0..]\n    digits = digits[0..]\n    digits = digits[0..]\n\
    \    digits = digits[0..]\n    digits = digits[0..]\n    digits = digits[0..]\n\
    \    digits = digits[0..]\n    digits = digits[0..]\n    digits = digits[0..]\n\
    \    digits = digits[0..]\n    digits = digits[0..]\n    digits = digits[0..]\n\
    \    digits = digits[0..]\n    digits = digits[0..]\n    digits = digits[0..]\n\
    \    digits = digits[0..]\n    digits = digits[0..]\n    digits = digits[0..]\n\
    \    digits = digits[0..]\n    digits = digits[0..]\n    digits = digits[0..]\n\
    \    digits = digits[0..]\n    digits = digits[0..]\n    digits = digits[0..]\n\
    \    digits = digits[0..]\n    digits = digits[0..]\n    digits = digits[0..]\n\
    \    digits = digits[0..]\n    digits = digits[0..]\n    digits = digits[0..]\n\
    \    digits = digits[0..]\n    digits = digits[0..]\n    digits = digits[0..]\n\
    \    digits = digits[0..]\n    digits = digits[0..]\n    digits = digits[0..]\n\
    \    digits = digits[0..]\n    digits = digits[0..]\n    digits = digits[0..]\n\
    \    digits = digits[0..]\n    digits = digits[0..]\n    digits = digits[0..]\n\
    \    digits = digits[0..]\n    digits = digits[0..]\n    digits = digits[0..]\n\
    \    digits = digits[0..]\n    digits = digits[0..]\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"]\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsf1vltjw.jl:28\nin expression starting at /tmp/tmpsf1vltjw.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   digits = num.digits\n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n    \n\
    \    prime_digits_set = Set(prime_digits)\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(digits)\n    \n    prime_digits_set = prime_digits_set - Set(digits[2:])\n\
    \    \n    prime_digits_set = prime_digits_set - Set(digits[3:])\n    \n    prime_digits_set\
    \ = prime_digits_set - Set(digits[4:])\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(digits[5:])\n    \n    prime_digits_set = prime_digits_set - Set(digits[6:])\n\
    \    \n    prime_digits_set = prime_digits_set - Set(digits[7:])\n    \n    prime_digits_set\
    \ = prime_digits_set - Set(digits[8:])\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(digits[9:])\n    \n    prime_digits_set = prime_digits_set - Set(digits[10:])\n\
    \    \n    prime_digits_set = prime_digits_set - Set(digits[11:])\n    \n    prime_digits_set\
    \ = prime_digits_set - Set(digits[12:])\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(digits[13:])\n    \n    prime_digits_set = prime_digits_set - Set(digits[14:])\n\
    \    \n    prime_digits_set = prime_digits_set - Set(digits[15:])\n    \n    prime_digits_set\
    \ = prime_digits_set - Set(digits[16:])\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(digits[17:])\n    \n    prime_digits_set = prime_digits_set - Set(digits[18:])\n\
    \    \n    prime_digits_set = prime_digits_set - Set(digits[19:])\n    \n    prime_digits_set\
    \ = prime_digits_set - Set(digits[20:])\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(digits[21:])\n    \n    prime_digits_set = prime_digits_set - Set(digits[22:])\n\
    \    \n    prime_digits_set = prime_digits_set - Set(digits[23:])\n    \n    prime_digits_\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpu2ta71ma.jl:35\nin expression\
    \ starting at /tmp/tmpu2ta71ma.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   digits = num.chars\n    \n    primes = prime_digits(digits)\n    \n    primes_count\
    \ = 0\n    for prime in primes\n        if prime_digits(prime) == digits\n   \
    \         primes_count += 1\n        end\n    end\n    \n    return primes_count\n\
    end\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a string and returns the number of characters that are\
    \ not letters.\nExamples:\n>>> count_letters(\"Hello\")\n5\n>>> count_letters(\"\
    Hello World\")\n7\n>>> count_letters(\"Hello World!\")\n6\n>>> count_letters(\"\
    Hello World!?\")\n8\n>>> count_letters(\"Hello World!?!\")\n8\n>>> count_letters(\"\
    Hello World!?!?\")\n8\n>>> count_letters(\"Hello World!?!?!\")\n8\n>>> count_letters(\"\
    Hello World!?!?!?\")\n8\n>>> count_letters(\"Hello World!?!?!?!\")\n8\n>>> count_letters(\"\
    Hello World!?!?!?!?\")\n8\n>>> count_letters(\"Hello World!?!?!?!?!\")\n8\n>>>\
    \ count_letters(\"Hello World!?!?!?!?!?\")\n8\n>>> count_letters(\"Hello World!?!?!?!?!?!\"\
    )\n8\n>>> count_letters(\"Hello World!?!?!?!?!?!?\")\n8\n>>> count_letters(\"\
    Hello World!?!?!?!?!?!?!\")\n8\n>>> count_letters(\"Hello World!?!?!?!?!?!?!?\"\
    )\n8\n>>> count_letters(\"Hello World!?!?!?!?!?!?!?!\")\n8\n>>> count_letters(\"\
    Hello World!?!?!?!?!?!?!?!?\")\n8\n>>> count_letters(\"Hello World!?!?!?!?!?!?!?!?!\"\
    )\n8\n>>> count_letters(\"Hello \nusing Test\n\n@testset begin\n\ncandidate =\
    \ hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\
    \t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"\
    123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp561ei12r.jl:40\nin expression starting at\
    \ /tmp/tmp561ei12r.jl:40\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    digits = num.chars\n    \n    primes\
    \ = prime_digits(digits)\n    \n    prime_digits_count = primes.count\n    \n\
    \    prime_digits_count = prime_digits_count + 1\n    \n    return prime_digits_count\n\
    end\n</cell>\n<code language=julia-1.0>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.0>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.0>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.0>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.0>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that receives a hexadecimal number as a string and counts the number\
    \ of hexadecimal digits that are primes (prime number, or a prime, is a natural\
    \ number greater than 1 that is not a product of two smaller natural numbers).\n\
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime\
    \ numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of\
    \ the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote:\
    \ the input may be empty or contain symbols A,B,C,D,E,F are always uppercase.\n\
    Examples:\nhex_key(\"AB\")\n1\nhex_key(\"1077E\")\n2\nhex_key(\"ABED1A33\")\n\
    4\nhex_key(\"123456789ABCDEF0\")\n6\nhex_key(\"2020\")\n2\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_quuv21_.jl:35\nin expression starting at\
    \ /tmp/tmp_quuv21_.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    local hex_key = 0\n    local digits\
    \ = num:gsub(\"^%x$\",\"%0\"):gsub(\"^%0$\",\"%x\"):gsub(\"^%0*$\",\"%x\"):gsub(\"\
    ^%0*$\",\"%0\")\n    local primes = prime_digits(digits)\n    local primes_count\
    \ = primes:len()\n    local primes_count_2 = primes_count/2\n    local primes_count_3\
    \ = primes_count/3\n    local primes_count_5 = primes_count/5\n    local primes_count_7\
    \ = primes_count/7\n    local primes_count_11 = primes_count/11\n    local primes_count_13\
    \ = primes_count/13\n    local primes_count_17 = primes_count/17\n    local primes_count_19\
    \ = primes_count/19\n    local primes_count_23 = primes_count/23\n    local primes_count_29\
    \ = primes_count/29\n    local primes_count_31 = primes_count/31\n    local primes_count_37\
    \ = primes_count/37\n    local primes_count_41 = primes_count/41\n    local primes_count_43\
    \ = primes_count/43\n    local primes_count_47 = primes_count/47\n    local primes_count_53\
    \ = primes_count/53\n    local primes_count_59 = primes_count/59\n    local primes_count_61\
    \ = primes_count/61\n    local primes_count_67 = primes_count/67\n    local primes_count_71\
    \ = primes_count/71\n    local primes_count_73 = primes_count/73\n    local primes_count_79\
    \ = primes_count/79\n    local primes_count_83 = primes_count/83\n    local primes_count_89\
    \ = primes_count/89\n    local primes_count_91 = primes_count/91\n    local primes_count_93\
    \ = primes_count/93\n    local primes_count_97 = primes_count/97\n    local primes_count_101\
    \ = primes_count/101\n    local primes_count_103 = primes_count/103\n    local\
    \ primes_count_107 = primes_count/107\n    local primes_count_113 = primes_count/113\n\
    \    local primes_count_117 = primes_count/117\n    local primes_count_121 = primes_count/121\n\
    \    local primes_count_123 = primes_count/123\n    local primes_count_127 = primes_count/127\n\
    \    local primes_count_131 = primes_count/131\n    local prime\nusing Test\n\n\
    @testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpci02h0p_.jl:26\nin expression starting at\
    \ /tmp/tmpci02h0p_.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    hex_key = 0\n    \n    if num == \"\"\
    \n        return hex_key\n    \n    digits = num.chars\n    \n    for i in digits\n\
    \        if i == \"A\"\n            hex_key += 1\n        elif i == \"B\"\n  \
    \          hex_key += 2\n        elif i == \"C\"\n            hex_key += 4\n \
    \       elif i == \"D\"\n            hex_key += 8\n        elif i == \"E\"\n \
    \           hex_key += 16\n        elif i == \"F\"\n            hex_key += 32\n\
    \        else \n            hex_key += 64\n    \n    return hex_key\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"i\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpc51_y5x9.jl:35\nin expression starting at /tmp/tmpc51_y5x9.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    digits = num.chars\n    \n    primes\
    \ = primes_list(digits)\n    \n    primes_count = primes.count\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count + 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps9f40gmb.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps9f40gmb.jl:1\n\
    in expression starting at /tmp/tmps9f40gmb.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ primes_count = 0\n    \n    for prime in primes\n        if num == hex_key(prime)\n\
    \            primes_count += 1\n        end\n    end\n    \n    return primes_count\n\
    end\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a hexadecimal number as a string and returns the number\
    \ of digits that are primes (prime number, or a prime, is a natural number greater\
    \ than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits\
    \ are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\nNote: the input may or may not\
    \ be correct or empty.\nExamples:\n>>> hex_key(\"AB\")\n1\n>>> hex_key(\"1077E\"\
    )\n2\n>>> hex_key(\"ABED1A33\")\n4\n>>> hex_key(\"123456789ABCDEF0\")\n6\n>>>\
    \ hex_key(\"2020\")\n2\n</text>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp87nmzr3j.jl:37\nin expression starting at\
    \ /tmp/tmp87nmzr3j.jl:37\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   digits = num.chars\n    \n    primes = primes_list(digits)\n    \n    primes_count\
    \ = primes.count\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_lf63wd5.jl:1\nin expression starting at /tmp/tmp_lf63wd5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   digits = num.chars\n    \n    primes = prime_digits(digits)\n    \n    prime_digits_count\
    \ = prime_digits_count(digits)\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjbpke0bw.jl:1\nin expression starting at /tmp/tmpjbpke0bw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ primes_count = 0\n    \n    for prime in primes\n        if num == prime\n \
    \           primes_count += 1\n        end\n    end\n    \n    return primes_count\n\
    end\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a string and returns the number of times each character\
    \ appears in the string.\nExamples:\n>>> count_chars(\"Hello World\")\n{'H': 2,\
    \ 'e': 2, 'l': 2, 'o': 2, 'W': 2, 'r': 2, 'l': 2, 'd': 1}\n>>> count_chars(\"\
    Hello World\")\n{'H': 2, 'e': 2, 'l': 2, 'o': 2, 'W': 2, 'r': 2, 'l': 2, 'd':\
    \ 1}\n>>> count_chars(\"Hello World\")\n{'H': 2, 'e': 2, 'l': 2, 'o': 2, 'W':\
    \ 2, 'r': 2, 'l': 2, 'd': 1}\n>>> count_chars(\"Hello World\")\n{'H': 2, 'e':\
    \ 2, 'l': 2, 'o': 2, 'W': 2, 'r': 2, 'l': 2, 'd': 1}\n>>> count_chars(\"Hello\
    \ World\")\n{'H': 2, 'e': 2, 'l': 2, 'o': 2, 'W': 2, 'r': 2, 'l': 2, 'd': 1}\n\
    >>> count_chars(\"Hello World\")\n{'H': 2, 'e': 2, 'l': 2, 'o': 2, 'W': 2, 'r':\
    \ 2, 'l': 2, 'd': 1}\n>>> count_chars(\"Hello World\")\n{'H': 2, 'e': 2, 'l':\
    \ 2, 'o': 2, 'W': 2, 'r': 2, 'l': 2, 'd': 1}\n>>> count_chars(\"Hello World\"\
    )\n{'H': 2, 'e': 2, 'l': 2, 'o': 2, 'W': 2, 'r': 2, 'l': 2, 'd': 1}\n>>> count_chars(\"\
    Hello World\")\n{'H': 2, 'e': 2, 'l': 2, 'o': 2, 'W': 2, 'r': 2, 'l': 2, 'd':\
    \ 1}\n>>> count_chars(\"Hello World\")\n{'H': 2, 'e': 2, 'l': 2, 'o': 2, 'W':\
    \ 2, 'r': 2, 'l': 2, 'd': 1}\n>>> count_chars(\"Hello World\")\n{'H\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3mh1qtxp.jl:37\nin expression starting at\
    \ /tmp/tmp3mh1qtxp.jl:37\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   digits = num.chars\n    \n    primes = primes_list(digits)\n    \n    primes_count\
    \ = primes.count\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxse0_jdh.jl:1\nin expression starting at /tmp/tmpxse0_jdh.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   digits = num.chars\n    \n    primes = prime_digits(digits)\n    \n    prime_digits_count\
    \ = primes.len\n    \n    prime_digits_count = prime_digits_count - 1\n    \n\
    \    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digit\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzh2npraj.jl:1\nin expression starting at /tmp/tmpzh2npraj.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   digits = num.digits\n    \n    primes = primes_list(digits)\n    \n    primes_count\
    \ = 0\n    for prime in primes\n        if primes[prime] == digits[prime]\n  \
    \          primes_count += 1\n        end\n    end\n    \n    return primes_count\n\
    end\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a hexadecimal number as a string and returns the sum\
    \ of the digits of that number.\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwg7acthp.jl:40\nin expression starting at\
    \ /tmp/tmpwg7acthp.jl:40\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(100)\n    \n  \
    \  count = 0\n    \n    for digit in num\n        if digit in primes\n       \
    \     count += 1\n        end\n    end\n    \n    return count\nend\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that receives a hexadecimal number as a string and counts the number\
    \ of hexadecimal \n    digits that are primes (prime number, or a prime, is a\
    \ natural number \n    greater than 1 that is not a product of two smaller natural\
    \ numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C,\
    \ D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal\
    \ 11), D (=decimal 13).\n    Note: you may assume the input is always correct\
    \ or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n\
    \    >>> hex_key(\"AB\")\n    1\n    >>> hex_key(\"1077E\")\n    2\n    >>> hex_key(\"\
    ABED1A33\")\n    4\n    >>> hex_key(\"123456789ABCDEF0\")\n    6\n    >>> hex_key(\"\
    2020\")\n    2\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuewdo5b3.jl:37\nin expression starting at\
    \ /tmp/tmpuewdo5b3.jl:37\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ hex_key = 0\n    \n    for digit in num\n        \n        if digit in primes\n\
    \            \n            hex_key += 1\n            \n    return hex_key\nend\n\
    </cell>\n<code language=julia-1.0>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.0>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.0>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.0>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.0>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a string and returns the number of characters that are\
    \ not letters.\nExamples:\n>>> not_letters(\"ABCD\")\n3\n>>> not_letters(\"ABCD1234\"\
    )\n4\n>>> not_letters(\"ABCD1234ABCD\")\n5\n>>> not_letters(\"ABCD1234ABCD1234ABCD\"\
    )\n6\n>>> not_lettersn\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpehshlais.jl:37\nin expression starting at\
    \ /tmp/tmpehshlais.jl:37\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    digits = num.chars\n    \n    primes\
    \ = primes_list(digits)\n    \n    primes_count = primes.count\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count - 1\n    \n    primes_count = primes_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd0b59ngz.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd0b59ngz.jl:1\n\
    in expression starting at /tmp/tmpd0b59ngz.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(num::Int64)\n \
    \   \n    primes_count = 0\n    \n    for prime in primes\n        \n        if\
    \ prime == 2\n            primes_count += 1\n        \n        if prime == 3\n\
    \            primes_count += 1\n        \n        if prime == 5\n            primes_count\
    \ += 1\n        \n        if prime == 7\n            primes_count += 1\n     \
    \   \n        if prime == 11\n            primes_count += 1\n        \n      \
    \  if prime == 13\n            primes_count += 1\n        \n        if prime ==\
    \ 17\n            primes_count += 1\n        \n        if prime == 19\n      \
    \      primes_count += 1\n        \n        if prime == 23\n            primes_count\
    \ += 1\n        \n        if prime == 29\n            primes_count += 1\n    \
    \    \n        if prime == 31\n            primes_count += 1\n        \n     \
    \   if prime == 37\n            primes_count += 1\n        \n        if prime\
    \ == 41\n            primes_count += 1\n        \n        if prime == 43\n   \
    \         primes_count += 1\n        \n        if prime == 47\n            primes_count\
    \ += 1\n        \n        if prime == 53\n            primes_count += 1\n    \
    \    \n        if prime == 59\n            primes_count += 1\n        \n     \
    \   if prime == 61\n            primes_count += 1\n        \n        if prime\
    \ == 67\n            primes_count += 1\n        \n        if prime == 71\n   \
    \         primes_count += 1\n        \n        if prime == 73\n            primes_count\
    \ += 1\n        \n        if prime == 79\n            primes_count += 1\n    \
    \    \n        if prime == 83\n            primes_count += 1\n        \n     \
    \   if prime == 89\n            primes_count += 1\n        \n        if prime\
    \ == 97\n            primes_count += 1\n        \n        if prime == 101\n  \
    \          primes_count += 1\n        \n        if prime == 103\n            primes_count\
    \ += 1\n        \n        if prime == 107\n            primes_count += 1\n   \
    \     \n        if prime == 109\n            primes_count += 1\n        \n   \
    \     if prime == 113\n            primes_count += 1\n        \n        if prime\
    \ == 127\n            primes_count += 1\n        \n        if prime == 131\n \
    \           primes_count += 1\n        \n        if prime == 137\n           \
    \ primes_count += 1\n        \n        if prime == 139\n            primes_count\
    \ += 1\n        \n        if prime == 147\n            primes_count += 1\n   \
    \     \n        if prime == 151\n            primes_count += 1\n        \n   \
    \     if prime == 157\n            primes_count += 1\n        \n        if prime\
    \ == 163\n            primes_count += 1\n        \n        if prime == 167\n \
    \           primes_count += 1\n        \n        if prime == 173\n           \
    \ primes_count += 1\n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t\
    @test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ket2ont.jl:1\nin expression starting at /tmp/tmp6ket2ont.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ count = 0\n    \n    for digit in num\n        \n        if digit in primes\n\
    \            count += 1\n            \n    return count\n    \nend\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a positive integer and returns the sum of its digits.\
    \ \nExamples:\n>>> sum_digits(123)\n6\n>>> sum_digits(123)\n6\n>>> sum_digits(0)\n\
    0\n>>> sum_digits(-5)\n-5\n>>> sum_digits(-5)\n-5\n>>> sum_digits(0)\n0\n>>> sum_digits(0)\n\
    0\n>>> sum_digits(0)\n0\n>>> sum_digits(0)\n0\n>>> sum_digits(0)\n0\n>>> sum_digits(0)\n\
    0\n>>> sum_digits(0)\n0\n>>> sum_digits(0)\n0\n>>> sum_digits(0)\n0\n>>> sum_digits(0)\n\
    0\n>>> sum_digits(0)\n0\n>>> sum_digits(0)\n0\n>>> sum_digits(0)\n0\n>>> sum_digits(0)\n\
    0\n>>> sum_digits(0)\n0\n>>> sum_digits(0)\n0\n>>> sum_digits(0)\n0\n>>> sum_digits(0)\n\
    0\n>>> sum_digits(0)\n0\n>>> sum_digits(0)\n0\n>>> sum_digits(0)\n0\n>>> sum_digits(0)\n\
    0\n>>> sum_digits(0)\n0\n>>> sum_digits(0)\n0\n>>> sum_digits(0)\n0\n>>> sum_digits(0)\n\
    0\n>>> sum_digits(0)\n0\n>>> sum_digits(0)\n0\n>>> sum_digits(0)\n0\n>>> sum_digits(0)\n\
    0\n>>> sum_digits(0)\n0\n>>> sum_digits(0)\n0\n>>> sum_digits(0)\n0\n>>> sum_digits(0)\n\
    0\n>>> sum_digits(0)\n0\n>>> sum_digits(0)\n0\n>>> sum_digits(0)\n0\n>>> sum_digits(0)\n\
    0\n>>> sum_digits(0)\n0\n>>> \nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp46_t2xf6.jl:37\nin expression starting at\
    \ /tmp/tmp46_t2xf6.jl:37\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    digit_counts = count(num) |> dict\n    \n    for digit in digit_counts:\n\
    \        if digit_counts[digit] >= prime_digits[digit]:\n            return digit_counts[digit]\n\
    \    \n    return 0\nend\n</cell>\n<code language=julia-1.4>\nhex_key(\"AB\")\n\
    </cell>\n<code language=julia-1.4>\nhex_key(\"1077E\")\n</cell>\n<code language=julia-1.4>\n\
    hex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.4>\nhex_key(\"123456789ABCDEF0\"\
    )\n</cell>\n<code language=julia-1.4>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that receives a hexadecimal number as a string and counts\
    \ the number of hexadecimal digits that are primes (prime number, or a prime,\
    \ is a natural number greater than 1 that is not a product of two smaller natural\
    \ numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D,\
    \ E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\n\
    Note: the input may or may not be correct or empty string, and symbols A,B,C,D,E,F\
    \ are always uppercase.\nExamples:\nhex_key(\"AB\")\n1\nhex_key(\"1077E\")\n2\n\
    hex_key(\"ABED1A33\")\n4\nhex_key(\"123456789ABCDEF0\")\n6\nhex_key(\"2020\")\n\
    2\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptxs8sc88.jl:30\nin expression starting at\
    \ /tmp/tmptxs8sc88.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    local digits = num\n    local count\
    \ = 0\n    local prime_digits = 2\n    local prime_digits_count = 0\n    local\
    \ prime_digits_sum = 0\n    local prime_digits_product = 1\n    local prime_digits_product2\
    \ = 0\n    local prime_digits_product3 = 0\n    local prime_digits_product4 =\
    \ 0\n    local prime_digits_product5 = 0\n    local prime_digits_product6 = 0\n\
    \    local prime_digits_product7 = 0\n    local prime_digits_product8 = 0\n  \
    \  local prime_digits_product9 = 0\n    local prime_digits_product10 = 0\n   \
    \ local prime_digits_product11 = 0\n    local prime_digits_product12 = 0\n   \
    \ local prime_digits_product13 = 0\n    local prime_digits_product14 = 0\n   \
    \ local prime_digits_product15 = 0\n    local prime_digits_product16 = 0\n   \
    \ local prime_digits_product17 = 0\n    local prime_digits_product18 = 0\n   \
    \ local prime_digits_product19 = 0\n    local prime_digits_product20 = 0\n   \
    \ local prime_digits_product21 = 0\n    local prime_digits_product22 = 0\n   \
    \ local prime_digits_product23 = 0\n    local prime_digits_product24 = 0\n   \
    \ local prime_digits_product25 = 0\n    local prime_digits_product26 = 0\n   \
    \ local prime_digits_product27 = 0\n    local prime_digits_product28 = 0\n   \
    \ local prime_digits_product29 = 0\n    local prime_digits_product30 = 0\n   \
    \ local prime_digits_product31 = 0\n    local prime_digits_product32 = 0\n   \
    \ local prime_digits_product33 = 0\n    local prime_digits_product34 = 0\n   \
    \ local prime_digits_product35 = 0\n    local prime_digits_product36 = 0\n   \
    \ local prime_digits_product37 = 0\n    local prime_digits_product38 = 0\n   \
    \ local prime_digits_product39 = 0\n    local prime_digits_product40 = 0\n   \
    \ local prime_digits_product41 = 0\n    local prime_digits_product42 = 0\n   \
    \ local prime_digits_product43 = 0\n    local prime_digits_product44 = 0\n   \
    \ local prime_digits_product45 = 0\n    local prime_digits_product46 = 0\n   \
    \ local prime_digits_product47 = 0\n    local prime_digits_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqlhi_l4w.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqlhi_l4w.jl:1\n\
    in expression starting at /tmp/tmpqlhi_l4w.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ primes_count = 0\n    \n    for prime in primes\n        if num == hex_key(prime)\n\
    \            primes_count += 1\n        end\n    end\n    \n    return primes_count\n\
    end\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that receives a string and returns the number of characters that are\
    \ not letters (uppercase or lowercase).\nExamples:\n>>> not_letters(\"AB\")\n\
    1\n>>> not_letters(\"1077E\")\n3\n>>> not_letters(\"ABED1A33\")\n5\n>>> not_letters(\"\
    123456789ABCDEF0\")\n8\n>>> not_letters(\"2020\")\n2\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwgfnbwnl.jl:37\nin expression starting at\
    \ /tmp/tmpwgfnbwnl.jl:37\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = prime_digits(num)\n    \n \
    \   primes_count = 0\n    for prime in primes\n        primes_count += prime_digits(prime)\n\
    \    end\n    \n    return primes_count\nend\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a hexadecimal\
    \ number as a string and counts the number of hexadecimal digits that are primes\
    \ (prime number, or a prime, is a natural number greater than 1 that is not a\
    \ product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\n\
    So you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal\
    \ 11), D (=decimal 13).\nNote: the input may contain symbols A,B,C,D,E,F only.\n\
    Examples:\nhex_key(\"AB\")\n1\nhex_key(\"1077E\")\n2\nhex_key(\"ABED1A33\")\n\
    4\nhex_key(\"123456789ABCDEF0\")\n6\nhex_key(\"2020\")\n2\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk3dmb7xn.jl:34\nin expression starting at\
    \ /tmp/tmpk3dmb7xn.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    hex_key = 0\n    \n    if num == \"\"\
    \n        return hex_key\n    \n    for digit in num\n        hex_key += digit2int(digit)\n\
    \    \n    return hex_key\nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a string\
    \ and returns the number of characters that are not letters.\nExamples:\n>>> count_letters(\"\
    a\")\n1\n>>> count_letters(\"ab\")\n2\n>>> count_letters(\"abc\")\n3\n>>> count_letters(\"\
    abd\")\n1\n>>> count_letters(\"abe\")\n1\n>>> count_letters(\"abf\")\n1\n>>> count_letters(\"\
    abg\")\n1\n>>> count_letters(\"abh\")\n1\n>>> count_letters(\"abi\")\n1\n>>> count_letters(\"\
    abj\")\n1\n>>> count_letters(\"abk\")\n1\n>>> count_letters(\"abl\")\n1\n>>> count_letters(\"\
    abm\")\n1\n>>> count_letters(\"abn\")\n1\n>>> count_letters(\"abo\")\n1\n>>> count_letters(\"\
    abp\")\n1\n>>> count_letters(\"abq\")\n1\n>>> count_letters(\"abr\")\n1\n>>> count_letters(\"\
    abs\")\n1\n>>> count_letters(\"abt\")\n1\n>>> count_letters(\"abu\")\n1\n>>> count_letters(\"\
    abv\")\n1\n>>> count_letters(\"abw\")\n1\n>>> count_letters(\"abx\")\n1\n>>> count_letters(\"\
    aby\")\n1\n>>> count_letters(\"abz\")\n1\n>>> count_letters(\"aca\")\n1\n>>> count_letters(\"\
    acb\")\n1\n>>> count_letters(\"acc\")\n1\n>>> count_letters(\"acd\")\n1\n>>> count_letters(\"\
    ace\")\n1\n>>> count_letters(\"acf\")\n1\n>>> count_letters(\"acg\")\n1\n>>> count_letters(\"\
    ach\")\n1\n>>> count_letters(\"ack\")\n1\n>>> count_letters(\"acl\")\n1\n>>> count_letters(\"\
    acm\")\n1\n>>> count_\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t\
    @test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg0y2xhff.jl:35\nin expression starting at\
    \ /tmp/tmpg0y2xhff.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    primes_count\
    \ = primes.count\n    \n    hex_digits = num.chars\n    hex_digits_count = hex_digits.count\n\
    \    \n    primes_count = primes_count * hex_digits_count\n    \n    primes_count\
    \ = primes_count / hex_digits_count\n    \n    primes_count = primes_count * hex_digits_count\n\
    \    \n    primes_count = primes_count / hex_digits_count\n    \n    primes_count\
    \ = primes_count * hex_digits_count\n    \n    primes_count = primes_count / hex_digits_count\n\
    \    \n    primes_count = primes_count * hex_digits_count\n    \n    primes_count\
    \ = primes_count / hex_digits_count\n    \n    primes_count = primes_count * hex_digits_count\n\
    \    \n    primes_count = primes_count / hex_digits_count\n    \n    primes_count\
    \ = primes_count * hex_digits_count\n    \n    primes_count = primes_count / hex_digits_count\n\
    \    \n    primes_count = primes_count * hex_digits_count\n    \n    primes_count\
    \ = primes_count / hex_digits_count\n    \n    primes_count = primes_count * hex_digits_count\n\
    \    \n    primes_count = primes_count / hex_digits_count\n    \n    primes_count\
    \ = primes_count * hex_digits_count\n    \n    primes_count = primes_count / hex_digits_count\n\
    \    \n    primes_count = primes_count * hex_digits_count\n    \n    primes_count\
    \ = primes_count / hex_digits_count\n    \n    primes_count = primes_count * hex_digits_count\n\
    \    \n    primes_count = primes_count / hex_digits_count\n    \n    primes_count\
    \ = primes_count * hex_digits_count\n    \n    primes_count = primes_count / hex_digits_count\n\
    \    \n    primes_count = primes_count * hex_digits_count\n    \n    primes_count\
    \ = primes_count / hex_digits_count\n    \n    primes_count = primes_count * hex_digits_count\n\
    \    \n    primes_count = primes_count / hex_digits_count\n    \n    primes_count\
    \ = primes_count * hex_digits_count\n    \n    primes_count = primes_count / hex_digits_count\n\
    \    \n    primes_count = primes_count * hex_digits_count\n    \n    primes_count\
    \ = primes_count / hex_digits_count\n    \n    primes_count = primes_count * hex_digits_count\n\
    \    \n    primes_count = primes_count / hex_digit\nusing Test\n\n@testset begin\n\
    \ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp49724few.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp49724few.jl:1\n\
    in expression starting at /tmp/tmp49724few.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ count = 0\n    \n    for digit in num\n        if digit in primes\n        \
    \    count += 1\n        end\n    end\n    \n    return count\nend\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a hexadecimal number as a string and counts the number\
    \ of hexadecimal digits that are primes (prime number, or a prime, is a natural\
    \ number greater than 1 that is not a product of two smaller natural numbers).\n\
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime\
    \ numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of\
    \ the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote:\
    \ the input may contain symbols A,B,C,D,E,F only.\nExamples:\nhex_key(\"AB\")\n\
    1\nhex_key(\"1077E\")\n2\nhex_key(\"ABED1A33\")\n4\nhex_key(\"123456789ABCDEF0\"\
    )\n6\nhex_key(\"2020\")\n2\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwes_2cu4.jl:37\nin expression starting at\
    \ /tmp/tmpwes_2cu4.jl:37\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   digits = num.digits\n    \n    primes = prime_digits(digits)\n    \n    prime_digits_count\
    \ = length(primes)\n    \n    hex_count = 0\n    \n    for digit in digits\n \
    \       if digit in primes\n            hex_count += 1\n    \n    return hex_count\n\
    end\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a string and returns the number of characters that are\
    \ not letters.\nExamples:\n>>> not_letters(\"Hello\")\n4\n>>> not_letters(\"Hello\
    \ World\")\n0\n>>> not_letters(\"Hello World!\")\n3\n>>> not_letters(\"Hello World!?\"\
    )\n2\n>>> not_letters(\"Hello World!?!\")\n1\n>>> not_letters(\"Hello World!?!?\"\
    )\n0\n>>> not_letters(\"Hello World!?!?!\")\n1\n>>> not_letters(\"Hello World!?!?!?\"\
    )\n0\n>>> not_letters(\"Hello World!?!?!?!\")\n1\n>>> not_letters(\"Hello World!?!?!?!?\"\
    )\n0\n>>> not_letters(\"Hello World!?!?!?!?!\")\n1\n>>> not_letters(\"Hello World!?!?!?!?!?\"\
    )\n0\n>>> not_letters(\"Hello World!?!?!?!?!?!\")\n1\n>>> not_letters(\"Hello\
    \ World!?!?!?!?!?!?\")\n0\n>>> not_letters(\"Hello World!?!?!?!?!?!?!\")\n1\n\
    >>> not_letters(\"Hello World!?!?!?!?!?!?!?\")\n0\n>>> not_letters(\"Hello World!?!?!?!?!?!?!?!\"\
    )\n1\n>>> not_letters(\"Hello World!?!?!?!?!?!?!?!?\")\n0\n>>> not_letters(\"\
    Hello World!?!?!?!?!?!?!?!?!?!\")\n1\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd0ahrkcq.jl:41\nin expression starting at\
    \ /tmp/tmpd0ahrkcq.jl:41\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    local digits = split(num, \"0123456789ABCDEF\"\
    )\n    local primes = prime_digits(digits)\n    local prime_sum = 0\n    for prime\
    \ in primes\n        prime_sum = prime_sum + prime\n    end\n    return prime_sum\n\
    end\n</cell>\n<code language=julia-1.4>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.4>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.4>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.4>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.4>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that receives a hexadecimal number as a string and counts the number\
    \ of hexadecimal \n    digits that are primes (prime number, or a prime, is a\
    \ natural number \n    greater than 1 that is not a product of two smaller natural\
    \ numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C,\
    \ D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal\
    \ 11), D (=decimal 13).\n    Note: you may assume the input is always correct\
    \ or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n\
    \    >>> hex_key(\"AB\")\n    1\n    >>> hex_key(\"1077E\")\n    2\n    >>> hex_key(\"\
    ABED1A33\")\n    4\n    >>> hex_key(\"123456789ABCDEF0\")\n    6\n    >>> hex_key(\"\
    2020\")\n    2\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph2u44g8c.jl:33\nin expression starting at\
    \ /tmp/tmph2u44g8c.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    local prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    local prime_digits_set = Set(prime_digits)\n    local prime_digits_set =\
    \ Set(prime_digits)\n    local prime_digits_set = Set(prime_digits)\n    local\
    \ prime_digits_set = Set(prime_digits)\n    local prime_digits_set = Set(prime_digits)\n\
    \    local prime_digits_set = Set(prime_digits)\n    local prime_digits_set =\
    \ Set(prime_digits)\n    local prime_digits_set = Set(prime_digits)\n    local\
    \ prime_digits_set = Set(prime_digits)\n    local prime_digits_set = Set(prime_digits)\n\
    \    local prime_digits_set = Set(prime_digits)\n    local prime_digits_set =\
    \ Set(prime_digits)\n    local prime_digits_set = Set(prime_digits)\n    local\
    \ prime_digits_set = Set(prime_digits)\n    local prime_digits_set = Set(prime_digits)\n\
    \    local prime_digits_set = Set(prime_digits)\n    local prime_digits_set =\
    \ Set(prime_digits)\n    local prime_digits_set = Set(prime_digits)\n    local\
    \ prime_digits_set = Set(prime_digits)\n    local prime_digits_set = Set(prime_digits)\n\
    \    local prime_digits_set = Set(prime_digits)\n    local prime_digits_set =\
    \ Set(prime_digits)\n    local prime_digits_set = Set(prime_digits)\n    local\
    \ prime_digits_set = Set(prime_digits)\n    local prime_digits_set = Set(prime_digits)\n\
    \    local prime_digits_set = Set(prime_digits)\n    local prime_digits_set =\
    \ Set(prime_digits)\n    local prime_digits_set = Set(prime_digits)\n    local\
    \ prime_digits_set = Set(prime_digits)\n    local prime_digits_set = Set(prime_digits)\n\
    \    local prime_digits_set = Set(prime_digits)\n    local prime_digits_set =\
    \ Set(prime_digits)\n    local prime_digits_set = Set(prime_digits)\n    local\
    \ prime_digits_set = Set(prime_digits)\n    local prime_digits_set = Set(prime_digits)\n\
    \    local prime_digits_set = Set(prime_digits)\n    local prime_digits_set =\
    \ Set(prime_digits)\n    local prime_digits_set = Set(prime_digits)\n\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp535ih3w3.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp535ih3w3.jl:1\n\
    in expression starting at /tmp/tmp535ih3w3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    local digits = num\n    local primes\
    \ = prime_digits(digits)\n    local prime_digits_count = length(primes)\n    \n\
    \    if prime_digits_count > 0 then\n        local prime_digits_count_2 = prime_digits_count\
    \ - 1\n        local prime_digits_count_3 = prime_digits_count_2 - 1\n       \
    \ local prime_digits_count_4 = prime_digits_count_3 - 1\n        local prime_digits_count_5\
    \ = prime_digits_count_4 - 1\n        local prime_digits_count_6 = prime_digits_count_5\
    \ - 1\n        local prime_digits_count_7 = prime_digits_count_6 - 1\n       \
    \ local prime_digits_count_8 = prime_digits_count_7 - 1\n        local prime_digits_count_9\
    \ = prime_digits_count_8 - 1\n        local prime_digits_count_10 = prime_digits_count_9\
    \ - 1\n        local prime_digits_count_11 = prime_digits_count_10 - 1\n     \
    \   local prime_digits_count_12 = prime_digits_count_11 - 1\n        local prime_digits_count_13\
    \ = prime_digits_count_12 - 1\n        local prime_digits_count_14 = prime_digits_count_13\
    \ - 1\n        local prime_digits_count_15 = prime_digits_count_14 - 1\n     \
    \   local prime_digits_count_16 = prime_digits_count_15 - 1\n        local prime_digits_count_17\
    \ = prime_digits_count_16 - 1\n        local prime_digits_count_18 = prime_digits_count_17\
    \ - 1\n        local prime_digits_count_19 = prime_digits_count_18 - 1\n     \
    \   local prime_digits_count_20 = prime_digits_count_19 - 1\n        local prime_digits_count_21\
    \ = prime_digits_count_20 - 1\n        local prime_digits_count_22 = prime_digits_count_21\
    \ - 1\n        local prime_digits_count_23 = prime_digits_count_22 - 1\n     \
    \   local prime_digits_count_24 = prime_digits_count_23 - 1\n        local prime_digits_count_25\
    \ = prime_digits_count_24 - 1\n        local prime_digits_count_26 = prime_digits_count_25\
    \ - 1\n        local prime_digits_count_27 = prime_digits_count_26 - 1\n     \
    \   local prime_digits_count_28 = prime_digits_count_27 - 1\n        local prime_digits_count_29\
    \ = prime_digits_count_28 - 1\n        local prime_digit\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpus6mb1c7.jl:1\nin expression starting at /tmp/tmpus6mb1c7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   digits = num.chars\n    \n    primes = prime_digits(digits)\n    \n    prime_digits_count\
    \ = primes.count\n    \n    prime_digits_count = prime_digits_count - 1\n    \n\
    \    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digit\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt1cz_z8x.jl:1\nin expression starting at /tmp/tmpt1cz_z8x.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    digits = num.chars\n    \n    primes\
    \ = prime_digits(digits)\n    \n    prime_digits_count = length(primes)\n    \n\
    \    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count \nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_wf0g9zq.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_wf0g9zq.jl:1\n\
    in expression starting at /tmp/tmp_wf0g9zq.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   hex_list = num.chars().filter(|c| c >= '0' and c <= '9').collect::[Char]\n\
    \    \n    hex_list.iter().filter(|c| c >= 'A' and c <= 'F').count() \n    \n\
    \    hex_list.iter().filter(|c| c >= 'A' and c <= 'F').count() \n    \n    hex_list.iter().filter(|c|\
    \ c >= '0' and c <= '9').count() \n    \n    hex_list.iter().filter(|c| c >= '0'\
    \ and c <= '9').count() \n    \n    hex_list.iter().filter(|c| c >= 'A' and c\
    \ <= 'F').count() \n    \n    hex_list.iter().filter(|c| c >= '0' and c <= '9').count()\
    \ \n    \n    hex_list.iter().filter(|c| c >= 'A' and c <= 'F').count() \n   \
    \ \n    hex_list.iter().filter(|c| c >= '0' and c <= '9').count() \n    \n   \
    \ hex_list.iter().filter(|c| c >= 'A' and c <= 'F').count() \n    \n    hex_list.iter().filter(|c|\
    \ c >= '0' and c <= '9').count() \n    \n    hex_list.iter().filter(|c| c >= 'A'\
    \ and c <= 'F').count() \n    \n    hex_list.iter().filter(|c| c >= '0' and c\
    \ <= '9').count() \n    \n    hex_list.iter().filter(|c| c >= 'A' and c <= 'F').count()\
    \ \n    \n    hex_list.iter().filter(|c| c >= '0' and c <= '9').count() \n   \
    \ \n    hex_list.iter().filter(|c| c >= 'A' and c <= 'F').count() \n    \n   \
    \ hex_list.iter().filter(|c| c >= '0' and c <= '9').count() \n    \n    hex_list.iter().filter(|c|\
    \ c >= 'A' and c <= 'F').count() \n    \n    hex_list.iter().filter(|c| c >= '0'\
    \ and c <= '9').count() \n    \n    hex_list.iter().filter(|c| c >= 'A' and c\
    \ <= 'F').count() \n    \n    hex_list.iter().filter(|c| c >= '0' and c <= '9\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqi1kn1n1.jl:27\nin expression starting at\
    \ /tmp/tmpqi1kn1n1.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    local hex_key = 0\n    \n    if num\
    \ == \"\" then\n        return 0\n    end\n    \n    for char in num:\n      \
    \  if char == \"A\" then\n            hex_key = hex_key + 1\n        end\n   \
    \     if char == \"B\" then\n            hex_key = hex_key + 2\n        end\n\
    \        if char == \"C\" then\n            hex_key = hex_key + 3\n        end\n\
    \        if char == \"D\" then\n            hex_key = hex_key + 4\n        end\n\
    \        if char == \"E\" then\n            hex_key = hex_key + 5\n        end\n\
    \        if char == \"F\" then\n            hex_key = hex_key + 6\n        end\n\
    \    end\n    \n    return hex_key\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkriwk7qt.jl:32\nin expression starting at\
    \ /tmp/tmpkriwk7qt.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    local digits = num\n    local count\
    \ = 0\n    local primes = primes\n    local prime_digits = prime_digits\n    local\
    \ prime_digits_count = prime_digits_count\n    local prime_digits_sum = prime_digits_sum\n\
    \    local prime_digits_product = prime_digits_product\n    local prime_digits_product2\
    \ = prime_digits_product2\n    local prime_digits_product3 = prime_digits_product3\n\
    \    local prime_digits_product4 = prime_digits_product4\n    local prime_digits_product5\
    \ = prime_digits_product5\n    local prime_digits_product6 = prime_digits_product6\n\
    \    local prime_digits_product7 = prime_digits_product7\n    local prime_digits_product8\
    \ = prime_digits_product8\n    local prime_digits_product9 = prime_digits_product9\n\
    \    local prime_digits_product10 = prime_digits_product10\n    local prime_digits_product11\
    \ = prime_digits_product11\n    local prime_digits_product12 = prime_digits_product12\n\
    \    local prime_digits_product13 = prime_digits_product13\n    local prime_digits_product14\
    \ = prime_digits_product14\n    local prime_digits_product15 = prime_digits_product15\n\
    \    local prime_digits_product16 = prime_digits_product16\n    local prime_digits_product17\
    \ = prime_digits_product17\n    local prime_digits_product18 = prime_digits_product18\n\
    \    local prime_digits_product19 = prime_digits_product19\n    local prime_digits_product20\
    \ = prime_digits_product20\n    local prime_digits_product21 = prime_digits_product21\n\
    \    local prime_digits_product22 = prime_digits_product22\n    local prime_digits_product23\
    \ = prime_digits_product23\n    local prime_digits_product24 = prime_digits_product24\n\
    \    local prime_digits_product25 = prime_digits_product25\n    local prime_digits_product26\
    \ = prime_digits_product26\n    local prime_digits_product27 = prime_digits_product27\n\
    \    local prime_digits_product28 = prime_digits_product28\n    local prime_digits_product29\
    \ = prime_digits_product29\n    local prime_digits_product\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzmjn2jue.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzmjn2jue.jl:1\n\
    in expression starting at /tmp/tmpzmjn2jue.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ count = 0\n    \n    for digit in num\n        \n        if digit in primes\n\
    \            count += 1\n            \n    return count\n    \nend\n</cell>\n\
    <code language=julia-1.3>\n@test hex_key(\"AB\") == 1 \n@test hex_key(\"1077E\"\
    ) == 2 \n@test hex_key(\"ABED1A33\") == 4 \n@test hex_key(\"123456789ABCDEF0\"\
    ) == 6 \n@test hex_key(\"2020\") == 2 \n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that receives a hexadecimal number as a string and counts the number of hexadecimal\
    \ digits that are primes (prime number, or a prime, is a natural number greater\
    \ than 1 that is not a product of two smaller natural numbers).\nHexadecimal digits\
    \ are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\nSo you have to determine a number of the following digits:\
    \ 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\nNote: the input may be empty\
    \ or contain symbols A,B,C,D,E,F only.\nExamples:\nhex_key(\"AB\")\n1\nhex_key(\"\
    1077E\")\n2\nhex_key(\"ABED1A33\")\n4\nhex_key(\"123456789ABCDEF0\")\n6\nhex_key(\"\
    2020\")\n2\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgvcgdmqb.jl:37\nin expression starting at\
    \ /tmp/tmpgvcgdmqb.jl:37\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   digits = num.chars\n    \n    primes = primes_list(digits)\n    \n    primes_count\
    \ = 0\n    \n    for prime in primes\n        if primes_count < prime\n      \
    \      primes_count += 1\n            \n    return primes_count\nend\n</cell>\n\
    <code language=julia-1.0>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.0>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.0>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.0>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.0>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise: Write a function\
    \ that receives a string and returns the number of digits that are primes (prime\
    \ number, or a prime, is a natural number greater than 1 that is not a product\
    \ of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13,\
    \ 17,...\n    So you have to determine a number of the following digits: 2, 3,\
    \ 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the\
    \ input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always\
    \ uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>> hex_key(\"\
    1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"123456789ABCDEF0\"\
    )\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpocywvzd3.jl:39\nin expression starting at\
    \ /tmp/tmpocywvzd3.jl:39\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   digits = num.chars\n    \n    primes = prime_digits(digits)\n    \n    prime_digits_count\
    \ = primes.len()\n    \n    prime_digits_count = prime_digits_count - 1\n    \n\
    \    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpenybjne2.jl:1\nin expression starting at /tmp/tmpenybjne2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   digits = num.chars\n    \n    primes = prime_digits(digits)\n    \n    prime_digits_count\
    \ = length(primes)\n    \n    prime_digits_count = prime_digits_count + 1\n  \
    \  \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digit\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2btc26ab.jl:1\nin expression starting at /tmp/tmp2btc26ab.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    local num_str::String = num\n    local\
    \ num_int::Int64 = 0\n    \n    if num_str == \"\" then\n        return 0\n  \
    \  end\n    \n    for char in num_str do\n        if char == \"A\" or char ==\
    \ \"B\" or char == \"C\" or char == \"D\" or char == \"E\" or char == \"F\" then\n\
    \            num_int = num_int + 10\n        elseif char == \"0\" or char == \"\
    1\" then\n            num_int = num_int + 11\n        elseif char == \"2\" then\n\
    \            num_int = num_int + 12\n        elseif char == \"3\" then\n     \
    \       num_int = num_int + 13\n        elseif char == \"4\" then\n          \
    \  num_int = num_int + 14\n        elseif char == \"5\" then\n            num_int\
    \ = num_int + 15\n        elseif char == \"6\" then\n            num_int = num_int\
    \ + 16\n        elseif char == \"7\" then\n            num_int = num_int + 17\n\
    \        elseif char == \"8\" then\n            num_int = num_int + 18\n     \
    \   elseif char == \"9\" then\n            num_int = num_int + 19\n        elseif\
    \ char == \"a\" then\n            num_int = num_int + 10\n        elseif char\
    \ == \"b\" then\n            num_int = num_int + 11\n        elseif char == \"\
    c\" then\n            num_int = num_int + 12\n        elseif char == \"d\" then\n\
    \            num_int = num_int + 13\n        elseif char == \"e\" then\n     \
    \       num_int = num_int + 14\n        elseif char == \"f\" then\n          \
    \  num_int = num_int + 15\n        elseif char == \"0\" then\n            num_int\
    \ = num_int + 16\n        elseif char == \"1\" then\n            num_int = num_int\
    \ + 17\n        elseif char == \"2\" then\n            num_int = num_int + 18\n\
    \        elseif char == \"3\" then\n            num_int = num_int + 19\n     \
    \   elseif char == \"4\" then\n            num_int = num_int + 20\n        elseif\
    \ char == \"5\" then\n            num_int = num_int + 21\n        elseif char\
    \ == \"6\" then\n            num_int = num_int + 22\n        elseif char == \"\
    7\" then\n            num_int = num_int + 23\n        elseif char == \"8\" then\n\
    \            num_int = num_int + 24\n        elseif char == \"9\" then\n     \
    \       num_int = num_int + 25\n        elseif char == \"A\" then\n          \
    \  num_int = num_int + 10\n        elseif char == \"B\" then\n            num_int\
    \ = num_int + 11\n        elseif char == \"C\" then\n            num_int = num_int\
    \ + 12\n        elseif char == \"D\" then\n            num_int = num_int + 13\n\
    \        elseif char == \"\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpc5hj_ogx.jl:32\nin expression starting at /tmp/tmpc5hj_ogx.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   digits = num.digits\n    \n    primes = primes_list(digits)\n    \n    primes_count\
    \ = 0\n    \n    for prime in primes\n        if primes_count < prime\n      \
    \      primes_count += 1\n            \n    primes_count += 2\n    \n    return\
    \ primes_count\nend\n</cell>\n<code language=julia-1.3>\n@test hex_key(\"AB\"\
    ) == 1 \n@test hex_key(\"1077E\") == 2 \n@test hex_key(\"ABED1A33\") == 4 \n@test\
    \ hex_key(\"123456789ABCDEF0\") == 6 \n@test hex_key(\"2020\") == 2 \n</cell>\n\
    <text>\nExercise 3\nWrite a function that receives a hexadecimal number as a string\
    \ and counts the number of hexadecimal digits that are primes (prime number, or\
    \ a prime, is a natural number greater than 1 that is not a product of two smaller\
    \ natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B,\
    \ C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine\
    \ a number of the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\n\
    Note: the input may be empty or contain symbols A,B,C,D,E,F only.\nExamples:\n\
    hex_key(\"AB\")\n1\nhex_key(\"1077E\")\n2\nhex_key(\"ABED1A33\")\n4\nhex_key(\"\
    123456789ABCDEF0\")\n6\nhex_key(\"2020\")\n2\nusing Test\n\n@testset begin\n\n\
    candidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\"\
    ) == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") ==\
    \ 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkcuo2t4f.jl:41\nin expression starting at\
    \ /tmp/tmpkcuo2t4f.jl:41\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    local digits = num\n    local primes\
    \ = primes_list(digits)\n    local primes_count = 0\n    \n    for prime in primes\n\
    \        primes_count = primes_count + 1\n    end\n    \n    return primes_count\n\
    end\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a hexadecimal number as a string and counts the number\
    \ of hexadecimal digits that are primes (prime number, or a prime, is a natural\
    \ number greater than 1 that is not a product of two smaller natural numbers).\n\
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime\
    \ numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of\
    \ the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\nNote: the\
    \ input may be empty or contain symbols A,B,C,D,E,F only.\nExamples:\nhex_key(\"\
    AB\")\n1\nhex_key(\"1077E\")\n2\nhex_key(\"ABED1A33\")\n4\nhex_key(\"123456789ABCDEF0\"\
    )\n6\nhex_key(\"2020\")\n2\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphav37sd9.jl:35\nin expression starting at\
    \ /tmp/tmphav37sd9.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   digits = num.digits\n    \n    primes = prime_digits(digits)\n    \n    prime_digits_count\
    \ = prime_digits_count(digits)\n    \n    prime_digits_count_prime_digits = prime_digits_count_prime_digits(digits)\n\
    \    \n    prime_digits_count_prime_digits_prime_digits = prime_digits_count_prime_digits_prime_digits(digits)\n\
    \    \n    prime_digits_count_prime_digits_prime_digits_prime_digits = prime_digits_count_prime_digits_prime_digits_prime_digits(digits)\n\
    \    \n    prime_digits_count_prime_digits_prime_digits_prime_digits_prime_digits\
    \ = prime_digits_count_prime_digits_prime_digits_prime_digits_prime_digits(digits)\n\
    \    \n    prime_digits_count_prime_digits_prime_digits_prime_digits_prime_digits_prime_digits\
    \ = prime_digits_count_prime_digits_prime_digits_prime_digits_prime_digits_prime_digits(digits)\n\
    \    \n    prime_digits_count_prime_digits_prime_digits_prime_digits_prime_digits_prime_digits_prime_digits\
    \ = prime_digits_count_prime_digits_prime_digits_prime_digits_prime_digits_prime_digits_prime_digits(digits)\n\
    \    \n    prime_digits_count_prime_digits_prime_digits_prime_digits_prime_digits_prime_digits_prime_digits_prime_digits\
    \ = prime_digits_count_prime_digits_prime_digits_prime_digits_prime_digits_prime_digits_prime_digits_prime_digits_prime_digits(digits)\n\
    \    \n    prime_digits_count_prime_digits_prime_digits_prime_digits_prime_digits_prime_digits_prime_digits_prime_digits_prime_digits\
    \ = prime_digits_count_prime_digits_prime_digits_prime_digits_prime_digits_prime_digits_prime_digits_prime_digits_prime_digits_prime_digits(digits)\n\
    \    \n    prime_digits_count_prime_digits_prime_digits_prime_digits_prime_digits_prime_digits_prime_digits_prime_digits_prime_digits_prime_digits_\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpai_pwu8k.jl:1\nin expression starting at /tmp/tmpai_pwu8k.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    \n    hex_digits = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n\
    \    \n    hex_digits_set = Set(hex_digits)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    \n    prime_digits_set = prime_digits_set - hex_digits_set\n    \n    prime_digits_set\
    \ = prime_digits_set - Set(num.chars)\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(num.chars.filter(x -> x == 'A'))\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(num.chars.filter(x -> x == 'B'))\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(num.chars.filter(x -> x == 'C'))\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(num.chars.filter(x -> x == 'D'))\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(num.chars.filter(x -> x == 'E'))\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(num.chars.filter(x -> x == 'F'))\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(num.chars.filter(x -> x == 'A'))\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(num.chars.filter(x -> x == 'B'))\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(num.chars.filter(x -> x == 'C'))\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(num.chars.filter(x -> x == 'D'))\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(num.chars.filter(x -> x == 'E'))\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(num.chars.filter(x -> x == 'F'))\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(num.chars.filter(x -> x == '0'))\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(num.chars.filter(x -> x == '1'))\n    \n    prime_digits_set = prime_digits_set\
    \ - Set(num.chars.filter(x -> x == '2'))\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgrioup6w.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgrioup6w.jl:1\n\
    in expression starting at /tmp/tmpgrioup6w.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    local num_str = num\n    local num_len\
    \ = length(num)\n    local num_digits = floor(num_len / 2)\n    local num_primes\
    \ = 2\n    local num_primes_len = floor(num_len / 2)\n    local num_primes_digits\
    \ = floor(num_len / 2)\n    local num_primes_digits_len = floor(num_len / 2)\n\
    \    \n    local num_primes_digits_len\n    local num_primes_digits_len\n    local\
    \ num_primes_digits\n    local num_primes_digits\n    local num_primes_digits\n\
    \    local num_primes_digits\n    local num_primes_digits\n    local num_primes_digits\n\
    \    local num_primes_digits\n    local num_primes_digits\n    local num_primes_digits\n\
    \    local num_primes_digits\n    local num_primes_digits\n    local num_primes_digits\n\
    \    local num_primes_digits\n    local num_primes_digits\n    local num_primes_digits\n\
    \    local num_primes_digits\n    local num_primes_digits\n    local num_primes_digits\n\
    \    local num_primes_digits\n    local num_primes_digits\n    local num_primes_digits\n\
    \    local num_primes_digits\n    local num_primes_digits\n    local num_primes_digits\n\
    \    local num_primes_digits\n    local num_primes_digits\n    local num_primes_digits\n\
    \    local num_primes_digits\n    local num_primes_digits\n    local num_primes_digits\n\
    \    local num_primes_digits\n    local num_primes_digits\n    local num_primes_digits\n\
    \    local num_primes_digits\n    local num_primes_digits\n    local num_primes_digits\n\
    \    local num_primes_digits\n    local num_primes_digits\n    local num_primes_digits\n\
    \    local num_primes_digits\n    local num_primes_digits\n    local num_primes_digits\n\
    \    local num_primes_digits\n    local num_primes_digits\n    local num_primes_digits\n\
    \    local num_primes_digits\n    local num_primes_digits\n    local num_primes_digits\n\
    \    local num_primes_digits\n    local num_primes_digits\n    local num_primes_digits\n\
    \    local num_primes_digits\n    local num_primes_digits\n    local num_primes_digits\n\
    \    local num_primes_digits\n    local num_primes_digits\n    local num_primes_digits\n\
    \    local num_primes_digits\n    local num_primes_digits\n    local num_primes_digits\n\
    \nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmeyqpz0i.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmeyqpz0i.jl:1\n\
    in expression starting at /tmp/tmpmeyqpz0i.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    num = num.upper()\n    \n    count = 0\n \
    \   for c in num\n        if c == \"A\" or c == \"B\" or c == \"C\" or c == \"\
    D\" or c == \"E\" or c == \"F\"\n            count += 1\n    return count\nend\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that receives a hexadecimal number as a string and counts the number\
    \ of hexadecimal digits that are primes (prime number, or a prime, is a natural\
    \ number greater than 1 that is not a product of two smaller natural numbers).\n\
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime\
    \ numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of\
    \ the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote:\
    \ the function should return an Int64 value.\nExamples:\nhex_key(\"AB\")\n1\n\
    hex_key(\"1077E\")\n2\nhex_key(\"ABED1A33\")\n4\nhex_key(\"123456789ABCDEF0\"\
    )\n6\nhex_key(\"2020\")\n2\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"c\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9olr902p.jl:28\nin expression starting at /tmp/tmp9olr902p.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19]\n\
    \    prime_digits_set = Set(prime_digits)\n    \n    hex_digits = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255]\n\
    \    hex_digits_set = Set(hex_digits)\n    \n    hex_digits_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpetjprodt.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpetjprodt.jl:1\n\
    in expression starting at /tmp/tmpetjprodt.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(100)\n    \n  \
    \  prime_digits = primes[primes.index{num}..end]\n    \n    prime_digits_count\
    \ = prime_digits.count{|x| primes.index{x} == primes.index{num}}\n    \n    return\
    \ prime_digits_count\nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\"\
    )\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\"\
    )\n</cell>\n<code language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that receives a positive integer as a string and returns\
    \ the sum of the digits of that number.\nExamples:\n    >>> sum_digits(\"123\"\
    )\n    6\n    >>> sum_digits(\"12\")\n    2\n    >>> sum_digits(\"12345\")\n \
    \   10\n    >>> sum_digits(\"1234567\")\n    21\n    >>> sum_digits(\"123456789\"\
    )\n    45\n    >>> sum_digits(\"1234567890\")\n    45\n    >>> sum_digits(\"12345678901\"\
    )\n    45\n    >>> sum_digits(\"123456789012\")\n    45\n    >>> sum_digits(\"\
    1234567890123\")\n    45\n    >>> sum_digits(\"12345678901234\")\n    45\n   \
    \ >>> sum_digits(\"123456789012345\")\n    45\n    >>> sum_digits(\"1234567890123456\"\
    )\n    45\n    >>> sum_digits(\"12345678901234567\")\n    45\n    >>> sum_digits(\"\
    1234567890123456789\")\n    45\n    >>> sum_digits(\"12345678901234567890\")\n\
    \    45\n    >>> sum_digits(\"123456789012345678901\")\n    45\n    >>> sum_digits(\"\
    1234567890123456789012\")\n    45\n    >>> sum_digits(\"12345678901234567890123\"\
    )\n    45\n    >>> sum_digits(\"123456789012345678901234\")\n    45\n    >>> sum_digits(\"\
    1234567890123456789012345\")\n    45\n    >>> sum_digits(\"12345678901234567890123456\"\
    )\n    45\n    >>> sum_digits(\"123456789012345678901234567\")\n    45\n    >>>\
    \ sum_digits(\"12345678901234567890123456789\")\n    45\n    >>> sum_digits(\"\
    123456789012345678901234567890\")\n    45\n    >>> sum_digits(\"1234567890123456789012345678901\"\
    )\n    45\n    >>> sum_digits(\"12345678901234567890123456789012\")\n    45\n\
    \    >>> sum_digits(\"123456789012345678901234567890123\")\n    45\n    >>> sum_digits(\"\
    123456789\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_1j3g34p.jl:29\nin expression starting at\
    \ /tmp/tmp_1j3g34p.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    local digits = num\n    local count\
    \ = 0\n    local prime_digits = 2\n    local prime_digit_count = 0\n    local\
    \ prime_digit_count_2 = 0\n    local prime_digit_count_3 = 0\n    local prime_digit_count_4\
    \ = 0\n    local prime_digit_count_5 = 0\n    local prime_digit_count_6 = 0\n\
    \    local prime_digit_count_7 = 0\n    local prime_digit_count_8 = 0\n    local\
    \ prime_digit_count_9 = 0\n    local prime_digit_count_10 = 0\n    local prime_digit_count_11\
    \ = 0\n    local prime_digit_count_12 = 0\n    local prime_digit_count_13 = 0\n\
    \    local prime_digit_count_14 = 0\n    local prime_digit_count_15 = 0\n    local\
    \ prime_digit_count_16 = 0\n    local prime_digit_count_17 = 0\n    local prime_digit_count_18\
    \ = 0\n    local prime_digit_count_19 = 0\n    local prime_digit_count_20 = 0\n\
    \    local prime_digit_count_21 = 0\n    local prime_digit_count_22 = 0\n    local\
    \ prime_digit_count_23 = 0\n    local prime_digit_count_24 = 0\n    local prime_digit_count_25\
    \ = 0\n    local prime_digit_count_26 = 0\n    local prime_digit_count_27 = 0\n\
    \    local prime_digit_count_28 = 0\n    local prime_digit_count_29 = 0\n    local\
    \ prime_digit_count_30 = 0\n    local prime_digit_count_31 = 0\n    local prime_digit_count_32\
    \ = 0\n    local prime_digit_count_33 = 0\n    local prime_digit_count_34 = 0\n\
    \    local prime_digit_count_35 = 0\n    local prime_digit_count_36 = 0\n    local\
    \ prime_digit_count_37 = 0\n    local prime_digit_count_38 = 0\n    local prime_digit_count_39\
    \ = 0\n    local prime_digit_count_40 = 0\n    local prime_digit_count_41 = 0\n\
    \    local prime_digit_count_42 = 0\n    local prime_digit_count_43 = 0\n    local\
    \ prime_digit_count_44 = 0\n    local prime_digit_count_45 = 0\n    local prime_digit_count_46\
    \ = 0\n    local prime_digit_count_47 = 0\n    local prime_digit_count_48 = 0\n\
    \    local prime_digit_count_49 = 0\n    local prime_digit_count_50 = 0\n    local\
    \ prime_digit_count_51 = 0\n    local prime_digit_count_52 = 0\n    local prime_digit_count_53\
    \ = 0\n    local prime_digit_count_54 = 0\n    local prime_digit_count_55 = 0\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp070djnfm.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp070djnfm.jl:1\n\
    in expression starting at /tmp/tmp070djnfm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    hex = num.chars\n    hex.each{|c| if\
    \ c == \"A\" || c == \"B\" || c == \"C\" || c == \"D\" || c == \"E\" || c == \"\
    F\" \n        hex.remove(c)\n    end}\n    \n    hex.each{|c| if c == \"2\" ||\
    \ c == \"3\" || c == \"5\" || c == \"7\" || c == \"B\" || c == \"D\" || c == \"\
    E\" \n        hex.remove(c)\n    end}\n    \n    hex.each{|c| if c == \"A\" ||\
    \ c == \"B\" || c == \"C\" || c == \"D\" || c == \"E\" || c == \"F\" \n      \
    \  hex.remove(c)\n    end}\n    \n    hex.each{|c| if c == \"0\" || c == \"1\"\
    \ || c == \"2\" || c == \"3\" || c == \"4\" || c == \"5\" || c == \"6\" || c ==\
    \ \"7\" || c == \"8\" || c == \"9\" \n        hex.remove(c)\n    end}\n    \n\
    \    hex.each{|c| if c == \"A\" || c == \"B\" || c == \"C\" || c == \"D\" || c\
    \ == \"E\" || c == \"F\" \n        hex.remove(c)\n    end}\n    \n    hex.each{|c|\
    \ if c == \"0\" || c == \"1\" || c == \"2\" || c == \"3\" || c == \"4\" || c ==\
    \ \"5\" || c == \"6\" || c == \"7\" || c == \"8\" || c == \"9\" \n        hex.remove(c)\n\
    \    end}\n    \n    hex.each{|c| if c == \"A\" || c == \"B\" || c == \"C\" ||\
    \ c == \"D\" || c == \"E\" || c == \"F\" \n        hex.remove(c)\n    end}\n \
    \   \n    hex.each{|c| if c == \"0\" || c == \"1\" || c == \"2\" || c == \"3\"\
    \ || c == \"4\" || c == \"5\" || c == \"6\" || c == \"7\" || c == \"8\" || c ==\
    \ \"9\" \n        hex.remove(c)\n    end}\n    \n    hex.each{|c| if c == \"A\"\
    \ || c == \"B\" || c == \"C\" || c == \"D\" || c == \"E\" || c == \"F\" \n   \
    \     hex.remove(c)\n    end}\n    \n    hex.each{|c| if c == \"0\" || c == \"\
    1\" || c == \"2\" || c == \"3\" || c == \"4\" || c == \"5\" || c == \"6\" || c\
    \ == \"7\" || c == \"8\" || c == \"9\" \n        hex.remove(c)\nusing Test\n\n\
    @testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4qt_y83x.jl:26\nin expression starting at\
    \ /tmp/tmp4qt_y83x.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = prime_numbers(num)\n    \n\
    \    count = 0\n    for p in primes\n        if p > 1\n            count += 1\n\
    \    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 3\nWrite a function that receives a string\
    \ and returns a string with the first letter of each word capitalized.\nExamples:\n\
    >>> capitalize(\"Hello World\")\n\"Hello World\"\n>>> capitalize(\"Hello World!\"\
    )\n\"Hello World!\"\n>>> capitalize(\"Hello World?\")\n\"Hello World?\"\n>>> capitalize(\"\
    Hello World!\")\n\"Hello World!\"\n>>> capitalize(\"Hello World?\")\n\"Hello World?\"\
    \n>>> capitalize(\"Hello World!\")\n\"Hello World!\"\n>>> capitalize(\"Hello World?\"\
    )\n\"Hello World?\"\n>>> capitalize(\"Hello World!\")\n\"Hello World!\"\n>>> capitalize(\"\
    Hello World?\")\n\"Hello World?\"\n>>> capitalize(\"Hello World!\")\n\"Hello World!\"\
    \n>>> capitalize(\"Hello World?\")\n\"Hello World?\"\n>>> capitalize(\"Hello World!\"\
    )\n\"Hello World!\"\n>>> capitalize(\"Hello World?\")\n\"Hello World?\"\n>>> capitalize(\"\
    Hello World!\")\n\"Hello World!\"\n>>> capitalize(\"Hello World?\")\n\"Hello World?\"\
    \n>>> capitalize(\"Hello World!\")\n\"Hello World!\"\n>>> capitalize(\"Hello World?\"\
    )\n\"Hello World?\"\n>>> capitalize(\"Hello World!\")\n\"Hello World!\"\n>>> capitalize(\"\
    Hello World?\")\n\"Hello World?\"\n>>> capitalize(\"Hello World!\")\n\"Hello World!\"\
    \n>>> capitalize(\"Hello World?\")\n\"Hello World?\"\n>>> capitalize(\"Hello World!\"\
    )\n\"Hello World!\"\n>>> capitalize(\"Hello World?\")\n\"Hello World?\"\n>>> capitalize(\"\
    Hello World!\")\n\"Hello World!\"\n>>> capitalize(\"Hello World?\")\n\"Hello World?\"\
    \n>>> capitalize(\"Hello World!\")\n\"Hello World!\"\n>>> capitalize(\"Hello World?\"\
    )\n\"Hello World?\"\n>>> capitalize(\"Hello World!\")\n\"Hello World!\"\n>>> capitalize(\"\
    Hello World?\")\n\"Hello World?\"\n>>> capitalize(\"Hello World!\")\n\"Hello World!\"\
    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv9k6hbkw.jl:34\nin expression starting at\
    \ /tmp/tmpv9k6hbkw.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   digits = num.chars\n    \n    primes = primes_list(digits)\n    \n    primes_count\
    \ = 0\n    for prime in primes\n        if primes_count < prime\n            primes_count\
    \ += 1\n            \n    primes_count += primes_count(digits)\n    \n    return\
    \ primes_count\nend\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t\
    @test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp0lgv2szg.jl:32\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0lgv2szg.jl:1\n\
    in expression starting at /tmp/tmp0lgv2szg.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ digits = num.chars\n    \n    prime_digits = primes.filter( x -> digits.contains(x))\n\
    \    \n    return prime_digits.count\nend\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a string\
    \ and returns the number of characters that are not letters (uppercase or lowercase).\n\
    Examples:\n>>> not_letters(\"Hello World\")\n5\n>>> not_letters(\"Hello World!\"\
    )\n4\n>>> not_letters(\"Hello World?\")\n3\n>>> not_letters(\"Hello World!\")\n\
    4\n>>> not_letters(\"Hello World?\")\n3\n>>> not_letters(\"Hello World!\")\n4\n\
    >>> not_letters(\"Hello World?\")\n3\n>>> not_letters(\"Hello World!\")\n4\n>>>\
    \ not_letters(\"Hello World?\")\n3\n>>> not_letters(\"Hello World!\")\n4\n>>>\
    \ not_letters(\"Hello World?\")\n3\n>>> not_letters(\"Hello World!\")\n4\n>>>\
    \ not_letters(\"Hello World?\")\n3\n>>> not_letters(\"Hello World!\")\n4\n>>>\
    \ not_letters(\"Hello World?\")\n3\n>>> not_letters(\"Hello World!\")\n4\n>>>\
    \ not_letters(\"Hello World?\")\n3\n>>> not_letters(\"Hello World!\")\n4\n>>>\
    \ not_letters(\"Hello World?\")\n3\n>>> not_letters(\"Hello World!\")\n4\n>>>\
    \ not_letters(\"Hello World?\")\n3\n>>> not_letters(\"Hello World!\")\n4\n>>>\
    \ not_letters(\"Hello World?\")\n3\n>>> not_letters(\"Hello World!\")\n4\n>>>\
    \ not_letters(\"Hello World?\")\n3\n>>> not_letters(\"Hello World!\")\n4\n>>>\
    \ not_letters(\"Hello World?\")\n3\n>>> not_letters(\"Hello World!\")\n4\n>>>\
    \ not_letters(\"Hello World?\")\n3\n>>> not_letters(\"Hello World!\")\n4\n>>>\
    \ not_letters(\"Hello World?\")\n3\n>>> not_letters(\"Hello World!\")\n4\n>>>\
    \ not_letters(\"Hello World?\")\n3\n>>> not_letters(\"Hello World!\")\n4\n>>>\
    \ not_letters(\"Hello World\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy3v2y1al.jl:33\nin expression starting at\
    \ /tmp/tmpy3v2y1al.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    local num_str = num\n    local num_len\
    \ = length(num)\n    local num_digits = floor(num_len/4)\n    local num_primes\
    \ = 2\n    local num_primes_len = num_len\n    local num_primes_digits = floor(num_primes_len/4)\n\
    \    local num_primes_digits_len = num_primes_len\n    local num_primes_digits_len\
    \ = num_primes_len\n    local num_primes_digits_len = num_primes_len\n    local\
    \ num_primes_digits_len = num_primes_len\n    local num_primes_digits_len = num_primes_len\n\
    \    local num_primes_digits_len = num_primes_len\n    local num_primes_digits_len\
    \ = num_primes_len\n    local num_primes_digits_len = num_primes_len\n    local\
    \ num_primes_digits_len = num_primes_len\n    local num_primes_digits_len = num_primes_len\n\
    \    local num_primes_digits_len = num_primes_len\n    local num_primes_digits_len\
    \ = num_primes_len\n    local num_primes_digits_len = num_primes_len\n    local\
    \ num_primes_digits_len = num_primes_len\n    local num_primes_digits_len = num_primes_len\n\
    \    local num_primes_digits_len = num_primes_len\n    local num_primes_digits_len\
    \ = num_primes_len\n    local num_primes_digits_len = num_primes_len\n    local\
    \ num_primes_digits_len = num_primes_len\n    local num_primes_digits_len = num_primes_len\n\
    \    local num_primes_digits_len = num_primes_len\n    local num_primes_digits_len\
    \ = num_primes_len\n    local num_primes_digits_len = num_primes_len\n    local\
    \ num_primes_digits_len = num_primes_len\n    local num_primes_digits_len = num_primes_len\n\
    \    local num_primes_digits_len = num_primes_len\n    local num_primes_digits_len\
    \ = num_primes_len\n    local num_primes_digits_len = num_primes_len\n    local\
    \ num_primes_digits_len = num_primes_len\n    local num_primes_digits_len = num_primes_len\n\
    \    local num_primes_digits_len = num_primes_len\n    local num_primes_digits_len\
    \ = num_primes_len\n    local num_primes_digits_len = num_primes_len\n    local\
    \ num_primes_digits_len = num_primes_len\n    local num_primes_digits_len = num_primes_len\n\
    \nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplmco_4_n.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplmco_4_n.jl:1\n\
    in expression starting at /tmp/tmplmco_4_n.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   digits = num.chars()\n    \n    primes = primes_list(digits)\n    \n    primes_count\
    \ = primes.count{|x| x == 1}\n    \n    primes_count += primes.count{|x| x ==\
    \ 2}\n    \n    primes_count += primes.count{|x| x == 3}\n    \n    primes_count\
    \ += primes.count{|x| x == 4}\n    \n    primes_count += primes.count{|x| x ==\
    \ 5}\n    \n    primes_count += primes.count{|x| x == 6}\n    \n    primes_count\
    \ += primes.count{|x| x == 7}\n    \n    primes_count += primes.count{|x| x ==\
    \ 8}\n    \n    primes_count += primes.count{|x| x == 9}\n    \n    primes_count\
    \ += primes.count{|x| x == 10}\n    \n    primes_count += primes.count{|x| x ==\
    \ 11}\n    \n    primes_count += primes.count{|x| x == 12}\n    \n    primes_count\
    \ += primes.count{|x| x == 13}\n    \n    primes_count += primes.count{|x| x ==\
    \ 14}\n    \n    primes_count += primes.count{|x| x == 15}\n    \n    primes_count\
    \ += primes.count{|x| x == 16}\n    \n    primes_count += primes.count{|x| x ==\
    \ 17}\n    \n    primes_count += primes.count{|x| x == 18}\n    \n    primes_count\
    \ += primes.count{|x| x == 19}\n    \n    primes_count += primes.count{|x| x ==\
    \ 20}\n    \n    primes_count += primes.count{|x| x == 21}\n    \n    primes_count\
    \ += primes.count{|x| x == 22}\n    \n    primes_count += primes.count{|x| x ==\
    \ 23}\n    \n    primes_count += primes.count{|x| x == 24}\n    \n    primes_count\
    \ += primes.count{|x| x == 25}\n    \n    primes_count += primes.count{|x| x ==\
    \ 26}\n    \n    primes_count += primes.count{|x| x == 27}\n    \n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmputjk9kyn.jl:31\nin expression starting at\
    \ /tmp/tmputjk9kyn.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   digits = num.chars\n    \n    hexDigits = digits[0..2]\n    \n    hexDigits.map!{|x|\
    \ x.hex}\n    \n    hexDigits.map!{|x| x.to_i}\n    \n    hexDigits.map!{|x| x\
    \ % 2 == 0 ? x : 0}\n    \n    hexDigits.map!{|x| x % 3 == 0 ? x : 0}\n    \n\
    \    hexDigits.map!{|x| x % 5 == 0 ? x : 0}\n    \n    hexDigits.map!{|x| x %\
    \ 7 == 0 ? x : 0}\n    \n    hexDigits.map!{|x| x % 11 == 0 ? x : 0}\n    \n \
    \   hexDigits.map!{|x| x % 13 == 0 ? x : 0}\n    \n    hexDigits.map!{|x| x %\
    \ 17 == 0 ? x : 0}\n    \n    hexDigits.map!{|x| x % 19 == 0 ? x : 0}\n    \n\
    \    hexDigits.map!{|x| x % 23 == 0 ? x : 0}\n    \n    hexDigits.map!{|x| x %\
    \ 29 == 0 ? x : 0}\n    \n    hexDigits.map!{|x| x % 31 == 0 ? x : 0}\n    \n\
    \    hexDigits.map!{|x| x % 37 == 0 ? x : 0}\n    \n    hexDigits.map!{|x| x %\
    \ 41 == 0 ? x : 0}\n    \n    hexDigits.map!{|x| x % 43 == 0 ? x : 0}\n    \n\
    \    hexDigits.map!{|x| x % 47 == 0 ? x : 0}\n    \n    hexDigits.map!{|x| x %\
    \ 49 == 0 ? x : 0}\n    \n    hexDigits.map!{|x| x % 53 == 0 ? x : 0}\n    \n\
    \    hexDigits.map!{|x| x % 59 == 0 ? x : 0}\n    \n    hexDigits.map!{|x| x %\
    \ 61 == 0 ? x : 0}\n    \n    hexDigits.map!{|x| x % 67 == 0 ? x : 0}\n    \n\
    \    hexDigits.map!{|x| x % 71 == 0 ? x : 0}\n    \n    hexDigits.map!{|x| x %\
    \ 73 == 0 ? x : 0}\n    \n    hexDigits.map!{|x| \nusing Test\n\n@testset begin\n\
    \ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj1mjnj1r.jl:31\nin expression starting at\
    \ /tmp/tmpj1mjnj1r.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   digits = num.chars\n    \n    primes = primes_list(digits)\n    \n    primes_count\
    \ = 0\n    \n    for prime in primes\n        primes_count += primes_count(digits,\
    \ prime)\n    end\n    \n    return primes_count\nend\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a hexadecimal\
    \ number as a string and returns the number of digits that are primes (prime number,\
    \ or a prime, is a natural number greater than 1 that is not a product of two\
    \ smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, B (=decimal 11),\
    \ D (=decimal 13).\nNote: the input may be empty string or symbols A,B,C,D,E,F\
    \ are always uppercase.\nExamples:\nhex_key(\"AB\")\n1\nhex_key(\"1077E\")\n2\n\
    hex_key(\"ABED1A33\")\n4\nhex_key(\"123456789ABCDEF0\")\n6\nhex_key(\"2020\")\n\
    2\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0zaym29m.jl:39\nin expression starting at\
    \ /tmp/tmp0zaym29m.jl:39\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   digits = num.chars\n    \n    primes = prime_digits(digits)\n    \n    prime_digits_count\
    \ = primes.len\n    \n    prime_digits_count = prime_digits_count + 1\n    \n\
    \    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digit\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2in3_r3s.jl:1\nin expression starting at /tmp/tmp2in3_r3s.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    primes_set\
    \ = Set(primes)\n    \n    hex_key = 0\n    \n    for digit in num\n        \n\
    \        if digit in primes_set\n            \n            hex_key += 1\n    \
    \        \n    return hex_key\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpna2i5em_.jl:38\nin expression starting at\
    \ /tmp/tmpna2i5em_.jl:38\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = prime_digits(num)\n    prime_digits_count\
    \ = length(primes)\n    \n    if prime_digits_count > 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        for prime in primes\n          \
    \  \n            if prime == prime_digits_count\n                \n          \
    \      prime_digits_count = prime_digits_count - 1\n                \n       \
    \         if prime_digits_count == 0\n                    \n                 \
    \   return prime\n                \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwvdyuksh.jl:44\nin expression starting at\
    \ /tmp/tmpwvdyuksh.jl:44\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    digits = num.chars\n    \n    primes\
    \ = prime_digits(digits)\n    \n    prime_digits_count = primes.count\n    \n\
    \    hex_key = 0\n    \n    if prime_digits_count > 0 \n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        for digit in digits \n         \
    \   \n            if digit in primes\n                \n                hex_key\
    \ += 1\n            \n            else\n                \n                break\n\
    \            \n    return hex_key\n    \nend\n</cell>\n<code language=julia-1.0>\n\
    hex_key(\"AB\")\n</cell>\n<code language=julia-1.0>\nhex_key(\"1077E\")\n</cell>\n\
    <code language=julia-1.0>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.0>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.0>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 3\nWrite a function that receives a hexadecimal\
    \ number as a string and returns the number of hexadecimal digits that are primes\
    \ (prime number, or a prime, is a natural number greater than 1 that is not a\
    \ product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\n\
    So you have to determine a number of the following digits: 2, 3, 5, 7, B (=decimal\
    \ 11), D (=decimal 13).\nNote: the input may or may not be correct or empty, and\
    \ symbols A,B,C,D,E,F are always uppercase.\nExamples:\nhex_key(\"AB\")\n1\nhex_key(\"\
    1077E\")\n2\nhex_key(\"ABED1A33\")\n4\nhex_key(\"123456789ABCDEF0\")\n6\nhex_key(\"\
    2020\")\n2\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplgzd_e73.jl:50\nin expression starting at\
    \ /tmp/tmplgzd_e73.jl:50\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    num = num.upper()\n    \n    count = 0\n \
    \   \n    for char in num\n        if char == \"A\" or char == \"B\" or char ==\
    \ \"C\" or char == \"D\" or char == \"E\" or char == \"F\"\n            count\
    \ += 1\n            \n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a hexadecimal\
    \ number as a string and counts the number of hexadecimal digits that are primes\
    \ (prime number, or a prime, is a natural number greater than 1 that is not a\
    \ product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\n\
    So you have to determine a number of the following digits: 2, 3, 5, 7, B (=decimal\
    \ 11), D (=decimal 13).\nNote: the input may contain symbols A,B,C,D,E,F but you\
    \ may assume the input is always correct or empty string.\nExamples:\nhex_key(\"\
    AB\")\n1\nhex_key(\"1077E\")\n2\nhex_key(\"ABED1A33\")\n4\nhex_key(\"123456789ABCDEF0\"\
    )\n6\nhex_key(\"2020\")\n2\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"char\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_lz5zgt2.jl:29\nin expression starting at /tmp/tmp_lz5zgt2.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   digits = num.digits\n    \n    primes = primes_list(digits)\n    \n    primes_count\
    \ = 0\n    \n    for prime in primes\n        if prime_check(digits, prime)\n\
    \            primes_count += 1\n            \n    return primes_count\nend\n</cell>\n\
    <code language=julia-1.0>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.0>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.0>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.0>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.0>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a string and returns the number of characters that are\
    \ not letters.\nExamples:\n>>> not_letters(\"ABCD\")\n3\n>>> not_letters(\"ABCD1234\"\
    )\n5\n>>> not_letters(\"ABCD1234ABCD1234\")\n7\n>>> not_lettersn\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9hd1q5mi.jl:39\nin expression starting at\
    \ /tmp/tmp9hd1q5mi.jl:39\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   digits = num.digits\n    \n    primes = primes_list(digits)\n    \n    primes_count\
    \ = primes.count\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp83yv6bad.jl:1\nin expression starting at /tmp/tmp83yv6bad.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ prime_digits = primes.filter( p -> num.chars.contains(p.chars) )\n    \n   \
    \ prime_digits_count = prime_digits.count\n    \n    prime_digits_count_prime\
    \ = prime_digits_count - prime_digits_count.filter( p -> p == 2)\n    \n    prime_digits_count_prime_2\
    \ = prime_digits_count_prime.filter( p -> p == 3)\n    \n    prime_digits_count_prime_3\
    \ = prime_digits_count_prime_2.filter( p -> p == 5)\n    \n    prime_digits_count_prime_5\
    \ = prime_digits_count_prime_3.filter( p -> p == 7)\n    \n    prime_digits_count_prime_7\
    \ = prime_digits_count_prime_5.filter( p -> p == 11)\n    \n    prime_digits_count_prime_11\
    \ = prime_digits_count_prime_7.filter( p -> p == 13)\n    \n    prime_digits_count_prime_13\
    \ = prime_digits_count_prime_11.filter( p -> p == 17)\n    \n    prime_digits_count_prime_17\
    \ = prime_digits_count_prime_13.filter( p -> p == 19)\n    \n    prime_digits_count_prime_19\
    \ = prime_digits_count_prime_17.filter( p -> p == 23)\n    \n    prime_digits_count_prime_23\
    \ = prime_digits_count_prime_19.filter( p -> p == 29)\n    \n    prime_digits_count_prime_29\
    \ = prime_digits_count_prime_23.filter( p -> p == 37)\n    \n    prime_digits_count_prime_37\
    \ = prime_digits_count_prime_29.filter( p -> p == 41)\n    \n    prime_digits_count_prime_41\
    \ = prime_digits_count_prime_37.filter( p -> p == 43)\n    \n    prime_digits_count_prime_45\
    \ = prime_digits_count_prime_41.filter( p -> p == 47)\n    \n    prime_digits_count_prime_47\
    \ = prime_digits_count_prime_45.filter( p -> p == 59)\n    \n    prime_digits_count_prime_59\
    \ = prime_digits_count_prime_47.filter( p -> p == 71)\n    \n    prime_digits_count_prime_71\
    \ = prime_digits_count_\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjchgjegv.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjchgjegv.jl:1\n\
    in expression starting at /tmp/tmpjchgjegv.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = prime_digits(num)\n \
    \   \n    if prime_digits == []\n        return 0\n    \n    prime_digits = prime_digits[1..]\n\
    \    \n    prime_digits = prime_digits[1..]\n    \n    prime_digits = prime_digits[1..]\n\
    \    \n    prime_digits = prime_digits[1..]\n    \n    prime_digits = prime_digits[1..]\n\
    \    \n    prime_digits = prime_digits[1..]\n    \n    prime_digits = prime_digits[1..]\n\
    \    \n    prime_digits = prime_digits[1..]\n    \n    prime_digits = prime_digits[1..]\n\
    \    \n    prime_digits = prime_digits[1..]\n    \n    prime_digits = prime_digits[1..]\n\
    \    \n    prime_digits = prime_digits[1..]\n    \n    prime_digits = prime_digits[1..]\n\
    \    \n    prime_digits = prime_digits[1..]\n    \n    prime_digits = prime_digits[1..]\n\
    \    \n    prime_digits = prime_digits[1..]\n    \n    prime_digits = prime_digits[1..]\n\
    \    \n    prime_digits = prime_digits[1..]\n    \n    prime_digits = prime_digits[1..]\n\
    \    \n    prime_digits = prime_digits[1..]\n    \n    prime_digits = prime_digits[1..]\n\
    \    \n    prime_digits = prime_digits[1..]\n    \n    prime_digits = prime_digits[1..]\n\
    \    \n    prime_digits = prime_digits[1..]\n    \n    prime_digits = prime_digits[1..]\n\
    \    \n    prime_digits = prime_digits[1..]\n    \n    prime_digits = prime_digits[1..]\n\
    \    \n    prime_digits = prime_digits[1..]\n    \n    prime_digits = prime_digits[1..]\n\
    \    \n    prime_digits = prime_digits[1..]\n    \n    prime_digits = prime_digits[1..]\n\
    \    \n    prime_digits = prime_digits[1..]\n    \n    prime_digits = prime\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"]\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyicstyl2.jl:30\nin expression starting at /tmp/tmpyicstyl2.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ primes_count = primes.count{|x| num.chars.all? {|c| primes.include?(x.to_i(16).to_s(16).chars.index(c))}}\n\
    \    \n    primes_count += primes.count{|x| num.chars.all? {|c| primes.include?(x.to_i(16).to_s(16).chars.index(c))}}\n\
    \    \n    primes_count += primes.count{|x| num.chars.all? {|c| primes.include?(x.to_i(16).to_s(16).chars.index(c))}}\n\
    \    \n    primes_count += primes.count{|x| num.chars.all? {|c| primes.include?(x.to_i(16).to_s(16).chars.index(c))}}\n\
    \    \n    primes_count += primes.count{|x| num.chars.all? {|c| primes.include?(x.to_i(16).to_s(16).chars.index(c))}}\n\
    \    \n    primes_count += primes.count{|x| num.chars.all? {|c| primes.include?(x.to_i(16).to_s(16).chars.index(c))}}\n\
    \    \n    primes_count += primes.count{|x| num.chars.all? {|c| primes.include?(x.to_i(16).to_s(16).chars.index(c))}}\n\
    \    \n    primes_count += primes.count{|x| num.chars.all? {|c| primes.include?(x.to_i(16).to_s(16).chars.index(c))}}\n\
    \    \n    primes_count += primes.count{|x| num.chars.all? {|c| primes.include?(x.to_i(16).to_s(16).chars.index(c))}}\n\
    \    \n    primes_count += primes.count{|x| num.chars.all? {|c| primes.include?(x.to_i(16).to_s(16).chars.index(c))}}\n\
    \    \n    primes_count += primes.count{|x| num.chars.all? {|c| primes.include?(x.to_i(16).to_s(16).chars.index(c))}}\n\
    \    \n    primes_count += prime\nusing Test\n\n@testset begin\n\ncandidate =\
    \ hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\
    \t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"\
    123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppo5v0ai_.jl:27\nin expression starting at\
    \ /tmp/tmppo5v0ai_.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = prime_numbers(10)\n    \n \
    \   prime_digits = prime_digits(primes)\n    \n    prime_digits_set = Set(prime_digits)\n\
    \    \n    hex_key = 0\n    \n    for digit in num\n        \n        if digit\
    \ in prime_digits_set\n            \n            hex_key += 1\n            \n\
    \    return hex_key\nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\"\
    )\n</cell>\n<code language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that receives a string and returns the number of characters\
    \ that are not letters.\nExamples:\n>>> not_letters(\"A\")\n0\n>>> not_letters(\"\
    AB\")\n1\n>>> not_letters(\"ABCD\")\n2\n>>> not_letters(\"ABCD1234\")\n4\n>>>\
    \ not_letters(\"ABCD1234ABCD\")\n8\n>>> not_letters(\"ABCD1234ABCD1234ABCD\")\n\
    16\n>>> not_lettersn\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5lbbym2s.jl:41\nin expression starting at\
    \ /tmp/tmp5lbbym2s.jl:41\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    local hexadecimal_digits = \"0123456789ABCDEF\"\
    \n    local prime_numbers = \"2|3|5|7|11|13|17|19|23|29|31|37|41|43|47|53|59|61|67|71|73|79|83|89|97\"\
    \n    local prime_numbers_regex = prime_numbers:gsub(\"|\", \"\\\\|\")\n    local\
    \ prime_numbers_regex = prime_numbers_regex:gsub(\"\\\\|\", \"|\")\n    local\
    \ prime_numbers_regex = prime_numbers_regex:gsub(\"\\\\(\", \"\\\\)\")\n    local\
    \ prime_numbers_regex = prime_numbers_regex:gsub(\"\\\\[\", \"\\\\[\")\n    local\
    \ prime_numbers_regex = prime_numbers_regex:gsub(\"\\\\]\", \"\\\\]\")\n    local\
    \ prime_numbers_regex = prime_numbers_regex:gsub(\"\\\\{\", \"\\\\{\")\n    local\
    \ prime_numbers_regex = prime_numbers_regex:gsub(\"\\\\}\", \"\\\\}\")\n    local\
    \ prime_numbers_regex = prime_numbers_regex:gsub(\"\\\\+\", \"\\\\+\")\n    local\
    \ prime_numbers_regex = prime_numbers_regex:gsub(\"\\\\*\", \"\\\\*\")\n    local\
    \ prime_numbers_regex = prime_numbers_regex:gsub(\"\\\\?\", \"\\\\?\")\n    local\
    \ prime_numbers_regex = prime_numbers_regex:gsub(\"\\\\^\", \"\\\\^\")\n    local\
    \ prime_numbers_regex = prime_numbers_regex:gsub(\"\\\\$\", \"\\\\$\")\n    local\
    \ prime_numbers_regex = prime_numbers_regex:gsub(\"\\\\~\", \"\\\\~\")\n    local\
    \ prime_numbers_regex = prime_numbers_regex:gsub(\"\\\\!\", \"\\\\!\")\n    local\
    \ prime_numbers_regex = prime_numbers_regex:gsub(\"\\\\(\", \"\\\\(\")\n    local\
    \ prime_numbers_regex = prime_numbers_regex:gsub(\"\\\\)\", \"\\\\)\")\n    local\
    \ prime_numbers_regex = prime_numbers_regex:gsub(\"\\\\[\", \"\\\\[\")\n    local\
    \ prime_numbers_regex = prime_numbers_regex:gsub(\"\\\\]\", \"\\\\]\")\n    local\
    \ prime_numbers_regex = prime_numbers_regex:gsub(\"\\\\{\", \"\\\\{\")\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpebgwxt68.jl:38\nin expression starting at\
    \ /tmp/tmpebgwxt68.jl:38\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    local digits = num:gsub(\"^.\", \"\"\
    ):gsub(\"^0\", \"\"):gsub(\"^0x\", \"\"):gsub(\"^0$\", \"\"):gsub(\"^0x$\", \"\
    \")\n    local primes = prime_digits(digits)\n    local primes_count = primes:len()\n\
    \    \n    if primes_count > 1 then\n        return primes_count\n    else\n \
    \       return primes[0]\n    end\nend\n</cell>\n<code language=julia-1.0>\nhex_key(\"\
    AB\")\n</cell>\n<code language=julia-1.0>\nhex_key(\"1077E\")\n</cell>\n<code\
    \ language=julia-1.0>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.0>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.0>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 3\nWrite a function that receives a string\
    \ and returns the number of characters that are not letters (uppercase or lowercase).\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyc95clo1.jl:25\nin expression starting at\
    \ /tmp/tmpyc95clo1.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   digits = num.chars\n    \n    primes = primes_list(digits)\n    \n    primes_count\
    \ = primes.count\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \n    primes_count\
    \ = primes_count + 1\n    \n    primes_count = primes_count - 1\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxse0_jdh.jl:1\nin expression starting at /tmp/tmpxse0_jdh.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ count = 0\n    for digit in num\n        if digit in primes\n            count\
    \ += 1\n        end\n    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a positive\
    \ integer and returns the number of digits in the number.\nExamples:\n>>> digits(12345)\n\
    4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n\
    4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n4\n>>> digits(12345)\n\
    4\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc8ley9di.jl:36\nin expression starting at\
    \ /tmp/tmpc8ley9di.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = prime_digits(num)\n    \n \
    \   prime_digits_count = length(primes)\n    \n    prime_digits_count_2 = length(primes)\n\
    \    \n    prime_digits_count_3 = length(primes)\n    \n    prime_digits_count_4\
    \ = length(primes)\n    \n    prime_digits_count_5 = length(primes)\n    \n  \
    \  prime_digits_count_6 = length(primes)\n    \n    prime_digits_count_7 = length(primes)\n\
    \    \n    prime_digits_count_8 = length(primes)\n    \n    prime_digits_count_9\
    \ = length(primes)\n    \n    prime_digits_count_10 = length(primes)\n    \n \
    \   prime_digits_count_11 = length(primes)\n    \n    prime_digits_count_12 =\
    \ length(primes)\n    \n    prime_digits_count_13 = length(primes)\n    \n   \
    \ prime_digits_count_14 = length(primes)\n    \n    prime_digits_count_15 = length(primes)\n\
    \    \n    prime_digits_count_16 = length(primes)\n    \n    prime_digits_count_17\
    \ = length(primes)\n    \n    prime_digits_count_18 = length(primes)\n    \n \
    \   prime_digits_count_19 = length(primes)\n    \n    prime_digits_count_20 =\
    \ length(primes)\n    \n    prime_digits_count_21 = length(primes)\n    \n   \
    \ prime_digits_count_22 = length(primes)\n    \n    prime_digits_count_23 = length(primes)\n\
    \    \n    prime_digits_count_24 = length(primes)\n    \n    prime_digits_count_25\
    \ = length(primes)\n    \n    prime_digits_count_26 = length(primes)\n    \n \
    \   prime_digits_count_27 = length(primes)\n    \n    prime_digits_count_28 =\
    \ length(primes)\n    \n    prime_digits_count_29 = length(primes)\n    \n   \
    \ prime_digits_count_30 = length(primes)\n    \n    prime_digits_count_31 = length(primes)\n\
    \    \n    prime_digits_count_32 = length(primes)\n    \n    prime_digits_count_33\
    \ = length(primes)\n    \n    prime_digits_count_34 = length(primes)\n    \n \
    \   prime_digits_count_35 = length(primes)\n    \n    prime_digits_count_36 =\
    \ length(primes)\n    \n    prime_digits_count_37 = \nusing Test\n\n@testset begin\n\
    \ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6l60jbg7.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6l60jbg7.jl:1\n\
    in expression starting at /tmp/tmp6l60jbg7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    local digits = num\n    local count\
    \ = 0\n    \n    for digit in digits\n        \n        if digit == \"A\" or digit\
    \ == \"B\" or digit == \"C\" or digit == \"D\" or digit == \"E\" or digit == \"\
    F\"\n            \n            count = count + 1\n        end\n    end\n    \n\
    \    return count\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"digit\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbh6qs3so.jl:30\nin expression starting at /tmp/tmpbh6qs3so.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   digits = num.chars()\n    \n    primes = primes_list(digits)\n    \n    primes_count\
    \ = primes.count{|x| x == num}\n    \n    primes_count += primes.count{|x| x ==\
    \ num.chars().to_a.join}\n    \n    return primes_count\nend\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 3\nWrite a function that receives a string\
    \ and returns the number of characters that are not letters.\nExamples:\n>>> not_letters(\"\
    Hello World\")\n5\n>>> not_letters(\"Hello World!\")\n3\n>>> not_letters(\"Hello\
    \ World!\")\n3\n>>> not_letters(\"Hello World!?\")\n4\n>>> not_letters(\"Hello\
    \ World!?!\")\n4\n>>> not_letters(\"Hello World!??\")\n4\n>>> not_letters(\"Hello\
    \ World!???\")\n4\n>>> not_letters(\"Hello World!????\")\n4\n>>> not_letters(\"\
    Hello World!?????\")\n4\n>>> not_letters(\"Hello World!??????\")\n4\n>>> not_letters(\"\
    Hello World!???????\")\n4\n>>> not_letters(\"Hello World!????????\")\n4\n>>> not_letters(\"\
    Hello World!?????????\")\n4\n>>> not_letters(\"Hello World!??????????\")\n4\n\
    >>> not_letters(\"Hello World!???????????\")\n4\n>>> not_letters(\"Hello World!????????????\"\
    )\n4\n>>> not_letters(\"Hello World!?????????????\")\n4\n>>> not_letters(\"Hello\
    \ World!??????????????\")\n4\n>>> not_letters(\"Hello World!???????????????\"\
    )\n4\n>>> not_letters(\"Hello World!????????????????\")\n4\n>>> not_letters(\"\
    Hello World!??????????????????\")\n4\n>>> not_letters(\"Hello World!????????????????????\"\
    )\n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl3kx3reb.jl:31\nin expression starting at\
    \ /tmp/tmpl3kx3reb.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    hex_key::Int64 = 0\n    \n    if num\
    \ == \"\"\n        hex_key = 0\n    else\n        hex_key = 1\n        \n    \
    \    for i in num\n            if i != \"A\" && i != \"B\" && i != \"C\" && i\
    \ != \"D\" && i != \"E\" && i != \"F\"\n                hex_key = 0\n        \
    \        break\n            else\n                hex_key += 1\n             \
    \   \n    return hex_key\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\
    \n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t\
    @test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"\
    2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"\
    112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpim57ylzq.jl:41\nin expression starting at\
    \ /tmp/tmpim57ylzq.jl:41\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    hex_digits = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255]\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfsnvx45m.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfsnvx45m.jl:1\n\
    in expression starting at /tmp/tmpfsnvx45m.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = prime_numbers()\n    \n   \
    \ hex_list = num.split(\"\")\n    \n    count = 0\n    \n    for i in hex_list\n\
    \        \n        if i in primes\n            \n            count += 1\n    \
    \        \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a hexadecimal\
    \ number as a string and returns the number of digits that are primes (prime number,\
    \ or a prime, is a natural number greater than 1 that is not a product of two\
    \ smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have\
    \ to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal 11),\
    \ D (=decimal 13).\nNote: the input may or may not be correct.\nExamples:\nhex_key(\"\
    AB\")\n1\nhex_key(\"1077E\")\n2\nhex_key(\"ABED1A33\")\n4\nhex_key(\"123456789ABCDEF0\"\
    )\n6\nhex_key(\"2020\")\n2\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvwc3yeaw.jl:39\nin expression starting at\
    \ /tmp/tmpvwc3yeaw.jl:39\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    local digits = num\n    local prime_digits\
    \ = 0\n    local prime_number = 0\n    local prime_number_count = 0\n    local\
    \ prime_number_count_2 = 0\n    local prime_number_count_3 = 0\n    local prime_number_count_4\
    \ = 0\n    local prime_number_count_5 = 0\n    local prime_number_count_6 = 0\n\
    \    local prime_number_count_7 = 0\n    local prime_number_count_8 = 0\n    local\
    \ prime_number_count_9 = 0\n    local prime_number_count_10 = 0\n    local prime_number_count_11\
    \ = 0\n    local prime_number_count_12 = 0\n    local prime_number_count_13 =\
    \ 0\n    local prime_number_count_14 = 0\n    local prime_number_count_15 = 0\n\
    \    local prime_number_count_16 = 0\n    local prime_number_count_17 = 0\n  \
    \  local prime_number_count_18 = 0\n    local prime_number_count_19 = 0\n    local\
    \ prime_number_count_20 = 0\n    local prime_number_count_21 = 0\n    local prime_number_count_22\
    \ = 0\n    local prime_number_count_23 = 0\n    local prime_number_count_24 =\
    \ 0\n    local prime_number_count_25 = 0\n    local prime_number_count_26 = 0\n\
    \    local prime_number_count_27 = 0\n    local prime_number_count_28 = 0\n  \
    \  local prime_number_count_29 = 0\n    local prime_number_count_30 = 0\n    local\
    \ prime_number_count_31 = 0\n    local prime_number_count_32 = 0\n    local prime_number_count_33\
    \ = 0\n    local prime_number_count_34 = 0\n    local prime_number_count_35 =\
    \ 0\n    local prime_number_count_36 = 0\n    local prime_number_count_37 = 0\n\
    \    local prime_number_count_38 = 0\n    local prime_number_count_39 = 0\n  \
    \  local prime_number_count_40 = 0\n    local prime_number_count_41 = 0\n    local\
    \ prime_number_count_42 = 0\n    local prime_number_count_43 = 0\n    local prime_number_count_44\
    \ = 0\n    local prime_number_count_45 = 0\n    local prime_number_count_46 =\
    \ 0\n    local prime_number_count_47 = 0\n    local prime_number_count_48 = 0\n\
    \    local prime_number_count_49 = 0\n    local prime_number_count_50 = 0\n  \
    \  local prime_number_count_51 = 0\n    local prime_number_count_52 = 0\n    local\
    \ prime_number_count_53 = 0\n    local prime_number_count_54 = 0\n    local prime_number_count_\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpptk5f58m.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpptk5f58m.jl:1\n\
    in expression starting at /tmp/tmpptk5f58m.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = prime_digits(num)\n    \n \
    \   prime_digits_count = length(primes)\n    \n    if prime_digits_count > 1\n\
    \        \n        prime_digits_count = prime_digits_count - 1\n        \n   \
    \     prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ - 1\n        \n        prime_digits_count = prime_digits_count - 1\n       \
    \ \n        prime_digits_count = prime_digits_count - 1\n        \n        prime_digits_count\
    \ = prime_digits_count - 1\n        \n        prime_digits_count = prime_digits_count\
    \ \nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphntgjcqk.jl:1\nin expression starting at /tmp/tmphntgjcqk.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   digits = num.chars\n    \n    primes = primes_list(digits)\n    \n    primes_count\
    \ = 0\n    \n    for prime in primes\n        primes_count += primes_count(digits,\
    \ prime)\n    \n    return primes_count\nend\nusing Test\n\n@testset begin\n\n\
    candidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\"\
    ) == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") ==\
    \ 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoes40ihv.jl:1\nin expression starting at /tmp/tmpoes40ihv.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    local hex_key = 0\n    local num_str\
    \ = num\n    local num_len = length(num)\n    local num_chars = length(split(num_str))\n\
    \    \n    if num_chars == 0 then\n        return 0\n    end\n    \n    if num_chars\
    \ == 1 then\n        if num_str == \"A\" or num_str == \"B\" or num_str == \"\
    C\" or num_str == \"D\" or num_str == \"E\" or num_str == \"F\" then\n       \
    \     hex_key = 1\n        else\n            return 0\n        end\n    end\n\
    \    \n    if num_chars == 2 then\n        if num_str == \"10\" then\n       \
    \     hex_key = 2\n        elseif num_str == \"11\" then\n            hex_key\
    \ = 3\n        elseif num_str == \"12\" then\n            hex_key = 4\n      \
    \  elseif num_str == \"13\" then\n            hex_key = 5\n        elseif num_str\
    \ == \"14\" then\n            hex_key = 6\n        elseif num_str == \"15\" then\n\
    \            hex_key = 7\n        elseif num_str == \"16\" then\n            hex_key\
    \ = 8\n        elseif num_str == \"17\" then\n            hex_key = 9\n      \
    \  elseif num_str == \"18\" then\n            hex_key = 10\n        elseif num_str\
    \ == \"19\" then\n            hex_key = 11\n        elseif num_str == \"1A\" then\n\
    \            hex_key = 12\n        elseif num_str == \"1B\" then\n           \
    \ hex_key = 13\n        elseif num_str == \"1C\" then\n            hex_key = 14\n\
    \        elseif num_str == \"1D\" then\n            hex_key = 15\n        elseif\
    \ num_str == \"1E\" then\n            hex_key = 16\n        elseif num_str ==\
    \ \"1F\" then\n            hex_key = 17\n        elseif num_str == \"20\" then\n\
    \            hex_key = 18\n        elseif num_str == \"21\" then\n           \
    \ hex_key = 19\n        elseif num_str == \"22\" then\n            hex_key = 20\n\
    \        elseif num_str == \"23\" then\n            hex_key = 21\n        elseif\
    \ num_str == \"24\" then\n            hex_key = 22\n        elseif num_str ==\
    \ \"25\" then\n            hex_key = 23\n        elseif num_str == \"26\" then\n\
    \            hex_key = 24\n        elseif num_str == \"27\" then\n           \
    \ hex_key = 25\n        elseif num_str == \"28\" then\n            hex_key = 26\n\
    \        elseif num_str == \"29\" then\n            hex_key = 27\n        elseif\
    \ num_str == \"2A\" then\n            hex_key = 28\n        elseif num_str ==\
    \ \"2B\" then\n            hex_key = 29\n        elseif num_str == \"2C\" then\n\
    \            hex\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"num_str\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnwu9g39t.jl:35\nin expression starting at /tmp/tmpnwu9g39t.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   digits = num.digits\n    \n    primes = primes_from(digits)\n    \n    prime_digits\
    \ = primes.digits\n    \n    prime_digits_count = prime_digits.length\n    \n\
    \    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count =\
    \ prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    \    \n    prime_digits_count = prime_digits_count-1\n    \n    prime_digits_count\
    \ = prime_digits_count-1\n    \n    prime_digits_count = prime_digits_count-1\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy6lofh32.jl:1\nin expression starting at /tmp/tmpy6lofh32.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   digits = num.chars\n    \n    primes = prime_digits(digits)\n    \n    prime_digits_count\
    \ = prime_digits_count(digits)\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjbpke0bw.jl:1\nin expression starting at /tmp/tmpjbpke0bw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = prime_numbers(hex_key(num)-1)\n\
    \    \n    prime_digits = primes.filter(x->x==hex_key(num))\n    \n    prime_digits\
    \ = prime_digits.filter(x->x>0)\n    \n    prime_digits = prime_digits.filter(x->x<hex_key(num))\n\
    \    \n    prime_digits = prime_digits.filter(x->x!=hex_key(num))\n    \n    return\
    \ prime_digits.length\nend\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\"\
    )\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\"\
    )\n</cell>\n<code language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that receives a string and returns the number of characters\
    \ in the string.\nExamples:\n>>> count_chars(\"Hello World!\")\n12\n>>> count_chars(\"\
    Hello World\")\n11\n>>> count_chars(\"Hello World!\")\n12\n>>> count_chars(\"\
    Hello World\")\n11\n>>> count_chars(\"Hello World!\")\n12\n>>> count_chars(\"\
    Hello World\")\n11\n>>> count_chars(\"Hello World!\")\n12\n>>> count_chars(\"\
    Hello World\")\n11\n>>> count_chars(\"Hello World!\")\n12\n>>> count_chars(\"\
    Hello World\")\n11\n>>> count_chars(\"Hello World!\")\n12\n>>> count_chars(\"\
    Hello World\")\n11\n>>> count_chars(\"Hello World!\")\n12\n>>> count_chars(\"\
    Hello World\")\n11\n>>> count_chars(\"Hello World!\")\n12\n>>> count_chars(\"\
    Hello World\")\n11\n>>> count_chars(\"Hello World!\")\n12\n>>> count_chars(\"\
    Hello World\")\n11\n>>> count_chars(\"Hello World!\")\n12\n>>> count_chars(\"\
    Hello World\")\n11\n>>> count_chars(\"Hello World!\")\n12\n>>> count_chars(\"\
    Hello World\")\n11\n>>> count_chars(\"Hello World!\")\n12\n>>> count_chars(\"\
    Hello World\")\n11\n>>> count_chars(\"Hello World!\")\n12\n>>> count_chars(\"\
    Hello World\")\n11\n>>> count_chars(\"Hello World!\")\n12\n>>> count_chars(\"\
    Hello World\")\n11\n>>> count_chars(\"Hello World!\")\n12\n>>> count_chars(\"\
    Hello World\")\n11\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph7l5i4cf.jl:37\nin expression starting at\
    \ /tmp/tmph7l5i4cf.jl:37\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    local digits = num\n    local primes\
    \ = [1]\n    local prime_digits = [1]\n    local prime_digits_count = 0\n    local\
    \ prime_digits_sum = 0\n    local prime_digits_sum2 = 0\n    local prime_digits_sum3\
    \ = 0\n    local prime_digits_sum4 = 0\n    local prime_digits_sum5 = 0\n    local\
    \ prime_digits_sum6 = 0\n    local prime_digits_sum7 = 0\n    local prime_digits_sum8\
    \ = 0\n    local prime_digits_sum9 = 0\n    local prime_digits_sum10 = 0\n   \
    \ local prime_digits_sum11 = 0\n    local prime_digits_sum12 = 0\n    local prime_digits_sum13\
    \ = 0\n    local prime_digits_sum14 = 0\n    local prime_digits_sum15 = 0\n  \
    \  local prime_digits_sum16 = 0\n    local prime_digits_sum17 = 0\n    local prime_digits_sum18\
    \ = 0\n    local prime_digits_sum19 = 0\n    local prime_digits_sum20 = 0\n  \
    \  local prime_digits_sum21 = 0\n    local prime_digits_sum22 = 0\n    local prime_digits_sum23\
    \ = 0\n    local prime_digits_sum24 = 0\n    local prime_digits_sum25 = 0\n  \
    \  local prime_digits_sum26 = 0\n    local prime_digits_sum27 = 0\n    local prime_digits_sum28\
    \ = 0\n    local prime_digits_sum29 = 0\n    local prime_digits_sum30 = 0\n  \
    \  local prime_digits_sum31 = 0\n    local prime_digits_sum32 = 0\n    local prime_digits_sum33\
    \ = 0\n    local prime_digits_sum34 = 0\n    local prime_digits_sum35 = 0\n  \
    \  local prime_digits_sum36 = 0\n    local prime_digits_sum37 = 0\n    local prime_digits_sum38\
    \ = 0\n    local prime_digits_sum39 = 0\n    local prime_digits_sum40 = 0\n  \
    \  local prime_digits_sum41 = 0\n    local prime_digits_sum42 = 0\n    local prime_digits_sum43\
    \ = 0\n    local prime_digits_sum44 = 0\n    local prime_digits_sum45 = 0\n  \
    \  local prime_digits_sum46 = 0\n    local prime_digits_sum47 = 0\n    local prime_digits_sum48\
    \ = 0\n    local prime\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfm8ws670.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfm8ws670.jl:1\n\
    in expression starting at /tmp/tmpfm8ws670.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   digits = num.chars()\n    \n    primes = primes_list(digits)\n    \n    primes_count\
    \ = primes.count{|x| x == digits}\n    \n    primes_count = primes_count + 1\n\
    \    \n    return primes_count\nend\n</cell>\n<code language=julia-1.0>\nhex_key(\"\
    AB\")\n</cell>\n<code language=julia-1.0>\nhex_key(\"1077E\")\n</cell>\n<code\
    \ language=julia-1.0>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.0>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.0>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives a string\
    \ and returns the number of characters that are not letters (uppercase or lowercase).\n\
    Examples:\n>>> not_letters(\"AB\")\n1\n>>> not_letters(\"1077E\")\n2\n>>> not_letters(\"\
    ABED1A33\")\n3\n>>> not_letters(\"123456789ABCDEF0\")\n6\n>>> not_letters(\"2020\"\
    )\n2\n>>> not_letters(\"ABC\")\n0\n>>> not_letters(\"\")\n0\n>>> not_letters(\"\
    \ \")\n0\n>>> not_letters(\"ABCDEF\")\n0\n>>> not_letters(\"ABCDEFG\")\n0\n>>>\
    \ not_letters(\"ABCDEFGH\")\n0\n>>> not_letters(\"ABCDEFGHI\")\n0\n>>> not_letters(\"\
    ABCDEFGHIJ\")\n0\n>>> not_letters(\"ABCDEFGHIJK\")\n0\n>>> not_letters(\"ABCDEFGHIJKL\"\
    )\n0\n>>> not_letters(\"ABCDEFGHIJKLM\")\n0\n>>> not_letters(\"ABCDEFGHIJKLMN\"\
    )\n0\n>>> not_letters(\"ABCDEFGHIJKLMNO\")\n0\n>>> not_letters(\"ABCDEFGHIJKLMNOP\"\
    )\n0\n>>> not_letters(\"ABCDEFGHIJKLMNOPQ\")\n0\n>>> not_letters(\"ABCDEFGHIJKLMNOPQR\"\
    )\n0\n>>> not_letters(\"ABCDEFGHIJKLMNOPQRS\")\n0\n>>> not_letters(\"ABCDEFGHIJKLMNOPQRST\"\
    )\n0\n>>> not_letters(\"ABCDEFGHIJKLMNOPQRSTU\")\n0\n>>> not_letters(\"ABCDEFGHIJKLMNOPQRSTUV\"\
    )\n0\n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp4qo0ka2.jl:31\nin expression starting at\
    \ /tmp/tmpp4qo0ka2.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    local digits = num\n    local primes\
    \ = 2\n    local prime_digits = 2\n    local prime_digits_count = 0\n    local\
    \ prime_digit_count = 0\n    local prime_digit_count_2 = 0\n    local prime_digit_count_3\
    \ = 0\n    local prime_digit_count_4 = 0\n    local prime_digit_count_5 = 0\n\
    \    local prime_digit_count_6 = 0\n    local prime_digit_count_7 = 0\n    local\
    \ prime_digit_count_8 = 0\n    local prime_digit_count_9 = 0\n    local prime_digit_count_10\
    \ = 0\n    local prime_digit_count_11 = 0\n    local prime_digit_count_12 = 0\n\
    \    local prime_digit_count_13 = 0\n    local prime_digit_count_14 = 0\n    local\
    \ prime_digit_count_15 = 0\n    local prime_digit_count_16 = 0\n    local prime_digit_count_17\
    \ = 0\n    local prime_digit_count_18 = 0\n    local prime_digit_count_19 = 0\n\
    \    local prime_digit_count_20 = 0\n    local prime_digit_count_21 = 0\n    local\
    \ prime_digit_count_22 = 0\n    local prime_digit_count_23 = 0\n    local prime_digit_count_24\
    \ = 0\n    local prime_digit_count_25 = 0\n    local prime_digit_count_26 = 0\n\
    \    local prime_digit_count_27 = 0\n    local prime_digit_count_28 = 0\n    local\
    \ prime_digit_count_29 = 0\n    local prime_digit_count_30 = 0\n    local prime_digit_count_31\
    \ = 0\n    local prime_digit_count_32 = 0\n    local prime_digit_count_33 = 0\n\
    \    local prime_digit_count_34 = 0\n    local prime_digit_count_35 = 0\n    local\
    \ prime_digit_count_36 = 0\n    local prime_digit_count_37 = 0\n    local prime_digit_count_38\
    \ = 0\n    local prime_digit_count_39 = 0\n    local prime_digit_count_40 = 0\n\
    \    local prime_digit_count_41 = 0\n    local prime_digit_count_42 = 0\n    local\
    \ prime_digit_count_43 = 0\n    local prime_digit_count_44 = 0\n    local prime_digit_count_45\
    \ = 0\n    local prime_digit_count_46 = 0\n    local prime_digit_count_47 = 0\n\
    \    local prime_digit_count_48 = 0\n    local prime_digit_count_49 = 0\n    local\
    \ prime_digit_count_50 = 0\n    local prime_digit_count_51 = 0\n    local prime_digit_count_52\
    \ = 0\n    local prime_digit_count_53 = 0\n    local prime_digit_count_54\nusing\
    \ Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") ==\
    \ 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\
    \t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\") ==\
    \ 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2gxfo9_1.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2gxfo9_1.jl:1\n\
    in expression starting at /tmp/tmp2gxfo9_1.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ digit_counts = count_digits(num)\n    \n    prime_digits = prime_digits(digit_counts)\n\
    \    \n    prime_digits_count = length(prime_digits)\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpeh4z8nc9.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpeh4z8nc9.jl:1\n\
    in expression starting at /tmp/tmpeh4z8nc9.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    local digits = num\n    local prime_count\
    \ = 0\n    local prime_digits = \"\"\n    local prime_digits_count = 0\n    local\
    \ prime_digits_sum = 0\n    local prime_digits_sum2 = 0\n    local prime_digits_sum3\
    \ = 0\n    local prime_digits_sum4 = 0\n    local prime_digits_sum5 = 0\n    local\
    \ prime_digits_sum6 = 0\n    local prime_digits_sum7 = 0\n    local prime_digits_sum8\
    \ = 0\n    local prime_digits_sum9 = 0\n    local prime_digits_sum10 = 0\n   \
    \ local prime_digits_sum11 = 0\n    local prime_digits_sum12 = 0\n    local prime_digits_sum13\
    \ = 0\n    local prime_digits_sum14 = 0\n    local prime_digits_sum15 = 0\n  \
    \  local prime_digits_sum16 = 0\n    local prime_digits_sum17 = 0\n    local prime_digits_sum18\
    \ = 0\n    local prime_digits_sum19 = 0\n    local prime_digits_sum20 = 0\n  \
    \  local prime_digits_sum21 = 0\n    local prime_digits_sum22 = 0\n    local prime_digits_sum23\
    \ = 0\n    local prime_digits_sum24 = 0\n    local prime_digits_sum25 = 0\n  \
    \  local prime_digits_sum26 = 0\n    local prime_digits_sum27 = 0\n    local prime_digits_sum28\
    \ = 0\n    local prime_digits_sum29 = 0\n    local prime_digits_sum30 = 0\n  \
    \  local prime_digits_sum31 = 0\n    local prime_digits_sum32 = 0\n    local prime_digits_sum33\
    \ = 0\n    local prime_digits_sum34 = 0\n    local prime_digits_sum35 = 0\n  \
    \  local prime_digits_sum36 = 0\n    local prime_digits_sum37 = 0\n    local prime_digits_sum38\
    \ = 0\n    local prime_digits_sum39 = 0\n    local prime_digits_sum40 = 0\n  \
    \  local prime_digits_sum41 = 0\n    local prime_digits_sum42 = 0\n    local prime_digits_sum43\
    \ = 0\n    local prime_digits_sum44 = 0\n    local prime_digits_sum45 = 0\n  \
    \  local prime_digits_sum46 = 0\n    local prime_digits_sum47 = 0\n    local prime_digits_sum48\
    \ = 0\n    local prime\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph24xcj9h.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph24xcj9h.jl:1\n\
    in expression starting at /tmp/tmph24xcj9h.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   digits = num.chars\n    \n    primes = primes_list(digits)\n    \n    primes_count\
    \ = 0\n    for prime in primes\n        if prime == digits[prime]\n          \
    \  primes_count += 1\n        end\n    end\n    \n    return primes_count\nend\n\
    </cell>\n<code language=julia-1.4>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.4>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.4>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.4>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.4>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a string and returns the number of characters that are\
    \ not letters.\nExamples:\n>>> count_letters(\"Hello World\")\n4\n>>> count_letters(\"\
    Hello World!\")\n5\n>>> count_letters(\"Hello World!!\")\n6\n>>> count_letters(\"\
    Hello World!!!\")\n7\n>>> count_letters(\"Hello World!!!\")\n7\n>>> count_letters(\"\
    Hello World!!!\")\n7\n>>> count_letters(\"Hello World!!!\")\n7\n>>> count_letters(\"\
    Hello World!!!\")\n7\n>>> count_letters(\"Hello World!!!\")\n7\n>>> count_letters(\"\
    Hello World!!!\")\n7\n>>> count_letters(\"Hello World!!!\")\n7\n>>> count_letters(\"\
    Hello World!!!\")\n7\n>>> count_letters(\"Hello World!!!\")\n7\n>>> count_letters(\"\
    Hello World!!!\")\n7\n>>> count_letters(\"Hello World!!!\")\n7\n>>> count_letters(\"\
    Hello World!!!\")\n7\n>>> count_letters(\"Hello World!!!\")\n7\n>>> count_letters(\"\
    Hello World!!!\")\n7\n>>> count_letters(\"Hello World!!!\")\n7\n>>> count_letters(\"\
    Hello World!!!\")\n7\n>>> count_letters(\"Hello World!!!\")\n7\n>>> count_letters(\"\
    Hello World!!!\")\n7\n>>> count_letters(\"Hello World!!!\")\n7\n>>> count_letters(\"\
    Hello World!!!\")\n7\n>>> count_letters(\"Hello World!!!\")\n7\n>>> count_letters(\"\
    Hello World!!!\")\n7\n>>> count_letters(\"Hello World!!!\")\n7\n>>> count_letters(\"\
    Hello World!!!\")\n7\n>>> count_letters(\"Hello World!!!\")\n7\n>>> count_letters(\"\
    Hello World!!!\")\n7\n>>> count_letters(\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") ==\
    \ 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\
    \t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpks195avi.jl:40\nin expression starting at\
    \ /tmp/tmpks195avi.jl:40\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppk3ynkwi.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppk3ynkwi.jl:1\n\
    in expression starting at /tmp/tmppk3ynkwi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ primes_count = primes.count{|x| num.chars.all? {|c| x==c || x==c.upcase }}\n\
    \    \n    if primes_count > primes.count{|x| x==num.chars.first} \n        primes_count\
    \ += primes.count{|x| x==num.chars.last}\n    end\n    \n    return primes_count\n\
    end\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq_xa0n1f.jl:27\nin expression starting at\
    \ /tmp/tmpq_xa0n1f.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   digits = num.digits\n    \n    primes = prime_digits(digits)\n    \n    prime_digits_count\
    \ = 0\n    \n    for prime in primes\n        prime_digits_count += prime_digits(digits,\
    \ prime)\n    end\n    \n    return prime_digits_count\nend\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"1077E\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    2020\")\n</cell>\n<text>\nExercise: Write a function that receives a hexadecimal\
    \ number as a string and counts the number of hexadecimal digits that are primes\
    \ (prime number, or a prime, is a natural number greater than 1 that is not a\
    \ product of two smaller natural numbers).\nHexadecimal digits are 0, 1, 2, 3,\
    \ 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime numbers are 2, 3, 5, 7, 11, 13, 17,...\n\
    So you have to determine a number of the following digits: 2, 3, 5, 7, \nB (=decimal\
    \ 11), D (=decimal 13).\nNotes: you may assume the input is always correct or\
    \ empty string, \nand symbols A,B,C,D,E,F are always uppercase.\nExamples:\nhex_key(\"\
    AB\")\n1\nhex_key(\"1077E\")\n2\nhex_key(\"ABED1A33\")\n4\nhex_key(\"123456789ABCDEF0\"\
    )\n6\nhex_key(\"2020\")\n2\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppm858aac.jl:39\nin expression starting at\
    \ /tmp/tmppm858aac.jl:39\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    prime_digits = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    hex_digits = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255]\n\
    using Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\"\
    ) == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") ==\
    \ 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfsnvx45m.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfsnvx45m.jl:1\n\
    in expression starting at /tmp/tmpfsnvx45m.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    \n   \
    \ hex_key = 0\n    \n    for digit in num\n        if digit in primes\n      \
    \      hex_key += 1\n        end\n    end\n    \n    return hex_key\nend\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a hexadecimal number as a string and counts the number\
    \ of hexadecimal digits that are primes (prime number, or a prime, is a natural\
    \ number greater than 1 that is not a product of two smaller natural numbers).\n\
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime\
    \ numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of\
    \ the following digits: 2, 3, 5, 7, \nB (=decimal 11), D (=decimal 13).\nNote:\
    \ the input may be empty string or symbols A,B,C,D,E,F are always uppercase.\n\
    Examples:\nhex_key(\"AB\")\n1\nhex_key(\"1077E\")\n2\nhex_key(\"ABED1A33\")\n\
    4\nhex_key(\"123456789ABCDEF0\")\n6\nhex_key(\"2020\")\n2\nusing Test\n\n@testset\
    \ begin\n\ncandidate = hex_key;\n\t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"\
    1077E\") == 2)\n\t@test(candidate(\"ABED1A33\") == 4)\n\t@test(candidate(\"2020\"\
    ) == 2)\n\t@test(candidate(\"123456789ABCDEF0\") == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\"\
    ) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4osd3w15.jl:37\nin expression starting at\
    \ /tmp/tmp4osd3w15.jl:37\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    if num == \"\"\n        return 0\n    \n \
    \   digits = num.chars\n    \n    primes = prime_digits(digits)\n    \n    prime_digits_count\
    \ = primes.len\n    \n    prime_digits_count = prime_digits_count + 1\n    \n\
    \    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digits_count = prime_digits_count - 1\n    \n    prime_digits_count\
    \ = prime_digits_count + 1\n    \n    prime_digits_count = prime_digits_count\
    \ - 1\n    \n    prime_digits_count = prime_digits_count + 1\n    \n    prime_digits_count\
    \ = prime_digits_count - 1\n    \n    prime_digits_count = prime_digits_count\
    \ + 1\n    \n    prime_digit\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\
    \t@test(candidate(\"AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"\
    ABED1A33\") == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2in3_r3s.jl:1\nin expression starting at /tmp/tmp2in3_r3s.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = prime_numbers(10)\n    \n \
    \   digits = num.chars\n    \n    prime_digits = primes.filter( digit => digits.contains(digit))\n\
    \    \n    prime_digits_count = prime_digits.count\n    \n    if prime_digits_count\
    \ > 0 \n        prime_digits_count -= 1\n    \n    return prime_digits_count\n\
    end\n</cell>\n<code language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n\
    </cell>\n<code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that receives a hexadecimal number as a string and counts the number\
    \ of hexadecimal digits that are primes (prime number, or a prime, is a natural\
    \ number greater than 1 that is not a product of two smaller natural numbers).\n\
    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\nPrime\
    \ numbers are 2, 3, 5, 7, 11, 13, 17,...\nSo you have to determine a number of\
    \ the following digits: 2, 3, 5, 7, B (=decimal 11), D (=decimal 13).\nNotes:\
    \ you may assume the input is always correct or empty string, \nand symbols A,B,C,D,E,F\
    \ are always uppercase.\nExamples:\nhex_key(\"AB\")\n1\nhex_key(\"1077E\")\n2\n\
    hex_key(\"ABED1A33\")\n4\nhex_key(\"123456789ABCDEF0\")\n6\nhex_key(\"2020\")\n\
    2\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjmvo2u5k.jl:38\nin expression starting at\
    \ /tmp/tmpjmvo2u5k.jl:38\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"You have been tasked to write a function that receives \n    a hexadecimal\
    \ number as a string and counts the number of hexadecimal \n    digits that are\
    \ primes (prime number, or a prime, is a natural number \n    greater than 1 that\
    \ is not a product of two smaller natural numbers).\n    Hexadecimal digits are\
    \ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3,\
    \ 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following\
    \ digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may\
    \ assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F\
    \ are always uppercase.\n    Examples:\n    >>> hex_key(\"AB\")\n    1\n    >>>\
    \ hex_key(\"1077E\")\n    2\n    >>> hex_key(\"ABED1A33\")\n    4\n    >>> hex_key(\"\
    123456789ABCDEF0\")\n    6\n    >>> hex_key(\"2020\")\n    2\n    \"\"\"\nfunction\
    \ hex_key(num::String)::Int64 \n    \n    primes = primes_list(10)\n    primes_count\
    \ = 0\n    \n    for prime in primes\n        if num == prime\n            primes_count\
    \ += 1\n        end\n    end\n    \n    return primes_count\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhex_key(\"AB\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"\
    1077E\")\n</cell>\n<code language=julia-1.5>\nhex_key(\"ABED1A33\")\n</cell>\n\
    <code language=julia-1.5>\nhex_key(\"123456789ABCDEF0\")\n</cell>\n<code language=julia-1.5>\n\
    hex_key(\"2020\")\n</cell>\n<text>\nExercise 2\nWrite a function that receives\
    \ a string and returns the number of characters that are not letters (uppercase\
    \ or lowercase).\nExamples:\n>>> not_letters(\"abc 123\")\n3\n>>> not_letters(\"\
    abc 123\")\n0\n>>> not_letters(\"abc 123\")\n2\n>>> not_letters(\"abc 123\")\n\
    1\n>>> not_letters(\"abc 123\")\n0\n>>> not_letters(\"abc 123\")\n0\n>>> not_letters(\"\
    abc 123\")\n0\n>>> not_letters(\"abc 123\")\n0\n>>> not_letters(\"abc 123\")\n\
    0\n>>> not_letters(\"abc 123\")\n0\n>>> not_letters(\"abc 123\")\n0\n>>> not_letters(\"\
    abc 123\")\n0\n>>> not_letters(\"abc 123\")\n0\n>>> not_letters(\"abc 123\")\n\
    0\n>>> not_letters(\"abc 123\")\n0\n>>> not_letters(\"abc 123\")\n0\n>>> not_letters(\"\
    abc 123\")\n0\n>>> not_letters(\"abc 123\")\n0\n>>> not_letters(\"abc 123\")\n\
    0\n>>> not_letters(\"abc 123\")\n0\n>>> not_letters(\"abc 123\")\n0\n>>> not_letters(\"\
    abc 123\")\n0\n>>> not_letters(\"abc 123\")\n0\n>>> not_letters(\"abc 123\")\n\
    0\n>>> not_letters(\"abc 123\")\n0\n>>> not_letters(\"abc 123\")\n0\n>>> not_letters(\"\
    abc 123\")\n0\n>>> not_letters(\"abc 123\")\n0\n>>> not_letters(\"abc 123\")\n\
    0\n>>> not_letters(\"abc 123\")\n0\n>>> not_letters(\"abc 123\")\n0\n>>> not_letters(\"\
    abc 123\nusing Test\n\n@testset begin\n\ncandidate = hex_key;\n\t@test(candidate(\"\
    AB\") == 1)\n\t@test(candidate(\"1077E\") == 2)\n\t@test(candidate(\"ABED1A33\"\
    ) == 4)\n\t@test(candidate(\"2020\") == 2)\n\t@test(candidate(\"123456789ABCDEF0\"\
    ) == 6)\n\t@test(candidate(\"112233445566778899AABBCCDDEEFF00\") == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgfpod7zr.jl:36\nin expression starting at\
    \ /tmp/tmpgfpod7zr.jl:36\n"
  stdout: ''
