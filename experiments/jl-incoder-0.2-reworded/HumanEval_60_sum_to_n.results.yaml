language: jl
name: HumanEval_60_sum_to_n
results:
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n==0 \n        then return 0\n    else \n        then return n+sum_to_n(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise: Write a function that returns the factorial\
    \ of a number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5k_il2gi.jl:15\nin expression starting at /tmp/tmp5k_il2gi.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0\n        1\n    else\n        n * sum_to_n(n - 1)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the factorial of a number.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\
    \t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw98lznz8.jl:19\nin expression starting at\
    \ /tmp/tmpw98lznz8.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 1\n        error(\"n must be positive\")\n    else\n        return\
    \ n * (n + 1) / 2\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy6c0onke.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy6c0onke.jl:1\n\
    in expression starting at /tmp/tmpy6c0onke.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    else\n        sum_to_n_impl(n)\n\
    \    end\nend\nsum_to_n_impl(n::Int64)::Int64 = \n    if n == 0\n        0\n \
    \   else\n        n * sum_to_n_impl(n-1)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.0>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(5)\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzd141h3m.jl:26\nin expression starting at /tmp/tmpzd141h3m.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0 \n        else return n + sum_to_n(n\
    \ - 1)\n    end\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg647rdf0.jl:15\nin expression starting at /tmp/tmpg647rdf0.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 1 \n        error(\"n must be positive\")\n    else if n == 1 \n\
    \        1\n    else \n        sum_to_n(n - 1) + n\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise\nWrite a function that sums numbers from 1 to n where n is given as an\
    \ argument.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkmoz_n3i.jl:16\nin expression starting at\
    \ /tmp/tmpkmoz_n3i.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else \n        sum_to_n(n - 1)\
    \ + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a number.\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_4r4thob.jl:15\nin expression starting at /tmp/tmp_4r4thob.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0 \n        else return n + sum_to_n(n-1)\
    \ \nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(30)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.0>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code language=julia-1.0>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg1rbyjob.jl:15\nin expression starting at /tmp/tmpg1rbyjob.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 1 \n        error(\"n must be positive\")\n    else if n == 1 \n\
    \        return 1 \n    else \n        return n + sum_to_n(n-1) \nend\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpohlg1cum.jl:16\nin expression starting at\
    \ /tmp/tmpohlg1cum.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n==1 \n        1 \n    else \n        n*sum_to_n(n-1)\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the factorial of a number.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\
    \t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ie0m8zd.jl:19\nin expression starting at\
    \ /tmp/tmp9ie0m8zd.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    else\n        1 + sum_to_n(n - 1)\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of the first\
    \ n positive integers. \n(Hint: use the sum_to_n function you defined earlier)\n\
    using Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) ==\
    \ 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf18i05u0.jl:19\nin expression starting at\
    \ /tmp/tmpf18i05u0.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    else\n        return\
    \ n\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxbx0mh0n.jl:20\nin expression starting at\
    \ /tmp/tmpxbx0mh0n.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else \n        sum_to_n(n - 1)\
    \ + n\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the numbers from 1 to n that are divisible by 3.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt7gua5q2.jl:15\nin expression starting at /tmp/tmpt7gua5q2.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 1\n    else \n        sum_to_n(n - 1)\
    \ + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the factorial of a number.\n\
    using Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) ==\
    \ 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2vuohapr.jl:15\nin expression starting at /tmp/tmp2vuohapr.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    else\n        1 + sum_to_n(n - 1)\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7kt7uiry.jl:19\nin expression starting at\
    \ /tmp/tmp7kt7uiry.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    else if n == 1\n\
    \        1\n    else\n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the factorial\
    \ of a number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqmmtsnp8.jl:16\nin expression starting at\
    \ /tmp/tmpqmmtsnp8.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    else\n        return\
    \ n + sum_to_n(n - 1)\n    end\nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(100)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that sums numbers from 1 to n but stops when n reaches zero.\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7kmklrm9.jl:20\nin expression starting at\
    \ /tmp/tmp7kmklrm9.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 1 \n        error(\"n must be positive\")\n    else if n == 1 \n\
    \        1\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.0>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(5)\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the factorial of a number.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\
    \t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkqbrvlg7.jl:16\nin expression starting at\
    \ /tmp/tmpkqbrvlg7.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    else if n == 1\n\
    \        1\n    else\n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbkbhfjn0.jl:16\nin expression starting at\
    \ /tmp/tmpbkbhfjn0.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    else\n        sum_to_n_impl(n,\
    \ 0)\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzi1n0o1f.jl:19\nin expression starting at\
    \ /tmp/tmpzi1n0o1f.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    end\n    return\
    \ n * (n + 1) / 2\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the first n numbers of the Fibonacci sequence. \nThe Fibonacci\
    \ sequence is defined by the recurrence relation:\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\
    \t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfu2r43pq.jl:19\nin expression starting at\
    \ /tmp/tmpfu2r43pq.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n==0 \n        then return 0\n    else \n        sum_to_n(n-1)\n  \
    \  end\nend\n</cell>\n<code language=julia-1.4>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(100)\n</cell>\n<code language=julia-1.4>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(10)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpi_e6_rnb.jl:15\nin expression starting at /tmp/tmpi_e6_rnb.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 0\n        error(\"n must be positive\")\n    else if n == 0\n\
    \        1\n    else\n        sum_to_n(n-1) + n\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpju6lm3ye.jl:16\nin expression starting at\
    \ /tmp/tmpju6lm3ye.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else \n        sum_to_n(n - 1)\
    \ + n\n    end\nend\n</cell>\n<code language=julia-1.4>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.4>\nsum_to_n(100)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.4>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the sum of the numbers from 1 to n except for numbers divisible\
    \ by 3. For example, sum_to_n(30) should return 465.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\
    \t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuvqsbubv.jl:15\nin expression starting at /tmp/tmpuvqsbubv.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    else\n        n + sum_to_n(n - 1)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the factorial of a number.\n\
    using Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) ==\
    \ 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkcodi2wv.jl:19\nin expression starting at\
    \ /tmp/tmpkcodi2wv.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 1\n        error(\"n must be positive\")\n    else\n        return\
    \ n * (n + 1) / 2\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy6c0onke.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy6c0onke.jl:1\n\
    in expression starting at /tmp/tmpy6c0onke.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    else if n == 1\n\
    \        1\n    else\n        sum_to_n(n - 1) + n\n    end\nend\n</cell>\n<code\
    \ language=julia-1.1>\nsum_to_n(30)\n</cell>\n<code language=julia-1.1>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.1>\nsum_to_n(5)\n</cell>\n<code language=julia-1.1>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.1>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number.\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdp8g0wp6.jl:16\nin expression starting at\
    \ /tmp/tmpdp8g0wp6.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 1 \n        then return 1 \n        else return n*sum_to_n(n-1)\
    \ \nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprx8b6ott.jl:15\nin expression starting at /tmp/tmprx8b6ott.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0 \n        else return n + sum_to_n(n\
    \ - 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpw_rqufc3.jl:15\nin expression starting at /tmp/tmpw_rqufc3.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 0\n        error(\"n must be positive\")\n    else if n == 0\n\
    \        0\n    else\n        1 + sum_to_n(n - 1)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the factorial of a number.\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi7kbz662.jl:16\nin expression starting at\
    \ /tmp/tmpi7kbz662.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    else\n        1 + sum_to_n(n - 1)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the first n numbers of\
    \ the Fibonacci sequence. \nHint: Use a recursive function.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0h9vm_sp.jl:19\nin expression starting at\
    \ /tmp/tmp0h9vm_sp.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 1 \n        1 \n    else \n        sum_to_n(n - 1) + n\nend\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(30)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5wqoprr1.jl:19\nin expression starting at\
    \ /tmp/tmp5wqoprr1.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 0\n        error(\"n must be positive\")\n    elseif n == 0\n \
    \       error(\"n must be positive\")\n    else\n        sum_to_n(n - 1) + 1\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of times each element appears in a given array.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\
    \t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplca9wu82.jl:22\nin expression starting at\
    \ /tmp/tmplca9wu82.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n==0\n        1\n    else\n        n+sum_to_n(n-1)\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyyq0k_9y.jl:19\nin expression starting at\
    \ /tmp/tmpyyq0k_9y.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    else if n == 1\n\
    \        1\n    else\n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0mp73b0d.jl:16\nin expression starting at\
    \ /tmp/tmp0mp73b0d.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 1 \n        1 \n    else \n        sum_to_n(n - 1) + 1\nend\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbxoafhii.jl:19\nin expression starting at\
    \ /tmp/tmpbxoafhii.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    else\n        n + sum_to_n(n - 1)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the factorial of a number.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\
    \t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfklbwtn2.jl:19\nin expression starting at\
    \ /tmp/tmpfklbwtn2.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    else\n        n * sum_to_n(n - 1)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjyx11bva.jl:19\nin expression starting at\
    \ /tmp/tmpjyx11bva.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else \n        sum_to_n(n - 1)\
    \ + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp78s1wamk.jl:15\nin expression starting at /tmp/tmp78s1wamk.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 1\n        error(\"n must be positive\")\n    elseif n < 2\n  \
    \      1\n    else\n        n * (n + 1) / 2\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a given number.\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpki5kx5vf.jl:21\nin expression starting at\
    \ /tmp/tmpki5kx5vf.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    else\n        sum_to_n_impl(n)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise: Write a function that sums numbers from\
    \ 1 to n but stops when the sum exceeds n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy88sqdye.jl:20\nin expression starting at\
    \ /tmp/tmpy88sqdye.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else \n        return n + sum_to_n(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the factorial\
    \ of a number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf79kumyf.jl:15\nin expression starting at /tmp/tmpf79kumyf.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n==1 \n        1 \n    else \n        n*sum_to_n(n-1)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n prime numbers.\
    \ \nThe function should take an input n and output a vector of prime numbers.\n\
    using Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) ==\
    \ 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4mkogfht.jl:19\nin expression starting at\
    \ /tmp/tmp4mkogfht.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n==0 \n        then return 0\n    else \n        sum_to_n(n-1)\n  \
    \      +n\n    end\nend\n</cell>\n<code language=julia-1.4>\nsum_to_n(10)\n</cell>\n\
    <text>\nExercise: Write a function that returns the factorial of a number.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpc_ywon_f.jl:15\nin expression starting at /tmp/tmpc_ywon_f.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else \n        sum_to_n(n - 1)\
    \ + n\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the first n prime numbers. \nHint: use the function primes(n) from\
    \ the package Primes.jl.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjnt68y7f.jl:15\nin expression starting at /tmp/tmpjnt68y7f.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n==0 \n        then return 1\n        else return n*sum_to_n(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvt05e7pk.jl:15\nin expression starting at /tmp/tmpvt05e7pk.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 1\n    else \n        return n + sum_to_n(n-1)\n\
    end\n</cell>\n<code language=julia-1.4>\nsum_to_n(30)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.4>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(10)\n</cell>\n<code language=julia-1.4>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the factorial of a number.\n\
    using Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) ==\
    \ 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmpgjqd95.jl:15\nin expression starting at /tmp/tmpmpgjqd95.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 1 \n        then return 1\n    else \n        sum_to_n(n - 1)\
    \ + 1\nend\n</cell>\n<code language=julia-1.1>\nsum_to_n(30)\n</cell>\n<code language=julia-1.1>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.1>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.1>\nsum_to_n(10)\n</cell>\n<code language=julia-1.1>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n Fibonacci\
    \ numbers. \nThe Fibonacci numbers are defined by the recurrence relation:\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp909vvmxn.jl:15\nin expression starting at /tmp/tmp909vvmxn.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n==0 \n        then return 1\n        else return n*sum_to_n(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnjaysj2l.jl:15\nin expression starting at /tmp/tmpnjaysj2l.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        sum_to_n(n - 1) + sum_to_n(n - 2)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number.\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpd_yl_35o.jl:15\nin expression starting at /tmp/tmpd_yl_35o.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n<0\n        error(\"n must be positive\")\n    else\n        return\
    \ n*(n+1)/2\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the numbers from 1 to n.\nusing Test\n\n@testset begin\n\n\
    candidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\
    \t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppf55u_wp.jl:20\nin expression starting at\
    \ /tmp/tmppf55u_wp.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 1 \n        then return 1\n        else return n*sum_to_n(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise\nWrite a function that returns the factorial\
    \ of a number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3kdawnsx.jl:15\nin expression starting at /tmp/tmp3kdawnsx.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 1 \n        1 \n    else \n        sum_to_n(n - 1) + n\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the first\
    \ n positive integers. \nFor example, sum_to_n(3) should return 6.\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqualy4r8.jl:20\nin expression starting at\
    \ /tmp/tmpqualy4r8.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 1\n    else \n        sum_to_n(n - 1)\
    \ + n\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a number.\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsfqwv693.jl:15\nin expression starting at /tmp/tmpsfqwv693.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 1 \n        error(\"n must be >= 1\")\n    elseif n < 10 \n   \
    \     return n\n    elseif n < 100 \n        return sum_to_n(n / 10) + n % 10\n\
    \    elseif n < 1000 \n        return sum_to_n(n / 100) + n % 100\n    elseif\
    \ n < 10000 \n        return sum_to_n(n / 1000) + n % 1000\n    elseif n < 100000\
    \ \n        return sum_to_n(n / 10000) + n % 10000\n    elseif n < 1000000 \n\
    \        return sum_to_n(n / 100000) + n % 100000\n    elseif n < 10000000 \n\
    \        return sum_to_n(n / 1000000) + n % 1000000\n    elseif n < 100000000\
    \ \n        return sum_to_n(n / 10000000) + n % 10000000\n    elseif n < 1000000000\
    \ \n        return sum_to_n(n / 100000000) + n % 100000000\n    elseif n < 10000000000\
    \ \n        return sum_to_n(n / 1000000000) + n % 1000000000\n    elseif n < 100000000000\
    \ \n        return sum_to_n(n / 10000000000) + n % 10000000000\n    elseif n <\
    \ 1000000000000 \n        return sum_to_n(n / 100000000000) + n % 100000000000\n\
    \    elseif n < 10000000000000 \n        return sum_to_n(n / 1000000000000) +\
    \ n % 1000000000000\n    elseif n < 100000000000000 \n        return sum_to_n(n\
    \ / 10000000000000) + n % 10000000000000\n    elseif n < 1000000000000000 \n \
    \       return sum_to_n(n / 100000000000000) + n % 100000000000000\n    elseif\
    \ n < 10000000000000000 \n        return sum_to_n(n / 1000000000000000) + n %\
    \ 1000000000000000\n    elseif n < 100000000000000000 \n        return sum_to_n(n\
    \ / 10000000000000000) + n % 10000000000000000\n    elseif n < 1000000000000000000\
    \ \n        return sum_to_n(n / 100000000000000000) + n % 100000000000000000\n\
    \    elseif n < 10000000000000000000 \n        return sum_to_n(n / 1000000000000000000)\
    \ + n % 1000000000000000000\n    elseif n < 100000000000000000000 \n        return\
    \ sum_to_n(n / 10000000000000000000) + n % 10000000000000000000\n    elseif n\
    \ < 1000000000000000000000 \n        return sum_to_n(n / 100000000000000000000)\
    \ + n % 100000000000000000000\n    elseif n < 10000000000000000000000 \n     \
    \   return sum_to_n(n / 1000000000000000000000) + n % 1000000000000000000000\n\
    \    elseif n < 100000000000000000000000 \n        return sum_to_n(n / 10000000000000000000000)\
    \ + n % 10000000000000000000000\n    elseif n < 1000000000000000000000000 \n \
    \       return sum_to_n(n / 100000000000000000000000) + n % 100000000000000000000000\n\
    \    elseif n < 10000000000000000000000000 \n        return sum_to_n(n / 1000000000000000000000000)\
    \ + n % 1000000000000000000000000\n    elseif n < \nusing Test\n\n@testset begin\n\
    \ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\
    \t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpev3wdavy.jl:1\nin expression starting at /tmp/tmpev3wdavy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0 \n    else \n        sum_to_n(n - 1)\
    \ + n \nend \n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpztvp7v2b.jl:15\nin expression starting at /tmp/tmpztvp7v2b.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n    then 0\n    else n + sum_to_n(n - 1)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise\nWrite a function that returns the sum of the first n positive integers,\
    \ starting from 1.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) ==\
    \ 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"0\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppxprccib.jl:15\nin expression starting at /tmp/tmppxprccib.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0 \n        else return n + sum_to_n(n-1)\
    \ \nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpye_4_58h.jl:15\nin expression starting at /tmp/tmpye_4_58h.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    else if n == 1\n\
    \        1\n    else\n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 3\n\
    Write a function that computes the factorial of a given number. For example, factorial(5)\
    \ = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1 = 120\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr3uvi31w.jl:16\nin expression starting at\
    \ /tmp/tmpr3uvi31w.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else \n        sum_to_n(n - 1)\
    \ + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpioxz3p56.jl:15\nin expression starting at /tmp/tmpioxz3p56.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n==0 \n        then return 0\n    else \n        sum_to_n(n-1)+n\n\
    end\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the factorial of a number.\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp49ls12t_.jl:15\nin expression starting at /tmp/tmp49ls12t_.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    else if n == 1\n\
    \        1\n    else\n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.4>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(5)\n</cell>\n<code language=julia-1.4>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4vfy06pp.jl:16\nin expression starting at\
    \ /tmp/tmp4vfy06pp.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 1 \n        error(\"n must be positive\")\n    else if n == 1 \n\
    \        1\n    else \n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code language=julia-1.1>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.1>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.1>\nsum_to_n(5)\n</cell>\n<code language=julia-1.1>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.1>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the sum of the first n positive integers. \nFor example,\
    \ sum_to_n(10) should return 55.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzsu5aq31.jl:16\nin expression starting at\
    \ /tmp/tmpzsu5aq31.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else \n        sum_to_n(n - 1)\
    \ + n\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the factorial of a number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpn8dl90_o.jl:15\nin expression starting at /tmp/tmpn8dl90_o.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    else if n == 1\n\
    \        1\n    else\n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the numbers from 1 to n that are divisible\
    \ by 3.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiv4k_4cy.jl:16\nin expression starting at\
    \ /tmp/tmpiv4k_4cy.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 1 \n        1 \n    else \n        sum_to_n(n - 1) + n\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0mx0x2po.jl:19\nin expression starting at\
    \ /tmp/tmp0mx0x2po.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n==0\n        0\n    else\n        sum_to_n(n - 1) + n\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the factorial of a given\
    \ number. \nHint: Use a recursive function.\nusing Test\n\n@testset begin\n\n\
    candidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\
    \t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9wospbrs.jl:19\nin expression starting at\
    \ /tmp/tmp9wospbrs.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n    then return 0\n    else return n + sum_to_n(n-1)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpp5zmtiwo.jl:15\nin expression starting at /tmp/tmpp5zmtiwo.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    else\n        (n*(n+1))/2\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a number.\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw2goul5e.jl:19\nin expression starting at\
    \ /tmp/tmpw2goul5e.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    else\n        sum_to_n_impl(n)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that sums numbers from\
    \ 1 to n but stops when the sum exceeds n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdyap15l3.jl:20\nin expression starting at\
    \ /tmp/tmpdyap15l3.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    else\n        return\
    \ n\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpaviaajpm.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpaviaajpm.jl:26\n  Expression: candidate(6)\
    \ == 21\n   Evaluated: 6 == 21\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaviaajpm.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaviaajpm.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpaviaajpm.jl:27\n  Expression: candidate(11) == 66\n   Evaluated:\
    \ 11 == 66\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaviaajpm.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaviaajpm.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpaviaajpm.jl:28\n  Expression: candidate(30) == 465\n   Evaluated:\
    \ 30 == 465\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaviaajpm.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaviaajpm.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpaviaajpm.jl:29\n  Expression: candidate(100) == 5050\n   Evaluated:\
    \ 100 == 5050\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaviaajpm.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaviaajpm.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else \n        sum_to_n(n - 1)\
    \ + n\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprwope7x5.jl:15\nin expression starting at /tmp/tmprwope7x5.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n==0 \n        then return 0\n    else if n==1 \n        then return\
    \ 1\n    else \n        sum_to_n(n-1)+sum_to_n(n-2)\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the factorial\
    \ of a given number. \nFor example, factorial(5) = 5 x 4 x 3 x 2 x 1 = 120\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4rx32u6j.jl:15\nin expression starting at /tmp/tmp4rx32u6j.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    else if n == 1\n\
    \        1\n    else\n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that sums numbers from 1 to n but stops when the sum is greater than\
    \ n.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfynbwzd6.jl:16\nin expression starting at\
    \ /tmp/tmpfynbwzd6.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    else\n        return\
    \ n\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpaviaajpm.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmpaviaajpm.jl:26\n  Expression: candidate(6)\
    \ == 21\n   Evaluated: 6 == 21\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaviaajpm.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaviaajpm.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpaviaajpm.jl:27\n  Expression: candidate(11) == 66\n   Evaluated:\
    \ 11 == 66\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaviaajpm.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaviaajpm.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpaviaajpm.jl:28\n  Expression: candidate(30) == 465\n   Evaluated:\
    \ 30 == 465\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaviaajpm.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaviaajpm.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpaviaajpm.jl:29\n  Expression: candidate(100) == 5050\n   Evaluated:\
    \ 100 == 5050\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpaviaajpm.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpaviaajpm.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else \n        sum_to_n(n - 1)\
    \ + n\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n prime numbers.\
    \ \nHint: use an if statement to check if n is prime.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjc_lw2_s.jl:15\nin expression starting at /tmp/tmpjc_lw2_s.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else \n        sum_to_n(n - 1)\
    \ + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of the first\
    \ n positive integers. \nHint: Use a recursive function.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4yvu2y6k.jl:15\nin expression starting at /tmp/tmp4yvu2y6k.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    else\n        return\
    \ n*(n+1)/2\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpui0gpnbx.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpui0gpnbx.jl:1\n\
    in expression starting at /tmp/tmpui0gpnbx.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 1\n        error(\"n must be positive\")\n    else\n        sum_to_n_impl(n)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpa51ty6aa.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpa51ty6aa.jl:25\n  Test threw exception\n\
    \  Expression: candidate(1) == 1\n  UndefVarError: sum_to_n_impl not defined\n\
    \  Stacktrace:\n   [1] sum_to_n(n::Int64)\n     @ Main /tmp/tmpa51ty6aa.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa51ty6aa.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa51ty6aa.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpa51ty6aa.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(6) == 21\n  UndefVarError: sum_to_n_impl not defined\n  Stacktrace:\n\
    \   [1] sum_to_n(n::Int64)\n     @ Main /tmp/tmpa51ty6aa.jl:17\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa51ty6aa.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa51ty6aa.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpa51ty6aa.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(11) == 66\n  UndefVarError: sum_to_n_impl not defined\n  Stacktrace:\n\
    \   [1] sum_to_n(n::Int64)\n     @ Main /tmp/tmpa51ty6aa.jl:17\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa51ty6aa.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa51ty6aa.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpa51ty6aa.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(30) == 465\n  UndefVarError: sum_to_n_impl not defined\n  Stacktrace:\n\
    \   [1] sum_to_n(n::Int64)\n     @ Main /tmp/tmpa51ty6aa.jl:17\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [i"
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else \n        sum_to_n(n - 1)\
    \ + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that sums numbers from 1 to n but\
    \ stops when the sum is greater than n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp72vgzy17.jl:15\nin expression starting at /tmp/tmp72vgzy17.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    else\n        sum_to_n_impl(n)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a given number. For example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\
    \ = 120.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphuqfqgo4.jl:20\nin expression starting at\
    \ /tmp/tmphuqfqgo4.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 1\n    else \n        sum_to_n(n - 1)\
    \ + n\nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(30)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.0>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code language=julia-1.0>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp40no4of5.jl:15\nin expression starting at /tmp/tmp40no4of5.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n==1 \n        1 \n    else \n        n*sum_to_n(n-1)\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the factorial of a number.\n\
    using Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) ==\
    \ 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5irfvttf.jl:19\nin expression starting at\
    \ /tmp/tmp5irfvttf.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    else\n        1 + sum_to_n(n-1)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n prime numbers.\
    \ \nHint: use the function primes(n) to get the prime numbers. \nHint: use the\
    \ function primes(n) to get the prime numbers. \nHint: use the function primes(n)\
    \ to get the prime numbers. \nHint: use the function primes(n) to get the prime\
    \ numbers. \nHint: use the function primes(n) to get the prime numbers. \nHint:\
    \ use the function primes(n) to get the prime numbers. \nHint: use the function\
    \ primes(n) to get the prime numbers. \nHint: use the function primes(n) to get\
    \ the prime numbers. \nHint: use the function primes(n) to get the prime numbers.\
    \ \nHint: use the function primes(n) to get the prime numbers. \nHint: use the\
    \ function primes(n) to get the prime numbers. \nHint: use the function primes(n)\
    \ to get the prime numbers. \nHint: use the function primes(n) to get the prime\
    \ numbers. \nHint: use the function primes(n) to get the prime numbers. \nHint:\
    \ use the function primes(n) to get the prime numbers. \nHint: use the function\
    \ primes(n) to get the prime numbers. \nHint: use the function primes(n) to get\
    \ the prime numbers. \nHint: use the function primes(n) to get the prime numbers.\
    \ \nHint: use the function primes(n) to get the prime numbers. \nHint: use the\
    \ function primes(n) to get the prime numbers. \nHint: use the function primes(n)\
    \ to get the prime numbers. \nHint: use the function primes(n) to get the prime\
    \ numbers. \nHint: use the function primes(n) to get the prime numbers. \nHint:\
    \ use the function primes(n) to get the prime numbers. \nHint: use the function\
    \ primes(n) to get the prime numbers. \nHint: use the function primes(n) to get\
    \ the prime numbers. \nHint: use the function primes(n) to get the prime numbers.\
    \ \nHint: use the function primes(n) to get the prime numbers. \nHint: use the\
    \ function primes(n) to get the prime numbers. \nHint: use the function primes(n)\
    \ to get the prime numbers. \nHint: use the function primes(n) to \nusing Test\n\
    \n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpszu3ino2.jl:19\nin expression starting at\
    \ /tmp/tmpszu3ino2.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    else\n        return\
    \ n * (n + 1) / 2\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpc29o7gr2.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc29o7gr2.jl:1\n\
    in expression starting at /tmp/tmpc29o7gr2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0 \n        else return n + sum_to_n(n\
    \ - 1)\n</code>\n<|/ a tags=recursion,haskell |>\n<| c |>\n`sum_to_n` doesn't\
    \ have a base case. `sum_to_n 0 = 0` but `sum_to_n 1 = 1`.\n<|/ c |>\n<| c |>\n\
    Yes, I know. I just wanted to show how to implement the recursive function without\
    \ having to write it out by hand.\n<|/ c |>\n<| c |>\nI see your point, but I\
    \ believe that `sum_to_n 0 = 0` and `sum_to_n 1 = 1` are the only two cases that\
    \ can happen.\n<|/ c |>\n<| c |>\nYes, but `sum_to_n n = n + 1` can happen.\n\
    <|/ c |>\n<| c |>\nYes, but `sum_to_n n = n + 1` can happen.\n<|/ c |>\n<| a tags=recursion,haskell\
    \ |>\n<code>\nsum_to_n :: Int -> Int\nsum_to_n 0 = 0\nsum_to_n n = n + sum_to_n\
    \ (n-1)\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nsum_to_n :: Int -> Int\n\
    sum_to_n 0 = 0\nsum_to_n n = n + sum_to_n (n-1)\n</code>\n<|/ a tags=recursion,haskell\
    \ dscore=2 |>\n<| a tags=recursion,haskell |>\n<code>\nsum_to_n :: Int -> Int\n\
    sum_to_n 0 = 0\nsum_to_n n = n + sum_to_n (n-1)\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=1 |>\n<code>\nsum_to_n :: Int -> Int\nsum_to_n 0 = 0\nsum_to_n n =\
    \ n + sum_to_n (n-1)\n</code>\n<|/ a tags=recursion,haskell |>\n<| a tags=recursion,haskell\
    \ |>\n<code>\nsum_to_n :: Int -> Int\nsum_to_n 0 = 0\nsum_to_n n = n + sum_to_n\
    \ (n-1)\n</code>\n<|/ a dscore=1 |>\n<| a tags=recursion,haskell |>\n<code>\n\
    sum_to_n :: Int -> Int\nsum_to_n 0 = 0\nsum_to_n n = n + sum_to_n (n-1)\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=recursion,haskell |>\n<code>\nsum_to_n :: Int ->\
    \ Int\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpeor033cu.jl:15\nin expression starting at /tmp/tmpeor033cu.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 1 \n        error(\"n must be greater than 0\", 2)\n    elseif\
    \ n < 2 \n        1\n    elseif n == 1 \n        1\n    elseif n == 2 \n     \
    \   2\n    elseif n == 3 \n        3\n    elseif n == 4 \n        4\n    elseif\
    \ n == 5 \n        5\n    elseif n == 6 \n        6\n    elseif n == 7 \n    \
    \    7\n    elseif n == 8 \n        8\n    elseif n == 9 \n        9\n    elseif\
    \ n == 10 \n        10\n    elseif n == 11 \n        11\n    elseif n == 12 \n\
    \        12\n    elseif n == 13 \n        13\n    elseif n == 14 \n        14\n\
    \    elseif n == 15 \n        15\n    elseif n == 16 \n        16\n    elseif\
    \ n == 17 \n        17\n    elseif n == 18 \n        18\n    elseif n == 19 \n\
    \        19\n    elseif n == 20 \n        20\n    elseif n == 21 \n        21\n\
    \    elseif n == 22 \n        22\n    elseif n == 23 \n        23\n    elseif\
    \ n == 24 \n        24\n    elseif n == 25 \n        25\n    elseif n == 26 \n\
    \        26\n    elseif n == 27 \n        27\n    elseif n == 28 \n        28\n\
    \    elseif n == 29 \n        29\n    elseif n == 30 \n        30\n    elseif\
    \ n == 31 \n        31\n    elseif n == 32 \n        32\n    elseif n == 33 \n\
    \        33\n    elseif n == 34 \n        34\n    elseif n == 35 \n        35\n\
    \    elseif n == 36 \n        36\n    elseif n == 37 \n        37\n    elseif\
    \ n == 38 \n        38\n    elseif n == 39 \n        39\n    elseif n == 40 \n\
    \        40\n    elseif n == 41 \n        41\n    elseif n == 42 \n        42\n\
    \    elseif n == 43 \n        43\n    elseif n == 44 \n        44\n    elseif\
    \ n == 45 \n        45\n    elseif n == 46 \n        46\n    elseif n == 47 \n\
    \        47\n    elseif n == 48 \n        48\n    elseif n == 49 \n        49\n\
    \    elseif n == 50 \n        50\n    elseif n == 51 \n        51\n    elseif\
    \ n == 52 \n        52\n    elseif n == 53 \n        53\n    elseif n == 54 \n\
    \        54\n    elseif n == 55 \n        55\n    elseif n == 56 \n        56\n\
    \    elseif n == 57 \n        57\n    elseif n == 58 \n        58\n    elseif\
    \ n == 59\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6jmoek2l.jl:1\nin expression starting at /tmp/tmp6jmoek2l.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.4>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(5)\n</cell>\n<code language=julia-1.4>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpw32_7thd.jl:15\nin expression starting at /tmp/tmpw32_7thd.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else \n        sum_to_n(n - 1)\
    \ + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a number.\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_4r4thob.jl:15\nin expression starting at /tmp/tmp_4r4thob.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 1\n        error(\"n must be >= 1\")\n    else\n        return\
    \ n * (n + 1) / 2\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the sum of the numbers from 1 to n except for numbers divisible\
    \ by 3.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe7x1ips3.jl:20\nin expression starting at\
    \ /tmp/tmpe7x1ips3.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else \n        sum_to_n(n - 1)\
    \ + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ given number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpk_pj_lhz.jl:15\nin expression starting at /tmp/tmpk_pj_lhz.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    else\n        return\
    \ n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(100)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the factorial of a number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpscp6vv_5.jl:19\nin expression starting at\
    \ /tmp/tmpscp6vv_5.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0 \n        else return n + sum_to_n(n-1)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3ji0j360.jl:15\nin expression starting at /tmp/tmp3ji0j360.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else \n        return n + sum_to_n(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number.\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqzzy876k.jl:15\nin expression starting at /tmp/tmpqzzy876k.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 1\n        error(\"n must be positive\")\n    elseif n < 2\n  \
    \      1\n    else\n        n * (n + 1) / 2\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that returns the sum of the first n positive integers. Use a while\
    \ loop to do this.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) ==\
    \ 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0dpmnc00.jl:21\nin expression starting at\
    \ /tmp/tmp0dpmnc00.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 0\n        error(\"n must be positive\")\n    end\n    if n ==\
    \ 0\n        0\n    else\n        sum_to_n(n - 1) + 1\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of the numbers\
    \ from 1 to n inclusive.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpunhxod3w.jl:23\nin expression starting at\
    \ /tmp/tmpunhxod3w.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0 \n        else return n + sum_to_n(n\
    \ - 1)\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question.\
    \ He wants to know how to implement a recursive function without using an explicit\
    \ loop. He doesn't want to know how to implement a recursive function using an\
    \ explicit loop.\n<|/ c |>\n<| c |>\nThe question was how to implement a recursive\
    \ function without using an explicit loop. He didn't want to know how to implement\
    \ a recursive function using an explicit loop. He wanted to know how to implement\
    \ a recursive function without using an explicit loop. He didn't want to know\
    \ how to implement a recursive function using an explicit loop. He didn't want\
    \ to know how to implement a recursive function using an explicit loop. He didn't\
    \ want to know how to implement a recursive function using an explicit loop. He\
    \ didn't want to know how to implement a recursive function using an explicit\
    \ loop. He didn't want to know how to implement a recursive function using an\
    \ explicit loop. He didn't want to know how to implement a recursive function\
    \ using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. He didn't want to know how to implement a recursive\
    \ function using an explicit loop. \nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_9smdror.jl:15\nin expression starting at /tmp/tmp_9smdror.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    else\n        1 + sum_to_n(n - 1)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n prime numbers.\
    \ \nHint: Use a for loop to iterate over all numbers from 2 to n.\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_38jydt3.jl:19\nin expression starting at\
    \ /tmp/tmp_38jydt3.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    end\n    sum = 0\n\
    \    for i in 1:n\n        sum += i\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the square of a number.\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpps8hw6nb.jl:23\nin expression starting at\
    \ /tmp/tmpps8hw6nb.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    end\n    return\
    \ n * (n + 1) / 2\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmawdhot8.jl:19\nin expression starting at\
    \ /tmp/tmpmawdhot8.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 1 \n        1 \n    else \n        n * sum_to_n(n-1) \nend \n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt1sz3vhw.jl:19\nin expression starting at\
    \ /tmp/tmpt1sz3vhw.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else \n        sum_to_n(n - 1)\
    \ + n\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that sums numbers from 1 to n but\
    \ stops when the sum is greater than n.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpemzdoc2b.jl:15\nin expression starting at /tmp/tmpemzdoc2b.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else \n        then return n +\
    \ sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the factorial of a number.\n\
    using Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) ==\
    \ 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpihp4douk.jl:15\nin expression starting at /tmp/tmpihp4douk.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    else\n        1 + sum_to_n(n - 1)\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the factorial of a number.\n\
    using Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) ==\
    \ 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2lg98d3y.jl:19\nin expression starting at\
    \ /tmp/tmp2lg98d3y.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return n + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a given number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) ==\
    \ 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpl00muqo7.jl:15\nin expression starting at /tmp/tmpl00muqo7.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    else\n        sum_to_n_impl(n)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp4760jp7a.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmp4760jp7a.jl:25\n  Test threw exception\n\
    \  Expression: candidate(1) == 1\n  UndefVarError: sum_to_n_impl not defined\n\
    \  Stacktrace:\n   [1] sum_to_n(n::Int64)\n     @ Main /tmp/tmp4760jp7a.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4760jp7a.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4760jp7a.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp4760jp7a.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(6) == 21\n  UndefVarError: sum_to_n_impl not defined\n  Stacktrace:\n\
    \   [1] sum_to_n(n::Int64)\n     @ Main /tmp/tmp4760jp7a.jl:17\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4760jp7a.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4760jp7a.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp4760jp7a.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(11) == 66\n  UndefVarError: sum_to_n_impl not defined\n  Stacktrace:\n\
    \   [1] sum_to_n(n::Int64)\n     @ Main /tmp/tmp4760jp7a.jl:17\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4760jp7a.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4760jp7a.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp4760jp7a.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(30) == 465\n  UndefVarError: sum_to_n_impl not defined\n  Stacktrace:\n\
    \   [1] sum_to_n(n::Int64)\n     @ Main /tmp/tmp4760jp7a.jl:17\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [i"
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the first n prime numbers. \nHint: use an if statement\
    \ to check if n is prime.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpe9pme7ce.jl:15\nin expression starting at /tmp/tmpe9pme7ce.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 1\n        error(\"n must be positive\")\n    else\n        return\
    \ n * (n + 1) / 2\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the numbers from\
    \ 1 to n squared.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp76mnp2cp.jl:19\nin expression starting at\
    \ /tmp/tmp76mnp2cp.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    else\n        1 + sum_to_n(n - 1)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1nqshsp4.jl:19\nin expression starting at\
    \ /tmp/tmp1nqshsp4.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n    then return 0\n    else return n + sum_to_n(n-1)\nend\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(30)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.0>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code language=julia-1.0>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that sums numbers from 1 to n where\
    \ n is given as an argument.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpls4kv98w.jl:15\nin expression starting at /tmp/tmpls4kv98w.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n==0 \n        then return 0\n    else \n        sum_to_n(n-1)\n  \
    \  end\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the first\
    \ n prime numbers. \nThe function should take one argument, n, which should be\
    \ an integer.\nThe function should return an array of integers, where each element\
    \ of the array is the nth prime number.\nFor example, if the function were called\
    \ with n=3, the function should return [2,3,5].\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\
    \t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp86fxt_br.jl:15\nin expression starting at /tmp/tmp86fxt_br.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 1\n        error(\"n must be positive\")\n    else\n        return\
    \ n + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.0>\nsum_to_n(100)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the factorial of a number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj1av_ws6.jl:19\nin expression starting at\
    \ /tmp/tmpj1av_ws6.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    else\n        return\
    \ n * (n + 1) / 2\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that computes the factorial of a number.\n\
    using Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) ==\
    \ 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppt8fx68h.jl:19\nin expression starting at\
    \ /tmp/tmppt8fx68h.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 1\n        error(\"n must be positive\")\n    end\n    sum = 0\n\
    \    for i in 1:n\n        sum += i\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(30)\n</cell>\n<code language=julia-1.4>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(5)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.4>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that computes the factorial of a number.\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_5ilsu9z.jl:23\nin expression starting at\
    \ /tmp/tmp_5ilsu9z.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 1 \n        error(\"n must be positive\")\n    else if n == 1 \n\
    \        1\n    else \n        sum_to_n(n - 1) + n\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number.\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5qmqth87.jl:16\nin expression starting at\
    \ /tmp/tmp5qmqth87.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    else\n        n + sum_to_n(n - 1)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbix8wlmu.jl:19\nin expression starting at\
    \ /tmp/tmpbix8wlmu.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else\n        n*sum_to_n(n-1)\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n prime numbers.\
    \ \nHint: use sum_to_n\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph2da6ux0.jl:19\nin expression starting at\
    \ /tmp/tmph2da6ux0.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    else\n        return\
    \ n + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the sum of the first n positive integers. \nFor example, sum_to_n(3)\
    \ should return 1 + 2 + 3 = 6.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpadfx9grv.jl:19\nin expression starting at\
    \ /tmp/tmpadfx9grv.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n<0\n        error(\"n must be positive\")\n    else\n        sum_to_n_aux(n,0)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmplval3viw.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmplval3viw.jl:25\n  Test threw exception\n\
    \  Expression: candidate(1) == 1\n  UndefVarError: sum_to_n_aux not defined\n\
    \  Stacktrace:\n   [1] sum_to_n(n::Int64)\n     @ Main /tmp/tmplval3viw.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplval3viw.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplval3viw.jl:24\ntest set:\
    \ Error During Test at /tmp/tmplval3viw.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(6) == 21\n  UndefVarError: sum_to_n_aux not defined\n  Stacktrace:\n\
    \   [1] sum_to_n(n::Int64)\n     @ Main /tmp/tmplval3viw.jl:17\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplval3viw.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplval3viw.jl:24\ntest set:\
    \ Error During Test at /tmp/tmplval3viw.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(11) == 66\n  UndefVarError: sum_to_n_aux not defined\n  Stacktrace:\n\
    \   [1] sum_to_n(n::Int64)\n     @ Main /tmp/tmplval3viw.jl:17\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmplval3viw.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmplval3viw.jl:24\ntest set:\
    \ Error During Test at /tmp/tmplval3viw.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(30) == 465\n  UndefVarError: sum_to_n_aux not defined\n  Stacktrace:\n\
    \   [1] sum_to_n(n::Int64)\n     @ Main /tmp/tmplval3viw.jl:17\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlin"
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else\n        n*sum_to_n(n-1)\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppc5zryh9.jl:19\nin expression starting at\
    \ /tmp/tmppc5zryh9.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n==1 \n        1 \n    else \n        n*sum_to_n(n-1)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0i3l7y2m.jl:19\nin expression starting at\
    \ /tmp/tmp0i3l7y2m.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        sum_to_n(n - 1) + sum_to_n(n - 2)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number.\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpd_yl_35o.jl:15\nin expression starting at /tmp/tmpd_yl_35o.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0 \n        else return n + sum_to_n(n-1)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the factorial of a number.\n\
    using Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) ==\
    \ 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxdpnqtej.jl:15\nin expression starting at /tmp/tmpxdpnqtej.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 1\n        error(\"n must be positive\")\n    end\n    if n ==\
    \ 1\n        return 1\n    else\n        return n + sum_to_n(n-1)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpftcie4tv.jl:23\nin expression starting at\
    \ /tmp/tmpftcie4tv.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    else\n        sum_to_n_impl(n)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise: Write a function that returns the sum\
    \ of the first n positive integers. Use a while loop to do this.\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqxj4x96c.jl:20\nin expression starting at\
    \ /tmp/tmpqxj4x96c.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 0\n        error(\"n must be positive\")\n    else\n        sum_to_n_impl(n)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp44ekbvru.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmp44ekbvru.jl:25\n  Test threw exception\n\
    \  Expression: candidate(1) == 1\n  UndefVarError: sum_to_n_impl not defined\n\
    \  Stacktrace:\n   [1] sum_to_n(n::Int64)\n     @ Main /tmp/tmp44ekbvru.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp44ekbvru.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp44ekbvru.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp44ekbvru.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(6) == 21\n  UndefVarError: sum_to_n_impl not defined\n  Stacktrace:\n\
    \   [1] sum_to_n(n::Int64)\n     @ Main /tmp/tmp44ekbvru.jl:17\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp44ekbvru.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp44ekbvru.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp44ekbvru.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(11) == 66\n  UndefVarError: sum_to_n_impl not defined\n  Stacktrace:\n\
    \   [1] sum_to_n(n::Int64)\n     @ Main /tmp/tmp44ekbvru.jl:17\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp44ekbvru.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp44ekbvru.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp44ekbvru.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(30) == 465\n  UndefVarError: sum_to_n_impl not defined\n  Stacktrace:\n\
    \   [1] sum_to_n(n::Int64)\n     @ Main /tmp/tmp44ekbvru.jl:17\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [i"
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 1 \n        error(\"n must be positive\")\n    else if n == 1 \n\
    \        1\n    else \n        sum_to_n(n - 1) + n\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the sum of the numbers from 1 to n that\
    \ are divisible by 3.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3crynacr.jl:16\nin expression starting at\
    \ /tmp/tmp3crynacr.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 1\n    else \n        return n + sum_to_n(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a given number. For\
    \ example, factorial(5) == 120.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdnovr4qm.jl:15\nin expression starting at /tmp/tmpdnovr4qm.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 1 \n        then return 1 \n        else return n*sum_to_n(n-1)\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkzx3kgs6.jl:15\nin expression starting at /tmp/tmpkzx3kgs6.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n==0 \n        then return 1\n    else \n        sum_to_n(n-1)+n\n\
    end\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1000)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10000)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100000)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1000000)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10000000)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100000000)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1000000000)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10000000000)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100000000000)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1000000000000)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10000000000000)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100000000000000)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100000000000000000)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(10000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(100000000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(1000000000000000000000)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(1000000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10000000000000000000000000)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100000000000000000000000000)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1000000000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(10000000000000000000000000000)\n\
    </cell>\n<code language=julia-1.3>\nsum\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfdja1uiv.jl:15\nin expression starting at /tmp/tmpfdja1uiv.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else \n        sum_to_n(n - 1)\
    \ + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3ims4g5w.jl:15\nin expression starting at /tmp/tmp3ims4g5w.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 1 \n        then return 1\n    else \n        sum_to_n(n - 1)\
    \ + n\n    end\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a given number. For example, factorial(5) == 120.\n\
    using Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) ==\
    \ 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_yp5co0q.jl:15\nin expression starting at /tmp/tmp_yp5co0q.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n==1 \n        1\n    else\n        n*(n+1)/2\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the first n prime numbers. \nHint: Use\
    \ a for loop to iterate through all numbers from 2 to n.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdwlnv5ix.jl:19\nin expression starting at\
    \ /tmp/tmpdwlnv5ix.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else \n        sum_to_n(n - 1)\
    \ + n\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise\nWrite a function\
    \ that returns the factorial of a number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqanpjkaz.jl:15\nin expression starting at /tmp/tmpqanpjkaz.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    else\n        n * sum_to_n(n - 1)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the sum of the first\
    \ n positive integers. \nFor example, sum_to_n(10) should return 55.\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn0cy3wy9.jl:19\nin expression starting at\
    \ /tmp/tmpn0cy3wy9.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else \n        sum_to_n(n - 1)\
    \ + n\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the numbers\
    \ from 1 to n that are divisible by k.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgmis33pt.jl:15\nin expression starting at /tmp/tmpgmis33pt.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    end\n    sum = 0\n\
    \    for i in 1:n\n        sum += i\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(30)\n</cell>\n<code language=julia-1.4>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(5)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.4>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the numbers from 1 to n that\
    \ are divisible by k.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptm7syij6.jl:23\nin expression starting at\
    \ /tmp/tmptm7syij6.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    else if n == 1\n\
    \        1\n    else\n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.4>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(5)\n</cell>\n<code language=julia-1.4>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.4>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the factorial of a number.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa4v1egwe.jl:16\nin expression starting at\
    \ /tmp/tmpa4v1egwe.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else \n        sum_to_n(n - 1)\
    \ + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the factorial of a number.\n\
    using Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) ==\
    \ 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8zoszciq.jl:15\nin expression starting at /tmp/tmp8zoszciq.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 1\n        error(\"n must be positive\")\n    else if n == 0\n\
    \        0\n    else\n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyfkdky_1.jl:16\nin expression starting at\
    \ /tmp/tmpyfkdky_1.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    else\n        sum_to_n(n - 1) + n\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ft7titu.jl:19\nin expression starting at\
    \ /tmp/tmp2ft7titu.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 0\n        error(\"n must be positive\")\n    else\n        return\
    \ n\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp5g3a7v67.jl:22

    '
  stdout: "test set: Test Failed at /tmp/tmp5g3a7v67.jl:26\n  Expression: candidate(6)\
    \ == 21\n   Evaluated: 6 == 21\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5g3a7v67.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5g3a7v67.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5g3a7v67.jl:27\n  Expression: candidate(11) == 66\n   Evaluated:\
    \ 11 == 66\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5g3a7v67.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5g3a7v67.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5g3a7v67.jl:28\n  Expression: candidate(30) == 465\n   Evaluated:\
    \ 30 == 465\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5g3a7v67.jl:28 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5g3a7v67.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp5g3a7v67.jl:29\n  Expression: candidate(100) == 5050\n   Evaluated:\
    \ 100 == 5050\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp5g3a7v67.jl:29 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp5g3a7v67.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 1\n        error(\"n must be positive\")\n    elseif n == 0\n \
    \       0\n    else\n        sum_to_n(n - 1) + n\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(30)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the sum of the first n positive integers. \nThis function should\
    \ work for any value of n.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyamvmk_q.jl:22\nin expression starting at\
    \ /tmp/tmpyamvmk_q.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 1\n        error(\"n must be positive\")\n    else\n        return\
    \ n + sum_to_n(n-1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<text>\nExercise: Write a function that returns the sum of the numbers\
    \ from 1 to n squared.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpih27n560.jl:20\nin expression starting at\
    \ /tmp/tmpih27n560.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 1\n        error(\"n must be positive\")\n    else\n        sum_to_n_impl(n)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpa51ty6aa.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpa51ty6aa.jl:25\n  Test threw exception\n\
    \  Expression: candidate(1) == 1\n  UndefVarError: sum_to_n_impl not defined\n\
    \  Stacktrace:\n   [1] sum_to_n(n::Int64)\n     @ Main /tmp/tmpa51ty6aa.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa51ty6aa.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa51ty6aa.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpa51ty6aa.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(6) == 21\n  UndefVarError: sum_to_n_impl not defined\n  Stacktrace:\n\
    \   [1] sum_to_n(n::Int64)\n     @ Main /tmp/tmpa51ty6aa.jl:17\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa51ty6aa.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa51ty6aa.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpa51ty6aa.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(11) == 66\n  UndefVarError: sum_to_n_impl not defined\n  Stacktrace:\n\
    \   [1] sum_to_n(n::Int64)\n     @ Main /tmp/tmpa51ty6aa.jl:17\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpa51ty6aa.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpa51ty6aa.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpa51ty6aa.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(30) == 465\n  UndefVarError: sum_to_n_impl not defined\n  Stacktrace:\n\
    \   [1] sum_to_n(n::Int64)\n     @ Main /tmp/tmpa51ty6aa.jl:17\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [i"
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 1 \n        error(\"n must be positive\")\n    else if n == 1 \n\
    \        1\n    else \n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that returns the sum of the first n numbers of a Fibonacci sequence.\
    \ \nThe Fibonacci sequence is defined by the recurrence relation:\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv6gg6t66.jl:16\nin expression starting at\
    \ /tmp/tmpv6gg6t66.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else \n        sum_to_n(n - 1)\
    \ + n\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the factorial of a number.\n\
    using Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) ==\
    \ 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1lcp32fp.jl:15\nin expression starting at /tmp/tmp1lcp32fp.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n==1 \n        1 \n    else \n        sum_to_n(n-1)+n \nend \n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6dh6qr02.jl:19\nin expression starting at\
    \ /tmp/tmp6dh6qr02.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else \n        then return n +\
    \ sum_to_n(n - 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6xqi7oyy.jl:15\nin expression starting at /tmp/tmp6xqi7oyy.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    else\n        return\
    \ n + sum_to_n(n - 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiiwgg9ee.jl:20\nin expression starting at\
    \ /tmp/tmpiiwgg9ee.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    else\n        sum_to_n_impl(n)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmp4760jp7a.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmp4760jp7a.jl:25\n  Test threw exception\n\
    \  Expression: candidate(1) == 1\n  UndefVarError: sum_to_n_impl not defined\n\
    \  Stacktrace:\n   [1] sum_to_n(n::Int64)\n     @ Main /tmp/tmp4760jp7a.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4760jp7a.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4760jp7a.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp4760jp7a.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(6) == 21\n  UndefVarError: sum_to_n_impl not defined\n  Stacktrace:\n\
    \   [1] sum_to_n(n::Int64)\n     @ Main /tmp/tmp4760jp7a.jl:17\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4760jp7a.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4760jp7a.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp4760jp7a.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(11) == 66\n  UndefVarError: sum_to_n_impl not defined\n  Stacktrace:\n\
    \   [1] sum_to_n(n::Int64)\n     @ Main /tmp/tmp4760jp7a.jl:17\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4760jp7a.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4760jp7a.jl:24\ntest set:\
    \ Error During Test at /tmp/tmp4760jp7a.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(30) == 465\n  UndefVarError: sum_to_n_impl not defined\n  Stacktrace:\n\
    \   [1] sum_to_n(n::Int64)\n     @ Main /tmp/tmp4760jp7a.jl:17\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [i"
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 1\n    else \n        return n + sum_to_n(n-1)\n\
    end\n</cell>\n<code language=julia-1.0>\nsum_to_n(30)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.0>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code language=julia-1.0>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the factorial of a number.\n\
    using Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) ==\
    \ 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1vopin0d.jl:15\nin expression starting at /tmp/tmp1vopin0d.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    end\n    sum = 0\n\
    \    for i in 1:n\n        sum += i\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(30)\n</cell>\n<code language=julia-1.0>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(5)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.0>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the sum of the first n positive integers.\
    \ \nFor example, sum_to_n(3) should return 3 + 3 + 3 = 9.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjzsaf45o.jl:23\nin expression starting at\
    \ /tmp/tmpjzsaf45o.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    else\n        sum_to_n_aux(n,\
    \ 1)\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) ==\
    \ 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmps0qt2q3w.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmps0qt2q3w.jl:25\n  Test threw exception\n\
    \  Expression: candidate(1) == 1\n  UndefVarError: sum_to_n_aux not defined\n\
    \  Stacktrace:\n   [1] sum_to_n(n::Int64)\n     @ Main /tmp/tmps0qt2q3w.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps0qt2q3w.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps0qt2q3w.jl:24\ntest set:\
    \ Error During Test at /tmp/tmps0qt2q3w.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(6) == 21\n  UndefVarError: sum_to_n_aux not defined\n  Stacktrace:\n\
    \   [1] sum_to_n(n::Int64)\n     @ Main /tmp/tmps0qt2q3w.jl:17\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps0qt2q3w.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps0qt2q3w.jl:24\ntest set:\
    \ Error During Test at /tmp/tmps0qt2q3w.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(11) == 66\n  UndefVarError: sum_to_n_aux not defined\n  Stacktrace:\n\
    \   [1] sum_to_n(n::Int64)\n     @ Main /tmp/tmps0qt2q3w.jl:17\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmps0qt2q3w.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmps0qt2q3w.jl:24\ntest set:\
    \ Error During Test at /tmp/tmps0qt2q3w.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(30) == 465\n  UndefVarError: sum_to_n_aux not defined\n  Stacktrace:\n\
    \   [1] sum_to_n(n::Int64)\n     @ Main /tmp/tmps0qt2q3w.jl:17\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlin"
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    else\n        return\
    \ n*(n+1)/2\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoedruik0.jl:19\nin expression starting at\
    \ /tmp/tmpoedruik0.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return n + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.0>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(5)\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the factorial of a number.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\
    \t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpx2luvps_.jl:15\nin expression starting at /tmp/tmpx2luvps_.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 1\n        else return n*sum_to_n(n-1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg6rn_s0h.jl:15\nin expression starting at /tmp/tmpg6rn_s0h.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 1\n        error(\"n must be positive\")\n    else\n        return\
    \ n * (n + 1) / 2\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the sum of the numbers from 1 to n squared.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbr1ajxaq.jl:19\nin expression starting at\
    \ /tmp/tmpbr1ajxaq.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 1 \n        error(\"n must be positive\")\n    else if n == 1 \n\
    \        1\n    else \n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the first n positive integers. \nFor\
    \ example, sum_to_n(10) should return 55.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm5xoro5g.jl:16\nin expression starting at\
    \ /tmp/tmpm5xoro5g.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 1 \n        error(\"n must be positive\")\n    elseif n == 1 \n\
    \        1\n    elseif n == 2 \n        2\n    elseif n == 3 \n        3\n   \
    \ elseif n == 4 \n        4\n    elseif n == 5 \n        5\n    elseif n == 6\
    \ \n        6\n    elseif n == 7 \n        7\n    elseif n == 8 \n        8\n\
    \    elseif n == 9 \n        9\n    elseif n == 10 \n        10\n    elseif n\
    \ == 11 \n        11\n    elseif n == 12 \n        12\n    elseif n == 13 \n \
    \       13\n    elseif n == 14 \n        14\n    elseif n == 15 \n        15\n\
    \    elseif n == 16 \n        16\n    elseif n == 17 \n        17\n    elseif\
    \ n == 18 \n        18\n    elseif n == 19 \n        19\n    elseif n == 20 \n\
    \        20\n    elseif n == 21 \n        21\n    elseif n == 22 \n        22\n\
    \    elseif n == 23 \n        23\n    elseif n == 24 \n        24\n    elseif\
    \ n == 25 \n        25\n    elseif n == 26 \n        26\n    elseif n == 27 \n\
    \        27\n    elseif n == 28 \n        28\n    elseif n == 29 \n        29\n\
    \    elseif n == 30 \n        30\n    elseif n == 31 \n        31\n    elseif\
    \ n == 32 \n        32\n    elseif n == 33 \n        33\n    elseif n == 34 \n\
    \        34\n    elseif n == 35 \n        35\n    elseif n == 36 \n        36\n\
    \    elseif n == 37 \n        37\n    elseif n == 38 \n        38\n    elseif\
    \ n == 39 \n        39\n    elseif n == 40 \n        40\n    elseif n == 41 \n\
    \        41\n    elseif n == 42 \n        42\n    elseif n == 43 \n        43\n\
    \    elseif n == 44 \n        44\n    elseif n == 45 \n        45\n    elseif\
    \ n == 46 \n        46\n    elseif n == 47 \n        47\n    elseif n == 48 \n\
    \        48\n    elseif n == 49 \n        49\n    elseif n == 50 \n        50\n\
    \    elseif n == 51 \n        51\n    elseif n == 52 \n        52\n    elseif\
    \ n == 53 \n        53\n    elseif n == 54 \n        54\n    elseif n == 55 \n\
    \        55\n    elseif n == 56 \n        56\n    elseif n == 57 \n        57\n\
    \    elseif n == 58 \n        58\n    elseif n == 59 \n        59\n    elseif\
    \ n == 60 \nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9u71s2t6.jl:1\nin expression starting at /tmp/tmp9u71s2t6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    else\n        sum_to_n_aux(n,0)\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,
    0 broken.

    in expression starting at /tmp/tmpjz3w6n_v.jl:22

    '
  stdout: "test set: Error During Test at /tmp/tmpjz3w6n_v.jl:25\n  Test threw exception\n\
    \  Expression: candidate(1) == 1\n  UndefVarError: sum_to_n_aux not defined\n\
    \  Stacktrace:\n   [1] sum_to_n(n::Int64)\n     @ Main /tmp/tmpjz3w6n_v.jl:17\n\
    \   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjz3w6n_v.jl:25 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjz3w6n_v.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpjz3w6n_v.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(6) == 21\n  UndefVarError: sum_to_n_aux not defined\n  Stacktrace:\n\
    \   [1] sum_to_n(n::Int64)\n     @ Main /tmp/tmpjz3w6n_v.jl:17\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjz3w6n_v.jl:26 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjz3w6n_v.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpjz3w6n_v.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(11) == 66\n  UndefVarError: sum_to_n_aux not defined\n  Stacktrace:\n\
    \   [1] sum_to_n(n::Int64)\n     @ Main /tmp/tmpjz3w6n_v.jl:17\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjz3w6n_v.jl:27 [inlined]\n\
    \   [4] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjz3w6n_v.jl:24\ntest set:\
    \ Error During Test at /tmp/tmpjz3w6n_v.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(30) == 465\n  UndefVarError: sum_to_n_aux not defined\n  Stacktrace:\n\
    \   [1] sum_to_n(n::Int64)\n     @ Main /tmp/tmpjz3w6n_v.jl:17\n   [2] macro expansion\n\
    \     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlin"
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else \n        sum_to_n(n - 1)\
    \ + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the sum of the numbers\
    \ from 1 to n except for numbers divisible by 3.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\
    \t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpx4orgk84.jl:15\nin expression starting at /tmp/tmpx4orgk84.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 1 \n        error(\"n must be positive\")\n    else if n == 1 \n\
    \        1\n    else \n        sum_to_n(n - 1) + n\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a number.\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzi0cack7.jl:16\nin expression starting at\
    \ /tmp/tmpzi0cack7.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 1 \n        error(\"n must be positive\")\n    else if n == 1 \n\
    \        1\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the sum of the numbers from 1 to n that are divisible\
    \ by k.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk9ex_p8r.jl:16\nin expression starting at\
    \ /tmp/tmpk9ex_p8r.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n==1 \n        1 \n    else \n        n*sum_to_n(n-1)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise\nWrite a function that sums numbers from 1 to n where\
    \ n is given as a parameter. For example, sum_to_n(30) should return 465.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\
    \t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpigqwrc13.jl:19\nin expression starting at\
    \ /tmp/tmpigqwrc13.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 1\n        error(\"n must be positive\")\n    else if n == 0\n\
    \        1\n    else\n        sum_to_n(n - 1) + n\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwvzft8em.jl:16\nin expression starting at\
    \ /tmp/tmpwvzft8em.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else \n        sum_to_n(n - 1)\
    \ + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the sum of the numbers\
    \ from 1 to n that are divisible by 3.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp17ajmiub.jl:15\nin expression starting at /tmp/tmp17ajmiub.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 1\n        error(\"n must be positive\")\n    elseif n == 0\n \
    \       1\n    else\n        sum_to_n(n - 1) + 1\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of times each element appears\
    \ in a given array.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t\
    @test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) ==\
    \ 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpihmzf7bt.jl:22\nin expression starting at\
    \ /tmp/tmpihmzf7bt.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n    then return 0\n    else if n == 1\n    then return 1\n\
    \    else return n*sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the factorial of a number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp596ynvy8.jl:15\nin expression starting at /tmp/tmp596ynvy8.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 1\n    else \n        return n + sum_to_n(n-1)\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the factorial of a number.\n\
    using Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) ==\
    \ 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6di52u_o.jl:15\nin expression starting at /tmp/tmp6di52u_o.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 0\n        error(\"n must be positive\")\n    else if n == 0\n\
    \        1\n    else\n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. For example, factorial(5) = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1 = 120.\n\
    using Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) ==\
    \ 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9nxf9xwe.jl:16\nin expression starting at\
    \ /tmp/tmp9nxf9xwe.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 1 \n        error(\"n must be positive\")\n    else if n == 1 \n\
    \        1\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a given number. For example, factorial(5)\
    \ = 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1 = 120.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxjvta8qb.jl:16\nin expression starting at\
    \ /tmp/tmpxjvta8qb.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    else\n        return\
    \ n*(n+1)/2\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the first n numbers of the Fibonacci sequence. Hint: Use a recursive\
    \ function.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7guo2c0l.jl:19\nin expression starting at\
    \ /tmp/tmp7guo2c0l.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else \n        sum_to_n(n - 1)\
    \ + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpioxz3p56.jl:15\nin expression starting at /tmp/tmpioxz3p56.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0 \n        else return n + sum_to_n(n-1)\
    \ \nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3ji0j360.jl:15\nin expression starting at /tmp/tmp3ji0j360.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 1 \n        error(\"n must be positive\")\n    else if n == 1 \n\
    \        1\n    else \n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(10)\n</cell>\n<text>\nExercise: Write a function that returns the factorial\
    \ of a number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzn9u_ui2.jl:16\nin expression starting at\
    \ /tmp/tmpzn9u_ui2.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else \n        sum_to_n(n - 1)\
    \ + n\nend\n</cell>\n<code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a number.\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1ikcs_40.jl:15\nin expression starting at /tmp/tmp1ikcs_40.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 1 \n        error(\"n must be positive\")\n    else if n == 1 \n\
    \        1\n    else \n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the first n prime numbers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb5rg8_a6.jl:16\nin expression starting at\
    \ /tmp/tmpb5rg8_a6.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n==0 \n        then return 0\n    else \n        sum_to_n(n-1)\n  \
    \  end\nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(100)\n</cell>\n<code language=julia-1.0>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise: Write a function that returns the first\
    \ n prime numbers. Use a while loop to do this.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\
    \t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0d6uk9ik.jl:15\nin expression starting at /tmp/tmp0d6uk9ik.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 1 \n        then return 1\n    else \n        sum_to_n(n - 1)\
    \ + n\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the first n prime numbers.\
    \ \nHint: use sum_to_n\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcg67iils.jl:15\nin expression starting at /tmp/tmpcg67iils.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    else\n        1 + sum_to_n(n - 1)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1nqshsp4.jl:19\nin expression starting at\
    \ /tmp/tmp1nqshsp4.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    else\n        (n * (n + 1)) / 2\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the first n prime numbers.\
    \ \nHint: use the sieve of Eratosthenes algorithm\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\
    \t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3t464_kd.jl:19\nin expression starting at\
    \ /tmp/tmp3t464_kd.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else \n        sum_to_n(n - 1)\
    \ + n\nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a number.\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_6_50hor.jl:15\nin expression starting at /tmp/tmp_6_50hor.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    else\n        return\
    \ n + sum_to_n(n - 1)\nend\n</cell>\n<code language=julia-1.4>\nsum_to_n(10)\n\
    </cell>\n<text>\nExercise\nWrite a function that sums numbers from 1 to n where\
    \ n is given as an argument.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2m21yghs.jl:19\nin expression starting at\
    \ /tmp/tmp2m21yghs.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 1 \n        error(\"n must be positive\")\n    else if n == 1 \n\
    \        1\n    else \n        sum_to_n(n - 1) + 1\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the factorial\
    \ of a number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprh1kwas9.jl:16\nin expression starting at\
    \ /tmp/tmprh1kwas9.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 0\n        error(\"n must be positive\")\n    else if n == 0\n\
    \        0\n    else\n        sum_to_n(n - 1) + n\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuz5o4ko8.jl:16\nin expression starting at\
    \ /tmp/tmpuz5o4ko8.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n < 1\n        error(\"n must be positive\")\n    else\n        return\
    \ n * (n + 1) / 2\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the factorial of a number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_lueuaoa.jl:19\nin expression starting at\
    \ /tmp/tmp_lueuaoa.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0 \n        else return n + sum_to_n(n\
    \ - 1)\n</code>\n<|/ a dscore=0 |>\n<| a tags=recursion,haskell |>\n<code>\nsum_to_n\
    \ :: Int -> Int\nsum_to_n n = sum (take n [1..])\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding how and/or why it solves the problem would improve the answer's long-term\
    \ value.\n<|/ c |>\n<| a tags=recursion,haskell |>\n<code>\nsum_to_n :: Int ->\
    \ Int\nsum_to_n n = sum (take n [1..])\n</code>\n<|/ a dscore=0 |>\n<| a tags=recursion,haskell\
    \ |>\n<code>\nsum_to_n :: Int -> Int\nsum_to_n n = sum (take n [1..])\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=recursion,haskell |>\n<code>\nsum_to_n :: Int ->\
    \ Int\nsum_to_n n = sum (take n [1..])\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nsum_to_n :: Int -> Int\nsum_to_n n = sum (take n [1..])\n</code>\n\
    <|/ a tags=recursion,haskell |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding how and/or why it solves the problem\
    \ would improve the answer's long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    sum_to_n :: Int -> Int\nsum_to_n n = sum (take n [1..])\n</code>\n<|/ a tags=recursion,haskell\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding how and/or why it solves the problem would improve the answer's long-term\
    \ value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nsum_to_n :: Int -> Int\nsum_to_n\
    \ n = sum (take n [1..])\n</code>\n<|/ a tags=recursion,haskell |>\n<| c |>\n\
    While this code may answer the question, providing additional context regarding\
    \ how and/or why it solves the problem would improve the answer's long-term value.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>\nsum_to_n \nusing Test\n\n@testset begin\n\n\
    candidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\
    \t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm0v753ks.jl:15\nin expression starting at /tmp/tmpm0v753ks.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else \n        return n + sum_to_n(n\
    \ - 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the factorial of a number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzan68xby.jl:15\nin expression starting at /tmp/tmpzan68xby.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n    then return 0\n    else return n + sum_to_n(n-1)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the factorial of a number.\n\
    using Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) ==\
    \ 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4j4qf1t5.jl:15\nin expression starting at /tmp/tmp4j4qf1t5.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0\n        0\n    else\n        (n * (n + 1)) / 2\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the factorial of a number.\n\
    using Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) ==\
    \ 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjwxfsabr.jl:19\nin expression starting at\
    \ /tmp/tmpjwxfsabr.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n    then return 0\n    else return n + sum_to_n(n - 1)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(10)\n</cell>\n<code language=julia-1.5>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0w2mv5lv.jl:15\nin expression starting at /tmp/tmp0w2mv5lv.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else \n        return n + sum_to_n(n\
    \ - 1)\nend\n</cell>\n<code language=julia-1.0>\nsum_to_n(30)\n</cell>\n<code\
    \ language=julia-1.0>\nsum_to_n(100)\n</cell>\n<code language=julia-1.0>\nsum_to_n(5)\n\
    </cell>\n<code language=julia-1.0>\nsum_to_n(10)\n</cell>\n<code language=julia-1.0>\n\
    sum_to_n(1)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the factorial\
    \ of a number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpi8njf1b6.jl:15\nin expression starting at /tmp/tmpi8njf1b6.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else if n == 1 \n        then return\
    \ 1\n    else \n        return n + sum_to_n(n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.5>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.5>\nsum_to_n(5)\n</cell>\n<code language=julia-1.5>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the factorial of a number.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcc5zfuoi.jl:15\nin expression starting at /tmp/tmpcc5zfuoi.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n==0 \n        then return 0 \n        else return n*sum_to_n(n-1)\
    \ \nend\n</cell>\n<code language=julia-1.1>\nsum_to_n(30)\n</cell>\n<code language=julia-1.1>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.1>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.1>\nsum_to_n(10)\n</cell>\n<code language=julia-1.1>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphnbrzmlf.jl:15\nin expression starting at /tmp/tmphnbrzmlf.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n        error(\"n must be positive\")\n    else\n        sum_to_n_impl(n)\n\
    \    end\nend\nsum_to_n_impl(n::Int64)::Int64 = \n    if n == 0\n        0\n \
    \   else\n        1 + sum_to_n_impl(n-1)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(30)\n</cell>\n<code language=julia-1.3>\nsum_to_n(100)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code language=julia-1.3>\nsum_to_n(10)\n\
    </cell>\n<code language=julia-1.3>\nsum_to_n(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the sum of the first n positive integers. \nHint: Use\
    \ a recursive function.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\
    \t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11)\
    \ == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"end\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxj6vevn6.jl:26\nin expression starting at /tmp/tmpxj6vevn6.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n == 0 \n        then return 0\n    else \n        sum_to_n(n - 1)\
    \ + n\nend\n</cell>\n<code language=julia-1.4>\nsum_to_n(30)\n</cell>\n<code language=julia-1.4>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.4>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.4>\nsum_to_n(10)\n</cell>\n<code language=julia-1.4>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the factorial of a\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmph1qoakj2.jl:15\nin expression starting at /tmp/tmph1qoakj2.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n==1 \n        1 \n    else \n        n*sum_to_n(n-1)\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(30)\n</cell>\n<code language=julia-1.3>\n\
    sum_to_n(100)\n</cell>\n<code language=julia-1.3>\nsum_to_n(5)\n</cell>\n<code\
    \ language=julia-1.3>\nsum_to_n(10)\n</cell>\n<code language=julia-1.3>\nsum_to_n(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ number.\nusing Test\n\n@testset begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1)\
    \ == 1)\n\t@test(candidate(6) == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30)\
    \ == 465)\n\t@test(candidate(100) == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl_4x_waf.jl:19\nin expression starting at\
    \ /tmp/tmpl_4x_waf.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n <= 0\n    then return 0\n    else return n + sum_to_n(n - 1)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_to_n(30)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the factorial of a number.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6)\
    \ == 21)\n\t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdxnjcf2p.jl:15\nin expression starting at /tmp/tmpdxnjcf2p.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n\
    \    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>>\
    \ sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\nfunction sum_to_n(n::Int64)::Int64\
    \ \n    if n==1 \n        1 \n    else \n        n*sum_to_n(n-1)\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_to_n(10)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the factorial of a number.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_to_n;\n\t@test(candidate(1) == 1)\n\t@test(candidate(6) == 21)\n\
    \t@test(candidate(11) == 66)\n\t@test(candidate(30) == 465)\n\t@test(candidate(100)\
    \ == 5050)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ie0m8zd.jl:19\nin expression starting at\
    \ /tmp/tmp9ie0m8zd.jl:19\n"
  stdout: ''
