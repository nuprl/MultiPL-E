language: jl
name: HumanEval_13_greatest_common_divisor
results:
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert greatest_common_divisor(7,\
    \ 3) == 1 \"Greatest common divisor of 7 and 3\"\n@assert greatest_common_divisor(7,\
    \ 5) == 1 \"Greatest common divisor of 7 and 5\"\n@assert greatest_common_divisor(7,\
    \ 7) == 1 \"Greatest common divisor of 7 and 7\"\n@assert greatest_common_divisor(7,\
    \ 11) == 1 \"Greatest common divisor of 7 and 11\"\n@assert greatest_common_divisor(7,\
    \ 13) == 1 \"Greatest common divisor of 7 and 13\"\n@assert greatest_common_divisor(7,\
    \ 17) == 1 \"Greatest common divisor of 7 and 17\"\n@assert greatest_common_divisor(7,\
    \ 19) == 1 \"Greatest common divisor of 7 and 19\"\n@assert greatest_common_divisor(7,\
    \ 23) == 1 \"Greatest common divisor of 7 and 23\"\n@assert greatest_common_divisor(7,\
    \ 29) == 1 \"Greatest common divisor of 7 and 29\"\n@assert greatest_common_divisor(7,\
    \ 31) == 1 \"Greatest common divisor of 7 and 31\"\n@assert greatest_common_divisor(7,\
    \ 37) == 1 \"Greatest common divisor of 7 and 37\"\n@assert greatest_common_divisor(7,\
    \ 41) == 1 \"Greatest common divisor of 7 and 41\"\n@assert greatest_common_divisor(7,\
    \ 43) == 1 \"Greatest common divisor of 7 and 43\"\n@assert greatest_common_divisor(7,\
    \ 47) == 1 \"Greatest common divisor of 7 and 47\"\n@assert greatest_common_divisor(7,\
    \ 53) == 1 \"Greatest common divisor of 7 and 53\"\n@assert greatest_common_divisor(7,\
    \ 59) == 1 \"Greatest common divisor of 7 and 59\"\n@assert greatest_common_divisor(7,\
    \ 61) == 1 \"Greatest common divisor of 7 and 61\"\n@assert greatest_common_divisor(7,\
    \ 67) == 1 \"Greatest common divisor of 7 and 67\"\n@assert greatest_common_divisor(7,\
    \ 71) == 1 \"Greatest common divisor of 7 and 71\"\n@assert greate\nusing Test\n\
    \n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmph3qgktep.jl:9\nin expression starting at /tmp/tmph3qgktep.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia,recursion |>\n<| c |>\nThis does not\
    \ answer the question. `greatest_common_divisor(25, 15)` returns `5` but `greatest_common_divisor(25,\
    \ 15)` should return `1`.\n<|/ c |>\n<| c |>\nI believe that `greatest_common_divisor(25,\
    \ 15)` should return `1` because `greatest_common_divisor(25, 15)` should return\
    \ `5` because `greatest_common_divisor(25, 15)` should return `1` because `greatest_common_divisor(25,\
    \ 15)` should return `5` because `greatest_common_divisor(25, 15)` should return\
    \ `1` because `greatest_common_divisor(25, 15)` should return `5` because `greatest_common_divisor(25,\
    \ 15)` should return `1` because `greatest_common_divisor(25, 15)` should return\
    \ `5` because `greatest_common_divisor(25, 15)` should return `1` because `greatest_common_divisor(25,\
    \ 15)` should return `5` because `greatest_common_divisor(25, 15)` should return\
    \ `1` because `greatest_common_divisor(25, 15)` should return `5` because `greatest_common_divisor(25,\
    \ 15)` should return `1` because `greatest_common_divisor(25, 15)` should return\
    \ `5` because `greatest_common_divisor(25, 15)` should return `1` because `greatest_common_divisor(25,\
    \ 15)` should return `5` because `greatest_common_divisor(25, 15)` should return\
    \ `1` because `greatest_common_divisor(25, 15)` should return `5` because `greatest_common_divisor(25,\
    \ 15)` should return `1` because `greatest_common_divisor(25, 15)` should return\
    \ `5` because `greatest_common_divisor(25, 15)` should return `1` because `greatest_common_divisor(25,\
    \ 15)` should return `5` because `greatest_common_divisor(25, 15)` should return\
    \ `1` because `greatest_common_divisor(25, 15)` should return `5` because `greatest_common_divisor(25,\
    \ 15)` should return `1` because `greatest_common_divisor(25, 15)` should return\
    \ `5` because `greate\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpz4a4x4j4.jl:9\nin expression starting at /tmp/tmpz4a4x4j4.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@assert greatest_common_divisor(7,\
    \ 3) == 1 \"Greatest common divisor of 7 and 3\"\n@assert greatest_common_divisor(7,\
    \ 5) == 1 \"Greatest common divisor of 7 and 5\"\n@assert greatest_common_divisor(7,\
    \ 7) == 1 \"Greatest common divisor of 7 and 7\"\n@assert greatest_common_divisor(7,\
    \ 10) == 1 \"Greatest common divisor of 7 and 10\"\n@assert greatest_common_divisor(7,\
    \ 11) == 2 \"Greatest common divisor of 7 and 11\"\n@assert greatest_common_divisor(7,\
    \ 12) == 2 \"Greatest common divisor of 7 and 12\"\n@assert greatest_common_divisor(7,\
    \ 13) == 2 \"Greatest common divisor of 7 and 13\"\n@assert greatest_common_divisor(7,\
    \ 14) == 2 \"Greatest common divisor of 7 and 14\"\n@assert greatest_common_divisor(7,\
    \ 15) == 2 \"Greatest common divisor of 7 and 15\"\n@assert greatest_common_divisor(7,\
    \ 16) == 2 \"Greatest common divisor of 7 and 16\"\n@assert greatest_common_divisor(7,\
    \ 17) == 2 \"Greatest common divisor of 7 and 17\"\n@assert greatest_common_divisor(7,\
    \ 18) == 2 \"Greatest common divisor of 7 and 18\"\n@assert greatest_common_divisor(7,\
    \ 19) == 2 \"Greatest common divisor of 7 and 19\"\n@assert greatest_common_divisor(7,\
    \ 20) == 2 \"Greatest common divisor of 7 and 20\"\n@assert greatest_common_divisor(7,\
    \ 21) == 2 \"Greatest common divisor of 7 and 21\"\n@assert greatest_common_divisor(7,\
    \ 22) == 2 \"Greatest common divisor of 7 and 22\"\n@assert greatest_common_divisor(7,\
    \ 23) == 2 \"Greatest common divisor of 7 and 23\"\n@assert greatest_common_divisor(7,\
    \ 24) == 2 \"Greatest common divisor of 7 and 24\"\n@assert greatest_common_divisor(7,\
    \ 25) == 2 \"Greatest common divisor of 7 and 25\"\n@assert greatest_\nusing Test\n\
    \n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpftc4zyqd.jl:9\nin expression starting at /tmp/tmpftc4zyqd.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(25,\
    \ 15)\n</cell>\n<text>\nGreatest common divisor of $a$ and $b$ is $a$ if $b$ is\
    \ evenly divisible by $a$ and $b$ is divisible by $a$. Otherwise, $a$ is divisible\
    \ by $b$ and $b$ is evenly divisible by $a$.\nusing Test\n\n@testset begin\n\n\
    candidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpntkku_ji.jl:9\nin expression starting at /tmp/tmpntkku_ji.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpreqe3jzf.jl:9\nin expression starting at /tmp/tmpreqe3jzf.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\
    \t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144,\
    \ 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpslkzn7mg.jl:9\nin expression starting at /tmp/tmpslkzn7mg.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(25,\
    \ 15)\n</cell>\n<text>\nExercise: Write a function that returns the greatest common\
    \ divisor of a and b\nHint: Use a recursive function greatest_common_divisor(a::Int64,\
    \ b::Int64)::Int64\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpct33thiv.jl:9\nin expression starting at /tmp/tmpct33thiv.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis code does not work.\
    \ `greatest_common_divisor(25, 15)` returns `5` instead of `1`.\n<|/ c |>\n<|\
    \ c |>\nI fixed the code. Thanks for pointing out\n<|/ c |>\n<| a dscore=2 |>\n\
    I believe that this is the most efficient solution:\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\
    \t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144,\
    \ 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvapfhxad.jl:9\nin expression starting at /tmp/tmpvapfhxad.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia,recursion |>\n<| c |>\nThis doesn't work\
    \ for negative numbers. `greatest_common_divisor(-3, 5)` returns `-3` instead\
    \ of `1`.\n<|/ c |>\n<| a tags=julia,recursion |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\
    \t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144,\
    \ 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpex6k33uo.jl:9\nin expression starting at /tmp/tmpex6k33uo.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\n    end\nend\n</code>\n<|/ a tags=julia,recursion |>\n<| c |>\nThis\
    \ does not answer the question, which is about recursion.\n<|/ c |>\n<| c |>\n\
    I see what you mean. I've edited my answer to include a recursive solution\n<|/\
    \ c |>\n<| c |>\nThis does not answer the question, which is about recursion.\n\
    <|/ c |>\n<| c |>\nI see what you mean. I've edited my answer to include a recursive\
    \ solution\n<|/ c |>\n<| c |>\nThis does not answer the question, which is about\
    \ recursion.\n<|/ c |>\n<| a dscore=3 |>\nThe accepted answer does not answer\
    \ the question about recursion. Here is a recursive solution:\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0egdyprd.jl:9\nin expression starting at /tmp/tmp0egdyprd.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThe `if` statement is unnecessary\
    \ and can be replaced with `return greatest_common_divisor(b, a % b)`.\n<|/ c\
    \ |>\n<| c |>\nThanks, I didn't know that. I've edited my answer.\n<|/ c |>\n\
    <| a dscore=2 |>\nI wrote a package for Julia called Gcd.jl which implements the\
    \ algorithm of Euclid's algorithm for computing the greatest common divisor of\
    \ two numbers. \n<code>\nusing Gcd.jl\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6bpm8kyl.jl:9\nin expression starting at /tmp/tmp6bpm8kyl.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a |>\n<| c |>\nThe recursive solution doesn't work\
    \ for negative numbers. Try `greatest_common_divisor(-3, -5)`.\n<|/ c |>\n<| c\
    \ |>\nThe recursive solution doesn't work for negative numbers. Try `greatest_common_divisor(-3,\
    \ -5)`.\n<|/ c |>\n<| c |>\nThe recursive solution doesn't work for negative numbers.\
    \ Try `greatest_common_divisor(-3, -5)`.\n<|/ c |>\n<| c |>\nThe recursive solution\
    \ doesn't work for negative numbers. Try `greatest_common_divisor(-3, -5)`.\n\
    <|/ c |>\n<| c |>\nThe recursive solution doesn't work for negative numbers. Try\
    \ `greatest_common_divisor(-3, -5)`.\n<|/ c |>\n<| a dscore=5 |>\nThe recursive\
    \ solution doesn't work for negative numbers. Try greatest_common_divisor(-3,\
    \ -5). \u2013 user1617697\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuk5xbcy4.jl:9\nin expression starting at /tmp/tmpuk5xbcy4.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis doesn't work. `greatest_common_divisor(25,\
    \ 15)` returns `5` instead of `1`.\n<|/ c |>\n<| c |>\nIt doesn't work because\
    \ `greatest_common_divisor(25, 15)` returns `5` instead of `1`. `greatest_common_divisor(25,\
    \ 15)` returns `5` instead of `1` because `greatest_common_divisor(25, 15)` returns\
    \ `5` instead of `1` because `greatest_common_divisor(25, 15)` returns `5` instead\
    \ of `1` because `greatest_common_divisor(25, 15)` returns `5` instead of `1`\
    \ because `greatest_common_divisor(25, 15)` returns `5` instead of `1` because\
    \ `greatest_common_divisor(25, 15)` returns `5` instead of `1` because `greatest_common_divisor(25,\
    \ 15)` returns `5` instead of `1` because `greatest_common_divisor(25, 15)` returns\
    \ `5` instead of `1` because `greatest_common_divisor(25, 15)` returns `5` instead\
    \ of `1` because `greatest_common_divisor(25, 15)` returns `5` instead of `1`\
    \ because `greatest_common_divisor(25, 15)` returns `5` instead of `1` because\
    \ `greatest_common_divisor(25, 15)` returns `5` instead of `1` because `greatest_common_divisor(25,\
    \ 15)` returns `5` instead of `1` because `greatest_common_divisor(25, 15)` returns\
    \ `5` instead of `1` because `greatest_common_divisor(25, 15)` returns `5` instead\
    \ of `1` because `greatest_common_divisor(25, 15)` returns `5` instead of `1`\
    \ because `greatest_common_divisor(25, 15)` returns `5` instead of `1` because\
    \ `greatest_common_divisor(25, 15)` returns `5` instead of `1` because `greatest_common_divisor(25,\
    \ 15)` returns `5` instead of `1` because `greatest_common_divisor(25, 15)` returns\
    \ `5` instead of `1` because `greatest_common_divisor(25, 15)` returns `5` instead\
    \ of `1` because `greatest_common_divisor(25, 15)` returns `5` instead of `1\n\
    using Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplcfh6rhi.jl:9\nin expression starting at /tmp/tmplcfh6rhi.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(25,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the greatest\
    \ common divisor of a and b if b is greater than or equal to a. \nFor example,\
    \ greatest_common_divisor(25, 15) should return 5 since 5 is the greatest common\
    \ divisor of 25 and 15.\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsa83goof.jl:9\nin expression starting at /tmp/tmpsa83goof.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(25,\
    \ 15)\n</cell>\n<text>\nGreatest common divisor of three integers a and b and\
    \ c\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t\
    @test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3et6_2n3.jl:9\nin expression starting at /tmp/tmp3et6_2n3.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(25,\
    \ 15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the greatest\
    \ common divisor of a and b\nIf b is 0, return a\nIf b is negative, return greatest_common_divisor(b,\
    \ a % b)\nIf b is positive, return greatest_common_divisor(b, a % b)\nusing Test\n\
    \n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6_l1nxkm.jl:9\nin expression starting at /tmp/tmp6_l1nxkm.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ `greatest_common_divisor(-3, 5)` returns `-3` instead of `1`.\n<|/ c |>\n<|\
    \ c |>\nIt works for negative numbers. `greatest_common_divisor(-3, -5)` returns\
    \ `1`.\n<|/ c |>\n<| c |>\nIt works for negative numbers. `greatest_common_divisor(-3,\
    \ -5)` returns `1`.\n<|/ c |>\n<| c |>\nIt works for negative numbers. `greatest_common_divisor(-3,\
    \ -5)` returns `1`.\n<|/ c |>\n<| c |>\nIt works for negative numbers. `greatest_common_divisor(-3,\
    \ -5)` returns `1`.\n<|/ c |>\n<| a tags=julia,greatest-common-divisor |>\nThe\
    \ greatest common divisor is defined as the smallest number that divides both\
    \ a and b. \n<code>\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpc5ly6495.jl:9\nin expression starting at /tmp/tmpc5ly6495.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@assert greatest_common_divisor(25,\
    \ 15) == 5\n@assert greatest_common_divisor(25, 10) == 25\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the greatest common divisor of three integers\
    \ a and b and c.\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjqvnd42x.jl:9\nin expression starting at /tmp/tmpjqvnd42x.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis is not the greatest\
    \ common divisor of integers, it is the greatest common divisor of *pairs*. E.g.\
    \ `greatest_common_divisor(3,5)` returns `1`, but `greatest_common_divisor(3,5)`\
    \ returns `3`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I fixed my answer.\n\
    <|/ c |>\n<| a tags=julia |>\nThe function greatest_common_divisor is defined\
    \ in the package GCD.jl which can be installed with Pkg.add(\"GCD.jl\"). \n<code>\n\
    julia> using GCD\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprrqlz1cm.jl:9\nin expression starting at /tmp/tmprrqlz1cm.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia |>\nThe function greatest_common_divisor\
    \ is defined in the package GCD.jl and can be imported using import GCD.jl.\n\
    <code>\njulia> import GCD.jl\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxu8r2i64.jl:9\nin expression starting at /tmp/tmpxu8r2i64.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work. Try it with `greatest_common_divisor(7,\
    \ 3)`.\n<|/ c |>\n<| c |>\nI tested it and it works. I edited the answer to include\
    \ a test case.\n<|/ c |>\n<| c |>\nI tested it and it works. I edited the answer\
    \ to include a test case.\n<|/ c |>\n<| c |>\nI tested it and it works. I edited\
    \ the answer to include a test case.\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I edited the answer to include a test case.\n<|/ c |>\n<| a tags=julia,recursion\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9yrpdmjj.jl:9\nin expression starting at /tmp/tmp9yrpdmjj.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzvp1tmma.jl:9\nin expression starting at /tmp/tmpzvp1tmma.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(25,\
    \ 15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the greatest\
    \ common divisor of a and b\nThe function should return an Int64\nusing Test\n\
    \n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5_i0ymnf.jl:9\nin expression starting at /tmp/tmp5_i0ymnf.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzvp1tmma.jl:9\nin expression starting at /tmp/tmpzvp1tmma.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(25,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a given number. \nThe factorial of a number $n$ is defined as $n!$, where\
    \ $n$ is an integer greater than or equal to 1.\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv3l3me2k.jl:9\nin expression starting at /tmp/tmpv3l3me2k.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,recursion,greatest-common-divisor\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5pgrx6pn.jl:9\nin expression starting at /tmp/tmp5pgrx6pn.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if a == 0 || b == 0 \n        then return 0\n    else \n        greatest_common_divisor(a\
    \ div b, b)\n    end\nend\n</code>\n<|/ a tags=julia,recursion |>\n<| c |>\nThis\
    \ does not work for negative numbers. Try `greatest_common_divisor(-3, -5)`.\n\
    <|/ c |>\n<| c |>\nYes, I forgot about negative numbers. I edited my answer to\
    \ include a solution for negative numbers. Thanks for pointing that out.\n<|/\
    \ c |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp88av917_.jl:9\nin expression starting at /tmp/tmp88av917_.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(25,\
    \ 15)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(25, 15)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the greatest common divisor\
    \ of a and b\nWrite a function that returns the greatest common divisor of a and\
    \ b\nWrite a function that returns the greatest common divisor of a and b\nWrite\
    \ a function that returns the greatest common divisor of a and b\nWrite a function\
    \ that returns the greatest common divisor of a and b\nWrite a function that returns\
    \ the greatest common divisor of a and b\nWrite a function that returns the greatest\
    \ common divisor of a and b\nWrite a function that returns the greatest common\
    \ divisor of a and b\nWrite a function that returns the greatest common divisor\
    \ of a and b\nWrite a function that returns the greatest common divisor of a and\
    \ b\nWrite a function that returns the greatest common divisor of a and b\nWrite\
    \ a function that returns the greatest common divisor of a and b\nWrite a function\
    \ that returns the greatest common divisor of a and b\nWrite a function that returns\
    \ the greatest common divisor of a and b\nWrite a function that returns the greatest\
    \ common divisor of a and b\nWrite a function that returns the greatest common\
    \ divisor of a and b\nWrite a function that returns the greatest common divisor\
    \ of a and b\nWrite a function that returns the greatest common divisor of a and\
    \ b\nWrite a function that returns the greatest common divisor of a and b\nWrite\
    \ a function that returns the greatest common divisor of a and b\nWrite a function\
    \ that returns the greatest common divisor of a and b\nWrite a function that returns\
    \ the greatest common divisor of a and b\nWrite a function that returns the greatest\
    \ common divisor of a and b\nWrite a function that returns the greatest common\
    \ divisor of a and b\nWrite a function that returns the greatest common divisor\
    \ of a and b\nWrite a function that returns the greatest common divisor of a and\
    \ b\nWrite a function that returns the greatest common divisor of a and b\nWrite\
    \ a function that returns the greatest common divisor of a and b\nWrite a function\
    \ that returns the greatest common divisor of a and b\nWrite a function that returns\
    \ the greatest common divisor of a and b\nWrite a function that returns the greatest\
    \ common divisor of a and b\nWrite \nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgr1t4s74.jl:9\nin expression starting at /tmp/tmpgr1t4s74.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia,recursion |>\n<| a tags=julia,recursion\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg_ix7e75.jl:9\nin expression starting at /tmp/tmpg_ix7e75.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if a == 0 || b == 0 \n        then return 0\n    else if b == 0 \n   \
    \     then return a\n    else if b > a \n        then return greatest_common_divisor(b,\
    \ a % b)\n        else return greatest_common_divisor(a, a % b)\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work for negative numbers. Try it with\
    \ `greatest_common_divisor(-3, 5)`.\n<|/ c |>\n<| c |>\nIt works for negative\
    \ numbers. Try it with `greatest_common_divisor(-3, -5)`.\n<|/ c |>\n<| c |>\n\
    It works for negative numbers. Try it with `greatest_common_divisor(-3, -5)`.\n\
    <|/ c |>\n<| c |>\nIt works for negative numbers. Try it with `greatest_common_divisor(-3,\
    \ -5)`.\n<|/ c |>\n<| c |>\nIt works for negative numbers. Try it with `greatest_common_divisor(-3,\
    \ -5)`.\n<|/ c |>\n<| a tags=math,julia |>\nThe other answers here are great,\
    \ but I thought I'd add my own answer because I wanted to see how it compared\
    \ to other solutions.\nI used the Julia BenchmarkTools package to compare the\
    \ performance of various solutions. I ran the benchmark multiple times and averaged\
    \ the results. I ran the benchmark multiple times and averaged the results. I\
    \ ran the benchmark multiple times and averaged the results. I ran the benchmark\
    \ multiple times and averaged the results.\nI ran the benchmark multiple times\
    \ and averaged the results. I ran the benchmark multiple times and averaged the\
    \ results. I ran the benchmark multiple times and averaged the results. I ran\
    \ the benchmark multiple times and averaged the results.\nI ran the benchmark\
    \ multiple times and averaged the results. I ran the benchmark multiple times\
    \ and averaged the results. I ran the benchmark multiple times and averaged the\
    \ results. I ran the benchmark multiple times and averaged the results.\nI ran\
    \ the benchmark multiple times and averaged the results. I ran the benchmark multiple\
    \ times and averaged the results. I ran the benchmark multiple times and averaged\
    \ the results. I ran the benchmark multiple times and averaged the results.\n\
    I ran the benchmark multiple times and averaged the results. I ran the benchmark\
    \ multiple times and averaged the results. I ran the benchmark multiple times\
    \ and averaged the results. I ran the benchmark multiple times and averaged the\
    \ results.\nI ran the benchmark \nusing Test\n\n@testset begin\n\ncandidate =\
    \ greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm_phdch3.jl:9\nin expression starting at /tmp/tmpm_phdch3.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia,recursion |>\n<| c |>\nThis does not\
    \ answer the question. How does this answer the question? What is the difference\
    \ between this and `greatest_common_divisor`?\n<|/ c |>\n<| c |>\nThe difference\
    \ is that this does not use recursion.\n<|/ c |>\n<| c |>\nThe difference is that\
    \ this does not use recursion.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiflsit41.jl:9\nin expression starting at /tmp/tmpiflsit41.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't answer the question,\
    \ which is about how to implement the function in Julia.\n<|/ c |>\n<| c |>\n\
    I didn't realize that Julia had a built-in function for this.  I thought it had\
    \ to be implemented using recursion.  I edited my answer to include a recursive\
    \ solution.  I hope it helps.\n<|/ c |>\n<| c |>\nThis doesn't answer the question,\
    \ which is about how to implement the function in Julia.\n<|/ c |>\n<| c |>\n\
    I didn't realize that Julia had a built-in function for this.  I thought it had\
    \ to be implemented using recursion.  I edited my answer to include a recursive\
    \ solution.  I hope it helps.\n<|/ c |>\n<| a tags=julia,recursion |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8av4zhvv.jl:9\nin expression starting at /tmp/tmp8av4zhvv.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if a < b\n        a, b = b, a\n    \n    x := a % b\n    \n    while x\
    \ != 0\n        x := b % x\n        b := x\n        x := a % b\n    end\n    return\
    \ x\nend\n</cell>\n<code language=julia-1.4>\n@code_warntype greatest_common_divisor(25,\
    \ 15)\n</cell>\n<text>\nGreatest common divisor of integers\nThe greatest common\
    \ divisor of two integers a and b is the largest integer that divides both a and\
    \ b (a // b and b // a give integers a and b respectively, and // is the integer\
    \ division operator).\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5x7nueyn.jl:20\nin expression starting at\
    \ /tmp/tmp5x7nueyn.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThe question was about Julia,\
    \ not Python.\n<|/ c |>\n<| c |>\nI see your point. But the solution is still\
    \ valid for Julia as well.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7)\
    \ == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t\
    @test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpa8nb4ggb.jl:9\nin expression starting at /tmp/tmpa8nb4ggb.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if a == 0 || b == 0 \n        then return 0\n    else if a == b \n   \
    \     then return a\n    else \n        then return greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work for negative\
    \ numbers. `greatest_common_divisor(-3, -5)` returns `-3` instead of `-5`.\n<|/\
    \ c |>\n<| c |>\nYes, you are right. My bad. I'll fix it.\n<|/ c |>\n<| c |>\n\
    I fixed the negative numbers. I hope it helps.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for negative numbers. `greatest_common_divisor(-3, -5)` returns `-3` instead\
    \ of `-5`.\n<|/ c |>\n<| c |>\nI fixed the negative numbers. I hope it helps.\n\
    <|/ c |>\n<| a tags=julia,greatest-common-divisor |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\
    \t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144,\
    \ 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppv5vv_4y.jl:9\nin expression starting at /tmp/tmppv5vv_4y.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(25,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the greatest\
    \ common divisor of a and b if b is greater than or equal to a. \nFor example,\
    \ if a = 25 and b = 15, then your function should return 5 (because 15 is divisible\
    \ by 5 and 5 is divisible by 15).\nusing Test\n\n@testset begin\n\ncandidate =\
    \ greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpd6mw3t8e.jl:9\nin expression starting at /tmp/tmpd6mw3t8e.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@assert greatest_common_divisor(6,\
    \ 2) == 2 \"Greatest common divisor of 6 and 2 should be 2\"\n@assert greatest_common_divisor(6,\
    \ 3) == 1 \"Greatest common divisor of 6 and 3 should be 1\"\n@assert greatest_common_divisor(6,\
    \ 5) == 1 \"Greatest common divisor of 6 and 5 should be 1\"\n@assert greatest_common_divisor(6,\
    \ 7) == 1 \"Greatest common divisor of 6 and 7 should be 1\"\n@assert greatest_common_divisor(6,\
    \ 10) == 1 \"Greatest common divisor of 6 and 10 should be 1\"\n@assert greatest_common_divisor(6,\
    \ 11) == 1 \"Greatest common divisor of 6 and 11 should be 1\"\n@assert greatest_common_divisor(6,\
    \ 12) == 1 \"Greatest common divisor of 6 and 12 should be 1\"\n@assert greatest_common_divisor(6,\
    \ 13) == 1 \"Greatest common divisor of 6 and 13 should be 1\"\n@assert greatest_common_divisor(6,\
    \ 14) == 1 \"Greatest common divisor of 6 and 14 should be 1\"\n@assert greatest_common_divisor(6,\
    \ 15) == 1 \"Greatest common divisor of 6 and 15 should be 1\"\n@assert greatest_common_divisor(6,\
    \ 16) == 1 \"Greatest common divisor of 6 and 16 should be 1\"\n@assert greatest_common_divisor(6,\
    \ 17) == 1 \"Greatest common divisor of 6 and 17 should be 1\"\n@assert greatest_common_divisor(6,\
    \ 18) == 1 \"Greatest common divisor of 6 and 18 should be 1\"\n@assert greatest_common_divisor(6,\
    \ 19) == 1 \"Greatest common divisor of 6 and 19 should be 1\"\n@assert greatest_common_divisor(6,\
    \ 20) == 1 \"Greatest common divisor of 6 and 20 should be 1\"\n@assert greatest_common_divisor(6,\
    \ 21) == 1 \"Greatest common divisor of 6 and 21 should be 1\"\n@assert greatest_common_divisor(6,\
    \ 22) == 1 \"Greatest common divisor of 6 and 22 should be 1\"\n@assert greatest_common_divisor(6,\
    \ 23) == 1 \"Greatest common divisor of 6 and 23 should be 1\"\n@assert greatest_common_divisor(\n\
    using Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmph7fkc0ls.jl:9\nin expression starting at /tmp/tmph7fkc0ls.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if a == 0 || b == 0 \n        then return 0\n    else \n        if a >\
    \ b \n            then return greatest_common_divisor(b, a % b)\n            else\
    \ return greatest_common_divisor(a, a % b)\nend\n</code>\n<|/ a tags=julia |>\n\
    <| c |>\nThis is not the greatest common divisor, which is defined as the largest\
    \ integer that divides both a and b. E.g. greatest_common_divisor(7, 3) should\
    \ be 2, not 3.\n<|/ c |>\n<| c |>\nThe greatest common divisor is defined as the\
    \ largest integer that divides both a and b. E.g. greatest_common_divisor(7, 3)\
    \ should be 2, not 3.\n<|/ c |>\n<| c |>\nThe greatest common divisor is defined\
    \ as the largest integer that divides both a and b. E.g. greatest_common_divisor(7,\
    \ 3) should be 2, not 3.\n<|/ c |>\n<| c |>\nThe greatest common divisor is defined\
    \ as the largest integer that divides both a and b. E.g. greatest_common_divisor(7,\
    \ 3) should be 2, not 3.\n<|/ c |>\n<| c |>\nThe greatest common divisor is defined\
    \ as the largest integer that divides both a and b. E.g. greatest_common_divisor(7,\
    \ 3) should be 2, not 3.\n<|/ c |>\n<| a dscore=5 |>\nThe greatest common divisor\
    \ is defined as the largest integer that divides both a and b. E.g. greatest_common_divisor(7,\
    \ 3) should be 2, not 3.\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxf1n0trk.jl:9\nin expression starting at /tmp/tmpxf1n0trk.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf6dm7gve.jl:9\nin expression starting at /tmp/tmpf6dm7gve.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `greatest_common_divisor(25,\
    \ 15)` returns `5` instead of `1`.\n<|/ c |>\n<| c |>\nThanks for pointing that\
    \ out. I fixed it.\n<|/ c |>\n<| a tags=julia,greatest-common-divisor |>\nThe\
    \ answer by is correct, but I wanted to add some explanation as to why it works.\n\
    The recursive function greatest_common_divisor is defined as:\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpl324vnsr.jl:9\nin expression starting at /tmp/tmpl324vnsr.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia,recursion,greatest-common-divisor |>\n\
    <| a tags=julia,recursion,greatest-common-divisor |>\nI wrote a package for this.\
    \ It has both a recursive version and a non-recursive version. \n<code>\nusing\
    \ Gcd\ngcd(3, 5)\n# 1\ngcd(25, 15)\n# 5\n</code>\n<|/ a dscore=3 |>\n<| a tags=julia,recursion,greatest-common-divisor\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjzzcesrm.jl:9\nin expression starting at /tmp/tmpjzzcesrm.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI believe this should be `if\
    \ b == 0` not `if b == true`\n<|/ c |>\n<| c |>\nThanks, I fixed it.\n<|/ c |>\n\
    <| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4f1cr_s3.jl:9\nin expression starting at /tmp/tmp4f1cr_s3.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work for negative\
    \ numbers. `greatest_common_divisor(-3, -5)` returns `-3` instead of `1`.\n<|/\
    \ c |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfhxomhrq.jl:9\nin expression starting at /tmp/tmpfhxomhrq.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis doesn't work if `a`\
    \ is negative and `b` is positive.\n<|/ c |>\n<| c |>\nIt doesn't work for negative\
    \ numbers, because `a%b` returns `a` when `a` is negative.\n<|/ c |>\n<| c |>\n\
    Ah, I see what you mean. Yes, this doesn't work for negative numbers. I guess\
    \ I should delete my comment. Sorry about that.\n<|/ c |>\n<| a dscore=2 |>\n\
    The answer by is correct, but I thought I'd add some explanation as to why it\
    \ works.\nThe reason why it works is because Julia is lazy and doesn't evaluate\
    \ the remainder until it needs to. In the case of a negative number, the remainder\
    \ is never evaluated because a % b is always positive.\nThe reason why it works\
    \ is because Julia is lazy and doesn't evaluate the remainder until it needs to.\
    \ In the case of a negative number, the remainder is never evaluated because a\
    \ % b is always positive.\n<|/ a tags=julia |>\n<| a dscore=2 |>\nThe other answers\
    \ here are correct, but I thought I'd add some explanation as to why it works.\n\
    The reason why it works is because Julia is lazy and doesn't evaluate the remainder\
    \ until it needs to. In the case of a negative number, the remainder is never\
    \ evaluated because a % b is always positive.\nThe reason why it works is because\
    \ Julia is lazy and doesn't evaluate the remainder until it needs to. In the case\
    \ of a negative number, the remainder is never evaluated because a % b is always\
    \ positive.\nThe reason why it works is because Julia is lazy and doesn't evaluate\
    \ the remainder until it needs to. In the case of a negative number, the remainder\
    \ is never evaluated because a % b is always positive.\nThe reason why it works\
    \ is because Julia is lazy and doesn't evaluate the remainder until it needs to.\
    \ In the case of a negative number, the remainder is never evaluated because a\
    \ % b is always positive.\nThe reason why it works is because Julia is lazy and\
    \ doesn't evaluate the remainder until it needs to. In the case of a negative\
    \ number, the remainder is never evaluated because a % b is always positive.\n\
    The reason why it works is because Julia is lazy and doesn't evaluate the remainder\
    \ until it need\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjw0wj331.jl:9\nin expression starting at /tmp/tmpjw0wj331.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(25,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the greatest\
    \ common divisor of a and b if they are both integers. If the two integers are\
    \ not integers, return an error message.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgkrr1mv8.jl:9\nin expression starting at /tmp/tmpgkrr1mv8.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if a == 0 || b == 0 \n        then return 0\n    else \n        return\
    \ greatest_common_divisor(b, a % b) \nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This doesn't work for negative numbers. `greatest_common_divisor(-5, -2)` returns\
    \ `-5` instead of `-2`.\n<|/ c |>\n<| c |>\nI see your point. Thanks for pointing\
    \ that out. I will update my answer.\n<|/ c |>\n<| c |>\nI updated my answer to\
    \ handle negative numbers. Thanks for pointing that out.\n<|/ c |>\n<| c |>\n\
    This doesn't work for negative numbers. `greatest_common_divisor(-5, -2)` returns\
    \ `-5` instead of `-2`.\n<|/ c |>\n<| c |>\nI updated my answer to handle negative\
    \ numbers. Thanks for pointing that out.\n<|/ c |>\n<| a dscore=1 |>\nThe algorithm\
    \ is simple:\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfh2wvlw8.jl:9\nin expression starting at /tmp/tmpfh2wvlw8.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if a == 0 || b == 0 \n        then return 0\n    else \n        if a >\
    \ b \n            then return greatest_common_divisor(b, a % b)\n            else\
    \ return greatest_common_divisor(a, a % b)\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This does not provide an answer to the question. Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead).\
    \ - [From Review](/review/low-quality-posts/26866516)\n<|/ c |>\n<| c |>\nI believe\
    \ this does answer the question, since it provides the algorithm for finding the\
    \ greatest common divisor of two numbers. I believe it would be better if you\
    \ added some explanation as to why this works.\n<|/ c |>\n<| c |>\nThis does not\
    \ provide an answer to the question. Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead).\
    \ - [From Review](/review/low-quality-posts/26866516)\n<|/ c |>\n<| c |>\nI believe\
    \ this does answer the question, since it provides the algorithm for finding the\
    \ greatest common divisor of two numbers. I believe it would be better if you\
    \ added some explanation as to why this works.\n<|/ c |>\n<| c |>\nI believe this\
    \ does answer the question, since it provides the algorithm for finding the greatest\
    \ common divisor of two numbers. I believe it would be better if you added some\
    \ explanation as to why this works.\n<|/ c |>\n<| a |>\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7)\
    \ == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t\
    @test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxcizu5bz.jl:9\nin expression starting at /tmp/tmpxcizu5bz.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzvp1tmma.jl:9\nin expression starting at /tmp/tmpzvp1tmma.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.3>\ngreatest_common_divisor(25,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the greatest\
    \ common divisor of a and b if b is positive, otherwise it returns the least common\
    \ multiple of a and b.\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjawl5ooh.jl:9\nin expression starting at /tmp/tmpjawl5ooh.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,recursion |>\nThe accepted\
    \ answer doesn't work for negative numbers. Here's a version that does:\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8b5r0e3b.jl:9\nin expression starting at /tmp/tmp8b5r0e3b.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if a == 0 || b == 0 \n    then return 0\n    else if b > a \n    then\
    \ return greatest_common_divisor(b, a % b)\n    else return greatest_common_divisor(a,\
    \ a % b)\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. `greatest_common_divisor(25,\
    \ 15)` returns `5` instead of `1`.\n<|/ c |>\n<| c |>\nI fixed the bug, thanks\
    \ for pointing it out. :)\n<|/ c |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7)\
    \ == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t\
    @test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvnd11_7z.jl:9\nin expression starting at /tmp/tmpvnd11_7z.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.3>\n@time greatest_common_divisor(25,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the greatest\
    \ common divisor of two integers a and b\nwhere a > b\nusing Test\n\n@testset\
    \ begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\
    \t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144,\
    \ 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1t5om7ni.jl:9\nin expression starting at /tmp/tmp1t5om7ni.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(25,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the greatest\
    \ common divisor of three integers a and b and c.\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp53optrla.jl:9\nin expression starting at /tmp/tmp53optrla.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia,gcd |>\n<| c |>\nThis doesn't work for\
    \ negative numbers. `greatest_common_divisor(-3, -5)` returns `-3` instead of\
    \ `-1`.\n<|/ c |>\n<| c |>\nYes, I realized that after I posted my comment. I've\
    \ edited my answer to include a solution for negative numbers.\n<|/ c |>\n<| c\
    \ |>\nThis doesn't work for negative numbers. `greatest_common_divisor(-3, -5)`\
    \ returns `-3` instead of `-1`.\n<|/ c |>\n<| c |>\nI fixed the bug in my code\
    \ (I forgot to subtract `a` from `b` in the recursive call). Now it should work\
    \ for negative numbers as well.\n<|/ c |>\n<| c |>\nThis doesn't work for negative\
    \ numbers. `greatest_common_divisor(-3, -5)` returns `-3` instead of `-1`.\n<|/\
    \ c |>\n<| a dscore=4 |>\nThe accepted answer doesn't work for negative numbers.\
    \ Here's a version that does:\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkdg05t_h.jl:9\nin expression starting at /tmp/tmpkdg05t_h.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.3>\n@time greatest_common_divisor(25,\
    \ 15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the greatest\
    \ common divisor of a and b\nThe function should accept two integers a and b and\
    \ return an integer that is the greatest common divisor of a and b\nusing Test\n\
    \n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp88u7kyp9.jl:9\nin expression starting at /tmp/tmp88u7kyp9.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if a == 0 || b == 0 \n        then return 0\n    else if a == b \n   \
    \     then return a\n    else \n        then return greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia,greatest-common-divisor |>\n<| c |>\n\
    This doesn't work for negative numbers. `greatest_common_divisor(-3, -5)` returns\
    \ `-3` instead of `-2`.\n<|/ c |>\n<| a dscore=4 |>\nThe most efficient way is\
    \ to use Euclid's algorithm:\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmps5oq0egn.jl:9\nin expression starting at /tmp/tmps5oq0egn.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if a < b\n        a, b = b, a\n    \n    if b == 0\n        a\n    else\n\
    \        greatest_common_divisor(b, a % b)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert greatest_common_divisor(15, 5) == 5\n@assert greatest_common_divisor(15,\
    \ 0) == 15\n@assert greatest_common_divisor(15, -1) == 15\n@assert greatest_common_divisor(15,\
    \ -2) == 15\n@assert greatest_common_divisor(15, -3) == 15\n@assert greatest_common_divisor(15,\
    \ -4) == 15\n@assert greatest_common_divisor(15, -5) == 15\n@assert greatest_common_divisor(15,\
    \ -6) == 15\n@assert greatest_common_divisor(15, -7) == 15\n@assert greatest_common_divisor(15,\
    \ -8) == 15\n@assert greatest_common_divisor(15, -9) == 15\n@assert greatest_common_divisor(15,\
    \ -10) == 15\n@assert greatest_common_divisor(15, -11) == 15\n@assert greatest_common_divisor(15,\
    \ -12) == 15\n@assert greatest_common_divisor(15, -13) == 15\n@assert greatest_common_divisor(15,\
    \ -14) == 15\n@assert greatest_common_divisor(15, -15) == 15\n@assert greatest_common_divisor(15,\
    \ -16) == 15\n@assert greatest_common_divisor(15, -17) == 15\n@assert greatest_common_divisor(15,\
    \ -18) == 15\n@assert greatest_common_divisor(15, -19) == 15\n@assert greatest_common_divisor(15,\
    \ -20) == 15\n@assert greatest_common_divisor(15, -21) == 15\n@assert greatest_common_divisor(15,\
    \ -22) == 15\n@assert greatest_common_divisor(15, -23) == 15\n@assert greatest_common_divisor(15,\
    \ -24) == 15\n@assert greatest_common_divisor(15, -25) == 15\n@assert greatest_common_divisor(15,\
    \ -26) == 15\n@assert greatest_common_divisor(15, -27) == 15\n@assert greatest_common_divisor(15,\
    \ -28) == 15\n@assert greatest_common_divisor(15, -29) == 15\n@assert greatest_common_divisor(15,\
    \ -30) == 15\n@assert greatest_common_divisor(15, -31) == 15\n@assert greatest_common_divisor(15,\
    \ -32) == 15\n@assert greatest_common_divisor(15, -33) == 15\n@assert \nusing\
    \ Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph18rneu4.jl:16\nin expression starting at\
    \ /tmp/tmph18rneu4.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@assert greatest_common_divisor(12,\
    \ 6) == 4\n@assert greatest_common_divisor(12, 0) == 12\n@assert greatest_common_divisor(0,\
    \ 12) == 12\n@assert greatest_common_divisor(12, 12) == 12\n@assert greatest_common_divisor(12,\
    \ 13) == 12\n@assert greatest_common_divisor(12, 14) == 12\n@assert greatest_common_divisor(12,\
    \ 15) == 12\n@assert greatest_common_divisor(12, 16) == 12\n@assert greatest_common_divisor(12,\
    \ 17) == 12\n@assert greatest_common_divisor(12, 18) == 12\n@assert greatest_common_divisor(12,\
    \ 19) == 12\n@assert greatest_common_divisor(12, 20) == 12\n@assert greatest_common_divisor(12,\
    \ 21) == 12\n@assert greatest_common_divisor(12, 22) == 12\n@assert greatest_common_divisor(12,\
    \ 23) == 12\n@assert greatest_common_divisor(12, 24) == 12\n@assert greatest_common_divisor(12,\
    \ 25) == 12\n@assert greatest_common_divisor(12, 26) == 12\n@assert greatest_common_divisor(12,\
    \ 27) == 12\n@assert greatest_common_divisor(12, 28) == 12\n@assert greatest_common_divisor(12,\
    \ 29) == 12\n@assert greatest_common_divisor(12, 30) == 12\n@assert greatest_common_divisor(12,\
    \ 31) == 12\n@assert greatest_common_divisor(12, 32) == 12\n@assert greatest_common_divisor(12,\
    \ 33) == 12\n@assert greatest_common_divisor(12, 34) == 12\n@assert greatest_common_divisor(12,\
    \ 35) == 12\n@assert greatest_common_divisor(12, 36) == 12\n@assert greatest_common_divisor(12,\
    \ 37) == 12\n@assert greatest_common_divisor(12, 38) == 12\n@assert greatest_common_divisor(12,\
    \ 39) == 12\n@assert greatest_common_divisor(12, 40) == 12\n@assert greatest_common_divisor(12,\
    \ 41) == 12\n@assert greatest_common_divisor(12, 42) == 12\n@assert greatest_common_divisor(12,\
    \ 43) == 12\n@assert greatest_common_divisor(12, 44) == 12\n@assert greatest_common_divisor(12,\
    \ \nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuybmbtfn.jl:9\nin expression starting at /tmp/tmpuybmbtfn.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf6dm7gve.jl:9\nin expression starting at /tmp/tmpf6dm7gve.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(100,\
    \ 200)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the greatest\
    \ common divisor of a and b\nThe function should return an Int64\nusing Test\n\
    \n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvk5f59d6.jl:9\nin expression starting at /tmp/tmpvk5f59d6.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if a < b\n        a, b = b, a\n    \n    while b != 0\n        a, b =\
    \ b, a % b\n    end\n    return a\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ greatest_common_divisor(25, 15)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the greatest common divisor of three integers a and b and c.\n\
    using Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvwolz4g7.jl:16\nin expression starting at\
    \ /tmp/tmpvwolz4g7.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(3,5)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the greatest common\
    \ divisor of a and b\nIf b is 0, then return a\nIf b is negative, then return\
    \ greatest_common_divisor(a,-b)\nIf b is positive, then return greatest_common_divisor(a,b)\n\
    If b is neither 0 nor negative, then return greatest_common_divisor(a,b%a)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpj3_pug2w.jl:9\nin expression starting at /tmp/tmpj3_pug2w.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia,recursion |>\n<| c |>\nThis does not\
    \ answer the question. `greatest_common_divisor(25, 15)` returns `5`, not `1`.\n\
    <|/ c |>\n<| c |>\nI guess I misunderstood the question. My bad.\n<|/ c |>\n<|\
    \ c |>\nI edited my answer to reflect the correct answer. Thanks for pointing\
    \ that out.\n<|/ c |>\n<| a dscore=2 |>\nThe Julia standard library has a function\
    \ gcd that does exactly what you want:\n<code>\njulia> gcd(25, 15)\n5\n</code>\n\
    <|/ a tags=julia,recursion |>\n<| a dscore=2 |>\nThe Julia standard library has\
    \ a function gcd that does exactly what you want:\n<code>\njulia> gcd(25, 15)\n\
    5\n</code>\n<|/ a tags=julia,recursion |>\n<| a dscore=1 |>\nThe gcd function\
    \ from Base is very fast and efficient:\n<code>\njulia> gcd(25, 15)\n5\n</code>\n\
    <|/ a tags=julia,recursion |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\
    \t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144,\
    \ 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkld1tleu.jl:9\nin expression starting at /tmp/tmpkld1tleu.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,recursion |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9hg1tdjz.jl:9\nin expression starting at /tmp/tmp9hg1tdjz.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,recursion |>\nThe answer\
    \ by is correct, but I wanted to add some explanation as to why it works.\nThe\
    \ recursive function greatest_common_divisor is defined as:\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8zga_bbr.jl:9\nin expression starting at /tmp/tmp8zga_bbr.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if a == 0 || b == 0 \n        then return 0\n    else if a > b \n    \
    \    then return greatest_common_divisor(b, a % b)\n        else return greatest_common_divisor(a,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia,greatest-common-divisor |>\n<| c |>\n\
    This code does not work. `greatest_common_divisor(5,5)` returns `5` instead of\
    \ `1`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I fixed the code. Now\
    \ it works.\n<|/ c |>\n<| a dscore=3 |>\nThe accepted answer does not work for\
    \ negative numbers. Here is a version that does:\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\
    \t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144,\
    \ 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpaj6cl4uk.jl:9\nin expression starting at /tmp/tmpaj6cl4uk.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(25,\
    \ 15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the greatest\
    \ common divisor of a and b\nwhere a > b\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxbpv4ave.jl:9\nin expression starting at /tmp/tmpxbpv4ave.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia,recursion |>\n<| c |>\nThis doesn't seem\
    \ to work. `greatest_common_divisor(25, 15)` returns `5` instead of `1`.\n<|/\
    \ c |>\n<| c |>\nYes, I missed the base case. Thanks for pointing it out. I've\
    \ updated the answer.\n<|/ c |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpi8o369aq.jl:9\nin expression starting at /tmp/tmpi8o369aq.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,recursion,greatest-common-divisor\
    \ |>\nThe answer by is correct, but I wanted to add that you can also use Julia's\
    \ built-in gcd function, which will also work for non-integers:\n<code>\njulia>\
    \ gcd(3, 5)\n1\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppgfkbaoc.jl:9\nin expression starting at /tmp/tmppgfkbaoc.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis is not the greatest common\
    \ divisor of 2 numbers, it is the greatest common divisor of 2 integers. So the\
    \ function should be `greatest_common_divisor(a::Int64, b::Int64)::Int64`\n<|/\
    \ c |>\n<| c |>\nI believe that is the correct definition of greatest common divisor.\
    \ https://en.wikipedia.org/wiki/Greatest_common_divisor\n<|/ c |>\n<| c |>\nYes,\
    \ but that definition is wrong. `greatest_common_divisor(3,5)` should return 1,\
    \ not 3.\n<|/ c |>\n<| c |>\nI believe that is the definition of greatest common\
    \ divisor for integers. https://en.wikipedia.org/wiki/Greatest_common_divisor#Integer_greatest_common_divisor\n\
    <|/ c |>\n<| c |>\nYes, but that definition is wrong. `greatest_common_divisor(3,5)`\
    \ should return 1, not 3.\n<|/ c |>\n<| a tags=julia,greatest-common-divisor |>\n\
    The greatest common divisor of 2 integers is the largest integer that divides\
    \ both numbers without remainder. \n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsik7631l.jl:9\nin expression starting at /tmp/tmpsik7631l.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis doesn't work if `a`\
    \ is negative.\n<|/ c |>\n<| c |>\nIt doesn't work for negative numbers. I tested\
    \ it on Julia 1.5.1\n<|/ c |>\n<| c |>\nIt works for negative numbers. Try `greatest_common_divisor(-3,\
    \ -5)`.\n<|/ c |>\n<| c |>\nIt works for negative numbers. Try `greatest_common_divisor(-3,\
    \ -5)`.\n<|/ c |>\n<| c |>\nIt works for negative numbers. Try `greatest_common_divisor(-3,\
    \ -5)`.\n<|/ c |>\n<| a tags=julia |>\nThe most efficient way is to use GCD function\
    \ from Base package:\n<code>\njulia> GCD(3,5)\n1\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt3s46fep.jl:9\nin expression starting at /tmp/tmpt3s46fep.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm24xtgwm.jl:9\nin expression starting at /tmp/tmpm24xtgwm.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf6dm7gve.jl:9\nin expression starting at /tmp/tmpf6dm7gve.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp319pn1kx.jl:9\nin expression starting at /tmp/tmp319pn1kx.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if a == 0 || b == 0 \n        then return 0\n    else if a == b\n    \
    \    then return a\n    else if a > b\n        then return greatest_common_divisor(b,\
    \ a % b)\n    else return greatest_common_divisor(a, a % b)\nend\n</cell>\n<code\
    \ language=julia-1.5>\ngreatest_common_divisor(25, 15)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the greatest common divisor of two integers\
    \ a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25,\
    \ 15)\n    5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5ievgeyv.jl:9\nin expression starting at /tmp/tmp5ievgeyv.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    gcd(a::Int64, b::Int64)\n\
    using Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_hca91ex.jl:9\nin expression starting at /tmp/tmp_hca91ex.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if a == 0 || b == 0 \n        then return 0\n    else if a > b \n    \
    \    then return greatest_common_divisor(b, a % b)\n        else return greatest_common_divisor(a,\
    \ a % b)\n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis is not the greatest\
    \ common divisor of 2 numbers, it is the greatest common divisor of 2 integers.\
    \ So `greatest_common_divisor(3,5)` returns `1` not `5`.\n<|/ c |>\n<| c |>\n\
    I believe this to be the greatest common divisor of 2 integers. I believe this\
    \ to be the greatest common divisor of 2 numbers. I believe this to be the greatest\
    \ common divisor of 2 integers. I believe this to be the greatest common divisor\
    \ of 2 numbers. I believe this to be the greatest common divisor of 2 integers.\
    \ I believe this to be the greatest common divisor of 2 numbers. I believe this\
    \ to be the greatest common divisor of 2 integers. I believe this to be the greatest\
    \ common divisor of 2 numbers. I believe this to be the greatest common divisor\
    \ of 2 integers. I believe this to be the greatest common divisor of 2 numbers.\
    \ I believe this to be the greatest common divisor of 2 integers. I believe this\
    \ to be the greatest common divisor of 2 numbers. I believe this to be the greatest\
    \ common divisor of 2 integers. I believe this to be the greatest common divisor\
    \ of 2 numbers. I believe this to be the greatest common divisor of 2 integers.\
    \ I believe this to be the greatest common divisor of 2 numbers. I believe this\
    \ to be the greatest common divisor of 2 integers. I believe this to be the greatest\
    \ common divisor of 2 numbers. I believe this to be the greatest common divisor\
    \ of 2 integers. I believe this to be the greatest common divisor of 2 numbers.\
    \ I believe this to be the greatest common divisor of 2 integers. I believe this\
    \ to be the greatest common divisor of 2 numbers. I believe this to be the greatest\
    \ common divisor of 2 integers. I believe this to be the greatest common divisor\
    \ of 2 numbers. I believe this to be the greatest common divisor of 2 integers.\
    \ I believe this to be the greatest common divisor of 2 numbers. I believe this\
    \ to be the \nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfem1261c.jl:9\nin expression starting at /tmp/tmpfem1261c.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `greatest_common_divisor(25,\
    \ 15)` returns `5` instead of `15`.\n<|/ c |>\n<| c |>\nYes, I forgot to add `a\
    \ % b` into the recursive call. Fixed now.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2w2ml9ec.jl:9\nin expression starting at /tmp/tmp2w2ml9ec.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia |>\n<| a dscore=2 |>\nThe most efficient\
    \ way is to use GCD (Greatest Common Divisor) function from Base package:\n<code>\n\
    julia> GCD(1,2)\n1\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpoddkbk8f.jl:9\nin expression starting at /tmp/tmpoddkbk8f.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if a == 0 || b == 0 \n        then return 0\n    else if a == b\n    \
    \    then return a\n    else \n        greatest_common_divisor(a / b, b)\nend\n\
    </code>\n<|/ a tags=julia,recursion |>\n<| c |>\nThis does not work if `a` and\
    \ `b` are negative.\n<|/ c |>\n<| c |>\nI didn't test it but I think it works.\
    \ I added a negative test case in the answer.\n<|/ c |>\n<| c |>\nIt does not\
    \ work if `a` and `b` are negative.\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I added a negative test case in the answer.\n<|/ c |>\n<| c |>\nI tested it\
    \ and it works. I added a negative test case in the answer.\n<|/ c |>\n<| a dscore=2\
    \ |>\nThe accepted answer does not work for negative numbers. Here is a version\
    \ that does:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_34dhny5.jl:9\nin expression starting at /tmp/tmp_34dhny5.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(25,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the greatest\
    \ common divisor of a and b\nIf b is 0, then return a\nIf b is negative, then\
    \ return greatest_common_divisor(b, a % b)\nIf b is positive, then return greatest_common_divisor(b,\
    \ a % b)\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiayihi2t.jl:9\nin expression starting at /tmp/tmpiayihi2t.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia,recursion,greatest-common-divisor |>\n\
    <| c |>\nThis doesn't work for negative numbers. I added a solution that works\
    \ for negative numbers as well.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgi77hapz.jl:9\nin expression starting at /tmp/tmpgi77hapz.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzvp1tmma.jl:9\nin expression starting at /tmp/tmpzvp1tmma.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf6dm7gve.jl:9\nin expression starting at /tmp/tmpf6dm7gve.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nThe most efficient\
    \ way is to use GCD(a,b) function from Base package:\n<code>\njulia> GCD(5,10)\n\
    5\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\
    \t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144,\
    \ 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_v705avk.jl:9\nin expression starting at /tmp/tmp_v705avk.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(25,\
    \ 15)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpinmb4357.jl:9\nin expression starting at /tmp/tmpinmb4357.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,recursion |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplrg6lxj4.jl:9\nin expression starting at /tmp/tmplrg6lxj4.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.3>\n@code_native greatest_common_divisor(25,\
    \ 15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the greatest\
    \ common divisor of a and b if b is greater than or equal to a. Otherwise it should\
    \ return a.\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5l63y_m9.jl:9\nin expression starting at /tmp/tmp5l63y_m9.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia,recursion,greatest-common-divisor |>\n\
    <| c |>\nThis is not the greatest common divisor of integers, it is the greatest\
    \ common divisor of *multiple* integers. In other words, it is the greatest common\
    \ divisor of *all* integers less than or equal to the greatest common divisor\
    \ of *all* integers less than or equal to the greatest common divisor of *all*\
    \ integers less than or equal to the greatest common divisor of *all* integers\
    \ less than or equal to the greatest common divisor of *all* integers less than\
    \ or equal to the greatest common divisor of *all* integers less than or equal\
    \ to the greatest common divisor of *all* integers less than or equal to the greatest\
    \ common divisor of *all* integers less than or equal to the greatest common divisor\
    \ of *all* integers less than or equal to the greatest common divisor of *all*\
    \ integers less than or equal to the greatest common divisor of *all* integers\
    \ less than or equal to the greatest common divisor of *all* integers less than\
    \ or equal to the greatest common divisor of *all* integers less than or equal\
    \ to the greatest common divisor of *all* integers less than or equal to the greatest\
    \ common divisor of *all* integers less than or equal to the greatest common divisor\
    \ of *all* integers less than or equal to the greatest common divisor of *all*\
    \ integers less than or equal to the greatest common divisor of *all* integers\
    \ less than or equal to the greatest common divisor of *all* integers less than\
    \ or equal to the greatest common divisor of *all* integers less than or equal\
    \ to the greatest common divisor of *all* integers less than or equal to the greatest\
    \ common divisor of *all* integers less than or equal to the greatest common divisor\
    \ of *all* integers less than or equal to the greatest common divisor of *all*\
    \ integers less than or equal to the greatest common divisor of *all* integers\
    \ less than or equal to the greatest common divisor of *all* integers less than\
    \ or equal to the greatest common divisor of *all* integers less than or equal\
    \ to the greatest common divisor of *all* integers less than or equal to the greatest\
    \ common divisor of *all* \nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8p8q3krk.jl:9\nin expression starting at /tmp/tmp8p8q3krk.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf6dm7gve.jl:9\nin expression starting at /tmp/tmpf6dm7gve.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it\
    \ with `greatest_common_divisor(25, 15)`.\n<|/ c |>\n<| c |>\nIt works, I tested\
    \ it before posting it. The function returns 5 for greatest_common_divisor(25,\
    \ 15).\n<|/ c |>\n<| c |>\nYes, it works, but it's slower than the recursive solution.\
    \ Try it with `greatest_common_divisor(25, 15)`.\n<|/ c |>\n<| c |>\nI tested\
    \ it again and you are right, it does work. I will edit my answer to reflect that.\n\
    <|/ c |>\n<| c |>\nI edited my answer to reflect your comment. Thanks for pointing\
    \ that out.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyrife7ra.jl:9\nin expression starting at /tmp/tmpyrife7ra.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia,recursion,greatest-common-divisor |>\n\
    <| a dscore=3 |>\nThe accepted answer doesn't work for negative numbers. Here's\
    \ a version that does:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9biplbun.jl:9\nin expression starting at /tmp/tmp9biplbun.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nI believe this would\
    \ work, but it's very inefficient. You're calling `greatest_common_divisor` recursively,\
    \ but you're not doing anything with the return value. You could just do `if b\
    \ == 0 then return a; else return greatest_common_divisor(b, a % b); end`.\n<|/\
    \ c |>\n<| c |>\nYes, you are right. I just wanted to show the idea of recursion.\n\
    <|/ c |>\n<| a dscore=1 |>\nThe recursive solution is very inefficient. You're\
    \ calling greatest_common_divisor recursively, but you're not doing anything with\
    \ the return value. You could just do if b == 0 then return a; else return greatest_common_divisor(b,\
    \ a % b); end.\nHere's a version that uses tail recursion:\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmo0cbx01.jl:9\nin expression starting at /tmp/tmpmo0cbx01.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis is not the greatest common\
    \ divisor of 3 and 5. It is the greatest common divisor of 3 and 25. Try it yourself.\n\
    <|/ c |>\n<| c |>\nI did try it myself and got 5 as my answer. My code was wrong\
    \ and I fixed it. I also added a link to my code so you can see how I did it.\n\
    <|/ c |>\n<| c |>\nI see your point. I misunderstood the question. My apologies.\n\
    <|/ c |>\n<| a |>\nThe greatest common divisor of n and m is defined as the largest\
    \ integer d such that n and d are both divisible by d, and n and d are both divisible\
    \ by m and n and d are both divisible by n. \nThe algorithm below is based on\
    \ the Euclid's algorithm and returns the greatest common divisor of n and m (greatest\
    \ common divisor).\n<code>\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsc9capg8.jl:9\nin expression starting at /tmp/tmpsc9capg8.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia,recursion |>\n<| c |>\nThis doesn't work\
    \ if `a` is negative.\n<|/ c |>\n<| c |>\nIt does work if `a` is negative. `greatest_common_divisor(-3,\
    \ 5)` returns `-3`.\n<|/ c |>\n<| c |>\nI meant it works if `a` is negative. `greatest_common_divisor(-3,\
    \ -5)` returns `-3`.\n<|/ c |>\n<| c |>\nYes, I see what you mean. I'll edit my\
    \ answer to include a negative example.\n<|/ c |>\n<| a dscore=2 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwb8x9v_p.jl:9\nin expression starting at /tmp/tmpwb8x9v_p.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    gcd(a::Int64, b::Int64)::Int64\n\
    using Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcg77xhv4.jl:9\nin expression starting at /tmp/tmpcg77xhv4.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `greatest_common_divisor(25,\
    \ 15)` returns `5` instead of `1`.\n<|/ c |>\n<| c |>\nOops, I forgot to add `a\
    \ % b` into the recursive call. Fixed.\n<|/ c |>\n<| c |>\nThis still doesn't\
    \ work. `greatest_common_divisor(25, 15)` returns `5` instead of `1`.\n<|/ c |>\n\
    <| c |>\nI fixed it again. Sorry about that.\n<|/ c |>\n<| c |>\nThis still doesn't\
    \ work. `greatest_common_divisor(25, 15)` returns `5` instead of `1`.\n<|/ c |>\n\
    <| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpotlnrzd9.jl:9\nin expression starting at /tmp/tmpotlnrzd9.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(25,\
    \ 15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the greatest\
    \ common divisor of a and b\nIf b is 0, then return a\nIf b is negative, then\
    \ return greatest_common_divisor(b, a % b)\nIf b is positive, then return greatest_common_divisor(a,\
    \ b % b)\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjwh394zz.jl:9\nin expression starting at /tmp/tmpjwh394zz.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf6dm7gve.jl:9\nin expression starting at /tmp/tmpf6dm7gve.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(25,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the greatest\
    \ common divisor of a and b if b is greater than or equal to a. Otherwise it should\
    \ return an error.\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp04qxilew.jl:9\nin expression starting at /tmp/tmp04qxilew.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf6dm7gve.jl:9\nin expression starting at /tmp/tmpf6dm7gve.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia,recursion,greatest-common-divisor |>\n\
    <| a tags=julia,recursion,greatest-common-divisor |>\nThe other answers are all\
    \ good, but I wanted to add this one because I needed it myself. It uses no loops\
    \ and is very fast. \n<code>\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt0wpe_es.jl:9\nin expression starting at /tmp/tmpt0wpe_es.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI didn't know that Julia had\
    \ a built-in `gcd` function.  Thanks!\n<|/ c |>\n<| c |>\nThe `gcd` function was\
    \ added in Julia v0.6.0, so if you're using an older version you'll need to define\
    \ it yourself.\n<|/ c |>\n<| c |>\nI added a version that works with older versions\
    \ of Julia.\n<|/ c |>\n<| a dscore=2 |>\nI wrote a Julia package that does this\
    \ for you:\nhttps://github.com/jrockway/jlmath\n<code>\njulia> using jlmath\n\
    using Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp__herxfd.jl:9\nin expression starting at /tmp/tmp__herxfd.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf6dm7gve.jl:9\nin expression starting at /tmp/tmpf6dm7gve.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(25,\
    \ 15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the greatest\
    \ common divisor of a and b\nIf b is 0, then return a\nIf b is negative, then\
    \ return greatest_common_divisor(b, a % b)\nIf b is positive, then return greatest_common_divisor(b,\
    \ a % b)\nIf b is neither 0 nor negative, then return greatest_common_divisor(b,\
    \ a % b)\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpud_8j1wk.jl:9\nin expression starting at /tmp/tmpud_8j1wk.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf6dm7gve.jl:9\nin expression starting at /tmp/tmpf6dm7gve.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf6dm7gve.jl:9\nin expression starting at /tmp/tmpf6dm7gve.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf6dm7gve.jl:9\nin expression starting at /tmp/tmpf6dm7gve.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.4>\n@time greatest_common_divisor(25,\
    \ 15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the greatest\
    \ common divisor of three integers a and b and c.\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0lo4kkwb.jl:9\nin expression starting at /tmp/tmp0lo4kkwb.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(25,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the greatest\
    \ common divisor of a and b if b is greater than or equal to a. Otherwise return\
    \ -1.\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t\
    @test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_los84t7.jl:9\nin expression starting at /tmp/tmp_los84t7.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post. - [From Review](/review/low-quality-posts/26835825)\n\
    <|/ c |>\n<| c |>\nThis does provide an answer to the question. He asked how to\
    \ find the greatest common divisor of two numbers. I provided a solution that\
    \ does exactly that. He did not ask for an algorithm to find the greatest common\
    \ divisor of two numbers. He asked how to find the greatest common divisor of\
    \ two numbers. He provided a solution that does exactly that. He did not ask for\
    \ an algorithm to find the greatest common divisor of two numbers. He asked how\
    \ to find the greatest common divisor of two numbers. He provided a solution that\
    \ does exactly that. He did not ask for an algorithm to find the greatest common\
    \ divisor of two numbers. He asked how to find the greatest common divisor of\
    \ two numbers. He provided a solution that does exactly that. He did not ask for\
    \ an algorithm to find the greatest common divisor of two numbers. He asked how\
    \ to find the greatest common divisor of two numbers. He provided a solution that\
    \ does exactly that. He did not ask for an algorithm to find the greatest common\
    \ divisor of two numbers. He asked how to find the greatest common divisor of\
    \ two numbers. He provided a solution that does exactly that. He did not ask for\
    \ an algorithm to find the greatest common divisor of two numbers. He asked how\
    \ to find the greatest common divisor of two numbers. He provided a solution that\
    \ does exactly that. He did not ask for an algorithm to find the greatest common\
    \ divisor of two numbers.\n<|/ c |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post. - [From Review](/review/low-quality-posts/26835825)\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/low-quality-\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8479ghxy.jl:9\nin expression starting at /tmp/tmp8479ghxy.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia,recursion |>\n<| c |>\nThis is not the\
    \ greatest common divisor of integers, it is the greatest common divisor of *positive*\
    \ integers. E.g. `greatest_common_divisor(7, 5)` returns `1` instead of `3`.\n\
    <|/ c |>\n<| c |>\nThanks for pointing that out. I've edited the answer to reflect\
    \ that.\n<|/ c |>\n<| a tags=julia,recursion |>\nThe function greatest_common_divisor\
    \ is defined in the standard library as divrem.\n<code>\njulia> divrem(2, 3)\n\
    1\n</code>\n<|/ a dscore=3 |>\n<| a tags=julia,recursion |>\nThe other answers\
    \ here are correct, but I thought I'd add my own solution, since I wanted to see\
    \ how it compared against the other solutions here.\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\
    \t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144,\
    \ 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcewxalee.jl:9\nin expression starting at /tmp/tmpcewxalee.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| a |>\nThe most efficient\
    \ way is to use Julia's built-in gcd function:\n<code>\njulia> gcd(3, 5)\n1\n\
    using Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpx43__e8w.jl:9\nin expression starting at /tmp/tmpx43__e8w.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia,recursion |>\n<| c |>\nThis doesn't seem\
    \ to work. `greatest_common_divisor(3,5)` returns `1` instead of `2`.\n<|/ c |>\n\
    <| c |>\nI fixed the code a bit. Now it works.\n<|/ c |>\n<| a dscore=2 |>\nThe\
    \ other answers here are great, but I thought I'd add my own since I spent a lot\
    \ of time trying to figure out how to do this in Julia without recursion.\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnh_erb14.jl:9\nin expression starting at /tmp/tmpnh_erb14.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.3>\n@assert greatest_common_divisor(6,\
    \ 2) == 2 \n@assert greatest_common_divisor(6, 3) == 1 \n@assert greatest_common_divisor(6,\
    \ 5) == 1 \n@assert greatest_common_divisor(6, 7) == 1 \n@assert greatest_common_divisor(6,\
    \ 8) == 1 \n@assert greatest_common_divisor(6, 9) == 1 \n@assert greatest_common_divisor(6,\
    \ 10) == 1 \n@assert greatest_common_divisor(6, 11) == 1 \n@assert greatest_common_divisor(6,\
    \ 12) == 1 \n@assert greatest_common_divisor(6, 13) == 1 \n@assert greatest_common_divisor(6,\
    \ 14) == 1 \n@assert greatest_common_divisor(6, 15) == 1 \n@assert greatest_common_divisor(6,\
    \ 16) == 1 \n@assert greatest_common_divisor(6, 17) == 1 \n@assert greatest_common_divisor(6,\
    \ 18) == 1 \n@assert greatest_common_divisor(6, 19) == 1 \n@assert greatest_common_divisor(6,\
    \ 20) == 1 \n@assert greatest_common_divisor(6, 21) == 1 \n@assert greatest_common_divisor(6,\
    \ 22) == 1 \n@assert greatest_common_divisor(6, 23) == 1 \n@assert greatest_common_divisor(6,\
    \ 24) == 1 \n@assert greatest_common_divisor(6, 25) == 1 \n@assert greatest_common_divisor(6,\
    \ 26) == 1 \n@assert greatest_common_divisor(6, 27) == 1 \n@assert greatest_common_divisor(6,\
    \ 28) == 1 \n@assert greatest_common_divisor(6, 29) == 1 \n@assert greatest_common_divisor(6,\
    \ 30) == 1 \n@assert greatest_common_divisor(6, 31) == 1 \n@assert greatest_common_divisor(6,\
    \ 32) == 1 \n@assert greatest_common_divisor(6, 33) == 1 \n@assert greatest_common_divisor(6,\
    \ 34) == 1 \n@assert greatest_common_divisor(6, 35) == 1 \n@assert greatest_common_divisor(6,\
    \ 36) == 1 \n@assert greatest_common_divisor(6, 37) == 1 \n@assert greatest_common_divisor(6,\
    \ 38) == 1 \n@assert greatest_common_divisor(6, 39) == 1 \n@assert greatest_common_divisor(\n\
    using Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuz4oor69.jl:9\nin expression starting at /tmp/tmpuz4oor69.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.3>\n@time greatest_common_divisor(25,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the greatest\
    \ common divisor of a and b\nwhere a and b are both positive integers. \nThe function\
    \ should use recursion.\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprrg95ch3.jl:9\nin expression starting at /tmp/tmprrg95ch3.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if a < b \n        then greatest_common_divisor(b, a) \n        else a\
    \ \n    else b \nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"greatest_common_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3keaeof5.jl:9\nin expression starting at /tmp/tmp3keaeof5.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf6dm7gve.jl:9\nin expression starting at /tmp/tmpf6dm7gve.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzvp1tmma.jl:9\nin expression starting at /tmp/tmpzvp1tmma.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf6dm7gve.jl:9\nin expression starting at /tmp/tmpf6dm7gve.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia,recursion |>\n<| c |>\nThanks for your\
    \ answer. Your code works but it is slower than the one I posted in the question.\
    \ Do you know why?\n<|/ c |>\n<| c |>\nI tested it on Julia 0.6.2 and it took\
    \ about 2 seconds to run on my computer. Your code took about 1.5 seconds. So\
    \ I guess your code is faster.\n<|/ c |>\n<| c |>\nYes, I tested it on Julia 0.6.2\
    \ and it took about 2 seconds to run on my computer. Your code took about 1.5\
    \ seconds. So I guess your code is faster.\n<|/ c |>\n<| c |>\nI tested it on\
    \ Julia 0.6.2 and it took about 2 seconds to run on my computer. Your code took\
    \ about 1.5 seconds. So I guess your code is faster.\n<|/ c |>\n<| c |>\nI tested\
    \ it on Julia 0.6.2 and it took about 2 seconds to run on my computer. Your code\
    \ took about 1.5 seconds. So I guess your code is faster.\n<|/ c |>\n<| a dscore=2\
    \ |>\nI wrote a recursive function which I believe is faster than the one you\
    \ posted:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9efw4xz0.jl:9\nin expression starting at /tmp/tmp9efw4xz0.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. `greatest_common_divisor(25,\
    \ 15)` returns `5`, not `1`.\n<|/ c |>\n<| c |>\nYes, I missed that case. Thanks\
    \ for pointing it out. I've updated the answer.\n<|/ c |>\n<| a dscore=1 |>\n\
    The other answers here are all correct, but they don't take into account the case\
    \ where a > b. Here's a solution that does:\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuui21tma.jl:9\nin expression starting at /tmp/tmpuui21tma.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if a == 0 || b == 0 \n        then return 0\n    else \n        greatest_common_divisor(a\
    \ div b, b)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(25,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the greatest\
    \ common divisor of a and b\nWrite a function that returns the greatest common\
    \ divisor of a and b\nWrite a function that returns the greatest common divisor\
    \ of a and b\nWrite a function that returns the greatest common divisor of a and\
    \ b\nWrite a function that returns the greatest common divisor of a and b\nWrite\
    \ a function that returns the greatest common divisor of a and b\nWrite a function\
    \ that returns the greatest common divisor of a and b\nWrite a function that returns\
    \ the greatest common divisor of a and b\nWrite a function that returns the greatest\
    \ common divisor of a and b\nWrite a function that returns the greatest common\
    \ divisor of a and b\nWrite a function that returns the greatest common divisor\
    \ of a and b\nWrite a function that returns the greatest common divisor of a and\
    \ b\nWrite a function that returns the greatest common divisor of a and b\nWrite\
    \ a function that returns the greatest common divisor of a and b\nWrite a function\
    \ that returns the greatest common divisor of a and b\nWrite a function that returns\
    \ the greatest common divisor of a and b\nWrite a function that returns the greatest\
    \ common divisor of a and b\nWrite a function that returns the greatest common\
    \ divisor of a and b\nWrite a function that returns the greatest common divisor\
    \ of a and b\nWrite a function that returns the greatest common divisor of a and\
    \ b\nWrite a function that returns the greatest common divisor of a and b\nWrite\
    \ a function that returns the greatest common divisor of a and b\nWrite a function\
    \ that returns the greatest common divisor of a and b\nWrite a function that returns\
    \ the greatest common divisor of a and b\nWrite a function that returns the greatest\
    \ common divisor of a and b\nWrite a function that returns the greatest common\
    \ divisor of a and b\nWrite a function that returns the greatest common divisor\
    \ of a and b\nWrite a function that returns the greatest common divisor of a and\
    \ b\nWrite a function that returns the greatest common divisor of a and b\nWrite\
    \ a function that returns the greatest common divisor of a and b\nWrite a function\
    \ that returns the greatest common divisor of a and b\nWrite a function that returns\
    \ the greatest common divisor of a and b\nWrite \nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzxhxrrng.jl:9\nin expression starting at /tmp/tmpzxhxrrng.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI believe this should\
    \ be the accepted answer. Great solution!\n<|/ c |>\n<| a tags=julia,recursion\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpb8dx7v59.jl:9\nin expression starting at /tmp/tmpb8dx7v59.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia,recursion |>\n<| c |>\nI guess you meant\
    \ `greatest_common_divisor(b, a % b)` instead of `greatest_common_divisor(b, a\
    \ % b)`\n<|/ c |>\n<| c |>\nYes, thank you. Fixed.\n<|/ c |>\n<| a dscore=2 |>\n\
    A recursive solution is probably the easiest to understand:\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpw8bjj9v0.jl:9\nin expression starting at /tmp/tmpw8bjj9v0.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia,recursion |>\n<| c |>\nThis doesn't work\
    \ for negative numbers. `greatest_common_divisor(-3, 5)` returns `-3` instead\
    \ of `1`.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I fixed the code by\
    \ adding an if statement to check if b is negative.\n<|/ c |>\n<| a tags=julia,recursion\
    \ |>\nThe function greatest_common_divisor is defined in the package GreatestCommonDivisors.jl.\
    \ \n<code>\njulia> using GreatestCommonDivisors\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3vpes0ye.jl:9\nin expression starting at /tmp/tmp3vpes0ye.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(25,\
    \ 15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the greatest\
    \ common divisor of a and b if they are both positive integers. If the two integers\
    \ are not positive, return -1.\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm_xvccmj.jl:9\nin expression starting at /tmp/tmpm_xvccmj.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf6dm7gve.jl:9\nin expression starting at /tmp/tmpf6dm7gve.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if a < b then return greatest_common_divisor(b, a) else return a\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnw7q57m6.jl:8\nin expression starting at /tmp/tmpnw7q57m6.jl:8\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\
    \t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144,\
    \ 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg366v197.jl:9\nin expression starting at /tmp/tmpg366v197.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(25,\
    \ 15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the greatest\
    \ common divisor of two integers a and b\nif b is 0 then return a\nelse \n   \
    \ return greatest_common_divisor(b, a % b)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqs4fmlyl.jl:9\nin expression starting at /tmp/tmpqs4fmlyl.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia,recursion |>\n<| c |>\nI believe this\
    \ should be the accepted answer. While the other answers do work, they do not\
    \ explain why they work. Great answer though.\n<|/ c |>\n<| a |>\nThe function\
    \ greatest_common_divisor is defined in the Base package. \n<code>\njulia> Base.greatest_common_divisor(5,3)\n\
    1\n</code>\n<|/ a dscore=5 tags=julia,recursion |>\n<| c |>\nThis should be the\
    \ accepted answer. While the other answers do work, they do not explain why they\
    \ work. Great answer though.\n<|/ c |>\n<| a tags=julia,recursion |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdbm0g4qb.jl:9\nin expression starting at /tmp/tmpdbm0g4qb.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,recursion,greatest-common-divisor\
    \ |>\nThe other answers here are great, but I wanted to add my own solution that\
    \ I believe is more efficient and easier to read. \n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\
    \t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144,\
    \ 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8411tddu.jl:9\nin expression starting at /tmp/tmp8411tddu.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,recursion |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm6jzqf0d.jl:9\nin expression starting at /tmp/tmpm6jzqf0d.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@assert greatest_common_divisor(25,\
    \ 15) == 5\n@assert greatest_common_divisor(25, 10) == 25\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the greatest common divisor of three integers\
    \ a and b and c.\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmph4vk30oc.jl:9\nin expression starting at /tmp/tmph4vk30oc.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if a < b \n        then greatest_common_divisor(b, a % b) \n        else\
    \ greatest_common_divisor(a, (b % a)) \n    end\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=julia,algorithm |>\nI came up with this solution:\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"greatest_common_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7oh2xjam.jl:9\nin expression starting at /tmp/tmp7oh2xjam.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if a == 0 || b == 0 \n        then return 0\n    else \n        greatest_common_divisor(a\
    \ div b, b) \n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,recursion,greatest-common-divisor\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpega3knjm.jl:9\nin expression starting at /tmp/tmpega3knjm.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(25,\
    \ 15)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(25, 15)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the greatest common\
    \ divisor of a and b if b is divisible by a. Otherwise it should return -1.\n\
    using Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpryzg5jgv.jl:9\nin expression starting at /tmp/tmpryzg5jgv.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't seem to answer\
    \ the question. OP wants to find the greatest common divisor of two numbers, not\
    \ find the greatest common divisor of some numbers and some numbers.\n<|/ c |>\n\
    <| c |>\nI thought the question was how to find the greatest common divisor of\
    \ two numbers. I edited my answer to show how to find the greatest common divisor\
    \ of two numbers.\n<|/ c |>\n<| c |>\nThe question was how to find the greatest\
    \ common divisor of two numbers. Your answer doesn't do that. Your answer finds\
    \ the greatest common divisor of some numbers and some numbers.\n<|/ c |>\n<|\
    \ c |>\nThe question was how to find the greatest common divisor of two numbers.\
    \ My answer finds the greatest common divisor of some numbers and some numbers.\
    \ I edited my answer to show how to find the greatest common divisor of two numbers.\n\
    <|/ c |>\n<| c |>\nThe question was how to find the greatest common divisor of\
    \ two numbers. Your answer doesn't do that. Your answer finds the greatest common\
    \ divisor of some numbers and some numbers.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfu5hyzpt.jl:9\nin expression starting at /tmp/tmpfu5hyzpt.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(25,\
    \ 15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the greatest\
    \ common divisor of three integers a and b and c.\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfr9kvhcu.jl:9\nin expression starting at /tmp/tmpfr9kvhcu.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf6dm7gve.jl:9\nin expression starting at /tmp/tmpf6dm7gve.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\n    end\nend\n</code>\n<|/ a tags=julia,recursion,greatest-common-divisor\
    \ |>\n<| c |>\nThis does not answer the question. OP asked for recursive solution,\
    \ your answer does not use recursion.\n<|/ c |>\n<| c |>\nI believe this answer\
    \ does answer the question. OP asked for a recursive solution and this answer\
    \ does exactly that. OP asked for \"a recursive solution\" and the answer does\
    \ exactly that. OP asked for \"a recursive solution\" and the answer does exactly\
    \ that. OP asked for \"a recursive solution\" and the answer does exactly that.\
    \ OP asked for \"a recursive solution\" and the answer does exactly that. OP asked\
    \ for \"a recursive solution\" and the answer does exactly that. OP asked for\
    \ \"a recursive solution\" and the answer does exactly that. OP asked for \"a\
    \ recursive solution\" and the answer does exactly that. OP asked for \"a recursive\
    \ solution\" and the answer does exactly that. OP asked for \"a recursive solution\"\
    \ and the answer does exactly that. OP asked for \"a recursive solution\" and\
    \ the answer does exactly that. OP asked for \"a recursive solution\" and the\
    \ answer does exactly that. OP asked for \"a recursive solution\" and the answer\
    \ does exactly that. OP asked for \"a recursive solution\" and the answer does\
    \ exactly that. OP asked for \"a recursive solution\" and the answer does exactly\
    \ that. OP asked for \"a recursive solution\" and the answer does exactly that.\
    \ OP asked for \"a recursive solution\" and the answer does exactly that. OP asked\
    \ for \"a recursive solution\" and the answer does exactly that. OP asked for\
    \ \"a recursive solution\" and the answer does exactly that. OP asked for \"a\
    \ recursive solution\" and the answer does exactly that. OP asked for \"a recursive\
    \ solution\" and the answer does exactly that. OP asked for \"a recursive solution\"\
    \ and the answer does exactly that. OP asked for \"a recursive solution\" and\
    \ the answer does exactly that. OP asked for \"a recursive solution\" and the\
    \ answer does exactly that. OP asked for \"a recursive solution\" and the answer\
    \ does exactly that. OP asked for \"a recursive solution\" and the answer does\
    \ exactly that. OP asked for \nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpisnztj4n.jl:9\nin expression starting at /tmp/tmpisnztj4n.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\n    end\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(25,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the greatest\
    \ common divisor of three integers a and b and c.\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2czzhkdn.jl:9\nin expression starting at /tmp/tmp2czzhkdn.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis does not provide an answer\
    \ to the question. To critique or request clarification from an author, leave\
    \ a comment below their post. - [From Review](/review/low-quality-posts/10305394)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He asked how to find\
    \ the greatest common divisor of two numbers. I provided a solution that does\
    \ exactly that. He also asked how to do this in Julia, which I provided a solution\
    \ in Julia. He also asked how to do this in Python, which I provided a solution\
    \ in Python. He also asked how to do this in R, which I provided a solution in\
    \ R. He also asked how to do this in Haskell, which I provided a solution in Haskell.\
    \ He also asked how to do this in C, which I provided a solution in C. He also\
    \ asked how to do this in C++, which I provided a solution in C++. He also asked\
    \ how to do this in Fortran, which I provided a solution in Fortran. He also asked\
    \ how to do this in Rust, which I provided a solution in Rust. He also asked how\
    \ to do this in Scala, which I provided a solution in Scala.\n<|/ c |>\n<| c |>\n\
    I believe this does answer the question. He asked how to find the greatest common\
    \ divisor of two numbers. I provided a solution that does exactly that. He also\
    \ asked how to do this in Julia, which I provided a solution in Julia. He also\
    \ asked how to do this in Python, which I provided a solution in Python. He also\
    \ asked how to do this in R, which I provided a solution in R. He also asked how\
    \ to do this in Haskell, which I provided a solution in Haskell. He also asked\
    \ how to do this in C, which I provided a solution in C. He also asked how to\
    \ do this in C++, which I provided a solution in C++. He also asked how to do\
    \ this in Fortran, which I provided a solution in Fortran. He also asked how to\
    \ do this in Rust, which I provided a solution in Rust. He also asked how to do\
    \ this in Scala, which I provided a solution in Scala.\n<|/ c |>\n<| c |>\n\n\
    using Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpy7px0nk7.jl:9\nin expression starting at /tmp/tmpy7px0nk7.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a |>\n<| c |>\nI like this solution, but I wonder\
    \ if there is a way to avoid the recursion. I'm thinking about a solution where\
    \ you keep dividing until you get to 1, and then you just return the remainder.\
    \ I'm thinking about it now, but I'm still not sure how to implement it.\n<|/\
    \ c |>\n<| c |>\nI added a recursive solution to my answer. Hope it helps.\n<|/\
    \ c |>\n<| c |>\nI added a recursive solution to my answer. Hope it helps.\n<|/\
    \ c |>\n<| a |>\nHere's a recursive solution that doesn't use any loops or recursion:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg06lzykg.jl:9\nin expression starting at /tmp/tmpg06lzykg.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia,recursion |>\n<| c |>\nThis doesn't seem\
    \ to work for me. `greatest_common_divisor(3,5)` returns `1` instead of `2`.\n\
    <|/ c |>\n<| c |>\nIt does work for me. Are you sure you copied it correctly?\
    \ I tested it on Julia 0.6.2\n<|/ c |>\n<| c |>\nYeah, I copied it correctly.\
    \ I'm using 0.6.2 as well. Maybe it's an issue with my Julia installation. I'll\
    \ try updating it.\n<|/ c |>\n<| c |>\nI updated Julia and it still doesn't work.\
    \ I'm going to try reinstalling it.\n<|/ c |>\n<| c |>\nI reinstalled Julia and\
    \ it still doesn't work. I'm going to try reinstalling it.\n<|/ c |>\n<| a tags=julia,recursion\
    \ |>\nThe answer from is correct, but I wanted to add that you can also use divrem.\n\
    <code>\njulia> divrem(3, 5)\n2\n</code>\n<|/ a dscore=4 |>\n<| a dscore=4 |>\n\
    The other answers here are great, but I wanted to add that you can also use divrem.\n\
    <code>\njulia> divrem(3, 5)\n2\n</code>\n<|/ a tags=julia,recursion |>\n<| a tags=julia,recursion\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1re3a85w.jl:9\nin expression starting at /tmp/tmp1re3a85w.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't work. `greatest_common_divisor(25,\
    \ 15)` returns `5` instead of `1`.\n<|/ c |>\n<| c |>\nIt does work. `greatest_common_divisor(25,\
    \ 15)` returns `1` as expected.\n<|/ c |>\n<| c |>\nIt does work. `greatest_common_divisor(25,\
    \ 15)` returns `1` as expected.\n<|/ c |>\n<| c |>\nIt does work. `greatest_common_divisor(25,\
    \ 15)` returns `1` as expected.\n<|/ c |>\n<| c |>\nIt does work. `greatest_common_divisor(25,\
    \ 15)` returns `1` as expected.\n<|/ c |>\n<| a dscore=1 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzc1vmxi3.jl:9\nin expression starting at /tmp/tmpzc1vmxi3.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpc8dw2oad.jl:9\nin expression starting at /tmp/tmpc8dw2oad.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if a < b \n        then greatest_common_divisor(b, a) \n        else a\
    \ \n    else b \nend\n</code>\n<|/ a tags=julia,recursion |>\n<| c |>\nThis doesn't\
    \ work for negative numbers. `greatest_common_divisor(-3, -5)` returns `-3` instead\
    \ of `5`.\n<|/ c |>\n<| c |>\nYes, I noticed that and fixed it. I also added a\
    \ version that works for negative numbers. Thanks!\n<|/ c |>\n<| a dscore=3 |>\n\
    A recursive solution is also possible:\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"greatest_common_divisor\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps1dzjnxv.jl:9\nin expression starting at /tmp/tmps1dzjnxv.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(25,\
    \ 15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the greatest\
    \ common divisor of a and b if b is greater than or equal to a. \nWrite a function\
    \ that returns the greatest common divisor of a and b if b is less than or equal\
    \ to a. \nWrite a function that returns the greatest common divisor of a and b\
    \ if b is equal to a. \nWrite a function that returns the greatest common divisor\
    \ of a and b if b is less than or equal to a. \nWrite a function that returns\
    \ the greatest common divisor of a and b if b is greater than or equal to a. \n\
    Write a function that returns the greatest common divisor of a and b if b is equal\
    \ to a. \nWrite a function that returns the greatest common divisor of a and b\
    \ if b is greater than or equal to a. \nWrite a function that returns the greatest\
    \ common divisor of a and b if b is equal to a. \nWrite a function that returns\
    \ the greatest common divisor of a and b if b is less than or equal to a. \nWrite\
    \ a function that returns the greatest common divisor of a and b if b is greater\
    \ than or equal to a. \nWrite a function that returns the greatest common divisor\
    \ of a and b if b is equal to a. \nWrite a function that returns the greatest\
    \ common divisor of a and b if b is less than or equal to a. \nWrite a function\
    \ that returns the greatest common divisor of a and b if b is greater than or\
    \ equal to a. \nWrite a function that returns the greatest common divisor of a\
    \ and b if b is equal to a. \nWrite a function that returns the greatest common\
    \ divisor of a and b if b is less than or equal to a. \nWrite a function that\
    \ returns the greatest common divisor of a and b if b is greater than or equal\
    \ to a. \nWrite a function that returns the greatest common divisor of a and b\
    \ if b is equal to a. \nWrite a function that returns the greatest common divisor\
    \ of a and b if b is less than or equal to a. \nWrite a function that returns\
    \ the greatest common divisor of a and b if b is greater than or equal to a. \n\
    Write a function that returns the greatest common divisor of a and b if b is equal\
    \ to a. \nWrite a function that returns the greatest common divisor of a and b\
    \ if b is less than or equal to a. \nWrite a function that returns the greatest\
    \ common divis\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphd6fn5yy.jl:9\nin expression starting at /tmp/tmphd6fn5yy.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\nGreatest common divisor\
    \ of three integers a and b and c\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpeo8nug1h.jl:9\nin expression starting at /tmp/tmpeo8nug1h.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ `greatest_common_divisor(-3, 5)` returns `-3` instead of `5`.\n<|/ c |>\n<|\
    \ a dscore=3 |>\nI wrote a Julia package that does this for you:\nhttps://github.com/JuliaLang/julia/blob/master/base/math/GCD.jl\n\
    <code>\njulia> GCD(3,5)\n1\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0lv6adj8.jl:9\nin expression starting at /tmp/tmp0lv6adj8.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(25,\
    \ 15)\n</cell>\n<text>\nExercise\nWrite a function that returns the greatest common\
    \ divisor of two integers a and b\nthat is a multiple of c\nHint: Use a recursive\
    \ function\nHint: Use a while loop\nHint: Use a for loop\nHint: Use a while loop\n\
    Hint: Use a for loop\nHint: Use a while loop\nHint: Use a for loop\nHint: Use\
    \ a while loop\nHint: Use a for loop\nHint: Use a while loop\nHint: Use a for\
    \ loop\nHint: Use a while loop\nHint: Use a for loop\nHint: Use a while loop\n\
    Hint: Use a for loop\nHint: Use a while loop\nHint: Use a for loop\nHint: Use\
    \ a while loop\nHint: Use a for loop\nHint: Use a while loop\nHint: Use a for\
    \ loop\nHint: Use a while loop\nHint: Use a for loop\nHint: Use a while loop\n\
    Hint: Use a for loop\nHint: Use a while loop\nHint: Use a for loop\nHint: Use\
    \ a while loop\nHint: Use a for loop\nHint: Use a while loop\nHint: Use a for\
    \ loop\nHint: Use a while loop\nHint: Use a for loop\nHint: Use a while loop\n\
    Hint: Use a for loop\nHint: Use a while loop\nHint: Use a for loop\nHint: Use\
    \ a while loop\nHint: Use a for loop\nHint: Use a while loop\nHint: Use a for\
    \ loop\nHint: Use a while loop\nHint: Use a for loop\nHint: Use a while loop\n\
    Hint: Use a for loop\nHint: Use a while loop\nHint: Use a for loop\nHint: Use\
    \ a while loop\nHint: Use a for loop\nHint: Use a while loop\nHint: Use a for\
    \ loop\nHint: Use a while loop\nHint: Use a for loop\nHint: Use a while loop\n\
    Hint: Use a for loop\nHint: Use a while loop\nHint: Use a for loop\nHint: Use\
    \ a while loop\nHint: Use a for loop\nHint: Use a while loop\nHint: Use a for\
    \ loop\nHint: Use a while loop\nHint\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_vhmvefc.jl:9\nin expression starting at /tmp/tmp_vhmvefc.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if a == 0 || b == 0 \n        then return 0\n    else if b > a \n    \
    \    then return greatest_common_divisor(b, a % b)\n        else return greatest_common_divisor(a,\
    \ a % b)\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpow2ff10e.jl:9\nin expression starting at /tmp/tmpow2ff10e.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,recursion,greatest-common-divisor\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo9l2rs8r.jl:9\nin expression starting at /tmp/tmpo9l2rs8r.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia,recursion |>\n<| a tags=julia,recursion\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg_ix7e75.jl:9\nin expression starting at /tmp/tmpg_ix7e75.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia,recursion,greatest-common-divisor |>\n\
    <| a dscore=2 |>\nThe accepted answer doesn't work for negative numbers. Here's\
    \ a version that does:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpevnh0b_b.jl:9\nin expression starting at /tmp/tmpevnh0b_b.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if a < b\n        a, b = b, a\n    \n    while a != 0\n        a, b =\
    \ b % a, a\n    end\n    return b\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ greatest_common_divisor(25, 15)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the greatest common divisor of a and b if b is greater than a.\
    \ \nWrite a function that returns the greatest common divisor of a and b if b\
    \ is less than a. \nWrite a function that returns the greatest common divisor\
    \ of a and b if b is equal to a. \nWrite a function that returns the greatest\
    \ common divisor of a and b if b is less than or equal to a. \nWrite a function\
    \ that returns the greatest common divisor of a and b if b is greater than or\
    \ equal to a. \nWrite a function that returns the greatest common divisor of a\
    \ and b if b is neither a or b. \nusing Test\n\n@testset begin\n\ncandidate =\
    \ greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_6jo_0xx.jl:16\nin expression starting at\
    \ /tmp/tmp_6jo_0xx.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis does not answer the question.\
    \ OP asked for a recursive solution, not a iterative one.\n<|/ c |>\n<| c |>\n\
    I believe this does answer the question. Recursion is just a way of breaking down\
    \ problems into smaller problems. In this case, finding the greatest common divisor\
    \ of two numbers. I believe this solution is iterative and therefore recursive.\n\
    <|/ c |>\n<| c |>\nThe question was \"Recursive function\" not \"Iterative function\"\
    \n<|/ c |>\n<| c |>\nI believe this does answer the question. Recursion is just\
    \ a way of breaking down problems into smaller problems. In this case, finding\
    \ the greatest common divisor of two numbers. I believe this solution is iterative\
    \ and therefore recursive.\n<|/ c |>\n<| c |>\nThis does not answer the question.\
    \ OP asked for a recursive solution, not a iterative one.\n<|/ c |>\n<| a dscore=1\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8v68wd72.jl:9\nin expression starting at /tmp/tmp8v68wd72.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzvp1tmma.jl:9\nin expression starting at /tmp/tmpzvp1tmma.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if a == 0 || b == 0 \n        then return 0\n    else if b > a \n    \
    \    then return greatest_common_divisor(b, a % b)\n        else return greatest_common_divisor(a,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia,greatest-common-divisor |>\n<| a tags=julia,greatest-common-divisor\
    \ |>\nThe greatest common divisor of two integers a and b is defined as the largest\
    \ integer d such that a * d % b == 0.\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfap3eogv.jl:9\nin expression starting at /tmp/tmpfap3eogv.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if a == 0 || b == 0 \n        then return 0\n    else \n        if a >\
    \ b \n            then return greatest_common_divisor(b, a % b)\n            else\
    \ return greatest_common_divisor(a, (b % a)) \nend\n</code>\n<|/ a tags=julia,recursion\
    \ |>\n<| c |>\nThis doesn't work if `a` and `b` are both negative.\n<|/ c |>\n\
    <| c |>\nI believe that `greatest_common_divisor(-3, -5)` should return `-3` not\
    \ `5`.\n<|/ c |>\n<| c |>\nYes, that's true. I'll fix it.\n<|/ c |>\n<| c |>\n\
    I believe that `greatest_common_divisor(-3, -5)` should return `-3` not `5`.\n\
    <|/ c |>\n<| c |>\nI believe that `greatest_common_divisor(-3, -5)` should return\
    \ `-3` not `5`.\n<|/ c |>\n<| a dscore=3 |>\nThe other answers here are great,\
    \ but I thought I'd add my own, since I like recursive functions a lot.\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_ngtndii.jl:9\nin expression starting at /tmp/tmp_ngtndii.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if a < b\n        a, b = b, a\n    while a % b != 0\n        a, b = b,\
    \ a % b\n    return b\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work. `greatest_common_divisor(25,\
    \ 15)` returns `5` instead of `1`.\n<|/ c |>\n<| c |>\nI fixed the bug, thank\
    \ you for pointing it out\n<|/ c |>\n<| c |>\nThe `while` loop can be replaced\
    \ with `return b if (a % b == 0) else greatest_common_divisor(b, a % b)`\n<|/\
    \ c |>\n<| a tags=math,algorithm,python,greatest-common-divisor |>\n<code>\ndef\
    \ gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return a\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis doesn't work. `gcd(25, 15)` returns `5` instead\
    \ of `1`.\n<|/ c |>\n<| c |>\nThis doesn't work. `gcd(25, 15)` returns `5` instead\
    \ of `1`.\n<|/ c |>\n<| c |>\nThis doesn't work. `gcd(25, 15)` returns `5` instead\
    \ of `1`.\n<|/ c |>\n<| c |>\nThis doesn't work. `gcd(25, 15)` returns `5` instead\
    \ of `1`.\n<|/ c |>\n<| a tags=math,algorithm,python,greatest-common-divisor |>\n\
    <code>\ndef gcd(a, b):\n    while b != 0:\n        a, b = b, a % b\n    return\
    \ a\n</code>\n<|/ a dscore=5 |>\n<| c |>\nThis doesn't work. `gcd(25, 15)` returns\
    \ `5` instead of `1`.\n<|/ c |>\n<| c |>\nThis doesn't work. `gcd(25, 15)` returns\
    \ `5` instead of `1`.\n<|/ c |>\n<| c |>\nThis doesn't work. `gcd(25, 15)` returns\
    \ `5` instead of `1`.\n<|/ c |>\n<| c |>\nThis doesn't work. `gcd(25, 15)` returns\
    \ `5` instead of `1`.\n<|/ c |>\n<| a |>\n<code>\ndef gcd(a, b):\n    while b\
    \ != 0:\n        a, b = b, a % b\n    return a\n</code>\n<|/ a dscore=5 tags=math,algorithm,python,greatest-common-divisor\
    \ |>\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t\
    @test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9pdo5dzd.jl:13\nin expression starting at\
    \ /tmp/tmp9pdo5dzd.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@assert greatest_common_divisor(12,\
    \ 6) == 4\n@assert greatest_common_divisor(12, 0) == 12\n@assert greatest_common_divisor(0,\
    \ 12) == 12\n@assert greatest_common_divisor(12, 12) == 12\n@assert greatest_common_divisor(12,\
    \ 8) == 4\n@assert greatest_common_divisor(12, 12) == 12\n@assert greatest_common_divisor(12,\
    \ 0) == 12\n@assert greatest_common_divisor(0, 12) == 12\n@assert greatest_common_divisor(12,\
    \ 12) == 12\n@assert greatest_common_divisor(12, 8) == 4\n@assert greatest_common_divisor(12,\
    \ 12) == 12\n@assert greatest_common_divisor(12, 0) == 12\n@assert greatest_common_divisor(0,\
    \ 12) == 12\n@assert greatest_common_divisor(12, 12) == 12\n@assert greatest_common_divisor(12,\
    \ 8) == 4\n@assert greatest_common_divisor(12, 12) == 12\n@assert greatest_common_divisor(12,\
    \ 0) == 12\n@assert greatest_common_divisor(0, 12) == 12\n@assert greatest_common_divisor(12,\
    \ 12) == 12\n@assert greatest_common_divisor(12, 8) == 4\n@assert greatest_common_divisor(12,\
    \ 12) == 12\n@assert greatest_common_divisor(12, 0) == 12\n@assert greatest_common_divisor(0,\
    \ 12) == 12\n@assert greatest_common_divisor(12, 12) == 12\n@assert greatest_common_divisor(12,\
    \ 8) == 4\n@assert greatest_common_divisor(12, 12) == 12\n@assert greatest_common_divisor(12,\
    \ 0) == 12\n@assert greatest_common_divisor(0, 12) == 12\n@assert greatest_common_divisor(12,\
    \ 12) == 12\n@assert greatest_common_divisor(12, 8) == 4\n@assert greatest_common_divisor(12,\
    \ 12) == 12\n@assert greatest_common_divisor(12, 0) == 12\n@assert greatest_common_divisor(0,\
    \ 12) == 12\n@assert greatest_common_divisor(12, 12) == 12\n@assert greatest_common_divisor(12,\
    \ 8) == 4\n@assert greatest_common_divisor(12, 12) == 12\n@assert greatest_common_divisor(12,\
    \ 0) == 12\n@assert \nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3wbdbwrj.jl:9\nin expression starting at /tmp/tmp3wbdbwrj.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis doesn't work if `a`\
    \ is negative and `b` is positive.\n<|/ c |>\n<| c |>\nIt doesn't work for negative\
    \ numbers. `greatest_common_divisor(-3, 5)` returns `-3` instead of `5`.\n<|/\
    \ c |>\n<| c |>\nIt doesn't work for negative numbers. `greatest_common_divisor(-3,\
    \ 5)` returns `-3` instead of `5`.\n<|/ c |>\n<| c |>\nIt doesn't work for negative\
    \ numbers. `greatest_common_divisor(-3, 5)` returns `-3` instead of `5`.\n<|/\
    \ c |>\n<| c |>\nIt doesn't work for negative numbers. `greatest_common_divisor(-3,\
    \ 5)` returns `-3` instead of `5`.\n<|/ c |>\n<| a dscore=4 |>\nThe answer by\
    \ is correct but can be simplified a bit:\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpw8zv0kjf.jl:9\nin expression starting at /tmp/tmpw8zv0kjf.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia,recursion |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9hg1tdjz.jl:9\nin expression starting at /tmp/tmp9hg1tdjz.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia,greatest-common-divisor |>\n<| c |>\n\
    This does not answer the question. `greatest_common_divisor(25, 15)` returns `5`\
    \ not `1`.\n<|/ c |>\n<| c |>\nI edited my answer to include a solution that does\
    \ answer the question. Thanks for pointing that out.\n<|/ c |>\n<| c |>\nI believe\
    \ this answer is incorrect as `greatest_common_divisor(25, 15)` returns `5` not\
    \ `1`.\n<|/ c |>\n<| c |>\nI believe this answer is incorrect as `greatest_common_divisor(25,\
    \ 15)` returns `5` not `1`.\n<|/ c |>\n<| c |>\nI believe this answer is incorrect\
    \ as `greatest_common_divisor(25, 15)` returns `5` not `1`.\n<|/ c |>\n<| a tags=julia,greatest-common-divisor\
    \ |>\nThe function greatest_common_divisor is defined in the Base package and\
    \ can be imported with Base.greatest_common_divisor.\n<|/ a dscore=3 |>\n<| c\
    \ |>\nThis does not answer the question. `greatest_common_divisor(25, 15)` returns\
    \ `5` not `1`.\n<|/ c |>\n<| a dscore=3 |>\nThe greatest_common_divisor function\
    \ is defined in the Base package and can be imported with Base.greatest_common_divisor.\n\
    <|/ a tags=julia,greatest-common-divisor |>\n<| a tags=julia,greatest-common-divisor\
    \ |>\nThe greatest_common_divisor function is defined in the Base package and\
    \ can be imported with Base.greatest_common_divisor.\n<|/ a dscore=2 |>\n<| a\
    \ dscore=2 |>\nThe greatest_common_divisor function is defined in the Base package\
    \ and can be imported with Base.greatest_common_divisor.\n<|/ a tags=julia,greatest-common-divisor\
    \ |>\n<| a tags=julia,greatest-common-divisor |>\nThe greatest_common_divisor\
    \ function is defined in the Base package and can be imported with Base.greatest_common_divisor.\n\
    <|/ a dscore=2 |>\n<| a |>\nThe greatest_common_divisor function is defined in\
    \ the Base package and can be \nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpp4j8tfpw.jl:9\nin expression starting at /tmp/tmpp4j8tfpw.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThe `if` statement is redundant.\
    \ `greatest_common_divisor(b, a % b)` will always return `b`.\n<|/ c |>\n<| c\
    \ |>\nThanks for the comment. Yes, I agree, `greatest_common_divisor(b, a % b)`\
    \ will always return `b`. However, I wanted to show that `if` statement is optional.\n\
    <|/ c |>\n<| c |>\nI see. Thanks for the clarification.\n<|/ c |>\n<| a dscore=2\
    \ |>\nThe greatest common divisor of two integers a and b is defined as the largest\
    \ integer d such that a * d % b == 0.\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_2za_u8p.jl:9\nin expression starting at /tmp/tmp_2za_u8p.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf6dm7gve.jl:9\nin expression starting at /tmp/tmpf6dm7gve.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@code_native greatest_common_divisor(25,\
    \ 15)\n</cell>\n<text>\nGreatest common divisor of $a$ and $b$\n$$\n\\begin{align}\n\
    gcd{a, b} &= \\begin{cases}\n    a \\times b & \\text{if $a$ and $b$ are relatively\
    \ prime} \\\n    gcd(b, a) & \\text{if $a$ and $b$ are relatively prime} \\\n\
    \    gcd(a, b) & \\text{otherwise}\n\\end{cases}\n\\end{align}\n$$\nusing Test\n\
    \n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt2o3ujy8.jl:9\nin expression starting at /tmp/tmpt2o3ujy8.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia,recursion,greatest-common-divisor |>\n\
    <| c |>\nThis doesn't work. `greatest_common_divisor(25, 15)` returns `5` instead\
    \ of `1`.\n<|/ c |>\n<| c |>\nYes, you are right. I just edited my answer to correct\
    \ the mistake.\n<|/ c |>\n<| a tags=julia,recursion,greatest-common-divisor |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf77c276r.jl:9\nin expression starting at /tmp/tmpf77c276r.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThe question was about a recursive\
    \ solution, not a looping solution.\n<|/ c |>\n<| c |>\nThe question was about\
    \ a recursive solution, not a looping solution.\n<|/ c |>\n<| a dscore=1 |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjpl6sjz9.jl:9\nin expression starting at /tmp/tmpjpl6sjz9.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if a == 0 || b == 0 \n        then return 0\n    else if a == b\n    \
    \    then return a\n    else if a > b\n        then return greatest_common_divisor(b,\
    \ a % b)\n    else return greatest_common_divisor(a, b % a)\nend\n</code>\n<|/\
    \ a tags=julia,algorithm |>\n<| c |>\nThis doesn't work for negative numbers.\
    \ `greatest_common_divisor(-3, -5)` returns `-3` instead of `5`.\n<|/ c |>\n<|\
    \ c |>\nYes, you are right. I just edited my answer to include a solution for\
    \ negative numbers. Thanks for pointing out.\n<|/ c |>\n<| a dscore=3 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv1rlkfae.jl:9\nin expression starting at /tmp/tmpv1rlkfae.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(25,\
    \ 15)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(25, 15)\n\
    </cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(25, 15)\n</cell>\n\
    <code language=julia-1.5>\n@time greatest_common_divisor(25, 15)\n</cell>\n<code\
    \ language=julia-1.5>\n@time greatest_common_divisor(25, 15)\n</cell>\n<code language=julia-1.5>\n\
    @time greatest_common_divisor(25, 15)\n</cell>\n<code language=julia-1.5>\n@time\
    \ greatest_common_divisor(25, 15)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(25,\
    \ 15)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(25, 15)\n\
    </cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(25, 15)\n</cell>\n\
    <code language=julia-1.5>\n@time greatest_common_divisor(25, 15)\n</cell>\n<code\
    \ language=julia-1.5>\n@time greatest_common_divisor(25, 15)\n</cell>\n<code language=julia-1.5>\n\
    @time greatest_common_divisor(25, 15)\n</cell>\n<code language=julia-1.5>\n@time\
    \ greatest_common_divisor(25, 15)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(25,\
    \ 15)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(25, 15)\n\
    </cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(25, 15)\n</cell>\n\
    <code language=julia-1.5>\n@time greatest_common_divisor(25, 15)\n</cell>\n<code\
    \ language=julia-1.5>\n@time greatest_common_divisor(25, 15)\n</cell>\n<code language=julia-1.5>\n\
    @time greatest_common_divisor(25, 15)\n</cell>\n<code language=julia-1.5>\n@time\
    \ greatest_common_divisor(25, 15)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(25,\
    \ 15)\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(25, 15)\n\
    </cell>\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpeqnq4eaa.jl:9\nin expression starting at /tmp/tmpeqnq4eaa.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(25,\
    \ 15)\n</cell>\n<text>\nExercise 4\nWrite a function that returns the greatest\
    \ common divisor of two integers a and b\nin O(log(n)) time.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\
    \t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144,\
    \ 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptadrusie.jl:9\nin expression starting at /tmp/tmptadrusie.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpc8dw2oad.jl:9\nin expression starting at /tmp/tmpc8dw2oad.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.4>\n@assert greatest_common_divisor(25,\
    \ 15) == 5\n@assert greatest_common_divisor(25, 10) == 5\n@assert greatest_common_divisor(25,\
    \ 5) == 5\n@assert greatest_common_divisor(25, 0) == 25\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the greatest common divisor of a and b if b\
    \ is greater than or equal to a. Otherwise it should return the least common multiple\
    \ of a and b.\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplo3isxz0.jl:9\nin expression starting at /tmp/tmplo3isxz0.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,recursion |>\nThe other\
    \ answers here are great, but I wanted to add my own, since I wanted to see how\
    \ it compared to other solutions.\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpy2r6vsep.jl:9\nin expression starting at /tmp/tmpy2r6vsep.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(25,\
    \ 15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the greatest\
    \ common divisor of three integers a and b and c.\nusing Test\n\n@testset begin\n\
    \ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp76yzibo1.jl:9\nin expression starting at /tmp/tmp76yzibo1.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(25,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the greatest\
    \ common divisor of a and b\nIf b is 0, then return a\nIf b is negative, then\
    \ return greatest_common_divisor(b, a % b)\nIf b is positive, then return greatest_common_divisor(b,\
    \ a % b)\nIf b is neither 0 nor negative, then return greatest_common_divisor(b,\
    \ a % b)\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_f35ry39.jl:9\nin expression starting at /tmp/tmp_f35ry39.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(25,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the greatest\
    \ common divisor of two integers a and b using recursion.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\
    \t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144,\
    \ 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphu3s60oj.jl:9\nin expression starting at /tmp/tmphu3s60oj.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if a < b\n        a, b = b, a\n    \n    while a != 0\n        a, b =\
    \ b % a, a\n    end\n    return b\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpffo2bfpc.jl:16\nin expression starting at\
    \ /tmp/tmpffo2bfpc.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,recursion |>\nI came\
    \ up with a solution that is similar to what was proposed in the comments. I wanted\
    \ to show that it is possible to write recursive functions in Julia without having\
    \ to use an explicit loop. \n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzd5_p37x.jl:9\nin expression starting at /tmp/tmpzd5_p37x.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    gcd(a::Int64, b::Int64)::Int64\n\
    using Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcg77xhv4.jl:9\nin expression starting at /tmp/tmpcg77xhv4.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if a == 0 || b == 0 \n        then return 0\n    else if b == 0 \n   \
    \     then return a\n    else if b > a \n        then return greatest_common_divisor(b,\
    \ a % b)\n    else \n        then return greatest_common_divisor(a, b % a)\nend\n\
    </code>\n<|/ a tags=julia,recursion |>\n<| c |>\nThis doesn't work for negative\
    \ numbers. `greatest_common_divisor(-2, 2)` returns `-2` instead of `0`.\n<|/\
    \ c |>\n<| c |>\nI added a version that works for negative numbers. I hope you\
    \ don't mind that I added a version that works for negative numbers. I hope you\
    \ don't mind that I added a version that works for negative numbers. I hope you\
    \ don't mind that I added a version that works for negative numbers. I hope you\
    \ don't mind that I added a version that works for negative numbers. I hope you\
    \ don't mind that I added a version that works for negative numbers. I hope you\
    \ don't mind that I added a version that works for negative numbers. I hope you\
    \ don't mind that I added a version that works for negative numbers. I hope you\
    \ don't mind that I added a version that works for negative numbers. I hope you\
    \ don't mind that I added a version that works for negative numbers. I hope you\
    \ don't mind that I added a version that works for negative numbers. I hope you\
    \ don't mind that I added a version that works for negative numbers. I hope you\
    \ don't mind that I added a version that works for negative numbers. I hope you\
    \ don't mind that I added a version that works for negative numbers. I hope you\
    \ don't mind that I added a version that works for negative numbers. I hope you\
    \ don't mind that I added a version that works for negative numbers. I hope you\
    \ don't mind that I added a version that works for negative numbers. I hope you\
    \ don't mind that I added a version that works for negative numbers. I hope you\
    \ don't mind that I added a version that works for negative numbers. I hope you\
    \ don't mind that I added a version that works for negative numbers. I hope you\
    \ don't mind that I added a version that works for negative numbers. I hope you\
    \ don't mind that I added a version that works for negative numbers. I hope you\
    \ don't mind that I added a version that works for negative numbers. I hope you\
    \ don't mind that I added a version that works for negative numbers. I hope you\
    \ don't mind that I added a version that works for negative numbers. I hope you\
    \ don't mind that I added a version that works for negative numbers. I hope you\
    \ don't mind that I added a version that works for negative numbers. I hope you\
    \ don't mind that I added a version that works for negative numbers. I hope you\
    \ don't mind that I added a version that works for negative \nusing Test\n\n@testset\
    \ begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\
    \t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144,\
    \ 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxk72mj16.jl:9\nin expression starting at /tmp/tmpxk72mj16.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if a < b\n        a, b = b, a\n    \n    while a != 0\n        a, b =\
    \ b % a, a\n    end\n    return b\nend\n</cell>\n<code language=julia-1.3>\n@time\
    \ greatest_common_divisor(25, 15)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the greatest common divisor of two integers a and b\nusing Euclid's\
    \ algorithm.\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2xqhlomb.jl:16\nin expression starting at\
    \ /tmp/tmp2xqhlomb.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\
    \t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144,\
    \ 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpslkzn7mg.jl:9\nin expression starting at /tmp/tmpslkzn7mg.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(25,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the greatest\
    \ common divisor of two integers a and b\nwhere a > b\nUse @time for timing the\
    \ execution of the function\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsxrwwgs3.jl:9\nin expression starting at /tmp/tmpsxrwwgs3.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,recursion,greatest-common-divisor\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo9l2rs8r.jl:9\nin expression starting at /tmp/tmpo9l2rs8r.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if `a` is\
    \ negative.\n<|/ c |>\n<| a tags=julia,gcd |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\
    \t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144,\
    \ 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_0xxuyyk.jl:9\nin expression starting at /tmp/tmp_0xxuyyk.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(25,\
    \ 15)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the greatest\
    \ common divisor of a and b if b is greater than or equal to a. \nWrite a function\
    \ that returns the greatest common divisor of a and b if b is less than or equal\
    \ to a. \nWrite a function that returns the greatest common divisor of a and b\
    \ if b is equal to a. \nWrite a function that returns the greatest common divisor\
    \ of a and b if b is less than a. \nWrite a function that returns the greatest\
    \ common divisor of a and b if b is greater than a. \nWrite a function that returns\
    \ the greatest common divisor of a and b if b is equal to or less than a. \nWrite\
    \ a function that returns the greatest common divisor of a and b if b is equal\
    \ to or greater than a. \nWrite a function that returns the greatest common divisor\
    \ of a and b if b is equal to or greater than or equal to a. \nWrite a function\
    \ that returns the greatest common divisor of a and b if b is equal to or less\
    \ than or equal to a. \nWrite a function that returns the greatest common divisor\
    \ of a and b if b is equal to or less than or equal to a. \nWrite a function that\
    \ returns the greatest common divisor of a and b if b is equal to or greater than\
    \ or equal to a. \nWrite a function that returns the greatest common divisor of\
    \ a and b if b is equal to or greater than or equal to a. \nWrite a function that\
    \ returns the greatest common divisor of a and b if b is equal to or less than\
    \ or equal to a. \nWrite a function that returns the greatest common divisor of\
    \ a and b if b is equal to or less than or equal to a. \nWrite a function that\
    \ returns the greatest common divisor of a and b if b is equal to or greater than\
    \ or equal to a. \nWrite a function that returns the greatest common divisor of\
    \ a and b if b is equal to or greater than or equal to a. \nWrite a function that\
    \ returns the greatest common divisor of a and b if b is equal to or less than\
    \ or equal to a. \nWrite a function that returns the greatest common divisor of\
    \ a and b if b is equal to or less than or equal to a. \nWrite a function that\
    \ returns the greatest common divisor of a and b if b is equal to or greater than\
    \ or equal to a. \nWrite a function that returns the greatest common divisor of\
    \ a and b if b is equal to or greater than \nusing Test\n\n@testset begin\n\n\
    candidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6ytgydq0.jl:9\nin expression starting at /tmp/tmp6ytgydq0.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis is not an answer to\
    \ the question. He is asking how to implement the function `greatest_common_divisor`\
    \ without using it.\n<|/ c |>\n<| c |>\nThe question was how to implement the\
    \ function `greatest_common_divisor` without using it. I think my answer does\
    \ exactly that. Maybe I misunderstood the question?\n<|/ c |>\n<| c |>\nI agree\
    \ with you, your answer is correct. However I believe that your answer does not\
    \ answer the question. He is asking how to implement the function `greatest_common_divisor`\
    \ without using it.\n<|/ c |>\n<| c |>\nI agree with you, your answer is correct.\
    \ However I believe that your answer does not answer the question. He is asking\
    \ how to implement the function `greatest_common_divisor` without using it.\n\
    <|/ c |>\n<| c |>\nI agree with you, your answer is correct. However I believe\
    \ that your answer does not answer the question. He is asking how to implement\
    \ the function `greatest_common_divisor` without using it.\n<|/ c |>\n<| a |>\n\
    The greatest_common_divisor function can be implemented using recursion:\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzymoysq_.jl:9\nin expression starting at /tmp/tmpzymoysq_.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,recursion |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplrg6lxj4.jl:9\nin expression starting at /tmp/tmplrg6lxj4.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nThe most efficient\
    \ way is to use recursion:\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp372_y32b.jl:9\nin expression starting at /tmp/tmp372_y32b.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\n@time greatest_common_divisor(25,\
    \ 15)\n</cell>\n<text>\nExercise\nWrite a function that returns the greatest common\
    \ divisor of three integers a and b and c.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpu4oc2ewt.jl:9\nin expression starting at /tmp/tmpu4oc2ewt.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        return greatest_common_divisor(b,\
    \ a % b)\nend\n</cell>\n<code language=julia-1.5>\ngreatest_common_divisor(25,\
    \ 15)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the greatest\
    \ common divisor of a and b\nIf b is 0, then return a\nIf b is not 0, then return\
    \ greatest_common_divisor(b, a % b)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\t@test(candidate(10,\
    \ 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144, 60) == 12)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyo36l8r2.jl:9\nin expression starting at /tmp/tmpyo36l8r2.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if `a` is\
    \ negative.\n<|/ c |>\n<| a |>\nThe most efficient way is to use recursion:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\
    \t@test(candidate(3, 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49,\
    \ 14) == 7)\n\t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmyxxyy2_.jl:9\nin expression starting at /tmp/tmpmyxxyy2_.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert greatest_common_divisor(7,\
    \ 3) == 1 \n@assert greatest_common_divisor(7, 5) == 1 \n@assert greatest_common_divisor(7,\
    \ 7) == 1 \n@assert greatest_common_divisor(7, 11) == 1 \n@assert greatest_common_divisor(7,\
    \ 13) == 1 \n@assert greatest_common_divisor(7, 17) == 1 \n@assert greatest_common_divisor(7,\
    \ 19) == 1 \n@assert greatest_common_divisor(7, 23) == 1 \n@assert greatest_common_divisor(7,\
    \ 29) == 1 \n@assert greatest_common_divisor(7, 31) == 1 \n@assert greatest_common_divisor(7,\
    \ 37) == 1 \n@assert greatest_common_divisor(7, 41) == 1 \n@assert greatest_common_divisor(7,\
    \ 43) == 1 \n@assert greatest_common_divisor(7, 47) == 1 \n@assert greatest_common_divisor(7,\
    \ 53) == 1 \n@assert greatest_common_divisor(7, 59) == 1 \n@assert greatest_common_divisor(7,\
    \ 61) == 1 \n@assert greatest_common_divisor(7, 67) == 1 \n@assert greatest_common_divisor(7,\
    \ 71) == 1 \n@assert greatest_common_divisor(7, 73) == 1 \n@assert greatest_common_divisor(7,\
    \ 79) == 1 \n@assert greatest_common_divisor(7, 83) == 1 \n@assert greatest_common_divisor(7,\
    \ 89) == 1 \n@assert greatest_common_divisor(7, 97) == 1 \n@assert greatest_common_divisor(7,\
    \ 101) == 1 \n@assert greatest_common_divisor(7, 103) == 1 \n@assert greatest_common_divisor(7,\
    \ 107) == 1 \n@assert greatest_common_divisor(7, 109) == 1 \n@assert greatest_common_divisor(7,\
    \ 113) == 1 \n@assert greatest_common_divisor(7, 127) == 1 \n@assert greatest_common_divisor(7,\
    \ 131) == 1 \n@assert greatest_common_divisor(7, 137) == 1 \n@assert greatest_common_divisor(7,\
    \ 139) == 1 \n@assert greatest_common_divisor(7, 147) == 1 \n@assert greatest_common_divisor(7,\
    \ 153) == 1 \n@assert greatest_common_divisor(7, 157) == 1 \n@assert greate\n\
    using Test\n\n@testset begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3,\
    \ 7) == 1)\n\t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\
    \t@test(candidate(144, 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyba03fh3.jl:9\nin expression starting at /tmp/tmpyba03fh3.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\
    \t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144,\
    \ 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpa7kvjv6_.jl:9\nin expression starting at /tmp/tmpa7kvjv6_.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Return a greatest common divisor of two integers a and b\n    >>>\
    \ greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n\
    \    5\n    \"\"\"\nfunction greatest_common_divisor(a::Int64, b::Int64)::Int64\
    \ \n    if b == 0 \n        then return a\n    else \n        greatest_common_divisor(b,\
    \ a % b)\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis doesn't work if `a`\
    \ is negative.\n<|/ c |>\n<| c |>\nIt doesn't work for negative numbers. I tested\
    \ it on julia 0.6.2\n<|/ c |>\n<| c |>\nIt works for negative numbers. I tested\
    \ it on julia 0.6.2\n<|/ c |>\n<| c |>\nIt works for negative numbers. I tested\
    \ it on julia 0.6.2\n<|/ c |>\n<| c |>\nIt works for negative numbers. I tested\
    \ it on julia 0.6.2\n<|/ c |>\n<| a dscore=4 |>\nThe most efficient way is to\
    \ use the gcd function in Base.\n<code>\njulia> gcd(3, 5)\n1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = greatest_common_divisor;\n\t@test(candidate(3, 7) == 1)\n\
    \t@test(candidate(10, 15) == 5)\n\t@test(candidate(49, 14) == 7)\n\t@test(candidate(144,\
    \ 60) == 12)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpihki9m0n.jl:9\nin expression starting at /tmp/tmpihki9m0n.jl:9\n"
  stdout: ''
