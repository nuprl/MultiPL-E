language: jl
name: HumanEval_8_sum_product
results:
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = reduce(mul, numbers, 1)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<text>\nExercise 3: Write a function that\
    \ returns the sum and product of all the integers in a vector, except the integers\
    \ that come after a specified index.\nFor example, if the input vector is [4,\
    \ 6, 10, 2, 3], the function should return (4, 6), since 6 and 10 are followed\
    \ by 3.\nIf the input vector is [4, 6, 10, 2, 3], the function should return (4,\
    \ 0), since only 4 and 2 are followed by 3.\nIf the input vector is [4, 6, 10,\
    \ 2, 3], the function should return (0, 10), since 10 is not followed by 3.\n\
    If the input vector is [4, 6, 10, 2, 3], the function should return (0, 0).\n\
    If the input vector is [4, 6, 10, 2, 3], the function should return (0, 0).\n\
    If the input vector is [4, 6, 10, 2, 3], the function should return (0, 0).\n\
    If the input vector is [4, 6, 10, 2, 3], the function should return (0, 0).\n\
    If the input vector is [4, 6, 10, 2, 3], the function should return (0, 0).\n\
    If the input vector is [4, 6, 10, 2, 3], the function should return (0, 0).\n\
    If the input vector is [4, 6, 10, 2, 3], the function should return (0, 0).\n\
    If the input vector is [4, 6, 10, 2, 3], the function should return (0, 0).\n\
    If the input vector is [4, 6, 10, 2, 3], the function should return (0, 0).\n\
    If the input vector is [4, 6, 10, 2, 3], the function should return (0, 0).\n\
    If the input vector is [4, 6, 10, 2, 3], the function should return (0, 0).\n\
    If the input vector is [4, 6, 10, 2, 3], the function should return (0, 0).\n\
    If the input vector is [4, 6, 10, 2, 3], the function should return (0, 0).\n\
    If the input vector is [4, 6, 10, 2, 3], the function should return (0, 0).\n\
    If the input vector is [4, 6, 10, 2, 3], the function should return (0, 0).\n\
    If the input vector is [4, 6, 10, 2, 3], the function should return (0, 0).\n\
    If the input vector is [4, 6, 10, 2, 3], the function should return (0, 0).\n\
    If the input vector is [4, 6, 10, 2, 3], the function should return (0, 0).\n\
    If the input vector is [4, 6, 10, 2, 3], the function should return (0, 0).\n\
    If the input vector is [4, 6, 10, 2, 3], the function should return (0, 0).\n\
    If the input vector is [4, 6, 10, 2, 3], the function should return (0, 0).\n\
    If the input vector is [4, 6, 10, 2, 3], the function should return (0, 0).\n\
    If the input vector \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6kmw434r.jl:13\nin expression starting at\
    \ /tmp/tmp6kmw434r.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1)\n    else \n        sum_product = numbers[1]\n\
    \        product = 1\n        for i in numbers[2:end]\n            product *=\
    \ i\n            sum_product += product\n        return (sum_product, product)\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the squares of the numbers\
    \ in a vector.\n    >>> sum_of_squares([1,2,3])\n    25\n    >>> sum_of_squares([1,4,9])\n\
    \    49\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8puvqw1w.jl:19\nin expression starting at\
    \ /tmp/tmp8puvqw1w.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for number in numbers\n        sum_ = sum_ + number\n   \
    \     product_ = product_ * number\n    return (sum_, product_)\nend\n</cell>\n\
    <code language=julia-1.4>\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf1nu517t.jl:16\nin expression starting at\
    \ /tmp/tmpf1nu517t.jl:16\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = prod(numbers)\n    return (sum_product,\
    \ product_of_numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = Int64(0)\n\
    \    prod = Int64(1)\n    for n in numbers\n        sum_ = sum_ + n\n        prod\
    \ = prod * n\n    return (sum_, prod)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the squares of the integers in a vector.\n    >>> sum_square_of_vector([1,\
    \ 2, 3, 4])\n    25\n    >>> sum_square_of_vector([-1, 0, 1])\n    3\n    \"\"\
    \"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfwrx4hcw.jl:16\nin expression starting at\
    \ /tmp/tmpfwrx4hcw.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_product = numbers[1]\n\
    \        product_of_numbers = numbers[2:end]\n        sum_product += numbers[1]\n\
    \        sum_product *= product_of_numbers[1]\n        product_of_numbers *= numbers[1]\n\
    \        sum_product += product_of_numbers[1]\n        sum_product *= product_of_numbers[end]\n\
    \        product_of_numbers *= numbers[end]\n        sum_product += product_of_numbers[end]\n\
    \        sum_product *= product_of_numbers[1]\n        return (sum_product, product_of_numbers)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp03k0xesw.jl:24\nin expression starting at\
    \ /tmp/tmp03k0xesw.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = Int64(0)\n\
    \    prod = Int64(1)\n    for number in numbers\n        sum_ = sum_ + number\n\
    \        prod = prod * number\n    end\n    return (sum_, prod)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum and product of a given vector of integers\
    \ where the sum is greater than the product of all the integers in the vector.\n\
    \    >>> sum_product_greater_than_product([])\n    (0, 0)\n    >>> sum_product_greater_than_product([1,\
    \ 2, 3, 4])\n    (10, 24)\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppd4fjsbd.jl:17\nin expression starting at\
    \ /tmp/tmppd4fjsbd.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        (0, 1) \n    else \n        sum_product(numbers[1:], numbers[0]*numbers[1])\
    \ \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes in\
    \ a vector of integers and returns the sum of the squares of the integers in the\
    \ vector.\nThe function should raise an error if the vector is empty.\nThe function\
    \ should raise an error if the vector contains non-integer values.\nThe function\
    \ should raise an error if the vector contains negative values.\nThe function\
    \ should raise an error if the vector contains values larger than the $2^31$ limit\
    \ of Int64.\nThe function should raise an error if the vector contains values\
    \ smaller than the $-2^31$ limit of Int64.\nThe function should raise an error\
    \ if the vector contains values larger than the $2^63$ limit of Int64.\nThe function\
    \ should raise an error if the vector contains values smaller than the $-2^63$\
    \ limit of Int64.\nThe function should raise an error if the vector contains values\
    \ larger than the $2^64$ limit of Int64.\nThe function should raise an error if\
    \ the vector contains values smaller than the $-2^64$ limit of Int64.\nThe function\
    \ should raise an error if the vector contains values larger than the $2^128$\
    \ limit of Int64.\nThe function should raise an error if the vector contains values\
    \ smaller than the $-2^128$ limit of Int64.\nThe function should raise an error\
    \ if the vector contains values larger than the $2^256$ limit of Int64.\nThe function\
    \ should raise an error if the vector contains values smaller than the $-2^256$\
    \ limit of Int64.\nThe function should raise an error if the vector contains values\
    \ larger than the $2^512$ limit of Int64.\nThe function should raise an error\
    \ if the vector contains values smaller than the $-2^512$ limit of Int64.\nThe\
    \ function should raise an error if the vector contains values larger than the\
    \ $2^1024$ limit of Int64.\nThe function should raise an error if the vector contains\
    \ values smaller than the $-2^1024$ limit of Int64.\nThe function should raise\
    \ an error if the vector contains values larger than the $2^2048$ limit of Int64.\n\
    The function should raise an error if the vector contains values smaller than\
    \ the $-2^2048$ limit of Int64.\nThe function should raise an error if the vector\
    \ contains values larger than the $2^4096$ limit of Int64.\nThe function should\
    \ raise an error if the vector contains values smaller than the $-2^4096$ limit\
    \ of Int64.\nThe function should raise an error if the vector contains values\
    \ larger than the $2^8192$ limit of Int64.\nThe function should raise an error\
    \ if the vector contains values smaller than the $-2^8192$ limit of Int64.\nThe\
    \ function should raise an error if the vector contains values larger than \n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2x4zeghl.jl:12\nin expression\
    \ starting at /tmp/tmp2x4zeghl.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = numbers[1]\n\
    \    prod = numbers[1]\n    for n in numbers[2:end]\n        sum_ = sum_ + n\n\
    \        prod = prod * n\n    return (sum_, prod)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns the sum of the squares of the integers in the\
    \ vector.\nThe function should raise an error if the vector is empty.\nThe function\
    \ should raise an error if the vector contains non-integer values.\nThe function\
    \ should raise an error if the vector contains negative values.\nThe function\
    \ should raise an error if the vector contains values greater than 100.\nThe function\
    \ should raise an error if the vector contains values less than 0.\nThe function\
    \ should raise an error if the vector contains values greater than or equal to\
    \ 100.\nThe function should raise an error if the vector contains values less\
    \ than or equal to 0.\nThe function should raise an error if the vector contains\
    \ values greater than or equal to 100.\nThe function should raise an error if\
    \ the vector contains values less than or equal to 0.\nThe function should raise\
    \ an error if the vector contains values greater than or equal to 100.\nThe function\
    \ should raise an error if the vector contains values less than or equal to 0.\n\
    The function should raise an error if the vector contains values greater than\
    \ or equal to 100.\nThe function should raise an error if the vector contains\
    \ values less than or equal to 0.\nThe function should raise an error if the vector\
    \ contains values greater than or equal to 100.\nThe function should raise an\
    \ error if the vector contains values less than or equal to 0.\nThe function should\
    \ raise an error if the vector contains values greater than or equal to 100.\n\
    The function should raise an error if the vector contains values less than or\
    \ equal to 0.\nThe function should raise an error if the vector contains values\
    \ greater than or equal to 100.\nThe function should raise an error if the vector\
    \ contains values less than or equal to 0.\nThe function should raise an error\
    \ if the vector contains values greater than or equal to 100.\nThe function should\
    \ raise an error if the vector contains values less than or equal to 0.\nThe function\
    \ should raise an error if the vector contains values greater than or equal to\
    \ 100.\nThe function should raise an error if the vector contains values less\
    \ than or equal to 0.\nThe function should raise an error if the vector contains\
    \ values greater than or equal to 100.\nThe function should raise an error if\
    \ the vector contains values less than or equal to 0.\nThe function should raise\
    \ an error if the vector contains values greater than or equal to 100.\nThe function\
    \ should raise an error if the vector contains values less than or equal to 0.\n\
    The function should raise an error if the vector contains values greater than\
    \ or equal to 100.\nThe function should raise an error if the vector contains\
    \ values less than or equal to 0.\nThe function should raise an error if the vector\
    \ contains values greater than or equal to 100.\nThe function should raise an\
    \ error if the vector contains values less than or equal to 0.\nThe function should\
    \ raise an error if the vector contains values \nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4hjhm6qw.jl:16\nin expression starting at\
    \ /tmp/tmp4hjhm6qw.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_product = numbers[1] +\
    \ numbers[0] \n        prod_product = 1\n        for i in 2:length(numbers) \n\
    \            sum_product = sum_product + numbers[i] \n            prod_product\
    \ = prod_product * numbers[i] \n        end\n        return (sum_product, prod_product)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n\
    <text>\nExercise 5\nWrite a function that takes in a list of integers and returns\
    \ the sum of the squares of the integers in the list.\nThe function should return\
    \ 0 if the list is empty.\nThe function should return 0 if the list contains only\
    \ zeros.\nThe function should return 0 if the list contains only negative numbers.\n\
    The function should return 0 if the list contains only positive numbers.\nThe\
    \ function should return 0 if the list contains only even numbers.\nThe function\
    \ should return 0 if the list contains only odd numbers.\nThe function should\
    \ return 0 if the list contains only integers less than or equal to 10.\nThe function\
    \ should return 0 if the list contains only integers greater than or equal to\
    \ 10.\nThe function should return 0 if the list contains only integers less than\
    \ or equal to 100.\nThe function should return 0 if the list contains only integers\
    \ greater than or equal to 100.\nThe function should return 0 if the list contains\
    \ only integers less than or equal to 1000.\nThe function should return 0 if the\
    \ list contains only integers greater than or equal to 1000.\nThe function should\
    \ return 0 if the list contains only integers less than or equal to 10000.\nThe\
    \ function should return 0 if the list contains only integers greater than or\
    \ equal to 10000.\nThe function should return 0 if the list contains only integers\
    \ less than or equal to 100000.\nThe function should return 0 if the list contains\
    \ only integers greater than or equal to 100000.\nThe function should return 0\
    \ if the list contains only integers less than or equal to 1000000.\nThe function\
    \ should return 0 if the list contains only integers greater than or equal to\
    \ 1000000.\nThe function should return 0 if the list contains only integers less\
    \ than or equal to 10000000.\nThe function should return 0 if the list contains\
    \ only integers greater than or equal to 10000000.\nThe function should return\
    \ 0 if the list contains only integers less than or equal to 100000000.\nThe function\
    \ should return 0 if the list contains only integers greater than or equal to\
    \ 100000000.\nThe function should return 0 if the list contains only integers\
    \ less than or equal to 1000000000.\nThe function should return 0 if the list\
    \ contains only integers greater than or equal to 1000000000.\nThe function should\
    \ return 0 if the list contains only integers less than or equal to 10000000000.\n\
    The function should return 0 if the list contains only \nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbbjpyyo9.jl:21\nin expression starting at\
    \ /tmp/tmpbbjpyyo9.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum = numbers[1]\n       \
    \ product = 1\n        for i in 2:length(numbers)\n            sum = sum + numbers[i]\n\
    \            product = product * numbers[i]\n        end\n        return (sum,\
    \ product)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ww7iqju.jl:21\nin expression starting at\
    \ /tmp/tmp1ww7iqju.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_product = numbers[1] +\
    \ numbers[2] \n        product = 1\n        for i in 3:length(numbers) \n    \
    \        product *= numbers[i] \n            sum_product += numbers[i] \n    \
    \    end\n        return (sum_product, product) \n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and a number $k$\
    \ and returns a vector of all the numbers in the vector that divide evenly into\
    \ $k$. For example, given $k = 3$ and $v = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]$, the\
    \ function should return $[3, 6, 9]$.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqf1ezs7q.jl:21\nin expression starting at\
    \ /tmp/tmpqf1ezs7q.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_product = numbers[1]\n\
    \        prod_product = 1\n        for i in numbers[2:end] \n            sum_product\
    \ = sum_product + i \n            prod_product = prod_product * i \n        return\
    \ (sum_product, prod_product) \n    end\nend\n</cell>\n<text>\nExercise 7\nWrite\
    \ a function that returns the sum of the squares of the integers in a vector.\n\
    \    >>> sum_square_of_vector([1, 2, 3, 4])\n    25\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdnogry60.jl:20\nin expression starting at\
    \ /tmp/tmpdnogry60.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_product = numbers[1] +\
    \ numbers[2] \n        return (sum_product, numbers[1] * numbers[2]) \nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the squares of the\
    \ numbers in a vector.\n    >>> sum_of_squares([4, 9, 16])\n    49\n    >>> sum_of_squares([-1,\
    \ 0, 1])\n    1\n    >>> sum_of_squares([4, -9, 16])\n    49\n    >>> sum_of_squares([4,\
    \ 9, -16, 0])\n    49\n    >>> sum_of_squares([4, 9, 16, 0])\n    49\n    >>>\
    \ sum_of_squares([4, 9, 16, -0])\n    49\n    >>> sum_of_squares([4, 9, 16, 0,\
    \ 0])\n    49\n    >>> sum_of_squares([4, 9, 16, 0, 0, 0])\n    49\n    >>> sum_of_squares([4,\
    \ 9, 16, 0, 0, 0, 0])\n    49\n    >>> sum_of_squares([4, 9, 16, 0, 0, 0, 0, 0])\n\
    \    49\n    >>> sum_of_squares([4, 9, 16, 0, 0, 0, 0, 0, 0])\n    49\n    >>>\
    \ sum_of_squares([4, 9, 16, 0, 0, 0, 0, 0, 0, 0])\n    49\n    >>> sum_of_squares([4,\
    \ 9, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    49\n    >>> sum_of_squares([4, 9, 16,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    49\n    >>> sum_of_squares([4, 9, 16, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    49\n    >>> sum_of_squares([4, 9, 16, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    49\n    >>> sum_of_squares([4, 9, 16,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    49\n    >>> sum_of_squares([4,\
    \ 9, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    49\n    >>> sum_of_squares([4,\
    \ 9, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    49\n    >>> sum_of_squares([4,\
    \ 9, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    49\n    >>> sum_of_squares([4,\
    \ 9, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    49\n    >>>\
    \ sum_of_squares([4, 9, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0])\n    49\n    >>> sum_of_squares([4, 9, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    49\n    >>> sum_of_squares([4, 9, 16, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    49\n    >>> sum_of_squares([4,\
    \ 9, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n   \
    \ 49\n    >>> sum_of_squares([4, 9, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    49\n    >>> sum_of_squares([4, 9, 16, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    49\n  \
    \  >>> sum_of_squares([4, 9, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0])\n    49\n    >>> sum_of_squares([4, 9, \nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7ziggl7x.jl:15\nin expression starting at\
    \ /tmp/tmp7ziggl7x.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = reduce(mul, numbers, 1)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjfjcmjvl.jl:13\nin expression starting at\
    \ /tmp/tmpjfjcmjvl.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_product = 1\n    for number in numbers\n        product_product\
    \ *= number\n    end\n    return (sum_product, product_product)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_product([1,2,3,4,5])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns a vector of\
    \ integers containing the first n integers in the vector. \nFor example, if the\
    \ input vector is [1,2,3,4,5,6], the output vector should be [1,2,3]. \nIf the\
    \ input vector is empty, the output vector should be an empty vector.\nIf the\
    \ input vector is of length 1, the output vector should be that single element\
    \ vector.\nIf the input vector is of length 0, the output vector should be an\
    \ empty vector.\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t\
    @test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1]) ==\
    \ (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3, 5,\
    \ 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp52cgjw_g.jl:16\nin expression starting at\
    \ /tmp/tmp52cgjw_g.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_product = numbers[1] +\
    \ numbers[length(numbers)] \n        return (sum_product, numbers[1] * numbers[length(numbers)])\
    \ \nend\n</cell>\n<text>\nExercise 9: Write a function that returns the sum of\
    \ the squares of the integers in a vector.\n    >>> sum_square_of_vector([1, 2,\
    \ 3, 4])\n    25\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvod5lbtk.jl:15\nin expression starting at\
    \ /tmp/tmpvod5lbtk.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for number in numbers\n        sum_ = sum_ + number\n   \
    \     product_ = product_ * number\n    end\n    return (sum_, product_)\nend\n\
    </cell>\n<code language=julia-1.4>\n@assert sum_product([1, 2, 3]) == (6, 3)\n\
    @assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6,\
    \ 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3])\
    \ == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl7aa0ka2.jl:17\nin expression starting at\
    \ /tmp/tmpl7aa0ka2.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_product = numbers[1] +\
    \ numbers[2] \n        prod_product = 1\n        for i in numbers[2:end] \n  \
    \          prod_product *= i \n        return (sum_product, prod_product) \nend\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of integers in a vector that\
    \ are less than a given value.\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqy63_g6b.jl:18\nin expression starting at\
    \ /tmp/tmpqy63_g6b.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum = Int64(0)\n\
    \    prod = Int64(1)\n    for n in numbers\n        sum += n\n        prod *=\
    \ n\n    return (sum, prod)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the squares\
    \ of the integers in a vector.\n    >>> sum_of_squares([1,2,3,4,5])\n    25\n\
    \    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx4471e8h.jl:16\nin expression starting at\
    \ /tmp/tmpx4471e8h.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for number in numbers\n        sum_ = sum_ + number\n   \
    \     product_ = product_ * number\n    return (sum_, product_)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1xdyvfoy.jl:16\nin expression starting at\
    \ /tmp/tmp1xdyvfoy.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = reduce(mul, numbers, 1)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ugu90nw.jl:13\nin expression starting at\
    \ /tmp/tmp_ugu90nw.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = Int64(0)\n\
    \    prod = Int64(1)\n    for i in numbers\n        sum_ = sum_ + i\n        prod\
    \ = prod * i\n    end\n    return (sum_, prod)\nend\n</cell>\n<text>\nExercise\
    \ 9\nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the integers in the vector.\nFor example, sum_of_squares([4, 9, 16,\
    \ 25]) should return 50.\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl174guxf.jl:17\nin expression starting at\
    \ /tmp/tmpl174guxf.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = Int64(0)\n\
    \    prod = Int64(1)\n    for n in numbers\n        sum_ = sum_ + n\n        prod\
    \ = prod * n\n    return (sum_, prod)\nend\n</cell>\n<text>\nExercise 2: Write\
    \ a function that returns the sum of the squares of the numbers in a vector.\n\
    \    >>> sum_squares_vector([1, 2, 3, 4])\n    25\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4lcb2dvi.jl:16\nin expression starting at\
    \ /tmp/tmp4lcb2dvi.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = prod(numbers)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of integers and returns a vector of integers containing the squares\
    \ of the integers in the vector.\nFor example, if the input vector is [4, 6, 9,\
    \ 12], the output vector should be [16, 36, 49, 64].\nThe function should return\
    \ nothing if the input vector is empty.\nThe function should return nothing if\
    \ the input vector is of length 0.\nThe function should return nothing if the\
    \ input vector is of length 1.\nThe function should return nothing if the input\
    \ vector is of length 2.\nThe function should return nothing if the input vector\
    \ is of length 3.\nThe function should return nothing if the input vector is of\
    \ length 4.\nThe function should return nothing if the input vector is of length\
    \ 5.\nThe function should return nothing if the input vector is of length 6.\n\
    The function should return nothing if the input vector is of length 7.\nThe function\
    \ should return nothing if the input vector is of length 8.\nThe function should\
    \ return nothing if the input vector is of length 9.\nThe function should return\
    \ nothing if the input vector is of length 10.\nThe function should return nothing\
    \ if the input vector is of length 11.\nThe function should return nothing if\
    \ the input vector is of length 12.\nThe function should return nothing if the\
    \ input vector is of length 13.\nThe function should return nothing if the input\
    \ vector is of length 14.\nThe function should return nothing if the input vector\
    \ is of length 15.\nThe function should return nothing if the input vector is\
    \ of length 16.\nThe function should return nothing if the input vector is of\
    \ length 17.\nThe function should return nothing if the input vector is of length\
    \ 18.\nThe function should return nothing if the input vector is of length 19.\n\
    The function should return nothing if the input vector is of length 20.\nThe function\
    \ should return nothing if the input vector is of length 21.\nThe function should\
    \ return nothing if the input vector is of length 22.\nThe function should return\
    \ nothing if the input vector is of length 23.\nThe function should return nothing\
    \ if the input vector is of length 24.\nThe function should return nothing if\
    \ the input vector is of length 25.\nThe function should return nothing if the\
    \ input vector is of length 26.\nThe function should return nothing if the input\
    \ vector is of length 27.\nThe function should return nothing if the input vector\
    \ is of length 28.\nThe function should return nothing if the input vector is\
    \ of length 29.\nThe function should return nothing if the input vector is of\
    \ length 30.\nThe function should return nothing if the input vector is of length\
    \ 31.\nThe function should return nothing if the input \nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8e10c6ge.jl:13\nin expression starting at\
    \ /tmp/tmp8e10c6ge.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = prod(numbers)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpihpp9krm.jl:13\nin expression starting at\
    \ /tmp/tmpihpp9krm.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for i in numbers\n        sum_ = sum_ + i\n        product_\
    \ = product_ * i\n    return (sum_, product_)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjpids08v.jl:16\nin expression starting at\
    \ /tmp/tmpjpids08v.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_product = numbers[1]\n\
    \        prod_product = 1\n        for i in numbers[2:end]\n            sum_product\
    \ += i\n            prod_product *= i\n        return (sum_product, prod_product)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3,4,5]) == (15, 120)\n@assert sum_product([1,2])\
    \ == (3, 2)\n@assert sum_product([1,2]) == (3, 2)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3,4,5]) == (15, 120)\n@assert sum_product([1,2])\
    \ == (3, 2)\n@assert sum_product([1,2]) == (3, 2)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3,4,5]) == (15, 120)\n@assert sum_product([1,2])\
    \ == (3, 2)\n@assert sum_product([1,2]) == (3, 2)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3,4,5]) == (15, 120)\n@assert sum_product([1,2])\
    \ == (3, 2)\n@assert sum_product([1,2]) == (3, 2)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3,4,5]) == (15, 120)\n@assert sum_product([1,2])\
    \ == (3, 2)\n@assert sum_product([1,2]) == (3, 2)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3,4,5]) == (15, 120)\n@assert sum_product([1,2])\
    \ == (3, 2)\n@assert sum_product([1,2]) == (3, 2)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3,4,5]) == (15, 120)\n@assert sum_product([1,2])\
    \ == (3, 2)\n@assert sum_product([1,2]) == (3, 2)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3,4,5]) == (15, 120)\n@assert sum_product([1,2])\
    \ == (3, 2)\n@assert sum_product([1,2]) == (3, 2)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3,4,5]) == (15, 120)\n@assert sum_product([1,2])\
    \ == (3, 2)\n@assert sum_product([1,2]) == (3, 2)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuyvnf2mr.jl:20\nin expression starting at\
    \ /tmp/tmpuyvnf2mr.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = reduce(mul, numbers, 1)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplw4geb7k.jl:13\nin expression starting at\
    \ /tmp/tmplw4geb7k.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_product = numbers[1] +\
    \ numbers[2] \n        product = 1\n        for i in numbers[2:end] \n       \
    \     product *= i \n        return (sum_product, product) \nend\n</cell>\n<code\
    \ language=julia-1.3>\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwjf7i1zj.jl:18\nin expression starting at\
    \ /tmp/tmpwjf7i1zj.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_product = numbers[1]\n\
    \        product_of_numbers = numbers[1]\n        for i in 2:length(numbers) \n\
    \            sum_product = sum_product + numbers[i]\n            product_of_numbers\
    \ = product_of_numbers * numbers[i]\n        end\n        return (sum_product,\
    \ product_of_numbers)\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.\n    >>> square_sum([])\n\
    \    0.0\n    >>> square_sum([1, 2, 3, 4])\n    25.0\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphoxp9dot.jl:21\nin expression starting at\
    \ /tmp/tmphoxp9dot.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for n in numbers\n        sum_ = sum_ + n\n        product_\
    \ = product_ * n\n    return (sum_, product_)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns a vector of integers consisting of the product\
    \ of all the integers in the vector.\n    Empty product should be equal to 1.\n\
    \    >>> product_vector([])\n    [1]\n    >>> product_vector([1,2,3])\n    [1,2,6]\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzs3d2j8u.jl:16\nin expression starting at\
    \ /tmp/tmpzs3d2j8u.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_ = sum(numbers) \n   \
    \     prod_ = 1\n        for i in numbers \n            prod_ *= i \n        return\
    \ (sum_, prod_) \nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwy3ztx58.jl:18\nin expression starting at\
    \ /tmp/tmpwy3ztx58.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum = Int64(0)\n\
    \    prod = Int64(1)\n    for n in numbers\n        sum += n\n        prod *=\
    \ n\n    return (sum, prod)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the squares\
    \ of the numbers in a vector. \nThe function should work for both real and complex\
    \ numbers.\nThe function should work for vectors of any length.\nThe function\
    \ should work for vectors of any type of numbers.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7awx9ds_.jl:16\nin expression starting at\
    \ /tmp/tmp7awx9ds_.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for number in numbers\n        sum_ = sum_ + number\n   \
    \     product_ = product_ * number\n    end\n    return (sum_, product_)\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a vector of integers\
    \ and returns the sum of the integers squared. \nFor example, if the input vector\
    \ is [4, 6, 2, 3], the output should be 24.\nThe function should work for vectors\
    \ of any length.\nThe function should work for both positive and negative integers.\n\
    The function should work for both signed and unsigned integers.\nThe function\
    \ should work for both signed and unsigned integers.\nThe function should work\
    \ for both signed and unsigned integers.\nThe function should work for both signed\
    \ and unsigned integers.\nThe function should work for both signed and unsigned\
    \ integers.\nThe function should work for both signed and unsigned integers.\n\
    The function should work for both signed and unsigned integers.\nThe function\
    \ should work for both signed and unsigned integers.\nThe function should work\
    \ for both signed and unsigned integers.\nThe function should work for both signed\
    \ and unsigned integers.\nThe function should work for both signed and unsigned\
    \ integers.\nThe function should work for both signed and unsigned integers.\n\
    The function should work for both signed and unsigned integers.\nThe function\
    \ should work for both signed and unsigned integers.\nThe function should work\
    \ for both signed and unsigned integers.\nThe function should work for both signed\
    \ and unsigned integers.\nThe function should work for both signed and unsigned\
    \ integers.\nThe function should work for both signed and unsigned integers.\n\
    The function should work for both signed and unsigned integers.\nThe function\
    \ should work for both signed and unsigned integers.\nThe function should work\
    \ for both signed and unsigned integers.\nThe function should work for both signed\
    \ and unsigned integers.\nThe function should work for both signed and unsigned\
    \ integers.\nThe function should work for both signed and unsigned integers.\n\
    The function should work for both signed and unsigned integers.\nThe function\
    \ should work for both signed and unsigned integers.\nThe function should work\
    \ for both signed and unsigned integers.\nThe function should work for both signed\
    \ and unsigned integers.\nThe function should work for both signed and unsigned\
    \ integers.\nThe function should work for both signed and unsigned integers.\n\
    The function should work for both signed and unsigned integers.\nThe function\
    \ should work for both signed and unsigned integers.\nThe function should work\
    \ for both signed and unsigned integers.\nThe function should work for both signed\
    \ and unsigned integers.\nThe function should work for both signed and unsigned\
    \ integers.\nThe function should work for both signed and unsigned integers.\n\
    The function should work for both signed and unsigned integers.\nThe function\
    \ should work for both signed \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpei2u78eb.jl:17\nin expression starting at\
    \ /tmp/tmpei2u78eb.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_ = numbers[1]\n      \
    \  prod_ = 1\n        for i in numbers[2:end] \n            sum_ += i \n     \
    \       prod_ *= i \n        return (sum_, prod_)\nend\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns the sum of the squares of the integers in the\
    \ vector.\n    >>> square_sum([])\n    0.0\n    >>> square_sum([1, 2, 3, 4])\n\
    \    25.0\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqm0jjhct.jl:19\nin expression starting at\
    \ /tmp/tmpqm0jjhct.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = prod(numbers)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<code language=julia-1.0>\n@time sum_product([1,2,3,4,5])\n\
    </cell>\n<code language=julia-1.0>\n@time sum_product([1,2,3,4,5])\n</cell>\n\
    <code language=julia-1.0>\n@time sum_product([1,2,3,4,5])\n</cell>\n<code language=julia-1.0>\n\
    @time sum_product([1,2,3,4,5])\n</cell>\n<code language=julia-1.0>\n@time sum_product([1,2,3,4,5])\n\
    </cell>\n<code language=julia-1.0>\n@time sum_product([1,2,3,4,5])\n</cell>\n\
    <code language=julia-1.0>\n@time sum_product([1,2,3,4,5])\n</cell>\n<code language=julia-1.0>\n\
    @time sum_product([1,2,3,4,5])\n</cell>\n<code language=julia-1.0>\n@time sum_product([1,2,3,4,5])\n\
    </cell>\n<code language=julia-1.0>\n@time sum_product([1,2,3,4,5])\n</cell>\n\
    <code language=julia-1.0>\n@time sum_product([1,2,3,4,5])\n</cell>\n<code language=julia-1.0>\n\
    @time sum_product([1,2,3,4,5])\n</cell>\n<code language=julia-1.0>\n@time sum_product([1,2,3,4,5])\n\
    </cell>\n<code language=julia-1.0>\n@time sum_product([1,2,3,4,5])\n</cell>\n\
    <code language=julia-1.0>\n@time sum_product([1,2,3,4,5])\n</cell>\n<code language=julia-1.0>\n\
    @time sum_product([1,2,3,4,5])\n</cell>\n<code language=julia-1.0>\n@time sum_product([1,2,3,4,5])\n\
    </cell>\n<code language=julia-1.0>\n@time sum_product([1,2,3,4,5])\n</cell>\n\
    <code language=julia-1.0>\n@time sum_product([1,2,3,4,5])\n</cell>\n<code language=julia-1.0>\n\
    @time sum_product([1,2,3,4,5])\n</cell>\n<code language=julia-1.0>\n@time sum_product([1,2,3,4,5])\n\
    </cell>\n<code language=julia-1.0>\n@time sum_product([1,2,3,4,5])\n</cell>\n\
    <code language=julia-1.0>\n@time sum_product([1,2,3,4,5])\n</cell>\n<code language=julia-1.0>\n\
    @time sum_product([1,2,3,4,5])\n</cell>\n<code language=julia-1.0>\n@time sum_product([1,2,3,4,5])\n\
    </cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnmuq0kyc.jl:13\nin expression starting at\
    \ /tmp/tmpnmuq0kyc.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum = 0\n   \
    \ product = 1\n    for i in numbers\n        sum += i\n        product *= i\n\
    \    return (sum, product)\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the sum of the squares of the integers in a vector.\n    >>> sum_of_squares([4,\
    \ 9, 16])\n    49\n    >>> sum_of_squares([-4, 9, 16])\n    49\n    >>> sum_of_squares([4,\
    \ -9, 16])\n    49\n    >>> sum_of_squares([-4, -9, 16])\n    49\n    >>> sum_of_squares([4,\
    \ 9, -16, -2])\n    49\n    >>> sum_of_squares([4, 9, 16, -2])\n    49\n    >>>\
    \ sum_of_squares([-4, 9, -16, -2])\n    49\n    >>> sum_of_squares([-4, -9, -16,\
    \ -2])\n    49\n    >>> sum_of_squares([4, 9, 16, -2, -4])\n    49\n    >>> sum_of_squares([4,\
    \ 9, -16, -2, -4])\n    49\n    >>> sum_of_squares([-4, 9, -16, -2, -4])\n   \
    \ 49\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t\
    @test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1]) ==\
    \ (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3, 5,\
    \ 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzpi7jgcf.jl:16\nin expression starting at\
    \ /tmp/tmpzpi7jgcf.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = numbers[0]\n\
    \    product_ = 1\n    for number in numbers\n        sum_ += number\n       \
    \ product_ *= number\n    return (sum_, product_)\nend\n</cell>\n<code language=julia-1.4>\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv4_688ek.jl:16\nin expression starting at\
    \ /tmp/tmpv4_688ek.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = prod(numbers)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpch1s2zh0.jl:13\nin expression starting at\
    \ /tmp/tmpch1s2zh0.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_product = numbers[1] +\
    \ numbers[length(numbers)] \n        return (sum_product, numbers[1] * numbers[length(numbers)])\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert \nusing Test\n\n\
    @testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1zzkj4q6.jl:16\nin expression starting at\
    \ /tmp/tmp1zzkj4q6.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for number in numbers\n        sum_ = sum_ + number\n   \
    \     product_ = product_ * number\n    end\n    return (sum_, product_)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the squares of the numbers\
    \ in a vector.\n    >>> sum_of_squares([4, 9, 16, 25])\n    490\n    >>> sum_of_squares([-1,\
    \ 0, 1, 2, 3])\n    -1\n    >>> sum_of_squares([-4, -3, -2, -1, 0, 1, 2, 3])\n\
    \    -1\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpug77fw40.jl:17\nin expression starting at\
    \ /tmp/tmpug77fw40.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_product = 1\n    for number in numbers\n        product_product\
    \ *= number\n    end\n    return (sum_product, product_product)\nend\n</cell>\n\
    <code language=julia-1.3>\n@assert sum_product([1, 2, 3]) == 10\n@assert sum_product([-1,\
    \ -2, -3]) == -1\n@assert sum_product([-1, 1, -3]) == -1\n@assert sum_product([-1,\
    \ 1, -3]) == -1\n@assert sum_product([-1, 1, -3]) == -1\n@assert sum_product([-1,\
    \ 1, -3]) == -1\n@assert sum_product([-1, 1, -3]) == -1\n@assert sum_product([-1,\
    \ 1, -3]) == -1\n@assert sum_product([-1, 1, -3]) == -1\n@assert sum_product([-1,\
    \ 1, -3]) == -1\n@assert sum_product([-1, 1, -3]) == -1\n@assert sum_product([-1,\
    \ 1, -3]) == -1\n@assert sum_product([-1, 1, -3]) == -1\n@assert sum_product([-1,\
    \ 1, -3]) == -1\n@assert sum_product([-1, 1, -3]) == -1\n@assert sum_product([-1,\
    \ 1, -3]) == -1\n@assert sum_product([-1, 1, -3]) == -1\n@assert sum_product([-1,\
    \ 1, -3]) == -1\n@assert sum_product([-1, 1, -3]) == -1\n@assert sum_product([-1,\
    \ 1, -3]) == -1\n@assert sum_product([-1, 1, -3]) == -1\n@assert sum_product([-1,\
    \ 1, -3]) == -1\n@assert sum_product([-1, 1, -3]) == -1\n@assert sum_product([-1,\
    \ 1, -3]) == -1\n@assert sum_product([-1, 1, -3]) == -1\n@assert sum_product([-1,\
    \ 1, -3]) == -1\n@assert sum_product([-1, 1, -3]) == -1\n@assert sum_product([-1,\
    \ 1, -3]) == -1\n@assert sum_product([-1, 1, -3]) == -1\n@assert sum_product([-1,\
    \ 1, -3]) == -1\n@assert sum_product([-1, 1, -3]) == -1\n@assert sum_product([-1,\
    \ 1, -3]) == -1\n@assert sum_product([-1, 1, -3]) == -1\n@assert sum_product([-1,\
    \ 1, -3]) == -1\n@assert sum_product([-1, 1, -3]) == -1\n@assert sum_product([-1,\
    \ 1, -3]) == -1\n@assert sum_product([-1, 1, -3]) == -1\n@assert sum_product([-1,\
    \ 1, -3]) == -1\n@assert sum_product([-1, 1, -3]) == -1\n@\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwkfkubz0.jl:16\nin expression starting at\
    \ /tmp/tmpwkfkubz0.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_product = 1\n    for n in numbers\n        product_product\
    \ *= n\n    return (sum_product, product_product)\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the squares of the numbers in a vector.\n    >>> sum_of_squares([4,\
    \ 9, 16])\n    49\n    >>> sum_of_squares([-1, 2, -3])\n    6\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsxd9eu2w.jl:15\nin expression starting at\
    \ /tmp/tmpsxd9eu2w.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ numbers[1]\n    product = 1\n    for i in numbers[2:end]\n        product *=\
    \ i\n        sum_product += i\n    return (sum_product, product)\nend\n</cell>\n\
    <code language=julia-1.0>\n@time sum_product([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the squares of the\
    \ numbers in a vector.\n    >>> sum_of_squares([1,2,3,4,5,6,7,8,9,10])\n    55\n\
    \    >>> sum_of_squares([-1,-2,-3,-4,-5,-6,-7,-8,-9,-10])\n    -10\n    >>> sum_of_squares([1,2,3,4,5])\n\
    \    25\n    >>> sum_of_squares([-10,-9,-8,-7,-6,-5,-4,-3,-2,-1])\n    -10\n \
    \   \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw6hgexfe.jl:16\nin expression starting at\
    \ /tmp/tmpw6hgexfe.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum = 0\n   \
    \ product = 1\n    for n in numbers\n        sum += n\n        product *= n\n\
    \    return (sum, product)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,\
    \ 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the squares of the numbers in a vector.\n    >>> sum_of_squares([4, 9, 16])\n\
    \    49\n    >>> sum_of_squares([-1, 0, 1])\n    1\n    >>> sum_of_squares([-4,\
    \ 9, 16])\n    -1\n    >>> sum_of_squares([-4, 9, -16, 1])\n    -1\n    >>> sum_of_squares([-4,\
    \ 9, -16, 1, 0])\n    -1\n    >>> sum_of_squares([-4, 9, -16, 1, 0])\n    -1\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpudkmthlz.jl:16\nin expression starting at\
    \ /tmp/tmpudkmthlz.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for number in numbers\n        sum_ = sum_ + number\n   \
    \     product_ = product_ * number\n    return (sum_, product_)\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the integers in the vector.\nThe function should raise an error if\
    \ the vector is empty.\nThe function should raise an error if the vector contains\
    \ non-integer values.\nThe function should raise an error if the vector contains\
    \ negative values.\nThe function should raise an error if the vector contains\
    \ duplicate values.\nThe function should raise an error if the vector contains\
    \ negative values.\nThe function should raise an error if the vector contains\
    \ duplicate values.\nThe function should raise an error if the vector contains\
    \ negative values.\nThe function should raise an error if the vector contains\
    \ duplicate values.\nThe function should raise an error if the vector contains\
    \ negative values.\nThe function should raise an error if the vector contains\
    \ duplicate values.\nThe function should raise an error if the vector contains\
    \ negative values.\nThe function should raise an error if the vector contains\
    \ duplicate values.\nThe function should raise an error if the vector contains\
    \ negative values.\nThe function should raise an error if the vector contains\
    \ duplicate values.\nThe function should raise an error if the vector contains\
    \ negative values.\nThe function should raise an error if the vector contains\
    \ duplicate values.\nThe function should raise an error if the vector contains\
    \ negative values.\nThe function should raise an error if the vector contains\
    \ duplicate values.\nThe function should raise an error if the vector contains\
    \ negative values.\nThe function should raise an error if the vector contains\
    \ duplicate values.\nThe function should raise an error if the vector contains\
    \ negative values.\nThe function should raise an error if the vector contains\
    \ duplicate values.\nThe function should raise an error if the vector contains\
    \ negative values.\nThe function should raise an error if the vector contains\
    \ duplicate values.\nThe function should raise an error if the vector contains\
    \ negative values.\nThe function should raise an error if the vector contains\
    \ duplicate values.\nThe function should raise an error if the vector contains\
    \ negative values.\nThe function should raise an error if the vector contains\
    \ duplicate values.\nThe function should raise an error if the vector contains\
    \ negative values.\nThe function should raise an error if the vector contains\
    \ duplicate values.\nThe function should raise an error if the vector contains\
    \ negative values.\nThe function should raise an error if the vector contains\
    \ duplicate values.\nThe function should raise an error if the vector contains\
    \ negative values.\nThe function should raise an error if the vector contains\
    \ duplicate values.\nThe function should raise an error if the vector contains\
    \ negative values.\nThe function should raise an error if the vector contains\
    \ duplicate values.\nThe function should raise an error if the vector contains\
    \ negative values.\nThe function should raise an error if the vector contains\
    \ duplicate values.\nThe function should raise an error if the vector contains\
    \ negative values.\nThe function should raise an error if the \nusing Test\n\n\
    @testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjmubs1oj.jl:16\nin expression starting at\
    \ /tmp/tmpjmubs1oj.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_product = numbers[1] +\
    \ numbers[length(numbers)-1]\n        return (sum_product, numbers[1] * numbers[length(numbers)-1])\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that takes a vector of integers\
    \ and a number $k$ and returns a vector of all the integers in the vector that\
    \ divide evenly into $k$. \nFor example, given $k = 3$ and $v = [1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10]$, the function should return $[5, 7, 9]$.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmporpojwop.jl:15\nin expression starting at\
    \ /tmp/tmporpojwop.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = reduce(mul, numbers, 1)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<code language=julia-1.4>\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpouh6fpmh.jl:13\nin expression starting at\
    \ /tmp/tmpouh6fpmh.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ numbers[1]\n    product = 1\n    for number in numbers[2:end]\n        sum_product\
    \ = sum_product + number\n        product = product * number\n    end\n    return\
    \ (sum_product, product)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the squares\
    \ of the integers in a vector.\n    >>> sum_of_squares([1,2,3,4,5])\n    25\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp44qy4ipf.jl:17\nin expression starting at\
    \ /tmp/tmp44qy4ipf.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = reduce(mul, numbers, 1)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.\n>>> sum_square_of_vector([1,2,3])\n\
    25\n>>> sum_square_of_vector([-3,-2,-1,0,1,2,3])\n0\n>>> sum_square_of_vector([1,-2,3,-4,5,6])\n\
    -25\n>>> sum_square_of_vector([1,-2,3,-4,5,6,7,-8])\n-25\n>>> sum_square_of_vector([1,-2,3,-4,5,6,7,-8,9])\n\
    -25\n>>> sum_square_of_vector([1,-2,3,-4,5,6,7,-8,9,10])\n-25\n>>> sum_square_of_vector([1,-2,3,-4,5,6,7,-8,9,10,11])\n\
    -25\n>>> sum_square_of_vector([1,-2,3,-4,5,6,7,-8,9,10,11,12])\n-25\n>>> sum_square_of_vector([1,-2,3,-4,5,6,7,-8,9,10,11,12,13])\n\
    -25\n>>> sum_square_of_vector([1,-2,3,-4,5,6,7,-8,9,10,11,12,13,14])\n-25\n>>>\
    \ sum_square_of_vector([1,-2,3,-4,5,6,7,-8,9,10,11,12,13,14,15])\n-25\n>>> sum_square_of_vector([1,-2,3,-4,5,6,7,-8,9,10,11,12,13,14,15,16])\n\
    -25\n>>> sum_square_of_vector([1,-2,3,-4,5,6,7,-8,9,10,11,12,13,14,15,16,17])\n\
    -25\n>>> sum_square_of_vector([1,-2,3,-4,5,6,7,-8,9,10,11,12,13,14,15,16,17,18])\n\
    -25\n>>> sum_square_of_vector([1,-2,3,-4,5,6,7,-8,9,10,11,12,13,14,15,16,17,18,19])\n\
    -25\n>>> sum_square_of_vector([1,-2,3,-4,5,6,7,-8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    -25\n>>> sum_square_of_vector([1,-2,3,-4,5,6,7,-8,9,10,11,12,13,14,15,16,17,18,19,20,2\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp77t2lx5z.jl:13\nin expression starting at\
    \ /tmp/tmp77t2lx5z.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum = zero(Int64)\n\
    \    product = one(Int64)\n    for number in numbers\n        sum += number\n\
    \        product *= number\n    return (sum, product)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of elements in a vector that are less than a given value.\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd1y7vm0e.jl:16\nin expression starting at\
    \ /tmp/tmpd1y7vm0e.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = prod(numbers)\n    return sum_product,\
    \ product_of_numbers\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ takes in a vector of integers and returns the sum of the squares of the integers\
    \ in the vector.\nThe sum of the squares should be equal to the sum of the squares\
    \ of the integers in the vector.\nThe function should return nothing if there\
    \ are no integers in the vector.\nThe function should raise an error if the vector\
    \ is empty.\nThe function should raise an error if the vector has only one integer.\n\
    The function should raise an error if the vector has more than one integer.\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp6gxkv3t.jl:13\nin expression starting at\
    \ /tmp/tmpp6gxkv3t.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for number in numbers\n        sum_ = sum_ + number\n   \
    \     product_ = product_ * number\n    return (sum_, product_)\nend\n</cell>\n\
    <code language=julia-1.3>\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdv294t_j.jl:16\nin expression starting at\
    \ /tmp/tmpdv294t_j.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for number in numbers\n        sum_ = sum_ + number\n   \
    \     product_ = product_ * number\n    end\n    return (sum_, product_)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of elements in a vector that\
    \ are less than a given value.\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5dovqnxj.jl:17\nin expression starting at\
    \ /tmp/tmp5dovqnxj.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_product = numbers[1] +\
    \ numbers[2] \n        product = numbers[1] * numbers[2] \n        return (sum_product,\
    \ product) \nend\n</cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the squares\
    \ of the numbers in a vector.\n    >>> sum_of_squares([4, 9, 16])\n    49\n  \
    \  >>> sum_of_squares([-4, 9, 16])\n    -1\n    >>> sum_of_squares([4, 9, -16,\
    \ -21])\n    49\n    >>> sum_of_squares([-4, 9, -16, -21])\n    -1\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn8g527dk.jl:16\nin expression starting at\
    \ /tmp/tmpn8g527dk.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = reduce(mul, numbers, 1)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the squares of the integers in a vector.\n    >>> sum_of_squares([4,\
    \ 9, 16, 25])\n    490\n    >>> sum_of_squares([-1, 0, 1, 2, 3, 4])\n    Traceback\
    \ (most recent call last):\n    ...\n    AssertionError: Sum of squares does not\
    \ equal zero\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4obvzjc_.jl:13\nin expression starting at\
    \ /tmp/tmp4obvzjc_.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = numbers[1]\n\
    \    prod = numbers[1]\n    for n in numbers[2:end]\n        sum_ = sum_ + n\n\
    \        prod = prod * n\n    end\n    return (sum_, prod)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3,4,5])\
    \ == (15, 10)\n@assert sum_product([1,2]) == (1, 2)\n@assert sum_product([1,2])\
    \ == (1, 2)\n@assert sum_product([1,2]) == (1, 2)\n@assert sum_product([1,2])\
    \ == (1, 2)\n@assert sum_product([1,2]) == (1, 2)\n@assert sum_product([1,2])\
    \ == (1, 2)\n@assert sum_product([1,2]) == (1, 2)\n@assert sum_product([1,2])\
    \ == (1, 2)\n@assert sum_product([1,2]) == (1, 2)\n@assert sum_product([1,2])\
    \ == (1, 2)\n@assert sum_product([1,2]) == (1, 2)\n@assert sum_product([1,2])\
    \ == (1, 2)\n@assert sum_product([1,2]) == (1, 2)\n@assert sum_product([1,2])\
    \ == (1, 2)\n@assert sum_product([1,2]) == (1, 2)\n@assert sum_product([1,2])\
    \ == (1, 2)\n@assert sum_product([1,2]) == (1, 2)\n@assert sum_product([1,2])\
    \ == (1, 2)\n@assert sum_product([1,2]) == (1, 2)\n@assert sum_product([1,2])\
    \ == (1, 2)\n@assert sum_product([1,2]) == (1, 2)\n@assert sum_product([1,2])\
    \ == (1, 2)\n@assert sum_product([1,2]) == (1, 2)\n@assert sum_product([1,2])\
    \ == (1, 2)\n@assert sum_product([1,2]) == (1, 2)\n@assert sum_product([1,2])\
    \ == (1, 2)\n@assert sum_product([1,2]) == (1, 2)\n@assert sum_product([1,2])\
    \ == (1, 2)\n@assert sum_product([1,2]) == (1, 2)\n@assert sum_product([1,2])\
    \ == (1, 2)\n@assert sum_product([1,2]) == (1, 2)\n@assert sum_product([1,2])\
    \ == (1, 2)\n@assert sum_product([1,2]) == (1, 2)\n@assert sum_product([1,2])\
    \ == (1, 2)\n@assert sum_product([1,2]) == (1, 2)\n@assert sum_product([1,2])\
    \ == (1, 2)\n@assert sum_product([1,2]) == (1, 2)\n@assert sum_product([1,2])\
    \ == (1, 2)\n@assert sum_product([1,2]) == (1, 2)\n@assert sum_product([1,2])\
    \ == (1, 2)\n@assert sum_product([1,2]) == (1, 2)\n@assert sum_product([1,2])\
    \ == (1, 2)\n@assert sum_product([1,2]) == (1, 2)\n@assert sum_product([\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi2vxxaap.jl:17\nin expression starting at\
    \ /tmp/tmpi2vxxaap.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = reduce(mul, numbers, 1)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<code language=julia-1.0>\n@code_warntype\
    \ sum_product([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an integer vector and returns the sum of the squares of the integers in the\
    \ vector.\nThe function should work for both vectors of integers and vectors of\
    \ floating point numbers.\nThe function should work for both vectors of integers\
    \ and vectors of floating point numbers.\nThe function should work for both vectors\
    \ of integers and vectors of floating point numbers.\nThe function should work\
    \ for both vectors of integers and vectors of floating point numbers.\nThe function\
    \ should work for both vectors of integers and vectors of floating point numbers.\n\
    The function should work for both vectors of integers and vectors of floating\
    \ point numbers.\nThe function should work for both vectors of integers and vectors\
    \ of floating point numbers.\nThe function should work for both vectors of integers\
    \ and vectors of floating point numbers.\nThe function should work for both vectors\
    \ of integers and vectors of floating point numbers.\nThe function should work\
    \ for both vectors of integers and vectors of floating point numbers.\nThe function\
    \ should work for both vectors of integers and vectors of floating point numbers.\n\
    The function should work for both vectors of integers and vectors of floating\
    \ point numbers.\nThe function should work for both vectors of integers and vectors\
    \ of floating point numbers.\nThe function should work for both vectors of integers\
    \ and vectors of floating point numbers.\nThe function should work for both vectors\
    \ of integers and vectors of floating point numbers.\nThe function should work\
    \ for both vectors of integers and vectors of floating point numbers.\nThe function\
    \ should work for both vectors of integers and vectors of floating point numbers.\n\
    The function should work for both vectors of integers and vectors of floating\
    \ point numbers.\nThe function should work for both vectors of integers and vectors\
    \ of floating point numbers.\nThe function should work for both vectors of integers\
    \ and vectors of floating point numbers.\nThe function should work for both vectors\
    \ of integers and vectors of floating point numbers.\nThe function should work\
    \ for both vectors of integers and vectors of floating point numbers.\nThe function\
    \ should work for both vectors of integers and vectors of floating point numbers.\n\
    The function should work for both vectors of integers and vectors of floating\
    \ point numbers.\nThe function should work for both vectors of integers and vectors\
    \ of floating point numbers.\nThe function should work for both vectors of integers\
    \ and vectors of floating point numbers.\nThe function should work for both vectors\
    \ of integers and vectors of floating point numbers.\nThe function should work\
    \ for both vectors of integers and vectors of floating point numbers.\nThe function\
    \ should work for both vectors of integers and vectors of floating point numbers.\n\
    The function should work for both vectors of integers and vectors of floating\
    \ point numbers.\nThe function should work for both vectors of integers and vectors\
    \ of floating point numbers.\n\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprsqtm783.jl:13\nin expression starting at\
    \ /tmp/tmprsqtm783.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for number in numbers\n        sum_ = sum_ + number\n   \
    \     product_ = product_ * number\n    return (sum_, product_)\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a vector of integers and returns\
    \ the sum of the squares of the integers in the vector.\nThe sum of the squares\
    \ should be equal to the sum of the integers in the vector.\nThe function should\
    \ raise an error if the vector is empty.\nThe function should raise an error if\
    \ the vector contains non-integer values.\nThe function should raise an error\
    \ if the vector contains negative values.\nThe function should raise an error\
    \ if the vector contains values greater than the square root of the largest value\
    \ in the vector.\nThe function should raise an error if the vector contains values\
    \ less than the smallest value in the vector.\nThe function should raise an error\
    \ if the vector contains duplicate values.\nThe function should raise an error\
    \ if the vector contains negative values.\nThe function should raise an error\
    \ if the vector contains values greater than the square root of the largest value\
    \ in the vector.\nThe function should raise an error if the vector contains values\
    \ less than the smallest value in the vector.\nThe function should raise an error\
    \ if the vector contains duplicate values.\nThe function should raise an error\
    \ if the vector contains negative values.\nThe function should raise an error\
    \ if the vector contains values greater than the square root of the largest value\
    \ in the vector.\nThe function should raise an error if the vector contains values\
    \ less than the smallest value in the vector.\nThe function should raise an error\
    \ if the vector contains duplicate values.\nThe function should raise an error\
    \ if the vector contains negative values.\nThe function should raise an error\
    \ if the vector contains values greater than the square root of the largest value\
    \ in the vector.\nThe function should raise an error if the vector contains values\
    \ less than the smallest value in the vector.\nThe function should raise an error\
    \ if the vector contains duplicate values.\nThe function should raise an error\
    \ if the vector contains negative values.\nThe function should raise an error\
    \ if the vector contains values greater than the square root of the largest value\
    \ in the vector.\nThe function should raise an error if the vector contains values\
    \ less than the smallest value in the vector.\nThe function should raise an error\
    \ if the vector contains duplicate values.\nThe function should raise an error\
    \ if the vector contains negative values.\nThe function should raise an error\
    \ if the vector contains values greater than the square root of the largest value\
    \ in the vector.\nThe function should raise an error if the vector contains values\
    \ less than the smallest value in the vector.\nThe function should raise an error\
    \ if the vector contains duplicate values.\nThe function should raise an error\
    \ if the vector contains negative values.\nThe function should raise an error\
    \ if the vector contains values greater than the square root of the largest value\
    \ in the vector.\nThe function should raise an error if the vector contains values\
    \ less than the smallest value in the vector.\nThe function should raise an error\
    \ if the vector contains duplicate values.\nThe function should raise an error\
    \ if the vector contains negative values.\nThe function should raise an error\
    \ if the vector contains values greater than the square root of the largest value\
    \ in the vector.\nThe function should \nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp959yltzr.jl:16\nin expression starting at\
    \ /tmp/tmp959yltzr.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_product = numbers[1]\n\
    \        product_of_numbers = numbers[1]\n        for number in numbers[2:end]\
    \ \n            sum_product = sum_product + number\n            product_of_numbers\
    \ = product_of_numbers * number\n        end\n        return (sum_product, product_of_numbers)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, \nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpun8my0vm.jl:21\nin expression starting at\
    \ /tmp/tmpun8my0vm.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_product = numbers[1]\n\
    \        product = 1\n        for i in numbers[2:end]\n            product = product\
    \ * i\n            sum_product = sum_product + product\n        return (sum_product,\
    \ product)\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb4kvl6or.jl:19\nin expression starting at\
    \ /tmp/tmpb4kvl6or.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for number in numbers\n        sum_ = sum_ + number\n   \
    \     product_ = product_ * number\n    end\n    return (sum_, product_)\nend\n\
    </cell>\n<code language=julia-1.4>\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgkmw4496.jl:17\nin expression starting at\
    \ /tmp/tmpgkmw4496.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_ = sum(numbers) \n   \
    \     prod_ = 1\n        for i in numbers \n            prod_ *= i \n        return\
    \ (sum_, prod_) \nend\n</cell>\n<code language=julia-1.5>\nsum_product([1, 2,\
    \ 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of\
    \ the squares of the integers in a given vector.\n    >>> sum_square_of_vector([1,\
    \ 2, 3, 4])\n    25\n    >>> sum_square_of_vector([-1, -2, -3, -4])\n    25\n\
    \    >>> sum_square_of_vector([-1, -2, -3, -4, -5])\n    25\n    >>> sum_square_of_vector([-1,\
    \ -2, -3, -4, -5, -6])\n    25\n    >>> sum_square_of_vector([-1, -2, -3, -4,\
    \ -5, -6, -7])\n    25\n    >>> sum_square_of_vector([-1, -2, -3, -4, -5, -6,\
    \ -7, -8])\n    25\n    >>> sum_square_of_vector([-1, -2, -3, -4, -5, -6, -7,\
    \ -8, -9])\n    25\n    >>> sum_square_of_vector([-1, -2, -3, -4, -5, -6, -7,\
    \ -8, -9, -10])\n    25\n    >>> sum_square_of_vector([-1, -2, -3, -4, -5, -6,\
    \ -7, -8, -9, -10, -11])\n    25\n    >>> sum_square_of_vector([-1, -2, -3, -4,\
    \ -5, -6, -7, -8, -9, -10, -11, -12])\n    25\n    >>> sum_square_of_vector([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13])\n    25\n    >>> sum_square_of_vector([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14])\n    25\n    >>> sum_square_of_vector([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15])\n    25\n   \
    \ >>> sum_square_of_vector([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12,\
    \ -13, -14, -15, -16])\n    25\n    >>> sum_square_of_vector([-1, -2, -3, -4,\
    \ -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17])\n    25\n    >>>\
    \ sum_square_of_vector([-1, -2, -3, -4, -5, -6, -7, -8, -9, -\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_x7zx78i.jl:18\nin expression starting at\
    \ /tmp/tmp_x7zx78i.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_product = numbers[1] +\
    \ numbers[2]\n        product_product = 1\n        for i in numbers[2:end]\n \
    \           product_product *= i\n        return (sum_product, product_product)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes an array of integers\
    \ and returns the sum of the squares of the integers in the array.\nThe function\
    \ should work for arrays of any size.\nThe function should work for both positive\
    \ and negative numbers.\nThe function should work for arrays of any type.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwzirdw30.jl:19\nin expression starting at\
    \ /tmp/tmpwzirdw30.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_ = numbers[1]\n      \
    \  product_ = 1\n        for i in 2:length(numbers) \n            sum_ += numbers[i]\n\
    \            product_ *= i\n        end\n        return (sum_, product_)\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3]) ==\
    \ (6, 3)\n@assert sum_product([1,2,3,4,5]) == (15, 120)\n@assert sum_product([1,2,3,4,5,6,7,8,9,10])\
    \ == (120, 3628800)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the squares of the integers in a given vector.\nThe function should\
    \ work for both vectors of integers and vectors of floating point numbers.\nThe\
    \ function should work for both empty vectors and vectors with at least one element.\n\
    The function should work for vectors of any length.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdr2ophiw.jl:21\nin expression starting at\
    \ /tmp/tmpdr2ophiw.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ zeros(Int64, 2)\n    sum_product[1] = numbers[1]\n    sum_product[2] = numbers[2]\n\
    \    for i in 3:length(numbers)\n        sum_product[i] = numbers[i] + sum_product[i-1]\n\
    \    end\n    return sum_product\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,\
    \ 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the squares of the numbers in a vector.\n    >>> sum_square_of_numbers([1,\
    \ 2, 3, 4])\n    25\n    >>> sum_square_of_numbers([-1, -2, -3, -4])\n    25\n\
    \    >>> sum_square_of_numbers([1, 2, -3, 4])\n    25\n    >>> sum_square_of_numbers([])\n\
    \    0\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbcyqcz2r.jl:17\nin expression starting at\
    \ /tmp/tmpbcyqcz2r.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ zeros(Int64, 2)\n    sum_product[1] = numbers[1]\n    sum_product[2] = numbers[2]\n\
    \    for i in 3:length(numbers)\n        sum_product[i] = numbers[i] + sum_product[i-1]\n\
    \    end\n    return sum_product\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,\
    \ 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a vector\
    \ of integers and returns the sum of the squares of the integers in the vector.\n\
    >>> sum_square_of_vector([1, 2, 3, 4])\n25\n>>> sum_square_of_vector([-1, -2,\
    \ -3, 4])\n25\n>>> sum_square_of_vector([-1, -2, -3, -4, -5, -6])\n25\n>>> sum_square_of_vector([-1,\
    \ -2, -3, -4, -5, -6, -7, -8])\n25\n>>> sum_square_of_vector([-1, -2, -3, -4,\
    \ -5, -6, -7, -8, -9, -10])\n25\n>>> sum_square_of_vector([-1, -2, -3, -4, -5,\
    \ -6, -7, -8, -9, -10, -11])\n25\n>>> sum_square_of_vector([-1, -2, -3, -4, -5,\
    \ -6, -7, -8, -9, -10, -11, -12])\n25\n>>> sum_square_of_vector([-1, -2, -3, -4,\
    \ -5, -6, -7, -8, -9, -10, -11, -12, -13])\n25\n>>> sum_square_of_vector([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14])\n25\n>>> sum_square_of_vector([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15])\n25\n>>> sum_square_of_vector([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16])\n25\n>>>\
    \ sum_square_of_vector([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13,\
    \ -14, -15, -16, -17])\n25\n>>> sum_square_of_vector([-1, -2, -3, -4, -5, -6,\
    \ -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18])\n25\n>>> sum_square_of_vector([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18,\
    \ -19])\n25\n>>> sum\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe25fy02i.jl:17\nin expression starting at\
    \ /tmp/tmpe25fy02i.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = prod(numbers)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,\
    \ 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the squares of the numbers in a vector.\n    >>> sum_of_squares([4, 9, 16,\
    \ 25])\n    490\n    >>> sum_of_squares([-1, 0, 1])\n    1\n    >>> sum_of_squares([-4,\
    \ -9])\n    81\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptflcbmuf.jl:13\nin expression starting at\
    \ /tmp/tmptflcbmuf.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for n in numbers\n        sum_ = sum_ + n\n        product_\
    \ = product_ * n\n    return (sum_, product_)\nend\n</cell>\n<code language=julia-1.4>\n\
    @assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([-1, -2, -3]) ==\
    \ (0, 6)\n@assert sum_product([-1, -2, -3, -4]) == (0, 24)\n@assert sum_product([-1,\
    \ -2, -3, -4, -5]) == (0, 120)\n@assert sum_product([-1, -2, -3, -4, -5, -6])\
    \ == (0, 720)\n@assert sum_product([-1, -2, -3, -4, -5, -6, -7]) == (0, 5040)\n\
    @assert sum_product([-1, -2, -3, -4, -5, -6, -7, -8]) == (0, 40320)\n@assert sum_product([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9]) == (0, 362880)\n@assert sum_product([-1, -2,\
    \ -3, -4, -5, -6, -7, -8, -9, -10]) == (0, 3628800)\n@assert sum_product([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9, -10, -11]) == (0, 39916800)\n@assert sum_product([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12]) == (0, 479001600)\n@assert sum_product([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13]) == (0, 6227020800)\n@assert\
    \ sum_product([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14]) ==\
    \ (0, 87178291200)\n@assert sum_product([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10,\
    \ -11, -12, -13, -14, -15]) == (0, 13076741600)\n@assert sum_product([-1, -2,\
    \ -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16]) == (0, 2092278988800)\n\
    @assert sum_product([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14,\
    \ -15, -16, -17]) == (0, 35568742809600)\n@assert sum_product([-1, -2, -3, -4,\
    \ -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg_vdccjj.jl:16\nin expression starting at\
    \ /tmp/tmpg_vdccjj.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum = 0\n   \
    \ product = 1\n    for number in numbers\n        sum = sum + number\n       \
    \ product = product * number\n    end\n    return (sum, product)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns a vector of\
    \ sums and products of all the integers in the vector.\nThe sums and products\
    \ should be returned in a tuple.\nThe function should also return an empty vector\
    \ if the input vector is empty.\nThe function should also return an error if the\
    \ input vector contains non-numeric values.\nThe function should also return an\
    \ error if the input vector contains duplicate values.\nThe function should also\
    \ return an error if the input vector contains negative values.\nThe function\
    \ should also return an error if the input vector contains non-integer values.\n\
    The function should also return an error if the input vector contains negative\
    \ values.\nThe function should also return an error if the input vector contains\
    \ non-integer values.\nThe function should also return an error if the input vector\
    \ contains negative values.\nThe function should also return an error if the input\
    \ vector contains non-integer values.\nThe function should also return an error\
    \ if the input vector contains negative values.\nThe function should also return\
    \ an error if the input vector contains non-integer values.\nThe function should\
    \ also return an error if the input vector contains negative values.\nThe function\
    \ should also return an error if the input vector contains non-integer values.\n\
    The function should also return an error if the input vector contains negative\
    \ values.\nThe function should also return an error if the input vector contains\
    \ non-integer values.\nThe function should also return an error if the input vector\
    \ contains negative values.\nThe function should also return an error if the input\
    \ vector contains non-integer values.\nThe function should also return an error\
    \ if the input vector contains negative values.\nThe function should also return\
    \ an error if the input vector contains non-integer values.\nThe function should\
    \ also return an error if the input vector contains negative values.\nThe function\
    \ should also return an error if the input vector contains non-integer values.\n\
    The function should also return an error if the input vector contains negative\
    \ values.\nThe function should also return an error if the input vector contains\
    \ non-integer values.\nThe function should also return an error if the input vector\
    \ contains negative values.\nThe function should also return an error if the input\
    \ vector contains non-integer values.\nThe function should also return an error\
    \ if the input vector contains negative values.\nThe function should also return\
    \ an error if the input vector contains non-integer values.\nThe function should\
    \ also return an error if the input vector contains negative values.\nThe function\
    \ should also return an error if the input vector contains non-integer values.\n\
    The function should also return an error if the input vector contains negative\
    \ values.\nThe function should also return an error if the input vector contains\
    \ non-integer values.\nThe function should also return \nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn5lgwnow.jl:17\nin expression starting at\
    \ /tmp/tmpn5lgwnow.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for n in numbers\n        sum_ = sum_ + n\n        product_\
    \ = product_ * n\n    return (sum_, product_)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpb49ax3f9.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb49ax3f9.jl:1\n\
    in expression starting at /tmp/tmpb49ax3f9.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for n in numbers\n        sum_ = sum_ + n\n        product_\
    \ = product_ * n\n    return (sum_, product_)\nend\n</cell>\n<code language=julia-1.3>\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpta1mjy41.jl:16\nin expression starting at\
    \ /tmp/tmpta1mjy41.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for n in numbers\n        sum_ += n\n        product_ *=\
    \ n\n    return (sum_, product_)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,\
    \ 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns a vector of integers containing the square of all the\
    \ integers in the vector.\nFor example, if the input vector is [4, 6, 9, 12],\
    \ then the output vector should be [16, 36, 49, 64].\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5b4bev0n.jl:16\nin expression starting at\
    \ /tmp/tmp5b4bev0n.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = reduce(mul, numbers, 1)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ugu90nw.jl:13\nin expression starting at\
    \ /tmp/tmp_ugu90nw.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_product = numbers[1] +\
    \ numbers[2] \n        product_product = 1\n        for i in numbers[2:end] \n\
    \            product_product *= i \n        end\n        return (sum_product,\
    \ product_product) \n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a vector of integers and returns the sum of the squares of the integers\
    \ in the vector.\nThe sum of the squares should be equal to the sum of the squares\
    \ of the integers in the vector.\nThe function should work for both vectors of\
    \ integers and vectors of floating point numbers.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoq0pgel9.jl:20\nin expression starting at\
    \ /tmp/tmpoq0pgel9.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ zeros(Int64, 2)\n    sum_product[1] = numbers[1]\n    sum_product[2] = numbers[2]\n\
    \    for i in 3:length(numbers)\n        sum_product[i] = numbers[i] + sum_product[i-1]\n\
    \    end\n    return sum_product\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the sum of the squares of the integers\
    \ in the vector.\nThe function should raise an error if the vector is empty.\n\
    >>> sum_squares_vector([])\n0\n>>> sum_squares_vector([1, 2, 3, 4])\n25\n>>> sum_squares_vector([-1,\
    \ -2, -3, -4])\n0\n>>> sum_squares_vector([0, 0])\n0\n>>> sum_squares_vector([-1])\n\
    0\n>>> sum_squares_vector([0, 1])\n1\n>>> sum_squares_vector([-1, 1])\n1\n>>>\
    \ sum_squares_vector([0, 2])\n4\n>>> sum_squares_vector([-1, 2])\n4\n>>> sum_squares_vector([0,\
    \ 3])\n9\n>>> sum_squares_vector([-1, 3])\n9\n>>> sum_squares_vector([0, 4])\n\
    16\n>>> sum_squares_vector([-1, 4])\n16\n>>> sum_squares_vector([0, 5])\n25\n\
    >>> sum_squares_vector([-1, 5])\n25\n>>> sum_squares_vector([0, 6])\n36\n>>> sum_squares_vector([-1,\
    \ 6])\n36\n>>> sum_squares_vector([0, 7])\n49\n>>> sum_squares_vector([-1, 7])\n\
    49\n>>> sum_squares_vector([0, 8])\n64\n>>> sum_squares_vector([-1, 8])\n64\n\
    >>> sum_squares_vector([0, 9])\n81\n>>> sum_squares_vector([-1, 9])\n81\n>>> sum_squares_vector([0,\
    \ 10])\n100\n>>> sum_squares_vector([-1, 10])\n100\n>>> sum_squares_vector([0,\
    \ 11])\n121\n>>> sum_squares_vector([-1, 11])\n121\n>>> sum_squares_vector([0,\
    \ 12])\n144\n>>> sum_squares_vector([-1, 12])\n144\n>>> sum_squares_vector([0,\
    \ 13])\n169\n>>> sum_squares_vector([-1, 13])\n169\n>>> sum_squares_vector([0,\
    \ 14])\n196\n>>> sum_squares_vector([-1, 14])\n196\n>>> sum_squares_vector([0,\
    \ 15])\n225\n>>> sum_squares_vector([-1, 15])\n225\n>>> sum_squares_vector([0,\
    \ 16])\n256\n>>> sum_squares_vector([-1, 16])\n256\n>>> sum\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpva_cczku.jl:17\nin expression starting at\
    \ /tmp/tmpva_cczku.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_product = numbers[1]\n\
    \        product = 1\n        for i in numbers[2:end]\n            product *=\
    \ i\n            sum_product += product\n        return (sum_product, product)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3,4,5]) == (15, 120)\n@assert sum_product([1,2])\
    \ == (3,2)\n@assert sum_product([1,2]) == (3,2)\n@assert sum_product([1,2]) ==\
    \ (3,2)\n@assert sum_product([1,2]) == (3,2)\n@assert sum_product([1,2]) == (3,2)\n\
    @assert sum_product([1,2]) == (3,2)\n@assert sum_product([1,2]) == (3,2)\n@assert\
    \ sum_product([1,2]) == (3,2)\n@assert sum_product([1,2]) == (3,2)\n@assert sum_product([1,2])\
    \ == (3,2)\n@assert sum_product([1,2]) == (3,2)\n@assert sum_product([1,2]) ==\
    \ (3,2)\n@assert sum_product([1,2]) == (3,2)\n@assert sum_product([1,2]) == (3,2)\n\
    @assert sum_product([1,2]) == (3,2)\n@assert sum_product([1,2]) == (3,2)\n@assert\
    \ sum_product([1,2]) == (3,2)\n@assert sum_product([1,2]) == (3,2)\n@assert sum_product([1,2])\
    \ == (3,2)\n@assert sum_product([1,2]) == (3,2)\n@assert sum_product([1,2]) ==\
    \ (3,2)\n@assert sum_product([1,2]) == (3,2)\n@assert sum_product([1,2]) == (3,2)\n\
    @assert sum_product([1,2]) == (3,2)\n@assert sum_product([1,2]) == (3,2)\n@assert\
    \ sum_product([1,2]) == (3,2)\n@assert sum_product([1,2]) == (3,2)\n@assert sum_product([1,2])\
    \ == (3,2)\n@assert sum_product([1,2]) == (3,2)\n@assert sum_product([1,2]) ==\
    \ (3,2)\n@assert sum_product([1,2]) == (3,2)\n@assert sum_product([1,2]) == (3,2)\n\
    @assert sum_product([1,2]) == (3,2)\n@assert sum_product([1,2]) == (3,2)\n@assert\
    \ sum_product([1,2]) == (3,2)\n@assert sum_product\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_umu2a93.jl:20\nin expression starting at\
    \ /tmp/tmp_umu2a93.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_product = 1\n    for i in numbers\n        product_product\
    \ *= i\n    end\n    return sum_product, product_product\nend\n</cell>\n<code\
    \ language=julia-1.3>\n@assert sum_product([1, 2, 3, 4]) == (10,24)\n@assert sum_product([1,2,3])\
    \ == (0,1)\n@assert sum_product([1,2,3]) == (0,1)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the sum of the squares of the numbers in a vector.\n\
    \    >>> sum_of_squares([1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,\nusing Test\n\n@testset begin\n\n\
    candidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaq4yyrcd.jl:16\nin expression starting at\
    \ /tmp/tmpaq4yyrcd.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum = 0\n   \
    \ product = 1\n    for n in numbers\n        sum = sum + n\n        product =\
    \ product * n\n    return (sum, product)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in two vectors of integers and returns a vector consisting of the product of\
    \ all the integers in the first vector, and a vector consisting of the sum of\
    \ the integers in the second vector.\n    >>> sum_product_vectors([1,2], [3,4])\n\
    \    (Vector{Int64}([3, 6]), Vector{Int64}([4, 8]))\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmponq3w8vi.jl:16\nin expression starting at\
    \ /tmp/tmponq3w8vi.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_product = numbers[1]\n\
    \        product = 1\n        for i in numbers[2:end] \n            sum_product\
    \ += i\n            product *= i\n        return (sum_product, product)\nend\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in two vectors of integers and returns the dot\
    \ product of the two vectors.\nThe dot product of two vectors $\\mathbf{a}$ and\
    \ $\\mathbf{b}$ is:\n$$\n\\mathbf{a} \\cdot \\mathbf{b} = a_1b_1 + a_2b_2 + \\\
    cdots + a_nb_n\n$$\nWrite a function that takes in two vectors of integers and\
    \ returns the dot product of the two vectors.\nThe dot product of two vectors\
    \ $\\mathbf{a}$ and $\\mathbf{b}$ is:\n$$\n\\mathbf{a} \\cdot \\mathbf{b} = a_1b_1\
    \ + a_2b_2 + \\cdots + a_nb_n\n$$\nWrite a function that takes in two vectors\
    \ of integers and returns the dot product of the two vectors.\nThe dot product\
    \ of two vectors $\\mathbf{a}$ and $\\mathbf{b}$ is:\n$$\n\\mathbf{a} \\cdot \\\
    mathbf{b} = a_1b_1 + a_2b_2 + \\cdots + a_nb_n\n$$\nWrite a function that takes\
    \ in two vectors of integers and returns the dot product of the two vectors.\n\
    The dot product of two vectors $\\mathbf{a}$ and $\\mathbf{b}$ is:\n$$\n\\mathbf{a}\
    \ \\cdot \\mathbf{b} = a_1b_1 + a_2b_2 + \\cdots + a_nb_n\n$$\nWrite a function\
    \ that takes in two vectors of integers and returns the dot product of the two\
    \ vectors.\nThe dot product of two vectors $\\mathbf{a}$ and $\\mathbf{b}$ is:\n\
    $$\n\\mathbf{a} \\cdot \\mathbf{b} = a_1b_1 + a_2b_2 + \\cdots + a_nb_n\n$$\n\
    Write a function that takes in two vectors of integers and returns the dot product\
    \ of the two vectors.\nThe dot product of two vectors $\\mathbf{a}$ and $\\mathbf{b}$\
    \ is:\n$$\n\\mathbf{a} \\cdot \\mathbf{b} = a_1b_1 + a_2b_2 + \\cdots + a_nb_n\n\
    $$\nWrite a function that takes in two vectors of integers and returns the dot\
    \ product of the two vectors.\nThe dot product of two vectors $\\mathbf{a}$ and\
    \ $\\mathbf{b}$ is:\n$$\n\\mathbf{a} \\cdot \\mathbf{b} = a_1b_1 + a_\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw4lrb0zw.jl:19\nin expression starting at\
    \ /tmp/tmpw4lrb0zw.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for i in numbers\n        sum_ += i\n        product_ *=\
    \ i\n    return (sum_, product_)\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n\
    @assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6,\
    \ 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3])\
    \ == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy9577v0m.jl:16\nin expression starting at\
    \ /tmp/tmpy9577v0m.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum = 0\n   \
    \ product = 1\n    for number in numbers\n        sum = sum + number\n       \
    \ product = product * number\n    end\n    return (sum, product)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the integers in the vector.\n    >>> sum_of_squares([4, 9, 16, 25])\n\
    \    490\n    >>> sum_of_squares([-1, 0, 1, 2, 3, 4])\n    -1\n    >>> sum_of_squares([-1,\
    \ 1, -1])\n    0\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqv4z6fou.jl:17\nin expression starting at\
    \ /tmp/tmpqv4z6fou.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for number in numbers\n        sum_ += number\n        product_\
    \ *= number\n    return (sum_, product_)\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3,4,5])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the squares of the integers in a vector.\n    >>> sum_square_of_vector([1,\
    \ 2, 3, 4])\n    25\n    >>> sum_square_of_vector([-1, -2, -3, -4])\n    25\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps_fw8uin.jl:16\nin expression starting at\
    \ /tmp/tmps_fw8uin.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for number in numbers\n        sum_ = sum_ + number\n   \
    \     product_ = product_ * number\n    return (sum_, product_)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of elements in a vector that are\
    \ greater than a specified value.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp712tf807.jl:16\nin expression starting at\
    \ /tmp/tmp712tf807.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for number in numbers\n        sum_ = sum_ + number\n   \
    \     product_ = product_ * number\n    end\n    return (sum_, product_)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns a vector\
    \ of integers consisting of the product of all the integers in the vector.\n \
    \   >>> product_of_all([1, 2, 3, 4])\n    [1, 2, 6, 24]\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmp839qke.jl:17\nin expression starting at\
    \ /tmp/tmpmp839qke.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = reduce(mul, numbers, 1)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ugu90nw.jl:13\nin expression starting at\
    \ /tmp/tmp_ugu90nw.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = reduce(mul, numbers, 1)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes an array of integers and returns the sum of the squares of the integers\
    \ in the array.\nThe function should work for both scalars and vectors.\nThe function\
    \ should work for both positive and negative numbers.\nThe function should work\
    \ for both positive and negative integers.\nThe function should work for both\
    \ positive and negative integers.\nThe function should work for both positive\
    \ and negative integers.\nThe function should work for both positive and negative\
    \ integers.\nThe function should work for both positive and negative integers.\n\
    The function should work for both positive and negative integers.\nThe function\
    \ should work for both positive and negative integers.\nThe function should work\
    \ for both positive and negative integers.\nThe function should work for both\
    \ positive and negative integers.\nThe function should work for both positive\
    \ and negative integers.\nThe function should work for both positive and negative\
    \ integers.\nThe function should work for both positive and negative integers.\n\
    The function should work for both positive and negative integers.\nThe function\
    \ should work for both positive and negative integers.\nThe function should work\
    \ for both positive and negative integers.\nThe function should work for both\
    \ positive and negative integers.\nThe function should work for both positive\
    \ and negative integers.\nThe function should work for both positive and negative\
    \ integers.\nThe function should work for both positive and negative integers.\n\
    The function should work for both positive and negative integers.\nThe function\
    \ should work for both positive and negative integers.\nThe function should work\
    \ for both positive and negative integers.\nThe function should work for both\
    \ positive and negative integers.\nThe function should work for both positive\
    \ and negative integers.\nThe function should work for both positive and negative\
    \ integers.\nThe function should work for both positive and negative integers.\n\
    The function should work for both positive and negative integers.\nThe function\
    \ should work for both positive and negative integers.\nThe function should work\
    \ for both positive and negative integers.\nThe function should work for both\
    \ positive and negative integers.\nThe function should work for both positive\
    \ and negative integers.\nThe function should work for both positive and negative\
    \ integers.\nThe function should work for both positive and negative integers.\n\
    The function should work for both positive and negative integers.\nThe function\
    \ should work for both positive and negative integers.\nThe function should work\
    \ for both positive and negative integers.\nThe function should work for both\
    \ positive and negative integers.\nThe function should work for both positive\
    \ and negative integers.\nThe function should work for both positive and negative\
    \ integers.\nThe function should work for both \nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphbmscrn2.jl:13\nin expression starting at\
    \ /tmp/tmphbmscrn2.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for number in numbers\n        sum_ = sum_ + number\n   \
    \     product_ = product_ * number\n    end\n    return (sum_, product_)\nend\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the integers in the vector.\n>>> sum_squares([1,2,3])\n25\n>>> sum_squares([1,4,9])\n\
    49\n>>> sum_squares([-3,-4,-5])\n25\n>>> sum_squares([1,-2,-3,-4,-5,-6,-7,-8])\n\
    -49\n>>> sum_squares([1,-2,-3,-4,-5,-6,-7,-8,-9])\n-49\n>>> sum_squares([1,-2,-3,-4,-5,-6,-7,-8,-9,-10])\n\
    -49\n>>> sum_squares([1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11])\n-49\n>>> sum_squares([1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12])\n\
    -49\n>>> sum_squares([1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12, -13])\n-49\n>>> sum_squares([1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,\
    \ -13,-14])\n-49\n>>> sum_squares([1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12, -13,-14,-15])\n\
    -49\n>>> sum_squares([1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12, -13,-14,-15,-16])\n\
    -49\n>>> sum_squares([1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12, -13,-14,-15,-16,-17])\n\
    -49\n>>> sum_squares([1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12, -13,-14,-15,-16,-17,-18])\n\
    -49\n>>> sum_squares([1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12, -13,-14,-15,-16,-17\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzv6241_v.jl:17\nin expression starting at\
    \ /tmp/tmpzv6241_v.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_product = numbers[1] +\
    \ numbers[length(numbers)] \n        return (sum_product, numbers[1] * numbers[length(numbers)])\n\
    \    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that returns the\
    \ sum of the squares of the numbers in a vector.\nThe vector can contain any number\
    \ of elements.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8ryrfft1.jl:16\nin expression starting at\
    \ /tmp/tmp8ryrfft1.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum = 0\n   \
    \ product = 1\n    for n in numbers\n        sum = sum + n\n        product =\
    \ product * n\n    return (sum, product)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the squares of the numbers in a vector.\n    >>> sum_of_squares([4,\
    \ 9, 16, 25])\n    490\n    >>> sum_of_squares([-1, 0, 1])\n    0\n    >>> sum_of_squares([-4,\
    \ 9, 16, 25])\n    258\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmnlyyj1o.jl:16\nin expression starting at\
    \ /tmp/tmpmnlyyj1o.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for number in numbers\n        sum_ = sum_ + number\n   \
    \     product_ = product_ * number\n    end\n    return (sum_, product_)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes in two vectors of integers and returns a vector\
    \ consisting of the product of all the integers in the first vector, multiplied\
    \ by the product of all the integers in the second vector.\nFor example, given\
    \ vectors [1,2,3] and [4,5,6], the function should return [4,10,18].\nThe function\
    \ should return nothing if the two vectors are of different lengths.\nThe function\
    \ should return nothing if the two vectors are of different lengths.\nThe function\
    \ should return nothing if the two vectors are of different lengths.\nThe function\
    \ should return nothing if the two vectors are of different lengths.\nThe function\
    \ should return nothing if the two vectors are of different lengths.\nThe function\
    \ should return nothing if the two vectors are of different lengths.\nThe function\
    \ should return nothing if the two vectors are of different lengths.\nThe function\
    \ should return nothing if the two vectors are of different lengths.\nThe function\
    \ should return nothing if the two vectors are of different lengths.\nThe function\
    \ should return nothing if the two vectors are of different lengths.\nThe function\
    \ should return nothing if the two vectors are of different lengths.\nThe function\
    \ should return nothing if the two vectors are of different lengths.\nThe function\
    \ should return nothing if the two vectors are of different lengths.\nThe function\
    \ should return nothing if the two vectors are of different lengths.\nThe function\
    \ should return nothing if the two vectors are of different lengths.\nThe function\
    \ should return nothing if the two vectors are of different lengths.\nThe function\
    \ should return nothing if the two vectors are of different lengths.\nThe function\
    \ should return nothing if the two vectors are of different lengths.\nThe function\
    \ should return nothing if the two vectors are of different lengths.\nThe function\
    \ should return nothing if the two vectors are of different lengths.\nThe function\
    \ should return nothing if the two vectors are of different lengths.\nThe function\
    \ should return nothing if the two vectors are of different lengths.\nThe function\
    \ should return nothing if the two vectors are of different lengths.\nThe function\
    \ should return nothing if the two vectors are of different lengths.\nThe function\
    \ should return nothing if the two vectors are of different lengths.\nThe function\
    \ should return nothing if the two vectors are of different lengths.\nThe function\
    \ should return nothing if the two vectors are of different lengths.\nThe function\
    \ should return nothing if the two vectors are of different lengths.\nThe \nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsnfs0had.jl:17\nin expression starting at\
    \ /tmp/tmpsnfs0had.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum .(numbers)\n    product_product = 1\n    for i in numbers\n        product_product\
    \ *= i\n    end\n    return (sum_product, product_product)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"sum .\" at\
    \ /tmp/tmpfr72vh4p.jl:9\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfr72vh4p.jl:9\n\
    in expression starting at /tmp/tmpfr72vh4p.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for number in numbers\n        sum_ = sum_ + number\n   \
    \     product_ = product_ * number\n    return (sum_, product_)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1xdyvfoy.jl:16\nin expression starting at\
    \ /tmp/tmp1xdyvfoy.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ numbers[1]\n    product_of_numbers = numbers[1]\n    for number in numbers[2:end]\n\
    \        sum_product = sum_product + number\n        product_of_numbers = product_of_numbers\
    \ * number\n    end\n    return (sum_product, product_of_numbers)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the squares of the numbers in a vector.\n\
    \    >>> sum_square_of_numbers([1,2,3])\n    25\n    >>> sum_square_of_numbers([1,-2,3])\n\
    \    9\n    >>> sum_square_of_numbers([1,-2,3,-4])\n    25\n    >>> sum_square_of_numbers([])\n\
    \    0\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpds90d_fk.jl:17\nin expression starting at\
    \ /tmp/tmpds90d_fk.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_ = sum(numbers) \n   \
    \     prod_ = 1\n        for n in numbers \n            prod_ *= n \n        return\
    \ (sum_, prod_)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([4, 5]) == (20, 25)\n@assert sum_product([6])\
    \ == (0, 6)\n@assert sum_product([7, 8, 9]) == (42, 49)\n@assert sum_product([10,\
    \ 11, 12, 13, 14]) == (160, 260)\n@assert sum_product([15, 16, 17, 18, 19]) ==\
    \ (225, 295)\n@assert sum_product([20, 21, 22, 23, 24]) == (300, 336)\n@assert\
    \ sum_product([25, 26, 27, 28, 29]) == (350, 410)\n@assert sum_product([30, 31,\
    \ 32, 33, 34]) == (400, 460)\n@assert sum_product([35, 36, 37, 38, 39]) == (450,\
    \ 510)\n@assert sum_product([40, 41, 42, 43, 44]) == (500, 560)\n@assert sum_product([45,\
    \ 46, 47, 48, 49]) == (550, 610)\n@assert sum_product([50, 51, 52, 53, 54]) ==\
    \ (600, 660)\n@assert sum_product([55, 56, 57, 58, 59]) == (650, 710)\n@assert\
    \ sum_product([60, 61, 62, 63, 64]) == (700, 770)\n@assert sum_product([65, 66,\
    \ 67, 68, 69]) == (750, 810)\n@assert sum_product([70, 71, 72, 73, 74]) == (800,\
    \ 870)\n@assert sum_product([75, 76, 77, 78, 79]) == (850, 910)\n@assert sum_product([80,\
    \ 81, 82, 83, 84]) == (900, 970)\n@assert sum_product([85, 86, 87, 88, 89]) ==\
    \ (950, 1001)\n@assert sum_product([90, 91, 92, 93, 94]) == (1000, 1050)\n@assert\
    \ sum_product([95, 96, 97, 98, 99]) == (1050, 1100)\n@assert sum_product([100,\
    \ 101, 102, 103, 104]) == (1100, 1150)\n@assert sum_product([105, 106, 107, 108,\
    \ 109]) == (1150, 1200)\n@assert sum_product([110, 111, 112, 113, 114]) == (1200,\
    \ 1250)\n@\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphxclh1aj.jl:19\nin expression starting at\
    \ /tmp/tmphxclh1aj.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_ = numbers[1]\n      \
    \  prod_ = 1\n        for n in numbers[2:end]\n            sum_ = sum_ + n\n \
    \           prod_ = prod_ * n\n        return (sum_, prod_)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes as input a vector of integers and a number $k$ and\
    \ returns the $k$-th smallest number in the vector. \nThe function should return\
    \ -1 if the vector is empty or $k$ is out of bounds.\nHint: Use a for loop to\
    \ iterate over the vector and find the $k$-th smallest number.\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpddfq45s5.jl:19\nin expression starting at\
    \ /tmp/tmpddfq45s5.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = Int64(0)\n\
    \    prod = Int64(1)\n    for i in numbers\n        sum_ = sum_ + i\n        prod\
    \ = prod * i\n    end\n    return (sum_, prod)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sum_product([1, 2, 3, 4]) == (15, 120)\n@assert sum_product([0, 1, 2])\
    \ == (0, 2)\n@assert sum_product([-1, -2, -3]) == (-6, 6)\n@assert sum_product([-4,\
    \ -5, -6]) == (-24, 24)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the squares of the integers in a given vector.\n    >>> sum_square([1,\
    \ 2, 3, 4]) == 14\n    >>> sum_square([-1, -2, -3]) == -6\n    >>> sum_square([-4,\
    \ -5, -6]) == -24\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbun22jrr.jl:17\nin expression starting at\
    \ /tmp/tmpbun22jrr.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_product = numbers[1] +\
    \ numbers[2] \n        product = 1\n        for i in numbers[2:end]\n        \
    \    product *= i \n        return (sum_product, product) \nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector of integers and returns the sum of the squares\
    \ of the integers in the vector.\n    >>> sum_of_squares([4, 9, 16])\n    49\n\
    \    >>> sum_of_squares([-1, 0, 1])\n    1\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpve0cizir.jl:18\nin expression starting at\
    \ /tmp/tmpve0cizir.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for number in numbers\n        sum_ = sum_ + number\n   \
    \     product_ = product_ * number\n    end\n    return (sum_, product_)\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum and product\
    \ of all the integers in a vector.\nThe function should take one argument, a list\
    \ of integers, and return a tuple consisting of a sum and a product of all the\
    \ integers in the list.\nThe function should return an error if the list is empty.\n\
    The function should return an error if the list contains non-numeric values.\n\
    The function should return an error if the list contains negative values.\nThe\
    \ function should return an error if the list contains duplicate values.\nThe\
    \ function should return an error if the list contains any non-integer values.\n\
    The function should return an error if the list contains any negative values.\n\
    The function should return an error if the list contains any non-positive values.\n\
    The function should return an error if the list contains any non-integer values.\n\
    The function should return an error if the list contains any non-numeric values.\n\
    The function should return an error if the list contains any non-positive values.\n\
    The function should return an error if the list contains any non-negative values.\n\
    The function should return an error if the list contains any non-integer values.\n\
    The function should return an error if the list contains any non-numeric values.\n\
    The function should return an error if the list contains any non-negative values.\n\
    The function should return an error if the list contains any non-numeric values.\n\
    The function should return an error if the list contains any non-positive values.\n\
    The function should return an error if the list contains any non-negative values.\n\
    The function should return an error if the list contains any non-integer values.\n\
    The function should return an error if the list contains any non-numeric values.\n\
    The function should return an error if the list contains any non-positive values.\n\
    The function should return an error if the list contains any non-negative values.\n\
    The function should return an error if the list contains any non-integer values.\n\
    The function should return an error if the list contains any non-numeric values.\n\
    The function should return an error if the list contains any non-positive values.\n\
    The function should return an error if the list contains any non-negative values.\n\
    The function should return an error if the list contains any non-integer values.\n\
    The function should return an error if the list contains any non-numeric values.\n\
    The function should return an error if the list contains any non-positive values.\n\
    The function should return an error if the list contains any non-negative values.\n\
    The function should return an error if the list contains any non-integer values.\n\
    The function should return an error if the list contains any non-numeric values.\n\
    The function should return an error if the list contains any non-positive values.\n\
    The function should return an error if the list contains any non-negative values.\n\
    The function should return an error if the list contains \nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgx5gp5w0.jl:17\nin expression starting at\
    \ /tmp/tmpgx5gp5w0.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for number in numbers\n        sum_ = sum_ + number\n   \
    \     product_ = product_ * number\n    return (sum_, product_)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the squares of the numbers in a vector.\n\
    \    >>> sum_of_squares([1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5qhnst3y.jl:16\nin expression starting at\
    \ /tmp/tmp5qhnst3y.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = reduce(mul, numbers, 1)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.\nThe sum of\
    \ the squares should be equal to the sum of the integers in the vector.\nThe squares\
    \ should be equal to the product of the integers in the vector.\nThe squares should\
    \ be equal to the sum of the squares of the integers in the vector.\nThe squares\
    \ should be equal to the product of the squares of the integers in the vector.\n\
    The squares should be equal to the sum of the cubes of the integers in the vector.\n\
    The squares should be equal to the product of the cubes of the integers in the\
    \ vector.\nThe squares should be equal to the sum of the cubes of the squares\
    \ of the integers in the vector.\nThe squares should be equal to the product of\
    \ the cubes of the squares of the integers in the vector.\nThe squares should\
    \ be equal to the sum of the cubes of the cubes of the integers in the vector.\n\
    The squares should be equal to the product of the cubes of the cubes of the integers\
    \ in the vector.\nThe squares should be equal to the sum of the cubes of the cubes\
    \ of the squares of the integers in the vector.\nThe squares should be equal to\
    \ the product of the cubes of the cubes of the squares of the integers in the\
    \ vector.\nThe squares should be equal to the sum of the cubes of the cubes of\
    \ the cubes of the integers in the vector.\nThe squares should be equal to the\
    \ product of the cubes of the cubes of the cubes of the integers in the vector.\n\
    The squares should be equal to the sum of the cubes of the cubes of the cubes\
    \ of the squares of the integers in the vector.\nThe squares should be equal to\
    \ the product of the cubes of the cubes of the cubes of the squares of the integers\
    \ in the vector.\nThe squares should be equal to the sum of the cubes of the cubes\
    \ of the cubes of the cubes of the integers in the vector.\nThe squares should\
    \ be equal to the product of the cubes of the cubes of the cubes of the cubes\
    \ of the integers in the vector.\nThe squares should be equal to the sum of the\
    \ cubes of the cubes of the cubes of the cubes of the squares of the integers\
    \ in the vector.\nThe squares should be equal to the product of the cubes of the\
    \ cubes of the cubes of the squares of the integers in the vector.\nThe squares\
    \ should be equal to the sum of the cubes of the cubes of the cubes of the cubes\
    \ of the squares of the integers in the vector.\nThe squares should be equal to\
    \ the product of the cubes of the cubes of the cubes of the cubes of the integers\
    \ in the vector.\nThe squares should be equal to the sum of the cubes of the cubes\
    \ of the cubes of the cubes of the cubes of the integers in the vector.\nThe squares\
    \ should be equal to the product of the cubes of the cubes of the cubes of the\
    \ cubes of the squares of the integers in the vector.\nThe squares should be equal\
    \ to the sum of the cubes of the cubes of the cubes of the cubes of the cubes\
    \ of the integers in the vector.\nThe squares should be equal to the product of\
    \ the cubes of the cubes of the cubes of the cubes of the cubes of the integers\
    \ in the vector.\nThe squares should be equal to the sum of the cubes of the cubes\
    \ of the cubes of the cubes of the cubes of the squares of the integers in the\
    \ vector.\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvxyad87l.jl:13\nin expression starting at\
    \ /tmp/tmpvxyad87l.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for number in numbers\n        sum_ = sum_ + number\n   \
    \     product_ = product_ * number\n    end\n    return (sum_, product_)\nend\n\
    </cell>\n<code language=julia-1.0>\n@assert sum_product([1, 2, 3, 4]) == (10,24)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the squares\
    \ of the numbers in a vector.\nThe function should work for both real and complex\
    \ numbers.\nThe function should work for both vectors and matrices.\nThe function\
    \ should work for both scalars and vectors.\nThe function should work for both\
    \ scalars and matrices.\nThe function should work for both scalars and vectors.\n\
    The function should work for both scalars and matrices.\nThe function should work\
    \ for both scalars and vectors.\nThe function should work for both scalars and\
    \ vectors.\nThe function should work for both scalars and vectors.\nThe function\
    \ should work for both scalars and vectors.\nThe function should work for both\
    \ scalars and vectors.\nThe function should work for both scalars and vectors.\n\
    The function should work for both scalars and vectors.\nThe function should work\
    \ for both scalars and vectors.\nThe function should work for both scalars and\
    \ vectors.\nThe function should work for both scalars and vectors.\nThe function\
    \ should work for both scalars and vectors.\nThe function should work for both\
    \ scalars and vectors.\nThe function should work for both scalars and vectors.\n\
    The function should work for both scalars and vectors.\nThe function should work\
    \ for both scalars and vectors.\nThe function should work for both scalars and\
    \ vectors.\nThe function should work for both scalars and vectors.\nThe function\
    \ should work for both scalars and vectors.\nThe function should work for both\
    \ scalars and vectors.\nThe function should work for both scalars and vectors.\n\
    The function should work for both scalars and vectors.\nThe function should work\
    \ for both scalars and vectors.\nThe function should work for both scalars and\
    \ vectors.\nThe function should work for both scalars and vectors.\nThe function\
    \ should work for both scalars and vectors.\nThe function should work for both\
    \ scalars and vectors.\nThe function should work for both scalars and vectors.\n\
    The function should work for both scalars and vectors.\nThe function should work\
    \ for both scalars and vectors.\nThe function should work for both scalars and\
    \ vectors.\nThe function should work for both scalars and vectors.\nThe function\
    \ should work for both scalars and vectors.\nThe function should work for both\
    \ scalars and vectors.\nThe function should work for both scalars and vectors.\n\
    The function should work for both scalars and vectors.\nThe function should work\
    \ for both scalars and vectors.\nThe function should work for both scalars and\
    \ vectors.\nThe function \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxkui2us3.jl:17\nin expression starting at\
    \ /tmp/tmpxkui2us3.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ numbers[1]\n    sum_product = sum_product * numbers[0]\n    return sum_product,\
    \ sum_product\nend\n</cell>\n<text>\nExercise 10\nWrite a function that returns\
    \ the sum of the squares of the numbers in a vector.\nThe vector can contain any\
    \ number of elements.\nThe function should work for vectors of any length.\nThe\
    \ function should work for both positive and negative numbers.\nThe function should\
    \ work for both signed and unsigned integers.\nThe function should work for both\
    \ signed and unsigned integers.\nThe function should work for both signed and\
    \ unsigned integers.\nThe function should work for both signed and unsigned integers.\n\
    The function should work for both signed and unsigned integers.\nThe function\
    \ should work for both signed and unsigned integers.\nThe function should work\
    \ for both signed and unsigned integers.\nThe function should work for both signed\
    \ and unsigned integers.\nThe function should work for both signed and unsigned\
    \ integers.\nThe function should work for both signed and unsigned integers.\n\
    The function should work for both signed and unsigned integers.\nThe function\
    \ should work for both signed and unsigned integers.\nThe function should work\
    \ for both signed and unsigned integers.\nThe function should work for both signed\
    \ and unsigned integers.\nThe function should work for both signed and unsigned\
    \ integers.\nThe function should work for both signed and unsigned integers.\n\
    The function should work for both signed and unsigned integers.\nThe function\
    \ should work for both signed and unsigned integers.\nThe function should work\
    \ for both signed and unsigned integers.\nThe function should work for both signed\
    \ and unsigned integers.\nThe function should work for both signed and unsigned\
    \ integers.\nThe function should work for both signed and unsigned integers.\n\
    The function should work for both signed and unsigned integers.\nThe function\
    \ should work for both signed and unsigned integers.\nThe function should work\
    \ for both signed and unsigned integers.\nThe function should work for both signed\
    \ and unsigned integers.\nThe function should work for both signed and unsigned\
    \ integers.\nThe function should work for both signed and unsigned integers.\n\
    The function should work for both signed and unsigned integers.\nThe function\
    \ should work for both signed and unsigned integers.\nThe function should work\
    \ for both signed and unsigned integers.\nThe function should work for both signed\
    \ and unsigned integers.\nThe function should work for both signed and unsigned\
    \ integers.\nThe function should work for both signed and unsigned integers.\n\
    The function should work for both signed and unsigned integers.\nThe function\
    \ should work for both signed and unsigned integers.\nThe function should work\
    \ for both signed and unsigned integers.\nThe function should work for both signed\
    \ and unsigned integers.\nThe function should work for both signed and unsigned\
    \ integers.\nThe function should work for both signed and unsigned \nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6orzn8z9.jl:13\nin expression starting at\
    \ /tmp/tmp6orzn8z9.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum = Int64(0)\n\
    \    product = Int64(1)\n    for number in numbers\n        sum += number\n  \
    \      product *= number\n    return (sum, product)\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3,4,5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns the sum of the squares of the integers in the\
    \ vector.\nThe function should work for both vectors of integers and vectors of\
    \ floating point numbers.\nThe function should work for vectors of any length.\n\
    The function should work for vectors of any type of elements (including strings).\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5jdxefg3.jl:16\nin expression starting at\
    \ /tmp/tmp5jdxefg3.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = reduce(mul, numbers)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,\
    \ 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and a number $k$ and returns a vector of integers $x$ and $y$ such\
    \ that $x$ and $y$ are a linear combination of $k$-th powers of the input vector.\
    \ For example, if the input vector is [1,2,3,4,5] and the $k$ is 2, then the output\
    \ vector should be [1,2,3,4,5,6,8,10,12,15,20]. \nThe function should work for\
    \ any $k$. \nIf the input vector is empty, the output vector should be empty.\n\
    If the input vector has less than $k$ elements, then the output vector should\
    \ be the same as the input vector.\nIf the input vector has more than $k$ elements,\
    \ then the output vector should be $k$ copies of the input vector.\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9sky0p_v.jl:13\nin expression starting at\
    \ /tmp/tmp9sky0p_v.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ zeros(Int64, 2)\n    sum_product[1] = numbers[1]\n    for n in numbers[2:end]\n\
    \        sum_product[1] = sum_product[1] + n\n    end\n    return sum_product\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9m9hy6ln.jl:16\nin expression starting at\
    \ /tmp/tmp9m9hy6ln.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for number in numbers\n        sum_ = sum_ + number\n   \
    \     product_ = product_ * number\n    end\n    return (sum_, product_)\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6qaurbef.jl:17\nin expression starting at\
    \ /tmp/tmp6qaurbef.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_product = 1\n    for i in numbers\n        product_product\
    \ *= i\n    end\n    return (sum_product, product_product)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphyvrdo9q.jl:16\nin expression starting at\
    \ /tmp/tmphyvrdo9q.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ numbers[1]\n    product_of_numbers = numbers[1]\n    for number in numbers[2:end]\n\
    \        sum_product = sum_product + number\n        product_of_numbers = product_of_numbers\
    \ * number\n    end\n    return (sum_product, product_of_numbers)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3,4,5])\
    \ == (15, 25)\n@assert sum_product([1,2,3,4,5,6,7,8,9,10]) == (120, 3628800)\n\
    @assert sum_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\
    \ == (3628800, 120)\n</cell>\n<text>\nProblem 7: Write a function that returns\
    \ the sum of the squares of the numbers in a vector.\n    >>> sum_square_of_numbers([1,2,3])\n\
    \    25\n    >>> sum_square_of_numbers([1,2,3,4,5])\n    285\n    >>> sum_square_of_numbers([1,2,3,4,5,6,7,8,9,10])\n\
    \    3628800\n    >>> sum_square_of_numbers([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\n\
    \    362\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp84l600sw.jl:17\nin expression starting at\
    \ /tmp/tmp84l600sw.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_ = sum(numbers) \n   \
    \     product_ = 1\n        for i in numbers \n            product_ *= i \n  \
    \      return (sum_, product_) \nend \n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the sum of the squares of the integers in a vector.\n    >>> sum_of_squares([4,\
    \ 9, 16])\n    49\n    >>> sum_of_squares([-1, 2, -3, 4])\n    10\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpycr4ts4y.jl:18\nin expression starting at\
    \ /tmp/tmpycr4ts4y.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_product = 1\n    for i in numbers\n        product_product\
    \ *= i\n    end\n    return (sum_product, product_product)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector of integers and returns the sum of the squares\
    \ of the integers in the vector.\n>>> sum_square_of_vector([1, 2, 3, 4])\n25\n\
    >>> sum_square_of_vector([-1, -2, -3, 4])\n25\n>>> sum_square_of_vector([-1, 1,\
    \ -4, 3])\n25\n>>> sum_square_of_vector([-1, -2, -3, 4, 5])\n25\n>>> sum_square_of_vector([-1,\
    \ -2, -3, 4, 5])\n25\n>>> sum_square_of_vector([-1, -2, -3, 4, 5])\n25\n>>> sum_square_of_vector([-1,\
    \ -2, -3, 4, 5])\n25\n>>> sum_square_of_vector([-1, -2, -3, 4, 5])\n25\n>>> sum_square_of_vector([-1,\
    \ -2, -3, 4, 5])\n25\n>>> sum_square_of_vector([-1, -2, -3, 4, 5])\n25\n>>> sum_square_of_vector([-1,\
    \ -2, -3, 4, 5])\n25\n>>> sum_square_of_vector([-1, -2, -3, 4, 5])\n25\n>>> sum_square_of_vector([-1,\
    \ -2, -3, 4, 5])\n25\n>>> sum_square_of_vector([-1, -2, -3, 4, 5])\n25\n>>> sum_square_of_vector([-1,\
    \ -2, -3, 4, 5])\n25\n>>> sum_square_of_vector([-1, -2, -3, 4, 5])\n25\n>>> sum_square_of_vector([-1,\
    \ -2, -3, 4, 5])\n25\n>>> sum_square_of_vector([-1, -2, -3, 4, 5])\n25\n>>> sum_square_of_vector([-1,\
    \ -2, -3, 4, 5])\n25\n>>> sum_square_of_vector([-1, -2, -3, 4, 5])\n25\n>>> sum_square_of_vector([-1,\
    \ -2, -3, 4, 5])\n25\n>>> sum_square_of_vector([-1, -2, -3, 4, 5])\n25\n>>> sum_square_of_vector([-1,\
    \ -2, -3, 4, 5])\n25\n>>> sum_square_of_vector([-1, -2, -3, 4, 5])\n25\n>>> sum_square_of_vector([-1,\
    \ -2, -3, 4, 5])\n25\n>>> sum_square_of_vector([-1, -2, -3, 4, 5])\n25\n>>> sum_square_of_vector([-1,\
    \ -2, -3, 4, 5])\n25\n>>> sum_square_of_vector([-1, -2, -3, 4, 5])\n25\n>>> sum_square_of_vector([-1,\
    \ -2, -3, 4, 5])\n25\n>>> sum_square_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe8l_7jbw.jl:16\nin expression starting at\
    \ /tmp/tmpe8l_7jbw.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = reduce(mul, numbers, 1)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,\
    \ 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of integers in a vector that are less than a given value.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprcgsl72r.jl:13\nin expression starting at\
    \ /tmp/tmprcgsl72r.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        (0, 1) \n    else \n        sum_product(numbers[1:], numbers[0]*numbers[1])\
    \ \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ sum of the squares of the integers in a vector.\n    >>> sum_square_of_vector([1,\
    \ 2, 3, 4])\n    25\n    >>> sum_square_of_vector([-1, -2, -3, -4])\n    25\n\
    \    >>> sum_square_of_vector([0, 0])\n    0\n    >>> sum_square_of_vector([0,\
    \ 0])\n    0\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpflh0sz2o.jl:12\nin expression\
    \ starting at /tmp/tmpflh0sz2o.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum = numbers[1]\n       \
    \ product = 1\n        for i in 2:length(numbers) \n            sum = sum + numbers[i]\n\
    \            product = product * numbers[i]\n        end\n        return (sum,\
    \ product)\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum and product\
    \ of a vector of doubles.\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfmo57pr1.jl:21\nin expression starting at\
    \ /tmp/tmpfmo57pr1.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for number in numbers\n        sum_ += number\n        product_\
    \ *= number\n    return (sum_, product_)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes in a vector of integers and returns a vector of integers containing the\
    \ squares of the integers in the vector.\nThe function should return an empty\
    \ vector if the vector is empty.\nThe function should return a vector of integers\
    \ containing the squares of the integers in the vector.\nThe function should raise\
    \ an error if the vector contains non-integer elements.\nThe function should raise\
    \ an error if the vector contains negative numbers.\nThe function should raise\
    \ an error if the vector contains more than 10 elements.\nThe function should\
    \ raise an error if the vector contains more than 10 non-negative elements.\n\
    The function should raise an error if the vector contains more than 10 non-integer\
    \ elements.\nThe function should raise an error if the vector contains more than\
    \ 10 negative numbers.\nThe function should raise an error if the vector contains\
    \ more than 10 non-negative elements.\nThe function should raise an error if the\
    \ vector contains more than 10 non-integer elements.\nThe function should raise\
    \ an error if the vector contains more than 10 negative numbers.\nThe function\
    \ should raise an error if the vector contains more than 10 non-negative elements.\n\
    The function should raise an error if the vector contains more than 10 non-integer\
    \ elements.\nThe function should raise an error if the vector contains more than\
    \ 10 negative numbers.\nThe function should raise an error if the vector contains\
    \ more than 10 non-negative elements.\nThe function should raise an error if the\
    \ vector contains more than 10 non-integer elements.\nThe function should raise\
    \ an error if the vector contains more than 10 negative numbers.\nThe function\
    \ should raise an error if the vector contains more than 10 non-negative elements.\n\
    The function should raise an error if the vector contains more than 10 non-integer\
    \ elements.\nThe function should raise an error if the vector contains more than\
    \ 10 negative numbers.\nThe function should raise an error if the vector contains\
    \ more than 10 non-negative elements.\nThe function should raise an error if the\
    \ vector contains more than 10 non-integer elements.\nThe function should raise\
    \ an error if the vector contains more than 10 negative numbers.\nThe function\
    \ should raise an error if the vector contains more than 10 non-negative elements.\n\
    The function should raise an error if the vector contains more than 10 non-integer\
    \ elements.\nThe function should raise an error if the vector contains more than\
    \ 10 negative numbers.\nThe function should raise an error if the vector contains\
    \ more than 10 non-negative elements.\nThe function should raise an error if the\
    \ vector contains more than 10 non-integer elements.\nThe function should raise\
    \ an error if the vector contains more than 10 negative numbers.\nThe function\
    \ should raise an error if the vector contains more than 10 non-negative elements.\n\
    The function should raise an error if the vector contains more than 10 non-integer\
    \ elements.\nThe function should raise an error if the vector contains more than\
    \ 10 negative numbers.\nThe function should raise an error if the vector \nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp59gfmj7u.jl:16\nin expression starting at\
    \ /tmp/tmp59gfmj7u.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_product = numbers[1] +\
    \ numbers[2] \n        product = 1\n        for i in numbers[2:end] \n       \
    \     product = product * i \n        sum_product = sum_product + product \n \
    \       return (sum_product, product) \nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, \nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl2xn7fds.jl:19\nin expression starting at\
    \ /tmp/tmpl2xn7fds.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_product = numbers[1] +\
    \ numbers[2]\n        product = numbers[1] * numbers[2]\n        return (sum_product,\
    \ product)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns the sum of the squares of the integers in the\
    \ vector.\n>>> sum_square_of_vector([1, 2, 3, 4])\n25\n>>> sum_square_of_vector([-1,\
    \ -2, -3, -4])\n25\n>>> sum_square_of_vector([-1, -2, -3, -4, -5])\n25\n>>> sum_square_of_vector([-1,\
    \ -2, -3, -4, -5, -6])\n25\n>>> sum_square_of_vector([-1, -2, -3, -4, -5, -6,\
    \ -7])\n25\n>>> sum_square_of_vector([-1, -2, -3, -4, -5, -6, -7, -8])\n25\n>>>\
    \ sum_square_of_vector([-1, -2, -3, -4, -5, -6, -7, -8, -9])\n25\n>>> sum_square_of_vector([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9, -10])\n25\n>>> sum_square_of_vector([-1, -2,\
    \ -3, -4, -5, -6, -7, -8, -9, -10, -11])\n25\n>>> sum_square_of_vector([-1, -2,\
    \ -3, -4, -5, -6, -7, -8, -9, -10, -11, -12])\n25\n>>> sum_square_of_vector([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13])\n25\n>>> sum_square_of_vector([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14])\n25\n>>> sum_square_of_vector([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15])\n25\n>>> sum_square_of_vector([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16])\n25\n>>>\
    \ sum_square_of_vector([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13,\
    \ -14, -15, -16, -17])\n25\n>>> sum_square_of_vector([-1, -2, -3, -4, -5, -6,\
    \ -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18])\n25\n>>> sum_square_of_\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd0pa2k6r.jl:17\nin expression starting at\
    \ /tmp/tmpd0pa2k6r.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum = 0\n   \
    \ product = 1\n    for number in numbers\n        sum += number\n        product\
    \ *= number\n    return (sum, product)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the squares of the numbers in a vector.\n    >>> sum_of_squares([1,2,3])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    \nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7lgqnf__.jl:16\nin expression starting at\
    \ /tmp/tmp7lgqnf__.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = numbers[1]\n\
    \    prod = 1\n    for number in numbers[2:end]\n        sum_ = sum_ + number\n\
    \        prod = prod * number\n    end\n    return (sum_, prod)\nend\n</cell>\n\
    <code language=julia-1.0>\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8xk6r0jt.jl:17\nin expression starting at\
    \ /tmp/tmp8xk6r0jt.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for n in numbers\n        sum_ = sum_ + n\n        product_\
    \ = product_ * n\n    return (sum_, product_)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the squares of the numbers in a vector.\n    >>> sum_of_squares([1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeyru306g.jl:16\nin expression starting at\
    \ /tmp/tmpeyru306g.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_ = numbers[1] + numbers[2]\
    \ \n        prod_ = numbers[1] * numbers[2] \n        return (sum_, prod_) \n\
    end \n</cell>\n<text>\nExercise 7\nWrite a function that takes in a list of integers\
    \ and returns the sum of the numbers in the list and the product of the numbers\
    \ in the list.\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmzodvh3k.jl:16\nin expression starting at\
    \ /tmp/tmpmzodvh3k.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ numbers[1]\n    product = 1\n    for i in numbers[2:end]\n        sum_product\
    \ += i\n        product *= i\n    return (sum_product, product)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp43_k3j51.jl:16\nin expression starting at\
    \ /tmp/tmp43_k3j51.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_product = numbers[1] +\
    \ numbers[2] \n        product = 1\n        for i in numbers[2:end] \n       \
    \     product *= i \n        return (sum_product, product) \nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphtgup3xm.jl:18\nin expression starting at\
    \ /tmp/tmphtgup3xm.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = numbers[1]\n\
    \    product_ = 1\n    for number in numbers[2:end]\n        sum_ += number\n\
    \        product_ *= number\n    return (sum_, product_)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpysrnglgf.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpysrnglgf.jl:1\n\
    in expression starting at /tmp/tmpysrnglgf.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum .(numbers)\n    product_product = 1\n    for i in numbers\n        product_product\
    \ *= i\n    end\n    return (sum_product, product_product)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"sum .\" at\
    \ /tmp/tmpes48c0h4.jl:9\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpes48c0h4.jl:9\n\
    in expression starting at /tmp/tmpes48c0h4.jl:9\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = reduce(mul, numbers, 1)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ugu90nw.jl:13\nin expression starting at\
    \ /tmp/tmp_ugu90nw.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = prod(numbers)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the squares\
    \ of the numbers in a vector.\n    >>> sum_square_of_numbers([1, 2, 3, 4])\n \
    \   25\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnu1hya6v.jl:13\nin expression starting at\
    \ /tmp/tmpnu1hya6v.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum = numbers[1]\n       \
    \ product = 1\n        for i in numbers[2:end]\n            sum = sum + i\n  \
    \          product = product * i\n        return (sum, product)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the integers in the vector.\nThe function should return nothing if\
    \ the vector is empty.\nThe function should raise an error if the vector contains\
    \ non-integer values.\nThe function should raise an error if the vector contains\
    \ negative values.\nThe function should raise an error if the vector contains\
    \ values greater than the largest integer supported by the machine.\nThe function\
    \ should raise an error if the vector contains values less than the smallest integer\
    \ supported by the machine.\nThe function should raise an error if the vector\
    \ contains values outside the range of the machine.\nThe function should raise\
    \ an error if the vector contains values outside the range of the machine.\nThe\
    \ function should raise an error if the vector contains values outside the range\
    \ of the machine.\nThe function should raise an error if the vector contains values\
    \ outside the range of the machine.\nThe function should raise an error if the\
    \ vector contains values outside the range of the machine.\nThe function should\
    \ raise an error if the vector contains values outside the range of the machine.\n\
    The function should raise an error if the vector contains values outside the range\
    \ of the machine.\nThe function should raise an error if the vector contains values\
    \ outside the range of the machine.\nThe function should raise an error if the\
    \ vector contains values outside the range of the machine.\nThe function should\
    \ raise an error if the vector contains values outside the range of the machine.\n\
    The function should raise an error if the vector contains values outside the range\
    \ of the machine.\nThe function should raise an error if the vector contains values\
    \ outside the range of the machine.\nThe function should raise an error if the\
    \ vector contains values outside the range of the machine.\nThe function should\
    \ raise an error if the vector contains values outside the range of the machine.\n\
    The function should raise an error if the vector contains values outside the range\
    \ of the machine.\nThe function should raise an error if the vector contains values\
    \ outside the range of the machine.\nThe function should raise an error if the\
    \ vector contains values outside the range of the machine.\nThe function should\
    \ raise an error if the vector contains values outside the range of the machine.\n\
    The function should raise an error if the vector contains values outside the range\
    \ of the machine.\nThe function should raise an error if the vector contains values\
    \ outside the range of the machine.\nThe function should raise an error if the\
    \ vector contains values outside the range of the machine.\nThe function should\
    \ raise an error if the vector contains values outside the range of the machine.\n\
    The function should raise an error if the vector contains values outside the range\
    \ of the machine.\nThe function should raise an error if the vector \nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpechxo9au.jl:19\nin expression starting at\
    \ /tmp/tmpechxo9au.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = prod(numbers)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,\
    \ 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ and product of the numbers in a vector, where the vector is sorted in ascending\
    \ order.\n    >>> sum_product_sorted([5, 4, 3, 2, 1])\n    (10, 24)\n    >>> sum_product_sorted([5,\
    \ 4, 3, 2, 1])\n    (10, 24)\n    >>> sum_product_sorted([5, 4, 3, 2, 1])\n  \
    \  (10, 24)\n    >>> sum_product_sorted([5, 4, 3, 2, 1])\n    (10, 24)\n    >>>\
    \ sum_product_sorted([5, 4, 3, 2, 1])\n    (10, 24)\n    >>> sum_product_sorted([5,\
    \ 4, 3, 2, 1])\n    (10, 24)\n    >>> sum_product_sorted([5, 4, 3, 2, 1])\n  \
    \  (10, 24)\n    >>> sum_product_sorted([5, 4, 3, 2, 1])\n    (10, 24)\n    >>>\
    \ sum_product_sorted([5, 4, 3, 2, 1])\n    (10, 24)\n    >>> sum_product_sorted([5,\
    \ 4, 3, 2, 1])\n    (10, 24)\n    >>> sum_product_sorted([5, 4, 3, 2, 1])\n  \
    \  (10, 24)\n    >>> sum_product_sorted([5, 4, 3, 2, 1])\n    (10, 24)\n    >>>\
    \ sum_product_sorted([5, 4, 3, 2, 1])\n    (10, 24)\n    >>> sum_product_sorted([5,\
    \ 4, 3, 2, 1])\n    (10, 24)\n    >>> sum_product_sorted([5, 4, 3, 2, 1])\n  \
    \  (10, 24)\n    >>> sum_product_sorted([5, 4, 3, 2, 1])\n    (10, 24)\n    >>>\
    \ sum_product_sorted([5, 4, 3, 2, 1])\n    (10, 24)\n    >>> sum_product_sorted([5,\
    \ 4, 3, 2, 1])\n    (10, 24)\n    >>> sum_product_sorted([5, 4, 3, 2, 1])\n  \
    \  (10, 24)\n    >>> sum_product_sorted([5, 4, 3, 2, 1])\n    (10, 24)\n    >>>\
    \ sum_product_sorted([5, 4, 3, 2, 1])\n    (10, 24)\n    >>> sum_product_sorted([5,\
    \ 4, 3, 2, 1])\n    (10, 24)\n    >>> sum_product_sorted([5, 4, 3, 2, 1])\n  \
    \  (10, 24)\n    >>> sum_product_sorted([5, 4, 3, 2, 1])\n    (10, 24)\n    >>>\
    \ sum_product_sorted([5, 4, 3, 2, 1])\n    (10, 24)\n    >>> sum_product_sorted([5,\
    \ 4, 3, 2, 1])\n    (10, 24)\n    >>> sum_product_sorted([5, 4, 3, 2, 1])\n  \
    \  (10, 24)\n    >>> sum_product_sorted([5, 4, 3, 2, 1])\n    (10, 24)\n    >>>\
    \ sum_product_sorted([5, 4, 3, 2, 1])\n    (10, 24)\n    >>> sum_product_sorted([5,\
    \ 4, 3, 2, 1])\n    (10, 24)\n    >>> sum_product_sorted([5, 4, 3, 2, 1])\n  \
    \  (10, 24)\n    >>> sum_product_sorted([5, 4, 3, 2, 1])\n    (10, 24)\n    >>>\
    \ sum_product_sorted([5, 4, 3, 2, 1])\n    (10, 24)\n    >>> sum_product_sorted([5,\
    \ 4, 3, 2, 1])\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7snlfhhc.jl:13\nin expression starting at\
    \ /tmp/tmp7snlfhhc.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = reduce(mul, numbers, 1)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<text>\nExercise 2: Write a function that\
    \ returns the product of a given vector of integers raised to the power of another\
    \ given integer. For example, given [1,2,3] and 2, it should return $1 \\times\
    \ 2 \\times 3$. Make sure to handle non-integer powers as well.\nHint: use reduce\
    \ and pow\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5xgvady_.jl:13\nin expression starting at\
    \ /tmp/tmp5xgvady_.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum = 0\n   \
    \ product = 1\n    for number in numbers\n        sum += number\n        product\
    \ *= number\n    return (sum, product)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the squares of the integers in a vector.\n    >>> sum_square_of_vector([1,2,3])\n\
    \    25\n    >>> sum_square_of_vector([-1,-2,-3])\n    9\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphou8025m.jl:16\nin expression starting at\
    \ /tmp/tmphou8025m.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum = numbers[1]\n       \
    \ product = 1\n        for i in 2:length(numbers) \n            sum += numbers[i]\n\
    \            product *= numbers[i]\n        end\n        return (sum, product)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the squares of the\
    \ numbers in a vector.\n    >>> sum_of_squares([1,2,3])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares([1,2,-3,4])\n    25\n    >>> sum_of_squares([1,2,-3,4])\n\
    \    25\n    >>> sum_of_squares\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4210hf2l.jl:21\nin expression starting at\
    \ /tmp/tmp4210hf2l.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for n in numbers\n        sum_ = sum_ + n\n        product_\
    \ = product_ * n\n    return (sum_, product_)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns the sum of the squares of the integers in the\
    \ vector.\n    >>> square_sum([])\n    0.0\n    >>> square_sum([1, 2, 3, 4])\n\
    \    25.0\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy_20skfp.jl:16\nin expression starting at\
    \ /tmp/tmpy_20skfp.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum = Int64(0)\n\
    \    prod = Int64(1)\n    for n in numbers\n        sum += n\n        prod *=\
    \ n\n    return (sum, prod)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,\
    \ 2, 3, 4])\n</cell>\n<text>\nExercise 3\nWrite a function that takes an integer\
    \ vector and a number $k$ and returns the $k$-th smallest element of the vector.\n\
    For example, if the vector is [5, 7, 9, 11, 13] and $k = 1$, the function should\
    \ return $7$.\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpif0z2kct.jl:16\nin expression starting at\
    \ /tmp/tmpif0z2kct.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for number in numbers\n        sum_ = sum_ + number\n   \
    \     product_ = product_ * number\n    return (sum_, product_)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum and product of a given vector of integers\
    \ where the sum is greater than the product and vice versa.\n    >>> sum_product_greater_than_product([])\n\
    \    (0, 1)\n    >>> sum_product_greater_than_product([1, 2, 3, 4])\n    (4, 12)\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_bjpf6uu.jl:16\nin expression starting at\
    \ /tmp/tmp_bjpf6uu.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for number in numbers\n        sum_ = sum_ + number\n   \
    \     product_ = product_ * number\n    return (sum_, product_)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the squares of the integers in a\
    \ vector.\n    >>> sum_of_squares([4, 9, 16, 25])\n    490\n    >>> sum_of_squares([-1,\
    \ 0, 1, 2, 3])\n    6\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8oqy27dk.jl:16\nin expression starting at\
    \ /tmp/tmp8oqy27dk.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ numbers[1]\n    product_of_numbers = numbers[1]\n    for number in numbers[2:end]\n\
    \        sum_product = sum_product + number\n        product_of_numbers = product_of_numbers\
    \ * number\n    end\n    return (sum_product, product_of_numbers)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_product([1,2,3,4,5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes as input a vector of integers and a number $k$\
    \ and returns the sum of the first $k$ integers in the vector.\nThe function should\
    \ return $k$ when $k$ is less than or equal to 0.\nThe function should return\
    \ $0$ when $k$ is greater than the length of the vector.\nThe function should\
    \ return $k$ when $k$ is greater than or equal to the length of the vector.\n\
    The function should return $k$ when $k$ is equal to 0.\nThe function should return\
    \ $k$ when $k$ is less than or equal to the length of the vector.\nThe function\
    \ should return $k$ when $k$ is greater than or equal to the length of the vector.\n\
    The function should return $k$ when $k$ is equal to 0.\nThe function should return\
    \ $k$ when $k$ is less than or equal to the length of the vector.\nThe function\
    \ should return $k$ when $k$ is greater than or equal to the length of the vector.\n\
    The function should return $k$ when $k$ is equal to 0.\nThe function should return\
    \ $k$ when $k$ is less than or equal to the length of the vector.\nThe function\
    \ should return $k$ when $k$ is greater than or equal to the length of the vector.\n\
    The function should return $k$ when $k$ is equal to 0.\nThe function should return\
    \ $k$ when $k$ is less than or equal to the length of the vector.\nThe function\
    \ should return $k$ when $k$ is greater than or equal to the length of the vector.\n\
    The function should return $k$ when $k$ is equal to 0.\nThe function should return\
    \ $k$ when $k$ is less than or equal to the length of the vector.\nThe function\
    \ should return $k$ when $k$ is greater than or equal to the length of the vector.\n\
    The function should return $k$ when $k$ is equal to 0.\nThe function should return\
    \ $k$ when $k$ is less than or equal to the length of the vector.\nThe function\
    \ should return $k$ when $k$ is greater than or equal to the length of the vector.\n\
    The function should return $k$ when $k$ is equal to 0.\nThe function should return\
    \ $k$ when $k$ is less than or equal to the length of the vector.\nThe function\
    \ should return $k$ when $k$\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp08_nz6ag.jl:17\nin expression starting at\
    \ /tmp/tmp08_nz6ag.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = reduce(mul, numbers, 1)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the squares\
    \ of the integers in a vector.\n    >>> sum_square_of_vector([1, 2, 3, 4])\n \
    \   25\n    >>> sum_square_of_vector([-1, 2, -3, 4])\n    14\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp26xkd7x0.jl:13\nin expression starting at\
    \ /tmp/tmp26xkd7x0.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for i in numbers\n        sum_ = sum_ + i\n        product_\
    \ = product_ * i\n    return (sum_, product_)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1faldip_.jl:16\nin expression starting at\
    \ /tmp/tmp1faldip_.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for n in numbers\n        sum_ = sum_ + n\n        product_\
    \ = product_ * n\n    return (sum_, product_)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphziezhlc.jl:16\nin expression starting at\
    \ /tmp/tmphziezhlc.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for i in numbers\n        sum_ += i\n        product_ *=\
    \ i\n    return (sum_, product_)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpylnf0je_.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpylnf0je_.jl:1\n\
    in expression starting at /tmp/tmpylnf0je_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum = zero(Int64)\n\
    \    product = one(Int64)\n    for number in numbers\n        sum += number\n\
    \        product *= number\n    return (sum, product)\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of integers and a number $n$ and returns a vector of integers\
    \ $[x_1, x_2, ..., x_n]$, where $x_i$ is $i$th element of the vector.\nFor example,\
    \ if the vector is [1, 2, 3, 4], the function should return [1, 1, 2, 2, 3, 3,\
    \ 4, 4]\nHint: use map\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpptk1sclx.jl:16\nin expression starting at\
    \ /tmp/tmpptk1sclx.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = prod(numbers)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpch1s2zh0.jl:13\nin expression starting at\
    \ /tmp/tmpch1s2zh0.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = reduce(mul, numbers, 1)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the squares\
    \ of the integers in a vector.\n    >>> sum_of_squares([1,2,3])\n    25\n    >>>\
    \ sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp16y16ezp.jl:13\nin expression starting at\
    \ /tmp/tmp16y16ezp.jl:13\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = prod(numbers)\n    return (sum_product,\
    \ product_of_numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for i in numbers\n        sum_ = sum_ + i\n        product_\
    \ = product_ * i\n    return (sum_, product_)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the squares of the numbers in a vector.\n    >>> sum_of_squares([4,\
    \ 9, 16])\n    49\n    >>> sum_of_squares([-1, 0, 1])\n    1\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb7f2mgj_.jl:16\nin expression starting at\
    \ /tmp/tmpb7f2mgj_.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = Int64(0)\n\
    \    prod_ = Int64(1)\n    for n in numbers\n        sum_ = sum_ + n\n       \
    \ prod_ = prod_ * n\n    return (sum_, prod_)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the squares of the integers in a vector. \nThe function should\
    \ work for both vectors of integers and vectors of floating point numbers.\nThe\
    \ function should work for both empty vectors and vectors with at least one element.\n\
    The function should work for vectors of any length.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp34jc457o.jl:16\nin expression starting at\
    \ /tmp/tmp34jc457o.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for number in numbers\n        sum_ = sum_ + number\n   \
    \     product_ = product_ * number\n    end\n    return (sum_, product_)\nend\n\
    </cell>\n<code language=julia-1.4>\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3,4,5]) == (15, 25)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the squares of the numbers in a vector.\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8l24vt8z.jl:17\nin expression starting at\
    \ /tmp/tmp8l24vt8z.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum = zero(Int64)\n\
    \    product = one(Int64)\n    for n in numbers\n        sum += n\n        product\
    \ *= n\n    return (sum, product)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,\
    \ 2, 3, 4])\n</cell>\n<text>\nExercise 4\nWrite a function that returns the sum\
    \ of the squares of the numbers in a vector. \nThe function should work for both\
    \ real and complex numbers.\nThe function should work for vectors of any length.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for vectors of any length.\nThe function should work for vectors of any\
    \ length.\nThe function should work for vectors of any length.\nThe function should\
    \ work for vectors of any length.\nThe function should work for vectors of any\
    \ length.\nThe function should work for vectors of any length.\nThe function should\
    \ work for vectors of any length.\nThe function should work for vectors of any\
    \ length.\nThe function should work for vectors of any length.\nThe function should\
    \ work for vectors of any length.\nThe function should work for vectors of any\
    \ length.\nThe function should work for vectors of any length.\nThe function should\
    \ work for vectors of any length.\nThe function should work for vectors of any\
    \ length.\nThe function should work for vectors of any length.\nThe function should\
    \ work for vectors of any length.\nThe function should work for vectors of any\
    \ length.\nThe function should work for vectors of any length.\nThe function should\
    \ work for vectors of any length.\nThe function should work for vectors of any\
    \ length.\nThe function should work for vectors of any length.\nThe function should\
    \ work for vectors of any length.\nThe function should work for vectors of any\
    \ length.\nThe function should work for vectors of any length.\nThe function should\
    \ work for vectors of any length.\nThe function should work for vectors of any\
    \ length.\nThe function should work for vectors of any length.\nThe function should\
    \ work for vectors of any length.\nThe function should work for vectors of any\
    \ length.\nThe function should work for vectors of any length.\nThe function should\
    \ work for vectors of any length.\nThe function should work for vectors of any\
    \ length.\nThe function should work for vectors of any length.\nThe function should\
    \ work for vectors of any length.\nThe function should work for vectors of any\
    \ length.\nThe function should work for vectors of any length.\nThe function should\
    \ work for vectors of any length.\nThe function should work for vectors of any\
    \ length.\nThe function should work for vectors of any length.\nThe function should\
    \ work for vectors of any length.\nThe function should work for vectors of any\
    \ length.\nThe function should work for vectors of any length.\nThe function should\
    \ work for vectors of any length.\nThe function should work for vectors of any\
    \ length.\nThe function should work for vectors of any length.\nThe function should\
    \ work for \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp44gch68_.jl:16\nin expression starting at\
    \ /tmp/tmp44gch68_.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum = 0\n   \
    \ product = 1\n    for number in numbers\n        sum += number\n        product\
    \ *= number\n    return (sum, product)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns a vector of integers containing the squares\
    \ of the integers in the vector.\nThe function should return an empty vector if\
    \ the vector is empty.\nThe function should return the same vector if the vector\
    \ has only one element.\nThe function should return the same vector if the vector\
    \ has more than one element.\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpscr25ds7.jl:16\nin expression starting at\
    \ /tmp/tmpscr25ds7.jl:16\n"
  stdout: ''
- exit_code: 0
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = prod(numbers)\n    return (sum_product,\
    \ product_of_numbers)\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: OK
  stderr: 'Test Summary: | Pass  Total

    test set      |    5      5

    '
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_product = numbers[1]\n\
    \        product = 1\n        for i in numbers[2:end]\n            product *=\
    \ i\n            sum_product += product\n        return (sum_product, product)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_s7_q845.jl:20\nin expression starting at\
    \ /tmp/tmp_s7_q845.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_product = numbers[1] +\
    \ numbers[0] \n        prod_product = 1\n        for i in 2:length(numbers) \n\
    \            sum_product += numbers[i] \n            prod_product *= numbers[i]\
    \ \n        return (sum_product, prod_product) \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the squares of the numbers in a\
    \ vector. \nThe vector can contain any number of elements.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function \nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8vgk7rna.jl:19\nin expression starting at\
    \ /tmp/tmp8vgk7rna.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = reduce(mul, numbers, 1)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.\nThe squares\
    \ should be calculated using the formula $x^2$\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpppt5w__m.jl:13\nin expression starting at\
    \ /tmp/tmpppt5w__m.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for number in numbers\n        sum_ = sum_ + number\n   \
    \     product_ = product_ * number\n    end\n    return (sum_, product_)\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxr6k6v82.jl:17\nin expression starting at\
    \ /tmp/tmpxr6k6v82.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_product = numbers[1] +\
    \ numbers[2] \n        return (sum_product, numbers[1] * numbers[2]) \nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the squares of the\
    \ integers in a vector.\n    >>> sum_of_squares([4, 9, 16])\n    49\n    >>> sum_of_squares([4,\
    \ 9, 16, 25])\n    49\n    >>> sum_of_squares([4, 9, 16, 25, 36])\n    49\n  \
    \  >>> sum_of_squares([4, 9, 16, 25, 36, 49])\n    49\n    >>> sum_of_squares([4,\
    \ 9, 16, 25, 36, 49, 64])\n    49\n    >>> sum_of_squares([4, 9, 16, 25, 36, 49,\
    \ 64, 81])\n    49\n    >>> sum_of_squares([4, 9, 16, 25, 36, 49, 64, 81, 100])\n\
    \    49\n    >>> sum_of_squares([4, 9, 16, 25, 36, 49, 64, 81, 100, 127])\n  \
    \  49\n    >>> sum_of_squares([4, 9, 16, 25, 36, 49, 64, 81, 100, 127, 144])\n\
    \    49\n    >>> sum_of_squares([4, 9, 16, 25, 36, 49, 64, 81, 100, 127, 144,\
    \ 160])\n    49\n    >>> sum_of_squares([4, 9, 16, 25, 36, 49, 64, 81, 100, 127,\
    \ 144, 160, 177])\n    49\n    >>> sum_of_squares([4, 9, 16, 25, 36, 49, 64, 81,\
    \ 100, 127, 144, 160, 177, 193])\n    49\n    >>> sum_of_squares([4, 9, 16, 25,\
    \ 36, 49, 64, 81, 100, 127, 144, 160, 177, 193, 207])\n    49\n    >>> sum_of_squares([4,\
    \ 9, 16, 25, 36, 49, 64, 81, 100, 127, 144, 160, 177, 193, 207, 225])\n    49\n\
    \    >>> sum_of_squares([4, 9, 16, 25, 36, 49, 64, 81, 100, 127, 144, 160, 177,\
    \ 193, 207, 225, 241])\n    49\n    >>> sum_of_squares([4, 9, 16, 25, 36, 49,\
    \ 64, 81, 100, 127, 144, 160, 177, 193, 207, 225, 241, 258])\n    49\n    >>>\
    \ sum_of_squares([4, 9, 16, 25, 36, 49, 64, 81, 100, 127, 144, 160, 177, 193,\
    \ 207, 225, 241, 258, 274])\n    49\n    >>> sum_of_squares([4, 9, 16, 25, 36,\
    \ 49, 64, 81, 100, 127, 144, 160, 177, 193, 207, 225, \nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyd18v4oz.jl:15\nin expression starting at\
    \ /tmp/tmpyd18v4oz.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for number in numbers\n        sum_ = sum_ + number\n   \
    \     product_ = product_ * number\n    end\n    return (sum_, product_)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in a vector of integers and returns the sum of\
    \ the integers squared. \nThe function should only take in a vector of integers\
    \ and return a vector of integers. \nThe function should only return an Int64\
    \ type. \nThe function should only return an Int64 type. \nThe function should\
    \ only return an Int64 type. \nThe function should only return an Int64 type.\
    \ \nThe function should only return an Int64 type. \nThe function should only\
    \ return an Int64 type. \nThe function should only return an Int64 type. \nThe\
    \ function should only return an Int64 type. \nThe function should only return\
    \ an Int64 type. \nThe function should only return an Int64 type. \nThe function\
    \ should only return an Int64 type. \nThe function should only return an Int64\
    \ type. \nThe function should only return an Int64 type. \nThe function should\
    \ only return an Int64 type. \nThe function should only return an Int64 type.\
    \ \nThe function should only return an Int64 type. \nThe function should only\
    \ return an Int64 type. \nThe function should only return an Int64 type. \nThe\
    \ function should only return an Int64 type. \nThe function should only return\
    \ an Int64 type. \nThe function should only return an Int64 type. \nThe function\
    \ should only return an Int64 type. \nThe function should only return an Int64\
    \ type. \nThe function should only return an Int64 type. \nThe function should\
    \ only return an Int64 type. \nThe function should only return an Int64 type.\
    \ \nThe function should only return an Int64 type. \nThe function should only\
    \ return an Int64 type. \nThe function should only return an Int64 type. \nThe\
    \ function should only return an Int64 type. \nThe function should only return\
    \ an Int64 type. \nThe function should only return an Int64 type. \nThe function\
    \ should only return an Int64 type. \nThe function should only return an Int64\
    \ type. \nThe function should only return an Int64 type. \nThe function should\
    \ only return an Int64 type. \nThe function should only return an Int64 type.\
    \ \nThe function should only return an Int64 type. \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb9iqhecu.jl:17\nin expression starting at\
    \ /tmp/tmpb9iqhecu.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_product = numbers[1]\n\
    \        product_of_numbers = numbers[1]\n        for number in numbers[2:end]\n\
    \            sum_product = sum_product + number\n            product_of_numbers\
    \ = product_of_numbers * number\n        end\n        return (sum_product, product_of_numbers)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3: Write a function that takes in a list\
    \ of numbers and returns the sum of the numbers in the list and the product of\
    \ the numbers in the list. Test your function with some examples. Make sure you\
    \ use recursion to solve the problem.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnvxb24n4.jl:21\nin expression starting at\
    \ /tmp/tmpnvxb24n4.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_product = numbers[1]\n\
    \        product_of_numbers = numbers[1]\n        for i in 2:length(numbers) \n\
    \            sum_product = sum_product + numbers[i]\n            product_of_numbers\
    \ = product_of_numbers * numbers[i]\n        end\n        return (sum_product,\
    \ product_of_numbers)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptim2sdob.jl:21\nin expression starting at\
    \ /tmp/tmptim2sdob.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum = numbers[1] \n      \
    \  product = numbers[1] \n        for i in 2:length(numbers) \n            sum\
    \ = sum + numbers[i] \n            product = product * numbers[i] \n        endfor\
    \ \n        return (sum, product) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sum_product([1, 2, 3]) == (6, 3)\n@assert sum_product([1, 1, 1]) == (0,\
    \ 1)\n@assert sum_product([1, 1, 1]) == (0, 1)\n@assert sum_product([1, 1, 1])\
    \ == (0, 1)\n@assert sum_product([1, 1, 1]) == (0, 1)\n@assert sum_product([1,\
    \ 1, 1]) == (0, 1)\n@assert sum_product([1, 1, 1]) == (0, 1)\n@assert sum_product([1,\
    \ 1, 1]) == (0, 1)\n@assert sum_product([1, 1, 1]) == (0, 1)\n@assert sum_product([1,\
    \ 1, 1]) == (0, 1)\n@assert sum_product([1, 1, 1]) == (0, 1)\n@assert sum_product([1,\
    \ 1, 1]) == (0, 1)\n@assert sum_product([1, 1, 1]) == (0, 1)\n@assert sum_product([1,\
    \ 1, 1]) == (0, 1)\n@assert sum_product([1, 1, 1]) == (0, 1)\n@assert sum_product([1,\
    \ 1, 1]) == (0, 1)\n@assert sum_product([1, 1, 1]) == (0, 1)\n@assert sum_product([1,\
    \ 1, 1]) == (0, 1)\n@assert sum_product([1, 1, 1]) == (0, 1)\n@assert sum_product([1,\
    \ 1, 1]) == (0, 1)\n@assert sum_product([1, 1, 1]) == (0, 1)\n@assert sum_product([1,\
    \ 1, 1]) == (0, 1)\n@assert sum_product([1, 1, 1]) == (0, 1)\n@assert sum_product([1,\
    \ 1, 1]) == (0, 1)\n@assert sum_product([1, 1, 1]) == (0, 1)\n@assert sum_product([1,\
    \ 1, 1]) == (0, 1)\n@assert sum_product([1, 1, 1]) == (0, 1)\n@assert sum_product([1,\
    \ 1, 1]) == (0, 1)\n@assert sum_product([1, 1, 1]) == (0, 1)\n@assert sum_product([1,\
    \ 1, 1]) == (0, 1)\n@assert sum_product([1, 1, 1]) == (0, 1)\n@assert sum_product([1,\
    \ 1, 1]) == (0, 1)\n@assert sum_product([1, 1, 1]) == (0, 1)\n@assert sum_product([1,\
    \ 1, 1]) == (0, 1)\n@assert sum_product([1, 1, 1]) == (0, 1)\n@assert sum_product([1,\
    \ 1, 1]) == (0, 1)\n@assert sum_product([1, 1, 1]) == (0, 1)\n@assert sum_product([1,\
    \ 1, 1]) == (0, 1)\n@assert sum_product([1, 1, 1]) == (0, 1)\n@assert sum_product([1,\
    \ 1, 1]) == (0, 1)\n@assert sum_product([1, 1, 1]) == (0, 1)\n@assert sum_product([1,\
    \ 1, 1]) == (0, 1)\n@assert sum_product([1, 1, 1]) == (0, 1)\n@assert sum_product([1,\
    \ 1, 1]) == (0, 1)\n@\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxyrwijwb.jl:21\nin expression starting at\
    \ /tmp/tmpxyrwijwb.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum = 0\n   \
    \ product = 1\n    for number in numbers\n        sum += number\n        product\
    \ *= number\n    return (sum, product)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3,4,5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ as input a vector of integers and returns the sum of the squares of the integers\
    \ in the vector.\nThe function should work for both vectors of integers and vectors\
    \ of floating point numbers.\nThe function should also work for vectors of negative\
    \ numbers.\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa1bgngd6.jl:16\nin expression starting at\
    \ /tmp/tmpa1bgngd6.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = reduce(mul, numbers, 1)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ugu90nw.jl:13\nin expression starting at\
    \ /tmp/tmp_ugu90nw.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = Int64(0)\n\
    \    prod = Int64(1)\n    for n in numbers\n        sum_ = sum_ + n\n        prod\
    \ = prod * n\n    return (sum_, prod)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the squares of the numbers in a vector.\n    >>> sum_of_squares([1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzs8gzg7q.jl:16\nin expression starting at\
    \ /tmp/tmpzs8gzg7q.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for number in numbers\n        sum_ = sum_ + number\n   \
    \     product_ = product_ * number\n    end\n    return (sum_, product_)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the integers in the vector.\nThe sum of the squares should be equal\
    \ to the sum of the squares of the integers in the vector.\nThe function should\
    \ return nothing if the vector is empty.\nThe function should raise an error if\
    \ the vector contains non-integer values.\nThe function should raise an error\
    \ if the vector contains negative values.\nThe function should raise an error\
    \ if the vector contains values greater than the maximum integer value.\nThe function\
    \ should raise an error if the vector contains values less than the minimum integer\
    \ value.\nThe function should raise an error if the vector contains duplicate\
    \ values.\nThe function should raise an error if the vector contains negative\
    \ values.\nThe function should raise an error if the vector contains values greater\
    \ than the maximum integer value.\nThe function should raise an error if the vector\
    \ contains values less than the minimum integer value.\nThe function should raise\
    \ an error if the vector contains duplicate values.\nThe function should raise\
    \ an error if the vector contains negative values.\nThe function should raise\
    \ an error if the vector contains values greater than the maximum integer value.\n\
    The function should raise an error if the vector contains values less than the\
    \ minimum integer value.\nThe function should raise an error if the vector contains\
    \ duplicate values.\nThe function should raise an error if the vector contains\
    \ negative values.\nThe function should raise an error if the vector contains\
    \ values greater than the maximum integer value.\nThe function should raise an\
    \ error if the vector contains values less than the minimum integer value.\nThe\
    \ function should raise an error if the vector contains duplicate values.\nThe\
    \ function should raise an error if the vector contains negative values.\nThe\
    \ function should raise an error if the vector contains values greater than the\
    \ maximum integer value.\nThe function should raise an error if the vector contains\
    \ values less than the minimum integer value.\nThe function should raise an error\
    \ if the vector contains duplicate values.\nThe function should raise an error\
    \ if the vector contains negative values.\nThe function should raise an error\
    \ if the vector contains values greater than the maximum integer value.\nThe function\
    \ should raise an error if the vector contains values less than the minimum integer\
    \ value.\nThe function should raise an error if the vector contains duplicate\
    \ values.\nThe function should raise an error if the vector contains negative\
    \ values.\nThe function should raise an error if the vector contains values greater\
    \ than the maximum integer value.\nThe function should raise an error if the vector\
    \ contains values less than the minimum integer value.\nThe function should raise\
    \ an error if the vector contains duplicate values.\nThe function should raise\
    \ an error if the vector contains negative values.\nThe function should raise\
    \ an error if the vector contains values greater than the maximum integer value.\n\
    The function should raise an error if the vector \nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6gsa9snv.jl:17\nin expression starting at\
    \ /tmp/tmp6gsa9snv.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_product = numbers[1] +\
    \ numbers[2]\n        product_product = 1\n        for i in numbers[2:end]\n \
    \           product_product *= i\n        end\n        return (sum_product, product_product)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpibryisaz.jl:20\nin expression starting at\
    \ /tmp/tmpibryisaz.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum = zero(Int64)\n\
    \    product = one(Int64)\n    for n in numbers\n        sum += n\n        product\
    \ *= n\n    return (sum, product)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_epgtnps.jl:8\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_epgtnps.jl:1\n\
    in expression starting at /tmp/tmp_epgtnps.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_product = numbers[1]\n\
    \        product = 1\n        for i in numbers[2:end]\n            product *=\
    \ i\n            sum_product += product\n        return (sum_product, product)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes in a list\
    \ of integers and returns the sum of the integers in the list.\nWrite a function\
    \ that takes in a list of integers and returns the product of the integers in\
    \ the list.\nWrite a function that takes in a list of integers and returns the\
    \ sum of the integers in the list divided by the product of the integers in the\
    \ list.\nWrite a function that takes in a list of integers and returns the sum\
    \ of the integers in the list multiplied by the product of the integers in the\
    \ list.\nWrite a function that takes in a list of integers and returns the sum\
    \ of the integers in the list divided by the product of the integers in the list.\n\
    Write a function that takes in a list of integers and returns the sum of the integers\
    \ in the list multiplied by the product of the integers in the list.\nWrite a\
    \ function that takes in a list of integers and returns the sum of the integers\
    \ in the list divided by the product of the integers in the list.\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkxmlp3pr.jl:20\nin expression starting at\
    \ /tmp/tmpkxmlp3pr.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for number in numbers\n        sum_ = sum_ + number\n   \
    \     product_ = product_ * number\n    end\n    return sum_, product_\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, \nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9n96j71t.jl:17\nin expression starting at\
    \ /tmp/tmp9n96j71t.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = reduce(mul, numbers, 1)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a list of numbers\
    \ and returns the product of all the numbers in the list multiplied by the sum\
    \ of the numbers in the list.\n    >>> product([1,2,3])\n    6\n    >>> product([1,2,3])\n\
    \    6\n    >>> product([1,2,3])\n    6\n    >>> product([1,2,3])\n    6\n   \
    \ >>> product([1,2,3])\n    6\n    >>> product([1,2,3])\n    6\n    >>> product([1,2,3])\n\
    \    6\n    >>> product([1,2,3])\n    6\n    >>> product([1,2,3])\n    6\n   \
    \ >>> product([1,2,3])\n    6\n    >>> product([1,2,3])\n    6\n    >>> product([1,2,3])\n\
    \    6\n    >>> product([1,2,3])\n    6\n    >>> product([1,2,3])\n    6\n   \
    \ >>> product([1,2,3])\n    6\n    >>> product([1,2,3])\n    6\n    >>> product([1,2,3])\n\
    \    6\n    >>> product([1,2,3])\n    6\n    >>> product([1,2,3])\n    6\n   \
    \ >>> product([1,2,3])\n    6\n    >>> product([1,2,3])\n    6\n    >>> product([1,2,3])\n\
    \    6\n    >>> product([1,2,3])\n    6\n    >>> product([1,2,3])\n    6\n   \
    \ >>> product([1,2,3])\n    6\n    >>> product([1,2,3])\n    6\n    >>> product([1,2,3])\n\
    \    6\n    >>> product([1,2,3])\n    6\n    >>> product([1,2,3])\n    6\n   \
    \ >>> product([1,2,3])\n    6\n    >>> product([1,2,3])\n    6\n    >>> product([1,2,3])\n\
    \    6\n    >>> product([1,2,3])\n    6\n    >>> product([1,2,3])\n    6\n   \
    \ >>> product([1,2,3])\n    6\n    >>> product([1,2,3])\n    6\n    >>> product([1,2,3])\n\
    \    6\n    >>> product([1,2,3])\n    6\n    >>> product([1,2,3])\n    6\n   \
    \ >>> product([1,2,3])\n    6\n    >>> product([1,2,3])\n    6\n    >>> product([1,2,3])\n\
    \    6\n    >>> product([1,2,3])\n    6\n    >>> product([1,2,3])\n    6\n   \
    \ >>> product([1,2,3])\n    6\n    >>> product([1,2,3])\n    6\n    >>> product([1,2,3])\n\
    \    6\n    >>> product([1,2,3])\n    6\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm31cjtu1.jl:13\nin expression starting at\
    \ /tmp/tmpm31cjtu1.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for n in numbers\n        sum_ = sum_ + n\n        product_\
    \ = product_ * n\n    return (sum_, product_)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3,4,5])\n</cell>\n<text>\nExercise 7\nWrite a function that takes\
    \ a vector of integers and returns the sum of the squares of the integers in the\
    \ vector.\n>>> sum_square_of_vector([1,2,3,4,5])\n25\n>>> sum_square_of_vector([-1,-2,-3,-4,-5])\n\
    25\n>>> sum_square_of_vector([1,-2,-3,-4,-5])\n25\n>>> sum_square_of_vector([1,2,-3,-4,-5])\n\
    25\n>>> sum_square_of_vector([1,2,3,4,-5])\n25\n>>> sum_square_of_vector([1,2,3,4,5])\n\
    25\n>>> sum_square_of_vector([1,2,-3,-4,5])\n25\n>>> sum_square_of_vector([1,2,3,4,5])\n\
    25\n>>> sum_square_of_vector([1,2,3,4,-5])\n25\n>>> sum_square_of_vector([1,2,3,4,5])\n\
    25\n>>> sum_square_of_vector([1,2,-3,-4,5])\n25\n>>> sum_square_of_vector([1,2,3,4,5])\n\
    25\n>>> sum_square_of_vector([1,2,3,4,-5])\n25\n>>> sum_square_of_vector([1,2,3,4,5])\n\
    25\n>>> sum_square_of_vector([1,2,3,4,-5])\n25\n>>> sum_square_of_vector([1,2,3,4,5])\n\
    25\n>>> sum_square_of_vector([1,2,3,4,-5])\n25\n>>> sum_square_of_vector([1,2,3,4,5])\n\
    25\n>>> sum_square_of_vector([1,2,3,4,-5])\n25\n>>> sum_square_of_vector([1,2,3,4,5])\n\
    25\n>>> sum_square_of_vector([1,2,3,4,-5])\n25\n>>> sum_square_of_vector([1,2,3,4,5])\n\
    25\n>>> sum_square_of_vector([1,2,3,4,-5])\n25\n>>> sum_square_of_vector([1,2,3,4,5])\n\
    25\n>>> sum_square_of_vector([1,2,3,4,-5])\n25\n>>> sum_square_of_vector([1,2,3,4,5])\n\
    25\n>>> sum_square_of_vector([1,2,3,4,-5])\n25\n>>> sum_square_of_vector([1,2,3,4,5])\n\
    25\n>>> sum_square_of_vector([1,2,3,4,-5])\n25\n>>> sum_square_of_vector([1,2,3,4,5])\n\
    25\n>>> sum_square_of_vector([1,2,3,4,-5])\n25\n\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphti_neeq.jl:16\nin expression starting at\
    \ /tmp/tmphti_neeq.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = prod(numbers)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of integers and returns a vector of sums and a vector of products\
    \ of all the integers in the vector.\nThe sums and products should be returned\
    \ in a tuple where the first element of the tuple is the sum and the second element\
    \ of the tuple is the product.\nThe function should work for an empty vector.\n\
    The function should work for vectors of any size.\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqy219e6b.jl:13\nin expression starting at\
    \ /tmp/tmpqy219e6b.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_product = numbers[1] +\
    \ numbers[2]\n        prod_product = numbers[1] * numbers[2]\n        return (sum_product,\
    \ prod_product)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the squares of the numbers in a vector.\nThe function should\
    \ take one argument, a list of numbers.\nThe function should return a tuple of\
    \ two numbers, the first one being the sum of the squares and the second one being\
    \ the sum of the squares of the numbers in the list.\nThe function should return\
    \ (0, 0) if the list is empty.\n>>> sum_squares_vector([1, 2, 3, 4])\n(25, 25)\n\
    >>> sum_squares_vector([])\n(0, 0)\n>>> sum_squares_vector([-1, -2, -3])\n(-9,\
    \ -9)\n>>> sum_squares_vector([-1, -2, -3, -4, -5])\n(-9, -9)\n>>> sum_squares_vector([-1,\
    \ -2, -3, -4, -5, -6])\n(-9, -9)\n>>> sum_squares_vector([-1, -2, -3, -4, -5,\
    \ -6, -7])\n(-9, -9)\n>>> sum_squares_vector([-1, -2, -3, -4, -5, -6, -7, -8])\n\
    (-9, -9)\n>>> sum_squares_vector([-1, -2, -3, -4, -5, -6, -7, -8, -9])\n(-9, -9)\n\
    >>> sum_squares_vector([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10])\n(-9, -9)\n\
    >>> sum_squares_vector([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11])\n(-9, -9)\n\
    >>> sum_squares_vector([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12])\n\
    (-9, -9)\n>>> sum_squares_vector([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11,\
    \ -12, -13])\n(-9, -9)\n>>> sum_squares_vector([-1, -2, -3, -4, -5, -6, -7, -8,\
    \ -9, -10, -11, -12, -13, -14])\n(-9, -9)\n>>> sum_squares_vector([-1, -2, -3,\
    \ -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15])\n(-9, -9)\n>>> sum_squares_vector([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16])\n(-9, -9)\n\
    >>> sum_squares_vector\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph2u6x5u3.jl:17\nin expression starting at\
    \ /tmp/tmph2u6x5u3.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = reduce(mul, numbers)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1,\
    \ 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz9re2v91.jl:13\nin expression starting at\
    \ /tmp/tmpz9re2v91.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum = numbers[1]\n       \
    \ product = 1\n        for i in 2:length(numbers) \n            sum = sum + numbers[i]\n\
    \            product = product * numbers[i]\n        end\n        return (sum,\
    \ product)\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the squares\
    \ of the integers in a vector.\n    >>> sum_square_of_vector([1,2,3,4,5])\n  \
    \  25\n    >>> sum_square_of_vector([1,2,3])\n    9\n    >>> sum_square_of_vector([1,2])\n\
    \    6\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprsnv6g6n.jl:21\nin expression starting at\
    \ /tmp/tmprsnv6g6n.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = reduce(mul, numbers, 1)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the integers\
    \ in the vector. \nThe sum of the squares should be equal to the sum of the squares\
    \ of the numbers in the vector.\n>>> sum_square_of_vector([1, 2, 3, 4])\n25\n\
    >>> sum_square_of_vector([-1, -2, -3, -4])\n25\n>>> sum_square_of_vector([-1,\
    \ -2, -3, -4, -5])\n25\n>>> sum_square_of_vector([-1, -2, -3, -4, -5, -6])\n25\n\
    >>> sum_square_of_vector([-1, -2, -3, -4, -5, -6, -7])\n25\n>>> sum_square_of_vector([-1,\
    \ -2, -3, -4, -5, -6, -7, -8])\n25\n>>> sum_square_of_vector([-1, -2, -3, -4,\
    \ -5, -6, -7, -8, -9])\n25\n>>> sum_square_of_vector([-1, -2, -3, -4, -5, -6,\
    \ -7, -8, -9, -10])\n25\n>>> sum_square_of_vector([-1, -2, -3, -4, -5, -6, -7,\
    \ -8, -9, -10, -11])\n25\n>>> sum_square_of_vector([-1, -2, -3, -4, -5, -6, -7,\
    \ -8, -9, -10, -11, -12])\n25\n>>> sum_square_of_vector([-1, -2, -3, -4, -5, -6,\
    \ -7, -8, -9, -10, -11, -12, -13])\n25\n>>> sum_square_of_vector([-1, -2, -3,\
    \ -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14])\n25\n>>> sum_square_of_vector([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15])\n25\n>>> sum_square_of_vector([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16])\n25\n>>>\
    \ sum_square_of_vector([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13,\
    \ -14, -15, -16, -17])\n25\n>>> sum_square_of_vector([-1, -2, -3, -4, -5, -6,\
    \ -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18])\n25\n>>> sum\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu4f6zo0r.jl:13\nin expression starting at\
    \ /tmp/tmpu4f6zo0r.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for i in numbers\n        sum_ += i\n        product_ *=\
    \ i\n    return (sum_, product_)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,\
    \ 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and a number as inputs and returns the sum of the integers except\
    \ the number itself.\nFor example, if the input vector is [4, 7, 2, 3] and the\
    \ number 7 is given, the function should return 10.\nIf the input vector is [4,\
    \ 7, 2, 3] and the number 3 is given, the function should return 4.\nIf the input\
    \ vector is [4, 7, 2, 3] and the number 4 is given, the function should return\
    \ 0.\nIf the input vector is [4, 7, 2, 3] and the number 5 is given, the function\
    \ should return 0.\nIf the input vector is [4, 7, 2, 3] and the number 6 is given,\
    \ the function should return 0.\nIf the input vector is [4, 7, 2, 3] and the number\
    \ 8 is given, the function should return 0.\nIf the input vector is [4, 7, 2,\
    \ 3] and the number 9 is given, the function should return 0.\nIf the input vector\
    \ is [4, 7, 2, 3] and the number 10 is given, the function should return 0.\n\
    If the input vector is [4, 7, 2, 3] and the number 11 is given, the function should\
    \ return 0.\nIf the input vector is [4, 7, 2, 3] and the number 12 is given, the\
    \ function should return 0.\nIf the input vector is [4, 7, 2, 3] and the number\
    \ 13 is given, the function should return 0.\nIf the input vector is [4, 7, 2,\
    \ 3] and the number 14 is given, the function should return 0.\nIf the input vector\
    \ is [4, 7, 2, 3] and the number 15 is given, the function should return 0.\n\
    If the input vector is [4, 7, 2, 3] and the number 16 is given, the function should\
    \ return 0.\nIf the input vector is [4, 7, 2, 3] and the number 17 is given, the\
    \ function should return 0.\nIf the input vector is [4, 7, 2, 3] and the number\
    \ 18 is given, the function should return 0.\nIf the input vector is [4, 7, 2,\
    \ 3] and the number 19 is given, the function should return 0.\nIf the input vector\
    \ is [4, 7, 2, 3] and the number 20 is given, the function should return 0.\n\
    If the input vector is [4, 7, 2, 3] and the number 21 is given, the function should\
    \ return 0.\nIf the input vector is [4, 7, 2, 3] and the number 22 is given, the\
    \ function should return 0.\nIf the input vector is [4, 7, 2, 3] and the number\
    \ 23 is given, the function should return 0.\nIf the input vector is [4, 7, 2,\
    \ 3] and the number 24 is given\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgl4fxg5q.jl:16\nin expression starting at\
    \ /tmp/tmpgl4fxg5q.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum = 0\n   \
    \ product = 1\n    for n in numbers\n        sum += n\n        product *= n\n\
    \    return (sum, product)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.\nThe squares\
    \ should be calculated using the formula $n^2$\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpco67wexp.jl:16\nin expression starting at\
    \ /tmp/tmpco67wexp.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum = 0\n   \
    \ product = 1\n    for number in numbers\n        sum += number\n        product\
    \ *= number\n    return (sum, product)\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the squares of the integers in a vector.\n\
    \    >>> sum_of_squares([4, 9, 16])\n    49\n    >>> sum_of_squares([-1, 0, 1])\n\
    \    1\n    >>> sum_of_squares([-4, 9, 16])\n    -1\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2r8c8p3n.jl:16\nin expression starting at\
    \ /tmp/tmp2r8c8p3n.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_product = 1\n    for i in numbers\n        product_product\
    \ *= i\n    end\n    return (sum_product, product_product)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of integers and returns the sum of the squares\
    \ of the integers in the vector.\n    >>> sum_of_squares([1,2,3])\n    25\n  \
    \  >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj27nbft7.jl:16\nin expression starting at\
    \ /tmp/tmpj27nbft7.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = reduce(mul, numbers, 1)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of integers and returns a vector of booleans indicating whether\
    \ each integer in the vector is even or odd.\nFor example, given [1,2,3], the\
    \ function should return [false, true, false].\nThe function should return an\
    \ array of booleans, not a vector of integers.\nThe function should return an\
    \ array of booleans, not a vector of integers.\nThe function should return an\
    \ array of booleans, not a vector of integers.\nThe function should return an\
    \ array of booleans, not a vector of integers.\nThe function should return an\
    \ array of booleans, not a vector of integers.\nThe function should return an\
    \ array of booleans, not a vector of integers.\nThe function should return an\
    \ array of booleans, not a vector of integers.\nThe function should return an\
    \ array of booleans, not a vector of integers.\nThe function should return an\
    \ array of booleans, not a vector of integers.\nThe function should return an\
    \ array of booleans, not a vector of integers.\nThe function should return an\
    \ array of booleans, not a vector of integers.\nThe function should return an\
    \ array of booleans, not a vector of integers.\nThe function should return an\
    \ array of booleans, not a vector of integers.\nThe function should return an\
    \ array of booleans, not a vector of integers.\nThe function should return an\
    \ array of booleans, not a vector of integers.\nThe function should return an\
    \ array of booleans, not a vector of integers.\nThe function should return an\
    \ array of booleans, not a vector of integers.\nThe function should return an\
    \ array of booleans, not a vector of integers.\nThe function should return an\
    \ array of booleans, not a vector of integers.\nThe function should return an\
    \ array of booleans, not a vector of integers.\nThe function should return an\
    \ array of booleans, not a vector of integers.\nThe function should return an\
    \ array of booleans, not a vector of integers.\nThe function should return an\
    \ array of booleans, not a vector of integers.\nThe function should return an\
    \ array of booleans, not a vector of integers.\nThe function should return an\
    \ array of booleans, not a vector of integers.\nThe function should return an\
    \ array of booleans, not a vector of integers.\nThe function should return an\
    \ array of booleans, not a vector of integers.\nThe function should return an\
    \ array of booleans, not a vector of integers.\nThe function should return an\
    \ array of booleans, not a vector of integers.\nThe function should return an\
    \ array of booleans, not a vector of integers.\nThe function should return an\
    \ array of booleans, not a vector of integers.\nThe function should return an\
    \ array of booleans, not a vector of integers.\nThe function should return an\
    \ array of booleans, not a vector of integers.\nThe function should return an\
    \ array of booleans, not a vector of integers.\nThe function should return an\
    \ array of booleans, not a vector of integers.\nThe function should return an\
    \ array of booleans, not a vector of integers.\nThe \nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw2zoukq0.jl:13\nin expression starting at\
    \ /tmp/tmpw2zoukq0.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum = 0\n   \
    \ product = 1\n    for n in numbers\n        sum += n\n        product *= n\n\
    \    return (sum, product)\nend\n</cell>\n<code language=julia-1.3>\nsum_product([1,\
    \ 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the squares of the integers in a vector. \nThe function should work for vectors\
    \ of any length.\nThe function should work for vectors of any type.\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjttmb55c.jl:16\nin expression starting at\
    \ /tmp/tmpjttmb55c.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_ = numbers[1] + numbers[2]\
    \ \n        prod_ = numbers[1] * numbers[2] \n        return (sum_, prod_) \n\
    end\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns a vector\
    \ of integers containing the squares of the integers in the vector.\nFor example,\
    \ if the input vector is [1,2,3], the function should return [1,2,3].\nThe function\
    \ should return nothing if the input vector is empty.\nThe function should return\
    \ nothing if the input vector is empty.\nThe function should return nothing if\
    \ the input vector is empty.\nThe function should return nothing if the input\
    \ vector is empty.\nThe function should return nothing if the input vector is\
    \ empty.\nThe function should return nothing if the input vector is empty.\nThe\
    \ function should return nothing if the input vector is empty.\nThe function should\
    \ return nothing if the input vector is empty.\nThe function should return nothing\
    \ if the input vector is empty.\nThe function should return nothing if the input\
    \ vector is empty.\nThe function should return nothing if the input vector is\
    \ empty.\nThe function should return nothing if the input vector is empty.\nThe\
    \ function should return nothing if the input vector is empty.\nThe function should\
    \ return nothing if the input vector is empty.\nThe function should return nothing\
    \ if the input vector is empty.\nThe function should return nothing if the input\
    \ vector is empty.\nThe function should return nothing if the input vector is\
    \ empty.\nThe function should return nothing if the input vector is empty.\nThe\
    \ function should return nothing if the input vector is empty.\nThe function should\
    \ return nothing if the input vector is empty.\nThe function should return nothing\
    \ if the input vector is empty.\nThe function should return nothing if the input\
    \ vector is empty.\nThe function should return nothing if the input vector is\
    \ empty.\nThe function should return nothing if the input vector is empty.\nThe\
    \ function should return nothing if the input vector is empty.\nThe function should\
    \ return nothing if the input vector is empty.\nThe function should return nothing\
    \ if the input vector is empty.\nThe function should return nothing if the input\
    \ vector is empty.\nThe function should return nothing if the input vector is\
    \ empty.\nThe function should return nothing if the input vector is empty.\nThe\
    \ function should return nothing if the input vector is empty.\nThe function should\
    \ return nothing if the input vector is empty.\nThe function should return nothing\
    \ if the input vector is empty.\nThe function should return nothing if the input\
    \ vector is empty.\nThe function should return nothing if the input vector is\
    \ empty.\nThe function should return nothing if the input vector is empty.\nThe\
    \ function should return nothing if the input vector is empty.\nThe function should\
    \ \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkz78sfcw.jl:16\nin expression starting at\
    \ /tmp/tmpkz78sfcw.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = reduce(mul, numbers, 1)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjfjcmjvl.jl:13\nin expression starting at\
    \ /tmp/tmpjfjcmjvl.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = prod(numbers)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes in a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.\nThe function\
    \ should raise an error if the vector is empty.\nThe function should raise an\
    \ error if the vector contains non-integer values.\nThe function should raise\
    \ an error if the vector contains negative values.\nThe function should raise\
    \ an error if the vector contains values greater than 100.\nThe function should\
    \ raise an error if the vector contains values less than 0.\nThe function should\
    \ raise an error if the vector contains values greater than or equal to 100.\n\
    The function should raise an error if the vector contains values less than or\
    \ equal to 0.\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnqted6_6.jl:13\nin expression starting at\
    \ /tmp/tmpnqted6_6.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_product = numbers[1] +\
    \ numbers[2] \n        product = 1\n        for i in 3:length(numbers) \n    \
    \        product *= numbers[i] \n            sum_product += numbers[i] \n    \
    \    return (sum_product, product) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sum_product([1, 2, 3, 4]) == (10, 24)\n@assert sum_product([-1, 2, -3,\
    \ 4]) == (6, 12)\n@assert sum_product([-1, 2, -3, 4, 5]) == (6, 24)\n@assert sum_product([-1,\
    \ 2, -3, 4, 5]) == (6, 24)\n@assert sum_product([-1, 2, -3, 4, 5]) == (6, 24)\n\
    @assert sum_product([-1, 2, -3, 4, 5]) == (6, 24)\n@assert sum_product([-1, 2,\
    \ -3, 4, 5]) == (6, 24)\n@assert sum_product([-1, 2, -3, 4, 5]) == (6, 24)\n@assert\
    \ sum_product([-1, 2, -3, 4, 5]) == (6, 24)\n@assert sum_product([-1, 2, -3, 4,\
    \ 5]) == (6, 24)\n@assert sum_product([-1, 2, -3, 4, 5]) == (6, 24)\n@assert sum_product([-1,\
    \ 2, -3, 4, 5]) == (6, 24)\n@assert sum_product([-1, 2, -3, 4, 5]) == (6, 24)\n\
    @assert sum_product([-1, 2, -3, 4, 5]) == (6, 24)\n@assert sum_product([-1, 2,\
    \ -3, 4, 5]) == (6, 24)\n@assert sum_product([-1, 2, -3, 4, 5]) == (6, 24)\n@assert\
    \ sum_product([-1, 2, -3, 4, 5]) == (6, 24)\n@assert sum_product([-1, 2, -3, 4,\
    \ 5]) == (6, 24)\n@assert sum_product([-1, 2, -3, 4, 5]) == (6, 24)\n@assert sum_product([-1,\
    \ 2, -3, 4, 5]) == (6, 24)\n@assert sum_product([-1, 2, -3, 4, 5]) == (6, 24)\n\
    @assert sum_product([-1, 2, -3, 4, 5]) == (6, 24)\n@assert sum_product([-1, 2,\
    \ -3, 4, 5]) == (6, 24)\n@assert sum_product([-1, 2, -3, 4, 5]) == (6, 24)\n@assert\
    \ sum_product([-1, 2, -3, 4, 5]) == (6, 24)\n@assert sum_product([-1, 2, -3, 4,\
    \ 5]) == (6, 24)\n@assert sum_product([-1, 2, -3, 4, 5]) == (6, 24)\n@assert sum_product([-1,\
    \ 2, -3, 4, 5]) == (6, 24)\n@assert sum_product([-1, 2, -3, 4, 5]) == (6, 24)\n\
    @assert sum_product([-1, 2, -3, 4, 5]) == (6, 24)\n\nusing Test\n\n@testset begin\n\
    \ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t\
    @test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\
    \t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo7lxglo0.jl:20\nin expression starting at\
    \ /tmp/tmpo7lxglo0.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum = 0\n   \
    \ product = 1\n    for i in numbers\n        sum += i\n        product *= i\n\
    \    return (sum, product)\nend\n</cell>\n<code language=julia-1.4>\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([4, 6, 8]) == (24, 12)\n@assert sum_product([5,\
    \ 7, 9, 11]) == (25, 21)\n@assert sum_product([10, 20, 30, 40, 50, 60, 70, 80,\
    \ 90]) == (3628800, 3628800)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of integers and returns a vector of all the even numbers in the\
    \ vector.\nWrite a function that takes a vector of integers and returns a vector\
    \ of all the odd numbers in the vector.\nWrite a function that takes a vector\
    \ of integers and returns a vector of all the numbers in the vector that are divisible\
    \ by 3.\nWrite a function that takes a vector of integers and returns a vector\
    \ of all the numbers in the vector that are divisible by 5 (mod 5 = 0).\nWrite\
    \ a function that takes a vector of integers and returns a vector of all the numbers\
    \ in the vector that are divisible by 7 (mod 7 = 0).\nWrite a function that takes\
    \ a vector of integers and returns a vector of all the numbers in the vector that\
    \ are divisible by 11 (mod 11 = 0).\nWrite a function that takes a vector of integers\
    \ and returns a vector of all the numbers in the vector that are divisible by\
    \ 13 (mod 13 = 0).\nWrite a function that takes a vector of integers and returns\
    \ a vector of all the numbers in the vector that are divisible by 17 (mod 17 =\
    \ 0).\nWrite a function that takes a vector of integers and returns a vector of\
    \ all the numbers in the vector that are divisible by 19 (mod 19 = 0).\nWrite\
    \ a function that takes a vector of integers and returns a vector of all the numbers\
    \ in the vector that are divisible by 23 (mod 23 = 0).\nWrite a function that\
    \ takes a vector of integers and returns a vector of all the numbers in the vector\
    \ that are divisible by 29 (mod 29 = 0).\nWrite a function that takes a vector\
    \ of integers and returns a vector of all the numbers in the vector that are divisible\
    \ by 31 (mod 31 = 0).\nWrite a function that takes a vector of integers and returns\
    \ a vector of all the numbers in the vector that are divisible by 37 (mod 37 =\
    \ 0).\nWrite a function that takes a vector of integers and returns a vector of\
    \ all the numbers in the vector that are divisible by 41 (mod 41 = 0).\nWrite\
    \ a function that takes a vector of integers and returns a vector of all the numbers\
    \ in the vector that are divisible by 43 (mod 43 = 0).\nWrite a function that\
    \ takes a vector of integers and returns a vector of all the numbers in the vector\
    \ that are divisible by 47 (mod 47 = 0).\nWrite a function that takes a vector\
    \ of integers and returns a vector of all the numbers in the vector that are divisible\
    \ by 53 (mod 53 = 0).\nWrite a function that takes a vector of integers and returns\
    \ a vector of all the numbers in the vector that are \nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([])) == (0,\
    \ 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0]) ==\
    \ (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq2e9bgrq.jl:16\nin expression starting at\
    \ /tmp/tmpq2e9bgrq.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_product = numbers[1]\n\
    \        product = 1\n        for i in numbers[2:end]\n            product = product\
    \ * i\n            sum_product = sum_product + product\n        return (sum_product,\
    \ product)\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl3999u2w.jl:19\nin expression starting at\
    \ /tmp/tmpl3999u2w.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for number in numbers\n        sum_ = sum_ + number\n   \
    \     product_ = product_ * number\n    end\n    return (sum_, product_)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the squares of the integers\
    \ in a given vector.\n    >>> sum_square_of_vector([1, 2, 3, 4])\n    25\n   \
    \ \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpukl3colw.jl:17\nin expression starting at\
    \ /tmp/tmpukl3colw.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_ = sum(numbers) \n   \
    \     prod_ = 1\n        for i in numbers \n            prod_ *= i \n        return\
    \ (sum_, prod_)\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3fm7cpdz.jl:18\nin expression starting at\
    \ /tmp/tmp3fm7cpdz.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for i in numbers\n        sum_ = sum_ + i\n        product_\
    \ = product_ * i\n    return (sum_, product_)\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3,4,5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the squares of the integers in a given vector.\n    >>> sum_of_squares([1,2,3,4,5])\n\
    \    25\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxndgk4x1.jl:16\nin expression starting at\
    \ /tmp/tmpxndgk4x1.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for n in numbers\n        sum_ = sum_ + n\n        product_\
    \ = product_ * n\n    return (sum_, product_)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the squares of the numbers in a vector.\n    >>> sum_square_of_vector([1,\
    \ 2, 3, 4])\n    25\n    >>> sum_square_of_vector([-1, -2, -3, -4])\n    25\n\
    \    >>> sum_square_of_vector([-1, -2, -3, -4, -5])\n    25\n    >>> sum_square_of_vector([-1,\
    \ -2, -3, -4, -5, -6])\n    25\n    >>> sum_square_of_vector([-1, -2, -3, -4,\
    \ -5, -6, -7])\n    25\n    >>> sum_square_of_vector([-1, -2, -3, -4, -5, -6,\
    \ -7, -8])\n    25\n    >>> sum_square_of_vector([-1, -2, -3, -4, -5, -6, -7,\
    \ -8, -9])\n    25\n    >>> sum_square_of_vector([-1, -2, -3, -4, -5, -6, -7,\
    \ -8, -9, -10])\n    25\n    >>> sum_square_of_vector([-1, -2, -3, -4, -5, -6,\
    \ -7, -8, -9, -10, -11])\n    25\n    >>> sum_square_of_vector([-1, -2, -3, -4,\
    \ -5, -6, -7, -8, -9, -10, -11, -12])\n    25\n    >>> sum_square_of_vector([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13])\n    25\n    >>> sum_square_of_vector([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14])\n    25\n    >>> sum_square_of_vector([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15])\n    25\n   \
    \ >>> sum_square_of_vector([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12,\
    \ -13, -14, -15, -16])\n    25\n    >>> sum_square_of_vector([-1, -2, -3, -4,\
    \ -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17])\n    25\n    >>>\
    \ sum_square_of_vector([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13,\
    \ \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqytgms_4.jl:16\nin expression starting at\
    \ /tmp/tmpqytgms_4.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum = Int64(0)\n\
    \    prod = Int64(1)\n    for n in numbers\n        sum += n\n        prod *=\
    \ n\n    return (sum, prod)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,\
    \ 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the squares of the numbers in a vector. \nThe function should work for both\
    \ real and complex numbers.\nThe function should work for vectors of any length.\n\
    The function should work for vectors of integers, floats, or complex numbers.\n\
    The function should work for vectors of any type.\nThe function should work for\
    \ vectors of any length.\nThe function should work for vectors of any type.\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbssxb2g0.jl:16\nin expression starting at\
    \ /tmp/tmpbssxb2g0.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = numbers[1]\n\
    \    prod = numbers[1]\n    for n in numbers[2:end]\n        sum_ = sum_ + n\n\
    \        prod = prod * n\n    end\n    return (sum_, prod)\nend\n</cell>\n<code\
    \ language=julia-1.0>\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3,4,5])\
    \ == (15, 10)\n@assert sum_product([1,2]) == (3, 2)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2]) == (3, 2)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2]) == (3, 2)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2]) == (3, 2)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2]) == (3, 2)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2]) == (3, 2)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2]) == (3, 2)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2]) == (3, 2)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2]) == (3, 2)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2]) == (3, 2)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2]) == (3, 2)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2]) == (3, 2)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2]) == (3, 2)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2]) == (3, 2)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2]) == (3, 2)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2]) == (3, 2)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2]) == (3, 2)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2]) == (3, 2)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2]) == (3, 2)\n@assert sum_product([1,2,3])\
    \ == (6, \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvws9roaq.jl:17\nin expression starting at\
    \ /tmp/tmpvws9roaq.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for number in numbers\n        sum_ = sum_ + number\n   \
    \     product_ = product_ * number\n    end\n    return (sum_, product_)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5vfxg1n4.jl:17\nin expression starting at\
    \ /tmp/tmp5vfxg1n4.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_product =\
    \ sum(numbers)\n    product_of_numbers = reduce(mul, numbers, 1)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ugu90nw.jl:13\nin expression starting at\
    \ /tmp/tmp_ugu90nw.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum = 0 \n  \
    \  product = 1\n    for n in numbers\n        sum += n\n        product *= n\n\
    \    return (sum, product)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the squares\
    \ of the numbers in a vector.\n    >>> sum_square_of_numbers([1, 2, 3, 4])\n \
    \   25\n    >>> sum_square_of_numbers([-1, -2, -3, -4])\n    25\n    >>> sum_square_of_numbers([])\n\
    \    0\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq0in5mee.jl:16\nin expression starting at\
    \ /tmp/tmpq0in5mee.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_ = numbers[1] + numbers[2]\n\
    \        prod_ = numbers[1] * numbers[2]\n        return (sum_, prod_)\nend\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the sum\
    \ of the squares of the integers in the vector.\nThe function should work for\
    \ vectors of any length.\nThe function should work for vectors of any type of\
    \ numbers, not just Int64.\nThe function should work for vectors of any type of\
    \ numbers, not just Int64.\nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\
    \t@test(candidate(Vector{Int64}([])) == (0, 1))\n\t@test(candidate([1, 1, 1])\
    \ == (3, 1))\n\t@test(candidate([100, 0]) == (100, 0))\n\t@test(candidate([3,\
    \ 5, 7]) == (15, 105))\n\t@test(candidate([10]) == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg6cqashb.jl:16\nin expression starting at\
    \ /tmp/tmpg6cqashb.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_ = numbers[1]\n      \
    \  prod_ = 1\n        for n in numbers[2:end]\n            sum_ += n\n       \
    \     prod_ *= n\n        return (sum_, prod_)\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in a list of integers and returns the sum of\
    \ the integers squared. \nFor example, \n>>> square_sum([1, 2, 3, 4])\n25\n>>>\
    \ square_sum([1, 2, 3])\n9\n>>> square_sum([1, 2, 3, 0])\n0\n>>> square_sum([1,\
    \ 2, 3, -1])\n-1\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n\
    25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1,\
    \ 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n\
    25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1,\
    \ 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n\
    25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1,\
    \ 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n\
    25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1,\
    \ 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n\
    25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1,\
    \ 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n\
    25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1,\
    \ 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n\
    25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1,\
    \ 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n\
    25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1, 2, 3, 5])\n25\n>>> square_sum([1,\
    \ 2, 3, \nusing Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplirdn_oh.jl:19\nin expression starting at\
    \ /tmp/tmplirdn_oh.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" For a given vector of integers, return a tuple consisting of a\
    \ sum and a product of all the integers in a vector.\n    Empty sum should be\
    \ equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n\
    \    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction\
    \ sum_product(numbers::Vector{Int64})::Tuple{Int64, Int64} \n    sum_ = 0\n  \
    \  product_ = 1\n    for number in numbers\n        sum_ = sum_ + number\n   \
    \     product_ = product_ * number\n    end\n    return (sum_, product_)\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum and product\
    \ of the numbers in a vector, where the vector is sorted in ascending order.\n\
    The function should take one argument, a list of integers, in the following format:\n\
    using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
    \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100,\
    \ 0]) == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
    \ == (10, 10))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp300aq1ys.jl:17\nin expression starting at\
    \ /tmp/tmp300aq1ys.jl:17\n"
  stdout: ''
