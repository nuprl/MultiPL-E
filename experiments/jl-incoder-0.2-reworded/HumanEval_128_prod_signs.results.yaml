language: jl
name: HumanEval_128_prod_signs
results:
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    elseif length(arr) == 1 \n  \
    \      return arr[1]\n    else\n        signs = zeros(Int64, length(arr))\n  \
    \      signs[1] = 1\n        signs[end] = -1\n        sum_of_mags = sum(abs.(arr\
    \ .* signs))\n        return sum_of_mags\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if a number is odd and false otherwise.\
    \ \nWrite a function that returns true if a number is even and false otherwise.\
    \ \nWrite a function that returns true if a number is prime and false otherwise.\
    \ \nWrite a function that returns true if a number is composite and false otherwise.\
    \ \nWrite a function that returns true if a number is palindrome and false otherwise.\
    \ \nWrite a function that returns true if a number is palindrome and false otherwise.\
    \ \nWrite a function that returns true if a number is palindrome and false otherwise.\
    \ \nWrite a function that returns true if a number is palindrome and false otherwise.\
    \ \nWrite a function that returns true if a number is palindrome and false otherwise.\
    \ \nWrite a function that returns true if a number is palindrome and false otherwise.\
    \ \nWrite a function that returns true if a number is palindrome and false otherwise.\
    \ \nWrite a function that returns true if a number is palindrome and false otherwise.\
    \ \nWrite a function that returns true if a number is palindrome and false otherwise.\
    \ \nWrite a function that returns true if a number is palindrome and false otherwise.\
    \ \nWrite a function that returns true if a number is palindrome and false otherwise.\
    \ \nWrite a function that returns true if a number is palindrome and false otherwise.\
    \ \nWrite a function that returns true if a number is palindrome and false otherwise.\
    \ \nWrite a function that returns true if a number is palindrome and false otherwise.\
    \ \nWrite a function that returns true if a number is palindrome and false otherwise.\
    \ \nWrite a function that returns true if a number is palindrome and false otherwise.\
    \ \nWrite a function that returns true if a number is palindrome and false otherwise.\
    \ \nWrite a function that returns true if a number is palindrome and false otherwise.\
    \ \nWrite a function that returns true if a number is palindrome and false otherwise.\
    \ \nWrite a function that returns true if a number is palindrome and false otherwise.\
    \ \nWrite a function that returns true if a number is palindrome and false otherwise.\
    \ \nWrite a function that returns true if a number is palindrome and false otherwise.\
    \ \nWrite a function that returns true if a number is palindrome and false otherwise.\
    \ \nWrite a function that returns true if a number is palindrome and \nusing Test\n\
    \n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4])\
    \ == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyv9ry7f4.jl:28\nin expression starting at\
    \ /tmp/tmpyv9ry7f4.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        for (i, x) in enumerate(arr) \n            signs[i] =\
    \ sign(x) * sign(i)\n        end\n        sum(signs)\n    end\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| a dscore=2 |>\nA more efficient solution would\
    \ be to first calculate the product of all signs and then sum up the magnitudes.\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwihffoqz.jl:26\nin expression starting at\
    \ /tmp/tmpwihffoqz.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        for (i, val) in enumerate(arr) \n            signs[i]\
    \ = sign(val)\n        end\n        \n        magnitudes = map(abs, arr)\n   \
    \     \n        product = prod(signs)\n        \n        return sum(magnitudes\
    \ .* product)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1,\
    \ 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) ==\
    \ nothing\n</cell>\n<text>\n4.3 Vectorized Product of Signs\nWrite a function\
    \ that calculates product of signs of numbers in a vector. \nThe function should\
    \ work for both scalar and vector inputs.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpao1f8u4k.jl:31\nin expression starting at\
    \ /tmp/tmpao1f8u4k.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0\n        return nothing\n    else\n        sum = 0\n        for\
    \ n in arr\n            sum += sign(n)\n        end\n        return sum\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxmfmkgxz.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpxmfmkgxz.jl:31\n  Expression: candidate([1,\
    \ 2, 2, -4]) == -9\n   Evaluated: 2 == -9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxmfmkgxz.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxmfmkgxz.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpxmfmkgxz.jl:32\n  Expression: candidate([0, 1]) == 0\n   Evaluated:\
    \ 1 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxmfmkgxz.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxmfmkgxz.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpxmfmkgxz.jl:33\n  Expression: candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10\n   Evaluated: 5 == -10\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpxmfmkgxz.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxmfmkgxz.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpxmfmkgxz.jl:35\n  Expression: candidate([2, 4, 1, 2, -1, -1,\
    \ 9]) == 20\n   Evaluated: 3 == 20\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxmfmkgxz.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxmfmkgxz.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpxmfmkgxz.jl:36\n  Expression: candidate([-1, 1, -1, 1]) ==\
    \ 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl"
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        sum_signs\
    \ = sum(signs)\n        product = 1\n        for i in 1:length(arr) \n       \
    \     product *= signs[i]\n        end\n        return sum_signs * product\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2,\
    \ -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates sum of squares of\
    \ integers multiplied by product of all signs of each number in the vector, represented\
    \ by 1, -1 or 0.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t\
    @test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmjp35pvc.jl:30\nin expression starting at\
    \ /tmp/tmpmjp35pvc.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        for i in 1:length(arr)\n            signs[i] = sign(i)\
    \ * sign(arr[i])\n        end\n        sum(signs)\n    end\nend\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=julia |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp871o21k5.jl:26\nin expression starting at\
    \ /tmp/tmp871o21k5.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0\n        return nothing\n    else\n        signs = zeros(Int,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        sum_of_mags\
    \ = sum(abs.(arr).*signs)\n        return sum_of_mags\n    end\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4sos6zhh.jl:26\nin expression starting at\
    \ /tmp/tmp4sos6zhh.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        signs = filter(x -> x != 0, signs)\n        signs = filter(x ->\
    \ x == 0, signs)\n        signs = filter(x -> x == 1, signs)\n        signs =\
    \ filter(x -> x == -1, signs)\n        signs = prod(signs)\n        mags = map(abs,\
    \ arr)\n        mags = filter(x -> x != 0, mags)\n        mags = filter(x -> x\
    \ == 0, mags)\n        mags = filter(x -> x == 1, mags)\n        mags = filter(x\
    \ -> x == -1, mags)\n        mags = prod(mags)\n        return signs * mags\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2,\
    \ -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nTask 3\nWrite a function that returns True if a number is prime\
    \ and False otherwise.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ba8786r.jl:34\nin expression starting at\
    \ /tmp/tmp3ba8786r.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        product = prod(signs) \n        return product * sum(signs) \n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns True\
    \ if a number is odd and False otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo5um8xpw.jl:24\nin expression starting at\
    \ /tmp/tmpo5um8xpw.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0\n        return nothing\n    \n    signs = zeros(Int, length(arr))\n\
    \    signs[1] = 1\n    signs[2] = -1\n    \n    sum = 0\n    for i in 1:length(arr)\n\
    \        sum += signs[i] * arr[i]\n    end\n    \n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4])\
    \ == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmej2kn0w.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmej2kn0w.jl:1\n\
    in expression starting at /tmp/tmpmej2kn0w.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    \n    sum_of_signs = 0 \n  \
    \  for x in arr \n        sum_of_signs += sign(x) \n    \n    product = 1 \n \
    \   for x in arr \n        product *= sign(x) \n    \n    return sum_of_signs\
    \ * product \nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1,\
    \ 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) ==\
    \ nothing\n</cell>\n<text>\nTask 3\nWrite a function that checks if a number is\
    \ even or odd.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa8dxhsew.jl:29\nin expression starting at\
    \ /tmp/tmpa8dxhsew.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        for i = 1:length(arr) \n            signs[i] = sign(arr[i])\n\
    \        end\n        signs = signs.*ones(Int64, length(arr))\n        sum_of_mags\
    \ = sum(abs.(arr))\n        prod_of_signs = prod(signs)\n        return sum_of_mags*prod_of_signs\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n@assert prod_signs([1, 2, 2,\
    \ -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates sum of squares of\
    \ integers multiplied by product of all signs\nof each number in the vector, represented\
    \ by 1, -1 or 0.\nExample: arr = [1, 2, 2, -4] returns 14\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpklnpgi0a.jl:29\nin expression starting at\
    \ /tmp/tmpklnpgi0a.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        signs_product = prod(signs) \n        sum_of_magnitudes = sum(map(abs,\
    \ arr)) \n        return sum_of_magnitudes * signs_product \n    end\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=julia,arrays |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu6bqz5xm.jl:25\nin expression starting at\
    \ /tmp/tmpu6bqz5xm.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        for (i, v) in enumerate(arr) \n            signs[i] =\
    \ sign(v) * sign(i)\n        end\n        return sum(abs2, signs)\n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the product of all\
    \ signs of numbers in a vector. \nExample: \n>>> signs([1, 2, 2, -4])\n9\n>>>\
    \ signs([0, 1])\n0\n>>> signs([])\nnothing\nHint: use prod_signs function from\
    \ above.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpieh3bzh3.jl:26\nin expression starting at\
    \ /tmp/tmpieh3bzh3.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        signs = prod(signs) \n        mags = map(abs, arr) \n       \
    \ mags = prod(mags) \n        return signs * mags \n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes an array of integers and returns its sum.\n\
    using Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpehi74vbu.jl:26\nin expression starting at\
    \ /tmp/tmpehi74vbu.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .== 0] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 1] = 0\n        sum_signs = sum(signs)\n        return\
    \ sum_signs * prod(signs)\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\n\
    This doesn't seem to work. `prod_signs([1, 2, 2, -4])` returns `9` instead of\
    \ `9*1*1*1`\n<|/ c |>\n<| c |>\nI edited my answer to fix the bug. Thanks for\
    \ pointing it out.\n<|/ c |>\n<| a tags=julia |>\nI wrote a package for this:\n\
    <code>\nusing LinearAlgebra\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqx5ec3di.jl:27\nin expression starting at\
    \ /tmp/tmpqx5ec3di.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0\n        return nothing\n    end\n    signs = zeros(Int, length(arr))\n\
    \    signs[1] = 1\n    signs[end] = -1\n    return sum(map(sign, arr))\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpak5s9_ta.jl:24\nin expression starting at\
    \ /tmp/tmpak5s9_ta.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[arr .< 0] = -1\n        signs[arr .> 0] = 1\n  \
    \      product = signs .* prod(signs)\n        return sum(abs(product))\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns True if a number\
    \ is odd and False otherwise.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn26fsnav.jl:26\nin expression starting at\
    \ /tmp/tmpn26fsnav.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    \n    sum_of_magnitudes = 0\
    \ \n    signs = zeros(length(arr)) \n    \n    for x in arr \n        signs[x]\
    \ = sign(x) * sign(x) \n        sum_of_magnitudes += sign(x) \n    \n    return\
    \ sum_of_magnitudes * prod(signs) \nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nTask 2.2. Write a function that\
    \ calculates sum of squares of integers multiplied by product of all signs of\
    \ numbers in the vector, represented by 1, -1 or 0.\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy78_pzkq.jl:28\nin expression starting at\
    \ /tmp/tmpy78_pzkq.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        for (i, x) in enumerate(arr) \n            signs[i] =\
    \ sign(x) * sign(i)\n        end\n        return sum(abs2, signs)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert\
    \ prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns product of absolute values of all numbers\
    \ in arr vector.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t\
    @test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpau1oh9xl.jl:26\nin expression starting at\
    \ /tmp/tmpau1oh9xl.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    \n    signs = zeros(Int64, length(arr))\n\
    \    signs[arr .== 0] = -1\n    signs[arr .== 1] = 1\n    \n    prod = 1\n   \
    \ for i in 1:length(arr)\n        prod *= signs[i]\n    end\n    \n    return\
    \ prod\nend\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo1o_01yj.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo1o_01yj.jl:1\n\
    in expression starting at /tmp/tmpo1o_01yj.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .< 0] = 1\n        signs[arr .> 0] = -1\n  \
    \      signs = signs.prod(1)\n        return signs * prod(signs)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert\
    \ prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates sum of squares of integers multiplied\
    \ by product of all signs\nof each number in the vector, represented by 1, -1\
    \ or 0.\nExample: \n>>> sum_signs([1, 2, 2, -4])\n9\n>>> sum_signs([0, 1])\n0\n\
    >>> sum_signs([])\nnothing\nHint: use function prod_signs.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpadigshqo.jl:26\nin expression starting at\
    \ /tmp/tmpadigshqo.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 0] = 0\n        sum = 0\n        for i = 1:length(signs)\n\
    \            sum += signs[i] * prod(signs)\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2,\
    \ -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nExercise 3\nWrite a function that calculates sum of squares of\
    \ integers multiplied by product of all signs of each number in the vector, represented\
    \ by 1, -1 or 0.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t\
    @test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwohojp5r.jl:30\nin expression starting at\
    \ /tmp/tmpwohojp5r.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = zeros(Int,\
    \ length(arr))\n        for (i, x) in enumerate(arr)\n            signs[i] = sign(x)\
    \ * sign(i)\n        end\n        return sum(abs2, signs)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0,\
    \ 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\nProblem 7\nWrite\
    \ a function that returns number of integers divisible by given number n.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2,\
    \ 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1,\
    \ 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t\
    @test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpagq0w1ou.jl:26\nin expression starting at\
    \ /tmp/tmpagq0w1ou.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        signs = filter(x -> x != 0, signs) \n        signs = prod(signs)\
    \ \n        mags = map(abs, arr) \n        mags = filter(x -> x != 0, mags) \n\
    \        mags = prod(mags) \n        return signs * mags \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsw9a6ug1.jl:28\nin expression starting at\
    \ /tmp/tmpsw9a6ug1.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 0] = 0\n        sum = 0\n        for i = 1:length(signs)\n\
    \            sum = sum + signs[i] * prod(signs)\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    You are given a\
    \ vector arr of integers and you need to return\n    sum of magnitudes of integers\
    \ multiplied by product of all signs\n    of each number in the vector, represented\
    \ by 1, -1 or 0.\n    Note: return nothing for empty arr.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprmy4scnk.jl:30\nin expression starting at\
    \ /tmp/tmprmy4scnk.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    \n    signs = zeros(Int, length(arr))\n\
    \    signs[1] = 1\n    signs[end] = -1\n    \n    sum_of_mags = sum(map(abs, arr))\n\
    \    \n    prod = 1\n    for x in arr\n        prod *= signs[x]\n    end\n   \
    \ \n    return sum_of_mags * prod\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates sum of squares of numbers in arr using prod_signs function.\n\
    using Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqd_bb3kh.jl:32\nin expression starting at\
    \ /tmp/tmpqd_bb3kh.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        signs = filter(x -> x != 0, signs)\n        signs = map(x -> x\
    \ * prod(signs), arr)\n        return sum(signs)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqc8aouuy.jl:25\nin expression starting at\
    \ /tmp/tmpqc8aouuy.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        signs_prod = prod(signs) \n        sum_of_magnitudes = sum(map(abs,\
    \ arr))\n        return sum_of_magnitudes * signs_prod\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0,\
    \ 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the product of all numbers in the given array arr multiplied\
    \ by product of all signs of each number in the vector, represented by 1, -1 or\
    \ 0.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ld02wz9.jl:25\nin expression starting at\
    \ /tmp/tmp5ld02wz9.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 0] = 0\n        product = signs .* prod(signs)\n      \
    \  return sum(abs(product))\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ calculates sum of absolute values of all elements in an array.\nusing Test\n\
    \n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4])\
    \ == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpffuzhami.jl:27\nin expression starting at\
    \ /tmp/tmpffuzhami.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .< 0] = -1\n        signs[arr .> 0] = 1\n  \
    \      signs = signs .* prod(signs)\n        return sum(signs)\n    end\nend\n\
    </code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nHere's a solution using broadcasting\
    \ -\n<code>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzn_mx_ul.jl:26\nin expression starting at\
    \ /tmp/tmpzn_mx_ul.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        for i = 1:length(arr) \n            signs[i] = sign(arr[i])\n\
    \        end\n        product = prod(signs)\n        magnitudes = sum(signs)\n\
    \        return magnitudes * product\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ calculates sum of squares of integers multiplied by product of all signs of\
    \ each number in the vector, represented by 1, -1 or 0.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyv7xr7oq.jl:28\nin expression starting at\
    \ /tmp/tmpyv7xr7oq.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        sum_of_mags\
    \ = sum(abs.(arr .- signs)) \n        return sum_of_mags * prod(signs)\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns number of positive\
    \ numbers in an array.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqhhdx8qg.jl:26\nin expression starting at\
    \ /tmp/tmpqhhdx8qg.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .< 0] = -1\n        signs[arr .> 0] = 1\n  \
    \      signs = signs .* prod(signs)\n        return sum(signs)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert\
    \ prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that calculates sum of squares of integers multiplied\
    \ by product of all signs of each number in the vector, represented by 1, -1 or\
    \ 0.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd5m9gq4s.jl:26\nin expression starting at\
    \ /tmp/tmpd5m9gq4s.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 0] = 0\n        sum = 0\n        for i in 1:length(signs)\n\
    \            sum += signs[i] * prod(signs)\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns sum\
    \ of absolute values of all numbers in arr vector.\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdcbbl_wa.jl:30\nin expression starting at\
    \ /tmp/tmpdcbbl_wa.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    \n    signs = zeros(Int, length(arr))\n\
    \    signs[1] = 1\n    signs[end] = -1\n    \n    prod = 1\n    for i in 1:length(arr)\
    \ \n        prod *= signs[i] \n    end\n    \n    return prod * sum(abs(arr))\n\
    end\n</cell>\n<code language=julia-1.5>\n@test prod_signs([1, 2, 2, -4]) == 9\n\
    @test prod_signs([0, 1]) == 0\n@test prod_signs([]) == nothing\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates sum of squares of integers multiplied\
    \ by product of all signs\nof each number in the vector, represented by 1, -1\
    \ or 0.\nExample: \n>>> sum_signs([1, 2, 2, -4])\n9\n>>> sum_signs([0, 1])\n0\n\
    >>> sum_signs([])\nnothing\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6amfavbr.jl:30\nin expression starting at\
    \ /tmp/tmp6amfavbr.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = signs(arr)\n\
    \        product = prod(signs)\n        sum_of_magnitudes = sum(abs.(arr .- product))\n\
    \        return sum_of_magnitudes * product\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ calculates sum of squared magnitudes of integers multiplied by product of all\
    \ signs of each number in the vector, represented by 1, -1 or 0.\nusing Test\n\
    \n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4])\
    \ == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp55kmvpue.jl:25\nin expression starting at\
    \ /tmp/tmp55kmvpue.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[arr .== 0] = -1\n        signs[arr .== 1] = 1\n\
    \        signs[arr .== -1] = 0\n        product = signs .* prod(signs)\n     \
    \   return sum(abs(product))\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector arr and returns its sum of the absolute values\
    \ of the difference between each element and the mean of arr. \nIf arr is empty,\
    \ return 0.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3hptwcxi.jl:27\nin expression starting at\
    \ /tmp/tmp3hptwcxi.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 0] = 0\n        return sum(signs .* prod)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert\
    \ prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns True if a number is odd, False otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvaxr0tac.jl:26\nin expression starting at\
    \ /tmp/tmpvaxr0tac.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        product\
    \ = 1\n        for el in arr \n            product *= el\n        end\n      \
    \  return signs * product\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns sum of squares of integers multiplied by product of all signs of numbers\
    \ in the vector, represented by 1, -1 or 0.\nusing Test\n\n@testset begin\n\n\
    candidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkzu95usd.jl:29\nin expression starting at\
    \ /tmp/tmpkzu95usd.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 0] = 0\n        sum_of_mags = sum(signs .* arr)\n     \
    \   return sum_of_mags \n    end\nend\n</code>\n<|/ a tags=julia |>\n<| a dscore=1\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpemoiq6n_.jl:27\nin expression starting at\
    \ /tmp/tmpemoiq6n_.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        signs = prod(signs) \n        mags = map(abs, arr) \n       \
    \ mags = prod(mags) \n        return signs * mags \n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0,\
    \ 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns True if a number is odd and False otherwise.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2,\
    \ 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1,\
    \ 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t\
    @test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpccmh3b77.jl:26\nin expression starting at\
    \ /tmp/tmpccmh3b77.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .< 0] = -1\n        signs[arr .> 0] = 1\n  \
    \      product = signs.*prod(signs)\n        return sum(abs(product))\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) ==\
    \ 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns True if a number is odd and\
    \ False otherwise.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t\
    @test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpap6rfu5k.jl:26\nin expression starting at\
    \ /tmp/tmpap6rfu5k.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        product = prod(signs)\n        magnitudes = map(abs, arr)\n  \
    \      return sum(magnitudes * product)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns True if a number is even, False otherwise.\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp23tgkd5k.jl:25\nin expression starting at\
    \ /tmp/tmp23tgkd5k.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        signs_prod = prod(signs) \n        sum_of_mags = sum(map(abs,\
    \ arr)) \n        return sum_of_mags * signs_prod \n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns sum of absolute values of all elements\
    \ of arr multiplied by product of all signs of elements of arr, represented by\
    \ 1, -1 or 0.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9qdks6vj.jl:25\nin expression starting at\
    \ /tmp/tmp9qdks6vj.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        product = prod(signs) \n        product = product * prod(signs)\
    \ \n        product = product * prod(signs) \n        product = product * prod(signs)\
    \ \n        product = product * prod(signs) \n        product = product * prod(signs)\
    \ \n        product = product * prod(signs) \n        product = product * prod(signs)\
    \ \n        product = product * prod(signs) \n        product = product * prod(signs)\
    \ \n        product = product * prod(signs) \n        product = product * prod(signs)\
    \ \n        product = product * prod(signs) \n        product = product * prod(signs)\
    \ \n        product = product * prod(signs) \n        product = product * prod(signs)\
    \ \n        product = product * prod(signs) \n        product = product * prod(signs)\
    \ \n        product = product * prod(signs) \n        product = product * prod(signs)\
    \ \n        product = product * prod(signs) \n        product = product * prod(signs)\
    \ \n        product = product * prod(signs) \n        product = product * prod(signs)\
    \ \n        product = product * prod(signs) \n        product = product * prod(signs)\
    \ \n        product = product * prod(signs) \n        product = product * prod(signs)\
    \ \n        product = product * prod(signs) \n        product = product * prod(signs)\
    \ \n        product = product * prod(signs) \n        product = product * prod(signs)\
    \ \n        product = product * prod(signs) \n        product = product * prod(signs)\
    \ \n        product = product * prod(signs) \n        product = product * prod(signs)\
    \ \n        product = product * prod(signs) \n        product = product * prod(signs)\
    \ \n        product = product * prod(signs) \n        product = product * prod(signs)\
    \ \n        product = product * prod(signs) \n        product = product * prod(signs)\
    \ \n        product = product * prod(signs) \n        product = product * prod(signs)\
    \ \n        product = product * prod(signs) \n        product = product * prod(signs)\
    \ \n        product = product * prod(signs) \n        product = product * prod(signs)\
    \ \n        product = product * prod(signs) \n        product = product * prod(signs)\
    \ \n        product = product * prod(signs) \n        product = product * prod(signs)\
    \ \n        product = product * prod(signs) \n        product = product * prod(signs)\
    \ \n        product = product * prod(sign\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx71im08v.jl:75\nin expression starting at\
    \ /tmp/tmpx71im08v.jl:75\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        for (i,val) in enumerate(arr)\n            signs[i] =\
    \ sign(i) * sign(val)\n        end\n        signs = signs.sum\n        product\
    \ = signs * prod(signs)\n        return product\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0,\
    \ 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that calculates the sum of squares of integers in a given vector.\n\
    using Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvibmo4ru.jl:28\nin expression starting at\
    \ /tmp/tmpvibmo4ru.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 0] = 0\n        return sum(signs.*abs(arr))\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) ==\
    \ 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns sum of squares of integers multiplied\
    \ by product of all signs\nof each number in the vector, represented by 1, -1\
    \ or 0.\nNote: return nothing for empty arr.\nusing Test\n\n@testset begin\n\n\
    candidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy1yly4c4.jl:26\nin expression starting at\
    \ /tmp/tmpy1yly4c4.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 0] = 0\n        sum = 0\n        for n in arr \n      \
    \      sum += signs[n]\n        end\n        return sum\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0,\
    \ 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns True if a number is even and False if it is odd.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2,\
    \ 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1,\
    \ 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t\
    @test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvkkzmi7t.jl:30\nin expression starting at\
    \ /tmp/tmpvkkzmi7t.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        signs = filter(x -> x == 1, signs) \n        signs = filter(x\
    \ -> x == -1, signs) \n        signs = filter(x -> x == 0, signs) \n        signs\
    \ = prod(signs) \n        mags = map(abs, arr) \n        mags = filter(x -> x\
    \ == 0, mags) \n        mags = filter(x -> x == 1, mags) \n        mags = filter(x\
    \ -> x == -1, mags) \n        mags = sum(mags) \n        return signs * mags \n\
    \    end\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work for negative\
    \ numbers. `prod([-1,1])` returns `1` instead of `-1`.\n<|/ c |>\n<| c |>\nThanks\
    \ for pointing that out. I've updated the answer to include a fix for negative\
    \ numbers.\n<|/ c |>\n<| a dscore=1 |>\nHere's a solution using Julia's built-in\
    \ product and abs functions:\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqqocneut.jl:32\nin expression starting at\
    \ /tmp/tmpqqocneut.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        signs_product = prod(signs) \n        sum_of_magnitudes = sum(map(abs,\
    \ arr))\n        return sum_of_magnitudes * signs_product \n    end\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that returns sum of squared magnitudes of\
    \ integers multiplied by product of all signs\nof each number in the vector, represented\
    \ by 1, -1 or 0.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t\
    @test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm9hv4714.jl:25\nin expression starting at\
    \ /tmp/tmpm9hv4714.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 0] = 0\n        sum_of_mags = sum(abs.(signs))\n      \
    \  prod_of_mags = prod(signs)\n        return sum_of_mags * prod_of_mags \n  \
    \  end\nend\n</code>\n<|/ a tags=julia |>\n<| a dscore=1 |>\nI wrote a function\
    \ that does this for you:\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcwb3t03b.jl:28\nin expression starting at\
    \ /tmp/tmpcwb3t03b.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = signs(arr)\
    \ \n        signs_product = prod(signs) \n        sum_of_magnitudes = sum(abs.(arr\
    \ .- signs_product)) \n        return sum_of_magnitudes * signs_product \n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4])\
    \ == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n\
    <text>\nTask 3\nWrite a function that returns number of integers in arr which\
    \ are divisible by given number k.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx5o4jxpq.jl:25\nin expression starting at\
    \ /tmp/tmpx5o4jxpq.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        signs_prod = prod(signs) \n        sum_of_mags = sum(map(abs,\
    \ arr)) \n        return sum_of_mags * signs_prod \n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns sum of squares of integers multiplied\
    \ by product of all signs\nof each number in the vector, represented by 1, -1\
    \ or 0.\nNote: return nothing for empty arr.\nusing Test\n\n@testset begin\n\n\
    candidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnmcgq6ok.jl:25\nin expression starting at\
    \ /tmp/tmpnmcgq6ok.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    \n    signs = zeros(Int, length(arr))\n\
    \    signs[1] = 1\n    signs[end] = -1\n    \n    prod = 1\n    for i in 1:length(arr)\
    \ \n        prod *= signs[i]\n    end\n    \n    return prod * sum(abs(arr))\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes an array of integers\
    \ and returns its sum.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp12f9jz78.jl:30\nin expression starting at\
    \ /tmp/tmp12f9jz78.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = signs(arr)\
    \ \n        signs_product = prod(signs) \n        sum_of_magnitudes = sum(abs.(arr\
    \ .- signs_product)) \n        return sum_of_magnitudes * signs_product \n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4])\
    \ == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n\
    <text>\nExercise 2\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t\
    @test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphpf9xysi.jl:25\nin expression starting at\
    \ /tmp/tmphpf9xysi.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    \n    signs = zeros(Int64, length(arr))\n\
    \    signs[arr .== 0] = -1\n    signs[arr .== 1] = 1\n    \n    prod = 1\n   \
    \ for x in arr \n        prod *= signs[x]\n    end\n    \n    return prod\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert\
    \ prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates sum of squares of integers multiplied\
    \ by product of all signs of integers in the vector, represented by 1, -1 or 0.\n\
    using Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9qifslzr.jl:30\nin expression starting at\
    \ /tmp/tmp9qifslzr.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        product\
    \ = prod(signs)\n        sum_of_magnitudes = sum(abs.(arr .- product))\n     \
    \   return sum_of_magnitudes * product\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns True if a number is even, False otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm8wkdjr_.jl:27\nin expression starting at\
    \ /tmp/tmpm8wkdjr_.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0 \n        return nothing\n    end\n    \n    sum = 0\n    for\
    \ i in arr\n        sum += sign(i) * i\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4])\
    \ == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp3mcys7w1.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmp3mcys7w1.jl:31\n  Expression: candidate([1,\
    \ 2, 2, -4]) == -9\n   Evaluated: 9 == -9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3mcys7w1.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3mcys7w1.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp3mcys7w1.jl:32\n  Expression: candidate([0, 1]) == 0\n   Evaluated:\
    \ 1 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3mcys7w1.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3mcys7w1.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp3mcys7w1.jl:33\n  Expression: candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10\n   Evaluated: 10 == -10\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmp3mcys7w1.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3mcys7w1.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp3mcys7w1.jl:37\n  Expression: candidate([-1, 1, 1, 1]) ==\
    \ -4\n   Evaluated: 4 == -4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp3mcys7w1.jl:37 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp3mcys7w1.jl:30\ntest set: Test\
    \ Failed at /tmp/tmp3mcys7w1.jl:38\n  Expression: candidate([-1, 1, 1, 0]) ==\
    \ 0\n   Evaluated: 3 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inli"
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    \n    signs = zeros(Int, length(arr))\n\
    \    signs[1] = 1\n    signs[end] = -1\n    \n    prod = 1\n    for x in arr\n\
    \        prod *= signs[x]\n    end\n    \n    return prod\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0,\
    \ 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that calculates sum of squares of integers multiplied by product\
    \ of all signs of each number in the vector, represented by 1, -1 or 0.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2,\
    \ 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1,\
    \ 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t\
    @test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf3d0r4ou.jl:30\nin expression starting at\
    \ /tmp/tmpf3d0r4ou.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        signs_product = prod(signs) \n        sum_of_magnitudes = sum(map(abs,\
    \ arr))\n        return sum_of_magnitudes * signs_product \n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that calculates the sum of squared magnitudes\
    \ of integers multiplied by product of all signs of numbers in the vector, represented\
    \ by 1, -1 or 0.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t\
    @test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0rwhu8dl.jl:25\nin expression starting at\
    \ /tmp/tmp0rwhu8dl.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr)) \n        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 0] = 0\n        signs = signs .* prod(signs)\n        return\
    \ sum(signs)\n    end\nend\n</code>\n<|/ a tags=julia,arrays |>\n<| a dscore=0\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm_8vf374.jl:27\nin expression starting at\
    \ /tmp/tmpm_8vf374.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0 \n        return nothing \n    else \n        signs = signs(arr)\
    \ \n        signs_product = prod(signs) \n        sum_of_magnitudes = sum(abs.(arr\
    \ .- signs_product)) \n        return sum_of_magnitudes * signs_product \n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy0kuruuk.jl:25\nin expression starting at\
    \ /tmp/tmpy0kuruuk.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .== 0] = -1\n        signs[arr .== 1] = 1\n\
    \        product = signs .* prod(signs)\n        return sum(abs.(product))\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2,\
    \ -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nTask 3\nWrite a function that returns sum of squares of integers\
    \ multiplied by product of all signs\nof each number in the vector, represented\
    \ by 1, -1 or 0.\nNote: return nothing for empty arr.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw5inf765.jl:26\nin expression starting at\
    \ /tmp/tmpw5inf765.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        product\
    \ = 1\n        for i in 1:length(arr) \n            product *= signs[i]\n    \
    \    end\n        return product \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns sum of squares of integers multiplied by product of all signs\nof each\
    \ number in the vector, represented by 1, -1 or 0.\nNote: return nothing for empty\
    \ arr.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsgr6go5w.jl:29\nin expression starting at\
    \ /tmp/tmpsgr6go5w.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        product\
    \ = prod(signs)\n        magnitudes = map(abs, arr)\n        return sum(magnitudes\
    \ * product)\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ takes a vector arr of integers and returns its product of absolute values.\n\
    using Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpox8kaohj.jl:27\nin expression starting at\
    \ /tmp/tmpox8kaohj.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0\n        return nothing\n    else\n        sum = 0\n        for\
    \ n in arr\n            sum += sign(n)\n        end\n        return sum * prod(map(sign,\
    \ arr))\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector arr of integers and returns its absolute value.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdmwvpzkh.jl:26\nin expression starting at\
    \ /tmp/tmpdmwvpzkh.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0\n        return nothing\n    signs = zeros(Int, length(arr))\n\
    \    for (i,val) in enumerate(arr)\n        signs[i] = sign(val)\n    end\n  \
    \  prod = prod(signs)\n    return prod * sum(abs2, arr)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns number of positive numbers in a given array.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_wc5sb99.jl:25\nin expression starting at\
    \ /tmp/tmp_wc5sb99.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        signs = filter(x -> x == 1, signs) \n        signs = filter(x\
    \ -> x == -1, signs) \n        signs = filter(x -> x == 0, signs) \n        signs\
    \ = sum(signs) \n        return signs * prod(signs) \n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that calculates sum of squares of integers\
    \ multiplied by product of all signs of integers multiplied by product of all\
    \ signs of integers multiplied by product of all signs of integers multiplied\
    \ by product of all signs of integers multiplied by product of all signs of integers\
    \ multiplied by product of all signs of integers multiplied by product of all\
    \ signs of integers multiplied by product of all signs of integers multiplied\
    \ by product of all signs of integers multiplied by product of all signs of integers\
    \ multiplied by product of all signs of integers multiplied by product of all\
    \ signs of integers multiplied by product of all signs of integers multiplied\
    \ by product of all signs of integers multiplied by product of all signs of integers\
    \ multiplied by product of all signs of integers multiplied by product of all\
    \ signs of integers multiplied by product of all signs of integers multiplied\
    \ by product of all signs of integers multiplied by product of all signs of integers\
    \ multiplied by product of all signs of integers multiplied by product of all\
    \ signs of integers multiplied by product of all signs of integers multiplied\
    \ by product of all signs of integers multiplied by product of all signs of integers\
    \ multiplied by product of all signs of integers multiplied by product of all\
    \ signs of integers multiplied by product of all signs of integers multiplied\
    \ by product of all signs of integers multiplied by product of all signs of integers\
    \ multiplied by product of all signs of integers multiplied by product of all\
    \ signs of integers multiplied by product of all signs of integers multiplied\
    \ by product of all signs of integers multiplied by product of all signs of integers\
    \ multiplied by product of all signs of integers multiplied by product of all\
    \ signs of integers multiplied by product of all signs of integers multiplied\
    \ by product of all signs of integers multiplied by product of all signs of integers\
    \ multiplied by product of all signs of integers multiplied by product of all\
    \ signs of integers multiplied by product of all signs of integers multiplied\
    \ by product of all signs of integers multiplied by product of all signs of integers\
    \ multiplied by product of all signs of integers multiplied by product of all\
    \ signs of integers multiplied by product of all signs of integers multiplied\
    \ by product of all signs of integers multiplied by product of all signs of integers\
    \ multiplied by product of all signs of integers multiplied by product of all\
    \ signs of integers multiplied by product of all \nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8p90r9cf.jl:27\nin expression starting at\
    \ /tmp/tmp8p90r9cf.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    \n    signs = zeros(Int, length(arr))\n\
    \    signs[1] = 1\n    signs[end] = -1\n    \n    sum = 0\n    for x in arr \n\
    \        sum += signs[x] * x\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the sum of squares of integers multiplied\
    \ by product of all signs of each number in the vector, represented by 1, -1 or\
    \ 0.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy5tub3bf.jl:29\nin expression starting at\
    \ /tmp/tmpy5tub3bf.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        product\
    \ = prod(signs)\n        sum_of_mags = sum(abs.(arr .- product))\n        return\
    \ sum_of_mags\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes two vectors of integers and returns their dot product. \nThe dot product\
    \ of two vectors $\\mathbf{a}$ and $\\mathbf{b}$ is defined as:\nusing Test\n\n\
    @testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) ==\
    \ -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_6uhpy31.jl:27\nin expression starting at\
    \ /tmp/tmp_6uhpy31.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        product\
    \ = prod(signs)\n        sum_of_magnitudes = sum(abs.(arr .- product))\n     \
    \   return sum_of_magnitudes * product\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns True if a number is even, False otherwise.\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ioz7axi.jl:27\nin expression starting at\
    \ /tmp/tmp1ioz7axi.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    \n    signs = zeros(Int64, length(arr))\n\
    \    signs[arr .== 0] = -1\n    signs[arr .== 1] = 1\n    \n    prod = 1\n   \
    \ for x in arr \n        prod *= signs[x]\n    end\n    \n    return prod\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert\
    \ prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\n\
    Task 3\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq5f40_t8.jl:30\nin expression starting at\
    \ /tmp/tmpq5f40_t8.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    end\n    \n    signs = zeros(Int,\
    \ length(arr))\n    for k in 1:length(arr)\n        signs[k] = signs[k] + arr[k]\n\
    \    end\n    \n    prod = 1\n    for k in 1:length(arr)\n        prod = prod\
    \ * signs[k]\n    end\n    \n    return prod\nend\n</cell>\n<code language=julia-1.5>\n\
    @test prod_signs([1, 2, 2, -4]) == 9\n@test prod_signs([0, 1]) == 0\n@test prod_signs([])\
    \ == nothing\n</cell>\n<text>\nExercise 3\nWrite a function that returns sum of\
    \ absolute values of all numbers in a vector.\nusing Test\n\n@testset begin\n\n\
    candidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprzg6nxnw.jl:32\nin expression starting at\
    \ /tmp/tmprzg6nxnw.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        product\
    \ = 1\n        for i in 1:length(arr) \n            product *= signs[i]\n    \
    \        signs[i] = 0\n        end\n        return product\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0,\
    \ 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns sum of absolute values of all elements in arr vector.\n\
    using Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy0z8bcco.jl:30\nin expression starting at\
    \ /tmp/tmpy0z8bcco.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr)) \n        signs[1] = 1 if arr[1] < 0 else -1 \n        signs[2]\
    \ = 1 if arr[2] < 0 else -1 \n        signs[3] = 1 if arr[3] < 0 else -1 \n  \
    \      signs[4] = 1 if arr[4] < 0 else -1 \n        signs[5] = 1 if arr[5] < 0\
    \ else -1 \n        signs[6] = 1 if arr[6] < 0 else -1 \n        signs[7] = 1\
    \ if arr[7] < 0 else -1 \n        signs[8] = 1 if arr[8] < 0 else -1 \n      \
    \  signs[9] = 1 if arr[9] < 0 else -1 \n        signs[10] = 1 if arr[10] < 0 else\
    \ -1 \n        signs[11] = 1 if arr[11] < 0 else -1 \n        signs[12] = 1 if\
    \ arr[12] < 0 else -1 \n        signs[13] = 1 if arr[13] < 0 else -1 \n      \
    \  signs[14] = 1 if arr[14] < 0 else -1 \n        signs[15] = 1 if arr[15] < 0\
    \ else -1 \n        signs[16] = 1 if arr[16] < 0 else -1 \n        signs[17] =\
    \ 1 if arr[17] < 0 else -1 \n        signs[18] = 1 if arr[18] < 0 else -1 \n \
    \       signs[19] = 1 if arr[19] < 0 else -1 \n        signs[20] = 1 if arr[20]\
    \ < 0 else -1 \n        signs[21] = 1 if arr[21] < 0 else -1 \n        signs[22]\
    \ = 1 if arr[22] < 0 else -1 \n        signs[23] = 1 if arr[23] < 0 else -1 \n\
    \        signs[24] = 1 if arr[24] < 0 else -1 \n        signs[25] = 1 if arr[25]\
    \ < 0 else -1 \n        signs[26] = 1 if arr[26] < 0 else -1 \n        signs[27]\
    \ = 1 if arr[27] < 0 else -1 \n        signs[28] = 1 if arr[28] < 0 else -1 \n\
    \        signs[29] = 1 if arr[29] < 0 else -1 \n        signs[30] = 1 if arr[30]\
    \ < 0 else -1 \n        signs[31] = 1 if arr[31] < 0 else -1 \n        signs[32]\
    \ = 1 if arr[32] < 0 else -1 \n        signs[33] = 1 if arr[33] < 0 else -1 \n\
    \        signs[34] = 1 if arr[34] < 0 else -1 \n        signs[35] = 1 if arr[35]\
    \ < 0 else -1 \n        signs[36] = 1 if arr[36] < 0 else -1 \n        signs[37]\
    \ = 1 if arr[37] < 0 else -1 \n        signs[38] = 1 if arr[38] < 0 else -1 \n\
    \        signs[39] = 1 if arr[39] < 0 else -1 \n        signs[40] = 1 if arr[40]\
    \ < 0 else -1 \n        signs[41] = 1 if arr[41] < 0 else \nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmpioees0p4.jl:16 expected \"\
    end\", got \"if\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpioees0p4.jl:20\n\
    in expression starting at /tmp/tmpioees0p4.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .== 0] = -1\n        signs[arr .== 1] = 1\n\
    \        signs = signs * prod(signs)\n        return signs \n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns sum of squares of integers multiplied\
    \ by product of all signs\nof each number in the vector, represented by 1, -1\
    \ or 0.\nNote: return nothing for empty arr.\nusing Test\n\n@testset begin\n\n\
    candidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3rucxp1k.jl:26\nin expression starting at\
    \ /tmp/tmp3rucxp1k.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0 \n        return nothing \n    else \n        sum = 0\n     \
    \   for el in arr \n            sum += el*sign(el) \n        return sum \n   \
    \ end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns number\
    \ of integers in arr which are divisible by k. \nIf arr is empty return 0.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2,\
    \ 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1,\
    \ 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t\
    @test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpze8nhj3q.jl:25\nin expression starting at\
    \ /tmp/tmpze8nhj3q.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 0] = 0\n        signs = signs .* (signs .== 1)\n      \
    \  return sum(abs.(signs))\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns True if a number is divisible by 3 and False otherwise. Test it on several\
    \ examples:\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplv_dq7ky.jl:27\nin expression starting at\
    \ /tmp/tmplv_dq7ky.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        product\
    \ = 1\n        for i in 1:length(arr) \n            product *= signs[i]\n    \
    \        signs[i] *= -1\n        end\n        return product * sum(abs.(arr))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2,\
    \ -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns sum of squares of integers\
    \ multiplied by product of all signs of integers multiplied by product of all\
    \ signs of integers multiplied by product of all signs of integers multiplied\
    \ by product of all signs of integers multiplied by product of all signs of integers\
    \ multiplied by product of all signs of integers multiplied by product of all\
    \ signs of integers multiplied by product of all signs of integers multiplied\
    \ by product of all signs of integers multiplied by product of all signs of integers\
    \ multiplied by product of all signs of integers multiplied by product of all\
    \ signs of integers multiplied by product of all signs of integers multiplied\
    \ by product of all signs of integers multiplied by product of all signs of integers\
    \ multiplied by product of all signs of integers multiplied by product of all\
    \ signs of integers multiplied by product of all signs of integers multiplied\
    \ by product of all signs of integers multiplied by product of all signs of integers\
    \ multiplied by product of all signs of integers multiplied by product of all\
    \ signs of integers multiplied by product of all signs of integers multiplied\
    \ by product of all signs of integers multiplied by product of all signs of integers\
    \ multiplied by product of all signs of integers multiplied by product of all\
    \ signs of integers multiplied by product of all signs of integers multiplied\
    \ by product of all signs of integers multiplied by product of all signs of integers\
    \ multiplied by product of all signs of integers multiplied by product of all\
    \ signs of integers multiplied by product of all signs of integers multiplied\
    \ by product of all signs of integers multiplied by product of all signs of integers\
    \ multiplied by product of all signs of integers multiplied by product of all\
    \ signs of integers multiplied by product of all signs of integers multiplied\
    \ by product of all signs of integers multiplied by product of all signs of integers\
    \ multiplied by product of all signs of integers multiplied by product of all\
    \ signs of integers multiplied by product of all signs of integers multiplied\
    \ by product of all signs of integers multiplied by product of all signs of integers\
    \ multiplied by product of all signs of integers multiplied by product of all\
    \ signs of integers multiplied by product of all signs of \nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpecy5wrmp.jl:30\nin expression starting at\
    \ /tmp/tmpecy5wrmp.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0 \n        return nothing\n    else \n        sum = 0\n      \
    \  for n in arr \n            sum += sign(n) * prod(sign(n))\n        return sum\n\
    \    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4])\
    \ == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyb84gt5x.jl:25\nin expression starting at\
    \ /tmp/tmpyb84gt5x.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[arr .== 0] = -1\n        signs[arr .== 1] = 1\n\
    \        product = signs .* prod(signs)\n        return sum(abs(product))\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2,\
    \ -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates sum of squares of\
    \ numbers in arr vector.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpff658ib6.jl:26\nin expression starting at\
    \ /tmp/tmpff658ib6.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    elseif length(arr) == 1 \n  \
    \      return arr[1]\n    else\n        signs = zeros(Int64, length(arr))\n  \
    \      signs[1] = 1\n        signs[end] = -1\n        product = 1\n        for\
    \ i in 2:length(arr)\n            signs[i] = signs[i-1] * signs[i]\n         \
    \   product *= signs[i]\n        end\n        return product * sum(abs(arr))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2,\
    \ -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nExercise 3\nWrite a function that calculates sum of squares of\
    \ numbers in a given vector.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps9g6pl8o.jl:32\nin expression starting at\
    \ /tmp/tmps9g6pl8o.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 0] = 0\n        signs = signs .* prod(signs)\n        return\
    \ sum(signs)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1,\
    \ 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) ==\
    \ nothing\n</cell>\n<text>\nExercise 3\nWrite a function that returns True if\
    \ a number is odd and False otherwise. \nThe function should work for both positive\
    \ and negative numbers.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb5gyvovh.jl:27\nin expression starting at\
    \ /tmp/tmpb5gyvovh.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[arr .< 0] = -1\n        signs[arr .> 0] = 1\n  \
    \      product = signs.*arr\n        magnitudes = sqrt(product.^2)\n        return\
    \ sum(magnitudes)\n    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n\
    The answer by is correct, but I wanted to add some explanation as to why it works.\n\
    The function prod_signs returns a single number, which is the sum of the magnitudes\
    \ of the numbers in the array. \nThe function prod_signs takes two arguments:\
    \ arr and signs. \nThe function prod_signs first checks to see if arr is empty.\
    \ If it is, it returns nothing. Otherwise, it creates a new array called signs,\
    \ which contains -1 and 1 for each number in the array. \nThe function prod_signs\
    \ then multiplies each number in the array by the corresponding sign and sums\
    \ the magnitudes. \nThe function prod_signs then returns the sum of the magnitudes.\n\
    <|/ a tags=julia |>\n<| a tags=julia |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpozuf72n1.jl:27\nin expression starting at\
    \ /tmp/tmpozuf72n1.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    \n    signs = zeros(Int, length(arr))\n\
    \    signs[arr .== 1] = 1\n    signs[arr .== -1] = -1\n    \n    prod = signs\
    \ .* prod(signs)\n    \n    return sum(abs.(prod))\nend\n</cell>\n<code language=julia-1.3>\n\
    @test prod_signs([1, 2, 2, -4]) == 9\n@test prod_signs([0, 1]) == 0\n@test prod_signs([])\
    \ == nothing\n</cell>\n<text>\nExercise 3\nWrite a function that returns sum of\
    \ absolute values of all elements in the given array.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnu1eyopi.jl:27\nin expression starting at\
    \ /tmp/tmpnu1eyopi.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    elseif length(arr) == 1 \n  \
    \      return arr[1]\n    elseif length(arr) == 2 \n        return arr[1]*arr[2]\n\
    \    elseif length(arr) == 3 \n        return arr[1]*arr[2]*arr[3]\n    elseif\
    \ length(arr) == 4 \n        return arr[1]*arr[2]*arr[3]*arr[4]\n    elseif length(arr)\
    \ == 5 \n        return arr[1]*arr[2]*arr[3]*arr[4]*arr[5]\n    elseif length(arr)\
    \ == 6 \n        return arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]\n    elseif\
    \ length(arr) == 7 \n        return arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]\n\
    \    elseif length(arr) == 8 \n        return arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]\n\
    \    elseif length(arr) == 9 \n        return arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]\n\
    \    elseif length(arr) == 10 \n        return arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]\n\
    \    elseif length(arr) == 11 \n        return arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]*arr[11]\n\
    \    elseif length(arr) == 12 \n        return arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]*arr[11]*arr[12]\n\
    \    elseif length(arr) == 13 \n        return arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]*arr[11]*arr[12]*arr[13]\n\
    \    elseif length(arr) == 14 \n        return arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]*arr[11]*arr[12]*arr[13]*arr[14]\n\
    \    elseif length(arr) == 15 \n        return arr[1]*arr[2]*arr[3]*arr[4]*arr[5]*arr[6]*arr[7]*arr[8]*arr[9]*arr[10]*arr[11]*arr[12]*arr[13]*arr[14]*arr[15]\n\
    \    elseif \nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing condition in \"elseif\" at /tmp/tmpxrwse2m8.jl:48\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpxrwse2m8.jl:49\nin expression\
    \ starting at /tmp/tmpxrwse2m8.jl:49\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        product\
    \ = prod(signs)\n        magnitudes = sum(abs.(arr))\n        return magnitudes\
    \ * product\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo9v8al9v.jl:27\nin expression starting at\
    \ /tmp/tmpo9v8al9v.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        for (i,v) in enumerate(arr) \n            signs[i] = sign(v)\
    \ * sign(i)\n        return sum(abs.(signs)) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns sum of squares of integers multiplied by product of all signs\nof each\
    \ number in the vector, represented by 1, -1 or 0.\nExample: \n>>> sum_signs([1,\
    \ 2, 2, -4])\n9\n>>> sum_signs([0, 1])\n0\n>>> sum_signs([])\nnothing\n\"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpruuhz4tc.jl:25\nin expression starting at\
    \ /tmp/tmpruuhz4tc.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 0] = 0\n        sum = 0\n        for s in signs \n    \
    \        sum += s * prod(signs)\n        end\n        return sum \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert\
    \ prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that calculates sum of squares of integers multiplied\
    \ by product of all signs of numbers in the vector, represented by 1, -1 or 0.\n\
    using Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqvep9plk.jl:30\nin expression starting at\
    \ /tmp/tmpqvep9plk.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = signs(arr)\
    \ \n        sign = signs[1] \n        signs = signs[2:end] \n        sign = signs[1]\
    \ \n        product = prod(signs) \n        magnitude = sum(abs(arr) * sign) \n\
    \        return magnitude * product \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns True if a number is odd and False otherwise.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeu1ke9wf.jl:28\nin expression starting at\
    \ /tmp/tmpeu1ke9wf.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        signs_product = prod(signs) \n        sum_of_magnitudes = sum(map(abs,\
    \ arr))\n        return signs_product * sum_of_magnitudes \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0,\
    \ 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns True if a number is odd and False otherwise.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2,\
    \ 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1,\
    \ 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t\
    @test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf0i4hfg2.jl:25\nin expression starting at\
    \ /tmp/tmpf0i4hfg2.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        signs = filter(x -> x != 0, signs) \n        signs = prod(signs)\
    \ \n        magnitudes = map(abs, arr) \n        return magnitudes * signs \n\
    \    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia |>\nA more efficient\
    \ solution than using map and filter is to just use broadcasting by multiplying\
    \ the vector by the sign of each element in the vector:\n<code>\njulia> function\
    \ prod_signs(arr::Vector{Int64})\n           signs = signs(arr)\n           signs\
    \ = signs .* arr\n           magnitudes = map(abs, arr)\n           return magnitudes\
    \ .* signs\n       end\nprod_signs (generic function with 1 method)\nusing Test\n\
    \n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4])\
    \ == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfo0hdodm.jl:26\nin expression starting at\
    \ /tmp/tmpfo0hdodm.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    \n    signs = zeros(Int, length(arr))\n\
    \    signs[1] = 1\n    signs[end] = -1\n    \n    product = prod(signs)\n    \n\
    \    sum = 0\n    for x in arr \n        sum += abs(x) * product\n    end\n  \
    \  \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1,\
    \ 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) ==\
    \ nothing\n</cell>\n<text>\n4.3 Sign of numbers\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0e4b7w2y.jl:32\nin expression starting at\
    \ /tmp/tmp0e4b7w2y.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        product = prod(signs) \n        return product * sum(signs) \n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns True\
    \ if a number is odd, False otherwise. Test it on all numbers from 1 to 20.\n\
    using Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjwtc61uq.jl:24\nin expression starting at\
    \ /tmp/tmpjwtc61uq.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = signs(arr)\
    \ \n        signs_product = prod(signs) \n        sum_of_magnitudes = sum(abs.(arr\
    \ .- signs_product)) \n        return sum_of_magnitudes * signs_product \n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4])\
    \ == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns number of integers in arr which\
    \ are divisible by 3.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiqsmoq9k.jl:25\nin expression starting at\
    \ /tmp/tmpiqsmoq9k.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        product\
    \ = 1\n        for i in 1:length(arr) \n            product *= signs[i]\n    \
    \        signs[i] = 0\n        end\n        return product * sum(abs(arr))\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2,\
    \ -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns True if a number is\
    \ even, False otherwise. Test it on all numbers from 0 to 20.\nusing Test\n\n\
    @testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) ==\
    \ -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr3rhzw8h.jl:30\nin expression starting at\
    \ /tmp/tmpr3rhzw8h.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    \n    signs = zeros(Int64, length(arr))\n\
    \    signs[arr .== 1] = 1\n    signs[arr .== -1] = -1\n    \n    prod = 1\n  \
    \  for x in arr \n        prod *= signs[x]\n    end\n    \n    return prod\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert\
    \ prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\n\
    4.3 Sum of magnitudes\nWrite a function that calculates sum of magnitudes of integers\
    \ multiplied by product of all signs\nof each number in the vector, represented\
    \ by 1, -1 or 0.\nNote: return nothing for empty arr.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbc7pv9k1.jl:30\nin expression starting at\
    \ /tmp/tmpbc7pv9k1.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .== 0] = -1\n        signs[arr .== 1] = 1\n\
    \        signs = signs .* prod(signs)\n        return sum(signs)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert\
    \ prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns sum of squares of integers multiplied\
    \ by product of all signs\nof each number in the vector, represented by 1, -1\
    \ or 0.\nNote: return nothing for empty arr.\nusing Test\n\n@testset begin\n\n\
    candidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjy8djuja.jl:26\nin expression starting at\
    \ /tmp/tmpjy8djuja.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    \n    signs = zeros(Int, length(arr))\n\
    \    signs[arr .< 0] = -1\n    signs[arr .> 0] = 1\n    \n    sum_of_mags = sum(abs.(arr\
    \ .* signs))\n    \n    return sum_of_mags * prod(signs)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0,\
    \ 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an array of integers and returns its sum of the absolute\
    \ values.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyyvji134.jl:27\nin expression starting at\
    \ /tmp/tmpyyvji134.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        for (i, v) in enumerate(arr) \n            signs[i] =\
    \ sign(v) * sign(i)\n        \n        sum = 0\n        for (i, v) in enumerate(signs)\
    \ \n            sum += v * arr[i]\n        return sum\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0,\
    \ 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns sum of squares of integers multiplied by product of\
    \ all signs\nof each number in the vector, represented by 1, -1 or 0.\nNote: return\
    \ nothing for empty arr.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_lfjijvd.jl:29\nin expression starting at\
    \ /tmp/tmp_lfjijvd.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        for (i, x) in enumerate(arr) \n            signs[i] =\
    \ sign(x) * sign(i)\n        end\n        return sum(abs2, signs)\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 2 passed, 6 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpw7rvxplu.jl:28

    '
  stdout: "test set: Test Failed at /tmp/tmpw7rvxplu.jl:31\n  Expression: candidate([1,\
    \ 2, 2, -4]) == -9\n   Evaluated: 4 == -9\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw7rvxplu.jl:31 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw7rvxplu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpw7rvxplu.jl:32\n  Expression: candidate([0, 1]) == 0\n   Evaluated:\
    \ 1 == 0\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw7rvxplu.jl:32 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw7rvxplu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpw7rvxplu.jl:33\n  Expression: candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10\n   Evaluated: 7 == -10\nStacktrace:\n [1] macro expansion\n   @\
    \ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n\
    \ [2] macro expansion\n   @ /tmp/tmpw7rvxplu.jl:33 [inlined]\n [3] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw7rvxplu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpw7rvxplu.jl:35\n  Expression: candidate([2, 4, 1, 2, -1, -1,\
    \ 9]) == 20\n   Evaluated: 7 == 20\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpw7rvxplu.jl:35 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpw7rvxplu.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpw7rvxplu.jl:37\n  Expression: candidate([-1, 1, 1, 1]) ==\
    \ -4\n   Evaluated: 4 == -4\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.j"
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 0] = 0\n        sum_of_mags = sum(abs.(signs))\n      \
    \  prod_of_signs = prod(signs)\n        return sum_of_mags * prod_of_signs\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2,\
    \ -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nExercise 3\nWrite a function that calculates sum of squares of\
    \ integers multiplied by product of all signs of integers in the vector, represented\
    \ by 1, -1 or 0.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t\
    @test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4mgwlrzq.jl:28\nin expression starting at\
    \ /tmp/tmp4mgwlrzq.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        signs = prod(signs) \n        magnitudes = map(abs, arr) \n \
    \       magnitudes = prod(magnitudes) \n        return signs * magnitudes \n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2,\
    \ -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\n4.3 Sum of absolute values of all numbers in a vector\nusing\
    \ Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2,\
    \ 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1,\
    \ 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t\
    @test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsnpmq2sn.jl:26\nin expression starting at\
    \ /tmp/tmpsnpmq2sn.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr)) \n        signs[1] = 1\n        signs[end] = -1\n        product\
    \ = 1\n        for i in 1:length(arr) \n            product *= signs[i] \n   \
    \         signs[i] *= -1 \n        end\n        return product \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert\
    \ prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\n\
    Task 2.2: Product of signs\nWrite a function that calculates product of signs\
    \ of given vector.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t\
    @test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwxogj49y.jl:30\nin expression starting at\
    \ /tmp/tmpwxogj49y.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = signs(arr)\
    \ \n        sum_signs = sum(signs) \n        product = prod(signs) \n        return\
    \ sum_signs * product \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns True if a number is even, False otherwise. \nWrite a function that\
    \ returns True if a number is odd, False otherwise. \nWrite a function that returns\
    \ True if a number is prime (a number that has no divisors other than 1 and itself).\n\
    Write a function that returns True if a number is composite (a number that has\
    \ no divisors other than 1 and itself), False otherwise.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw2z3q4vo.jl:25\nin expression starting at\
    \ /tmp/tmpw2z3q4vo.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 0] = 0\n        return sum(abs.(signs)) \n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert\
    \ prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates sum of squared magnitudes of integers\
    \ multiplied by product of all signs\nof each number in the vector, represented\
    \ by 1, -1 or 0.\nNote: return nothing for empty arr.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4024qphx.jl:26\nin expression starting at\
    \ /tmp/tmp4024qphx.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        signs = filter(x -> x != 0, signs) \n        signs = prod(signs)\
    \ \n        signs = signs == 0 ? 1 : signs \n        signs = signs == 1 ? 1 :\
    \ -1 \n        signs = signs == -1 ? 1 : 0 \n        return sum(map(abs, arr)\
    \ * signs) \n    end\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_0q7qyfz.jl:28\nin expression starting at\
    \ /tmp/tmp_0q7qyfz.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 0] = 0\n        return sum(abs.(signs)) \n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns True if a number is\
    \ even, False otherwise.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk9ll8e2w.jl:26\nin expression starting at\
    \ /tmp/tmpk9ll8e2w.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        mags = map(abs, arr) \n        product = reduce(mul, signs) \n\
    \        return product * reduce(mul, mags) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ calculates the sum of squares of integers in a given array.\nusing Test\n\n\
    @testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) ==\
    \ -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9ij9xyol.jl:25\nin expression starting at\
    \ /tmp/tmp9ij9xyol.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = signs(arr)\
    \ \n        signs_prod = prod(signs) \n        sum_of_mags = sum(map(abs, arr))\n\
    \        return sum_of_mags * signs_prod \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nProblem 3\nWrite a function that\
    \ returns true if a number is even and false if it is odd.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpen1zbk4k.jl:25\nin expression starting at\
    \ /tmp/tmpen1zbk4k.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        signs = prod(signs) \n        mags = map(abs, arr) \n       \
    \ mags = prod(mags) \n        return signs * mags \n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the product\
    \ of its absolute values.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpea3p31tz.jl:26\nin expression starting at\
    \ /tmp/tmpea3p31tz.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .< 0] = -1\n        signs[arr .> 0] = 1\n  \
    \      signs = signs .* prod(signs)\n        return sum(signs)\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns sum of squares of integers\
    \ multiplied by product of all signs\nof each number in the vector, represented\
    \ by 1, -1 or 0.\nNote: return nothing for empty arr.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7trq1cju.jl:26\nin expression starting at\
    \ /tmp/tmp7trq1cju.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        product\
    \ = prod(signs)\n        magnitudes = map(abs, arr)\n        return sum(magnitudes.*product)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2,\
    \ -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates sum of squares of\
    \ integers multiplied by product of all signs of each number in the vector, represented\
    \ by 1, -1 or 0.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t\
    @test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj6a3yioc.jl:27\nin expression starting at\
    \ /tmp/tmpj6a3yioc.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    \n    sum_of_magnitudes = 0\
    \ \n    for x in arr \n        sum_of_magnitudes += sign(x) \n    \n    prod_of_signs\
    \ = 1 \n    for x in arr \n        prod_of_signs *= sign(x) \n    \n    return\
    \ sum_of_magnitudes * prod_of_signs \nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nTask 6. Write a function that returns\
    \ sum of squares of integers multiplied by product of all signs of integers multiplied\
    \ by product of all signs of integers multiplied by product of all signs of integers\
    \ multiplied by product of all signs of integers multiplied by product of all\
    \ signs of integers multiplied by product of all signs of integers multiplied\
    \ by product of all signs of integers multiplied by product of all signs of integers\
    \ multiplied by product of all signs of integers multiplied by product of all\
    \ signs of integers multiplied by product of all signs of integers multiplied\
    \ by product of all signs of integers multiplied by product of all signs of integers\
    \ multiplied by product of all signs of integers multiplied by product of all\
    \ signs of integers multiplied by product of all signs of integers multiplied\
    \ by product of all signs of integers multiplied by product of all signs of integers\
    \ multiplied by product of all signs of integers multiplied by product of all\
    \ signs of integers multiplied by product of all signs of integers multiplied\
    \ by product of all signs of integers multiplied by product of all signs of integers\
    \ multiplied by product of all signs of integers multiplied by product of all\
    \ signs of integers multiplied by product of all signs of integers multiplied\
    \ by product of all signs of integers multiplied by product of all signs of integers\
    \ multiplied by product of all signs of integers multiplied by product of all\
    \ signs of integers multiplied by product of all signs of integers multiplied\
    \ by product of all signs of integers multiplied by product of all signs of integers\
    \ multiplied by product of all signs of integers multiplied by product of all\
    \ signs of integers multiplied by product of all signs of integers multiplied\
    \ by product of all signs of integers multiplied by product of all signs of integers\
    \ multiplied by product of all signs of integers multiplied by product of all\
    \ signs of integers multiplied by product of all signs of integers multiplied\
    \ by product of all signs of integers multiplied by product of all signs of integers\
    \ multiplied by product of all signs of integers multiplied by product of all\
    \ signs of integers multiplied by product of all signs of integers multiplied\
    \ by product of all signs of integers multiplied by product of all signs of integers\
    \ multiplied by product \nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz8gfn52q.jl:29\nin expression starting at\
    \ /tmp/tmpz8gfn52q.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .== 0] = -1\n        signs[arr .== 1] = 1\n\
    \        signs = signs .* prod(signs)\n        return sum(signs)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert\
    \ prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\n\
    Task 3\nWrite a function that calculates sum of squares of integers multiplied\
    \ by product of all signs\nof each number in the vector, represented by 1, -1\
    \ or 0.\nNote: return nothing for empty arr.\nusing Test\n\n@testset begin\n\n\
    candidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcc41z2rx.jl:26\nin expression starting at\
    \ /tmp/tmpcc41z2rx.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .< 0] = 1\n        signs[arr .> 0] = -1\n  \
    \      signs = signs .* prod(signs)\n        return sum(signs)\n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns number of integers\
    \ divisible by given number k\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1uhjssco.jl:26\nin expression starting at\
    \ /tmp/tmp1uhjssco.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 0] = 0\n        sum_signs = sum(signs)\n        return\
    \ sum_signs * prod(signs)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns sum of absolute values of numbers in a vector.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0nbmjf0n.jl:27\nin expression starting at\
    \ /tmp/tmp0nbmjf0n.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = signs(arr)\
    \ \n        signs_product = prod(signs) \n        sum_of_magnitudes = sum(abs.(arr\
    \ .- signs_product)) \n        return sum_of_magnitudes * signs_product \n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4])\
    \ == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n\
    <text>\nExercise 3\nWrite a function that calculates sum of squares of integers\
    \ multiplied by product of all signs of each number in the vector, represented\
    \ by 1, -1 or 0.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t\
    @test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc70zcgc8.jl:25\nin expression starting at\
    \ /tmp/tmpc70zcgc8.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        for (i, x) in enumerate(arr) \n            signs[i] =\
    \ sign(x) * signs[i]\n        end\n        sum(signs)\n    end\nend\n</code>\n\
    <|/ a tags=julia |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppduijbm6.jl:26\nin expression starting at\
    \ /tmp/tmppduijbm6.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    elseif length(arr) == 1 \n  \
    \      return arr[0] * signs(arr[1])\n    else\n        signs = signs(arr)\n \
    \       mags = map(abs, arr)\n        mags = filter(x -> x != 0, mags)\n     \
    \   mags = reduce(*, mags)\n        mags = prod(mags)\n        return mags * signs\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2,\
    \ -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nExercise 2\nWrite a function that checks if a number is prime\
    \ or not. \nThe function should take one integer number as an argument and should\
    \ return true or false accordingly.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqmluxttm.jl:29\nin expression starting at\
    \ /tmp/tmpqmluxttm.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .< 0] = -1\n        signs[arr .> 0] = 1\n  \
    \      signs = signs .* prod(signs)\n        return sum(signs)\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns True if a number is\
    \ even, False otherwise.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuhw7m8zy.jl:26\nin expression starting at\
    \ /tmp/tmpuhw7m8zy.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0 \n        return nothing\n    else \n        signs = signs(arr)\n\
    \        signs = signs[end]\n        signs = signs[end]\n        signs = signs[end]\n\
    \        signs = signs[end]\n        signs = signs[end]\n        signs = signs[end]\n\
    \        signs = signs[end]\n        signs = signs[end]\n        signs = signs[end]\n\
    \        signs = signs[end]\n        signs = signs[end]\n        signs = signs[end]\n\
    \        signs = signs[end]\n        signs = signs[end]\n        signs = signs[end]\n\
    \        signs = signs[end]\n        signs = signs[end]\n        signs = signs[end]\n\
    \        signs = signs[end]\n        signs = signs[end]\n        signs = signs[end]\n\
    \        signs = signs[end]\n        signs = signs[end]\n        signs = signs[end]\n\
    \        signs = signs[end]\n        signs = signs[end]\n        signs = signs[end]\n\
    \        signs = signs[end]\n        signs = signs[end]\n        signs = signs[end]\n\
    \        signs = signs[end]\n        signs = signs[end]\n        signs = signs[end]\n\
    \        signs = signs[end]\n        signs = signs[end]\n        signs = signs[end]\n\
    \        signs = signs[end]\n        signs = signs[end]\n        signs = signs[end]\n\
    \        signs = signs[end]\n        signs = signs[end]\n        signs = signs[end]\n\
    \        signs = signs[end]\n        signs = signs[end]\n        signs = signs[end]\n\
    \        signs = signs[end]\n        signs = signs[end]\n        signs = signs[end]\n\
    \        signs = signs[end]\n        signs = signs[end]\n        signs = signs[end]\n\
    \        signs = signs[end]\n        signs = signs[end]\n        signs = signs[end]\n\
    \        signs = signs[end]\n        signs = signs[end]\n        signs = signs[end]\n\
    \        signs = signs[end]\n        signs = signs[end]\n        signs = signs[end]\n\
    \        signs = signs[end]\n        signs = signs[end]\n        signs = signs[end]\n\
    \        signs = signs[end]\n        signs = signs[end]\n        signs = signs[end]\n\
    \        signs = signs[end]\n        signs = signs[end]\n        signs = signs[end]\n\
    \        signs = signs[end]\n        signs = \nusing Test\n\n@testset begin\n\n\
    candidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpkkzmjps1.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkkzmjps1.jl:1\n\
    in expression starting at /tmp/tmpkkzmjps1.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .< 0] = -1\n        signs[arr .> 0] = 1\n  \
    \      signs = signs .* prod(signs)\n        return sum(signs)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert\
    \ prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\n\
    Task 2.3\nWrite a function that returns sum of squares of integers multiplied\
    \ by product of all signs\nof each number in the vector, represented by 1, -1\
    \ or 0.\nNote: return nothing for empty arr.\nusing Test\n\n@testset begin\n\n\
    candidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn4s4ssxj.jl:26\nin expression starting at\
    \ /tmp/tmpn4s4ssxj.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .< 0] = -1\n        signs[arr .> 0] = 1\n  \
    \      sum_of_mags = sum(abs.(arr .* signs))\n        return sum_of_mags * prod(signs)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2,\
    \ -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates sum of squares of\
    \ numbers in arr. \nThe function should return nothing for empty arr and a number\
    \ for non-empty arr. \nThe function should work for both real and complex numbers.\
    \ \nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpql9u4w7a.jl:26\nin expression starting at\
    \ /tmp/tmpql9u4w7a.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .< 0] = -1\n        signs[arr .> 0] = 1\n  \
    \      product = signs .* prod(signs)\n        return sum(abs.(arr .* product))\n\
    \    end\nend\n</cell>\n<text>\nExercise 9\nWrite a function that returns number\
    \ of integers greater or equal to given number in arr vector.\nusing Test\n\n\
    @testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) ==\
    \ -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcx4gmybh.jl:26\nin expression starting at\
    \ /tmp/tmpcx4gmybh.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        signs = filter(x -> x != 0, signs)\n        signs = map(x -> x\
    \ * prod(signs), arr)\n        signs = reduce(*, signs)\n        return signs\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2,\
    \ -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nTask 3\nWrite a function that returns sum of squares of integers\
    \ multiplied by product of all signs\nof each number in the vector, represented\
    \ by 1, -1 or 0.\nNote: return nothing for empty arr.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzi3gpzz4.jl:26\nin expression starting at\
    \ /tmp/tmpzi3gpzz4.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 0] = 0\n        sum_of_signs = sum(signs)\n        prod_of_signs\
    \ = signs .* signs\n        return sum_of_signs * prod(prod_of_signs)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) ==\
    \ 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n\
    <text>\nExercise 2\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t\
    @test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp32myr8kt.jl:28\nin expression starting at\
    \ /tmp/tmp32myr8kt.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        signs = filter(x -> x != 0, signs) \n        signs = filter(x\
    \ -> x == 0, signs) \n        signs = filter(x -> x == 1, signs) \n        signs\
    \ = filter(x -> x == -1, signs) \n        signs = filter(x -> x == 0, signs) \n\
    \        signs = sum(signs) \n        return signs * prod(signs) \n    end\nend\n\
    </code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp25dnsajp.jl:29\nin expression starting at\
    \ /tmp/tmp25dnsajp.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .< 0] = -1\n        signs[arr .> 0] = 1\n  \
    \      signs = signs.prod(1)\n        return signs * prod(signs)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert\
    \ prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the sum of squared magnitudes of\
    \ integers multiplied by product of all signs of each number in the vector, represented\
    \ by 1, -1 or 0.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t\
    @test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxi70c6f5.jl:26\nin expression starting at\
    \ /tmp/tmpxi70c6f5.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    \n    sum_of_signs = sum(signs(arr))\n\
    \    \n    prod = 1\n    for x in arr\n        prod *= sign(x)\n    end\n    \n\
    \    return sum_of_signs * prod\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([])\
    \ == nothing\n</cell>\n<text>\nTask 3\nWrite a function that returns sum of absolute\
    \ values of all numbers in arr vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv0mzlkeu.jl:28\nin expression starting at\
    \ /tmp/tmpv0mzlkeu.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0 \n        return nothing \n    else \n        sum = 0 \n    \
    \    for n in arr \n            sum += sign(n) * prod(signs(n)) \n        return\
    \ sum \n    end\nend\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4])\
    \ == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuixle88x.jl:25\nin expression starting at\
    \ /tmp/tmpuixle88x.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        product = prod(signs)\n        product = product * prod(signs)\n\
    \        product = product * prod(signs)\n        product = product * prod(signs)\n\
    \        product = product * prod(signs)\n        product = product * prod(signs)\n\
    \        product = product * prod(signs)\n        product = product * prod(signs)\n\
    \        product = product * prod(signs)\n        product = product * prod(signs)\n\
    \        product = product * prod(signs)\n        product = product * prod(signs)\n\
    \        product = product * prod(signs)\n        product = product * prod(signs)\n\
    \        product = product * prod(signs)\n        product = product * prod(signs)\n\
    \        product = product * prod(signs)\n        product = product * prod(signs)\n\
    \        product = product * prod(signs)\n        product = product * prod(signs)\n\
    \        product = product * prod(signs)\n        product = product * prod(signs)\n\
    \        product = product * prod(signs)\n        product = product * prod(signs)\n\
    \        product = product * prod(signs)\n        product = product * prod(signs)\n\
    \        product = product * prod(signs)\n        product = product * prod(signs)\n\
    \        product = product * prod(signs)\n        product = product * prod(signs)\n\
    \        product = product * prod(signs)\n        product = product * prod(signs)\n\
    \        product = product * prod(signs)\n        product = product * prod(signs)\n\
    \        product = product * prod(signs)\n        product = product * prod(signs)\n\
    \        product = product * prod(signs)\n        product = product * prod(signs)\n\
    \        product = product * prod(signs)\n        product = product * prod(signs)\n\
    \        product = product * prod(signs)\n        product = product * prod(signs)\n\
    \        product = product * prod(signs)\n        product = product * prod(signs)\n\
    \        product = product * prod(signs)\n        product = product * prod(signs)\n\
    \        product = product * prod(signs)\n        product = product * prod(signs)\n\
    \        product = product * prod(signs)\n        product = product * prod(signs)\n\
    \        product = product * prod(signs)\n        product = product * prod(signs)\n\
    \        product = product * prod(signs)\n        product = product * prod(signs)\n\
    \        product = product * prod(signs)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmp6m_tti9g.jl:16\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6m_tti9g.jl:1\n\
    in expression starting at /tmp/tmp6m_tti9g.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .< 0] = 1\n        signs[arr .> 0] = -1\n  \
    \      signs = signs .* prod(signs)\n        return sum(signs)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert\
    \ prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the product of absolute values of numbers\
    \ in a given vector.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ke3vp94.jl:26\nin expression starting at\
    \ /tmp/tmp0ke3vp94.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        signs = filter(x -> x != 0, signs)\n        signs = prod(signs)\n\
    \        signs = signs / prod(arr)\n        return signs\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0,\
    \ 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of positive numbers in a given array.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2,\
    \ 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1,\
    \ 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t\
    @test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6bpnqelt.jl:26\nin expression starting at\
    \ /tmp/tmp6bpnqelt.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    \n    signs = zeros(Int, length(arr))\n\
    \    signs[1] = 1\n    signs[end] = 1\n    \n    prod = 1\n    for x in arr\n\
    \        prod *= signs[x]\n    end\n    \n    return prod\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0,\
    \ 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\n4.3 Sum of absolute\
    \ values\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbq_kd83b.jl:30\nin expression starting at\
    \ /tmp/tmpbq_kd83b.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr)) \n        signs[1] = 1\n        signs[end] = -1\n        product\
    \ = 1\n        for i in 1:length(arr) \n            product *= signs[i] \n   \
    \         signs[i] = 0\n        end\n        return product \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdeedl4w5.jl:30\nin expression starting at\
    \ /tmp/tmpdeedl4w5.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0 \n        return nothing\n    else\n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .< 0] = -1\n        signs[arr .> 0] = 1\n  \
    \      signs = signs.*prod(signs)\n        return sum(abs(arr)*signs)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) ==\
    \ 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the product of all numbers in\
    \ a given vector.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t\
    @test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxv74rexq.jl:26\nin expression starting at\
    \ /tmp/tmpxv74rexq.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    end\n    signs = map(sign, arr)\n\
    \    prod = prod(signs)\n    mags = map(abs, arr)\n    return sum(mags .* signs)\
    \ .* prod\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2,\
    \ 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nTask 3\nWrite a function that returns sum of squares of integers\
    \ multiplied by product of all signs\nof each number in the vector, represented\
    \ by 1, -1 or 0.\nNote: return nothing for empty arr.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph3y0fce9.jl:24\nin expression starting at\
    \ /tmp/tmph3y0fce9.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    elseif length(arr) == 1 \n  \
    \      return arr[1]\n    else\n        signs = map(sign, arr)\n        product\
    \ = prod(signs)\n        return product * sum(signs)\n    end\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1xbhe_ga.jl:26\nin expression starting at\
    \ /tmp/tmp1xbhe_ga.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        product\
    \ = 1\n        for i in 1:length(arr) \n            product *= signs[i]\n    \
    \    end\n        return product\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph5xyztur.jl:29\nin expression starting at\
    \ /tmp/tmph5xyztur.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .== 0] = -1\n        signs[arr .== 1] = 1\n\
    \        signs = signs .* prod(signs)\n        return sum(signs)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert\
    \ prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns sum of squares of integers multiplied\
    \ by product of all signs\nof each number in the vector, represented by 1, -1\
    \ or 0.\nNote: return nothing for empty arr.\nusing Test\n\n@testset begin\n\n\
    candidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6c5fdzx4.jl:26\nin expression starting at\
    \ /tmp/tmp6c5fdzx4.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    elseif length(arr) == 1 \n  \
    \      return arr[1]\n    elseif length(arr) == 2 \n        return arr[1] * arr[1]\n\
    \    elseif length(arr) > 2 \n        signs = zeros(length(arr))\n        for\
    \ i = 1:length(arr) \n            signs[i] = sign(arr[i])\n        end\n     \
    \   signs = signs * prod(signs)\n        return sum(abs2, signs)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert\
    \ prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\n\
    Task 3\nWrite a function that returns number of positive numbers in an array.\n\
    using Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm23erg8n.jl:31\nin expression starting at\
    \ /tmp/tmpm23erg8n.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .== 0] = -1\n        signs[arr .== 1] = 1\n\
    \        signs = signs .* prod(signs)\n        return sum(signs)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert\
    \ prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates sum of squares of integers multiplied\
    \ by product of all signs of each number in the vector, represented by 1, -1 or\
    \ 0.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6trwqxzr.jl:26\nin expression starting at\
    \ /tmp/tmp6trwqxzr.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .< 0] = -1\n        signs[arr .> 0] = 1\n  \
    \      signs = signs .* prod(signs)\n        return sum(abs(arr .* signs))\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2,\
    \ -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns product of absolute\
    \ values of all numbers in arr \nand sum of magnitudes of integers multiplied\
    \ by product of all signs\nof each number in the vector, represented by 1, -1\
    \ or 0.\nNote: return nothing for empty arr.\nusing Test\n\n@testset begin\n\n\
    candidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2jzkda50.jl:26\nin expression starting at\
    \ /tmp/tmp2jzkda50.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        for i = 1:length(arr) \n            signs[i] = sign(arr[i])\n\
    \        end\n        mags = map(abs, arr)\n        mags = map(sign, mags)\n \
    \       mags = map(prod, mags)\n        return sum(mags)\n    end\nend\n</code>\n\
    <|/ a tags=julia |>\n<| a tags=julia |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps0_n0bul.jl:29\nin expression starting at\
    \ /tmp/tmps0_n0bul.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        for (i, x) in enumerate(arr) \n            signs[i] =\
    \ sign(x) * sign(i)\n        end\n        sum(signs)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0,\
    \ 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that calculates the sum of squared magnitudes of integers multiplied\
    \ by product of all signs of each number in the vector, represented by 1, -1 or\
    \ 0.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmplts6xx.jl:26\nin expression starting at\
    \ /tmp/tmpmplts6xx.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .< 0] = -1\n        signs[arr .> 0] = 1\n  \
    \      product = signs .* prod(signs)\n        return sum(abs(product))\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) ==\
    \ 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates sum of squares of integers\
    \ multiplied by product of all signs of each number in the vector, represented\
    \ by 1, -1 or 0.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t\
    @test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuy7beb30.jl:26\nin expression starting at\
    \ /tmp/tmpuy7beb30.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        signs = filter(x -> x==1, signs) \n        signs = filter(x ->\
    \ x==-1, signs) \n        signs = filter(x -> x==0, signs) \n        return sum(signs)\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2,\
    \ 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns sum of squares of integers\
    \ multiplied by product of all signs\nof each number in the vector, represented\
    \ by 1, -1 or 0.\nNote: return nothing for empty arr.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl35w84yh.jl:26\nin expression starting at\
    \ /tmp/tmpl35w84yh.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        sum_of_mags\
    \ = sum(abs.(arr .* signs))\n        return sum_of_mags\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes an array of integers and returns\
    \ its sum of the absolute values.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5sg5tbtv.jl:26\nin expression starting at\
    \ /tmp/tmp5sg5tbtv.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 0] = 0\n        sum_of_mags = sum(abs.(signs))\n      \
    \  prod_sign = prod(signs)\n        return sum_of_mags * prod_sign\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) ==\
    \ 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a number is odd or even.\n\
    using Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3fsc0i8m.jl:28\nin expression starting at\
    \ /tmp/tmp3fsc0i8m.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[arr .< 0] = 1\n        signs[arr .> 0] = -1\n  \
    \      signs = signs * prod(signs)\n        return signs\n    end\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| a tags=julia,arrays |>\nI like your solution, however\
    \ I find it a bit more elegant to use map and sum:\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx2v8tw_g.jl:26\nin expression starting at\
    \ /tmp/tmpx2v8tw_g.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        product\
    \ = 1\n        for i in 1:length(arr) \n            product *= signs[i]\n    \
    \        signs[i] = 0\n        end\n        return product\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0n97i7lw.jl:30\nin expression starting at\
    \ /tmp/tmp0n97i7lw.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    elseif length(arr) == 1 \n  \
    \      return arr[1]\n    elseif length(arr) == 2 \n        return arr[1] * arr[1]\n\
    \    elseif length(arr) > 2 \n        return arr[1] * prod([prod_signs(arr[2:end-1]),\
    \ arr[1]])\n    end\nend\n</code>\n<|/ a tags=julia,arrays |>\n<| a dscore=2 |>\n\
    I came up with this:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv57krz0b.jl:26\nin expression starting at\
    \ /tmp/tmpv57krz0b.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        product\
    \ = signs * prod(signs)\n        sum_of_magnitudes = sum(abs.(arr .- product))\n\
    \        return sum_of_magnitudes \n    end\nend\n</cell>\n<text>\nExercise 7\n\
    Write a function that returns sum of squares of integers multiplied by product\
    \ of all signs\nof each number in the vector, represented by 1, -1 or 0.\nExample:\
    \ \n>>> square_signs([1, 2, 2, -4])\n9\n>>> square_signs([0, 1])\n0\n>>> square_signs([])\n\
    nothing\nHint: use function prod_signs.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp79libt4h.jl:27\nin expression starting at\
    \ /tmp/tmp79libt4h.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0\n        return nothing\n    end\n    signs = zeros(Int64, length(arr))\n\
    \    signs[1] = 1\n    signs[end] = -1\n    prod = 1\n    for i in 1:length(arr)\n\
    \        prod = prod * signs[i]\n    end\n    return prod\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0,\
    \ 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns sum of squares of integers multiplied by product of\
    \ all signs\nof each number in the vector, represented by 1, -1 or 0.\nNote: return\
    \ nothing for empty arr.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu5vqab1o.jl:28\nin expression starting at\
    \ /tmp/tmpu5vqab1o.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        product = prod(signs) \n        return product * sum(signs) \n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2,\
    \ -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if a number is\
    \ odd and false otherwise. \nWrite a function that returns true if a number is\
    \ even and false otherwise. \nWrite a function that returns true if a number is\
    \ prime and false otherwise. \nWrite a function that returns true if a number\
    \ is divisible by 7 and false otherwise. \nWrite a function that returns true\
    \ if a number is divisible by 3 and false otherwise. \nWrite a function that returns\
    \ true if a number is divisible by 5 and false otherwise. \nWrite a function that\
    \ returns true if a number is divisible by both 3 and 5 and false otherwise. \n\
    Write a function that returns true if a number is divisible by both 3 and 7 and\
    \ false otherwise. \nWrite a function that returns true if a number is divisible\
    \ by both 3 and 5 and 7 and false otherwise. \nWrite a function that returns true\
    \ if a number is divisible by both 3 and 7 and 5 and false otherwise. \nWrite\
    \ a function that returns true if a number is divisible by both 3 and 5 and 7\
    \ and 3 and false otherwise. \nWrite a function that returns true if a number\
    \ is divisible by both 3 and 7 and 5 and 3 and false otherwise. \nWrite a function\
    \ that returns true if a number is divisible by both 3 and 5 and 7 and 3 and 5\
    \ and false otherwise. \nWrite a function that returns true if a number is divisible\
    \ by both 3 and 7 and 5 and 3 and 5 and false otherwise. \nWrite a function that\
    \ returns true if a number is divisible by both 3 and 5 and 7 and 3 and 5 and\
    \ 7 and false otherwise. \nWrite a function that returns true if a number is divisible\
    \ by both 3 and 7 and 5 and 3 and 5 and 7 and false otherwise. \nWrite a function\
    \ that returns true if a number is divisible by both 3 and 5 and 7 and 3 and 5\
    \ and 7 and 7 and false otherwise. \nWrite a function that returns true if a number\
    \ is divisible by both 3 and 7 and 5 and 3 and 5 and 7 and 7 and 7 and false otherwise.\
    \ \nWrite a function that returns true if a number is divisible by both 3 and\
    \ 5 and 7 and 3 and 5 and 7 and 7 and 7 and 7 and false otherwise. \nWrite a function\
    \ that returns true if a number is divisible by both 3 and 7 and 5 and 3 and 5\
    \ and 7 and 7 and 7 and 7 and 7 and false otherwise. \nWrite a function that returns\
    \ \nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1wjdb0u1.jl:24\nin expression starting at\
    \ /tmp/tmp1wjdb0u1.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = signs(arr)\
    \ \n        sum_signs = sum(signs) \n        product = prod(signs) \n        return\
    \ sum_signs * product \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns True if a number is odd, False otherwise.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuvoj5jo0.jl:25\nin expression starting at\
    \ /tmp/tmpuvoj5jo0.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        signs[arr\
    \ < 0] = 0\n        signs[arr > 0] = 1\n        sum_of_mags = sum(abs.(arr).^signs)\n\
    \        prod_of_mags = prod(signs)\n        return sum_of_mags * prod_of_mags\
    \ \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ arr of integers and returns its sum of the absolute values.\nusing Test\n\n\
    @testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) ==\
    \ -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq2w0qmgq.jl:29\nin expression starting at\
    \ /tmp/tmpq2w0qmgq.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 0] = 0\n        prod_signs = prod(signs)\n        return\
    \ prod_signs \n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1,\
    \ 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) ==\
    \ nothing\n</cell>\n<text>\n4.5 Product of absolute values\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp57rcy29m.jl:27\nin expression starting at\
    \ /tmp/tmp57rcy29m.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        sum_signs\
    \ = sum(signs)\n        prod_signs = signs.*arr\n        return sum_signs*prod(prod_signs)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2,\
    \ -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns sum of absolute values\
    \ of numbers in arr vector.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqf7naipf.jl:27\nin expression starting at\
    \ /tmp/tmpqf7naipf.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .< 0] = -1\n        signs[arr .> 0] = 1\n  \
    \      signs = signs.product\n        return signs * prod(signs)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert\
    \ prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns true if a number is even, false otherwise.\
    \ \nWrite a function that returns true if a number is odd, false otherwise. \n\
    Write a function that returns true if a number is prime (a number that has no\
    \ divisors other than 1 and itself).\nWrite a function that returns true if a\
    \ number is composite (has no divisors other than 1 and itself).\nWrite a function\
    \ that returns true if a number is perfect square (has all its divisors equal\
    \ to itself).\nWrite a function that returns true if a number is perfect cube.\n\
    Write a function that returns true if a number is perfect fibonacci.\nWrite a\
    \ function that returns true if a number is perfect triangular number.\nWrite\
    \ a function that returns true if a number is perfect pentagonal number.\nWrite\
    \ a function that returns true if a number is perfect hexagonal number.\nWrite\
    \ a function that returns true if a number is perfect heptagonal number.\nWrite\
    \ a function that returns true if a number is perfect octagonal number.\nWrite\
    \ a function that returns true if a number is perfect nonagonal number.\nWrite\
    \ a function that returns true if a number is perfect obtuse number.\nWrite a\
    \ function that returns true if a number is perfect semiagonal number.\nWrite\
    \ a function that returns true if a number is perfect square root of x.\nWrite\
    \ a function that returns true if a number is perfect cube root of x.\nWrite a\
    \ function that returns true if a number is perfect triangular root of x.\nWrite\
    \ a function that returns true if a number is perfect pentagonal root of x.\n\
    Write a function that returns true if a number is perfect hexagonal root of x.\n\
    Write a function that returns true if a number is perfect heptagonal root of x.\n\
    Write a function that returns true if a number is perfect octagonal root of x.\n\
    Write a function that returns true if a number is perfect nonagonal root of x.\n\
    Write a function that returns true if a number is perfect obtuse root of x.\n\
    Write a function that returns true if a number is perfect semiagonal root of x.\n\
    Write a function that returns true if a number is perfect square root \nusing\
    \ Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2,\
    \ 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1,\
    \ 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t\
    @test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpow8g9iqo.jl:26\nin expression starting at\
    \ /tmp/tmpow8g9iqo.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        signs = filter(x -> x != 0, signs)\n        signs = prod(signs)\n\
    \        signs = signs / prod(arr)\n        return signs\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt6h75ku2.jl:26\nin expression starting at\
    \ /tmp/tmpt6h75ku2.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        signs_product = prod(signs) \n        sum_of_magnitudes = sum(map(abs,\
    \ arr)) \n        return sum_of_magnitudes * signs_product \n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns number of positive numbers in\
    \ an array.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1zqtcvnc.jl:25\nin expression starting at\
    \ /tmp/tmp1zqtcvnc.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 0] = 0\n        sum = 0\n        for i = 1:length(signs)\n\
    \            sum = sum + signs[i] * prod(signs)\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2,\
    \ -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nExercise 2\nWrite a function that calculates sum of squares of\
    \ integers multiplied by product of all signs of each number in the vector, represented\
    \ by 1, -1 or 0.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t\
    @test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp64yhpkq3.jl:30\nin expression starting at\
    \ /tmp/tmp64yhpkq3.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        product\
    \ = 1\n        for i = 2:length(arr) \n            product *= signs[i] \n    \
    \        signs[i] = product \n        end\n        return product\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert\
    \ prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\n\
    Task 2.3\nWrite a function that returns sum of squares of numbers in arr vector.\n\
    using Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp64ojit0r.jl:30\nin expression starting at\
    \ /tmp/tmp64ojit0r.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        signs = filter(x -> x != 0, signs) \n        signs = filter(x\
    \ -> x == 0, signs) \n        signs = filter(x -> x == 1, signs) \n        signs\
    \ = filter(x -> x == -1, signs) \n        signs = map(prod, signs) \n        signs\
    \ = map(abs, signs) \n        signs = filter(x -> x == 1, signs) \n        signs\
    \ = sum(signs) \n        return signs \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqrptfrp1.jl:31\nin expression starting at\
    \ /tmp/tmpqrptfrp1.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = signs(arr)\
    \ \n        signs_prod = prod(signs) \n        sum_of_mags = sum(map(abs, arr))\
    \ \n        return sum_of_mags * signs_prod \n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns product of absolute values of all elements\
    \ of arr except the first one.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4x8kbpyx.jl:25\nin expression starting at\
    \ /tmp/tmp4x8kbpyx.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 0] = 0\n        signs = signs * prod(signs)\n        return\
    \ signs\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1,\
    \ 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) ==\
    \ nothing\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the sum\
    \ of squared magnitudes of integers multiplied by product of all signs of each\
    \ number in the vector, represented by 1, -1 or 0.\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo9i7iq90.jl:27\nin expression starting at\
    \ /tmp/tmpo9i7iq90.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        signs = prod(signs) \n        mags = map(abs, arr) \n       \
    \ mags = prod(mags) \n        return signs * mags \n    end\nend\n</code>\n<|/\
    \ a tags=julia |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm0eei80u.jl:26\nin expression starting at\
    \ /tmp/tmpm0eei80u.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = signs(arr)\
    \ \n        signs_product = prod(signs) \n        sum_of_magnitudes = sum(abs.(arr\
    \ .- signs_product)) \n        return sum_of_magnitudes * signs_product \n   \
    \ end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes an array\
    \ of integers and returns its sum of the absolute values.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp46xz9omk.jl:25\nin expression starting at\
    \ /tmp/tmp46xz9omk.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[arr .== 0] = -1\n        signs[arr .== 1] = 1\n\
    \        sum_of_mags = sum(abs.(signs))\n        prod_of_signs = prod(signs)\n\
    \        return sum_of_mags * prod_of_signs \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns True if a number is odd and False otherwise.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgf9ltr3c.jl:27\nin expression starting at\
    \ /tmp/tmpgf9ltr3c.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        signs = filter(x -> x != 0, signs) \n        signs = prod(signs)\
    \ \n        mags = map(abs, arr) \n        mags = filter(x -> x != 0, mags) \n\
    \        mags = prod(mags) \n        return signs * mags \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0,\
    \ 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that calculates sum of squares of integers multiplied by product\
    \ of all signs of each number in the vector, represented by 1, -1 or 0.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2,\
    \ 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1,\
    \ 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t\
    @test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpotpyk4rz.jl:28\nin expression starting at\
    \ /tmp/tmpotpyk4rz.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        signs = prod(signs) \n        mags = map(abs, arr) \n       \
    \ mags = prod(mags) \n        return signs * mags \n    end\nend\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=julia,performance |>\nThe accepted answer by is very\
    \ nice, but I wanted to add my two cents. \nThe accepted answer by is very nice,\
    \ but I wanted to add my two cents. \nThe accepted answer by is very nice, but\
    \ I wanted to add my two cents. \nThe accepted answer by is very nice, but I wanted\
    \ to add my two cents. \nThe accepted answer by is very nice, but I wanted to\
    \ add my two cents. \nThe accepted answer by is very nice, but I wanted to add\
    \ my two cents. \nThe accepted answer by is very nice, but I wanted to add my\
    \ two cents. \nThe accepted answer by is very nice, but I wanted to add my two\
    \ cents. \nThe accepted answer by is very nice, but I wanted to add my two cents.\
    \ \nThe accepted answer by is very nice, but I wanted to add my two cents. \n\
    The accepted answer by is very nice, but I wanted to add my two cents. \nThe accepted\
    \ answer by is very nice, but I wanted to add my two cents. \nThe accepted answer\
    \ by is very nice, but I wanted to add my two cents. \nThe accepted answer by\
    \ is very nice, but I wanted to add my two cents. \nThe accepted answer by is\
    \ very nice, but I wanted to add my two cents. \nThe accepted answer by is very\
    \ nice, but I wanted to add my two cents. \nThe accepted answer by is very nice,\
    \ but I wanted to add my two cents. \nThe accepted answer by is very nice, but\
    \ I wanted to add my two cents. \nThe accepted answer by is very nice, but I wanted\
    \ to add my two cents. \nThe accepted answer by is very nice, but I wanted to\
    \ add my two cents. \nThe accepted answer by is very nice, but I wanted to add\
    \ my two cents. \nThe accepted answer by is very nice, but I wanted to add my\
    \ two cents. \nThe accepted answer by is very nice, but I wanted to add my two\
    \ cents. \nThe accepted answer by is very nice, but I wanted to add my two cents.\
    \ \nThe accepted answer by is very nice, but I wanted to add my two cents. \n\
    The accepted answer by is very nice, but I wanted to add my two \nusing Test\n\
    \n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4])\
    \ == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj2uiri8z.jl:26\nin expression starting at\
    \ /tmp/tmpj2uiri8z.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = map(sign,\
    \ arr)\n        signs = filter(x -> x != 0, signs)\n        signs = map(x -> x\
    \ * prod(signs), arr)\n        signs = map(abs, signs)\n        signs = filter(x\
    \ -> x != 0, signs)\n        signs = sum(signs)\n        return signs\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppaw24e1_.jl:28\nin expression starting at\
    \ /tmp/tmppaw24e1_.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 0] = 0\n        product = signs .* prod(signs)\n      \
    \  return sum(abs(product))\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns number of positive numbers in a given array.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkap3dq2m.jl:27\nin expression starting at\
    \ /tmp/tmpkap3dq2m.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    end\n    \n    signs = zeros(Int,\
    \ length(arr))\n    signs[1] = 1\n    signs[end] = -1\n    \n    sum_of_mags =\
    \ sum(map(abs, arr))\n    \n    prod = 1\n    for x in arr\n        prod *= signs[x]\n\
    \    end\n    \n    return sum_of_mags * prod\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns True if a number is odd and False otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuwv_h4no.jl:33\nin expression starting at\
    \ /tmp/tmpuwv_h4no.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        for (i, x) in enumerate(arr) \n            signs[i] =\
    \ sign(x) * sign(i)\n        end\n        return sum(abs2, signs)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert\
    \ prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\n\
    Problem 3\nWrite a function that returns True if a number is even, False otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1x865fnd.jl:26\nin expression starting at\
    \ /tmp/tmp1x865fnd.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    end\n    \n    signs = zeros(Int,\
    \ length(arr))\n    signs[1] = 1\n    signs[end] = -1\n    \n    sum = 0\n   \
    \ for i in 1:length(arr)\n        sum += signs[i] * arr[i]\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4])\
    \ == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n\
    <text>\nExercise 3\nWrite a function that calculates sum of squares of integers\
    \ multiplied by product of all signs of each number in the vector, represented\
    \ by 1, -1 or 0.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t\
    @test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_2uddt9z.jl:30\nin expression starting at\
    \ /tmp/tmp_2uddt9z.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        signs = filter(x -> x != 0, signs) \n        signs = prod(signs)\
    \ \n        return sum(map(abs, arr) * signs) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns sum of squares of integers multiplied by product of all signs\nof each\
    \ number in the vector, represented by 1, -1 or 0.\nNote: return nothing for empty\
    \ arr.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwmh_91n6.jl:25\nin expression starting at\
    \ /tmp/tmpwmh_91n6.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        signs = prod(signs) \n        product = prod(arr) \n        return\
    \ signs * product \n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1ktetzk8.jl:25\nin expression starting at\
    \ /tmp/tmp1ktetzk8.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 0] = 0\n        sum_of_signs = sum(signs)\n        product\
    \ = signs .* prod(signs)\n        return sum_of_signs * product\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert\
    \ prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns sum of squares of integers multiplied\
    \ by product of all signs\nof each number in the vector, represented by 1, -1\
    \ or 0.\nNote: return nothing for empty arr.\nusing Test\n\n@testset begin\n\n\
    candidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsc3kiba7.jl:28\nin expression starting at\
    \ /tmp/tmpsc3kiba7.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        sum_signs\
    \ = sum(signs)\n        product = 1\n        for n in arr\n            product\
    \ *= signs[end]\n            product *= n\n        end\n        return sum_signs\
    \ * product\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1,\
    \ 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) ==\
    \ nothing\n</cell>\n<text>\nExercise 2\nWrite a function that returns number of\
    \ integers multiplied by product of all signs of numbers in the given array.\n\
    using Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa9v7daly.jl:31\nin expression starting at\
    \ /tmp/tmpa9v7daly.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        for (i,x) in enumerate(arr)\n            signs[i] = sign(x)\
    \ * sign(i)\n        end\n        sum(signs)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nusing Test\n\n@testset\
    \ begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t\
    @test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\
    \t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2, 4, 1,\
    \ 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4y426kmz.jl:26\nin expression starting at\
    \ /tmp/tmp4y426kmz.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        product\
    \ = 1\n        for n in arr\n            product *= signs[n]\n        end\n  \
    \      return product\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([])\
    \ == nothing\n</cell>\n<text>\nExercise 2\nWrite a function that calculates sum\
    \ of squares of integers in arr \nand returns sum of squares of integers multiplied\
    \ by product of all signs\nof each number in the vector, represented by 1, -1\
    \ or 0.\nNote: return nothing for empty arr.\nusing Test\n\n@testset begin\n\n\
    candidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpofb1ji_u.jl:29\nin expression starting at\
    \ /tmp/tmpofb1ji_u.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .< 0] = 1\n        signs[arr .> 0] = -1\n  \
    \      signs = signs .* prod(signs)\n        return sum(signs)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert\
    \ prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns sum of squares of integers multiplied\
    \ by product of all signs\nof each number in the vector, represented by 1, -1\
    \ or 0.\nNote: return nothing for empty arr.\nusing Test\n\n@testset begin\n\n\
    candidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr7mg3hbu.jl:26\nin expression starting at\
    \ /tmp/tmpr7mg3hbu.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        signs = filter(x -> x != 0, signs) \n        signs = map(x ->\
    \ x * prod(signs), arr) \n        return sum(signs) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0,\
    \ 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that calculates sum of squares of integers multiplied by product\
    \ of all signs of each number in the vector, represented by 1, -1 or 0.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2,\
    \ 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1,\
    \ 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t\
    @test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3jp3djpu.jl:25\nin expression starting at\
    \ /tmp/tmp3jp3djpu.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        product\
    \ = prod(signs)\n        sum_of_magnitudes = sum(abs.(arr .- product))\n     \
    \   return sum_of_magnitudes * product\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the sum of squares of integers multiplied\
    \ by product of all signs of each number in the vector, represented by 1, -1 or\
    \ 0.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwrefruyq.jl:27\nin expression starting at\
    \ /tmp/tmpwrefruyq.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .== 1] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 0] = 0\n        return sum(signs.*arr)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2, -4]) == 9\n@assert\
    \ prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns sum of all elements in the given array\
    \ arr multiplied by product of all signs of each number in the vector, represented\
    \ by 1, -1 or 0.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t\
    @test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1i9hvep0.jl:26\nin expression starting at\
    \ /tmp/tmp1i9hvep0.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    \n    signs = zeros(Int, length(arr))\n\
    \    signs[arr .== 0] = -1\n    signs[arr .== 1] = 1\n    \n    prod = prod(signs)\n\
    \    \n    sum = 0\n    for x in arr \n        sum += signs[x] * x\n    end\n\
    \    \n    return sum * prod\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([])\
    \ == nothing\n</cell>\n<text>\nExercise 3\nWrite a function that returns sum of\
    \ absolute values of all elements of a vector.\nusing Test\n\n@testset begin\n\
    \ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprn3bcj1i.jl:32\nin expression starting at\
    \ /tmp/tmprn3bcj1i.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .< 0] = -1\n        signs[arr .> 0] = 1\n  \
    \      product = signs .* prod(signs)\n        sum_of_magnitudes = sum(abs.(arr\
    \ .- product))\n        return sum_of_magnitudes \n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns number of positive numbers in a given\
    \ array.\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1,\
    \ 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1,\
    \ 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxvhgcfls.jl:27\nin expression starting at\
    \ /tmp/tmpxvhgcfls.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr)==0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        product\
    \ = 1\n        for i in 1:length(arr) \n            product *= signs[i]\n    \
    \    end\n        return product\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that calculates sum of squares of integers in arr \nand returns\
    \ sum of squares multiplied by product of all signs\nof each number in the vector,\
    \ represented by 1, -1 or 0.\nNote: return nothing for empty arr.\nusing Test\n\
    \n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4])\
    \ == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzu5oluvu.jl:29\nin expression starting at\
    \ /tmp/tmpzu5oluvu.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        product\
    \ = 1\n        for i in 1:length(arr) \n            product *= signs[i]\n    \
    \    end\n        return product * sum(abs2, arr)\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns sum of squares of integers multiplied\
    \ by product of all signs\nof each number in the vector, represented by 1, -1\
    \ or 0.\nNote: return nothing for empty arr.\nusing Test\n\n@testset begin\n\n\
    candidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5t9vv5qs.jl:29\nin expression starting at\
    \ /tmp/tmp5t9vv5qs.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        for i = 1:length(arr) \n            signs[i] = sign(arr[i])\n\
    \        end\n        product = prod(signs)\n        magnitudes = map(abs, arr)\n\
    \        return sum(magnitudes.*product)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert prod_signs([1, 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert\
    \ prod_signs([]) == nothing\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ calculates sum of squared magnitudes of integers multiplied by product of all\
    \ signs of each number in the vector, represented by 1, -1 or 0.\nusing Test\n\
    \n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4])\
    \ == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplup5iz34.jl:28\nin expression starting at\
    \ /tmp/tmplup5iz34.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        for (i,val) in enumerate(arr)\n            signs[i] =\
    \ sign(val)\n        end\n        signs = signs.prod(1)\n        return sum(abs(arr)\
    \ * signs)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1,\
    \ 2, 2, -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) ==\
    \ nothing\n</cell>\n<text>\nExercise 2\nWrite a function that calculates sum of\
    \ squares of integers in a given vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxaieh1m0.jl:27\nin expression starting at\
    \ /tmp/tmpxaieh1m0.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .< 0] = -1\n        signs[arr .> 0] = 1\n  \
    \      signs = signs .* prod(signs)\n        return sum(abs2, signs)\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns sum of squares\
    \ of integers multiplied by product of all signs\nof each number in the vector,\
    \ represented by 1, -1 or 0.\nNote: return nothing for empty arr.\nusing Test\n\
    \n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4])\
    \ == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzd3bfjn8.jl:26\nin expression starting at\
    \ /tmp/tmpzd3bfjn8.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int64,\
    \ length(arr))\n        signs[arr .== 0] = 1\n        signs[arr .== -1] = -1\n\
    \        signs[arr .== 1] = 0\n        \n        sum = 0\n        for i = 1:length(arr)\
    \ \n            sum += signs[i] * abs(arr[i])\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2,\
    \ -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nExercise 2\nWrite a function that checks if a number is prime\
    \ or not. \nThe function should take one integer number as argument. \nThe function\
    \ should return true if the number is prime and false otherwise.\nusing Test\n\
    \n@testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4])\
    \ == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9274ohia.jl:31\nin expression starting at\
    \ /tmp/tmp9274ohia.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing\n    elseif length(arr) == 1 \n  \
    \      return arr[0] * sign(arr[0])\n    else\n        sum = 0\n        for v\
    \ in arr\n            sum += v * sign(v)\n        end\n        return sum\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\n@assert prod_signs([1, 2, 2,\
    \ -4]) == 9\n@assert prod_signs([0, 1]) == 0\n@assert prod_signs([]) == nothing\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of squared\
    \ magnitudes of integers multiplied by product of all signs\nof each number in\
    \ the vector, represented by 1, -1 or 0.\nExample: \n>>> sum_signs([1, 2, 2, -4])\n\
    9\n>>> sum_signs([0, 1])\n0\n>>> sum_signs([])\nnothing\n\"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = prod_signs;\n\t@test(candidate([1, 2, 2, -4]) ==\
    \ -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1,\
    \ 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([2,\
    \ 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1, 1]) == 4)\n\t@test(candidate([-1,\
    \ 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps5vd0aw5.jl:28\nin expression starting at\
    \ /tmp/tmps5vd0aw5.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = zeros(Int,\
    \ length(arr))\n        signs[1] = 1\n        signs[end] = -1\n        sum_signs\
    \ = sum(signs)\n        product = 1\n        for i in 1:length(arr) \n       \
    \     product *= signs[i]\n        end\n        return sum_signs * product\n \
    \   end\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nI came up with this\
    \ solution:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = prod_signs;\n\
    \t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0, 1]) == 0)\n\t@test(candidate([1,\
    \ 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\
    \t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1, 1, -1,\
    \ 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1, 1,\
    \ 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaz4it9o4.jl:30\nin expression starting at\
    \ /tmp/tmpaz4it9o4.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    You are given a vector arr of integers and you need to return\n\
    \    sum of magnitudes of integers multiplied by product of all signs\n    of\
    \ each number in the vector, represented by 1, -1 or 0.\n    Note: return nothing\
    \ for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4])\n    9\n \
    \   >>> prod_signs([0, 1])\n    0\n    >>> prod_signs([])\n    nothing\n    \"\
    \"\"\nfunction prod_signs(arr::Vector{Int64})::Union{Int64, Nothing} \n    if\
    \ length(arr) == 0 \n        return nothing \n    else \n        signs = map(sign,\
    \ arr) \n        signs_product = prod(signs) \n        sum_of_magnitudes = sum(map(abs,\
    \ arr)) \n        return sum_of_magnitudes * signs_product \n    end\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a vector arr of integers and returns\
    \ its sum of the absolute values.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ prod_signs;\n\t@test(candidate([1, 2, 2, -4]) == -9)\n\t@test(candidate([0,\
    \ 1]) == 0)\n\t@test(candidate([1, 1, 1, 2, 3, -1, 1]) == -10)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([2, 4, 1, 2, -1, -1, 9]) == 20)\n\t@test(candidate([-1,\
    \ 1, -1, 1]) == 4)\n\t@test(candidate([-1, 1, 1, 1]) == -4)\n\t@test(candidate([-1,\
    \ 1, 1, 0]) == 0)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpckrg_rgj.jl:25\nin expression starting at\
    \ /tmp/tmpckrg_rgj.jl:25\n"
  stdout: ''
