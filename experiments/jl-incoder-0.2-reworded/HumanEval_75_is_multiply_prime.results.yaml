language: jl
name: HumanEval_75_is_multiply_prime
results:
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxzqnlzmy.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxzqnlzmy.jl:1\n\
    in expression starting at /tmp/tmpxzqnlzmy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(a)\n    \n    for i in prime_numbers\n        if a % i == 0\n     \
    \       return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp84fhln3b.jl:18\nin expression starting at\
    \ /tmp/tmp84fhln3b.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n \
    \   true\n    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcrgd1w4h.jl:16\nin expression starting at\
    \ /tmp/tmpcrgd1w4h.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    @assert is_multiply_prime(100) == true\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns true if the given number is a prime number and false otherwise.\n\
    Knowing that (a) is less then 100. \nExample: \n>>> is_prime(30)\ntrue\n30 = 2\
    \ * 3 * 5\n>>> is_prime(100)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(102)\n\
    false\n>>> is_prime(103)\ntrue\n>>> is_prime(104)\nfalse\n>>> is_prime(105)\n\
    true\n>>> is_prime(106)\nfalse\n>>> is_prime(107)\ntrue\n>>> is_prime(108)\nfalse\n\
    >>> is_prime(109)\ntrue\n>>> is_prime(110)\nfalse\n>>> is_prime(111)\ntrue\n>>>\
    \ is_prime(112)\nfalse\n>>> is_prime(113)\ntrue\n>>> is_prime(114)\nfalse\n>>>\
    \ is_prime(115)\ntrue\n>>> is_prime(116)\nfalse\n>>> is_prime(117)\ntrue\n>>>\
    \ is_prime(118)\nfalse\n>>> is_prime(119)\ntrue\n>>> is_prime(120)\nfalse\n>>>\
    \ is_prime(121)\ntrue\n>>> is_prime(122)\nfalse\n>>> is_prime(123)\ntrue\n>>>\
    \ is_prime(124)\nfalse\n>>> is_prime(125)\ntrue\n>>> is_prime(126)\nfalse\n>>>\
    \ is_prime(127)\ntrue\n>>> is_prime(128)\nfalse\n>>> is_prime(129)\ntrue\n>>>\
    \ is_prime(130)\nfalse\n>>> is_prime(131)\ntrue\n>>> is_prime(132)\nfalse\n>>>\
    \ is_prime(133)\ntrue\n>>> is_prime(134)\nfalse\n>>> is_prime(135)\ntrue\n>>>\
    \ is_prime(136)\nfalse\n>>> is_prime(137)\ntrue\n>>> is_prime(138)\nfalse\n>>>\
    \ is_prime(139)\ntrue\n>>> is_prime(140)\nfalse\n>>> is_prime(141)\ntrue\n>>>\
    \ is_prime(142)\nfalse\n>>> is_prime(143)\ntrue\n>>> is_prime(144)\n\nusing Test\n\
    \n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyxd5hqww.jl:16\nin expression starting at\
    \ /tmp/tmpyxd5hqww.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        false\n    else\n        true\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ true if the given number is a prime number and false otherwise.\nKnowing that\
    \ (a) is less then 100. \nExample: \n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n\
    >>> is_prime(50)\nfalse\n50 = 2 * 3 * 7\n>>> is_prime(100)\ntrue\n100 = 2 * 3\
    \ * 7\n>>> is_prime(200)\nfalse\n200 = 2 * 3 * 7\n>>> is_prime(300)\nfalse\n300\
    \ = 2 * 3 * 7\n>>> is_prime(400)\nfalse\n400 = 2 * 3 * 7\n>>> is_prime(500)\n\
    false\n500 = 2 * 3 * 7\n>>> is_prime(600)\nfalse\n600 = 2 * 3 * 7\n>>> is_prime(700)\n\
    false\n700 = 2 * 3 * 7\n>>> is_prime(800)\nfalse\n800 = 2 * 3 * 7\n>>> is_prime(900)\n\
    false\n900 = 2 * 3 * 7\n>>> is_prime(1000)\nfalse\n1000 = 2 * 3 * 7\n>>> is_prime(1100)\n\
    false\n1100 = 2 * 3 * 7\n>>> is_prime(1200)\nfalse\n1200 = 2 * 3 * 7\n>>> is_prime(1300)\n\
    false\n1300 = 2 * 3 * 7\n>>> is_prime(1400)\nfalse\n1400 = 2 * 3 * 7\n>>> is_prime(1500)\n\
    false\n1500 = 2 * 3 * 7\n>>> is_prime(1600)\nfalse\n1600 = 2 * 3 * 7\n>>> is_prime(1700)\n\
    false\n1700 = 2 * 3 * 7\n>>> is_prime(1800)\nfalse\n1800 = 2 * 3 * 7\n>>> is_prime(1900)\n\
    false\n1900 = 2 * 3 * 7\n>>> is_prime(2100)\nfalse\n2100 = 2 * 3 * 7\n>>> is_prime(2200)\n\
    false\n2200 = 2 * 3 * 7\n>>> is_prime(2300)\nfalse\n2300 = 2 * 3 * 7\n>>> is_prime(2400)\n\
    false\n2400 = 2 * 3 * 7\n>>> is_prime(2500)\nfalse\n2500 = 2 * 3 * 7\n>>> is_prime(2600)\n\
    false\n2600 = 2 * 3 * 7\n>>> is_prime(2700)\nfalse\n2700 = 2 * 3 * 7\n>>> is_prime(2800)\n\
    false\n2800 = 2 * 3 * 7\n>>> is_prime(\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd6rfi2ey.jl:16\nin expression starting at\
    \ /tmp/tmpd6rfi2ey.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    primes\
    \ = primes_list(100)\n    \n    for p in primes\n        if a % p == 0\n     \
    \       return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<text>\nExercise\nWrite a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    \    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 * 5\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1n6utrgg.jl:18\nin expression starting at\
    \ /tmp/tmp1n6utrgg.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a\
    \ < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"Write a function that returns true if\
    \ the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n\
    \    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvda96zls.jl:17\nin expression starting at\
    \ /tmp/tmpvda96zls.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return true\n    else \n        return false\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n\
    @time is_multiply_prime(100)\n</cell>\n<code language=julia-1.4>\n@time is_multiply_prime(10000)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n \
    \   true\n    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8t3hewig.jl:16\nin expression starting at\
    \ /tmp/tmp8t3hewig.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    \n    primes = prime_numbers(a)\n    \n    for i in\
    \ primes\n        if i%3 == 0\n            return false\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000000000)\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprzdw7u65.jl:21\nin expression starting at\
    \ /tmp/tmprzdw7u65.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxzqnlzmy.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxzqnlzmy.jl:1\n\
    in expression starting at /tmp/tmpxzqnlzmy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        false\n    else\n        true\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\n    \n    Example:\n    >>> is_prime(30)\n\
    \    true\n    30 = 3 * 7\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb1ulok3v.jl:16\nin expression starting at\
    \ /tmp/tmpb1ulok3v.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    else if a % 3 == 0 && a % 5 == 0\n        return true\n\
    \    else\n        return false\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaahwcp44.jl:12\nin expression starting at\
    \ /tmp/tmpaahwcp44.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    else if a == 2\n        return true\n    else if a\
    \ == 3\n        return true\n    else if a == 5\n        return true\n    else\
    \ if a == 7\n        return true\n    else if a == 11\n        return true\n \
    \   else if a == 13\n        return true\n    else if a == 17\n        return\
    \ true\n    else if a == 19\n        return true\n    else if a == 23\n      \
    \  return true\n    else if a == 29\n        return true\n    else if a == 31\n\
    \        return true\n    else if a == 37\n        return true\n    else if a\
    \ == 41\n        return true\n    else if a == 43\n        return true\n    else\
    \ if a == 47\n        return true\n    else if a == 53\n        return true\n\
    \    else if a == 59\n        return true\n    else if a == 61\n        return\
    \ true\n    else if a == 67\n        return true\n    else if a == 71\n      \
    \  return true\n    else if a == 73\n        return true\n    else if a == 79\n\
    \        return true\n    else if a == 83\n        return true\n    else if a\
    \ == 89\n        return true\n    else if a == 97\n        return true\n    else\n\
    \        return false\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Write a\
    \ function that returns true if the given number is the multiplication of 3 prime\
    \ numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n\
    \    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 * 5\n \
    \   \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t\
    @test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpar5yjvv5.jl:12\nin expression starting at\
    \ /tmp/tmpar5yjvv5.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxzqnlzmy.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxzqnlzmy.jl:1\n\
    in expression starting at /tmp/tmpxzqnlzmy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxzqnlzmy.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxzqnlzmy.jl:1\n\
    in expression starting at /tmp/tmpxzqnlzmy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if is_multiply_prime_helper(a,\
    \ 3, 100) == true\n    else \n        return false\n    end\nend\n\"\"\"\n   \
    \ \n    \n    \n\"\"\"\n    Write a function that returns true if the given number\
    \ is the multiplication of 5 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n \
    \   true\n    30 = 2 * 3 * 5 * 7\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: extra token \"a\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp01a499n7.jl:20\nin expression starting at\
    \ /tmp/tmp01a499n7.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxzqnlzmy.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxzqnlzmy.jl:1\n\
    in expression starting at /tmp/tmpxzqnlzmy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        false\n    else\n        true\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4wf71tu6.jl:16\nin expression starting at\
    \ /tmp/tmp4wf71tu6.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxzqnlzmy.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxzqnlzmy.jl:1\n\
    in expression starting at /tmp/tmpxzqnlzmy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97]\n    \n    for i in primes:\n        if a % i == 0:\n  \
    \          return False\n    return True\n    \n\"\"\"Write a function that returns\
    \ true if the given number is the multiplication of 5 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5 * 7\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm4ltqs02.jl:14\nin expression starting at\
    \ /tmp/tmpm4ltqs02.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    else \n        primes = prime_numbers(a)\n        prime_3\
    \ = primes[2] \n        for i in primes\n            if i%3 == 0 and i != prime_3\n\
    \                return false\n        return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the multiplication\
    \ of all prime numbers between 1 and a given number. \n    Example:\n    >>> prime_multiplication(100)\n\
    \    121\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"i\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkc8t1r6s.jl:16\nin expression starting at /tmp/tmpkc8t1r6s.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a\
    \ < 100\n        return false\n    \n    primes = primes(a)\n    \n    for i in\
    \ primes\n        if a % i == 0\n            return false\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns true if the given number is\
    \ a prime number or false otherwise.\n    \n    Example:\n    >>> is_prime(30)\n\
    \    true\n    30 = 3 * 7 * 11\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7vouoqk5.jl:22\nin expression starting at\
    \ /tmp/tmp7vouoqk5.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a\
    \ < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeieezjzb.jl:17\nin expression starting at\
    \ /tmp/tmpeieezjzb.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a\
    \ < 100\n        return true\n    \n    primes = primes(a)\n    \n    for i in\
    \ primes\n        if a % i == 0\n            return false\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.1>\nis_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.1>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvq692bje.jl:22\nin expression starting at\
    \ /tmp/tmpvq692bje.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    \n    primes = primes_list(100)\n    \n    for i in\
    \ primes\n        if a % i == 0\n            return false\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns true if the given number is\
    \ a prime number and false otherwise.\nKnowing that (a) is less then 100. \nExample:\
    \ \n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(50)\nfalse\n50 = 2 *\
    \ 3 * 7\n>>> is_prime(100)\ntrue\n100 = 2 * 3 * 7\n>>> is_prime(200)\nfalse\n\
    200 = 2 * 3 * 7\n>>> is_prime(300)\ntrue\n300 = 2 * 3 * 7\n>>> is_prime(400)\n\
    false\n400 = 2 * 3 * 7\n>>> is_prime(500)\ntrue\n500 = 2 * 3 * 7\n>>> is_prime(600)\n\
    false\n600 = 2 * 3 * 7\n>>> is_prime(700)\ntrue\n700 = 2 * 3 * 7\n>>> is_prime(800)\n\
    false\n800 = 2 * 3 * 7\n>>> is_prime(900)\ntrue\n900 = 2 * 3 * 7\n>>> is_prime(1000)\n\
    false\n1000 = 2 * 3 * 7\n>>> is_prime(1100)\ntrue\n1100 = 2 * 3 * 7\n>>> is_prime(1200)\n\
    false\n1200 = 2 * 3 * 7\n>>> is_prime(1300)\ntrue\n1300 = 2 * 3 * 7\n>>> is_prime(1400)\n\
    false\n1400 = 2 * 3 * 7\n>>> is_prime(1500)\ntrue\n1500 = 2 * 3 * 7\n>>> is_prime(1600)\n\
    false\n1600 = 2 * 3 * 7\n>>> is_prime(1700)\ntrue\n1700 = 2 * 3 * 7\n>>> is_prime(1800)\n\
    false\n1800 = 2 * 3 * 7\n>>> is_prime(1900)\ntrue\n1900 = 2 * 3 * 7\n>>> is_prime(2100)\n\
    false\n2100 = 2 * 3 * 7\n>>> is_prime(2200)\ntrue\n2200 = 2 * 3 * 7\n>>> is_prime(2300)\n\
    false\n2300 = 2 * 3 * 7\n>>> is_prime(2400)\ntrue\n2400 = 2 * 3 * 7\n>>> is_prime(2500)\n\
    false\n2500 = 2 * 3 * 7\n>>> is_prime(2600)\ntrue\n2600 = 2 * 3 * 7\n>>> is_prime(2700)\n\
    false\n\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzug5ldiz.jl:21\nin expression starting at\
    \ /tmp/tmpzug5ldiz.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    \n    primes = primes(a)\n    \n    for i in primes\n\
    \        if a % i == 0\n            return false\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.3>\n@time is_multiply_prime(30)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is a prime\
    \ number and false otherwise.\nKnowing that (a) is less then 100.\nExample: \n\
    >>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(100)\nfalse\n>>> is_prime(10)\n\
    true\n>>> is_prime(15)\nfalse\n>>> is_prime(20)\ntrue\n>>> is_prime(25)\nfalse\n\
    >>> is_prime(30)\ntrue\n>>> is_prime(35)\nfalse\n>>> is_prime(50)\ntrue\n>>> is_prime(100)\n\
    false\n>>> is_prime(1000)\ntrue\n>>> is_prime(10000)\nfalse\n>>> is_prime(100000)\n\
    true\n>>> is_prime(1000000)\nfalse\n>>> is_prime(10000000)\ntrue\n>>> is_prime(100000000)\n\
    false\n>>> is_prime(1000000000)\ntrue\n>>> is_prime(10000000000)\nfalse\n>>> is_prime(100000000000)\n\
    true\n>>> is_prime(1000000000000)\nfalse\n>>> is_prime(1000000000000)\ntrue\n\
    >>> is_prime(1000000000001)\nfalse\n>>> is_prime(1000000000002)\ntrue\n>>> is_prime(1000000000003)\n\
    false\n>>> is_prime(1000000000004)\ntrue\n>>> is_prime(1000000000005)\nfalse\n\
    >>> is_prime(1000000000006)\ntrue\n>>> is_prime(1000000000007)\nfalse\n>>> is_prime(1000000000008)\n\
    true\n>>> is_prime(1000000000009)\nfalse\n>>> is_prime(1000000000010)\ntrue\n\
    >>> is_prime(1000000000011)\nfalse\n>>> is_prime(1000000000012)\ntrue\n>>> is_prime(1000000000013)\n\
    false\n>>> is_prime(1000000000014)\ntrue\n>>> is_prime(1000000000015)\nfalse\n\
    >>> is_prime(1000000000016)\ntrue\n>>> is_prime(1000000000017)\nfalse\n>>> is_prime(1000000000018)\n\
    true\n>>> is_prime(1000000000019)\nfalse\n>>> is_prime(1000000000020)\ntrue\n\
    >>> is_prime(1000000000021)\nfalse\n>>> is_prime(100\nusing Test\n\n@testset begin\n\
    \ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsznd1mrm.jl:21\nin expression starting at\
    \ /tmp/tmpsznd1mrm.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(100)\n    \n    prime_numbers_set = Set(prime_numbers)\n    \n    if\
    \ prime_numbers_set.issubset([a])\n        true\n    else\n        false\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the given number is\
    \ a prime number and false otherwise.\nKnowing that (a) is less then 100. \nExample:\
    \ \n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 *\
    \ 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 =\
    \ 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphm95_kr7.jl:21\nin expression starting at\
    \ /tmp/tmphm95_kr7.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxzqnlzmy.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxzqnlzmy.jl:1\n\
    in expression starting at /tmp/tmpxzqnlzmy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if is_multiply_prime_helper(a,\
    \ 3, 100) == true\n    else false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppwed2z9t.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppwed2z9t.jl:1\n\
    in expression starting at /tmp/tmppwed2z9t.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if is_multiply_prime_helper(a,3,100)\
    \ == true\n    else \n        return false\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmphozvx8om.jl:20\n  Test threw
    exception\n  Expression: candidate(5) == false\n  UndefVarError: is_multiply_prime_helper
    not defined\n  Stacktrace:\n   [1] is_multiply_prime(a::Int64)\n     @ Main /tmp/tmphozvx8om.jl:10\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmphozvx8om.jl:20 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmphozvx8om.jl:19\ntest set: Error
    During Test at /tmp/tmphozvx8om.jl:21\n  Test threw exception\n  Expression: candidate(30)
    == true\n  UndefVarError: is_multiply_prime_helper not defined\n  Stacktrace:\n   [1]
    is_multiply_prime(a::Int64)\n     @ Main /tmp/tmphozvx8om.jl:10\n   [2] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmphozvx8om.jl:21 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmphozvx8om.jl:19\ntest set: Error
    During Test at /tmp/tmphozvx8om.jl:22\n  Test threw exception\n  Expression: candidate(8)
    == true\n  UndefVarError: is_multiply_prime_helper not defined\n  Stacktrace:\n   [1]
    is_multiply_prime(a::Int64)\n     @ Main /tmp/tmphozvx8om.jl:10\n   [2] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmphozvx8om.jl:22 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmphozvx8om.jl:19\ntest set: Error
    During Test at /tmp/tmphozvx8om.jl:23\n  Test threw exception\n  Expression: candidate(10)
    == false\n  UndefVarError: is_multiply_prime_helper not defined\n  Stacktrace:\n   [1]
    is_multiply_prime(a::Int64'
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if is_multiply_prime_helper(a)\
    \ == true\n    else \n        return false\nend\n\"\"\"\n    Write a function\
    \ that returns true if the given number is the multiplication of 5 prime numbers\n\
    \    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 * 5 * 7\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphe7b9jon.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphe7b9jon.jl:1\n\
    in expression starting at /tmp/tmphe7b9jon.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if a % i == 0\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\nusing Test\n\
    \n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplm9yi8yj.jl:18\nin expression starting at\
    \ /tmp/tmplm9yi8yj.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if is_multiply_prime_helper(a)\
    \ == true\n    else \n        false\n    end\nend\n\"\"\"\n    \n\"\"\"\n    Problem\
    \ 2\n    \n    Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: extra token \"2\" after end of expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfqabkavl.jl:18\nin expression starting at\
    \ /tmp/tmpfqabkavl.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxzqnlzmy.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxzqnlzmy.jl:1\n\
    in expression starting at /tmp/tmpxzqnlzmy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps7mox9g0.jl:16\nin expression starting at\
    \ /tmp/tmps7mox9g0.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if is_multiply_prime_helper(a)\
    \ == true\n    else \n        false\nend\n\"\"\"\n    Write a function that returns\
    \ true if the given number is the multiplication of 5 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5 * 7\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdmggry87.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdmggry87.jl:1\n\
    in expression starting at /tmp/tmpdmggry87.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxzqnlzmy.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxzqnlzmy.jl:1\n\
    in expression starting at /tmp/tmpxzqnlzmy.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if is_multiply_prime_helper(a,\
    \ 3, 100) == true\n    else \n        false\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpibghfy0v.jl:20\n  Test threw
    exception\n  Expression: candidate(5) == false\n  UndefVarError: is_multiply_prime_helper
    not defined\n  Stacktrace:\n   [1] is_multiply_prime(a::Int64)\n     @ Main /tmp/tmpibghfy0v.jl:10\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpibghfy0v.jl:20 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpibghfy0v.jl:19\ntest set: Error
    During Test at /tmp/tmpibghfy0v.jl:21\n  Test threw exception\n  Expression: candidate(30)
    == true\n  UndefVarError: is_multiply_prime_helper not defined\n  Stacktrace:\n   [1]
    is_multiply_prime(a::Int64)\n     @ Main /tmp/tmpibghfy0v.jl:10\n   [2] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpibghfy0v.jl:21 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpibghfy0v.jl:19\ntest set: Error
    During Test at /tmp/tmpibghfy0v.jl:22\n  Test threw exception\n  Expression: candidate(8)
    == true\n  UndefVarError: is_multiply_prime_helper not defined\n  Stacktrace:\n   [1]
    is_multiply_prime(a::Int64)\n     @ Main /tmp/tmpibghfy0v.jl:10\n   [2] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpibghfy0v.jl:22 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpibghfy0v.jl:19\ntest set: Error
    During Test at /tmp/tmpibghfy0v.jl:23\n  Test threw exception\n  Expression: candidate(10)
    == false\n  UndefVarError: is_multiply_prime_helper not defined\n  Stacktrace:\n   [1]
    is_multiply_prime(a::Int64'
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(100)\n    \n    for i in prime_numbers\n        if a % i == 0\n   \
    \         return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is a prime number and false otherwise.\nKnowing that\
    \ (a) is less then 100. \nExample: \n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n\
    >>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 *\
    \ 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2\
    \ * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_\nusing Test\n\
    \n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq3al5go2.jl:19\nin expression starting at\
    \ /tmp/tmpq3al5go2.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxzqnlzmy.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxzqnlzmy.jl:1\n\
    in expression starting at /tmp/tmpxzqnlzmy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    \n    primes = prime_numbers(a)\n    \n    for i in\
    \ primes\n        if a % i == 0\n            return false\n    \n    return true\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpvdrcwvw0.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvdrcwvw0.jl:1\n\
    in expression starting at /tmp/tmpvdrcwvw0.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_s1o75hg.jl:16\nin expression starting at\
    \ /tmp/tmp_s1o75hg.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(a)\n    \n    for n in prime_numbers:\n        if n % 3 == 0 and n\
    \ % 5 == 0:\n            return true\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\nKnowing that (a) is less then 100. \n\
    Example: \nis_prime(30)\ntrue\n30 = 2 * 3 * 5\nis_prime(100)\nfalse\n100 = 2 *\
    \ 3 * 5\nHint: \nThe first thing you should do is write a function that checks\
    \ if a number is prime. \nThe second thing you should do is write a function that\
    \ checks if a number is divisible by another number. \nThe third thing you should\
    \ do is write a function that checks if a number is divisible by 3 or 5. \nThe\
    \ fourth thing you should do is write a function that checks if a number is divisible\
    \ by both 3 and 5. \nThe fifth thing you should do is write a function that checks\
    \ if a number is divisible by both 3 and 5.\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9fj2q0nk.jl:14\nin expression starting at\
    \ /tmp/tmp9fj2q0nk.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a\
    \ < 100\n        return false\n    \n    primes = primes_upto(a)\n    \n    for\
    \ p in primes\n        if a % p == 0\n            return false\n    \n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\nKnowing that (a) is less then 100.\n\
    Example: \n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(100)\nfalse\n\
    >>> is_prime(10)\ntrue\n>>> is_prime(20)\nfalse\n>>> is_prime(15)\ntrue\n>>> is_prime(30)\n\
    true\n>>> is_prime(35)\nfalse\n>>> is_prime(50)\ntrue\n>>> is_prime(100)\ntrue\n\
    >>> is_prime(1000)\nfalse\n>>> is_prime(10000)\ntrue\n>>> is_prime(100000)\nfalse\n\
    >>> is_prime(1000000)\ntrue\n>>> is_prime(10000000)\nfalse\n>>> is_prime(100000000)\n\
    true\n>>> is_prime(1000000000)\nfalse\n>>> is_prime(10000000000)\ntrue\n>>> is_prime(100000000000)\n\
    false\n>>> is_prime(1000000000000)\ntrue\n>>> is_prime(1000000000000)\nfalse\n\
    >>> is_prime(1000000000001)\ntrue\n>>> is_prime(1000000000002)\nfalse\n>>> is_prime(1000000000003)\n\
    true\n>>> is_prime(1000000000004)\nfalse\n>>> is_prime(1000000000005)\ntrue\n\
    >>> is_prime(1000000000006)\nfalse\n>>> is_prime(1000000000007)\ntrue\n>>> is_prime(1000000000008)\n\
    false\n>>> is_prime(1000000000009)\ntrue\n>>> is_prime(1000000000010)\nfalse\n\
    >>> is_prime(1000000000011)\ntrue\n>>> is_prime(1000000000012)\nfalse\n>>> is_prime(1000000000013)\n\
    true\n>>> is_prime(1000000000014)\nfalse\n>>> is_prime(1000000000015)\ntrue\n\
    >>> is_prime(1000000000016)\nfalse\n>>> is_prime(1000000000017)\ntrue\n>>> is_prime(1000000000018)\n\
    false\n>>> is_prime(1000000000019)\ntrue\n>>> is_prime(1000000000020)\nfalse\n\
    >>> is_prime(1000000000021)\ntrue\n>>> is_prime(1000000000022)\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0xvcuv01.jl:22\nin expression starting at\
    \ /tmp/tmp0xvcuv01.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    \n    primes = prime_numbers(a)\n    \n    for p in\
    \ primes\n        if p * 3 == a\n            return true\n    return false\nend\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(100)\n</cell>\n<text>\nExercise\n\
    Write a function that returns true if the given number is the multiplication of\
    \ 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr_oou99e.jl:20\nin expression starting at\
    \ /tmp/tmpr_oou99e.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if is_prime(a)\
    \ == false \n        return false \n    else \n        for b in primes \n    \
    \        if a % b == 0 \n                return false \n        return true \n\
    end\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeblzq2rb.jl:18\nin expression starting at\
    \ /tmp/tmpeblzq2rb.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        false\n    else\n        true\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    @assert is_multiply_prime(100) == true\n@assert is_multiply_prime(101) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given number\
    \ is a perfect square, false otherwise.\nExample: \n    >>> is_perfect_square(25)\n\
    \    true\n    25 = 2 * 3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg2s5uvmd.jl:16\nin expression starting at\
    \ /tmp/tmpg2s5uvmd.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    \n    primes = primes(a)\n    \n    for i in primes\n\
    \        if a % i == 0\n            return false\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is a power\
    \ of 2 and\nfalse otherwise.\nKnowing that (a) is less then 100. \nExample: \n\
    >>> is_power_of_2(30)\ntrue\n30 = 2 * 2 * 2\n>>> is_power_of_2(30)\nfalse\n30\
    \ = 2 * 2 * 3\n>>> is_power_of_2(30)\ntrue\n30 = 2 * 2 * 5\n>>> is_power_of_2(30)\n\
    false\n30 = 2 * 2 * 7\n>>> is_power_of_2(30)\ntrue\n30 = 2 * 2 * 9\n>>> is_power_of_2(30)\n\
    false\n30 = 2 * 2 * 11\n>>> is_power_of_2(30)\ntrue\n30 = 2 * 2 * 13\n>>> is_power_of_2(30)\n\
    false\n30 = 2 * 2 * 15\n>>> is_power_of_2(30)\ntrue\n30 = 2 * 2 * 17\n>>> is_power_of_2(30)\n\
    false\n30 = 2 * 2 * 19\n>>> is_power_of_2(30)\ntrue\n30 = 2 * 2 * 21\n>>> is_power_of_2(30)\n\
    false\n30 = 2 * 2 * 23\n>>> is_power_of_2(30)\ntrue\n30 = 2 * 2 * 25\n>>> is_power_of_2(30)\n\
    false\n30 = 2 * 2 * 27\n>>> is_power_of_2(30)\ntrue\n30 = 2 * 2 * 29\n>>> is_power_of_2(30)\n\
    false\n30 = 2 * 2 * 31\n>>> is_power_of_2(30)\ntrue\n30 = 2 * 2 * 33\n>>> is_power_of_2(30)\n\
    false\n30 = 2 * 2 * 35\n>>> is_power_of_2(30)\ntrue\n30 = 2 * 2 * 37\n>>> is_power_of_2(30)\n\
    false\n30 = 2 * 2 * 39\n>>> is_power_of_2(30)\ntrue\n30 = 2 * 2 * 41\n>>> is_power_of_2(30)\n\
    false\n30 = 2 * 2 * 43\n>>> is_power_of_2(30)\ntrue\n30 = 2 * 2 * 45\n>>> is_power_of_2(30)\n\
    false\n30 = 2 * 2 * 47\n>>> is_power_of_2(30)\ntrue\n30 = 2 * 2 * 49\n>>> is_power_of_2(30)\n\
    false\n30 = 2 * 2 * 51\n>>> is_power_of_2(30)\ntrue\n30 = 2 * 2 * 53\n>>> is_power_of_2(30)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfnirinw2.jl:21\nin expression starting at\
    \ /tmp/tmpfnirinw2.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    primes\
    \ = primes_list(100)\n    \n    for prime in primes\n        if a % prime == 0\n\
    \            return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    \    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 * 5\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpezw_zip4.jl:19\nin expression starting at\
    \ /tmp/tmpezw_zip4.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if is_multiply_prime_helper(a,\
    \ 3, 100) == true\n    else return false\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmn0vdgu4.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmn0vdgu4.jl:1\n\
    in expression starting at /tmp/tmpmn0vdgu4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxzqnlzmy.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxzqnlzmy.jl:1\n\
    in expression starting at /tmp/tmpxzqnlzmy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a\
    \ < 100\n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjjzu_k8k.jl:1\nin expression starting at /tmp/tmpjjzu_k8k.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(a)\n    \n    for num in prime_numbers:\n        if a % num == 0: return\
    \ False\n    return True\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is a prime\
    \ number and false otherwise.\n    \n    Example:\n    >>> is_prime(30)\n    true\n\
    \    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcka37lpt.jl:14\nin expression starting at\
    \ /tmp/tmpcka37lpt.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a\
    \ < 100\n        return false\n    \n    primes = primes(a)\n    \n    for prime\
    \ in primes\n        if prime * prime > a\n            return false\n    \n  \
    \  return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is a prime\
    \ number and false otherwise.\nKnowing that (a) is less then 100. \nExample: \n\
    >>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(100)\nfalse\n100 = 2 * 3\
    \ * 7\n>>> is_prime(1000)\ntrue\n1000 = 2 * 3 * 7\n>>> is_prime(10000)\nfalse\n\
    10000 = 2 * 3 * 7\n>>> is_prime(100000)\ntrue\n100000 = 2 * 3 * 7\n>>> is_prime(1000000)\n\
    false\n1000000 = 2 * 3 * 7\n>>> is_prime(10000000)\ntrue\n10000000 = 2 * 3 * 7\n\
    >>> is_prime(100000000)\nfalse\n100000000 = 2 * 3 * 7\n>>> is_prime(1000000000)\n\
    true\n1000000000 = 2 * 3 * 7\n>>> is_prime(10000000000)\nfalse\n10000000000 =\
    \ 2 * 3 * 7\n>>> is_prime(100000000000)\ntrue\n100000000000 = 2 * 3 * 7\n>>> is_prime(1000000000000)\n\
    false\n1000000000000 = 2 * 3 * 7\n>>> is_prime(10000000000000)\ntrue\n10000000000000\
    \ = 2 * 3 * 7\n>>> is_prime(100000000000000)\nfalse\n100000000000000 = 2 * 3 *\
    \ 7\n>>> is_prime(1000000000000000)\ntrue\n1000000000000000 = 2 * 3 * 7\n>>> is_prime(10000000000000000)\n\
    false\n10000000000000000 = 2 * 3 * 7\n>>> is_prime(100000000000000000)\ntrue\n\
    100000000000000000 = 2 * 3 * 7\n>>> is_prime(1000000000000000000)\nfalse\n1000000000000000000\
    \ = 2 * 3 * 7\n>>> is_prime(10000000000000000000)\ntrue\n10000000000000000000\
    \ = 2 * 3 * 7\n>>> is_prime(1000000000000000000)\nfalse\n1000000000000000000 =\
    \ 2 * 3 * 7\n>>> is_prime(10000000000000000000)\ntrue\n10000000000000000000 =\
    \ 2 * 3 * 7\n>>> is_prime(100000000000000000000)\nfalse\n100000000000000000000\
    \ = 2 * 3 * 7\n>>> is_prime(1000000000000000000000)\ntrue\n1000000000000000000000\
    \ = 2 * 3 * 7\n\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5uzsmjc8.jl:22\nin expression starting at\
    \ /tmp/tmp5uzsmjc8.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    \n    primes = primes(a)\n    \n    for p in primes\n\
    \        if p > 100\n            return false\n        \n        if p == a \n\
    \            return true\n        \n        if p % 3 == 0\n            return\
    \ false\n        \n        if p % 5 == 0\n            return false\n        \n\
    \        if p % 7 == 0\n            return false\n        \n        if p % 11\
    \ == 0\n            return false\n        \n        if p % 13 == 0\n         \
    \   return false\n        \n        if p % 17 == 0\n            return false\n\
    \        \n        if p % 19 == 0\n            return false\n        \n      \
    \  if p % 23 == 0\n            return false\n        \n        if p % 29 == 0\n\
    \            return false\n        \n        if p % 31 == 0\n            return\
    \ false\n        \n        if p % 37 == 0\n            return false\n        \n\
    \        if p % 41 == 0\n            return false\n        \n        if p % 43\
    \ == 0\n            return false\n        \n        if p % 47 == 0\n         \
    \   return false\n        \n        if p % 53 == 0\n            return false\n\
    \        \n        if p % 59 == 0\n            return false\n        \n      \
    \  if p % 61 == 0\n            return false\n        \n        if p % 67 == 0\n\
    \            return false\n        \n        if p % 71 == 0\n            return\
    \ false\n        \n        if p % 73 == 0\n            return false\n        \n\
    \        if p % 79 == 0\n            return false\n        \n        if p % 83\
    \ == 0\n            return false\n        \n        if p % 89 == 0\n         \
    \   return false\n        \n        if p % 97 == 0\n            return false\n\
    \        \n        if p % 103 == 0\n            return false\n        \n     \
    \   if p % 107 == 0\n            return false\n        \n        if p % 111 ==\
    \ 0\n            return false\n        \n        if p % 117 == 0\n           \
    \ return false\n        \n        if p % 121 == 0\n            return false\n\
    \        \n        if p % 127 == 0\n            return false\n        \n     \
    \   if p % 131 == 0\n            return false\n        \n        if p % 137 ==\
    \ 0\n            return false\n        \n        if p % 141 == 0\n           \
    \ return false\n        \n        if p % 147 == 0\n            return false\n\
    \        \n        if p % 151 == 0\n            return false\n        \n     \
    \   if p % 157 == 0\n            return false\n        \n        if p % 161 ==\
    \ 0\n            return false\n        \n        if p % 167 == 0\n           \
    \ return false\n        \n        if p % 173 == 0\n            return false\n\
    \        \n        if p % 179 == 0\n            return false\n        \n     \
    \   if p % 183 == 0\n            return false\n        \n        if p % 187 ==\
    \ 0\n            return false\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf2yeoo8x.jl:1\nin expression starting at /tmp/tmpf2yeoo8x.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a\
    \ < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is a prime number and false otherwise.\nKnowing that\
    \ (a) is less then 100.\nExample: \n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>>\
    \ is_prime(50)\nfalse\n50 = 2 * 3 * 7\n>>> is_prime(100)\ntrue\n100 = 2 * 3 *\
    \ 7\n>>> is_prime(200)\nfalse\n200 = 2 * 3 * 7\n>>> is_prime(300)\ntrue\n300 =\
    \ 2 * 3 * 7\n>>> is_prime(400)\nfalse\n400 = 2 * 3 * 7\n>>> is_prime(500)\ntrue\n\
    500 = 2 * 3 * 7\n>>> is_prime(600)\nfalse\n600 = 2 * 3 * 7\n>>> is_prime(700)\n\
    true\n700 = 2 * 3 * 7\n>>> is_prime(800)\nfalse\n800 = 2 * 3 * 7\n>>> is_prime(900)\n\
    true\n900 = 2 * 3 * 7\n>>> is_prime(1000)\ntrue\n1000 = 2 * 3 * 7\n>>> is_prime(1100)\n\
    false\n1100 = 2 * 3 * 7\n>>> is_prime(1200)\ntrue\n1200 = 2 * 3 * 7\n>>> is_prime(1300)\n\
    false\n1300 = 2 * 3 * 7\n>>> is_prime(1400)\ntrue\n1400 = 2 * 3 * 7\n>>> is_prime(1500)\n\
    true\n1500 = 2 * 3 * 7\n>>> is_prime(1600)\nfalse\n1600 = 2 * 3 * 7\n>>> is_prime(1700)\n\
    true\n1700 = 2 * 3 * 7\n>>> is_prime(1800)\nfalse\n1800 = 2 * 3 * 7\n>>> is_prime(1900)\n\
    true\n1900 = 2 * 3 * 7\n>>> is_prime(2100)\nfalse\n2100 = 2 * 3 * 7\n>>> is_prime(2200)\n\
    true\n2200 = 2 * 3 * 7\n>>> is_prime(2300)\nfalse\n2300 = 2 * 3 * 7\n>>> is_prime(2400)\n\
    true\n2400 = 2 * 3 * 7\n>>> is_prime(2500)\ntrue\n2500 = 2 * 3 * 7\n>>> is_prime(2600)\n\
    false\n2600 = 2 * 3 * 7\n>>> is_prime(2700)\ntrue\n2700 = 2 * 3 * 7\n>>> is_prime(2800)\n\
    false\n2800 = 2 * 3 * 7\n>>> is_prime\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2owoo2cb.jl:17\nin expression starting at\
    \ /tmp/tmp2owoo2cb.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(100)\n    \n    for p in prime_numbers\n        if a % p == 0\n   \
    \         return false\n        end\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns true if the given number is the multiplication of\
    \ 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp63cm0w_l.jl:20\nin expression starting at\
    \ /tmp/tmp63cm0w_l.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxnv3_m1m.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpxnv3_m1m.jl:21\n  Expression: candidate(5)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxnv3_m1m.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxnv3_m1m.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxnv3_m1m.jl:24\n  Expression: candidate(10) == false\n   Evaluated:\
    \ true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxnv3_m1m.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxnv3_m1m.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxnv3_m1m.jl:25\n  Expression: candidate(125) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxnv3_m1m.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxnv3_m1m.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxnv3_m1m.jl:26\n  Expression: candidate(105) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxnv3_m1m.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxnv3_m1m.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxnv3_m1m.jl:30\n  Expression: candidate(1001) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] m"
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxzqnlzmy.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxzqnlzmy.jl:1\n\
    in expression starting at /tmp/tmpxzqnlzmy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if is_prime(a)\
    \ == false \n        return false \n    else \n        primes = prime_numbers(a)\
    \ \n        for i in primes \n            if i == a \n                return true\
    \ \n            else \n                return false \nend \n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is a perfect square, false otherwise.\n    \n    Example:\n\
    \    >>> is_perfect_square(25)\n    true\n    25 = 2 * 3 * 5\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnzr_7m8v.jl:20\nin expression starting at\
    \ /tmp/tmpnzr_7m8v.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxzqnlzmy.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxzqnlzmy.jl:1\n\
    in expression starting at /tmp/tmpxzqnlzmy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a\
    \ < 100\n        return false\n    \n    primes = primes(a)\n    \n    for p in\
    \ primes\n        if p * p > a\n            return false\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the multiplication of 3 prime\
    \ numbers. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2\
    \ * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ib9z0rt.jl:22\nin expression starting at\
    \ /tmp/tmp2ib9z0rt.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        false\n    else\n        true\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxzbkg2r4.jl:16\nin expression starting at\
    \ /tmp/tmpxzbkg2r4.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxzqnlzmy.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxzqnlzmy.jl:1\n\
    in expression starting at /tmp/tmpxzqnlzmy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_eg8ezwz.jl:16\nin expression starting at\
    \ /tmp/tmp_eg8ezwz.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    primes\
    \ = primes_list(100)\n    \n    for i in primes\n        if a % i == 0\n     \
    \       return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is a power of 3 or false otherwise.\nExample: \n>>>\
    \ is_power_of_3(30)\ntrue\n>>> is_power_of_3(30)\nfalse\n>>> is_power_of_3(30)\n\
    true\n>>> is_power_of_3(30)\nfalse\n>>> is_power_of_3(30)\ntrue\n>>> is_power_of_3(30)\n\
    false\n>>> is_power_of_3(30)\ntrue\n>>> is_power_of_3(30)\nfalse\n>>> is_power_of_3(30)\n\
    true\n>>> is_power_of_3(30)\nfalse\n>>> is_power_of_3(30)\ntrue\n>>> is_power_of_3(30)\n\
    false\n>>> is_power_of_3(30)\ntrue\n>>> is_power_of_3(30)\nfalse\n>>> is_power_of_3(30)\n\
    true\n>>> is_power_of_3(30)\nfalse\n>>> is_power_of_3(30)\ntrue\n>>> is_power_of_3(30)\n\
    false\n>>> is_power_of_3(30)\ntrue\n>>> is_power_of_3(30)\nfalse\n>>> is_power_of_3(30)\n\
    true\n>>> is_power_of_3(30)\nfalse\n>>> is_power_of_3(30)\ntrue\n>>> is_power_of_3(30)\n\
    false\n>>> is_power_of_3(30)\ntrue\n>>> is_power_of_3(30)\nfalse\n>>> is_power_of_3(30)\n\
    true\n>>> is_power_of_3(30)\nfalse\n>>> is_power_of_3(30)\ntrue\n>>> is_power_of_3(30)\n\
    false\n>>> is_power_of_3(30)\ntrue\n>>> is_power_of_3(30)\nfalse\n>>> is_power_of_3(30)\n\
    true\n>>> is_power_of_3(30)\nfalse\n>>> is_power_of_3(30)\ntrue\n>>> is_power_of_3(30)\n\
    false\n>>> is_power_of_3(30)\ntrue\n>>> is_power_of_3(30)\nfalse\n>>> is_power_of_3(30)\n\
    true\n>>> is_power_of_3(30)\nfalse\n>>> is_power_of_3(30)\ntrue\n>>> is_power_of_3(30)\n\
    false\n>>> is_power_of_3(30)\ntrue\n>>> is_power_of_3(30)\nfalse\n>>> is_power_of_3(30)\n\
    true\n>>> is_power_of_3(30)\nfalse\n>>> is_power_of_3(30)\ntrue\n>>> is_power_of_3(30)\n\
    false\n>>> is_\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ua4kll7.jl:19\nin expression starting at\
    \ /tmp/tmp3ua4kll7.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps7mox9g0.jl:16\nin expression starting at\
    \ /tmp/tmps7mox9g0.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    \n    primes = prime_numbers(a)\n    \n    for i in\
    \ primes\n        if i % 3 == 0\n            return false\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(10000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(1000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(1000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(10000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(10000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(100000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(1000000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(10000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(100000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(1000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(10000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6_u6sd2g.jl:21\nin expression starting at\
    \ /tmp/tmp6_u6sd2g.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps7mox9g0.jl:16\nin expression starting at\
    \ /tmp/tmps7mox9g0.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxzqnlzmy.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxzqnlzmy.jl:1\n\
    in expression starting at /tmp/tmpxzqnlzmy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @time is_multiply_prime(30)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    \    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 * 5\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy3945j_a.jl:16\nin expression starting at\
    \ /tmp/tmpy3945j_a.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if is_prime(a)\
    \ and is_prime(a+2) and is_prime(a+3) and is_prime(a+5):\n        return true\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"is_prime\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpme870qz_.jl:10\nin expression starting at /tmp/tmpme870qz_.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxzqnlzmy.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxzqnlzmy.jl:1\n\
    in expression starting at /tmp/tmpxzqnlzmy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    \n    primes = primes(a)\n    \n    for i in primes\n\
    \        if a % i == 0\n            return false\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.4>\nis_multiply_prime\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwq3i2g8n.jl:21\nin expression starting at\
    \ /tmp/tmpwq3i2g8n.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(100)\n    \n    for i in prime_numbers\n        if a % i == 0\n   \
    \         return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is a power of 3 or false otherwise.\n    Example:\n\
    \    >>> is_power_of_3(30)\n    true\n    30 = 3 * 3 * 3\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmxlf7ixl.jl:18\nin expression starting at\
    \ /tmp/tmpmxlf7ixl.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7nlga55e.jl:16\nin expression starting at\
    \ /tmp/tmp7nlga55e.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if is_multiply_prime_helper(a,\
    \ 3, 100) == true\n    else \n        return false\nend\n\"\"\"\n    Write a function\
    \ that returns true if the given number is the multiplication of 5 prime numbers\n\
    \    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 * 5 * 7\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpywe4kc10.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpywe4kc10.jl:1\n\
    in expression starting at /tmp/tmpywe4kc10.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    \n    prime_numbers = primes(a)\n    \n    for prime\
    \ in prime_numbers\n        if a % prime == 0\n            return false\n    end\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns true if the given number\
    \ is a power of 3 prime and false otherwise.\nKnowing that (a) is less then 100.\
    \ \nExample: \n>>> is_power_of_3_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_power_of_3_prime(100)\n\
    false\n>>> is_power_of_3_prime(100)\nfalse\n>>> is_power_of_3_prime(200)\ntrue\n\
    >>> is_power_of_3_prime(300)\ntrue\n>>> is_power_of_3_prime(400)\ntrue\n>>> is_power_of_3_prime(500)\n\
    true\n>>> is_power_of_3_prime(600)\ntrue\n>>> is_power_of_3_prime(700)\ntrue\n\
    >>> is_power_of_3_prime(800)\ntrue\n>>> is_power_of_3_prime(900)\ntrue\n>>> is_power_of_3_prime(1000)\n\
    true\n>>> is_power_of_3_prime(1100)\ntrue\n>>> is_power_of_3_prime(1200)\ntrue\n\
    >>> is_power_of_3_prime(1300)\ntrue\n>>> is_power_of_3_prime(1400)\ntrue\n>>>\
    \ is_power_of_3_prime(1500)\ntrue\n>>> is_power_of_3_prime(1600)\ntrue\n>>> is_power_of_3_prime(1700)\n\
    true\n>>> is_power_of_3_prime(1800)\ntrue\n>>> is_power_of_3_prime(1900)\ntrue\n\
    >>> is_power_of_3_prime(2000)\ntrue\n>>> is_power_of_3_prime(2100)\ntrue\n>>>\
    \ is_power_of_3_prime(2200)\ntrue\n>>> is_power_of_3_prime(2300)\ntrue\n>>> is_power_of_3_prime(2400)\n\
    true\n>>> is_power_of_3_prime(2500)\ntrue\n>>> is_power_of_3_prime(2600)\ntrue\n\
    >>> is_power_of_3_prime(2700)\ntrue\n>>> is_power_of_3_prime(2800)\ntrue\n>>>\
    \ is_power_of_3_prime(2900)\ntrue\n>>> is_power_of_3_prime(3000)\ntrue\n>>> is_power_of_3_prime(3100)\n\
    true\n>>> is_power_of_3_prime(3200) \ntrue\n>>> is_\nusing Test\n\n@testset begin\n\
    \ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt5f93102.jl:21\nin expression starting at\
    \ /tmp/tmpt5f93102.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    primes\
    \ = primes_list(100)\n    \n    primes_set = Set(primes)\n    \n    primes_set\
    \ = primes_set - Set(primes_list(a % primes_set))\n    \n    return primes_set\
    \ == Set(primes)\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns true if the given number is a prime\
    \ number and false otherwise.\nKnowing that (a) is less then 100. \nExample: \n\
    >>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(100)\nfalse\n100 = 2 * 3\
    \ * 5\n\"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmpc3kplr.jl:19\nin expression starting at\
    \ /tmp/tmpmpc3kplr.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if is_multiply_prime_helper(a,\
    \ 3, 100)\n    else false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbxgjh54k.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbxgjh54k.jl:1\n\
    in expression starting at /tmp/tmpbxgjh54k.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxzqnlzmy.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxzqnlzmy.jl:1\n\
    in expression starting at /tmp/tmpxzqnlzmy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprgsqommb.jl:16\nin expression starting at\
    \ /tmp/tmprgsqommb.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ei7mbqx.jl:16\nin expression starting at\
    \ /tmp/tmp6ei7mbqx.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxzqnlzmy.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxzqnlzmy.jl:1\n\
    in expression starting at /tmp/tmpxzqnlzmy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(50)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(200)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(300)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(400)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(500)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(600)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(700)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(800)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(900)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1200)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1300)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1400)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1500)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1600)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1700)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1800)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1900)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2200)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2300)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(2400)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(2500)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(2600)\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0559_qf6.jl:16\nin expression starting at\
    \ /tmp/tmp0559_qf6.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    \n    primes = primes_list(100)\n    \n    for p in\
    \ primes\n        if p > a\n            return false\n        if p % 3 == 0\n\
    \            return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpobl69fwx.jl:23\nin expression starting at\
    \ /tmp/tmpobl69fwx.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a\
    \ < 100\n        return false\n    \n    primes = primes(a)\n    \n    for i in\
    \ primes\n        if a % i == 0\n            return false\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(100)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns true if the given number is a prime number\
    \ and false otherwise.\n    \n    \n    Example:\n    >>> is_prime(30)\n    true\n\
    \    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2833d0ff.jl:22\nin expression starting at\
    \ /tmp/tmp2833d0ff.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxzqnlzmy.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxzqnlzmy.jl:1\n\
    in expression starting at /tmp/tmpxzqnlzmy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    primes\
    \ = primes_list(100)\n    \n    for i in primes\n        if a % i == 0\n     \
    \       return false\n        end\n    end\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5rfzh4ae.jl:20\nin expression starting at\
    \ /tmp/tmp5rfzh4ae.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    \n    primes = prime_numbers(a)\n    \n    for p in\
    \ primes\n        if p*p > a\n            return false\n        end\n    end\n\
    \    \n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgrcf67ki.jl:23\nin expression starting at\
    \ /tmp/tmpgrcf67ki.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    @assert is_multiply_prime(100) == false\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns true if the given number is the multiplication of 3 prime\
    \ numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n\
    \    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 * 5\n \
    \   \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t\
    @test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnz3gi82v.jl:16\nin expression starting at\
    \ /tmp/tmpnz3gi82v.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxzqnlzmy.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxzqnlzmy.jl:1\n\
    in expression starting at /tmp/tmpxzqnlzmy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    \n    primes = primes_list(100)\n    \n    for i in\
    \ primes\n        if a % i == 0\n            return false\n    \n    return true\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpb3rhf8p1.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb3rhf8p1.jl:1\n\
    in expression starting at /tmp/tmpb3rhf8p1.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    else \n        primes = primes_list(100)\n        for\
    \ i in primes\n            if a % i == 0\n                return false\n     \
    \   return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2191xvab.jl:19\nin expression starting at\
    \ /tmp/tmp2191xvab.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a\
    \ < 100\n        return false\n    \n    primes = primes(a)\n    \n    for i in\
    \ primes\n        if a % i == 0\n            return false\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(10000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(1000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100000000)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(1000000000)\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(10000000000)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(10000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(100000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(1000000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(100000000000000001)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(100000000000000002)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(100000000000000003)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(100000000000000004)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(100000000000000005)\n</cell>\n<code language=julia-1.5>\n\
    \nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpefxn9vwq.jl:22\nin expression starting at\
    \ /tmp/tmpefxn9vwq.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(100)\n    \n    for i in prime_numbers\n        if a % i == 0\n   \
    \         return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_qum5he2.jl:19\nin expression starting at\
    \ /tmp/tmp_qum5he2.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        false\n    else\n        true\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4wf71tu6.jl:16\nin expression starting at\
    \ /tmp/tmp4wf71tu6.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps7mox9g0.jl:16\nin expression starting at\
    \ /tmp/tmps7mox9g0.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxzqnlzmy.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxzqnlzmy.jl:1\n\
    in expression starting at /tmp/tmpxzqnlzmy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    \n    primes = primes_list(100)\n    \n    for i in\
    \ primes\n        if a % i == 0\n            return false\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns true if the given number is a prime number and false\
    \ otherwise.\nKnowing that (a) is less then 100. \nExample: \n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(100)\nfalse\n100 = 2 * 3 * 5\n</text>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmgay2n_n.jl:21\nin expression starting at\
    \ /tmp/tmpmgay2n_n.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    \n    primes = primes_list(100)\n    \n    for i in\
    \ primes\n        if a % i == 0\n            return false\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the given number is\
    \ a prime number and false otherwise.\nKnowing that (a) is less then 100. \nExample:\
    \ \n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 *\
    \ 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 =\
    \ 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = \nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoyvvcme8.jl:21\nin expression starting at\
    \ /tmp/tmpoyvvcme8.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    primes\
    \ = primes_list(100)\n    \n    for i in primes\n        if a % i == 0\n     \
    \       return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpts02pe0a.jl:19\nin expression starting at\
    \ /tmp/tmpts02pe0a.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(100)\n    \n    for i in prime_numbers\n        if a % i == 0\n   \
    \         return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    @assert is_multiply_prime(32) == false\n@assert is_multiply_prime(33) == false\n\
    @assert is_multiply_prime(34) == true\n@assert is_multiply_prime(35) == false\n\
    @assert is_multiply_prime(36) == false\n@assert is_multiply_prime(37) == false\n\
    @assert is_multiply_prime(38) == false\n@assert is_multiply_prime(39) == false\n\
    @assert is_multiply_prime(40) == false\n@assert is_multiply_prime(41) == false\n\
    @assert is_multiply_prime(42) == false\n@assert is_multiply_prime(43) == false\n\
    @assert is_multiply_prime(44) == false\n@assert is_multiply_prime(45) == false\n\
    @assert is_multiply_prime(46) == false\n@assert is_multiply_prime(47) == false\n\
    @assert is_multiply_prime(48) == false\n@assert is_multiply_prime(49) == false\n\
    @assert is_multiply_prime(50) == false\n@assert is_multiply_prime(51) == false\n\
    @assert is_multiply_prime(52) == false\n@assert is_multiply_prime(53) == false\n\
    @assert is_multiply_prime(54) == false\n@assert is_multiply_prime(55) == false\n\
    @assert is_multiply_prime(56) == false\n@assert is_multiply_prime(57) == false\n\
    @assert is_multiply_prime(58) == false\n@assert is_multiply_prime(59) == false\n\
    @assert is_multiply_prime(60) == false\n@assert is_multiply_prime(61) == false\n\
    @assert is_multiply_prime(62) == false\n@assert is_multiply_prime(63) == false\n\
    @assert is_multiply_prime(64) == false\n@assert is_multiply_prime(65) == false\n\
    @assert is_multiply_prime(66) == false\n@assert is_multiply_prime(67) == false\n\
    @assert is_multiply_prime(68) == false\n@assert is_multiply_prime(69) == false\n\
    @assert is_multiply_prime(70) == false\n@assert is_multiply_prime(71) == false\n\
    @assert is_multiply_prime\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpthtrhnay.jl:19\nin expression starting at\
    \ /tmp/tmpthtrhnay.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    else if a == 2\n        return true\n    else if a\
    \ == 3\n        return true\n    else if a % 2 == 0\n        return false\n  \
    \  else if a % 3 == 0\n        return false\n    else if a % 5 == 0\n        return\
    \ false\n    else if a % 7 == 0\n        return false\n    else\n        return\
    \ true\n    end\nend\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpure53i16.jl:12\nin expression starting at\
    \ /tmp/tmpure53i16.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a\
    \ < 100\n        return false\n    \n    primes = primes(a)\n    \n    for prime\
    \ in primes\n        if a % prime == 0\n            return false\n    \n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpssqip1ds.jl:22\nin expression starting at\
    \ /tmp/tmpssqip1ds.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    primes\
    \ = primes_list(100)\n    \n    for i in primes\n        if a % i == 0\n     \
    \       return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    @assert is_multiply_prime(32) == false\n@assert is_multiply_prime(33) == true\n\
    @assert is_multiply_prime(34) == false\n@assert is_multiply_prime(35) == true\n\
    @assert is_multiply_prime(36) == false\n@assert is_multiply_prime(37) == true\n\
    @assert is_multiply_prime(38) == false\n@assert is_multiply_prime(39) == true\n\
    @assert is_multiply_prime(40) == false\n@assert is_multiply_prime(41) == true\n\
    @assert is_multiply_prime(42) == false\n@assert is_multiply_prime(43) == true\n\
    @assert is_multiply_prime(44) == false\n@assert is_multiply_prime(45) == true\n\
    @assert is_multiply_prime(46) == false\n@assert is_multiply_prime(47) == true\n\
    @assert is_multiply_prime(48) == false\n@assert is_multiply_prime(49) == true\n\
    @assert is_multiply_prime(50) == false\n@assert is_multiply_prime(51) == true\n\
    @assert is_multiply_prime(52) == false\n@assert is_multiply_prime(53) == true\n\
    @assert is_multiply_prime(54) == false\n@assert is_multiply_prime(55) == true\n\
    @assert is_multiply_prime(56) == false\n@assert is_multiply_prime(57) == true\n\
    @assert is_multiply_prime(58) == false\n@assert is_multiply_prime(59) == true\n\
    @assert is_multiply_prime(60) == false\n@assert is_multiply_prime(61) == true\n\
    @assert is_multiply_prime(62) == false\n@assert is_multiply_prime(63) == true\n\
    @assert is_multiply_prime(64) == false\n@assert is_multiply_prime(65) == true\n\
    @assert is_multiply_prime(66) == false\n@assert is_multiply_prime(67) == true\n\
    @assert is_multiply_prime(68) == false\n@assert is_multiply_prime(69) == true\n\
    @assert is_multiply_prime(70) == false\n@assert is_multiply_prime(71) == true\n\
    @assert is_multiply_prime(72) == false\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcfxdbabb.jl:18\nin expression starting at\
    \ /tmp/tmpcfxdbabb.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    \n    primes = prime_numbers(a)\n    \n    for p in\
    \ primes\n        if p * p > a\n            return false\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.4>\nis_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.4>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.4>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.4>\nis_multiply_prime(10000)\n\
    </cell>\n<code language=julia-1.4>\nis_multiply_prime(100000)\n</cell>\n<code\
    \ language=julia-1.4>\nis_multiply_prime(1000000)\n</cell>\n<code language=julia-1.4>\n\
    is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.4>\nis_multiply_prime(100000000)\n\
    </cell>\n<code language=julia-1.4>\nis_multiply_prime(1000000000)\n</cell>\n<code\
    \ language=julia-1.4>\nis_multiply_prime(10000000000)\n</cell>\n<code language=julia-1.4>\n\
    is_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.4>\nis_multiply_prime(1000000000000)\n\
    </cell>\n<code language=julia-1.4>\nis_multiply_prime(10000000000000)\n</cell>\n\
    <code language=julia-1.4>\nis_multiply_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.4>\nis_multiply_prime(1000000000000000)\n</cell>\n<code language=julia-1.4>\n\
    is_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.4>\nis_multiply_prime(100000000000000000)\n\
    </cell>\n<code language=julia-1.4>\nis_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.4>\nis_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.4>\nis_multiply_prime(100000000000000000000)\n</cell>\n\
    <code language=julia-1.4>\nis_multiply_prime(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.4>\nis_multiply_prime(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.4>\nis_multiply_prime(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.4>\nis_multiply_prime(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.4>\nis_multiply_prime(100\nusing Test\n\n@testset begin\n\
    \ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl6k_2jot.jl:21\nin expression starting at\
    \ /tmp/tmpl6k_2jot.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    \n    primes = prime_numbers(a)\n    \n    for i in\
    \ primes\n        if i == a\n            return false\n    \n    for i in primes\n\
    \        if i != a\n            if a % i == 0\n                return false\n\
    \    \n    for i in primes\n        if i != a\n            if a % i != 0\n   \
    \             return false\n    \n    for i in primes\n        if i != a\n   \
    \         if a % i != 0\n                return false\n    \n    for i in primes\n\
    \        if i != a\n            if a % i != 0\n                return false\n\
    \    \n    for i in primes\n        if i != a\n            if a % i != 0\n   \
    \             return false\n    \n    for i in primes\n        if i != a\n   \
    \         if a % i != 0\n                return false\n    \n    for i in primes\n\
    \        if i != a\n            if a % i != 0\n                return false\n\
    \    \n    for i in primes\n        if i != a\n            if a % i != 0\n   \
    \             return false\n    \n    for i in primes\n        if i != a\n   \
    \         if a % i != 0\n                return false\n    \n    for i in primes\n\
    \        if i != a\n            if a % i != 0\n                return false\n\
    \    \n    for i in primes\n        if i != a\n            if a % i != 0\n   \
    \             return false\n    \n    for i in primes\n        if i != a\n   \
    \         if a % i != 0\n                return false\n    \n    for i in primes\n\
    \        if i != a\n            if a % i != 0\n                return false\n\
    \    \n    for i in primes\n        if i != a\n            if a % i != 0\n   \
    \             return false\n    \n    for i in primes\n        if i != a\n   \
    \         if a % i != 0\n                return false\n    \n    for i in primes\n\
    \        if i != a\n            if a % i != 0\n                return false\n\
    \    \n    for i in primes\n        if i != a\n            if a % i != 0\n   \
    \             return false\n    \n    for i in primes\n        if i != a\n   \
    \         if a % i != 0\n                return false\n    \n    for i in primes\n\
    \        if i != a\n            if a % i != 0\n                return false\n\
    \    \n    for i in primes\n        if i != a\n            if a % i != 0\n   \
    \             return false\n    \n    for i in primes\n        if i != a\n   \
    \         if a % i != 0\n                return false\n    \n    for i in primes\n\
    \        if i != a\n            if a % i != 0\n                return false\n\
    \    \n    for i in primes\n        if i != a\n            if a % i != 0\n   \
    \             return false\n    \n    for i in primes\n        if i != a\n   \
    \         if a % i != 0\n                return false\n    \n    for i in primes\n\
    \        if i != a\n            if a % i != 0\n                return false\n\
    \    \n    for i in primes\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpqfgfy1dj.jl:144\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqfgfy1dj.jl:1\n\
    in expression starting at /tmp/tmpqfgfy1dj.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(a)\n    \n    for p in prime_numbers:\n        if p * p > a:\n    \
    \        return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    \    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 * 5\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp63d2qe6q.jl:14\nin expression starting at\
    \ /tmp/tmp63d2qe6q.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    @assert is_multiply_prime(100) == true\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns true if the given number is a power of 2 and\nfalse otherwise.\n\
    Knowing that (a) is less then 100. \nExample: \n>>> is_power_of_2(30)\ntrue\n\
    30 = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * \nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvyblh57q.jl:16\nin expression starting at\
    \ /tmp/tmpvyblh57q.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if is_multiply_prime_helper(a,\
    \ 3, 100) == true\n    else false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppwed2z9t.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppwed2z9t.jl:1\n\
    in expression starting at /tmp/tmppwed2z9t.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if is_prime(a)\
    \ and is_prime(a+2) and is_prime(a+4) and is_prime(a+6) and is_prime(a+8) and\
    \ is_prime(a+10) and is_prime(a+12) and is_prime(a+14) and is_prime(a+16) and\
    \ is_prime(a+18) and is_prime(a+20) and is_prime(a+22) and is_prime(a+24) and\
    \ is_prime(a+26) and is_prime(a+28) and is_prime(a+30) and is_prime(a+32) and\
    \ is_prime(a+34) and is_prime(a+36) and is_prime(a+38) and is_prime(a+40) and\
    \ is_prime(a+42) and is_prime(a+44) and is_prime(a+46) and is_prime(a+48) and\
    \ is_prime(a+50) and is_prime(a+52) and is_prime(a+54) and is_prime(a+56) and\
    \ is_prime(a+58) and is_prime(a+60) and is_prime(a+62) and is_prime(a+64) and\
    \ is_prime(a+66) and is_prime(a+68) and is_prime(a+70) and is_prime(a+72) and\
    \ is_prime(a+74) and is_prime(a+76) and is_prime(a+78) and is_prime(a+80) and\
    \ is_prime(a+82) and is_prime(a+84) and is_prime(a+86) and is_prime(a+88) and\
    \ is_prime(a+90) and is_prime(a+92) and is_prime(a+94) and is_prime(a+96) and\
    \ is_prime(a+98) and is_prime(a+100) and is_prime(a+102) \n    then true\n   \
    \ else false\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"Write a\
    \ function that returns true if the given number is the multiplication of 3 prime\
    \ numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n\
    \    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 * 5\n \
    \   \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t\
    @test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"is_prime\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpue0cvlt9.jl:10\nin expression starting at /tmp/tmpue0cvlt9.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a\
    \ < 100\n        return false\n    \n    primes = primes_list(100)\n    \n   \
    \ for i in primes\n        if a % i == 0\n            return false\n    \n   \
    \ return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9eg9noli.jl:22\nin expression starting at\
    \ /tmp/tmp9eg9noli.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a\
    \ < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    @code_warntype is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns true if the given number is the multiplication of 3 prime numbers\n\
    \    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 * 5\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp61rueqti.jl:17\nin expression starting at\
    \ /tmp/tmp61rueqti.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(a)\n    \n    for p in prime_numbers\n        if p*p > a\n        \
    \    return false\n        end\n    end\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns true if the given number is the multiplication of 3\
    \ prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\
    \ \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t\
    @test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqo4dqa16.jl:20\nin expression starting at\
    \ /tmp/tmpqo4dqa16.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    \n    primes = primes(a)\n    \n    for p in primes\n\
    \        if p * p > a\n            return false\n    \n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns true if the given number is a prime\
    \ number and false otherwise.\n    \n    Example:\n    >>> is_prime(30)\n    true\n\
    \    30 = 3 * 7\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjh286bs6.jl:21\nin expression starting at\
    \ /tmp/tmpjh286bs6.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if is_multiply_prime_helper(a)\
    \ == true\n        return true\n    return false\nend\n\"\"\"\n    Write a function\
    \ that returns true if the given number is the multiplication of 5 prime numbers\n\
    \    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 * 5 * 7\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9c7dkl0u.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9c7dkl0u.jl:1\n\
    in expression starting at /tmp/tmp9c7dkl0u.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0uf_lo16.jl:16\nin expression starting at\
    \ /tmp/tmp0uf_lo16.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if is_multiply_prime_helper(a,3,100)\
    \ == true\n        return true\n    return false\nend\n\"\"\"\n    Write a function\
    \ that returns true if the given number is the multiplication of 5 prime numbers\n\
    \    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 * 5 * 7\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0351wohr.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0351wohr.jl:1\n\
    in expression starting at /tmp/tmp0351wohr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    \n    prime_numbers = primes(a)\n    \n    for p in\
    \ prime_numbers\n        if p*p > a\n            return false\n    \n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30)\
    \ == true\n@assert is_multiply_prime(31) == false\n@assert is_multiply_prime(100)\
    \ == true\n</cell>\n<text>\nExercise 3\nWrite a function that returns true if\
    \ the given number is a prime number and false otherwise.\n    \n    Example:\n\
    \    >>> is_prime(30)\n    true\n    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg5bpw6kr.jl:21\nin expression starting at\
    \ /tmp/tmpg5bpw6kr.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a\
    \ < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is a prime number and false otherwise.\n    Example:\n\
    \    >>> is_prime(30)\n    true\n    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5a2rgump.jl:17\nin expression starting at\
    \ /tmp/tmp5a2rgump.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97]\n    \n    for i in primes\n        if a % i == 0\n    \
    \        return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp628gacol.jl:18\nin expression starting at\
    \ /tmp/tmp628gacol.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a\
    \ < 100\n        return true\n    \n    primes = primes_list(100)\n    \n    for\
    \ i in primes\n        if a % i == 0\n            return false\n    \n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000\nusing Test\n\
    \n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp06a4_sqd.jl:22\nin expression starting at\
    \ /tmp/tmp06a4_sqd.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if is_multiply_prime_helper(a,\
    \ 3, 100) == true\n    else return false\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmn0vdgu4.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmn0vdgu4.jl:1\n\
    in expression starting at /tmp/tmpmn0vdgu4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxnv3_m1m.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpxnv3_m1m.jl:21\n  Expression: candidate(5)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxnv3_m1m.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxnv3_m1m.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxnv3_m1m.jl:24\n  Expression: candidate(10) == false\n   Evaluated:\
    \ true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxnv3_m1m.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxnv3_m1m.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxnv3_m1m.jl:25\n  Expression: candidate(125) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxnv3_m1m.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxnv3_m1m.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxnv3_m1m.jl:26\n  Expression: candidate(105) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxnv3_m1m.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxnv3_m1m.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxnv3_m1m.jl:30\n  Expression: candidate(1001) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] m"
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if is_multiply_prime_helper(a)\
    \ == true\n        return true\n    return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    @assert is_multiply_prime(32) == false\n@assert is_multiply_prime(33) == false\n\
    @assert is_multiply_prime(34) == false\n@assert is_multiply_prime(35) == false\n\
    @assert is_multiply_prime(36) == false\n@assert is_multiply_prime(37) == false\n\
    @assert is_multiply_prime(38) == false\n@assert is_multiply_prime(39) == false\n\
    @assert is_multiply_prime(40) == false\n@assert is_multiply_prime(41) == false\n\
    @assert is_multiply_prime(42) == false\n@assert is_multiply_prime(43) == false\n\
    @assert is_multiply_prime(44) == false\n@assert is_multiply_prime(45) == false\n\
    @assert is_multiply_prime(46) == false\n@assert is_multiply_prime(47) == false\n\
    @assert is_multiply_prime(48) == false\n@assert is_multiply_prime(49) == false\n\
    @assert is_multiply_prime(50) == false\n@assert is_multiply_prime(51) == false\n\
    @assert is_multiply_prime(52) == false\n@assert is_multiply_prime(53) == false\n\
    @assert is_multiply_prime(54) == false\n@assert is_multiply_prime(55) == false\n\
    @assert is_multiply_prime(56) == false\n@assert is_multiply_prime(57) == false\n\
    @assert is_multiply_prime(58) == false\n@assert is_multiply_prime(59) == false\n\
    @assert is_multiply_prime(60) == false\n@assert is_multiply_prime(61) == false\n\
    @assert is_multiply_prime(62) == false\n@assert is_multiply_prime(63) == false\n\
    @assert is_multiply_prime(64) == false\n@assert is_multiply_prime(65) == false\n\
    @assert is_multiply_prime(66) == false\n@assert is_multiply_prime(67) == false\n\
    @assert is_multiply_prime(68) == false\n@assert is_multiply_prime(69) == false\n\
    @assert is_multiply_prime(70) == false\n@assert is_multiply_prime(71) == false\n\
    @assert is_multiply_prime(72) == false\n@assert is_multiply_prime(73) == false\n\
    \nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp57wmj8z8.jl:14\nin expression starting at\
    \ /tmp/tmp57wmj8z8.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if is_prime(a)\
    \ == false \n        error(\"a is not a prime number\")\n    else \n        if\
    \ is_multiply_prime_helper(a, 2) == false \n            error(\"a is not a multiplication\
    \ of 3 prime numbers\")\n        else \n            return true\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is a prime\
    \ number and false otherwise.\nExample: \n>>> is_prime(30)\ntrue\n30 = 2 * 3 *\
    \ 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 *\
    \ 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 =\
    \ 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * \nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl8k__k6a.jl:18\nin expression starting at\
    \ /tmp/tmpl8k__k6a.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    primes\
    \ = primes_list(100)\n    \n    for i in primes\n        if a % i == 0\n     \
    \       return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise: Write a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptwgsf57q.jl:19\nin expression starting at\
    \ /tmp/tmptwgsf57q.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    primes\
    \ = primes_list(100)\n    \n    for i in primes\n        if a % i == 0\n     \
    \       return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns true if the given number is a prime number and false otherwise.\n  \
    \  \n    Example:\n    >>> is_prime(30)\n    true\n    30 = 3 * 7 * 11\n    \"\
    \"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxqmg3ry0.jl:19\nin expression starting at\
    \ /tmp/tmpxqmg3ry0.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    primes\
    \ = primes_list(100)\n    \n    primes_count = count(primes)\n    \n    primes_count_2\
    \ = count(primes)\n    \n    primes_count_3 = count(primes)\n    \n    primes_count_4\
    \ = count(primes)\n    \n    primes_count_5 = count(primes)\n    \n    primes_count_6\
    \ = count(primes)\n    \n    primes_count_7 = count(primes)\n    \n    primes_count_8\
    \ = count(primes)\n    \n    primes_count_9 = count(primes)\n    \n    primes_count_10\
    \ = count(primes)\n    \n    primes_count_11 = count(primes)\n    \n    primes_count_12\
    \ = count(primes)\n    \n    primes_count_13 = count(primes)\n    \n    primes_count_14\
    \ = count(primes)\n    \n    primes_count_15 = count(primes)\n    \n    primes_count_16\
    \ = count(primes)\n    \n    primes_count_17 = count(primes)\n    \n    primes_count_18\
    \ = count(primes)\n    \n    primes_count_19 = count(primes)\n    \n    primes_count_20\
    \ = count(primes)\n    \n    primes_count_21 = count(primes)\n    \n    primes_count_22\
    \ = count(primes)\n    \n    primes_count_23 = count(primes)\n    \n    primes_count_24\
    \ = count(primes)\n    \n    primes_count_25 = count(primes)\n    \n    primes_count_26\
    \ = count(primes)\n    \n    primes_count_27 = count(primes)\n    \n    primes_count_28\
    \ = count(primes)\n    \n    primes_count_29 = count(primes)\n    \n    primes_count_30\
    \ = count(primes)\n    \n    primes_count_31 = count(primes)\n    \n    primes_count_32\
    \ = count(primes)\n    \n    primes_count_33 = count(primes)\n    \n    primes_count_34\
    \ = count(primes)\n    \n    primes_count_35 = count(primes)\n    \n    primes_count_36\
    \ = count(primes)\n    \n    primes_count_37 = count(primes)\n    \n    primes_count_38\
    \ = count(primes)\n    \n    primes_count_39 = count(primes)\n    \n    primes_count_40\
    \ = count(primes)\n    \n    primes_count_41 = count(primes)\n    \n    primes_count_42\
    \ = count(primes)\n    \n    primes_count_43 = count(primes)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpft_xk5nn.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpft_xk5nn.jl:1\n\
    in expression starting at /tmp/tmpft_xk5nn.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(100)\n    \n    prime_numbers_set = Set(prime_numbers)\n    \n    prime_numbers_set.remove(a)\n\
    \    \n    if prime_numbers_set.isEmpty\n        true\n    else\n        false\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1zpgznh_.jl:23\nin expression starting at\
    \ /tmp/tmp1zpgznh_.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<text>\nExercise\n\
    Write a function that returns true if the given number is the multiplication of\
    \ 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphuvf8v5q.jl:16\nin expression starting at\
    \ /tmp/tmphuvf8v5q.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxzqnlzmy.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxzqnlzmy.jl:1\n\
    in expression starting at /tmp/tmpxzqnlzmy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if is_multiply_prime_helper(a,\
    \ 3, 100) == true\n    else false\nend\n\"\"\"\n    Write a function that returns\
    \ true if the given number is the multiplication of 5 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5 * 7\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnuzj8bnc.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnuzj8bnc.jl:1\n\
    in expression starting at /tmp/tmpnuzj8bnc.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    \n    primes = primes(a)\n    \n    for p in primes\n\
    \        if p*p > a\n            return false\n    end\n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is a prime\
    \ number and false otherwise.\nKnowing that (a) is less then 100. \nExample: \n\
    >>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(50)\nfalse\n50 = 2 * 3 *\
    \ 7\n>>> is_prime(100)\ntrue\n100 = 2 * 3 * 7\n>>> is_prime(200)\nfalse\n200 =\
    \ 2 * 3 * 7\n>>> is_prime(300)\ntrue\n300 = 2 * 3 * 7\n>>> is_prime(400)\nfalse\n\
    400 = 2 * 3 * 7\n>>> is_prime(500)\ntrue\n500 = 2 * 3 * 7\n>>> is_prime(600)\n\
    false\n600 = 2 * 3 * 7\n>>> is_prime(700)\ntrue\n700 = 2 * 3 * 7\n>>> is_prime(800)\n\
    false\n800 = 2 * 3 * 7\n>>> is_prime(900)\ntrue\n900 = 2 * 3 * 7\n>>> is_prime(1000)\n\
    true\n1000 = 2 * 3 * 7\n>>> is_prime(1100)\nfalse\n1100 = 2 * 3 * 7\n>>> is_prime(1200)\n\
    true\n1200 = 2 * 3 * 7\n>>> is_prime(1300)\nfalse\n1300 = 2 * 3 * 7\n>>> is_prime(1400)\n\
    true\n1400 = 2 * 3 * 7\n>>> is_prime(1500)\nfalse\n1500 = 2 * 3 * 7\n>>> is_prime(1600)\n\
    true\n1600 = 2 * 3 * 7\n>>> is_prime(1700)\nfalse\n1700 = 2 * 3 * 7\n>>> is_prime(1800)\n\
    true\n1800 = 2 * 3 * 7\n>>> is_prime(1900)\nfalse\n1900 = 2 * 3 * 7\n>>> is_prime(2100)\n\
    true\n2100 = 2 * 3 * 7\n>>> is_prime(2200)\nfalse\n2200 = 2 * 3 * 7\n>>> is_prime(2300)\n\
    true\n2300 = 2 * 3 * 7\n>>> is_prime(2400)\nfalse\n2400 = 2 * 3 * 7\n>>> is_prime(2500)\n\
    true\n2500 = 2 * 3 * 7\n>>> is_prime(2600)\nfalse\n2600 = 2 * 3 * 7\n>>> is_prime(2700)\n\
    true\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprdnf6vqz.jl:21\nin expression starting at\
    \ /tmp/tmprdnf6vqz.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    \n    primes = primes_list(100)\n    \n    for i in\
    \ primes\n        if a % i == 0\n            return false\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n</cell>\n<text>\n\
    Exercise\nWrite a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6a3us_9e.jl:21\nin expression starting at\
    \ /tmp/tmp6a3us_9e.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    primes\
    \ = primes_list(100)\n    \n    primes_set = Set(primes)\n    \n    primes_set\
    \ = primes_set - Set(primes_list(a % primes_set))\n    \n    return primes_set\
    \ == Set(primes)\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n \
    \   true\n    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp453okbvv.jl:19\nin expression starting at\
    \ /tmp/tmp453okbvv.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    \n    primes = primes(a)\n    \n    for p in primes\n\
    \        if p*p > a\n            return false\n        end\n    end\n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\n@assert is_multiply_prime(30)\
    \ == true\n@assert is_multiply_prime(31) == false\n@assert is_multiply_prime(32)\
    \ == false\n@assert is_multiply_prime(33) == true\n@assert is_multiply_prime(34)\
    \ == false\n@assert is_multiply_prime(35) == true\n@assert is_multiply_prime(36)\
    \ == false\n@assert is_multiply_prime(37) == true\n@assert is_multiply_prime(38)\
    \ == false\n@assert is_multiply_prime(39) == true\n@assert is_multiply_prime(40)\
    \ == false\n@assert is_multiply_prime(41) == true\n@assert is_multiply_prime(42)\
    \ == false\n@assert is_multiply_prime(43) == true\n@assert is_multiply_prime(44)\
    \ == false\n@assert is_multiply_prime(45) == true\n@assert is_multiply_prime(46)\
    \ == false\n@assert is_multiply_prime(47) == true\n@assert is_multiply_prime(48)\
    \ == false\n@assert is_multiply_prime(49) == true\n@assert is_multiply_prime(50)\
    \ == false\n@assert is_multiply_prime(51) == true\n@assert is_multiply_prime(52)\
    \ == false\n@assert is_multiply_prime(53) == true\n@assert is_multiply_prime(54)\
    \ == false\n@assert is_multiply_prime(55) == true\n@assert is_multiply_prime(56)\
    \ == false\n@assert is_multiply_prime(57) == true\n@assert is_multiply_prime(58)\
    \ == false\n@assert is_multiply_prime(59) == true\n@assert is_multiply_prime(60)\
    \ == false\n@assert is_multiply_prime(61) == true\n@assert is_multiply_prime(62)\
    \ == false\n@assert is_multiply_prime(63) == true\n@assert is_multiply_prime(64)\
    \ == false\n@assert is_multiply_prime(65) == true\n@assert is_multiply_prime(66)\
    \ == false\n@assert is_multiply_prime(67) == true\n@assert is_multiply_prime(68)\
    \ == false\n@assert is_multiply_prime(69) == true\n@assert is_multiply_prime(70)\
    \ == false\n@assert is_multiply_prime(71\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxj7j3ejt.jl:22\nin expression starting at\
    \ /tmp/tmpxj7j3ejt.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a\
    \ < 100\n        return false\n    \n    prime_numbers = prime_numbers(a)\n  \
    \  \n    for num in prime_numbers\n        if a % num == 0\n            return\
    \ false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_multiply_prime(30)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ true if the given number is a prime number and false otherwise.\nKnowing that\
    \ (a) is less then 100. \nExample: \n>>> is_prime(30)\ntrue\n30 = 3 * 7 * 11\n\
    >>> is_prime(100)\nfalse\n>>> is_prime(10)\ntrue\n>>> is_prime(11)\nfalse\n>>>\
    \ is_prime(15)\ntrue\n>>> is_prime(17)\nfalse\n>>> is_prime(19)\ntrue\n>>> is_prime(21)\n\
    false\n>>> is_prime(23)\ntrue\n>>> is_prime(29)\ntrue\n>>> is_prime(30)\ntrue\n\
    >>> is_prime(33)\nfalse\n>>> is_prime(37)\ntrue\n>>> is_prime(39)\nfalse\n>>>\
    \ is_prime(41)\ntrue\n>>> is_prime(43)\nfalse\n>>> is_prime(47)\ntrue\n>>> is_prime(49)\n\
    false\n>>> is_prime(51)\ntrue\n>>> is_prime(55)\nfalse\n>>> is_prime(57)\ntrue\n\
    >>> is_prime(59)\nfalse\n>>> is_prime(61)\ntrue\n>>> is_prime(63)\nfalse\n>>>\
    \ is_prime(67)\ntrue\n>>> is_prime(69)\nfalse\n>>> is_prime(71)\ntrue\n>>> is_prime(73)\n\
    false\n>>> is_prime(79)\ntrue\n>>> is_prime(81)\nfalse\n>>> is_prime(83)\ntrue\n\
    >>> is_prime(89)\nfalse\n>>> is_prime(91)\ntrue\n>>> is_prime(93)\nfalse\n>>>\
    \ is_prime(97)\ntrue\n>>> is_prime(99)\nfalse\n>>> is_prime(101)\ntrue\n>>> is_prime(103)\n\
    false\n>>> is_prime(107)\ntrue\n>>> is_prime(109)\nfalse\n>>> is_prime(111)\n\
    true\n>>> is_prime(113)\nfalse\n>>> is_prime(117)\ntrue\n>>> is_prime(121)\nfalse\n\
    >>> is_prime(129)\ntrue\n>>> is_prime(131)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp200cx5w1.jl:22\nin expression starting at\
    \ /tmp/tmp200cx5w1.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    \n    primes = primes_list(100)\n    \n    for i in\
    \ primes\n        if a % i == 0\n            return false\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns true if the given number is a prime\
    \ number and false otherwise.\nKnowing that (a) is less then 100. \nExample: \n\
    >>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 *\
    \ 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 *\
    \ 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 =\
    \ 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = \nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyad0bvpj.jl:21\nin expression starting at\
    \ /tmp/tmpyad0bvpj.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    \n    primes = prime_numbers(a)\n    \n    for p in\
    \ primes\n        if p*p > a\n            return false\n        \n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns true if the given number is\
    \ the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n \
    \   true\n    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsv2dvyf7.jl:21\nin expression starting at\
    \ /tmp/tmpsv2dvyf7.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a\
    \ < 100\n        return false\n    \n    primes = prime_numbers(a)\n    \n   \
    \ for p in primes\n        if p > 100\n            return false\n        \n  \
    \      if p == a \n            return true\n        \n        if p % 3 == 0\n\
    \            return false\n        \n        if p % 5 == 0\n            return\
    \ false\n        \n        if p % 7 == 0\n            return false\n        \n\
    \        if p % 11 == 0\n            return false\n        \n        if p % 13\
    \ == 0\n            return false\n        \n        if p % 17 == 0\n         \
    \   return false\n        \n        if p % 19 == 0\n            return false\n\
    \        \n        if p % 23 == 0\n            return false\n        \n      \
    \  if p % 29 == 0\n            return false\n        \n        if p % 31 == 0\n\
    \            return false\n        \n        if p % 37 == 0\n            return\
    \ false\n        \n        if p % 41 == 0\n            return false\n        \n\
    \        if p % 43 == 0\n            return false\n        \n        if p % 47\
    \ == 0\n            return false\n        \n        if p % 53 == 0\n         \
    \   return false\n        \n        if p % 59 == 0\n            return false\n\
    \        \n        if p % 61 == 0\n            return false\n        \n      \
    \  if p % 67 == 0\n            return false\n        \n        if p % 71 == 0\n\
    \            return false\n        \n        if p % 73 == 0\n            return\
    \ false\n        \n        if p % 79 == 0\n            return false\n        \n\
    \        if p % 83 == 0\n            return false\n        \n        if p % 89\
    \ == 0\n            return false\n        \n        if p % 97 == 0\n         \
    \   return false\n        \n        if p % 101 == 0\n            return false\n\
    \        \n        if p % 103 == 0\n            return false\n        \n     \
    \   if p % 107 == 0\n            return false\n        \n        if p % 109 ==\
    \ 0\n            return false\n        \n        if p % 111 == 0\n           \
    \ return false\n        \n        if p % 113 == 0\n            return false\n\
    \        \n        if p % 117 == 0\n            return false\n        \n     \
    \   if p % 121 == 0\n            return false\n        \n        if p % 123 ==\
    \ 0\n            return false\n        \n        if p % 127 == 0\n           \
    \ return false\n        \n        if p % 131 == 0\n            return false\n\
    \        \n        if p % 133 == 0\n            return false\n        \n     \
    \   if p % 137 == 0\n            return false\n        \n        if p % 139 ==\
    \ 0\n            return false\n        \n        if p % 143 == 0\n           \
    \ return false\n        \n        if p % 147 == 0\n            return false\n\
    \        \n        if p % 151 == 0\n            return false\n        \n     \
    \   if p % 153 == \nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy3y1zvzw.jl:1\nin expression starting at /tmp/tmpy3y1zvzw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a\
    \ < 100\n        return false\n    \n    primes = primes_list(100)\n    \n   \
    \ for p in primes\n        if p == a\n            return true\n    end\n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(100)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is a prime\
    \ number and false otherwise.\nKnowing that (a) is less then 100. \nExample: \n\
    >>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(100)\nfalse\n>>> is_prime(200)\n\
    true\n>>> is_prime(300)\nfalse\n>>> is_prime(400)\ntrue\n>>> is_prime(500)\nfalse\n\
    >>> is_prime(600)\ntrue\n>>> is_prime(700)\nfalse\n>>> is_prime(800)\ntrue\n>>>\
    \ is_prime(900)\nfalse\n>>> is_prime(1000)\ntrue\n>>> is_prime(1100)\ntrue\n>>>\
    \ is_prime(1200)\ntrue\n>>> is_prime(1300)\ntrue\n>>> is_prime(1400)\ntrue\n>>>\
    \ is_prime(1500)\ntrue\n>>> is_prime(1600)\ntrue\n>>> is_prime(1700)\ntrue\n>>>\
    \ is_prime(1800)\ntrue\n>>> is_prime(1900)\ntrue\n>>> is_prime(2000)\ntrue\n>>>\
    \ is_prime(2100)\ntrue\n>>> is_prime(2200)\ntrue\n>>> is_prime(2300)\ntrue\n>>>\
    \ is_prime(2400)\ntrue\n>>> is_prime(2500)\ntrue\n>>> is_prime(2600)\ntrue\n>>>\
    \ is_prime(2700)\ntrue\n>>> is_prime(2800)\ntrue\n>>> is_prime(2900)\ntrue\n>>>\
    \ is_prime(3100)\ntrue\n>>> is_prime(3200) \ntrue\n>>> is_prime(3300) \ntrue\n\
    >>> is_prime(3400)\ntrue\n>>> is_prime(3500)\ntrue\n>>> is_prime(3600)\ntrue\n\
    >>> is_prime(3700)\ntrue\n>>> is_prime(3800)\ntrue\n>>> is_prime(3900)\ntrue\n\
    >>> is_prime(4100)\ntrue\n>>> is_prime(4200)\ntrue\n>>> is_prime(4300)\ntrue\n\
    >>> is_prime(4400)\ntrue\n>>> is_prime(4500)\ntrue\n>>> is_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8539yahm.jl:22\nin expression starting at\
    \ /tmp/tmp8539yahm.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = prime_numbers(a)\n    \n    for prime in prime_numbers\n        if a % prime\
    \ == 0\n            return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns true if the given number is a prime number and false otherwise.\nKnowing\
    \ that (a) is less then 100. \nExample: \n>>> is_prime(30)\ntrue\n30 = 2 * 3 *\
    \ 5\n>>> is_prime(100)\nfalse\n>>> is_prime(10)\ntrue\n>>> is_prime(11)\nfalse\n\
    >>> is_prime(15)\ntrue\n>>> is_prime(17)\nfalse\n>>> is_prime(19)\ntrue\n>>> is_prime(21)\n\
    false\n>>> is_prime(23)\ntrue\n>>> is_prime(29)\nfalse\n>>> is_prime(33)\ntrue\n\
    >>> is_prime(37)\nfalse\n>>> is_prime(39)\ntrue\n>>> is_prime(47)\nfalse\n>>>\
    \ is_prime(49)\ntrue\n>>> is_prime(59)\nfalse\n>>> is_prime(61)\ntrue\n>>> is_prime(67)\n\
    false\n>>> is_prime(71)\ntrue\n>>> is_prime(73)\nfalse\n>>> is_prime(79)\ntrue\n\
    >>> is_prime(83)\nfalse\n>>> is_prime(89)\ntrue\n>>> is_prime(97)\nfalse\n>>>\
    \ is_prime(101)\ntrue\n>>> is_prime(103)\nfalse\n>>> is_prime(107)\ntrue\n>>>\
    \ is_prime(109)\nfalse\n>>> is_prime(113)\ntrue\n>>> is_prime(127)\nfalse\n>>>\
    \ is_prime(131)\ntrue\n>>> is_prime(137)\nfalse\n>>> is_prime(139)\ntrue\n>>>\
    \ is_prime(149)\nfalse\n>>> is_prime(151)\ntrue\n>>> is_prime(157)\nfalse\n>>>\
    \ is_prime(159)\ntrue\n>>> is_prime(163)\nfalse\n>>> is_prime(167)\ntrue\n>>>\
    \ is_prime(173)\nfalse\n>>> is_prime(179)\ntrue\n>>> is_prime(181)\nfalse\n>>>\
    \ is_prime(191)\ntrue\n>>> is_prime(193)\nfalse\n>>> is_prime(197)\ntrue\n>>>\
    \ is_prime(199)\nfalse\n>>> is_prime(20\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppbd2ofgz.jl:18\nin expression starting at\
    \ /tmp/tmppbd2ofgz.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    else \n        primes = primes(a)\n        for i in\
    \ primes\n            if i%3 == 0\n                return false\n        return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\nKnowing that (a) is less then 100. \n\
    Example: \n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(100)\nfalse\n\
    >>> is_prime(10)\ntrue\n>>> is_prime(20)\nfalse\n>>> is_prime(30)\ntrue\n>>> is_prime(100)\n\
    false\n>>> is_prime(10)\ntrue\n>>> is_prime(20)\nfalse\n>>> is_prime(30)\ntrue\n\
    >>> is_prime(100)\nfalse\n>>> is_prime(10)\ntrue\n>>> is_prime(20)\nfalse\n>>>\
    \ is_prime(30)\ntrue\n>>> is_prime(100)\nfalse\n>>> is_prime(10)\ntrue\n>>> is_prime(20)\n\
    false\n>>> is_prime(30)\ntrue\n>>> is_prime(100)\nfalse\n>>> is_prime(10)\ntrue\n\
    >>> is_prime(20)\nfalse\n>>> is_prime(30)\ntrue\n>>> is_prime(100)\nfalse\n>>>\
    \ is_prime(10)\ntrue\n>>> is_prime(20)\nfalse\n>>> is_prime(30)\ntrue\n>>> is_prime(100)\n\
    false\n>>> is_prime(10)\ntrue\n>>> is_prime(20)\nfalse\n>>> is_prime(30)\ntrue\n\
    >>> is_prime(100)\nfalse\n>>> is_prime(10)\ntrue\n>>> is_prime(20)\nfalse\n>>>\
    \ is_prime(30)\ntrue\n>>> is_prime(100)\nfalse\n>>> is_prime(10)\ntrue\n>>> is_prime(20)\n\
    false\n>>> is_prime(30)\ntrue\n>>> is_prime(100)\nfalse\n>>> is_prime(10)\ntrue\n\
    >>> is_prime(20)\nfalse\n>>> is_prime(30)\ntrue\n>>> is_prime(100)\nfalse\n>>>\
    \ is_prime(10)\ntrue\n>>> is_prime(20)\nfalse\n>>> is_prime(30)\ntrue\n>>> is_prime(100)\n\
    false\n>>> is_prime(10)\ntrue\n>>> is_prime(20)\nfalse\n>>> is_prime(30)\ntrue\n\
    >>> is_prime(100)\nfalse\n>>> is_prime(10)\ntrue\n>>> is_prime(20)\nusing Test\n\
    \n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7tb_l9j9.jl:19\nin expression starting at\
    \ /tmp/tmp7tb_l9j9.jl:19\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if is_multiply_prime_helper(a)\
    \ == true\n    else \n        false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpm5lnm9lz.jl:20\n  Test threw
    exception\n  Expression: candidate(5) == false\n  UndefVarError: is_multiply_prime_helper
    not defined\n  Stacktrace:\n   [1] is_multiply_prime(a::Int64)\n     @ Main /tmp/tmpm5lnm9lz.jl:10\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm5lnm9lz.jl:20 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm5lnm9lz.jl:19\ntest set: Error
    During Test at /tmp/tmpm5lnm9lz.jl:21\n  Test threw exception\n  Expression: candidate(30)
    == true\n  UndefVarError: is_multiply_prime_helper not defined\n  Stacktrace:\n   [1]
    is_multiply_prime(a::Int64)\n     @ Main /tmp/tmpm5lnm9lz.jl:10\n   [2] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm5lnm9lz.jl:21 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm5lnm9lz.jl:19\ntest set: Error
    During Test at /tmp/tmpm5lnm9lz.jl:22\n  Test threw exception\n  Expression: candidate(8)
    == true\n  UndefVarError: is_multiply_prime_helper not defined\n  Stacktrace:\n   [1]
    is_multiply_prime(a::Int64)\n     @ Main /tmp/tmpm5lnm9lz.jl:10\n   [2] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm5lnm9lz.jl:22 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm5lnm9lz.jl:19\ntest set: Error
    During Test at /tmp/tmpm5lnm9lz.jl:23\n  Test threw exception\n  Expression: candidate(10)
    == false\n  UndefVarError: is_multiply_prime_helper not defined\n  Stacktrace:\n   [1]
    is_multiply_prime(a::Int64'
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97]\n\
    \    \n    for i in prime_numbers\n        if a % i == 0\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multi\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj0zrrvm0.jl:18\nin expression starting at\
    \ /tmp/tmpj0zrrvm0.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxzqnlzmy.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxzqnlzmy.jl:1\n\
    in expression starting at /tmp/tmpxzqnlzmy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprgsqommb.jl:16\nin expression starting at\
    \ /tmp/tmprgsqommb.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if is_multiply_prime_helper(a,\
    \ 3, 100) == true\n    else \n        return false\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmparqf7xji.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmparqf7xji.jl:1\n\
    in expression starting at /tmp/tmparqf7xji.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxzqnlzmy.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxzqnlzmy.jl:1\n\
    in expression starting at /tmp/tmpxzqnlzmy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxzqnlzmy.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxzqnlzmy.jl:1\n\
    in expression starting at /tmp/tmpxzqnlzmy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps7mox9g0.jl:16\nin expression starting at\
    \ /tmp/tmps7mox9g0.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwxz7yrw2.jl:16\nin expression starting at\
    \ /tmp/tmpwxz7yrw2.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    \n    primes = prime_numbers(a)\n    \n    for p in\
    \ primes\n        if p == 3 || p == 5\n            return true\n    end\n    return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns true if the given number is\
    \ the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n \
    \   true\n    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc2okg_z1.jl:21\nin expression starting at\
    \ /tmp/tmpc2okg_z1.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = prime_numbers(a)\n    \n    for p in prime_numbers\n        if p * p > a\n\
    \            return false\n        end\n    end\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31)\
    \ == false\n</cell>\n<text>\nExercise 2\nWrite a function that returns true if\
    \ the given number is a prime number and false otherwise.\nHint: use the function\
    \ is_prime(a::Int64)::Bool\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgxfs2vc2.jl:20\nin expression starting at\
    \ /tmp/tmpgxfs2vc2.jl:20\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if is_multiply_prime_helper(a,\
    \ 3, 100) == true\n    else \n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\
    \t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpbpe6yzda.jl:20\n  Test threw
    exception\n  Expression: candidate(5) == false\n  UndefVarError: is_multiply_prime_helper
    not defined\n  Stacktrace:\n   [1] is_multiply_prime(a::Int64)\n     @ Main /tmp/tmpbpe6yzda.jl:10\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbpe6yzda.jl:20 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbpe6yzda.jl:19\ntest set: Error
    During Test at /tmp/tmpbpe6yzda.jl:21\n  Test threw exception\n  Expression: candidate(30)
    == true\n  UndefVarError: is_multiply_prime_helper not defined\n  Stacktrace:\n   [1]
    is_multiply_prime(a::Int64)\n     @ Main /tmp/tmpbpe6yzda.jl:10\n   [2] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbpe6yzda.jl:21 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbpe6yzda.jl:19\ntest set: Error
    During Test at /tmp/tmpbpe6yzda.jl:22\n  Test threw exception\n  Expression: candidate(8)
    == true\n  UndefVarError: is_multiply_prime_helper not defined\n  Stacktrace:\n   [1]
    is_multiply_prime(a::Int64)\n     @ Main /tmp/tmpbpe6yzda.jl:10\n   [2] macro
    expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpbpe6yzda.jl:22 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbpe6yzda.jl:19\ntest set: Error
    During Test at /tmp/tmpbpe6yzda.jl:23\n  Test threw exception\n  Expression: candidate(10)
    == false\n  UndefVarError: is_multiply_prime_helper not defined\n  Stacktrace:\n   [1]
    is_multiply_prime(a::Int64'
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a\
    \ < 100\n        true\n    else\n        false\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpy5v3m6i3.jl:19

    '
  stdout: "test set: Test Failed at /tmp/tmpy5v3m6i3.jl:22\n  Expression: candidate(5)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy5v3m6i3.jl:22 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy5v3m6i3.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpy5v3m6i3.jl:25\n  Expression: candidate(10) == false\n   Evaluated:\
    \ true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy5v3m6i3.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy5v3m6i3.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpy5v3m6i3.jl:26\n  Expression: candidate(125) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy5v3m6i3.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy5v3m6i3.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpy5v3m6i3.jl:27\n  Expression: candidate(105) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpy5v3m6i3.jl:27 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpy5v3m6i3.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpy5v3m6i3.jl:31\n  Expression: candidate(1001) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] m"
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if is_prime(a)\
    \ == false \n        return false\n    else \n        if is_multiply_prime(a)\
    \ == true \n            return true\n        else \n            return is_multiply_prime(a+2)\n\
    end\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns true if the given number is a prime\
    \ number and false otherwise.\n    Example:\n    >>> is_prime(30)\n    true\n\
    \    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp69ew2fmz.jl:18\nin expression starting at\
    \ /tmp/tmp69ew2fmz.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if is_prime(a)\
    \ == false \n        return false\n    else \n        prime_numbers = prime_numbers(a)\n\
    \        prime_numbers_count = length(prime_numbers)\n        if prime_numbers_count\
    \ > 1 \n            return false\n        else \n            prime_numbers_count\
    \ = length(prime_numbers)\n            if prime_numbers_count == 1 \n        \
    \        return true\n            else \n                prime_numbers_count =\
    \ length(prime_numbers)\n                if prime_numbers_count == 2 \n      \
    \              return true\n                else \n                    prime_numbers_count\
    \ = length(prime_numbers)\n                    if prime_numbers_count == 3 \n\
    \                        return true\n                    else \n            \
    \            prime_numbers_count = length(prime_numbers)\n                   \
    \     if prime_numbers_count == 4 \n                            return true\n\
    \                        else \n                            prime_numbers_count\
    \ = length(prime_numbers)\n                            if prime_numbers_count\
    \ == 5 \n                                return true\n                       \
    \     else \n                                prime_numbers_count = length(prime_numbers)\n\
    \                                if prime_numbers_count == 6 \n              \
    \                      return true\n                                else \n  \
    \                                  prime_numbers_count = length(prime_numbers)\n\
    \                                    if prime_numbers_count == 7 \n          \
    \                              return true\n                                 \
    \   else \n                                        prime_numbers_count = length(prime_numbers)\n\
    \                                        if prime_numbers_count == 8 \n      \
    \                                      return true\n                         \
    \               else \n                                            prime_numbers_count\
    \ = length(prime_numbers)\n                                            if prime_numbers_count\
    \ == 9 \n                                                return true\n       \
    \                                     else \n                                \
    \                prime_numbers_count = length(prime_numbers)\n               \
    \                                 if prime_numbers_count == 10 \n            \
    \                                        return true\n                       \
    \                         else \n                                            \
    \        prime_numbers_count = length(prime_numbers)\n                       \
    \                             if prime_numbers_count == 11 \n                \
    \                                        return true\n                       \
    \                             else \n                                        \
    \                prime_numbers_count = length(prime_numbers)\n               \
    \                                         if prime_numbers_count == 12 \n    \
    \                                                        return true\n       \
    \                                                 else \n                    \
    \                                        prime_numbers_count = length(prime_numbers)\n\
    \                                                                if prime_numbers_count\
    \ == 13 \n                                                                   \
    \ return true\n                                                              \
    \  else \n                                                                   \
    \ prime_numbers_count = length(prime_numbers)\n                              \
    \                                          if prime_numbers_count == 14 \n   \
    \                                                                         return\
    \ true\n                                                                     \
    \   else \n                                                                  \
    \          prime_numbers_count = length(prime_numbers)\n                     \
    \                                                           if prime_numbers_count\
    \ == 15 \n                                                                   \
    \                 return true\n                                              \
    \                                  else \n                                   \
    \                                                 prime_numbers_count = length(prime_numbers)\n\
    \                                                                            \
    \            if prime_numbers_count == 16 \n                                 \
    \                                                           return true\n    \
    \                                                                            \
    \        else \n                                                             \
    \                               prime_numbers_count = length(prime_numbers)\n\
    \                                                                            \
    \                    if prime_numbers_count == \nusing Test\n\n@testset begin\n\
    \ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu3gxryq3.jl:1\nin expression starting at /tmp/tmpu3gxryq3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a\
    \ < 100\n        return false\n    \n    primes = prime_numbers(a)\n    \n   \
    \ for i in primes\n        if a % i == 0\n            return false\n    \n   \
    \ return true\nend\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(50)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(200)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(300)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(400)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(500)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(600)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(700)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(800)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(900)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(1000)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(1100)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(1200)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(1300)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(1400)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(1500)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(1600)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(1700)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(1800)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(1900)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(2100)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(2200)\n</cell>\n<code language=julia-1.3>\n\
    is_multiply_prime(2300)\n</cell>\n<code language=julia-1.3>\nis_multiply_prime(2400)\n\
    </cell>\n<code language=julia-1.3>\nis_multiply_prime(2500)\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf6ew_q_h.jl:22\nin expression starting at\
    \ /tmp/tmpf6ew_q_h.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    primes\
    \ = primes(a)\n    \n    for i in primes\n        if a % i == 0\n            return\
    \ false\n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a power of 2 and\nfalse otherwise.\nKnowing that (a) is less then 100. \n\
    Example: \n>>> is_power_of_2(30)\ntrue\n30 = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2\
    \ * 2 * 2 * 2 * 2 * 2 * \nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi6o2dbnj.jl:18\nin expression starting at\
    \ /tmp/tmpi6o2dbnj.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxzqnlzmy.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxzqnlzmy.jl:1\n\
    in expression starting at /tmp/tmpxzqnlzmy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if is_prime(a)\
    \ and is_prime(a+2) and is_prime(a+3) and is_prime(a+5):\n        return true\n\
    \    return false\nend\n</cell>\n<code language=julia-1.4>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.4>\n@time is_multiply_prime(100)\n</cell>\n<text>\n\
    Exercise\nWrite a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"is_prime\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpu5g206wo.jl:10\nin expression starting at /tmp/tmpu5g206wo.jl:10\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if is_prime(a)\
    \ == false \n    then return false \n    else if is_prime(a) == false \n    then\
    \ return false \n    else if is_prime(a) == false \n    then return false \n \
    \   else if is_prime(a) == false \n    then return false \n    else if is_prime(a)\
    \ == false \n    then return false \n    else if is_prime(a) == false \n    then\
    \ return false \n    else if is_prime(a) == false \n    then return false \n \
    \   else if is_prime(a) == false \n    then return false \n    else if is_prime(a)\
    \ == false \n    then return false \n    else if is_prime(a) == false \n    then\
    \ return false \n    else if is_prime(a) == false \n    then return false \n \
    \   else if is_prime(a) == false \n    then return false \n    else if is_prime(a)\
    \ == false \n    then return false \n    else if is_prime(a) == false \n    then\
    \ return false \n    else if is_prime(a) == false \n    then return false \n \
    \   else if is_prime(a) == false \n    then return false \n    else if is_prime(a)\
    \ == false \n    then return false \n    else if is_prime(a) == false \n    then\
    \ return false \n    else if is_prime(a) == false \n    then return false \n \
    \   else if is_prime(a) == false \n    then return false \n    else if is_prime(a)\
    \ == false \n    then return false \n    else if is_prime(a) == false \n    then\
    \ return false \n    else if is_prime(a) == false \n    then return false \n \
    \   else if is_prime(a) == false \n    then return false \n    else if is_prime(a)\
    \ == false \n    then return false \n    else if is_prime(a) == false \n    then\
    \ return false \n    else if is_prime(a) == false \n    then return false \n \
    \   else if is_prime(a) == false \n    then return false \n    else if is_prime(a)\
    \ == false \n    then return false \n    else if is_prime(a) == false \n    then\
    \ return false \n    else if is_prime(a) == false \n    then return false \n \
    \   else if is_prime(a) == false \n    then return false \n    else if is_prime(a)\
    \ == false \n    then return false \n    else if is_prime(a) == false \n    then\
    \ return false \n    else if is_prime(a) == false \n    then return false \n \
    \   else if is_prime(a) == false \n    then return false \n    else if is_prime(a)\
    \ == false \n    then \nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"return\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8s4cqehs.jl:11\nin expression starting at /tmp/tmp8s4cqehs.jl:11\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a\
    \ < 100\n        return false\n    \n    primes = primes_list(100)\n    \n   \
    \ for i in primes\n        if a % i == 0\n            return false\n    \n   \
    \ return true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns true if the given number is a prime\
    \ number and false otherwise.\nKnowing that (a) is less then 100. \nExample: \n\
    >>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 *\
    \ 7\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 9\n>>> is_prime(30)\nfalse\n30 = 2\
    \ * 3 * 11\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 13\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 17\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 19\n>>> is_prime(30)\n\
    false\n30 = 2 * 3 * 23\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 29\n>>> is_prime(30)\n\
    false\n30 = 2 * 3 * 31\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 37\n>>> is_prime(30)\n\
    false\n30 = 2 * 3 * 41\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 43\n>>> is_prime(30)\n\
    false\n30 = 2 * 3 * 47\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 53\n>>> is_prime(30)\n\
    false\n30 = 2 * 3 * 59\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 61\n>>> is_prime(30)\n\
    false\n30 = 2 * 3 * 67\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 71\n>>> is_prime(30)\n\
    false\n30 = 2 * 3 * 73\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 79\n>>> is_prime(30)\n\
    false\n30 = 2 * 3 * 83\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 89\n>>> is_prime(30)\n\
    false\n30 = 2 * 3 * 93\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 97\n>>> is_prime(30)\n\
    false\n30 = 2 * 3 * 101\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 103\n>>> is_prime(30)\n\
    false\n30 = 2 * 3 * 107\n>>> \nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4lcwsgmp.jl:22\nin expression starting at\
    \ /tmp/tmp4lcwsgmp.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        false\n    else\n        true\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4wf71tu6.jl:16\nin expression starting at\
    \ /tmp/tmp4wf71tu6.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps7mox9g0.jl:16\nin expression starting at\
    \ /tmp/tmps7mox9g0.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    \n    primes = primes(a)\n    \n    for p in primes\n\
    \        if p*p > a\n            return false\n    \n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns true if the given number is a prime number\
    \ or false otherwise.\n    \n    Example:\n    >>> is_prime(30)\n    true\n  \
    \  30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq45f6kbw.jl:21\nin expression starting at\
    \ /tmp/tmpq45f6kbw.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxzqnlzmy.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxzqnlzmy.jl:1\n\
    in expression starting at /tmp/tmpxzqnlzmy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    else \n        for i in 2..a\n            if a % i\
    \ == 0\n                return false\n        return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns true if the given number is the multiplication of 3\
    \ prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\
    \ \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t\
    @test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn1pamfq7.jl:18\nin expression starting at\
    \ /tmp/tmpn1pamfq7.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(a)\n    \n    for i in prime_numbers\n        if a % i == 0\n     \
    \       return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpptpxd0ei.jl:18\nin expression starting at\
    \ /tmp/tmpptpxd0ei.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp01ofbid0.jl:16\nin expression starting at\
    \ /tmp/tmp01ofbid0.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(50) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n \
    \   true\n    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0y5wmwc4.jl:16\nin expression starting at\
    \ /tmp/tmp0y5wmwc4.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    \n    primes = primes_upto(a)\n    \n    for prime\
    \ in primes\n        if a % prime == 0\n            return false\n    \n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise\nWrite a function that returns true if the given number\
    \ is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n \
    \   true\n    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe106_hqi.jl:21\nin expression starting at\
    \ /tmp/tmpe106_hqi.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwxz7yrw2.jl:16\nin expression starting at\
    \ /tmp/tmpwxz7yrw2.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(a)\n    \n    for p in prime_numbers\n        if p*p > a\n        \
    \    return false\n        end\n    end\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(100000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(1000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(10000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nis_multiply_prime(10000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(1000000000000000000)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(100000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(10000000000000000000000000)\n\
    </\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiics8e3q.jl:20\nin expression starting at\
    \ /tmp/tmpiics8e3q.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    \n    primes = primes_list(100)\n    \n    for i in\
    \ primes\n        if a % i == 0\n            return false\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(100)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns true if the given number is a prime number and false\
    \ otherwise.\nKnowing that (a) is less then 100. \nExample: \n>>> is_prime(30)\n\
    true\n30 = 2 * 3 * 5\n>>> is_prime(100)\nfalse\n100 = 2 * 3 * 5\n>>> is_prime(200)\n\
    true\n200 = 2 * 3 * 5\n>>> is_prime(400)\nfalse\n400 = 2 * 3 * 5\n>>> is_prime(500)\n\
    true\n500 = 2 * 3 * 5\n>>> is_prime(600)\nfalse\n600 = 2 * 3 * 5\n>>> is_prime(700)\n\
    true\n700 = 2 * 3 * 5\n>>> is_prime(800)\nfalse\n800 = 2 * 3 * 5\n>>> is_prime(900)\n\
    true\n900 = 2 * 3 * 5\n>>> is_prime(1000)\nfalse\n1000 = 2 * 3 * 5\n>>> is_prime(1100)\n\
    true\n1100 = 2 * 3 * 5\n>>> is_prime(1200)\nfalse\n1200 = 2 * 3 * 5\n>>> is_prime(1300)\n\
    true\n1300 = 2 * 3 * 5\n>>> is_prime(1400)\nfalse\n1400 = 2 * 3 * 5\n>>> is_prime(1500)\n\
    true\n1500 = 2 * 3 * 5\n>>> is_prime(1600)\nfalse\n1600 = 2 * 3 * 5\n>>> is_prime(1700)\n\
    true\n1700 = 2 * 3 * 5\n>>> is_prime(1800)\nfalse\n1800 = 2 * 3 * 5\n>>> is_prime(1900)\n\
    true\n1900 = 2 * 3 * 5\n>>> is_prime(2100)\nfalse\n2100 = 2 * 3 * 5\n>>> is_prime(2200)\n\
    true\n2200 = 2 * 3 * 5\n>>> is_prime(2300)\nfalse\n2300 = 2 * 3 * 5\n>>> is_prime(2400)\n\
    true\n2400 = 2 * 3 * 5\n>>> is_prime(2500)\nfalse\n2500 = 2 * 3 * 5\n>>> is_prime(2600)\n\
    true\n2600 = 2 * 3 * 5\n>>> is_prime(2700)\nfalse\n2700 = 2 * 3 * 5\n>>> is_prime(2800)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxnxw755k.jl:21\nin expression starting at\
    \ /tmp/tmpxnxw755k.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if is_multiply_prime_helper(a,\
    \ 3, 100) == true\n    else return false\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmn0vdgu4.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmn0vdgu4.jl:1\n\
    in expression starting at /tmp/tmpmn0vdgu4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 5 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpxnv3_m1m.jl:18

    '
  stdout: "test set: Test Failed at /tmp/tmpxnv3_m1m.jl:21\n  Expression: candidate(5)\
    \ == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n \
    \  @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxnv3_m1m.jl:21 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxnv3_m1m.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxnv3_m1m.jl:24\n  Expression: candidate(10) == false\n   Evaluated:\
    \ true == false\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxnv3_m1m.jl:24 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxnv3_m1m.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxnv3_m1m.jl:25\n  Expression: candidate(125) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxnv3_m1m.jl:25 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxnv3_m1m.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxnv3_m1m.jl:26\n  Expression: candidate(105) == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpxnv3_m1m.jl:26 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpxnv3_m1m.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxnv3_m1m.jl:30\n  Expression: candidate(1001) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] m"
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t\
    @test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10)\
    \ == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\
    \t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891)\
    \ == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps7mox9g0.jl:16\nin expression starting at\
    \ /tmp/tmps7mox9g0.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is the multiplication of 3 prime numbers\n    and false\
    \ otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n\
    \    true\n    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqnkgndrh.jl:16\nin expression starting at\
    \ /tmp/tmpqnkgndrh.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @time is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns true if the given number is a prime number and false otherwise.\nKnowing\
    \ that (a) is less then 100. \nExample: \n>>> is_prime(30)\ntrue\n30 = 2 * 3 *\
    \ 5\n</text>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6dj0vwet.jl:16\nin expression starting at\
    \ /tmp/tmp6dj0vwet.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbuapttae.jl:16\nin expression starting at\
    \ /tmp/tmpbuapttae.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a\
    \ < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns true if the given number\
    \ is a perfect square (i.e. a number that is\n    equal to the sum of its positive\
    \ divisors excluding itself) and false otherwise.\n    Example:\n    >>> is_perfect_square(25)\n\
    \    true\n    25 = (1 + 2 + 3 + 5 + 7 + 11 + 13 + 17 + 19 + 23 + 29 + 31 + 37\
    \ + 41 + 43 + 47 + 53 + 59 + \n    61 + 67 + 71 + 73 + 79 + 83 + 89 + 97)\n  \
    \  \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t\
    @test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqbkixvdz.jl:17\nin expression starting at\
    \ /tmp/tmpqbkixvdz.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    primes\
    \ = primes_list(100)\n    \n    for p in primes\n        if p*p*p == a\n     \
    \       return true\n        end\n    end\n    return false\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_multiply_prime(30)\n\nusing Test\n\n@testset begin\n\
    \ncandidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy51nc1py.jl:20\nin expression starting at\
    \ /tmp/tmpy51nc1py.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a\
    \ < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n<text>\n\
    Exercise 7\nWrite a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0tzx07i8.jl:17\nin expression starting at\
    \ /tmp/tmp0tzx07i8.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a\
    \ < 100\n        return false\n    \n    primes = primes(a)\n    \n    for i in\
    \ primes\n        if a % i == 0\n            return false\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8njwmp5_.jl:22\nin expression starting at\
    \ /tmp/tmp8njwmp5_.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    primes\
    \ = primes_list(100)\n    \n    for i in primes\n        if a % i == 0\n     \
    \       return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns true if the given number is the multiplication of 3 prime numbers\n\
    \    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 * 5\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu3nunx8r.jl:19\nin expression starting at\
    \ /tmp/tmpu3nunx8r.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        return false\n    \n    prime_numbers = primes(a)\n    \n    for i in\
    \ prime_numbers\n        if a % i == 0\n            return false\n    \n    return\
    \ true\nend\n</cell>\n<code language=julia-1.5>\n@time is_multiply_prime(30)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\nKnowing that (a) is less then 100. \n\
    Example: \n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30\
    \ = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5338sla8.jl:21\nin expression starting at\
    \ /tmp/tmp5338sla8.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a\
    \ < 100\n        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.1>\n\
    is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ true if the given number is a prime number and false otherwise.\nKnowing that\
    \ (a) is less then 100. \nExample: \n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n\
    >>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 *\
    \ 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2\
    \ * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjdv9ztc3.jl:17\nin expression starting at\
    \ /tmp/tmpjdv9ztc3.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_multiply_prime(30) == true\n@assert is_multiply_prime(31) == false\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns true if the given number\
    \ is a prime number and false otherwise.\nKnowing that (a) is less then 100. \n\
    Example: \n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n30\
    \ = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(30)\ntrue\n30 = 2 * 3 * 5\n>>> is_prime(30)\nfalse\n\
    30 = 2 * 3 * 5\n>>> is_prime(\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppcm571db.jl:16\nin expression starting at\
    \ /tmp/tmppcm571db.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(100)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(200)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(300)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(400)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(500)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(600)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(700)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(800)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(900)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(1000)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(1200)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(1400)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(1500)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(1600)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(1700)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(1800)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(1900)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(2000)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(2100)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(2200)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(2300)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(2400)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(2500)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(2600)\n</cell>\n<code language=julia-1.0>\nis_multiply_prime(2700)\n\
    </cell>\n<code language=julia-1.0>\nis_multiply_prime(2800)\n</cell>\n<code language=julia-1.0>\n\
    is_multiply_prime(29\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpytz7yi64.jl:16\nin expression starting at\
    \ /tmp/tmpytz7yi64.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    if a\
    \ < 100\n        return false\n    \n    primes = primes(a)\n    \n    for i in\
    \ primes\n        if a % i == 0\n            return false\n    \n    return true\n\
    end\n</cell>\n<code language=julia-1.3>\n@time is_multiply_prime(30)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns true if the given number is\
    \ the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing\
    \ that (a) is less then 100. \n    Example:\n    >>> is_multiply_prime(30)\n \
    \   true\n    30 = 2 * 3 * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_ega_0cv.jl:22\nin expression starting at\
    \ /tmp/tmp_ega_0cv.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(100)\n    \n    for i in prime_numbers\n        if a % i == 0\n   \
    \         return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n\
    </cell>\n<code language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<code language=julia-1.5>\n\
    is_multiply_prime(30)\n</cell\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4rx51hol.jl:19\nin expression starting at\
    \ /tmp/tmp4rx51hol.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if a < 100\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\
    \t@test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo8a4brt6.jl:16\nin expression starting at\
    \ /tmp/tmpo8a4brt6.jl:16\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(a)\n    \n    for i in prime_numbers\n        if i%3 == 0\n       \
    \     return false\n        end\n    end\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_multiply_prime(30)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns true if the given number is the multiplication of 3\
    \ prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100.\
    \ \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 * 5\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t\
    @test(candidate(5) == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8)\
    \ == true)\n\t@test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\
    \t@test(candidate(105) == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729)\
    \ == false)\n\t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0vztsumn.jl:20\nin expression starting at\
    \ /tmp/tmp0vztsumn.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    prime_numbers\
    \ = primes(100)\n    \n    for i in prime_numbers\n        if a % i == 0\n   \
    \         return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_multiply_prime(30)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns true if the given number is a prime number and false otherwise.\nKnowing\
    \ that (a) is less then 100. \nExample: \n>>> is_prime(30)\ntrue\n30 = 3 * 7 *\
    \ 11 * 13 * 17 * 19 * 23 * 29 * 31 * 37 * 41\n</text>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0xczi9th.jl:18\nin expression starting at\
    \ /tmp/tmp0xczi9th.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    if is_multiply_prime_helper(a,\
    \ 3, 100) == true\n    else return false\nend\n\"\"\"\n    Write a function that\
    \ returns true if the given number is the multiplication of 5 prime numbers\n\
    \    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n\
    \    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3 * 5 * 7\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = is_multiply_prime;\n\t@test(candidate(5)\
    \ == false)\n\t@test(candidate(30) == true)\n\t@test(candidate(8) == true)\n\t\
    @test(candidate(10) == false)\n\t@test(candidate(125) == true)\n\t@test(candidate(105)\
    \ == true)\n\t@test(candidate(126) == false)\n\t@test(candidate(729) == false)\n\
    \t@test(candidate(891) == false)\n\t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6wtai26d.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6wtai26d.jl:1\n\
    in expression starting at /tmp/tmp6wtai26d.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Write a function that returns true if the given number is the multiplication\
    \ of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then\
    \ 100. \n    Example:\n    >>> is_multiply_prime(30)\n    true\n    30 = 2 * 3\
    \ * 5\n    \"\"\"\nfunction is_multiply_prime(a::Int64)::Bool \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = is_multiply_prime;\n\t@test(candidate(5) == false)\n\t@test(candidate(30)\
    \ == true)\n\t@test(candidate(8) == true)\n\t@test(candidate(10) == false)\n\t\
    @test(candidate(125) == true)\n\t@test(candidate(105) == true)\n\t@test(candidate(126)\
    \ == false)\n\t@test(candidate(729) == false)\n\t@test(candidate(891) == false)\n\
    \t@test(candidate(1001) == true)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxzqnlzmy.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxzqnlzmy.jl:1\n\
    in expression starting at /tmp/tmpxzqnlzmy.jl:1\n"
  stdout: ''
