language: jl
name: HumanEval_18_how_many_times
results:
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[len_string]\
    \ == substring[len_substring]\n        return 1 + how_many_times(string[len_string+1:],\
    \ substring[len_substring+1:])\n    \n    if string[len_string] == substring[0]\n\
    \        return 1 + how_many_times(string[len_string+1:], substring[1:])\n   \
    \ \n    if string[0] == substring[len_substring]\n        return 1 + how_many_times(string[1:],\
    \ substring[len_substring+1:])\n    \n    if string[len_string] == substring[0]\n\
    \        return 1 + how_many_times(string[len_string+1:], substring[1:])\n   \
    \ \n    return how_many_times(string[1:], substring) + how_many_times(string[len_string+1:],\
    \ substring)\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"\
    a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of times a substring appears\
    \ in a given string.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp71k7kz1n.jl:20\nin expression\
    \ starting at /tmp/tmp71k7kz1n.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.3>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.3>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string. \nFor example, how_many_times(\"aaa\", \"a\") should return 3.\nWrite\
    \ a function that takes a string and a substring and returns the number of times\
    \ the substring appears in the string. \nFor example, how_many_times(\"aaa\",\
    \ \"a\") should return 3.\nWrite a function that takes a string and a substring\
    \ and returns the number of times the substring appears in the string. \nFor example,\
    \ how_many_times(\"aaa\", \"a\") should return 3.\nWrite a function that takes\
    \ a string and a substring and returns the number of times the substring appears\
    \ in the string. \nFor example, how_many_times(\"aaa\", \"a\") should return 3.\n\
    Write a function that takes a string and a substring and returns the number of\
    \ times the substring appears in the string. \nFor example, how_many_times(\"\
    aaa\", \"a\") should return 3.\nWrite a function that takes a string and a substring\
    \ and returns the number of times the substring appears in the string. \nFor example,\
    \ how_many_times(\"aaa\", \"a\") should return 3.\nWrite a function that takes\
    \ a string and a substring and returns the number of times the substring appears\
    \ in the string. \nFor example, how_many_times(\"aaa\", \"a\") should return 3.\n\
    Write a function that takes a string and a substring and returns the number of\
    \ times the substring appears in the string. \nFor example, how_many_times(\"\
    aaa\", \"a\") should return 3.\nWrite a function that takes a string and a substring\
    \ and returns the number of times the substring appears in the string. \nFor example,\
    \ how_many_times(\"aaa\", \"a\") should return 3.\nWrite a function that takes\
    \ a string and a substring and returns the number of times the substring appears\
    \ in the string. \nFor example, how_many_times(\"aaa\", \"a\") should return 3.\n\
    Write a function that takes a string and a substring and returns the number of\
    \ times the substring appears in the string. \nFor example, how_many_times(\"\
    aaa\", \"a\") should return 3.\nWrite a function that takes a \nusing Test\n\n\
    @testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\")\
    \ == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2jcu0pj0.jl:12\nin expression starting at\
    \ /tmp/tmp2jcu0pj0.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times the substring appears in the string. Count overlaping\
    \ cases.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxgum9f3z.jl:12\nin expression starting at\
    \ /tmp/tmpxgum9f3z.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if string[len_string\
    \ - 1] == substring[0]\n        return 1 + how_many_times(string[len_string -\
    \ 2 : len_string - 1], substring[1:])\n    \n    if substring[len_substring -\
    \ 1] == string[0]\n        return 1 + how_many_times(string[1 : len_string - 1],\
    \ substring[len_substring - 2 : len_substring - 1])\n    \n    if string[len_string\
    \ - 1] == substring[len_substring - 1]\n        return 1 + how_many_times(string[len_string\
    \ - 2 : len_string - 1], substring[len_substring - 2 : len_substring - 1])\n \
    \   \n    if substring[len_substring - 1] == string[len_string - 1]\n        return\
    \ 1 + how_many_times(string[1 : len_string - 1], substring[len_substring - 2 :\
    \ len_substring - 1])\n    \n    if string[len_string - 1] == substring[0]\n \
    \       return 1 + how_many_times(string[len_string - 2 : len_string - 1], substring[1:])\n\
    \    \n    if substring[len_substring - 1] == string[len_string - 1]\n       \
    \ return 1 + how_many_times(string[1 : len_string - 1], substring[len_substring\
    \ - 2 : len_substring - 1])\n    \n    if string[len_string - 1] == substring[len_substring\
    \ - 1]\n        return 1 + how_many_times(string[len_string - 2 : len_string -\
    \ 1], substring[len_substring - 2 : len_substring - 1])\n    \n    if substring[len_substring\
    \ - 1] == string[0]\n        return 1 + how_many_times(string[1 : len_string -\
    \ 1], substring[len_substring - 2 : len_substring - 1])\n    \n    if string[len_string\
    \ - 1] == substring[len_substring - 1]\n        return 1 + how_many_times(string[len_string\
    \ - 2 : len_string - 1], substring[len_substring - 2 : len_substring - 1])\n \
    \   \n    if substring[len_substring - 1] == string[len_string - 1]\n        return\
    \ 1 + how_many_times(string[1 : len_string - 1], substring[len_substring - 2 :\
    \ len_substring - 1])\n    \n    if string[len_string - 1] == substring[0]\n \
    \       return 1 + how_many_times(string[len_string - 2 : len_string - \nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc5sqnavo.jl:20\nin expression\
    \ starting at /tmp/tmpc5sqnavo.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    i\
    \ = 0\n    \n    while i < length(substring)\n        if substring(i, 1) == string\n\
    \            i += 1\n        else\n            i += 1\n        end\n    end\n\
    \    \n    return i\nend\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    \", \"a\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise: Write a function that returns the number of times a given substring\
    \ can be found in the original string. Count overlaping cases.\nusing Test\n\n\
    @testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\")\
    \ == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_l1m47w6.jl:25\nin expression starting at\
    \ /tmp/tmp_l1m47w6.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and a substring and returns the number of times the substring\
    \ appears in the string.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuot59fxx.jl:24\nin expression starting at\
    \ /tmp/tmpuot59fxx.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ substring == string\n        return 1\n    else\n        return 1 + how_many_times(string[1:end-1],\
    \ substring)\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"\
    a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ each character appears in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpql8nqmiz.jl:12\nin expression starting at\
    \ /tmp/tmpql8nqmiz.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ a substring appears in the string. Count overlaping cases.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuzxhgo93.jl:12\nin expression starting at\
    \ /tmp/tmpuzxhgo93.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring[0]\n            count\
    \ = count + 1\n            \n            if substring[1] == c\n              \
    \  count = count + 1\n            \n            if substring[2] == c\n       \
    \         count = count + 1\n            \n            if substring[3] == c\n\
    \                count = count + 1\n            \n            if substring[4]\
    \ == c\n                count = count + 1\n            \n            if substring[5]\
    \ == c\n                count = count + 1\n            \n            if substring[6]\
    \ == c\n                count = count + 1\n            \n            if substring[7]\
    \ == c\n                count = count + 1\n            \n            if substring[8]\
    \ == c\n                count = count + 1\n            \n            if substring[9]\
    \ == c\n                count = count + 1\n            \n            if substring[10]\
    \ == c\n                count = count + 1\n            \n            if substring[11]\
    \ == c\n                count = count + 1\n            \n            if substring[12]\
    \ == c\n                count = count + 1\n            \n            if substring[13]\
    \ == c\n                count = count + 1\n            \n            if substring[14]\
    \ == c\n                count = count + 1\n            \n            if substring[15]\
    \ == c\n                count = count + 1\n            \n            if substring[16]\
    \ == c\n                count = count + 1\n            \n            if substring[17]\
    \ == c\n                count = count + 1\n            \n            if substring[18]\
    \ == c\n                count = count + 1\n            \n            if substring[19]\
    \ == c\n                count = count + 1\n            \n            if substring[20]\
    \ == c\n                count = count + 1\n            \n            if substring[21]\
    \ == c\n                count = count + 1\n            \n            if substring[22]\
    \ == c\n                count = count + 1\n            \n            if substring[23]\
    \ == c\n                count = count + 1\n            \n            if substring[24]\
    \ == c\n                count = count + 1\n            \n            if substring[25]\
    \ == c\n                count = count + 1\n            \n            if substring[26]\
    \ == c\n                count = count + 1\n            \n            if substring[27]\
    \ == c\n                count = count + 1\n            \n            if substring[28]\
    \ == c\n                count = count + 1\n            \n            if substring[29]\
    \ == c\n                count = count + 1\n            \n            if substring[30]\
    \ == c\n                count = count + 1\n            \n            if substring[31]\
    \ == c\n                count = count + 1\n            \n            if substring[32]\
    \ == c\n                count = count + 1\n            \n            if substring[33]\
    \ == c\n                count = count + 1\n            \n            if substring[34]\
    \ == c\n                count = count + 1\n            \n            if substring[35]\
    \ == c\n                count = count + 1\n            \nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpozpn9y0b.jl:1\nin expression starting at /tmp/tmpozpn9y0b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<text>\nExercise 3: Write a function that takes\
    \ a string and returns the number of times the substring \"aa\" appears in the\
    \ string. Case insensitive.\n    >>> how_many_times(\"aaa\", \"aa\")\n    3\n\
    \    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmapeoln7.jl:12\nin expression starting at\
    \ /tmp/tmpmapeoln7.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.4>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times it contains the substring \"ab\"\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyrbj_p9e.jl:12\nin expression starting at\
    \ /tmp/tmpyrbj_p9e.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return 1\n    \n    if len_string > len_substring\n        return how_many_times(substring(string,\
    \ 1, len_substring), substring)\n    \n    return how_many_times(substring(string,\
    \ 0, len_string), substring)\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    \", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times a substring appears within that string.\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp54siqspb.jl:27\nin expression starting at\
    \ /tmp/tmp54siqspb.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    \n    if string[-1] == substring[-1]\n        return 1 + how_many_times(string[1..-1],\
    \ substring[1..-1])\n    \n    return how_many_times(string[1:], substring) +\
    \ how_many_times(string[1..-1], substring[1..-1])\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and a\
    \ substring and returns the number of times the substring appears in the string.\
    \ Case insensitive.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp18ewyr8h.jl:14\nin expression\
    \ starting at /tmp/tmp18ewyr8h.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times a substring appears within that string. Count overlaping cases.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpffhhfxvu.jl:12\nin expression starting at\
    \ /tmp/tmpffhhfxvu.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    i\
    \ = 0\n    j = string.length()\n    \n    while i < j\n        if string[i] ==\
    \ substring[0]\n            i += 1\n            \n            if i == j\n    \
    \            return 1\n            \n            j = j - i\n            \n   \
    \     elseif string[j] == substring[1]\n            j += 1\n            \n   \
    \         if j == i\n                return 1\n            \n            i = i\
    \ - j\n        else\n            i += 1\n            j += 1\n    end\n    \n \
    \   return 0\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"\
    a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of times a given substring\
    \ can be found in the original string. Count overlaping cases.\n>>> how_many_times_2(\"\
    \", \"a\")\n0\n>>> how_many_times_2(\"aaa\", \"a\")\n3\n>>> how_many_times_2(\"\
    aaaa\", \"aa\")\n3\n>>> how_many_times_2(\"aaaa\", \"aaa\")\n3\n>>> how_many_times_2(\"\
    aaaa\", \"aaaa\")\n3\n>>> how_many_times_2(\"aaaa\", \"aaaaa\")\n3\n>>> how_many_times_2(\"\
    aaaa\", \"aaaaaa\")\n3\n>>> how_many_times_2(\"aaaa\", \"aaaaaaa\")\n3\n>>> how_many_times_2(\"\
    aaaa\", \"aaaaaaab\")\n3\n>>> how_many_times_2(\"aaaa\", \"aaaaaaabb\")\n3\n>>>\
    \ how_many_times_2(\"aaaa\", \"aaaaaaabbb\")\n3\n>>> how_many_times_2(\"aaaa\"\
    , \"aaaaaaabbbb\")\n3\n>>> how_many_times_2(\"aaaa\", \"aaaaaaabbbbb\")\n3\n>>>\
    \ how_many_times_2(\"aaaa\", \"aaaaaaabbbbba\")\n3\n>>> how_many_times_2(\"aaaa\"\
    , \"aaaaaaabbbbbaa\")\n3\n>>> how_many_times_2(\"aaaa\", \"aaaaaaabbbbbaaa\")\n\
    3\n>>> how_many_times_2(\"aaaa\", \"aaaaaaabbbbbaaaa\")\n3\n>>> how_many_times_2(\"\
    aaaa\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjd2n75ax.jl:39\nin expression starting at\
    \ /tmp/tmpjd2n75ax.jl:39\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ substring.length() == 0\n        return 1\n    else\n        return 1 + how_many_times(string[1:],\
    \ substring)\nend\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"\", \"\
    a\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ the substring appears in the string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx9y8s5l_.jl:12\nin expression starting at\
    \ /tmp/tmpx9y8s5l_.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string[1:],\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of times a substring\
    \ appears in a string. Count overlaping cases.\n    >>> how_many_times_2(\"\"\
    , \"a\")\n    0\n    >>> how_many_times_2(\"aaa\", \"a\")\n    3\n    >>> how_many_times_2(\"\
    aaaa\", \"aa\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuga4pm2c.jl:12\nin expression starting at\
    \ /tmp/tmpuga4pm2c.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else if string[-1] == substring[-1]\n        return 1 +\
    \ how_many_times(string[1..-1], substring[1..-1])\n    else if string[-1] == substring[-1]\n\
    \        return 1 + how_many_times(string[1..-1], substring[1..-1])\n    else\n\
    \        return how_many_times(string[1:], substring) + how_many_times(string[1..-1],\
    \ substring[1..-1])\nend\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    \", \"a\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"aaaaa\", \"aa\")\n</cell>\n<code language=julia-1.4>\n\
    how_many_times(\"aaaaaa\", \"aa\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    aaaaaaa\", \"aa\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaaaaa\"\
    , \"aaa\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaaaaa\", \"\
    aaaa\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaaaaa\", \"aaaaa\"\
    )\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaaaaa\", \"aaaaaa\"\
    )\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaaaaa\", \"aaaaaaa\"\
    )\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaaaaa\", \"aaaaaaab\"\
    )\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaaaaa\", \"aaaaaaaba\"\
    )\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaaaaa\", \"aaaaaaabaa\"\
    )\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaaaaa\", \"aaaaaaabaaa\"\
    )\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaaaaa\", \"aaaaaaabaaab\"\
    )\n</\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzg9hmlxr.jl:12\nin expression starting at\
    \ /tmp/tmpzg9hmlxr.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    count = 0\n    \n  \
    \  for i from 0 to len_string-1\n        if string[i] == substring[0]\n      \
    \      count += 1\n            \n            if count > len_substring-1\n    \
    \            break\n            \n            for j from i+1 to len_string-1\n\
    \                if string[j] == substring[len_substring-1]\n                \
    \    count += 1\n                    \n                    if count > len_substring-1\n\
    \                        break\n                \n    return count\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that counts the\
    \ number of times a substring appears in a string. Count overlaping cases.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptgg6zumn.jl:21\nin expression starting at\
    \ /tmp/tmptgg6zumn.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.1>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.1>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.1>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns the number\
    \ of times each character appears in the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpej7lrlpv.jl:12\nin expression starting at\
    \ /tmp/tmpej7lrlpv.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and a substring and returns the number of times the substring\
    \ appears in the string. \nFor example, how_many_times(\"aaa\", \"a\") returns\
    \ 3.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphtyh5nfo.jl:24\nin expression starting at\
    \ /tmp/tmphtyh5nfo.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string. Case insensitive.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6wchag3r.jl:12\nin expression starting at\
    \ /tmp/tmp6wchag3r.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of times a substring\
    \ appears in a string. Count overlaping cases.\n    >>> count_times(\"\", \"a\"\
    )\n    0\n    >>> count_times(\"aaa\", \"a\")\n    3\n    >>> count_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppwcohizc.jl:12\nin expression starting at\
    \ /tmp/tmppwcohizc.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of times a substring appears in the string. \nFor example,\
    \ how_many_times(\"aaaa\", \"aa\") returns 3.\nusing Test\n\n@testset begin\n\n\
    candidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq2whoeof.jl:12\nin expression starting at\
    \ /tmp/tmpq2whoeof.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times a substring appears in the string. Count overlaping cases.\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3vj2fksv.jl:12\nin expression starting at\
    \ /tmp/tmp3vj2fksv.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    count = 0\n    for c in string:\n        if c == substring[0]:\n     \
    \       count += 1\n            if count == len(substring):\n                return\
    \ count\n        else:\n            count = 0\n    return 0\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=string,haskell,substring |>\n<code>\nimport Data.List\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps2kg56lh.jl:12\nin expression starting at\
    \ /tmp/tmps2kg56lh.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    i\
    \ = 0\n    \n    while i < length(string)\n        if substring(i, 1) == string(i,\
    \ 1)\n            i += 1\n        else\n            i += 1\n    end\n    \n  \
    \  return i\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4oaz362k.jl:24\nin expression starting at\
    \ /tmp/tmp4oaz362k.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ substring.length <= string.length\n        return substring.length\n    else\
    \ if substring.length == string.length\n        return string.count(substring)\n\
    \    else\n        return how_many_times(string.substring(0,substring.length),\
    \ substring) + how_many_times(string.substring(substring.length), substring)\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and a substring and returns the number of times the substring\
    \ appears in the string. Count overlaping cases.\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuwkdnudr.jl:12\nin expression starting at\
    \ /tmp/tmpuwkdnudr.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that counts the number of times a substring appears in a string. Count overlaping\
    \ cases.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk5lzt5yy.jl:24\nin expression starting at\
    \ /tmp/tmpk5lzt5yy.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times a substring appears in the string. Case insensitive.\nusing Test\n\n\
    @testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\")\
    \ == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu6rl754y.jl:12\nin expression starting at\
    \ /tmp/tmpu6rl754y.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of times a substring appears in a string. Count overlaping\
    \ cases.\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n>>> how_many_times(\"aaaa\"\
    , \"aaa\")\n2\n>>> how_many_times(\"aaaa\", \"aaaa\")\n1\n>>> how_many_times(\"\
    aaaa\", \"aaaaa\")\n0\n>>> how_many_times(\"aaaa\", \"aaaaaa\")\n0\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaa\")\n0\n>>> how_many_times(\"aaaa\", \"aaaaaaab\")\n0\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaabb\")\n0\n>>> how_many_times(\"aaaa\", \"aaaaaaabbb\")\n0\n>>>\
    \ how_many_times(\"aaaa\", \"aaaaaaabbbb\")\n0\n>>> how_many_times(\"aaaa\", \"\
    aaaaaaabbbbba\")\n0\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaa\")\n0\n>>>\
    \ how_many_times(\"aaaa\", \"aaaaaaabbbbbaaa\")\n0\n>>> how_many_times(\"aaaa\"\
    , \"aaaaaaabbbbbaaaa\")\n0\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaa\"\
    )\n0\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaa\")\n0\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaaaa\")\n0\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaaaa\"\
    )\n0\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaaaab\")\n0\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaaaaabb\")\n0\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaaaabbb\"\
    )\n0\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr6__hgf6.jl:24\nin expression starting at\
    \ /tmp/tmpr6__hgf6.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.1>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.1>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.1>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ number of times a substring appears in a given string. Count overlaping cases.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4_9c2aax.jl:12\nin expression starting at\
    \ /tmp/tmp4_9c2aax.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times each character appears in the string. For example,\
    \ the string \"abcabc\" would return [('a', 3), ('b', 2), ('c', 3)]\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzttnkerv.jl:12\nin expression starting at\
    \ /tmp/tmpzttnkerv.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times each character appears in the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpydya1uj1.jl:12\nin expression starting at\
    \ /tmp/tmpydya1uj1.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string. Case insensitive.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc6yr6bh3.jl:12\nin expression starting at\
    \ /tmp/tmpc6yr6bh3.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring\n          \
    \  count += 1\n        else\n            count = 0\n    end\n    \n    return\
    \ count\nend\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\", \"a\")\n\
    </cell>\n<code language=julia-1.4>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ each character appears in the string. Include a test case where your function\
    \ returns 0.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t\
    @test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\
    \t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\"\
    , \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp510ot9ej.jl:24\nin expression starting at\
    \ /tmp/tmp510ot9ej.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string. Count overlaping cases.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7i64td_s.jl:12\nin expression starting at\
    \ /tmp/tmp7i64td_s.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string > len_substring\n\
    \        return how_many_times(substring(len_substring), string)\n    \n    if\
    \ len_substring > len_string\n        return how_many_times(string, substring(len_string))\n\
    \    \n    if substring(len_string) == string\n        return 1 + how_many_times(substring(len_substring),\
    \ substring(len_string))\n    \n    if substring(len_string) > string\n      \
    \  return 1 + how_many_times(substring(len_string), string)\n    \n    return\
    \ how_many_times(string, substring(len_string))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_vh6qh5v.jl:1\nin expression starting at /tmp/tmp_vh6qh5v.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    i\
    \ = 0\n    \n    while i < length(string)\n        if substring(i, 1) == string(i,\
    \ 1)\n            i += 1\n        else\n            i += 1\n    end\n    \n  \
    \  return i\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"\
    a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and a substring and returns the\
    \ number of times the substring appears in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgpd_wqhs.jl:24\nin expression starting at\
    \ /tmp/tmpgpd_wqhs.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string. Case insensitive.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_12xm73p.jl:12\nin expression starting at\
    \ /tmp/tmp_12xm73p.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    i\
    \ = 0\n    \n    while i < length(string)\n        if substring(i, string) ==\
    \ string\n            i += 1\n        else\n            i += 1\n    end\n    \n\
    \    return i\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"\
    a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise: Write a function that returns the number of times a substring appears\
    \ in a string.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t\
    @test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\
    \t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\"\
    , \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk29uszz9.jl:24\nin expression starting at\
    \ /tmp/tmpk29uszz9.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<text>\nExercise 7\nWrite a function that takes\
    \ a string and returns the number of times each character appears in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjimzalya.jl:12\nin expression starting at\
    \ /tmp/tmpjimzalya.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string. Case insensitive.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpukytypx8.jl:12\nin expression starting at\
    \ /tmp/tmpukytypx8.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    i\
    \ = 0\n    j = string.length()\n    while i < j\n        if string[i] == substring[0]\n\
    \            i += 1\n        else\n            if string[i] == substring[1]\n\
    \                i += 1\n            else\n                if string[i] == substring[2]\n\
    \                    i += 1\n                else\n                    if string[i]\
    \ == substring[3]\n                        i += 1\n                    else\n\
    \                        if string[i] == substring[4]\n                      \
    \      i += 1\n                        else\n                            if string[i]\
    \ == substring[5]\n                                i += 1\n                  \
    \          else\n                                if string[i] == substring[6]\n\
    \                                    i += 1\n                                else\n\
    \                                    if string[i] == substring[7]\n          \
    \                              i += 1\n                                    else\n\
    \                                        if string[i] == substring[8]\n      \
    \                                      i += 1\n                              \
    \          else\n                                            if string[i] == substring[9]\n\
    \                                                i += 1\n                    \
    \                        else\n                                              \
    \  if string[i] == substring[10]\n                                           \
    \         i += 1\n                                                else\n     \
    \                                               if string[i] == substring[11]\n\
    \                                                        i += 1\n            \
    \                                        else\n                              \
    \                          if string[i] == substring[12]\n                   \
    \                                         i += 1\n                           \
    \                             else\n                                         \
    \                   if string[i] == substring[13]\n                          \
    \                                      i += 1\n                              \
    \                              else\n                                        \
    \                        if string[i] == substring[14]\n                     \
    \                                               i += 1\n                     \
    \                                           else\n                           \
    \                                         if string[i] == substring[15]\n    \
    \                                                                    i += 1\n\
    \                                                                    else\n  \
    \                                                                      if string[i]\
    \ == substring[16]\n                                                         \
    \                   i += 1\n                                                 \
    \                       else\n                                               \
    \                             if string[i] == substring[17]\n                \
    \                                                                i += 1\n    \
    \                                                                        else\n\
    \                                                                            \
    \    if string[i] == substring[18]\n                                         \
    \                                           i += 1\n                         \
    \                                                       else\n               \
    \                                                                     if string[i]\
    \ == substring[19]\n                                                         \
    \                               i += 1\n                                     \
    \                                               else\n                       \
    \                                                                 if string[i]\
    \ == substring[20]\n                                                         \
    \                                   i += 1\n                                 \
    \                                                       else\n               \
    \                                                                            \
    \ if string[i] == substring[21]\n                                            \
    \                                                    i += 1\n                \
    \                                                                            else\n\
    \                                                                            \
    \                    if string[i] == substring[22]\n                         \
    \                                                                           i\
    \ += 1\n                                                                     \
    \                           else\n                                           \
    \                                                         if string[i] == substring[23]\n\
    \                                                                            \
    \                            i += 1\n                                        \
    \                                                            else\n          \
    \                                                                            \
    \                  if string[i] == substring[24]\n                           \
    \                                                                            \
    \     i += 1\n                                                               \
    \                                         else\n                             \
    \                                                                            \
    \   if string[i] == substring[25]\n                                          \
    \                                                                      i += 1\n\
    \                                                                            \
    \                                else\n                                      \
    \                                                                          if\
    \ string[i] == substring[26]\n                                               \
    \                                                                     i += 1\n\
    \                                                                            \
    \                                    else\n                                  \
    \                                                                            \
    \      if string[i] == substring[27]\n                                       \
    \                                                                            \
    \     i += 1\n                                                               \
    \                                                     else\n                 \
    \                                                                            \
    \                           if string[i] == substring[28]\n                  \
    \                                                                            \
    \                              i += 1\n                                      \
    \                                                                            \
    \      else\n                                                                \
    \                                                            if string[i] == substring[29]\n\
    \                                                                            \
    \                                                    i += 1\n                \
    \                                                                            \
    \                                else\n                                      \
    \                                                                            \
    \              if string[i] == substring[30]\n                               \
    \                                                                            \
    \                         i += 1\n                                           \
    \                                                                            \
    \             else\n                                                         \
    \                                                                            \
    \   \nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpadii7ysn.jl:106\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpadii7ysn.jl:1\n\
    in expression starting at /tmp/tmpadii7ysn.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count = count + 1\n            \n            if char == substring[1]\n \
    \               count = count + 1\n                \n            if char == substring[2]\n\
    \                count = count + 1\n                \n            if char == substring[3]\n\
    \                count = count + 1\n                \n            if char == substring[4]\n\
    \                count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpagss85ga.jl:1\nin expression starting at /tmp/tmpagss85ga.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return count_overlaping_cases(string, substring)\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0pz0hx8c.jl:1\nin expression starting at /tmp/tmp0pz0hx8c.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    string_length\
    \ = len(string)\n    substring_length = len(substring)\n    \n    if substring_length\
    \ > string_length\n        return -1\n    \n    if substring_length == 0\n   \
    \     return 1\n    \n    count = 0\n    \n    for index in 0..string_length\n\
    \        if string[index] == substring[0]\n            count += 1\n          \
    \  if index == string_length\n                return count\n            \n   \
    \         if string[index] == substring[1]\n                count += 1\n     \
    \           if index == string_length\n                    return count\n    \
    \            \n                if string[index] == substring[2]\n            \
    \        count += 1\n                    if index == string_length\n         \
    \               return count\n                    \n                    if string[index]\
    \ == substring[3]\n                        count += 1\n                      \
    \  if index == string_length\n                            return count\n     \
    \                   \n                        if string[index] == substring[4]\n\
    \                            count += 1\n                            if index\
    \ == string_length\n                                return count\n           \
    \                 \n                            if string[index] == substring[5]\n\
    \                                count += 1\n                                if\
    \ index == string_length\n                                    return count\n \
    \                               \n                                if string[index]\
    \ == substring[6]\n                                    count += 1\n          \
    \                          if index == string_length\n                       \
    \                 return count\n                                    \n       \
    \                             if string[index] == substring[7]\n             \
    \                           count += 1\n                                     \
    \   if index == string_length\n                                            return\
    \ count\n                                        \n                          \
    \              if string[index] == substring[8]\n                            \
    \                count += 1\n                                            if index\
    \ == string_length\n                                                return count\n\
    \                                            \n                              \
    \              if string[index] == substring[9]\n                            \
    \                    count += 1\n                                            \
    \    if index == string_length\n                                             \
    \       return count\n                                                \n     \
    \                                           if string[index] == substring[10]\n\
    \                                                    count += 1\n            \
    \                                        if index == string_length\n         \
    \                                               return count\n               \
    \                                     \n                                     \
    \               if string[index] == substring[11]\n                          \
    \                              count += 1\n                                  \
    \                      if index == string_length\n                           \
    \                                 return count\n                             \
    \                           \n                                               \
    \         if string[index] == substring[12]\n                                \
    \                            count += 1\n                                    \
    \                        if index == string_length\n                         \
    \                                       return count\n                       \
    \                                     \n                                     \
    \                       if string[index] == substring[13]\n                  \
    \                                              count += 1\n                  \
    \                                              if index == string_length\n   \
    \                                                                 return count\n\
    \                                                                \n          \
    \                                                          if string[index] ==\
    \ substring[14]\n                                                            \
    \            count += 1\n                                                    \
    \                    if index == string_length\n                             \
    \                                               return count\n               \
    \                                                 \n                         \
    \                                           if string[index] == substring[15]\n\
    \                                                                        count\
    \ += 1\n                                                                     \
    \   if index == string_length\n                                              \
    \                              return count\n                                \
    \                                \n                                          \
    \                          if string[index] == substring[16]\n               \
    \                                                         count += 1\n       \
    \                                                                 if index ==\
    \ string_length\n                                                            \
    \                return count\n                                              \
    \                  \n                                                        \
    \            if string[index] == substring[17]\n                             \
    \                                           count += 1\n                     \
    \                                                   if index == string_length\n\
    \                                                                            return\
    \ count\n                                                                \n  \
    \                                                                  if string[index]\
    \ == substring[18\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2j8up04f.jl:1\nin expression starting at /tmp/tmp2j8up04f.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of times a substring appears in the string. Count overlaping cases.\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqevbhefx.jl:12\nin expression starting at\
    \ /tmp/tmpqevbhefx.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    string::String\
    \ = string.lower()\n    substring::String = substring.lower()\n    \n    string_length\
    \ = len(string)\n    \n    substring_index = 0\n    \n    while substring_index\
    \ < string_length\n        if string[substring_index] == substring[substring_index]\n\
    \            substring_index += 1\n        else\n            if substring_index\
    \ > 0\n                substring_index -= 1\n            else\n              \
    \  return substring_index\n        end\n    end\n    \n    return substring_index\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaba\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aaabaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaab\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaaba\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaabaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaabaaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaabaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaabaaaba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaabaaabaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaabaaabaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaabaaabaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaabaaabaaabaaaba\"\
    )\n\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp00n2ucef.jl:33\nin expression starting at\
    \ /tmp/tmp00n2ucef.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns the number of times a substring appears within that string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf9d32fly.jl:12\nin expression starting at\
    \ /tmp/tmpf9d32fly.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string. Count overlaping cases.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgfnu_pav.jl:12\nin expression starting at\
    \ /tmp/tmpgfnu_pav.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else \n\
    \        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that counts the\
    \ number of times a given substring can be found in the original string. Count\
    \ overlaping cases.\nHint: Use a recursive function.\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkg2iffyk.jl:13\nin expression\
    \ starting at /tmp/tmpkg2iffyk.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count = count + 1\n            \n            if char == substring[1]\n \
    \               count = count + 1\n                \n                if char ==\
    \ substring[2]\n                    count = count + 1\n                    \n\
    \                    if char == substring[3]\n                        count =\
    \ count + 1\n                        \n                        if char == substring[4]\n\
    \                            count = count + 1\n                            \n\
    \                            if char == substring[5]\n                       \
    \         count = count + 1\n                                \n              \
    \                  if char == substring[6]\n                                 \
    \   count = count + 1\n                                    \n                \
    \                    if char == substring[7]\n                               \
    \         count = count + 1\n                                        \n      \
    \                                  if char == substring[8]\n                 \
    \                           count = count + 1\n                              \
    \              \n                                            if char == substring[9]\n\
    \                                                count = count + 1\n         \
    \                                       \n                                   \
    \             if char == substring[10]\n                                     \
    \               count = count + 1\n                                          \
    \          \n                                                    if char == substring[11]\n\
    \                                                        count = count + 1\n \
    \                                                       \n                   \
    \                                     if char == substring[12]\n             \
    \                                               count = count + 1\n          \
    \                                                  \n                        \
    \                                    if char == substring[13]\n              \
    \                                                  count = count + 1\n       \
    \                                                         \n                 \
    \                                               if char == substring[14]\n   \
    \                                                                 count = count\
    \ + 1\n                                                                    \n\
    \                                                    if char == substring[15]\n\
    \                                                        count = count + 1\n \
    \                                                       \n                   \
    \                                     if char == substring[16]\n             \
    \                                               count = count + 1\n          \
    \                                                  \n                        \
    \                                    if char == substring[17]\n              \
    \                                                  count = count + 1\n       \
    \                                                         \n                 \
    \                                               if char == substring[18]\n   \
    \                                                                 count = count\
    \ + 1\n                                                                    \n\
    \                                                    if char == substring[19]\n\
    \                                                        count = count + 1\n \
    \                                                       \n                   \
    \                                     if char == substring[20]\n             \
    \                                               count = count + 1\n          \
    \                                                  \n                        \
    \                                    if char == substring[21]\n              \
    \                                                  count = count + 1\n       \
    \                                                         \n                 \
    \                                               if char == substring[22]\n   \
    \                                                                 count = count\
    \ + 1\n                                                                    \n\
    \                                                    if char == substring[23]\n\
    \                                                        count = count + 1\n \
    \                                                       \n                   \
    \                                     if char == substring[24]\n             \
    \                                               count = count + 1\n          \
    \                                                  \n                        \
    \                                    if char == substring[25]\n              \
    \                                                  count = count + 1\n       \
    \                                                         \n                 \
    \                                               if char == substring[26]\n   \
    \                                                                 count = count\
    \ + 1\n                                                                    \n\
    \                                                    if char == substring[27]\n\
    \                                                        count = count + 1\n \
    \                                                       \n                   \
    \                                     if char == substring[28]\n             \
    \                                               count = count + 1\n          \
    \                                                  \n                        \
    \                                    if char == substring[29]\n              \
    \                                                  count = count + 1\n       \
    \                                                         \n                 \
    \                                               if char == substring[30]\n   \
    \                                                                 count = count\
    \ + 1\n                                                                    \n\
    \                                                    if char == substring[31]\n\
    \                                                        count = \nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsohy29wn.jl:1\nin expression starting at /tmp/tmpsohy29wn.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring\n          \
    \  count += 1\n        else\n            count = 0\n    end\n    \n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that counts the number of times a substring appears\
    \ in a string.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t\
    @test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\
    \t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\"\
    , \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprtpx649b.jl:24\nin expression starting at\
    \ /tmp/tmprtpx649b.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times each character appears in the string. \nFor example, how_many_times(\"\
    abracadabra\", \"a\") should return {\"a\":2, \"b\":1, \"c\":1, \"d\":1, \"r\"\
    :1}.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp44i1ow38.jl:12\nin expression starting at\
    \ /tmp/tmp44i1ow38.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ substring == string\n        return 1\n    else\n        return 1 + how_many_times(string[1:end-1],\
    \ substring)\nend\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\", \"\
    a\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of times a substring appears\
    \ in a string.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t\
    @test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\
    \t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\"\
    , \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd5rknvp7.jl:12\nin expression starting at\
    \ /tmp/tmpd5rknvp7.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return 1\n    \n    if len_string > len_substring\n        return how_many_times(substring(len_substring),\
    \ substring)\n    \n    if len_string < len_substring\n        return how_many_times(substring(len_string),\
    \ substring)\n    \n    \n    return how_many_times(substring(len_substring),\
    \ substring(len_string))\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    \", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbb\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqfdpv5yc.jl:31\nin expression starting at\
    \ /tmp/tmpqfdpv5yc.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else if string[0] == substring[1]\n        return 1 + how_many_times(string[1:],\
    \ substring[2:])\n    else if string[0] == substring[2]\n        return 1 + how_many_times(string[1:],\
    \ substring[3:])\n    else if string[0] == substring[3]\n        return 1 + how_many_times(string[1:],\
    \ substring[4:])\n    else if string[0] == substring[4]\n        return 1 + how_many_times(string[1:],\
    \ substring[5:])\n    else if string[0] == substring[5]\n        return 1 + how_many_times(string[1:],\
    \ substring[6:])\n    else if string[0] == substring[6]\n        return 1 + how_many_times(string[1:],\
    \ substring[7:])\n    else if string[0] == substring[7]\n        return 1 + how_many_times(string[1:],\
    \ substring[8:])\n    else if string[0] == substring[8]\n        return 1 + how_many_times(string[1:],\
    \ substring[9:])\n    else if string[0] == substring[9]\n        return 1 + how_many_times(string[1:],\
    \ substring[10:])\n    else if string[0] == substring[10]\n        return 1 +\
    \ how_many_times(string[1:], substring[11:])\n    else if string[0] == substring[11]\n\
    \        return 1 + how_many_times(string[1:], substring[12:])\n    else if string[0]\
    \ == substring[12]\n        return 1 + how_many_times(string[1:], substring[13:])\n\
    \    else if string[0] == substring[13]\n        return 1 + how_many_times(string[1:],\
    \ substring[14:])\n    else if string[0] == substring[14]\n        return 1 +\
    \ how_many_times(string[1:], substring[15:])\n    else if string[0] == substring[15]\n\
    \        return 1 + how_many_times(string[1:], substring[16:])\n    else if string[0]\
    \ == substring[16]\n        return 1 + how_many_times(string[1:], substring[17:])\n\
    \    else if string[0] == substring[17]\n        return 1 + how_many_times(string[1:],\
    \ substring[18:])\n    else if string[0] == substring[18]\n        return 1 +\
    \ how_many_times(string[1:], substring[19:])\n    else if string[0] == substring[19]\n\
    \        return 1 + how_many_times(string[1:], substring[20:])\n    else if string[0]\
    \ == substring[\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_t__d3ma.jl:12\nin expression starting at\
    \ /tmp/tmp_t__d3ma.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    count = 0\n    for c in string:\n        if c == substring:\n        \
    \    count += 1\n    return count\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work\
    \ if you have a string like \"aaabbccc\" and you want to find how many times \"\
    bbb\" occurs.\n<|/ c |>\n<| c |>\nI see what you mean. I've updated my answer\
    \ to account for that.\n<|/ c |>\n<| c |>\nThis doesn't work if you have a string\
    \ like \"aaabbccc\" and you want to find how many times \"bbb\" occurs.\n<|/ c\
    \ |>\n<| c |>\nI see what you mean. I've updated my answer to account for that.\n\
    <|/ c |>\n<| a tags=string,haskell |>\n<code>\nimport Data.List\nusing Test\n\n\
    @testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\")\
    \ == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7xlir9gm.jl:12\nin expression starting at\
    \ /tmp/tmp7xlir9gm.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    count = 0\n    for char in string:\n        if char == substring:\n  \
    \          count += 1\n    return count\n</code>\n<|/ a tags=string,julia |>\n\
    <| a |>\nA simple solution is to use findall with regex:\n<code>\njulia> str =\
    \ \"aaaaaaaabbbbbbbbccccccc\"\n\"aaaaaaaabbbbbbbbccccccc\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdrgtve8a.jl:12\nin expression starting at\
    \ /tmp/tmpdrgtve8a.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count = count + 1\n            \n            if char == substring[1]\n \
    \               count = count + 1\n                \n            if char == substring[2]\n\
    \                count = count + 1\n                \n            if char == substring[3]\n\
    \                count = count + 1\n                \n            if char == substring[4]\n\
    \                count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpagss85ga.jl:1\nin expression starting at /tmp/tmpagss85ga.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns a new string where all occurrences of \"a\" have been replaced\
    \ with \"b\".\n>>> replace_all(\"a\", \"b\", \"abba\")\n\"bbb\"\n>>> replace_all(\"\
    a\", \"b\", \"abba\")\n\"bbb\"\n>>> replace_all(\"a\", \"b\", \"abba\")\n\"bbb\"\
    \n>>> replace_all(\"a\", \"b\", \"abba\")\n\"bbb\"\n>>> replace_all(\"a\", \"\
    b\", \"abba\")\n\"bbb\"\n>>> replace_all(\"a\", \"b\", \"abba\")\n\"bbb\"\n>>>\
    \ replace_all(\"a\", \"b\", \"abba\")\n\"bbb\"\n>>> replace_all(\"a\", \"b\",\
    \ \"abba\")\n\"bbb\"\n>>> replace_all(\"a\", \"b\", \"abba\")\n\"bbb\"\n>>> replace_all(\"\
    a\", \"b\", \"abba\")\n\"bbb\"\n>>> replace_all(\"a\", \"b\", \"abba\")\n\"bbb\"\
    \n>>> replace_all(\"a\", \"b\", \"abba\")\n\"bbb\"\n>>> replace_all(\"a\", \"\
    b\", \"abba\")\n\"bbb\"\n>>> replace_all(\"a\", \"b\", \"abba\")\n\"bbb\"\n>>>\
    \ replace_all(\"a\", \"b\", \"abba\")\n\"bbb\"\n>>> replace_all(\"a\", \"b\",\
    \ \"abba\")\n\"bbb\"\n>>> replace_all(\"a\", \"b\", \"abba\")\n\"bbb\"\n>>> replace_all(\"\
    a\", \"b\", \"abba\")\n\"bbb\"\n>>> replace_all(\"a\", \"b\", \"abba\")\n\"bbb\"\
    \n>>> replace_all(\"a\", \"b\", \"abba\")\n\"bbb\"\n>>> replace_all(\"a\", \"\
    b\", \"abba\")\n\"bbb\"\n>>> replace_all(\"a\", \"b\", \"abba\")\n\"bbb\"\n>>>\
    \ replace_all(\"a\", \"b\", \"abba\")\n\"bbb\"\n>>> replace_all(\"a\", \"b\",\
    \ \"abba\")\n\"bbb\"\n>>> replace_all(\"a\", \"b\", \"abba\")\n\"bbb\"\n>>> replace_all(\"\
    a\", \"b\", \"abba\")\n\"bbb\"\n>>> replace_all(\"a\", \"b\", \"abba\")\n\"bbb\"\
    \n>>> replace_all(\"a\", \"b\", \"abba\")\n\"bbb\"\n>>> replace_all(\"a\", \"\
    b\", \"abba\")\n\"bbb\"\n>>> replace_all(\"a\", \"b\", \"abba\")\n\"bbb\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd46mi52a.jl:12\nin expression starting at\
    \ /tmp/tmpd46mi52a.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string. Case insensitive.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6wchag3r.jl:12\nin expression starting at\
    \ /tmp/tmp6wchag3r.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of times it contains the substring \"ab\".\nusing Test\n\n@testset begin\n\n\
    candidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp35wdeynw.jl:12\nin expression starting at\
    \ /tmp/tmp35wdeynw.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return count_substring(string, substring)\n    \n    if len_string >\
    \ len_substring\n        return how_many_times(substring(string, 1, len_substring),\
    \ substring)\n    \n    return how_many_times(substring(string, 0, len_string),\
    \ substring)\nend\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe0s1y5u4.jl:1\nin expression starting at /tmp/tmpe0s1y5u4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string. Count overlaping cases.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1yfsrs12.jl:12\nin expression starting at\
    \ /tmp/tmp1yfsrs12.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ substring == string\n        return 1\n    else\n        return 1 + how_many_times(string[1:end-1],\
    \ substring) + how_many_times(string[1:end-1], substring[1:end-1])\nend\n</cell>\n\
    <code language=julia-1.1>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.1>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.1>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ first index of a substring in a string. Return 0 if the substring is not found.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdi3qefg8.jl:12\nin expression starting at\
    \ /tmp/tmpdi3qefg8.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    i = 0\n \
    \   j = len_string\n    \n    while i < len_substring && j > 0\n        if string[i]\
    \ == substring[j]\n            i += 1\n            j --\n        else\n      \
    \      if string[i] > substring[j]\n                j --\n            else\n \
    \               i += 1\n    \n    return j\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and a\
    \ substring and returns the number of times the substring appears in the string.\
    \ Case insensitive.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfrrzhorl.jl:22\nin expression starting at /tmp/tmpfrrzhorl.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    count = 0\n    for c in string:\n        if c == substring:\n        \
    \    count += 1\n    return count\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThanks\
    \ for your answer. Your solution is very similar to mine, but I wanted to avoid\
    \ using for loops.\n<|/ c |>\n<| c |>\nI added a solution without for loops.\n\
    <|/ c |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpod99wrt7.jl:12\nin expression starting at\
    \ /tmp/tmpod99wrt7.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    i\
    \ = 0\n    j = string.length()\n    while i < j\n        if string[i] == substring[0]\n\
    \            i += 1\n        else\n            if string[i] == substring[1]\n\
    \                i += 1\n            else\n                if string[i] == substring[2]\n\
    \                    i += 1\n                else\n                    if string[i]\
    \ == substring[3]\n                        i += 1\n                    else\n\
    \                        if string[i] == substring[4]\n                      \
    \      i += 1\n                        else\n                            if string[i]\
    \ == substring[5]\n                                i += 1\n                  \
    \          else\n                                if string[i] == substring[6]\n\
    \                                    i += 1\n                                else\n\
    \                                    if string[i] == substring[7]\n          \
    \                              i += 1\n                                    else\n\
    \                                        if string[i] == substring[8]\n      \
    \                                      i += 1\n                              \
    \          else\n                                            if string[i] == substring[9]\n\
    \                                                i += 1\n                    \
    \                        else\n                                              \
    \  if string[i] == substring[10]\n                                           \
    \         i += 1\n                                                else\n     \
    \                                               if string[i] == substring[11]\n\
    \                                                        i += 1\n            \
    \                                        else\n                              \
    \                          if string[i] == substring[12]\n                   \
    \                                         i += 1\n                           \
    \                             else\n                                         \
    \                   if string[i] == substring[13]\n                          \
    \                                      i += 1\n                              \
    \                              else\n                                        \
    \                        if string[i] == substring[14]\n                     \
    \                                               i += 1\n                     \
    \                                           else\n                           \
    \                                         if string[i] == substring[15]\n    \
    \                                                                    i += 1\n\
    \                                                                    else\n  \
    \                                                                      if string[i]\
    \ == substring[16]\n                                                         \
    \                   i += 1\n                                                 \
    \                       else\n                                               \
    \                             if string[i] == substring[17]\n                \
    \                                                                i += 1\n    \
    \                                                                        else\n\
    \                                                                            \
    \    if string[i] == substring[18]\n                                         \
    \                                           i += 1\n                         \
    \                                                       else\n               \
    \                                                                     if string[i]\
    \ == substring[19]\n                                                         \
    \                               i += 1\n                                     \
    \                                               else\n                       \
    \                                                                 if string[i]\
    \ == substring[20]\n                                                         \
    \                                   i += 1\n                                 \
    \                                                       else\n               \
    \                                                                            \
    \ if string[i] == substring[21]\n                                            \
    \                                                    i += 1\n                \
    \                                                                            else\n\
    \                                                                            \
    \                    if string[i] == substring[22]\n                         \
    \                                                                           i\
    \ += 1\n                                                                     \
    \                           else\n                                           \
    \                                                         if string[i] == substring[23]\n\
    \                                                                            \
    \                            i += 1\n                                        \
    \                                                            else\n          \
    \                                                                            \
    \                  if string[i] == substring[24]\n                           \
    \                                                                            \
    \     i += 1\n                                                               \
    \                                         else\n                             \
    \                                                                            \
    \   if string[i] == substring[25]\n                                          \
    \                                                                      i += 1\n\
    \                                                                            \
    \                                else\n                                      \
    \                                                                          if\
    \ string[i] == substring[26]\n                                               \
    \                                                                     i += 1\n\
    \                                                                            \
    \                                    else\n                                  \
    \                                                                            \
    \      if string[i] == substring[27]\n                                       \
    \                                                                            \
    \     i += 1\n                                                               \
    \                                                     else\n                 \
    \                                                                            \
    \                           if string[i] == substring[28]\n                  \
    \                                                                            \
    \                              i += 1\n                                      \
    \                                                                            \
    \      else\n                                                                \
    \                                                            if string[i] == substring[29]\n\
    \                                                                            \
    \                                                    i += 1\n                \
    \                                                                            \
    \                                else\n                                      \
    \                                                                            \
    \              if string[i] == substring[30]\n                               \
    \                                                                            \
    \                         i += 1\n                                           \
    \                                                                            \
    \             else\n                                                         \
    \                                                                            \
    \   \nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpadii7ysn.jl:106\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpadii7ysn.jl:1\n\
    in expression starting at /tmp/tmpadii7ysn.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring[0]\n            count\
    \ = count + 1\n            \n            if substring[1] == c\n              \
    \  count = count + 1\n                \n            if substring[2] == c\n   \
    \             count = count + 1\n                \n            if substring[3]\
    \ == c\n                count = count + 1\n                \n            if substring[4]\
    \ == c\n                count = count + 1\n                \n            if substring[5]\
    \ == c\n                count = count + 1\n                \n            if substring[6]\
    \ == c\n                count = count + 1\n                \n            if substring[7]\
    \ == c\n                count = count + 1\n                \n            if substring[8]\
    \ == c\n                count = count + 1\n                \n            if substring[9]\
    \ == c\n                count = count + 1\n                \n            if substring[10]\
    \ == c\n                count = count + 1\n                \n            if substring[11]\
    \ == c\n                count = count + 1\n                \n            if substring[12]\
    \ == c\n                count = count + 1\n                \n            if substring[13]\
    \ == c\n                count = count + 1\n                \n            if substring[14]\
    \ == c\n                count = count + 1\n                \n            if substring[15]\
    \ == c\n                count = count + 1\n                \n            if substring[16]\
    \ == c\n                count = count + 1\n                \n            if substring[17]\
    \ == c\n                count = count + 1\n                \n            if substring[18]\
    \ == c\n                count = count + 1\n                \n            if substring[19]\
    \ == c\n                count = count + 1\n                \n            if substring[20]\
    \ == c\n                count = count + 1\n                \n            if substring[21]\
    \ == c\n                count = count + 1\n                \n            if substring[22]\
    \ == c\n                count = count + 1\n                \n            if substring[23]\
    \ == c\n                count = count + 1\n                \n            if substring[24]\
    \ == c\n                count = count + 1\n                \n            if substring[25]\
    \ == c\n                count = count + 1\n                \n            if substring[26]\
    \ == c\n                count = count + 1\n                \n            if substring[27]\
    \ == c\n                count = count + 1\n                \n            if substring[28]\
    \ == c\n                count = count + 1\n                \n            if substring[29]\
    \ == c\n                count = count + 1\n                \n            if substring[30]\
    \ == c\n                count = count + 1\n                \n            if substring[31]\
    \ == c\n                count = count + 1\n                \n            if substring[32]\
    \ == c\n                count = count + 1\n                \n            if substring[33]\
    \ == c\n                count = count + 1\n                \n            if substring[34]\
    \ == c\n                count = count + 1\n                \n            if substring[35]\
    \ == c\n                count = count + 1\n                \nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkbjdbhpk.jl:1\nin expression starting at /tmp/tmpkbjdbhpk.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for i in string.chars()\n        if substring == string[i]\n\
    \            count += 1\n        else\n            count = 0\n    end\n    \n\
    \    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaa\", \"aaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\"\
    , \"aaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"\
    aaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaaba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaabaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaabaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaabaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaabaaaba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaabaaabaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaabaaabaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaabaaabaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaabaaabaaaba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaaaaaabaaabaaab\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbadvek6f.jl:24\nin expression starting at\
    \ /tmp/tmpbadvek6f.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times it appears in the original string and in the reverse of the original\
    \ string. Test it on some examples:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc0t37fph.jl:12\nin expression starting at\
    \ /tmp/tmpc0t37fph.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    i\
    \ = 0\n    \n    while i < length(substring)\n        if substring(i, 1) == string\n\
    \            i += 1\n        else\n            i += 1\n    end\n    \n    return\
    \ i\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and a substring and returns the number of times the substring\
    \ appears in the string. \n>>> how_many_times(\"abcabc\", \"b\")\n2\n>>> how_many_times(\"\
    abcabc\", \"bc\")\n1\n>>> how_many_times(\"abcabc\", \"abc\")\n3\n>>> how_many_times(\"\
    abcabc\", \"ac\")\n0\n>>> how_many_times(\"abcabc\", \"a\")\n0\n>>> how_many_times(\"\
    abcabc\", \"ab\")\n0\n>>> how_many_times(\"abcabc\", \"abc\")\n3\n>>> how_many_times(\"\
    abcabc\", \"ac\")\n0\n>>> how_many_times(\"abcabc\", \"a\")\n0\n>>> how_many_times(\"\
    abcabc\", \"ab\")\n0\n>>> how_many_times(\"abcabc\", \"abc\")\n3\n>>> how_many_times(\"\
    abcabc\", \"ac\")\n0\n>>> how_many_times(\"abcabc\", \"a\")\n0\n>>> how_many_times(\"\
    abcabc\", \"ab\")\n0\n>>> how_many_times(\"abcabc\", \"abc\")\n3\n>>> how_many_times(\"\
    abcabc\", \"ac\")\n0\n>>> how_many_times(\"abcabc\", \"a\")\n0\n>>> how_many_times(\"\
    abcabc\", \"ab\")\n0\n>>> how_many_times(\"abcabc\", \"abc\")\n3\n>>> how_many_times(\"\
    abcabc\", \"ac\")\n0\n>>> how_many_times(\"abcabc\", \"a\")\n0\n>>> how_many_times(\"\
    abcabc\", \"ab\")\n0\n>>> how_many_times(\"abcabc\", \"abc\")\n3\n>>> how_many_times(\"\
    abcabc\", \"ac\")\n0\n>>> how_many_times(\"abcabc\", \"a\")\n0\n>>> how_many_\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyqlwk5q1.jl:24\nin expression starting at\
    \ /tmp/tmpyqlwk5q1.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string. Case insensitive.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvyhbf6pq.jl:12\nin expression starting at\
    \ /tmp/tmpvyhbf6pq.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\"\
    , \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaa\", \"aaa\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaaaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaaaa\", \"aaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\"\
    , \"aaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\",\
    \ \"aaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\"\
    , \"aaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\"\
    , \"aaaaaaab\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\"\
    , \"aaaaaaac\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\"\
    , \"aaaaaaad\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\"\
    , \"aaaaaaae\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\"\
    , \"aaaaaaaf\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\"\
    , \"aaaaaaag\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\"\
    , \"aaaaaaah\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t\
    @test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\
    \t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\"\
    , \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyfbipbd6.jl:24\nin expression starting at\
    \ /tmp/tmpyfbipbd6.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times each character appears in the string. \nFor\
    \ example, for the string \"abcabc\", the function should return [('a', 3), ('b',\
    \ 2), ('c', 3)]\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppil7ycmo.jl:12\nin expression starting at\
    \ /tmp/tmppil7ycmo.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of times each character appears in the string.\
    \ Ignore case when counting.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz52kxccz.jl:12\nin expression starting at\
    \ /tmp/tmpz52kxccz.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    i = 0\n    \n    while\
    \ i < len_substring\n        if substring(i, len_substring) == string\n      \
    \      i += 1\n        else\n            i += 1\n    end\n    \n    return i\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string. Count overlaping cases.\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n>>>\
    \ how_many_times(\"aaaa\", \"aaa\")\n4\n>>> how_many_times(\"aaaa\", \"aaaa\"\
    )\n4\n>>> how_many_times(\"aaaa\", \"aaaaa\")\n4\n>>> how_many_times(\"aaaa\"\
    , \"aaaaaa\")\n4\n>>> how_many_times(\"aaaa\", \"aaaaaaa\")\n4\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaab\")\n4\n>>> how_many_times(\"aaaa\", \"aaaaaaabb\")\n4\n>>>\
    \ how_many_times(\"aaaa\", \"aaaaaaabbb\")\n4\n>>> how_many_times(\"aaaa\", \"\
    aaaaaaabbbb\")\n4\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbba\")\n4\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaa\")\n4\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaa\"\
    )\n4\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaa\")\n4\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaa\")\n4\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaa\"\
    )\n4\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaaa\")\n4\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaaaaa\")\n4\n>>> ho\nusing Test\n\n@testset begin\n\n\
    candidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeux88m4h.jl:30\nin expression starting at\
    \ /tmp/tmpeux88m4h.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns a string\
    \ where all occurrences of \"a\" have been replaced with \"b\".\nusing Test\n\n\
    @testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\")\
    \ == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoc9u5jvq.jl:12\nin expression starting at\
    \ /tmp/tmpoc9u5jvq.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string[1:],\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns the number\
    \ of times a substring appears in the string. Count overlaping cases.\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph7wlydb6.jl:12\nin expression starting at\
    \ /tmp/tmph7wlydb6.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    i\
    \ = 0\n    \n    while i < length(substring)\n        if string[i] == substring[i]\n\
    \            i += 1\n        else\n            i = 0\n        end\n    end\n \
    \   \n    return i\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    \", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise: Write a function that returns the number of times a given substring\
    \ can be found in the original string. Count overlaping cases.\nusing Test\n\n\
    @testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\")\
    \ == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpibfb0i4_.jl:25\nin expression starting at\
    \ /tmp/tmpibfb0i4_.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count = count + 1\n            \n            if char == substring[1]\n \
    \               count = count + 1\n                \n            if char == substring[2]\n\
    \                count = count + 1\n                \n            if char == substring[3]\n\
    \                count = count + 1\n                \n            if char == substring[4]\n\
    \                count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpagss85ga.jl:1\nin expression starting at /tmp/tmpagss85ga.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else if substring[0] == string[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return how_many_times(string[1:], substring[1:])\n\
    end\n</cell>\n<code language=julia-1.1>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.1>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.1>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and a substring and returns the number of times the substring\
    \ appears in the string. \nWrite a function that takes a string and a substring\
    \ and returns the number of times the substring appears in the string. \nWrite\
    \ a function that takes a string and a substring and returns the number of times\
    \ the substring appears in the string. \nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string. \nWrite a function that takes a string and a substring and returns the\
    \ number of times the substring appears in the string. \nWrite a function that\
    \ takes a string and a substring and returns the number of times the substring\
    \ appears in the string. \nWrite a function that takes a string and a substring\
    \ and returns the number of times the substring appears in the string. \nWrite\
    \ a function that takes a string and a substring and returns the number of times\
    \ the substring appears in the string. \nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string. \nWrite a function that takes a string and a substring and returns the\
    \ number of times the substring appears in the string. \nWrite a function that\
    \ takes a string and a substring and returns the number of times the substring\
    \ appears in the string. \nWrite a function that takes a string and a substring\
    \ and returns the number of times the substring appears in the string. \nWrite\
    \ a function that takes a string and a substring and returns the number of times\
    \ the substring appears in the string. \nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string. \nWrite a function that takes a string and a substring and returns the\
    \ number of times the substring appears in the string. \nWrite a function that\
    \ takes a string and a substring and returns the number of times the substring\
    \ appears in the string. \nWrite a function that takes a string and a substring\
    \ and returns the number of times the substring appears in the string. \nWrite\
    \ a function that takes a string \nusing Test\n\n@testset begin\n\ncandidate =\
    \ how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpag4emxxi.jl:12\nin expression starting at\
    \ /tmp/tmpag4emxxi.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string. Count overlaping cases.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1yfsrs12.jl:12\nin expression starting at\
    \ /tmp/tmp1yfsrs12.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7j7703jn.jl:1\nin expression starting at /tmp/tmp7j7703jn.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    count = 0\n    for c in string\n        if c == substring\n          \
    \  count += 1\n        end\n    end\n    return count\nend\n</cell>\n<code language=julia-1.3>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and a\
    \ substring as arguments and returns the number of times the substring appears\
    \ in the string. Ignore case when searching.\nusing Test\n\n@testset begin\n\n\
    candidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprhy7ktef.jl:18\nin expression starting at\
    \ /tmp/tmprhy7ktef.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string. Count overlaping cases.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1yfsrs12.jl:12\nin expression starting at\
    \ /tmp/tmp1yfsrs12.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    i\
    \ = 0\n    \n    while i <= length(substring)\n        if substring(i, 1) == string\n\
    \            i += 1\n        else\n            i += 1\n        end\n    end\n\
    \    \n    return i\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    \", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkan495ud.jl:25\nin expression starting at\
    \ /tmp/tmpkan495ud.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpteifpn4i.jl:1\nin expression starting at /tmp/tmpteifpn4i.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    i\
    \ = 0\n    j = string.length()\n    while i < j\n        if string[i] == substring[0]\n\
    \            i += 1\n            j = i\n        else\n            if string[i]\
    \ == substring[1]\n                i += 1\n                j = i\n           \
    \ else\n                if string[i] == substring[2]\n                    i +=\
    \ 1\n                    j = i\n                else\n                    if string[i]\
    \ == substring[3]\n                        i += 1\n                        j =\
    \ i\n                    else\n                        if string[i] == substring[4]\n\
    \                            i += 1\n                            j = i\n     \
    \                   else\n                            if string[i] == substring[5]\n\
    \                                i += 1\n                                j = i\n\
    \                            else\n                                if string[i]\
    \ == substring[6]\n                                    i += 1\n              \
    \                      j = i\n                                else\n         \
    \                           if string[i] == substring[7]\n                   \
    \                     i += 1\n                                        j = i\n\
    \                                    else\n                                  \
    \      if string[i] == substring[8]\n                                        \
    \    i += 1\n                                            j = i\n             \
    \                           else\n                                           \
    \ if string[i] == substring[9]\n                                             \
    \   i += 1\n                                                j = i\n          \
    \                                  else\n                                    \
    \            if string[i] == substring[10]\n                                 \
    \                   i += 1\n                                                 \
    \   j = i\n                                                else\n            \
    \                                        if string[i] == substring[11]\n     \
    \                                                   i += 1\n                 \
    \                                       j = i\n                              \
    \                      else\n                                                \
    \        if string[i] == substring[12]\n                                     \
    \                       i += 1\n                                             \
    \               j = i\n                                                      \
    \  else\n                                                            if string[i]\
    \ == substring[13]\n                                                         \
    \       i += 1\n                                                             \
    \   j = i\n                                                            else\n\
    \                                                                if string[i]\
    \ == substring[14]\n                                                         \
    \           i += 1\n                                                         \
    \           j = i\n                                                          \
    \      else\n                                                                \
    \    if string[i] == substring[15]\n                                         \
    \                               i += 1\n                                     \
    \                                   j = i\n                                  \
    \                                  else\n                                    \
    \                    if string[i] == substring[16]\n                         \
    \                                   i += 1\n                                 \
    \                           j = i\n                                          \
    \              else\n                                                        \
    \    if string[i] == substring[17]\n                                         \
    \                       i += 1\n                                             \
    \                   j = i\n                                                  \
    \          else\n                                                            \
    \    if string[i] == substring[18]\n                                         \
    \                           i += 1\n                                         \
    \                           j = i\n                                          \
    \                      else\n                                                \
    \                    if string[i] == substring[19]\n                         \
    \                                               i += 1\n                     \
    \                                                   j = i\n                  \
    \                                                  else\n                    \
    \                                    if string[i] == substring[20]\n         \
    \                                                   i += 1\n                 \
    \                                           j = i\n                          \
    \                              else\n                                        \
    \                    if string[i] == substring[21]\n                         \
    \                                       i += 1\n                             \
    \                                   j = i\n                                  \
    \                          else\n                                            \
    \                    if string[i] == substring[22]\n                         \
    \                                           i += 1\n                         \
    \                                           j = i\n                          \
    \                                      else\n                                \
    \                                    if string[i] == substring[23]\n         \
    \                                                               i += 1\n     \
    \                                                                   j = i\n  \
    \                                                                  else\n    \
    \                                                    if string[i] == substring[24]\n\
    \                                                            i += 1\n        \
    \                                                    j = i\n                 \
    \                                       else\n                               \
    \                             if string[i] == substring[25]\n                \
    \                                                i += 1\n                    \
    \                                            j = i\n                         \
    \                                   else\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpeyakfj5g.jl:116\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpeyakfj5g.jl:1\n\
    in expression starting at /tmp/tmpeyakfj5g.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    i\
    \ = 0\n    \n    while i < length(string)\n        if substring(i, length(string))\
    \ in string\n            i += 1\n        else\n            i = 0\n        end\n\
    \    end\n    \n    return i\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    \", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times a substring appears in the string. Count overlaping cases.\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz4nwbhlt.jl:25\nin expression starting at\
    \ /tmp/tmpz4nwbhlt.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.3>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.3>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns the number of times a substring appears in the string. Count overlaping\
    \ cases.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgftj41ka.jl:12\nin expression starting at\
    \ /tmp/tmpgftj41ka.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times a substring appears within\
    \ it.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfny0yo7_.jl:24\nin expression starting at\
    \ /tmp/tmpfny0yo7_.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of times a substring appears in the string. Count overlaping cases.\n>>> how_many_times(\"\
    aaaa\", \"aa\")\n3\n>>> how_many_times(\"aaaa\", \"aaa\")\n2\n>>> how_many_times(\"\
    aaaa\", \"aaaa\")\n1\n>>> how_many_times(\"aaaa\", \"aaaaa\")\n0\n>>> how_many_times(\"\
    aaaa\", \"aaaaaa\")\n0\n>>> how_many_times(\"aaaa\", \"aaaaaaa\")\n0\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaab\")\n0\n>>> how_many_times(\"aaaa\", \"aaaaaaabb\")\n0\n>>>\
    \ how_many_times(\"aaaa\", \"aaaaaaabbb\")\n0\n>>> how_many_times(\"aaaa\", \"\
    aaaaaaabbbb\")\n0\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbb\")\n0\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaabbbbbb\")\n0\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbbb\"\
    )\n0\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbbbb\")\n0\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaabbbbbbbbb\")\n0\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbbbbbb\"\
    )\n0\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbbbbbbb\")\n0\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaabbbbbbbbbbbb\")\n0\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbbbbbbbbb\"\
    )\n0\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbbbbbbbbbb\")\n0\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaabbbbbbbbbbbbbbb\")\n0\n>>> how_many_time\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgnwnb0i1.jl:12\nin expression starting at\
    \ /tmp/tmpgnwnb0i1.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    i\
    \ = 0\n    \n    while i < length(string)\n        if substring(i, 1) == string(i)\n\
    \            i += 1\n        else\n            i += 1\n    end\n    \n    return\
    \ i\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and a substring and returns the number of times the substring\
    \ appears in the string. Count overlaping cases.\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy4wgz35u.jl:24\nin expression starting at\
    \ /tmp/tmpy4wgz35u.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    i = 0\n    \n    while\
    \ i < len_substring\n        if substring(i, len_substring) == string\n      \
    \      i += 1\n        else\n            i -= 1\n    end\n    \n    return i\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times the substring appears in\
    \ the string. Count overlaping cases.\n    >>> how_many_times(\"aaa\", \"aa\"\
    )\n    3\n    >>> how_many_times(\"aaaa\", \"aa\")\n    3\n    >>> how_many_times(\"\
    aaaa\", \"aaa\")\n    3\n    >>> how_many_times(\"aaaa\", \"aaab\")\n    4\n \
    \   >>> how_many_times(\"aaaa\", \"aaaba\")\n    4\n    >>> how_many_times(\"\
    aaaa\", \"aaabaa\")\n    4\n    >>> how_many_times(\"aaaa\", \"aaabaaa\")\n  \
    \  4\n    >>> how_many_times(\"aaaa\", \"aaabaaab\")\n    4\n    >>> how_many_times(\"\
    aaaa\", \"aaabaaaba\")\n    4\n    >>> how_many_times(\"aaaa\", \"aaabaaabaa\"\
    )\n    4\n    >>> how_many_times(\"aaaa\", \"aaabaaabaaa\")\n    4\n    >>> how_many_times(\"\
    aaaa\", \"aaabaaabaaab\")\n    4\n    >>> how_many_times(\"aaaa\", \"aaabaaabaaaba\"\
    )\n    4\n    >>> how_many_times(\"aaaa\", \"aaabaaabaaabaa\")\n    4\n    >>>\
    \ how_many_times(\"aaaa\", \"aaabaaabaaabaaa\")\n    4\n    >>> how_many_times(\"\
    aaaa\", \"aaabaaabaaabaaab\")\n    4\n    >>> how_many_times(\"aaaa\", \"aaabaaabaaabaaaba\"\
    )\n    4\n    >>> how_many_times(\"aaaa\", \"aaabaaabaaabaaabaa\")\n    4\n  \
    \  >>> how_many_times(\"aaaa\", \"aaabaaabaaabaaabaa\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvdn52njo.jl:30\nin expression starting at\
    \ /tmp/tmpvdn52njo.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return count_substring(string, substring)\n    \n    if len_string >\
    \ len_substring\n        return how_many_times(substring(string, 1, len_substring),\
    \ substring)\n    \n    return how_many_times(substring(string, 0, len_string),\
    \ substring)\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"\
    a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of times a substring appears\
    \ in a given string.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5excn9pb.jl:27\nin expression starting at\
    \ /tmp/tmp5excn9pb.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return count_substring(string, substring)\n    \n    if len_string <\
    \ len_substring\n        return how_many_times(substring(string, 1, len_substring),\
    \ substring)\n    \n    return how_many_times(substring(string, 0, len_string),\
    \ substring)\nend\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7devf6ac.jl:1\nin expression starting at /tmp/tmp7devf6ac.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string. Count overlaping cases.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5_bz8mf4.jl:12\nin expression starting at\
    \ /tmp/tmp5_bz8mf4.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string. \nWrite a function that takes a string and a substring and returns the\
    \ number of times the substring appears in the string and also counts overlaping\
    \ cases.\nWrite a function that takes a string and a substring and returns the\
    \ number of times the substring appears in the string and also counts overlaping\
    \ cases and returns the number of times the substring appears in the string and\
    \ also counts overlaping cases and returns the number of times the substring appears\
    \ in the string and also counts overlaping cases and returns the number of times\
    \ the substring appears in the string and also counts overlaping cases and returns\
    \ the number of times the substring appears in the string and also counts overlaping\
    \ cases and returns the number of times the substring appears in the string and\
    \ also counts overlaping cases and returns the number of times the substring appears\
    \ in the string and also counts overlaping cases and returns the number of times\
    \ the substring appears in the string and also counts overlaping cases and returns\
    \ the number of times the substring appears in the string and also counts overlaping\
    \ cases and returns the number of times the substring appears in the string and\
    \ also counts overlaping cases and returns the number of times the substring appears\
    \ in the string and also counts overlaping cases and returns the number of times\
    \ the substring appears in the string and also counts overlaping cases and returns\
    \ the number of times the substring appears in the string and also counts overlaping\
    \ cases and returns the number of times the substring appears in the string and\
    \ also counts overlaping cases and returns the number of times the substring appears\
    \ in the string and also counts overlaping cases and returns the number of times\
    \ the substring appears in the string and also counts overlaping cases and returns\
    \ the number of times the substring appears in the string and also counts overlaping\
    \ cases and returns the number of times the substring appears in the string and\
    \ also counts overlaping cases and returns the number of times the substring appears\
    \ in the string and also counts overlaping cases and returns the number of times\
    \ the substring appears in the string and also count\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo331xfir.jl:12\nin expression starting at\
    \ /tmp/tmpo331xfir.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.0>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.0>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns the number of times a substring appears in the string. Count overlaping\
    \ cases.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2tx3_5wi.jl:12\nin expression starting at\
    \ /tmp/tmp2tx3_5wi.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ substring[0] == string[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string. Case insensitive.\n\
    >>> how_many_times(\"aaa\", \"A\")\n2\n>>> how_many_times(\"aaaa\", \"A\")\n3\n\
    >>> how_many_times(\"aaaa\", \"a\")\n1\n>>> how_many_times(\"aaaa\", \"Aa\")\n\
    2\n>>> how_many_times(\"aaaa\", \"Aa\")\n2\n>>> how_many_times(\"aaaa\", \"A\"\
    )\n2\n>>> how_many_times(\"aaaa\", \"a\")\n1\n>>> how_many_times(\"aaaa\", \"\
    Aa\")\n2\n>>> how_many_times(\"aaaa\", \"Aa\")\n2\n>>> how_many_times(\"aaaa\"\
    , \"A\")\n2\n>>> how_many_times(\"aaaa\", \"a\")\n1\n>>> how_many_times(\"aaaa\"\
    , \"Aa\")\n2\n>>> how_many_times(\"aaaa\", \"Aa\")\n2\n>>> how_many_times(\"aaaa\"\
    , \"A\")\n2\n>>> how_many_times(\"aaaa\", \"a\")\n1\n>>> how_many_times(\"aaaa\"\
    , \"Aa\")\n2\n>>> how_many_times(\"aaaa\", \"Aa\")\n2\n>>> how_many_times(\"aaaa\"\
    , \"A\")\n2\n>>> how_many_times(\"aaaa\", \"a\")\n1\n>>> how_many_times(\"aaaa\"\
    , \"Aa\")\n2\n>>> how_many_times(\"aaaa\", \"Aa\")\n2\n>>> how_many_times(\"aaaa\"\
    , \"A\")\n2\n>>> how_many_times(\"aaaa\", \"a\")\n1\n>>> how_many_times(\"aaaa\"\
    , \"Aa\")\n2\n>>> how_many_times(\"aaaa\", \"Aa\")\n2\n>>> how_many_times(\"aaaa\"\
    , \"A\")\n\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6pf362ev.jl:12\nin expression starting at\
    \ /tmp/tmp6pf362ev.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times each character appears in the string. \nFor\
    \ example, \n    count_chars(\"abcabc\") should return {\"a\" => 3, \"b\" => 2,\
    \ \"c\" => 3}\nHint: Use a dictionary to store the counts\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp17wrvq7l.jl:12\nin expression starting at\
    \ /tmp/tmp17wrvq7l.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return count_substring(string, substring)\n    \n    if len_substring\
    \ > len_string\n        return how_many_times(substring(string, 0, len_substring),\
    \ substring)\n    \n    return how_many_times(substring(string, 0, len_string),\
    \ substring)\nend\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkl0u9s00.jl:1\nin expression starting at /tmp/tmpkl0u9s00.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring[0]\n            count\
    \ += 1\n            \n            if count > 1\n                return count\n\
    \            \n            count = 0\n            \n        else\n           \
    \ count = 0\n    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and a\
    \ substring and returns the number of times the substring appears in the string.\
    \ Count overlaping cases.\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"\
    aaaa\", \"aa\")\n3\n>>> how_many_times(\"aaaa\", \"aaa\")\n3\n>>> how_many_times(\"\
    aaaa\", \"aaab\")\n3\n>>> how_many_times(\"aaaa\", \"aaaba\")\n3\n>>> how_many_times(\"\
    aaaa\", \"aaabaa\")\n3\n>>> how_many_times(\"aaaa\", \"aaabaaa\")\n3\n>>> how_many_times(\"\
    aaaa\", \"aaabaaab\")\n3\n>>> how_many_times(\"aaaa\", \"aaabaaaba\")\n3\n>>>\
    \ how_many_times(\"aaaa\", \"aaabaaabaa\")\n3\n>>> how_many_times(\"aaaa\", \"\
    aaabaaabaaa\")\n3\n>>> how_many_times(\"aaaa\", \"aaabaaabaaab\")\n3\n>>> how_many_times(\"\
    aaaa\", \"aaabaaabaaaba\")\n3\n>>> how_many_times(\"aaaa\", \"aaabaaabaaabaa\"\
    )\n3\n>>> how_many_times(\"aaaa\", \"aaabaaabaaabaaa\")\n3\n>>> how_many_times(\"\
    aaaa\", \"aaabaaabaaabaaab\")\n3\n>>> how_many_times(\"aaaa\", \"aaabaaabaaabaaaba\"\
    )\n3\n>>> how_many_times(\"aaaa\", \"aaabaaabaaabaaabaa\")\n3\n>>> how_many_times(\"\
    aaaa\", \"aaabaaabaaabaaabaaa\")\n3\n>>> how_many_times(\"aaaa\", \"aaabaaabaaabaaabaa\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzpdx367v.jl:30\nin expression starting at\
    \ /tmp/tmpzpdx367v.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times a substring appears in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxl193e84.jl:12\nin expression starting at\
    \ /tmp/tmpxl193e84.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring[0]\n            count\
    \ += how_many_times(string[1..], substring[1:])\n        else\n            count\
    \ += how_many_times(string[1..], substring)\n    end\n    \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times each character appears in\
    \ the string.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t\
    @test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\
    \t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\"\
    , \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"]\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1vwwgmo5.jl:17\nin expression starting at /tmp/tmp1vwwgmo5.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else \n\
    \        string_length = len(string)\n        substring_index = 0\n        substring_index\
    \ += string.find(substring, substring_index)\n        substring_index += 1\n \
    \       substring_index += string.find(substring, substring_index)\n        substring_index\
    \ += 1\n        substring_index += string.find(substring, substring_index)\n \
    \       substring_index += 1\n        substring_index += string.find(substring,\
    \ substring_index)\n        substring_index += 1\n        substring_index += string.find(substring,\
    \ substring_index)\n        substring_index += 1\n        substring_index += string.find(substring,\
    \ substring_index)\n        substring_index += 1\n        substring_index += string.find(substring,\
    \ substring_index)\n        substring_index += 1\n        substring_index += string.find(substring,\
    \ substring_index)\n        substring_index += 1\n        substring_index += string.find(substring,\
    \ substring_index)\n        substring_index += 1\n        substring_index += string.find(substring,\
    \ substring_index)\n        substring_index += 1\n        substring_index += string.find(substring,\
    \ substring_index)\n        substring_index += 1\n        substring_index += string.find(substring,\
    \ substring_index)\n        substring_index += 1\n        substring_index += string.find(substring,\
    \ substring_index)\n        substring_index += 1\n        substring_index += string.find(substring,\
    \ substring_index)\n        substring_index += 1\n        substring_index += string.find(substring,\
    \ substring_index)\n        substring_index += 1\n        substring_index += string.find(substring,\
    \ substring_index)\n        substring_index += 1\n        substring_index += string.find(substring,\
    \ substring_index)\n        substring_index += 1\n        substring_index += string.find(substring,\
    \ substring_index)\n        substring_index += 1\n        substring_index += string.find(substring,\
    \ substring_index)\n        substring_index += 1\n        substring_index += string.find(substring,\
    \ substring_index)\n        substring_index += 1\n        substring_index += string.find(substring,\
    \ substring_index)\n        substring_index += 1\n        substring_index += string.find(substring,\
    \ substring_index)\n        substring_index += 1\n        substring_index += string.find(substring,\
    \ substring_index)\n        substring_index += 1\n        substring_index += string.find(substring,\
    \ substring_index)\n        substring_index += 1\n        substring_index += string.find(substring,\
    \ substring_index)\n        substring_index += 1\n        substring_index += string.find(substring,\
    \ substring_index)\n        substring_index += 1\n        substring_index += string.find(substring,\
    \ substring_index)\n        substring_index += 1\n        substring_index += string.find(substring,\
    \ substring_index)\n        substring_index += 1\n        substring_index += string.find(substring,\
    \ substring_index)\n        substring_index += 1\n        substring_index += string.find(substring,\
    \ substring_index)\n        substring_index += 1\n        substring_index += string.find(\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp10c5730m.jl:78\nin expression starting at\
    \ /tmp/tmp10c5730m.jl:78\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string[1:],\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaa\"\
    , \"aa\")\n</cell>\n<text>\nExercise\nWrite a function that counts the number\
    \ of times a given substring can be found in the original string. Count overlaping\
    \ cases.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5vb7r9wz.jl:12\nin expression starting at\
    \ /tmp/tmp5vb7r9wz.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of times a substring appears in the string. Count overlaping cases.\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqevbhefx.jl:12\nin expression starting at\
    \ /tmp/tmpqevbhefx.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else \n\
    \        return 1 + how_many_times(string[1:], substring) \nend\n</cell>\n<text>\n\
    Exercise 2: Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nHint: Use how_many_times(string, substring).\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqhrdx7ie.jl:13\nin expression\
    \ starting at /tmp/tmpqhrdx7ie.jl:13\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string. Case insensitive.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ktkx4dw.jl:12\nin expression starting at\
    \ /tmp/tmp3ktkx4dw.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    count = 0\n    for c in string:\n        if c == substring:\n        \
    \    count += 1\n    return count\n</code>\n<|/ a dscore=2 |>\n<| a |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptcbrj0b6.jl:12\nin expression starting at\
    \ /tmp/tmptcbrj0b6.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ substring.length <= string.length\n        return substring.length\n    else\n\
    \        return how_many_times(string.substring(0,substring.length), substring)\
    \ + how_many_times(string.substring(substring.length), substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of times\
    \ each character appears in the string. \nFor example, for the string \"abcabc\"\
    , the function should return [('a', 3), ('b', 2), ('c', 3)]\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_uzbhhdc.jl:12\nin expression starting at\
    \ /tmp/tmp_uzbhhdc.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ substring == string\n        return 1\n    else\n        return 1 + how_many_times(string[1..end-1],\
    \ substring)\nend\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\", \"\
    a\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ a substring appears in the string. Count overlaping cases.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpotz9_dlp.jl:12\nin expression starting at\
    \ /tmp/tmpotz9_dlp.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    string::String\
    \ = string.lower()\n    substring::String = substring.lower()\n    \n    string::Int64\
    \ = 0\n    substring::Int64 = 0\n    \n    if substring[0] == string[0]\n    \
    \    substring::Int64 = 1\n    end\n    \n    for i in string.char_indices()\n\
    \        if substring[0] == i[1]\n            substring::Int64 = substring[1]\
    \ + substring[2]\n        end\n    end\n    \n    for i in substring.char_indices()\n\
    \        if string[0] == i[1]\n            string::Int64 = string[1] + string[2]\n\
    \        end\n    end\n    \n    return string::Int64 + substring::Int64\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaa\", \"aaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaa\", \"aaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaaaaab\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaaaaab\", \"aa\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaaaaab\", \"aaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaaaaabb\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp41url3lk.jl:37\nin expression starting at\
    \ /tmp/tmp41url3lk.jl:37\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return count_overlaping_cases(string, substring)\n    \n    if len_string\
    \ > len_substring\n        return how_many_times(substring(string, 1, len_substring),\
    \ substring)\n    \n    return how_many_times(substring(string, 0, len_string),\
    \ substring)\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"\
    a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ it appears in the original string with different cases. For example, if the\
    \ string was \"Hello World!\" and the substring was \"Hello\", the function would\
    \ return 2.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv6ot9yj_.jl:27\nin expression starting at\
    \ /tmp/tmpv6ot9yj_.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    count_substring = 0\n\
    \    \n    for i from 0 to len_string-1\n        if string[i] == substring[0]\n\
    \            count_substring += 1\n            \n            if count_substring\
    \ == len_substring\n                return count_substring\n            \n   \
    \         count_substring = 0\n        else\n            count_substring = 0\n\
    \        end\n    end\n    \n    return 0\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and a\
    \ substring and returns the number of times the substring appears in the string.\
    \ Count overlaping cases.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptenqaxtk.jl:21\nin expression starting at\
    \ /tmp/tmptenqaxtk.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    return count\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and a substring and returns the number of times the substring\
    \ appears in the string. Count overlaping cases.\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptnwlj1y0.jl:23\nin expression starting at\
    \ /tmp/tmptnwlj1y0.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for i in string.chars()\n        if substring == i\n        \
    \    count += 1\n        else\n            if substring == string[i..]\n     \
    \           count += 1\n            else\n                if substring == string[i..i-1]\n\
    \                    count += 1\n                else\n                    if\
    \ substring == string[i..i-1]\n                        count += 1\n          \
    \          else\n                        if substring == string[i..i-1]\n    \
    \                        count += 1\n                        else\n          \
    \                  if substring == string[i..i-1]\n                          \
    \      count += 1\n                            else\n                        \
    \        if substring == string[i..i-1]\n                                    count\
    \ += 1\n                                else\n                               \
    \     if substring == string[i..i-1]\n                                       \
    \ count += 1\n                                    else\n                     \
    \                   if substring == string[i..i-1]\n                         \
    \                   count += 1\n                                        else\n\
    \                                            if substring == string[i..i-1]\n\
    \                                                count += 1\n                \
    \                            else\n                                          \
    \      if substring == string[i..i-1]\n                                      \
    \              count += 1\n                                                else\n\
    \                                                    if substring == string[i..i-1]\n\
    \                                                        count += 1\n        \
    \                                            else\n                          \
    \                              if substring == string[i..i-1]\n              \
    \                                              count += 1\n                  \
    \                                      else\n                                \
    \                            if substring == string[i..i-1]\n                \
    \                                                count += 1\n                \
    \                                            else\n                          \
    \                                      if substring == string[i..i-1]\n      \
    \                                                              count += 1\n  \
    \                                                              else\n        \
    \                                                            if substring == string[i..i-1]\n\
    \                                                                        count\
    \ += 1\n                                                                    else\n\
    \                                                                        if substring\
    \ == string[i..i-1]\n                                                        \
    \                    count += 1\n                                            \
    \                            else\n                                          \
    \                                  if substring == string[i..i-1]\n          \
    \                                                                      count +=\
    \ 1\n                                                                        \
    \    else\n                                                                  \
    \              if substring == string[i..i-1]\n                              \
    \                                                      count += 1\n          \
    \                                                                      else\n\
    \                                                                            \
    \        if substring == string[i..i-1]\n                                    \
    \                                                    count += 1\n            \
    \                                                                        else\n\
    \                                                                            \
    \            if substring == string[i..i-1]\n                                \
    \                                                            count += 1\n    \
    \                                                                            \
    \        else\n                                                              \
    \                              if substring == string[i..i-1]\n              \
    \                                                                            \
    \      count += 1\n                                                          \
    \                                  else\n                                    \
    \                                                            if substring == string[i..i-1]\n\
    \                                                                            \
    \                        count += 1\n                                        \
    \                                                        else\n              \
    \                                                                            \
    \          if substring == string[i..i-1]\n                                  \
    \                                                                      count +=\
    \ 1\n                                                                        \
    \                            else\n                                          \
    \                                                              if substring ==\
    \ string[i..i-1]\n                                                           \
    \                                                 count += 1\n               \
    \                                                                            \
    \             else\n                                                         \
    \                                                   if substring == string[i..i-1]\n\
    \                                                                            \
    \                                    count += 1\n                            \
    \                                                                            \
    \    else\n                                                                  \
    \                                              if substring == string[i..i-1]\n\
    \                                                                            \
    \                                        count += 1\n                        \
    \                                                                            \
    \            else\n                                                          \
    \                                                          if substring == string[i..i-1]\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"]\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiv69kgiu.jl:19\nin expression starting at /tmp/tmpiv69kgiu.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times a substring appears in the string. Count overlaping\
    \ cases.\n>>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\",\
    \ \"aa\")\n3\n>>> how_many_times(\"aaaa\", \"aaa\")\n3\n>>> how_many_times(\"\
    aaaaa\", \"aa\")\n4\n>>> how_many_times(\"aaaaa\", \"aaa\")\n4\n>>> how_many_times(\"\
    aaaaaa\", \"aa\")\n5\n>>> how_many_times(\"aaaaaa\", \"aaa\")\n5\n>>> how_many_times(\"\
    aaaaaaa\", \"aa\")\n6\n>>> how_many_times(\"aaaaaaa\", \"aaa\")\n6\n>>> how_many_times(\"\
    aaaaaaa\", \"aaaa\")\n7\n>>> how_many_times(\"aaaaaaa\", \"aaaaa\")\n7\n>>> how_many_times(\"\
    aaaaaaa\", \"aaaaaa\")\n7\n>>> how_many_times(\"aaaaaaa\", \"aaaaaaa\")\n7\n>>>\
    \ how_many_times(\"aaaaaaa\", \"aaaaaaab\")\n7\n>>> how_many_times(\"aaaaaaa\"\
    , \"aaaaaaac\")\n7\n>>> how_many_times(\"aaaaaaa\", \"aaaaaaad\")\n7\n>>> how_many_times(\"\
    aaaaaaa\", \"aaaaaaae\")\n7\n>>> how_many_times(\"aaaaaaa\", \"aaaaaaaf\")\n7\n\
    >>> how_many_times(\"aaaaaaa\", \"aaaaaaag\")\n7\n>>> how_many_times(\"aaaaaaa\"\
    , \"aaaaaaah\")\n7\n>>> how_many_times(\"aaaaaaa\", \"aaaaaaai\")\n7\n>>> how_many_times(\"\
    aaaaaaa\", \"aaaaaaaj\")\n7\n>>> how_many_times(\"aaaaaaa\", \"aaaaaaak\")\n7\n\
    >>> how_many_times(\"\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvagearxz.jl:12\nin expression starting at\
    \ /tmp/tmpvagearxz.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of times a substring appears within that string.\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcfndus4t.jl:12\nin expression starting at\
    \ /tmp/tmpcfndus4t.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    string::String\
    \ = string.lower()\n    substring::String = substring.lower()\n    \n    i = 0\n\
    \    \n    while i < length(substring)\n        if substring(i, 1) == string[i]\n\
    \            i += 1\n        else\n            i += 1\n    end\n    \n    return\
    \ i\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of times a substring appears in a string. Count overlaping\
    \ cases.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7wz11uta.jl:27\nin expression starting at\
    \ /tmp/tmp7wz11uta.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[len_string-1]\
    \ == substring[len_substring-1]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:-1])\n    \n    if string[len_string-1] == substring[0]\n      \
    \  return 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[0]\
    \ == substring[len_substring-1]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:-1])\n    \n    if string[len_string-1] == substring[0]\n      \
    \  return 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    \n    if string[len_string-1] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    \n    if string[0] == substring[len_substring-1]\n     \
    \   return 1 + how_many_times(string[1:], substring[1:-1])\n    \n    if string[len_string-1]\
    \ == substring[len_substring-1]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:-1])\n    \n    if string[0] == substring[0]\n        return 1 +\
    \ how_many_times(string[1:], substring[1:])\n    \n    if string[len_string-1]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    \n    if string[0] == substring[len_substring-1]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:-1])\n    \n    if string[len_string-1] == substring[len_substring-1]\n\
    \        return 1 + how_many_times(string[1:], substring[1:-1])\n    \n    if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    \n    if string[len_string-1] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    \n    if string[0] == substring[len_substring-1]\n     \
    \   return 1 + how_many_times(string[1:], substring[1:-1])\n    \n    if string[len_string-1]\
    \ == substring[len_substring-1]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:-1])\n    \n    if string[0] == substring[0]\n        return 1 +\
    \ how_many_times(string[1:], substring[1:])\n    \n    if string\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvu1b3eez.jl:20\nin expression\
    \ starting at /tmp/tmpvu1b3eez.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count = count + 1\n            \n            if char == substring[1]\n \
    \               count = count + 1\n                \n            if char == substring[2]\n\
    \                count = count + 1\n                \n            if char == substring[3]\n\
    \                count = count + 1\n                \n            if char == substring[4]\n\
    \                count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpagss85ga.jl:1\nin expression starting at /tmp/tmpagss85ga.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    string::String\
    \ = string.lower()\n    substring::String = substring.lower()\n    \n    substring::String\
    \ = substring[1:length(substring)]\n    \n    count = 0\n    \n    for char in\
    \ string\n        if char == substring\n            count += 1\n        end\n\
    \    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times each character appears in the string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy28isnb6.jl:28\nin expression starting at\
    \ /tmp/tmpy28isnb6.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a string and returns the number\
    \ of times a substring appears within the string. Count overlaping cases.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmperm_dupq.jl:12\nin expression starting at\
    \ /tmp/tmperm_dupq.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string[1:],\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times the substring appears in the original string. Count overlaping cases.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqskq8xt4.jl:12\nin expression starting at\
    \ /tmp/tmpqskq8xt4.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring[0]\n            count\
    \ = count + 1\n            \n            if substring[1] == c\n              \
    \  count = count + 1\n                \n            if substring[2] == c\n   \
    \             count = count + 1\n                \n            if substring[3]\
    \ == c\n                count = count + 1\n                \n            if substring[4]\
    \ == c\n                count = count + 1\n                \n            if substring[5]\
    \ == c\n                count = count + 1\n                \n            if substring[6]\
    \ == c\n                count = count + 1\n                \n            if substring[7]\
    \ == c\n                count = count + 1\n                \n            if substring[8]\
    \ == c\n                count = count + 1\n                \n            if substring[9]\
    \ == c\n                count = count + 1\n                \n            if substring[10]\
    \ == c\n                count = count + 1\n                \n            if substring[11]\
    \ == c\n                count = count + 1\n                \n            if substring[12]\
    \ == c\n                count = count + 1\n                \n            if substring[13]\
    \ == c\n                count = count + 1\n                \n            if substring[14]\
    \ == c\n                count = count + 1\n                \n            if substring[15]\
    \ == c\n                count = count + 1\n                \n            if substring[16]\
    \ == c\n                count = count + 1\n                \n            if substring[17]\
    \ == c\n                count = count + 1\n                \n            if substring[18]\
    \ == c\n                count = count + 1\n                \n            if substring[19]\
    \ == c\n                count = count + 1\n                \n            if substring[20]\
    \ == c\n                count = count + 1\n                \n            if substring[21]\
    \ == c\n                count = count + 1\n                \n            if substring[22]\
    \ == c\n                count = count + 1\n                \n            if substring[23]\
    \ == c\n                count = count + 1\n                \n            if substring[24]\
    \ == c\n                count = count + 1\n                \n            if substring[25]\
    \ == c\n                count = count + 1\n                \n            if substring[26]\
    \ == c\n                count = count + 1\n                \n            if substring[27]\
    \ == c\n                count = count + 1\n                \n            if substring[28]\
    \ == c\n                count = count + 1\n                \n            if substring[29]\
    \ == c\n                count = count + 1\n                \n            if substring[30]\
    \ == c\n                count = count + 1\n                \n            if substring[31]\
    \ == c\n                count = count + 1\n                \n            if substring[32]\
    \ == c\n                count = count + 1\n                \n            if substring[33]\
    \ == c\n                count = count + 1\n                \n            if substring[34]\
    \ == c\n                count = count + 1\n                \n            if substring[35]\
    \ == c\n                count = count + 1\n                \nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkbjdbhpk.jl:1\nin expression starting at /tmp/tmpkbjdbhpk.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ substring.length <= string.length\n        return substring.length\n    else\n\
    \        return how_many_times(string.substring(0,substring.length), substring)\
    \ + how_many_times(string.substring(substring.length), substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpud69rhca.jl:12\nin expression starting at\
    \ /tmp/tmpud69rhca.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times each character appears in the string. Case insensitive.\n>>> count_characters(\"\
    Hello World\")\n{' ': 4, 'H': 1, 'e': 2, 'l': 2, 'o': 2, 'W': 1, 'r': 2, 'l':\
    \ 2}\n>>> count_characters(\"Hello World\", true)\n{' ': 4, 'H': 1, 'e': 2, 'l':\
    \ 2, 'o': 2, 'W': 1, 'r': 2, 'l': 2, 'd': 1}\n>>> count_characters(\"Hello World\"\
    , false)\n{' ': 4, 'H': 1, 'e': 2, 'l': 2, 'o': 2, 'W': 1, 'r': 2, 'l': 2, 'd':\
    \ 1}\n>>> count_characters(\"Hello World\", true)\n{' ': 4, 'H': 1, 'e': 2, 'l':\
    \ 2, 'o': 2, 'W': 1, 'r': 2, 'l': 2, 'd': 1}\n>>> count_characters(\"Hello World\"\
    , false)\n{' ': 4, 'H': 1, 'e': 2, 'l': 2, 'o': 2, 'W': 1, 'r': 2, 'l': 2, 'd':\
    \ 1}\n>>> count_characters(\"Hello World\", true)\n{' ': 4, 'H': 1, 'e': 2, 'l':\
    \ 2, 'o': 2, 'W': 1, 'r': 2, 'l': 2, 'd': 1}\n>>> count_characters(\"Hello World\"\
    , false)\n{' ': 4, 'H': 1, 'e': 2, 'l': 2, 'o': 2, 'W': 1, 'r': 2, 'l': 2, 'd':\
    \ 1}\n>>> count_characters(\"Hello World\", true)\n{' ': 4, 'H': 1, 'e': 2, 'l':\
    \ 2, 'o': 2, 'W': 1, 'r': 2, 'l': 2, 'd': 1}\n>>> count_characters(\"Hello World\"\
    , false)\n{' ': 4, 'H': 1, 'e': 2, 'l': 2, 'o': 2, 'W': 1, 'r': 2, 'l': 2, 'd':\
    \ 1}\n>>> count_characters(\"Hello World\", true)\n{' ': 4, 'H': 1, 'e': 2, 'l':\
    \ 2, 'o': 2, 'W': 1, 'r': 2, 'l': 2, 'd': 1}\n>>> count_characters(\"Hello World\"\
    , false)\n{' ': 4, 'H': 1, 'e': 2, 'l': 2, 'o': 2, 'W': 1, 'r': 2, 'l': 2, 'd':\
    \ 1}\n>>> count_characters(\"Hello World\", true)\n{' ': 4, 'H': 1, 'e': 2, 'l':\
    \ 2, 'o': 2, 'W': 1, 'r': 2, 'l': 2, 'd': \nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdsexyd1h.jl:12\nin expression starting at\
    \ /tmp/tmpdsexyd1h.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    i\
    \ = 0\n    \n    while i < length(substring)\n        if string[i] == substring[i]\n\
    \            i += 1\n        else\n            i = 0\n        end\n    end\n \
    \   \n    return i\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    \", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string. Count overlaping cases.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqswyzcy0.jl:25\nin expression starting at\
    \ /tmp/tmpqswyzcy0.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpigtxrx8_.jl:12\nin expression starting at\
    \ /tmp/tmpigtxrx8_.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring\n          \
    \  count += 1\n        else\n            count = 0\n    end\n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and a substring and returns the number of times the substring\
    \ appears in the string. Count overlaping cases.\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4d1_kxf_.jl:23\nin expression starting at\
    \ /tmp/tmp4d1_kxf_.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count = count + 1\n            \n            if char == substring[1]\n \
    \               count = count + 1\n                \n            if char == substring[2]\n\
    \                count = count + 1\n                \n            if char == substring[3]\n\
    \                count = count + 1\n                \n            if char == substring[4]\n\
    \                count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpagss85ga.jl:1\nin expression starting at /tmp/tmpagss85ga.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaaa\"\
    , \"aa\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns the number of times a substring appears within that string.\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0kwizxw0.jl:12\nin expression starting at\
    \ /tmp/tmp0kwizxw0.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ substring.length() == string.length()\n        return substring.length()\n \
    \   else if substring.length() > string.length()\n        return how_many_times(string,\
    \ substring[0..length(string)])\n    else if substring.length() < string.length()\n\
    \        return how_many_times(string[0..length(string)], substring)\n    else\n\
    \        return how_many_times(string[0..length(string)], substring[0..length(string)])\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times it occurs in the original\
    \ string. Case insensitive.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzr3_d4fp.jl:12\nin expression starting at\
    \ /tmp/tmpzr3_d4fp.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string > len_substring\n\
    \        substring = substring(len_substring)\n    \n    count = 0\n    \n   \
    \ for char in string\n        if char == substring\n            count += 1\n \
    \       end\n    end\n    \n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of\
    \ times a given substring can be found in the original string. Count overlaping\
    \ cases.\n>>> how_many_times(\"\", \"a\")\n0\n>>> how_many_times(\"aaa\", \"a\"\
    )\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n3\n>>> how_many_times(\"aaaa\", \"\
    aaa\")\n3\n>>> how_many_times(\"aaaa\", \"aaaa\")\n3\n>>> how_many_times(\"aaaa\"\
    , \"aaaaa\")\n3\n>>> how_many_times(\"aaaa\", \"aaaaaa\")\n3\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaa\")\n3\n>>> how_many_times(\"aaaa\", \"aaaaaaab\")\n3\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaabb\")\n3\n>>> how_many_times(\"aaaa\", \"aaaaaaabbb\")\n3\n>>>\
    \ how_many_times(\"aaaa\", \"aaaaaaabbbb\")\n3\n>>> how_many_times(\"aaaa\", \"\
    aaaaaaabbbbb\")\n3\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbba\")\n3\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaa\")\n3\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaa\"\
    )\n3\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaa\")\n3\n>>> how_many_times(\"\
    aaaa\", \"aaaaaaabbbbbaaaaa\")\n3\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaa\"\
    )\n3\n>>> how_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaa\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeed6ys5k.jl:32\nin expression starting at\
    \ /tmp/tmpeed6ys5k.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    \n    return count\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a string and returns the number of times a substring appears within\
    \ that string. Count overlaping cases.\nHint: Use a for loop and a counter.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9jgu_7yf.jl:24\nin expression starting at\
    \ /tmp/tmp9jgu_7yf.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns a new string\
    \ with all the letters replaced by their uppercase counterparts. \nFor example,\
    \ \n    how_many_times(\"aaa\", \"a\")\nshould return \"Aaa\"\n    how_many_times(\"\
    aaaa\", \"aa\")\nshould return \"Aaaa\"\n    how_many_times(\"aaaa\", \"aaa\"\
    )\nshould return \"Aaaa\"\nHint: Use a for loop to iterate through the string\
    \ and replace each letter with the uppercase counterpart.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu5lzgnik.jl:12\nin expression starting at\
    \ /tmp/tmpu5lzgnik.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    \n    if string[-1] == substring[-1]\n        return 1 + how_many_times(string[:-1],\
    \ substring[:-1])\n    \n    if string[0] == substring[-1]\n        return 1 +\
    \ how_many_times(string[1:], substring[:-1])\n    \n    if string[-1] == substring[0]\n\
    \        return 1 + how_many_times(string[:-1], substring[1:])\n    \n    return\
    \ how_many_times(string[1:], substring) + how_many_times(string[:-1], substring)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgo0uq97i.jl:14\nin expression\
    \ starting at /tmp/tmpgo0uq97i.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return count_substring(string, substring)\n    \n    if len_string >\
    \ len_substring\n        return how_many_times(substring(string, 1, len_substring),\
    \ substring)\n    \n    return how_many_times(substring(string, 0, len_substring),\
    \ substring)\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"\
    a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the longest common prefix of two given\
    \ strings. \nThe function should return an empty string if the two strings are\
    \ equal.\nThe function should return the longest common prefix of two given strings\
    \ if they have different lengths.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmbdd05cq.jl:27\nin expression starting at\
    \ /tmp/tmpmbdd05cq.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string. Count overlaping cases.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppilc0hom.jl:12\nin expression starting at\
    \ /tmp/tmppilc0hom.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    \n    if string[-1] == substring[-1]\n        return 1 + how_many_times(string[-1..-1],\
    \ substring[-1..-1])\n    \n    if string[0] == substring[-1]\n        return\
    \ 1 + how_many_times(string[1:], substring[-1..-1])\n    \n    if string[-1] ==\
    \ substring[0]\n        return 1 + how_many_times(string[-1..-1], substring[1:])\n\
    \    \n    if string[0] == substring[-1]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    \n    if string[-1] == substring[0]\n        return 1 +\
    \ how_many_times(string[-1..-1], substring[-1..-1])\n    \n    if string[0] ==\
    \ substring[-1]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    \n    if string[-1] == substring[0]\n        return 1 + how_many_times(string[-1..-1],\
    \ substring[-1..-1])\n    \n    if string[0] == substring[-1]\n        return\
    \ 1 + how_many_times(string[1:], substring[-1..-1])\n    \n    if string[-1] ==\
    \ substring[0]\n        return 1 + how_many_times(string[-1..-1], substring[1:])\n\
    \    \n    if string[0] == substring[-1]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    \n    if string[-1] == substring[0]\n        return 1 +\
    \ how_many_times(string[-1..-1], substring[-1..-1])\n    \n    if string[0] ==\
    \ substring[-1]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    \n    if string[-1] == substring[0]\n        return 1 + how_many_times(string[-1..-1],\
    \ substring[-1..-1])\n    \n    if string[0] == substring[-1]\n        return\
    \ 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[-1] == substring[0]\n\
    \        return 1 + how_many_times(string[-1..-1], substring[-1..-1])\n    \n\
    \    if string[0] == substring[-1]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    \n    if string[-1] == substring[0]\n        return 1 +\
    \ how_many_times(string[-1..-1], substring[-1..-1])\n    \n    if string[0] ==\
    \ substring[-1]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    \n    if string[-1] == substring[0]\n        return 1 + how_many_times(string[\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpiaoalj7n.jl:14\nin expression\
    \ starting at /tmp/tmpiaoalj7n.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return 1 if string[0] == substring[0] else 0\n    \n    if len_string\
    \ > len_substring\n        return how_many_times(substring[len_substring..], string[1..len_substring])\n\
    \    \n    return how_many_times(string[1..len_substring], substring[len_substring..])\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaab\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbba\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaa\")\n</\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"if\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0ngw9mnp.jl:20\nin expression starting at /tmp/tmp0ngw9mnp.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else \n\
    \        count_substring = 0\n        count_substring = count_substring + how_many_times(string[1:end-1],\
    \ substring)\n        count_substring = count_substring + how_many_times(string[end-1:end],\
    \ substring)\n        count_substring = count_substring + how_many_times(string[1:end-1],\
    \ substring[1:end-1])\n        count_substring = count_substring + how_many_times(string[end-1:end],\
    \ substring[end-1:end])\n        count_substring = count_substring + how_many_times(string[1:end-1],\
    \ substring[1:end-1]) + how_many_times(string[end-1:end], substring[end-1:end])\n\
    \        return count_substring\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    \", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaa\"\
    )\n</cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\ncandidate =\
    \ how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_h1wsklg.jl:21\nin expression starting at\
    \ /tmp/tmp_h1wsklg.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times a substring appears in the string. \nFor example,\
    \ if the string was \"abcabcbb\", and the substring was \"b\", the function would\
    \ return 3.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdryky_z7.jl:12\nin expression starting at\
    \ /tmp/tmpdryky_z7.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return count_substring(string, substring)\n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppmw7hyq3.jl:1\nin expression starting at /tmp/tmppmw7hyq3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    \n    if string[-1] == substring[-1]\n        return 1 + how_many_times(string[:-1],\
    \ substring[:-1])\n    \n    if string[0] == substring[-1]\n        return 1 +\
    \ how_many_times(string[1:], substring[:-1])\n    \n    if string[-1] == substring[0]\n\
    \        return 1 + how_many_times(string[:-1], substring[1:])\n    \n    return\
    \ how_many_times(string[1:], substring) + how_many_times(string[:-1], substring)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgo0uq97i.jl:14\nin expression\
    \ starting at /tmp/tmpgo0uq97i.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    i\
    \ = 0\n    \n    while i < length(string)\n        if substring(i, string) ==\
    \ string\n            i += 1\n        else\n            i += 1\n    end\n    \n\
    \    return i\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz10bn0k0.jl:24\nin expression starting at\
    \ /tmp/tmpz10bn0k0.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    string_length\
    \ = len(string)\n    substring_index = 0\n    \n    while substring_index < string_length\n\
    \        if string[substring_index] == substring[substring_index]\n          \
    \  substring_index += 1\n        else\n            substring_index += 1\n    \
    \    end\n    end\n    \n    return substring_index\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times a substring appears in the string. Count overlaping cases.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ayu4jqr.jl:26\nin expression starting at\
    \ /tmp/tmp2ayu4jqr.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else if string[0] == substring[1]\n        return 1 + how_many_times(string[1:],\
    \ substring[2:])\n    else if string[0] == substring[2]\n        return 1 + how_many_times(string[1:],\
    \ substring[3:])\n    else if string[0] == substring[3]\n        return 1 + how_many_times(string[1:],\
    \ substring[4:])\n    else if string[0] == substring[4]\n        return 1 + how_many_times(string[1:],\
    \ substring[5:])\n    else if string[0] == substring[5]\n        return 1 + how_many_times(string[1:],\
    \ substring[6:])\n    else if string[0] == substring[6]\n        return 1 + how_many_times(string[1:],\
    \ substring[7:])\n    else if string[0] == substring[7]\n        return 1 + how_many_times(string[1:],\
    \ substring[8:])\n    else if string[0] == substring[8]\n        return 1 + how_many_times(string[1:],\
    \ substring[9:])\n    else if string[0] == substring[9]\n        return 1 + how_many_times(string[1:],\
    \ substring[10:])\n    else if string[0] == substring[10]\n        return 1 +\
    \ how_many_times(string[1:], substring[11:])\n    else if string[0] == substring[11]\n\
    \        return 1 + how_many_times(string[1:], substring[12:])\n    else if string[0]\
    \ == substring[12]\n        return 1 + how_many_times(string[1:], substring[13:])\n\
    \    else if string[0] == substring[13]\n        return 1 + how_many_times(string[1:],\
    \ substring[14:])\n    else if string[0] == substring[14]\n        return 1 +\
    \ how_many_times(string[1:], substring[15:])\n    else if string[0] == substring[15]\n\
    \        return 1 + how_many_times(string[1:], substring[16:])\n    else if string[0]\
    \ == substring[16]\n        return 1 + how_many_times(string[1:], substring[17:])\n\
    \    else if string[0] == substring[17]\n        return 1 + how_many_times(string[1:],\
    \ substring[18:])\n    else if string[0] == substring[18]\n        return 1 +\
    \ how_many_times(string[1:], substring[19:])\n    else if string[0] == substring[19]\n\
    \        return 1 + how_many_times(string[1:], substring[20:])\n    else if string[0]\
    \ == substring[\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_t__d3ma.jl:12\nin expression starting at\
    \ /tmp/tmp_t__d3ma.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count = count + 1\n            \n            if char == substring[1]\n \
    \               count = count + 1\n                \n            if char == substring[2]\n\
    \                count = count + 1\n                \n            if char == substring[3]\n\
    \                count = count + 1\n                \n            if char == substring[4]\n\
    \                count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpagss85ga.jl:1\nin expression starting at /tmp/tmpagss85ga.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    string::Char\
    \ = string.head\n    substring::Char = substring.head\n    \n    if string ==\
    \ substring\n        return 1 + how_many_times(string.tail, substring)\n    \n\
    \    count::Int64 = 0\n    \n    if string.head == substring.head\n        count\
    \ = 1 + how_many_times(string.tail, substring.tail)\n    \n    if string.head\
    \ != substring.head\n        count = 1 + how_many_times(string.tail, substring.tail)\n\
    \    \n    return count\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi9vtslef.jl:29\nin expression starting at\
    \ /tmp/tmpi9vtslef.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring\n          \
    \  count += 1\n        else\n            count = 0\n    end\n    \n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and a substring and returns the\
    \ number of times the substring appears in the string. Count overlaping cases.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu8o1wa91.jl:24\nin expression starting at\
    \ /tmp/tmpu8o1wa91.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return count_substring(string, substring)\n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppmw7hyq3.jl:1\nin expression starting at /tmp/tmppmw7hyq3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    count = 0\n    for c in string:\n        if c == substring[0]:\n     \
    \       count += 1\n            if count == len(substring):\n                return\
    \ count\n        else:\n            count = 0\n    return count\n</code>\n<|/\
    \ a tags=string,haskell,count,substring |>\n<| a dscore=2 |>\n<code>\nimport Data.List\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6hg5msk0.jl:12\nin expression starting at\
    \ /tmp/tmp6hg5msk0.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string. Case insensitive.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6wchag3r.jl:12\nin expression starting at\
    \ /tmp/tmp6wchag3r.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else \n\
    \        count_substring = 0\n        for char in string\n            if char\
    \ == substring\n                count_substring += 1\n            else\n     \
    \           if count_substring > 0\n                    return count_substring\n\
    \                else\n                    count_substring = 1\n        end\n\
    \        return count_substring\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of times a substring appears within\
    \ that string.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t\
    @test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\
    \t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\"\
    , \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpli6wuy4a.jl:25\nin expression starting at\
    \ /tmp/tmpli6wuy4a.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times a substring appears in the string. Count overlaping cases.\n\
    >>> how_many_times(\"aaa\", \"a\")\n3\n>>> how_many_times(\"aaaa\", \"aa\")\n\
    3\n>>> how_many_times(\"aaaa\", \"a\")\n2\n>>> how_many_times(\"aaaa\", \"aaa\"\
    )\n3\n>>> how_many_times(\"aaaaa\", \"a\")\n4\n>>> how_many_times(\"aaaaa\", \"\
    aa\")\n4\n>>> how_many_times(\"aaaaa\", \"aaaa\")\n4\n>>> how_many_times(\"aaaaa\"\
    , \"aaaaa\")\n4\n>>> how_many_times(\"aaaaa\", \"aaaaaa\")\n4\n>>> how_many_times(\"\
    aaaaa\", \"aaaaaaa\")\n4\n>>> how_many_times(\"aaaaa\", \"aaaaaaab\")\n4\n>>>\
    \ how_many_times(\"aaaaa\", \"aaaaaaabb\")\n4\n>>> how_many_times(\"aaaaa\", \"\
    aaaaaaabbb\")\n4\n>>> how_many_times(\"aaaaa\", \"aaaaaaabbbb\")\n4\n>>> how_many_times(\"\
    aaaaa\", \"aaaaaaabbbbb\")\n4\n>>> how_many_times(\"aaaaa\", \"aaaaaaabbbbba\"\
    )\n4\n>>> how_many_times(\"aaaaa\", \"aaaaaaabbbbbaa\")\n4\n>>> how_many_times(\"\
    aaaaa\", \"aaaaaaabbbbbaaa\")\n4\n>>> how_many_times(\"aaaaa\", \"aaaaaaabbbbbaaaa\"\
    )\n4\n>>> how_many_times(\"aaaaa\", \"aaaaaaabbbbbaaaaa\")\n4\n>>> how_many_times(\"\
    aaaaa\", \"aaaaaaabbbbbaaaaaa\")\n4\n>>> how_many_times(\"aaaaa\", \"aaaaaaabbbbbaaaaaaa\"\
    )\n4\n>>> how_many_times(\"aaaaa\", \"aaaaaaabbbbbaaaaaaaa\")\n4\n>>> how_many_times(\"\
    aaaaa\", \"aaaaaaabbbbbaaaaaaaab\")\n4\n>>> how_many_times(\"aaaaa\", \"aaaaaaabbbbbaaaaaaaabb\"\
    )\n4\n\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzm8l2ked.jl:12\nin expression starting at\
    \ /tmp/tmpzm8l2ked.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns the number of times a substring appears within the string. Count\
    \ overlaping cases.\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp72ded40k.jl:12\nin expression starting at\
    \ /tmp/tmp72ded40k.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    \n    if string[-1] == substring[-1]\n        return 1 + how_many_times(string[:-1],\
    \ substring[:-1])\n    \n    if string[0] == substring[-1]\n        return 1 +\
    \ how_many_times(string[1:], substring[:-1])\n    \n    if string[-1] == substring[0]\n\
    \        return 1 + how_many_times(string[:-1], substring[1:])\n    \n    return\
    \ how_many_times(string[1:], substring) + how_many_times(string[:-1], substring[1:])\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaab\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbba\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpc8j0med1.jl:14\nin expression\
    \ starting at /tmp/tmpc8j0med1.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    i\
    \ = 0\n    \n    while i < length(string)\n        if substring(i, length(string))\
    \ == string\n            i += 1\n        else\n            i += 1\n    end\n \
    \   \n    return i\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    \", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of times a substring\
    \ appears in a given string. Count overlaping cases.\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyp9yzghw.jl:24\nin expression starting at\
    \ /tmp/tmpyp9yzghw.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times a substring appears in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7mzplwny.jl:12\nin expression starting at\
    \ /tmp/tmp7mzplwny.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring[0]\n            count\
    \ += how_many_times(string[1..end], substring[1:])\n        else\n           \
    \ count += how_many_times(string[1..end], substring)\n    end\n    \n    return\
    \ count\nend\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t\
    @test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\
    \t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\"\
    , \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmdk8ibx3.jl:17\nin expression\
    \ starting at /tmp/tmpmdk8ibx3.jl:17\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring[0]\n            count\
    \ = count + 1\n            \n            if substring[1] == c\n              \
    \  count = count + 1\n                \n            if substring[2] == c\n   \
    \             count = count + 1\n                \n            if substring[3]\
    \ == c\n                count = count + 1\n                \n            if substring[4]\
    \ == c\n                count = count + 1\n                \n            if substring[5]\
    \ == c\n                count = count + 1\n                \n            if substring[6]\
    \ == c\n                count = count + 1\n                \n            if substring[7]\
    \ == c\n                count = count + 1\n                \n            if substring[8]\
    \ == c\n                count = count + 1\n                \n            if substring[9]\
    \ == c\n                count = count + 1\n                \n            if substring[10]\
    \ == c\n                count = count + 1\n                \n            if substring[11]\
    \ == c\n                count = count + 1\n                \n            if substring[12]\
    \ == c\n                count = count + 1\n                \n            if substring[13]\
    \ == c\n                count = count + 1\n                \n            if substring[14]\
    \ == c\n                count = count + 1\n                \n            if substring[15]\
    \ == c\n                count = count + 1\n                \n            if substring[16]\
    \ == c\n                count = count + 1\n                \n            if substring[17]\
    \ == c\n                count = count + 1\n                \n            if substring[18]\
    \ == c\n                count = count + 1\n                \n            if substring[19]\
    \ == c\n                count = count + 1\n                \n            if substring[20]\
    \ == c\n                count = count + 1\n                \n            if substring[21]\
    \ == c\n                count = count + 1\n                \n            if substring[22]\
    \ == c\n                count = count + 1\n                \n            if substring[23]\
    \ == c\n                count = count + 1\n                \n            if substring[24]\
    \ == c\n                count = count + 1\n                \n            if substring[25]\
    \ == c\n                count = count + 1\n                \n            if substring[26]\
    \ == c\n                count = count + 1\n                \n            if substring[27]\
    \ == c\n                count = count + 1\n                \n            if substring[28]\
    \ == c\n                count = count + 1\n                \n            if substring[29]\
    \ == c\n                count = count + 1\n                \n            if substring[30]\
    \ == c\n                count = count + 1\n                \n            if substring[31]\
    \ == c\n                count = count + 1\n                \n            if substring[32]\
    \ == c\n                count = count + 1\n                \n            if substring[33]\
    \ == c\n                count = count + 1\n                \n            if substring[34]\
    \ == c\n                count = count + 1\n                \n            if substring[35]\
    \ == c\n                count = count + 1\n                \nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkbjdbhpk.jl:1\nin expression starting at /tmp/tmpkbjdbhpk.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    count = 0\n    for c in string:\n        if c == substring:\n        \
    \    count += 1\n    return count\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work\
    \ if `substring` is longer than `string`.\n<|/ c |>\n<| c |>\nIt does work. `how_many_times(\"\
    aaaa\", \"aa\")` returns 3.\n<|/ c |>\n<| c |>\nIt doesn't work if `substring`\
    \ is longer than `string`.\n<|/ c |>\n<| c |>\nIt does work. `how_many_times(\"\
    aaaa\", \"aa\")` returns 3.\n<|/ c |>\n<| c |>\nIt does work. `how_many_times(\"\
    aaaa\", \"aa\")` returns 3.\n<|/ c |>\n<| a |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo68yp10g.jl:12\nin expression starting at\
    \ /tmp/tmpo68yp10g.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count = count + 1\n            \n            if char == substring[1]\n \
    \               count = count + 1\n                \n            if char == substring[2]\n\
    \                count = count + 1\n                \n            if char == substring[3]\n\
    \                count = count + 1\n                \n            if char == substring[4]\n\
    \                count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpagss85ga.jl:1\nin expression starting at /tmp/tmpagss85ga.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times each character appears in the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpubklrn1r.jl:12\nin expression starting at\
    \ /tmp/tmpubklrn1r.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times a substring appears within it. The function\
    \ should ignore case when searching for the substring. For example, if the input\
    \ string is \"The quick brown fox jumps over the lazy dog\" and you search for\
    \ \"fox\", the function should return 3.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmg8uara0.jl:12\nin expression starting at\
    \ /tmp/tmpmg8uara0.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise: Write a function that returns the\
    \ number of times a substring appears in a string.\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjp2qkgh4.jl:12\nin expression starting at\
    \ /tmp/tmpjp2qkgh4.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if len_string == len_substring\n\
    \        return count_substring(string, substring)\n    \n    if len_string >\
    \ len_substring\n        return how_many_times(substring(string, 0, len_substring),\
    \ substring)\n    \n    return how_many_times(substring(string, 0, len_string),\
    \ substring)\nend\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnjirs1zj.jl:1\nin expression starting at /tmp/tmpnjirs1zj.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else if string[-1] == substring[-1]\n        return 1 +\
    \ how_many_times(string[:-1], substring[:-1])\n    else if string[-1] == substring[-1]\n\
    \        return 1 + how_many_times(string[:-1], substring[:-1])\n    else\n  \
    \      return how_many_times(string[1:], substring[1:])\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times a substring appears within\
    \ that string. \nFor example, how_many_times(\"aaaa\", \"aa\") should return 3.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6865twwe.jl:12\nin expression starting at\
    \ /tmp/tmp6865twwe.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise: Write a function that returns the number of times a substring\
    \ appears in a string.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph1orv0xz.jl:12\nin expression starting at\
    \ /tmp/tmph1orv0xz.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times each character appears in the string. \nFor\
    \ example the string \"abcabc\" would return [('a', 3), ('b', 3), ('c', 3)]\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp355ovyit.jl:12\nin expression starting at\
    \ /tmp/tmp355ovyit.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string[1:],\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aaaaaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaab\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbb\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbba\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaaaa\"\
    )\n</cell>\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe7dipbx0.jl:12\nin expression starting at\
    \ /tmp/tmpe7dipbx0.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count = count + 1\n            \n            if char == substring[1]\n \
    \               count = count + 1\n                \n            if char == substring[2]\n\
    \                count = count + 1\n                \n            if char == substring[3]\n\
    \                count = count + 1\n                \n            if char == substring[4]\n\
    \                count = count + 1\n                \n            if char == substring[5]\n\
    \                count = count + 1\n                \n            if char == substring[6]\n\
    \                count = count + 1\n                \n            if char == substring[7]\n\
    \                count = count + 1\n                \n            if char == substring[8]\n\
    \                count = count + 1\n                \n            if char == substring[9]\n\
    \                count = count + 1\n                \n            if char == substring[10]\n\
    \                count = count + 1\n                \n            if char == substring[11]\n\
    \                count = count + 1\n                \n            if char == substring[12]\n\
    \                count = count + 1\n                \n            if char == substring[13]\n\
    \                count = count + 1\n                \n            if char == substring[14]\n\
    \                count = count + 1\n                \n            if char == substring[15]\n\
    \                count = count + 1\n                \n            if char == substring[16]\n\
    \                count = count + 1\n                \n            if char == substring[17]\n\
    \                count = count + 1\n                \n            if char == substring[18]\n\
    \                count = count + 1\n                \n            if char == substring[19]\n\
    \                count = count + 1\n                \n            if char == substring[20]\n\
    \                count = count + 1\n                \n            if char == substring[21]\n\
    \                count = count + 1\n                \n            if char == substring[22]\n\
    \                count = count + 1\n                \n            if char == substring[23]\n\
    \                count = count + 1\n                \n            if char == substring[24]\n\
    \                count = count + 1\n                \n            if char == substring[25]\n\
    \                count = count + 1\n                \n            if char == substring[26]\n\
    \                count = count + 1\n                \n            if char == substring[27]\n\
    \                count = count + 1\n                \n            if char == substring[28]\n\
    \                count = count + 1\n                \n            if char == substring[29]\n\
    \                count = count + 1\n                \n            if char == substring[30]\n\
    \                count = count + 1\n                \n            if char == substring[31]\n\
    \                count = count + 1\n                \n            if char == substring[32]\n\
    \                count = count + 1\n                \n            if char == substring[33]\n\
    \                count = count + 1\n                \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpagss85ga.jl:1\nin expression starting at /tmp/tmpagss85ga.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\"\
    , \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of times a substring appears in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphtnxswrm.jl:12\nin expression starting at\
    \ /tmp/tmphtnxswrm.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    i\
    \ = 0\n    \n    while i < length(string)\n        if substring(i, string) ==\
    \ string\n            i += 1\n        else\n            i += 1\n    end\n    \n\
    \    return i\nend\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"\", \"\
    a\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of times a substring appears\
    \ in a string. Count overlaping cases.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkw3evs91.jl:24\nin expression starting at\
    \ /tmp/tmpkw3evs91.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring[0]\n            count\
    \ = count + 1\n            \n            if substring[1] == c\n              \
    \  count = count + 1\n                \n            if substring[2] == c\n   \
    \             count = count + 1\n                \n            if substring[3]\
    \ == c\n                count = count + 1\n                \n            if substring[4]\
    \ == c\n                count = count + 1\n                \n            if substring[5]\
    \ == c\n                count = count + 1\n                \n            if substring[6]\
    \ == c\n                count = count + 1\n                \n            if substring[7]\
    \ == c\n                count = count + 1\n                \n            if substring[8]\
    \ == c\n                count = count + 1\n                \n            if substring[9]\
    \ == c\n                count = count + 1\n                \n            if substring[10]\
    \ == c\n                count = count + 1\n                \n            if substring[11]\
    \ == c\n                count = count + 1\n                \n            if substring[12]\
    \ == c\n                count = count + 1\n                \n            if substring[13]\
    \ == c\n                count = count + 1\n                \n            if substring[14]\
    \ == c\n                count = count + 1\n                \n            if substring[15]\
    \ == c\n                count = count + 1\n                \n            if substring[16]\
    \ == c\n                count = count + 1\n                \n            if substring[17]\
    \ == c\n                count = count + 1\n                \n            if substring[18]\
    \ == c\n                count = count + 1\n                \n            if substring[19]\
    \ == c\n                count = count + 1\n                \n            if substring[20]\
    \ == c\n                count = count + 1\n                \n            if substring[21]\
    \ == c\n                count = count + 1\n                \n            if substring[22]\
    \ == c\n                count = count + 1\n                \n            if substring[23]\
    \ == c\n                count = count + 1\n                \n            if substring[24]\
    \ == c\n                count = count + 1\n                \n            if substring[25]\
    \ == c\n                count = count + 1\n                \n            if substring[26]\
    \ == c\n                count = count + 1\n                \n            if substring[27]\
    \ == c\n                count = count + 1\n                \n            if substring[28]\
    \ == c\n                count = count + 1\n                \n            if substring[29]\
    \ == c\n                count = count + 1\n                \n            if substring[30]\
    \ == c\n                count = count + 1\n                \n            if substring[31]\
    \ == c\n                count = count + 1\n                \n            if substring[32]\
    \ == c\n                count = count + 1\n                \n            if substring[33]\
    \ == c\n                count = count + 1\n                \n            if substring[34]\
    \ == c\n                count = count + 1\n                \n            if substring[35]\
    \ == c\n                count = count + 1\n                \nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkbjdbhpk.jl:1\nin expression starting at /tmp/tmpkbjdbhpk.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of times a substring\
    \ appears in a string.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpah1gr737.jl:12\nin expression starting at\
    \ /tmp/tmpah1gr737.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <code language=julia-1.1>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.1>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.1>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of times a substring appears in the string. Count overlaping\
    \ cases.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8u_tk5o6.jl:12\nin expression starting at\
    \ /tmp/tmp8u_tk5o6.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    \n    \n    if len_string\
    \ == len_substring\n        return count_substring(string, substring)\n    \n\
    \    \n    if len_string > len_substring\n        return how_many_times(substring(string,\
    \ 1, len_substring), substring)\n    \n    \n    if len_string < len_substring\n\
    \        return how_many_times(string, substring(string, 0, len_substring))\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t\
    @test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\
    \t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\"\
    , \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps9q5evqk.jl:1\nin expression starting at /tmp/tmps9q5evqk.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    count_substring = 0\n\
    \    \n    for char in string\n        if char == substring[count_substring]\n\
    \            count_substring += 1\n        else\n            if count_substring\
    \ == len_substring\n                return count_substring\n            else\n\
    \                count_substring = 0\n        end\n    end\n    \n    return 0\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\"\
    , \"aaaa\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaa\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaa\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaab\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbb\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbba\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aaaaaaabbbbbaaaa\")\n</cell>\n\
    <code language=julia-1.5>\nhow_man\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprlr0ba6u.jl:34\nin expression starting at\
    \ /tmp/tmprlr0ba6u.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the longest common prefix of\
    \ two given strings. \nThe function should return the longest common prefix of\
    \ $string1$ and $string2$, \nor an empty string if either $string1$ or $string2$\
    \ is an empty string.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp15mzg929.jl:12\nin expression starting at\
    \ /tmp/tmp15mzg929.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times each character appears in the string. Include a case for when there\
    \ are no occurrences of a character.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqkfyeqzc.jl:12\nin expression starting at\
    \ /tmp/tmpqkfyeqzc.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times each letter appears in the string.\nusing Test\n\n@testset begin\n\n\
    candidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn3nmrmpd.jl:12\nin expression starting at\
    \ /tmp/tmpn3nmrmpd.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0 \n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times a substring appears in the string. Count overlaping cases.\ne.g. \"\
    aaa\" appears 3 times in the string \"aaaa\"\nusing Test\n\n@testset begin\n\n\
    candidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0hgie0ci.jl:12\nin expression starting at\
    \ /tmp/tmp0hgie0ci.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string. Case insensitive.\n\
    using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
    \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc6yr6bh3.jl:12\nin expression starting at\
    \ /tmp/tmpc6yr6bh3.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring[0]\n       \
    \     count = count + 1\n        else\n            if char == substring[1]\n \
    \               count = count + 1\n            else\n                if char ==\
    \ substring[2]\n                    count = count + 1\n                else\n\
    \                    if char == substring[3]\n                        count =\
    \ count + 1\n                    else\n                        if char == substring[4]\n\
    \                            count = count + 1\n                        else\n\
    \                            if char == substring[5]\n                       \
    \         count = count + 1\n                            else\n              \
    \                  if char == substring[6]\n                                 \
    \   count = count + 1\n                                else\n                \
    \                    if char == substring[7]\n                               \
    \         count = count + 1\n                                    else\n      \
    \                                  if char == substring[8]\n                 \
    \                           count = count + 1\n                              \
    \          else\n                                            if char == substring[9]\n\
    \                                                count = count + 1\n         \
    \                                   else\n                                   \
    \             if char == substring[10]\n                                     \
    \               count = count + 1\n                                          \
    \      else\n                                                    if char == substring[11]\n\
    \                                                        count = count + 1\n \
    \                                                   else\n                   \
    \                                     if char == substring[12]\n             \
    \                                               count = count + 1\n          \
    \                                              else\n                        \
    \                                    if char == substring[13]\n              \
    \                                                  count = count + 1\n       \
    \                                                     else\n                 \
    \                                               if char == substring[14]\n   \
    \                                                                 count = count\
    \ + 1\n                                                                else\n\
    \                                                                    if char ==\
    \ substring[15]\n                                                            \
    \            count = count + 1\n                                             \
    \                       else\n                                               \
    \         if char == substring[16]\n                                         \
    \                   count = count + 1\n                                      \
    \                  else\n                                                    \
    \        if char == substring[17]\n                                          \
    \                      count = count + 1\n                                   \
    \                         else\n                                             \
    \                   if char == substring[18]\n                               \
    \                                     count = count + 1\n                    \
    \                                            else\n                          \
    \                                          if char == substring[19]\n        \
    \                                                                count = count\
    \ + 1\n                                                                    else\n\
    \                                                        if char == substring[20]\n\
    \                                                            count = count + 1\n\
    \                                                        else\n              \
    \                                              if char == substring[21]\n    \
    \                                                            count = count + 1\n\
    \                                                            else\n          \
    \                                                      if char == substring[22]\n\
    \                                                                    count = count\
    \ + 1\n                                                                else\n\
    \                                                                    if char ==\
    \ substring[23]\n                                                            \
    \            count = count + 1\n                                             \
    \                       else\n                                               \
    \         if char == substring[24]\n                                         \
    \                   count = count + 1\n                                      \
    \                  else\n                                                    \
    \        if char == substring[25]\n                                          \
    \                      count = count + 1\n                                   \
    \                         else\n                                             \
    \                   if char == substring[26]\n                               \
    \                                     count = count + 1\n                    \
    \                                            else\n                          \
    \                                          if char == substring[27]\n        \
    \                                                                count = count\
    \ + 1\n                                                                    else\n\
    \                                                        if char == substring[28]\n\
    \                                                            count = count + 1\n\
    \                                                        else\n              \
    \                                              if char == substring[29\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2cd8mxoc.jl:1\nin expression starting at /tmp/tmp2cd8mxoc.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ substring == string\n        return 1\n    else\n        return 1 + how_many_times(string[end-1],\
    \ substring) + how_many_times(string[end-1], substring[end-1])\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times a substring appears within that string.\nusing Test\n\n@testset begin\n\
    \ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpam0cds2r.jl:12\nin expression starting at\
    \ /tmp/tmpam0cds2r.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times a substring appears in the string. Count overlaping cases.\nusing Test\n\
    \n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\"\
    ) == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\"\
    , \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3vj2fksv.jl:12\nin expression starting at\
    \ /tmp/tmp3vj2fksv.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for char in string\n        if char == substring\n          \
    \  count += 1\n        else\n            count = 0\n    end\n    \n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise: Write a function that takes a string and returns the number of times\
    \ the substring appears in the original string. Count overlaping cases.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\"\
    , \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
    cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmmwamna0.jl:24\nin expression starting at\
    \ /tmp/tmpmmwamna0.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring[0]\n            count\
    \ = count + 1\n            \n            if substring[1] == c\n              \
    \  count = count + 1\n            \n            if substring[2] == c\n       \
    \         count = count + 1\n            \n            if substring[3] == c\n\
    \                count = count + 1\n            \n            if substring[4]\
    \ == c\n                count = count + 1\n            \n            if substring[5]\
    \ == c\n                count = count + 1\n            \n            if substring[6]\
    \ == c\n                count = count + 1\n            \n            if substring[7]\
    \ == c\n                count = count + 1\n            \n            if substring[8]\
    \ == c\n                count = count + 1\n            \n            if substring[9]\
    \ == c\n                count = count + 1\n            \n            if substring[10]\
    \ == c\n                count = count + 1\n            \n            if substring[11]\
    \ == c\n                count = count + 1\n            \n            if substring[12]\
    \ == c\n                count = count + 1\n            \n            if substring[13]\
    \ == c\n                count = count + 1\n            \n            if substring[14]\
    \ == c\n                count = count + 1\n            \n            if substring[15]\
    \ == c\n                count = count + 1\n            \n            if substring[16]\
    \ == c\n                count = count + 1\n            \n            if substring[17]\
    \ == c\n                count = count + 1\n            \n            if substring[18]\
    \ == c\n                count = count + 1\n            \n            if substring[19]\
    \ == c\n                count = count + 1\n            \n            if substring[20]\
    \ == c\n                count = count + 1\n            \n            if substring[21]\
    \ == c\n                count = count + 1\n            \n            if substring[22]\
    \ == c\n                count = count + 1\n            \n            if substring[23]\
    \ == c\n                count = count + 1\n            \n            if substring[24]\
    \ == c\n                count = count + 1\n            \n            if substring[25]\
    \ == c\n                count = count + 1\n            \n            if substring[26]\
    \ == c\n                count = count + 1\n            \n            if substring[27]\
    \ == c\n                count = count + 1\n            \n            if substring[28]\
    \ == c\n                count = count + 1\n            \n            if substring[29]\
    \ == c\n                count = count + 1\n            \n            if substring[30]\
    \ == c\n                count = count + 1\n            \n            if substring[31]\
    \ == c\n                count = count + 1\n            \n            if substring[32]\
    \ == c\n                count = count + 1\n            \n            if substring[33]\
    \ == c\n                count = count + 1\n            \n            if substring[34]\
    \ == c\n                count = count + 1\n            \n            if substring[35]\
    \ == c\n                count = count + 1\n            \nusing Test\n\n@testset\
    \ begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\
    \t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\",\
    \ \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpozpn9y0b.jl:1\nin expression starting at /tmp/tmpozpn9y0b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    i = 0\n    j = len_string\n\
    \    \n    while i < len_substring && j > 0\n        if string[i] == substring[j]\n\
    \            i += 1\n            j -= 1\n        else\n            if string[i]\
    \ > substring[j]\n                j -= 1\n            else\n                i\
    \ += 1\n            end\n        end\n    end\n    \n    return i\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppjea9itp.jl:37\nin expression starting at\
    \ /tmp/tmppjea9itp.jl:37\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    i\
    \ = 0\n    j = string.length()\n    while i < j\n        if string[i] == substring[0]\n\
    \            i += 1\n        elseif string[j] == substring[0]\n            j +=\
    \ 1\n        else\n            if string[i] < substring[0]\n                i\
    \ += 1\n            else\n                j += 1\n        end\n    end\n    return\
    \ j - i\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ a substring appears within the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpurq0v_e3.jl:29\nin expression starting at\
    \ /tmp/tmpurq0v_e3.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    \n    count\
    \ = 0\n    \n    for c in string\n        if c == substring\n            count\
    \ += 1\n        else\n            count = 0\n    end\n    return count\nend\n\
    </cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise\nWrite a function\
    \ that counts the number of times a given substring can be found in the original\
    \ string. Count overlaping cases.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ how_many_times;\n\t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"\
    xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"\
    john doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp236usgav.jl:23\nin expression starting at\
    \ /tmp/tmp236usgav.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    count = 0\n    for c in string:\n        if c == substring[0]:\n     \
    \       count += 1\n            if count == substring.length():\n            \
    \    return count\n        else:\n            count = 0\n    return 0\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\ndef count_substring(string, substring):\n\
    \    count = 0\n    for c in string:\n        if c == substring[0]:\n        \
    \    count += 1\n            if count == substring.length():\n               \
    \ return count\n        else:\n            count = 0\n    return 0\n</code>\n\
    <|/ a tags=string,substring,count,haskell |>\n<| c |>\nPlease add some explanation\
    \ to your answer such that others can learn from it\n<|/ c |>\n<| a dscore=0 |>\n\
    <code>\nimport Data.List\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\
    \t@test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") ==\
    \ 4)\n\t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john\
    \ doe\", \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5it639j5.jl:12\nin expression starting at\
    \ /tmp/tmp5it639j5.jl:12\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
    \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
    \ \n    if string == \"\" || substring == \"\"\n        return 0\n    else if\
    \ substring.length == string.length\n        return string.count(substring)\n\
    \    else\n        return how_many_times(string.substring(0,substring.length),\
    \ substring) + how_many_times(string.substring(substring.length), substring)\n\
    end\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times a substring appears within\
    \ that string.\nusing Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t\
    @test(candidate(\"\", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\
    \t@test(candidate(\"cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\"\
    , \"john\") == 1)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjq6fky7m.jl:12\nin expression starting at\
    \ /tmp/tmpjq6fky7m.jl:12\n"
  stdout: ''
