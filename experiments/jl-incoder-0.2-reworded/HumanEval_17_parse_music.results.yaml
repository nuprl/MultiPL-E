language: jl
name: HumanEval_17_parse_music
results:
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes.map(x -> x.strip)\n    music_notes\
    \ = music_notes.map(x -> x.split(\"o\"))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.toInt64))\n    music_notes = music_notes.map(x -> x.map(x ->\
    \ x.sum))\n    music_notes = music_notes.map(x -> x.map(x -> x.max))\n    music_notes\
    \ = music_notes.map(x -> x.map(x -> x.min))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.mean))\n    music_notes = music_notes.map(x -> x.map(x -> x.std))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.var))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.max))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.min))\n    music_notes = music_notes.map(x -> x.map(x -> x.sum))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.mean))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.std))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.var))\n    music_notes = music_notes.map(x -> x.map(x -> x.max))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.min))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.sum))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.mean))\n    music_notes = music_notes.map(x -> x.map(x -> x.std))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.var))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.max))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.min))\n    music_notes = music_notes.map(x -> x.map(x -> x.sum))\n\
    \    music_notes = \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0q4xjbl_.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0q4xjbl_.jl:1\n\
    in expression starting at /tmp/tmp0q4xjbl_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvs6mfs9n.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvs6mfs9n.jl:1\n\
    in expression starting at /tmp/tmpvs6mfs9n.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp653tytfm.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp653tytfm.jl:1\n\
    in expression starting at /tmp/tmp653tytfm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvs6mfs9n.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvs6mfs9n.jl:1\n\
    in expression starting at /tmp/tmpvs6mfs9n.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0f6fka1h.jl:64\nin expression starting at\
    \ /tmp/tmp0f6fka1h.jl:64\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string != \"\
    .\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \" \"]\n    music_string = music_string[music_string\
    \ != \"o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \" \"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \" \"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \" \"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \" \"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \" \"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \" \"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \" \"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \" \"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \" \"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \" \"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \" \"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \" \"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \" \"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \" \"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi356yhqx.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi356yhqx.jl:1\n\
    in expression starting at /tmp/tmpi356yhqx.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.split(\" \")\n    music_string = [x for x in music_string if\
    \ x != \"\"]\n    music_string = [x for x in music_string if x != \"o\"]\n   \
    \ music_string = [x for x in music_string if x != \"|\"]\n    music_string = [x\
    \ for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpgf385h6n.jl:49\nin expression starting at /tmp/tmpgf385h6n.jl:49\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.split(\" \")\n    music_string = [music_string[i] for i in range(music_string.size)]\n\
    \    music_string = [music_string[i] for i in range(music_string.size) if music_string[i]!=\"\
    .\"]\n    music_string = [music_string[i] for i in range(music_string.size) if\
    \ music_string[i]!=\"o\"]\n    music_string = [music_string[i] for i in range(music_string.size)\
    \ if music_string[i]!=\"|\"]\n    music_string = [music_string[i] for i in range(music_string.size)\
    \ if music_string[i]!=\"o|\"]\n    music_string = [music_string[i] for i in range(music_string.size)\
    \ if music_string[i]!=\".|\"]\n    music_string = [music_string[i] for i in range(music_string.size)\
    \ if music_string[i]!=\"o|o|\"]\n    music_string = [music_string[i] for i in\
    \ range(music_string.size) if music_string[i]!=\"o|o|o|\"]\n    music_string =\
    \ [music_string[i] for i in range(music_string.size) if music_string[i]!=\"o|o|o|o|\"\
    ]\n    music_string = [music_string[i] for i in range(music_string.size) if music_string[i]!=\"\
    o|o|o|o|o|\"]\n    music_string = [music_string[i] for i in range(music_string.size)\
    \ if music_string[i]!=\"o|o|o|o|o|o|\"]\n    music_string = [music_string[i] for\
    \ i in range(music_string.size) if music_string[i]!=\"o|o|o|o|o|o|o|\"]\n    music_string\
    \ = [music_string[i] for i in range(music_string.size) if music_string[i]!=\"\
    o|o|o|o|o|o|o|o|o|\"]\n    music_string = [music_string[i] for i in range(music_string.size)\
    \ if music_string[i]!=\"o|o|o|o|o|o|o|o|o|o|\"]\n    music_string = [music_string[i]\
    \ for i in range(music_string.size) if music_string[i]!=\"o|o|o|o|o|o|o|o|o|o|o|o|\"\
    ]\n    music_string = [music_string[i] for i in range(music_string.size) if music_string[i]!=\"\
    o|o|o|o|o|o|o|o|o|o|o|\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv46e7859.jl:36\nin expression starting at\
    \ /tmp/tmpv46e7859.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvs6mfs9n.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvs6mfs9n.jl:1\n\
    in expression starting at /tmp/tmpvs6mfs9n.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    .\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8gu2fero.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8gu2fero.jl:1\n\
    in expression starting at /tmp/tmp8gu2fero.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.split(\" \")\n    music_string = [x for x in music_string if\
    \ x != \"\"]\n    music_string = [x for x in music_string if x != \"o\"]\n   \
    \ music_string = [x for x in music_string if x != \"|\"]\n    music_string = [x\
    \ for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmp5q2jglvn.jl:49\nin expression starting at /tmp/tmp5q2jglvn.jl:49\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxh5owx49.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxh5owx49.jl:1\n\
    in expression starting at /tmp/tmpxh5owx49.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[music_notes.len()/2:end]\n    music_notes = music_notes.map(parse_note)\n\
    \    music_notes = music_notes.map(x -> x * 4)\n    music_notes = music_notes.map(x\
    \ -> x % 12)\n    music_notes = music_notes.map(x -> x + 12)\n    music_notes\
    \ = music_notes.map(x -> x % 12)\n    music_notes = music_notes.map(x -> x + 12)\n\
    \    music_notes = music_notes.map(x -> x % 12)\n    music_notes = music_notes.map(x\
    \ -> x + 12)\n    music_notes = music_notes.map(x -> x % 12)\n    music_notes\
    \ = music_notes.map(x -> x + 12)\n    music_notes = music_notes.map(x -> x % 12)\n\
    \    music_notes = music_notes.map(x -> x + 12)\n    music_notes = music_notes.map(x\
    \ -> x % 12)\n    music_notes = music_notes.map(x -> x + 12)\n    music_notes\
    \ = music_notes.map(x -> x % 12)\n    music_notes = music_notes.map(x -> x + 12)\n\
    \    music_notes = music_notes.map(x -> x % 12)\n    music_notes = music_notes.map(x\
    \ -> x + 12)\n    music_notes = music_notes.map(x -> x % 12)\n    music_notes\
    \ = music_notes.map(x -> x + 12)\n    music_notes = music_notes.map(x -> x % 12)\n\
    \    music_notes = music_notes.map(x -> x + 12)\n    music_notes = music_notes.map(x\
    \ -> x % 12)\n    music_notes = music_notes.map(x -> x + 12)\n    music_notes\
    \ = music_notes.map(x -> x % 12)\n    music_notes = music_notes.map(x -> x + 12)\n\
    \    music_notes = music_notes.map(x -> x % 12)\n    music_notes = music_notes.map(x\
    \ -> x + 12)\n    music_notes = music_notes.map(x -> x % 12)\n    music_notes\
    \ = music_notes.map(x -> x + 12)\n    music_notes = music_notes.\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmp681qtes7.jl:13 expected\
    \ \"end\", got \"Test\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp681qtes7.jl:48\n\
    in expression starting at /tmp/tmp681qtes7.jl:48\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[1:end-1]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[1:end-1]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[1:end-1]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[1:end-1]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[1:end-1]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[1:end-1]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end-1]\n    music_string = music_string[1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[1:end-1]\n\
    \    music_string = music_string[1:end]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpblrbzeu8.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpblrbzeu8.jl:1\n\
    in expression starting at /tmp/tmpblrbzeu8.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptpl5xmw3.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptpl5xmw3.jl:1\n\
    in expression starting at /tmp/tmptpl5xmw3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprawyxabx.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprawyxabx.jl:1\n\
    in expression starting at /tmp/tmprawyxabx.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\".\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0uqsp856.jl:1\nin expression starting at /tmp/tmp0uqsp856.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxh5owx49.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxh5owx49.jl:1\n\
    in expression starting at /tmp/tmpxh5owx49.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxh5owx49.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxh5owx49.jl:1\n\
    in expression starting at /tmp/tmpxh5owx49.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_ev5bk4b.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_ev5bk4b.jl:1\n\
    in expression starting at /tmp/tmp_ev5bk4b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpak6x9j2b.jl:1\nin expression starting at /tmp/tmpak6x9j2b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\".\") + 1 : music_string.find(\"\
    o\", music_string.find(\".\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = \nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgslukep2.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgslukep2.jl:1\n\
    in expression starting at /tmp/tmpgslukep2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp653tytfm.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp653tytfm.jl:1\n\
    in expression starting at /tmp/tmp653tytfm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string != \"\
    o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \".\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \".\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \".\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \".\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \".\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \".\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \".\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \".\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \".\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \".\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8z73wgi4.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8z73wgi4.jl:1\n\
    in expression starting at /tmp/tmp8z73wgi4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n \
    \   music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6vfxnsvw.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6vfxnsvw.jl:1\n\
    in expression starting at /tmp/tmp6vfxnsvw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptpl5xmw3.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptpl5xmw3.jl:1\n\
    in expression starting at /tmp/tmptpl5xmw3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.split(\" \")\n    music_string = [x for x in music_string if\
    \ x != \"\"]\n    music_string = [x for x in music_string if x != \"o\"]\n   \
    \ music_string = [x for x in music_string if x != \"|\"]\n    music_string = [x\
    \ for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmp5q2jglvn.jl:49\nin expression starting at /tmp/tmp5q2jglvn.jl:49\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2f_v3i4v.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2f_v3i4v.jl:1\n\
    in expression starting at /tmp/tmp2f_v3i4v.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvs6mfs9n.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvs6mfs9n.jl:1\n\
    in expression starting at /tmp/tmpvs6mfs9n.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvs6mfs9n.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvs6mfs9n.jl:1\n\
    in expression starting at /tmp/tmpvs6mfs9n.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp653tytfm.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp653tytfm.jl:1\n\
    in expression starting at /tmp/tmp653tytfm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph_wzz7pu.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmph_wzz7pu.jl:1\n\
    in expression starting at /tmp/tmph_wzz7pu.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyyylg6yw.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyyylg6yw.jl:1\n\
    in expression starting at /tmp/tmpyyylg6yw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 .. music_string.index(\"|\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    .\") + 1 .. music_string.index(\".\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    \nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprpbnjlrz.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprpbnjlrz.jl:1\n\
    in expression starting at /tmp/tmprpbnjlrz.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\".\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq41kixs9.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq41kixs9.jl:1\n\
    in expression starting at /tmp/tmpq41kixs9.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.find(\"\
    /\"):end]\n    music_string = music_string[music_string.find(\"/\"):end]\n   \
    \ music_string = music_string[music_string.find(\"/\"):end]\n    music_string\
    \ = music_string[music_string.find(\"/\"):end]\n    music_string = music_string[music_string.find(\"\
    /\"):end]\n    music_string = music_string[music_string.find(\"/\"):end]\n   \
    \ music_string = music_string[music_string.find(\"/\"):end]\n    music_string\
    \ = music_string[music_string.find(\"/\"):end]\n    music_string = music_string[music_string.find(\"\
    /\"):end]\n    music_string = music_string[music_string.find(\"/\"):end]\n   \
    \ music_string = music_string[music_string.find(\"/\"):end]\n    music_string\
    \ = music_string[music_string.find(\"/\"):end]\n    music_string = music_string[music_string.find(\"\
    /\"):end]\n    music_string = music_string[music_string.find(\"/\"):end]\n   \
    \ music_string = music_string[music_string.find(\"/\"):end]\n    music_string\
    \ = music_string[music_string.find(\"/\"):end]\n    music_string = music_string[music_string.find(\"\
    /\"):end]\n    music_string = music_string[music_string.find(\"/\"):end]\n   \
    \ music_string = music_string[music_string.find(\"/\"):end]\n    music_string\
    \ = music_string[music_string.find(\"/\"):end]\n    music_string = music_string[music_string.find(\"\
    /\"):end]\n    music_string = music_string[music_string.find(\"/\"):end]\n   \
    \ music_string = music_string[music_string.find(\"/\"):end]\n    music_string\
    \ = music_string[music_string.find(\"/\"):end]\n    music_string = music_string[music_string.find(\"\
    /\"):end]\n    music_string = music_string[music_string.find(\"/\"):end]\n   \
    \ music_string = music_string[music_string.find(\"/\"):end]\n    music_string\
    \ = music_string[music_string.find(\"/\"):end]\n    music_string = music_string[music_string.find(\"\
    /\"):end]\n    music_string = music_string[music_string.find(\"/\"):\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpj5_zujyi.jl:47\nin expression starting at\
    \ /tmp/tmpj5_zujyi.jl:47\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkftrzz6z.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkftrzz6z.jl:1\n\
    in expression starting at /tmp/tmpkftrzz6z.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\".\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0uqsp856.jl:1\nin expression starting at /tmp/tmp0uqsp856.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprawyxabx.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprawyxabx.jl:1\n\
    in expression starting at /tmp/tmprawyxabx.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.index(\"o\") + 1)]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 : music_string.index(\"o\", music_string.index(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"o\") + 1 : music_string.index(\"o\", music_string.index(\"\
    o\") + 1)]\n    music_string = music_string[music_string.index(\"o\") + 1 : music_string.index(\"\
    o\", music_string.\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx4wxqd1t.jl:30\nin expression starting at\
    \ /tmp/tmpx4wxqd1t.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprawyxabx.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprawyxabx.jl:1\n\
    in expression starting at /tmp/tmprawyxabx.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 .. music_string.index(\"|\")-1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\")-1]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 .. music_string.index(\"|\")-1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\")-1]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 .. music_string.index(\"|\")-1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\")-1]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 .. music_string.index(\"|\")-1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\")-1]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 .. music_string.index(\"|\")-1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\")-1]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 .. music_string.index(\"|\")-1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\")-1]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 .. music_string.index(\"|\")-1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\")-1]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 .. music_string.index(\"|\")-1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\")-1]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 .. music_string.index(\"|\")-1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\")-1]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpddno9duj.jl:1\nin expression starting at /tmp/tmpddno9duj.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxh5owx49.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxh5owx49.jl:1\n\
    in expression starting at /tmp/tmpxh5owx49.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.index(\"\
    |\"):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp50an4n6d.jl:15\n\
    in expression starting at /tmp/tmp50an4n6d.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5vefjolh.jl:1\nin expression starting at /tmp/tmp5vefjolh.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.split(\" \")\n    music_string = [music_string[i] for i in range(music_string.length)]\n\
    \    music_string = [music_string[i] for i in range(music_string.length)]\n  \
    \  music_string = [music_string[i] for i in range(music_string.length)]\n    music_string\
    \ = [music_string[i] for i in range(music_string.length)]\n    music_string =\
    \ [music_string[i] for i in range(music_string.length)]\n    music_string = [music_string[i]\
    \ for i in range(music_string.length)]\n    music_string = [music_string[i] for\
    \ i in range(music_string.length)]\n    music_string = [music_string[i] for i\
    \ in range(music_string.length)]\n    music_string = [music_string[i] for i in\
    \ range(music_string.length)]\n    music_string = [music_string[i] for i in range(music_string.length)]\n\
    \    music_string = [music_string[i] for i in range(music_string.length)]\n  \
    \  music_string = [music_string[i] for i in range(music_string.length)]\n    music_string\
    \ = [music_string[i] for i in range(music_string.length)]\n    music_string =\
    \ [music_string[i] for i in range(music_string.length)]\n    music_string = [music_string[i]\
    \ for i in range(music_string.length)]\n    music_string = [music_string[i] for\
    \ i in range(music_string.length)]\n    music_string = [music_string[i] for i\
    \ in range(music_string.length)]\n    music_string = [music_string[i] for i in\
    \ range(music_string.length)]\n    music_string = [music_string[i] for i in range(music_string.length)]\n\
    \    music_string = [music_string[i] for i in range(music_string.length)]\n  \
    \  music_string = [music_string[i] for i in range(music_string.length)]\n    music_string\
    \ = [music_string[i] for i in range(music_string.length)]\n    music_string =\
    \ [music_string[i] for i in range(music_string.length)]\n    music_string = [music_string[i]\
    \ for i in range(music_string.length)]\n    music_string = [music_string[i] for\
    \ i in range(music_string.length)]\n    music_string = [music_string[i] for i\
    \ in range(music_string.length)]\n    music_string = [music_string[i] for i in\
    \ range(music_string.length)]\n    music_string = [music_string[i] for i in range(music_string.length)]\n\
    \    music_string = [music_string[i] for i in range(music_string.length)]\n  \
    \  music_string = [music_string[i] for i in range(music_string.length)]\n    music_string\
    \ = [music_string[i] for i in range(music_string.length)]\n    music_string =\
    \ [music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpttnnnui5.jl:1\nin expression starting at /tmp/tmpttnnnui5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.split(\" \")\n    music_string = [x for x in music_string if\
    \ x != \"\"]\n    music_string = [x for x in music_string if x != \"o\"]\n   \
    \ music_string = [x for x in music_string if x != \"|\"]\n    music_string = [x\
    \ for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpgf385h6n.jl:49\nin expression starting at /tmp/tmpgf385h6n.jl:49\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.split(\" \")\n    music_string = [x for x in music_string if\
    \ x != \"\"]\n    music_string = [x for x in music_string if x != \"o\"]\n   \
    \ music_string = [x for x in music_string if x != \"|\"]\n    music_string = [x\
    \ for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmp5q2jglvn.jl:49\nin expression starting at /tmp/tmp5q2jglvn.jl:49\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes.map(x -> x.strip)\n    music_notes\
    \ = music_notes.map(x -> x.split(\" \"))\n    music_notes = music_notes.map(x\
    \ -> x[1])\n    music_notes = music_notes.map(x -> x.split(\"o\"))\n    music_notes\
    \ = music_notes.map(x -> x.map(x -> x.toInt))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.sum))\n    music_notes = music_notes.map(x -> x.map(x -> x.max))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.min))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.sum))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.max))\n    music_notes = music_notes.map(x -> x.map(x -> x.min))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.sum))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.max))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.min))\n    music_notes = music_notes.map(x -> x.map(x -> x.sum))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.max))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.min))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.sum))\n    music_notes = music_notes.map(x -> x.map(x -> x.max))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.min))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.sum))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.max))\n    music_notes = music_notes.map(x -> x.map(x -> x.min))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.sum))\n    music_notes =\
    \ music_notes.map(x -> x.\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgbubrfpv.jl:42\nin expression starting at\
    \ /tmp/tmpgbubrfpv.jl:42\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5vefjolh.jl:1\nin expression starting at /tmp/tmp5vefjolh.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes.map(x -> x.strip)\n    music_notes\
    \ = music_notes.map(x -> x.split(\" \"))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.toInt64))\n    music_notes = music_notes.map(x -> x.map(x ->\
    \ x.sum))\n    music_notes = music_notes.map(x -> x.map(x -> x.max))\n    music_notes\
    \ = music_notes.map(x -> x.map(x -> x.min))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.product))\n    music_notes = music_notes.map(x -> x.map(x ->\
    \ x.sum))\n    music_notes = music_notes.map(x -> x.map(x -> x.product))\n   \
    \ music_notes = music_notes.map(x -> x.map(x -> x.product))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.product))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.product))\n    music_notes = music_notes.map(x -> x.map(x ->\
    \ x.product))\n    music_notes = music_notes.map(x -> x.map(x -> x.product))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.product))\n    music_notes\
    \ = music_notes.map(x -> x.map(x -> x.product))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.product))\n    music_notes = music_notes.map(x -> x.map(x ->\
    \ x.product))\n    music_notes = music_notes.map(x -> x.map(x -> x.product))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.product))\n    music_notes\
    \ = music_notes.map(x -> x.map(x -> x.product))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.product))\n    music_notes = music_notes.map(x -> x.map(x ->\
    \ x.product))\n    music_notes = music_notes.map(x -> x.map(x -> x.product))\n\
    \    music_notes = \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa6xtmccu.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpa6xtmccu.jl:1\n\
    in expression starting at /tmp/tmpa6xtmccu.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.find(\"\
    /\"):end]\n    music_string = music_string[music_string.find(\"/\")+1:]\n    music_string\
    \ = music_string[music_string.find(\"/\")+1:]\n    music_string = music_string[music_string.find(\"\
    /\")+1:]\n    music_string = music_string[music_string.find(\"/\")+1:]\n    music_string\
    \ = music_string[music_string.find(\"/\")+1:]\n    music_string = music_string[music_string.find(\"\
    /\")+1:]\n    music_string = music_string[music_string.find(\"/\")+1:]\n    music_string\
    \ = music_string[music_string.find(\"/\")+1:]\n    music_string = music_string[music_string.find(\"\
    /\")+1:]\n    music_string = music_string[music_string.find(\"/\")+1:]\n    music_string\
    \ = music_string[music_string.find(\"/\")+1:]\n    music_string = music_string[music_string.find(\"\
    /\")+1:]\n    music_string = music_string[music_string.find(\"/\")+1:]\n    music_string\
    \ = music_string[music_string.find(\"/\")+1:]\n    music_string = music_string[music_string.find(\"\
    /\")+1:]\n    music_string = music_string[music_string.find(\"/\")+1:]\n    music_string\
    \ = music_string[music_string.find(\"/\")+1:]\n    music_string = music_string[music_string.find(\"\
    /\")+1:]\n    music_string = music_string[music_string.find(\"/\")+1:]\n    music_string\
    \ = music_string[music_string.find(\"/\")+1:]\n    music_string = music_string[music_string.find(\"\
    /\")+1:]\n    music_string = music_string[music_string.find(\"/\")+1:]\n    music_string\
    \ = music_string[music_string.find(\"/\")+1:]\n    music_string = music_string[music_string.find(\"\
    /\")+1:]\n    music_string = music_string[music_string.find(\"/\")+1:]\n    music_string\
    \ = music_string[music_string.find(\"/\")+1:]\n    music_string = music_string[music_string.find(\"\
    /\")+1:]\n    music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(music_string.find(\"\
    /\") + 1):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvffzskst.jl:18\n\
    in expression starting at /tmp/tmpvffzskst.jl:18\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.index(\"|\") + 1)]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.index(\"|\") + 1 : music_string.index(\"|\", music_string.index(\"\
    |\") + 1)]\n    music_string = music_string[music_string.index(\"|\") + 1 : music_string.index(\"\
    |\", music_string.\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6r3_2e6_.jl:30\nin expression starting at\
    \ /tmp/tmp6r3_2e6_.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp653tytfm.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp653tytfm.jl:1\n\
    in expression starting at /tmp/tmp653tytfm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvs6mfs9n.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvs6mfs9n.jl:1\n\
    in expression starting at /tmp/tmpvs6mfs9n.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string != \"\
    o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprumtwyly.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprumtwyly.jl:1\n\
    in expression starting at /tmp/tmprumtwyly.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvs6mfs9n.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvs6mfs9n.jl:1\n\
    in expression starting at /tmp/tmpvs6mfs9n.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\".\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmuy4_dls.jl:1\nin expression starting at /tmp/tmpmuy4_dls.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_ev5bk4b.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_ev5bk4b.jl:1\n\
    in expression starting at /tmp/tmp_ev5bk4b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \") : music_string.findFirst(\" \") + (music_string.size - 1)]\n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \") : music_string.findFirst(\" \") + (music_string.size - 1)]\n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \") : music_string.findFirst(\" \") + (music_string.size - 1)]\n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \") : music_string.findFirst(\" \") + (music_string.size - 1)]\n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \") : music_string.findFirst(\" \") + (music_string.size - 1)]\n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \") : music_string.findFirst(\" \") + (music_string.size - 1)]\n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \") : music_string.findFirst(\" \") + (music_string.size - 1)]\n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \") : music_string.findFirst(\" \") + (music_string.size - 1)]\n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \") : music_string.findFirst(\" \") + (music_string.size - 1)]\n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \") : music_string.findFirst(\" \") + (music_string.size - 1)]\n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \") : music_string.findFirst(\" \") + (music_string.size - 1)]\n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \") : music_string.findFirst(\" \") + (music_string.size - 1)]\n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmyb9wabt.jl:1\nin expression starting at /tmp/tmpmyb9wabt.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxh5owx49.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxh5owx49.jl:1\n\
    in expression starting at /tmp/tmpxh5owx49.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[1 : music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqefyx0w1.jl:1\nin expression starting at /tmp/tmpqefyx0w1.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5vefjolh.jl:1\nin expression starting at /tmp/tmp5vefjolh.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\".\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0uqsp856.jl:1\nin expression starting at /tmp/tmp0uqsp856.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvs6mfs9n.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvs6mfs9n.jl:1\n\
    in expression starting at /tmp/tmpvs6mfs9n.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.split(\" \")\n    music_string = [music_string[i] for i in range(music_string.size)]\n\
    \    music_string = [music_string[i] for i in range(music_string.size) if music_string[i]!=\"\
    .\"]\n    music_string = [music_string[i] for i in range(music_string.size) if\
    \ music_string[i]!=\"o\"]\n    music_string = [music_string[i] for i in range(music_string.size)\
    \ if music_string[i]!=\"|\"]\n    music_string = [music_string[i] for i in range(music_string.size)\
    \ if music_string[i]!=\"o|\"]\n    music_string = [music_string[i] for i in range(music_string.size)\
    \ if music_string[i]!=\".|\"]\n    music_string = [music_string[i] for i in range(music_string.size)\
    \ if music_string[i]!=\"o|o|\"]\n    music_string = [music_string[i] for i in\
    \ range(music_string.size) if music_string[i]!=\"o|o|o|\"]\n    music_string =\
    \ [music_string[i] for i in range(music_string.size) if music_string[i]!=\"o|o|o|o|\"\
    ]\n    music_string = [music_string[i] for i in range(music_string.size) if music_string[i]!=\"\
    o|o|o|o|o|\"]\n    music_string = [music_string[i] for i in range(music_string.size)\
    \ if music_string[i]!=\"o|o|o|o|o|o|\"]\n    music_string = [music_string[i] for\
    \ i in range(music_string.size) if music_string[i]!=\"o|o|o|o|o|o|o|\"]\n    music_string\
    \ = [music_string[i] for i in range(music_string.size) if music_string[i]!=\"\
    o|o|o|o|o|o|o|o|o|\"]\n    music_string = [music_string[i] for i in range(music_string.size)\
    \ if music_string[i]!=\"o|o|o|o|o|o|o|o|o|o|\"]\n    music_string = [music_string[i]\
    \ for i in range(music_string.size) if music_string[i]!=\"o|o|o|o|o|o|o|o|o|o|o|o|\"\
    ]\n    music_string = [music_string[i] for i in range(music_string.size) if music_string[i]!=\"\
    o|o|o|o|o|o|o|o|o|o|o|\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpv46e7859.jl:36\nin expression starting at\
    \ /tmp/tmpv46e7859.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\".\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq41kixs9.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq41kixs9.jl:1\n\
    in expression starting at /tmp/tmpq41kixs9.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.split(\" \")\n    music_string = [x for x in music_string if\
    \ x != \"\"]\n    music_string = [x for x in music_string if x != \"o\"]\n   \
    \ music_string = [x for x in music_string if x != \"|\"]\n    music_string = [x\
    \ for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpgf385h6n.jl:49\nin expression starting at /tmp/tmpgf385h6n.jl:49\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string != \"\
    .\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"o\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_string[music_string\
    \ != \"|\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \"|\"]\n    music_string = music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn881glzz.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn881glzz.jl:1\n\
    in expression starting at /tmp/tmpn881glzz.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[music_string.end-1:end]\n    music_string = music_string[1:end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8af2qc_g.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8af2qc_g.jl:1\n\
    in expression starting at /tmp/tmp8af2qc_g.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_notes = music_string.split(\" \")\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes.map(x -> x.split(\"|\"))\n\
    \    music_notes = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x\
    \ -> x.split(\"o\"))\n    music_notes = music_notes.map(x -> x.map(x -> x.toInt64))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.sum))\n    return music_notes\n\
    end\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpll766ba6.jl:24\nin expression starting at\
    \ /tmp/tmpll766ba6.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxh5owx49.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxh5owx49.jl:1\n\
    in expression starting at /tmp/tmpxh5owx49.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxh5owx49.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxh5owx49.jl:1\n\
    in expression starting at /tmp/tmpxh5owx49.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxh5owx49.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxh5owx49.jl:1\n\
    in expression starting at /tmp/tmpxh5owx49.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.split(\" \")\n    music_string = [x for x in music_string if\
    \ x != \"\"]\n    music_string = [x for x in music_string if x != \"o\"]\n   \
    \ music_string = [x for x in music_string if x != \"|\"]\n    music_string = [x\
    \ for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmp5q2jglvn.jl:49\nin expression starting at /tmp/tmp5q2jglvn.jl:49\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[music_string.start-1:end]\n    music_string =\
    \ music_string[music_string.end-1:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[music_string.end-1:end]\n    music_string = music_string[\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5zdo0gre.jl:1\nin expression starting at /tmp/tmp5zdo0gre.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 :]\n    music_string = music_string[music_string.find(\"o\") + 1 :]\n  \
    \  music_string = music_string[music_string.find(\"|\") + 1 :]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 :]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 :]\n    music_string = music_string[music_string.find(\"o\") + 1 :]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 :]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 :]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 :]\n    music_string = music_string[music_string.find(\"o\") + 1 :]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 :]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 :]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 :]\n    music_string = music_string[music_string.find(\"o\") + 1 :]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 :]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 :]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 :]\n    music_string = music_string[music_string.find(\"o\") + 1 :]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 :]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 :]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 :]\n    music_string = music_string[music_string.find(\"o\") + 1 :]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 :]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 :]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 :]\n    music_string = music_string[music_string.find(\"o\") + 1 :]\n\
    \    music_string = music_string[music_string.find(\"|\") + 1 :]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 :]\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7h1rubdm.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7h1rubdm.jl:1\n\
    in expression starting at /tmp/tmp7h1rubdm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n \
    \   music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n    music_string = music_string[music_string.findFirst(\"\
    |\"):end]\n    music_string = music_string[music_string.findFirst(\"|\"):end]\n\
    \    music_string = music_string[music_string.findFirst(\"|\"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\"):end]\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6vfxnsvw.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6vfxnsvw.jl:1\n\
    in expression starting at /tmp/tmp6vfxnsvw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvs6mfs9n.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvs6mfs9n.jl:1\n\
    in expression starting at /tmp/tmpvs6mfs9n.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxh5owx49.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxh5owx49.jl:1\n\
    in expression starting at /tmp/tmpxh5owx49.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_string.findFirst(\" \"):end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \"):end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \"):end]\n    music_string = music_string[music_string.findFirst(\" \"):end]\n\
    \    music_string = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5vefjolh.jl:1\nin expression starting at /tmp/tmp5vefjolh.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string == \"\
    |\"]\n    music_string = music_string[music_string == \"o\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"o\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"o\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"o\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"o\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"o\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"o\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"o\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"o\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"o\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"o\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"o\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"o\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"o\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"o\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"o\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_5cgcq46.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_5cgcq46.jl:1\n\
    in expression starting at /tmp/tmp_5cgcq46.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvs6mfs9n.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvs6mfs9n.jl:1\n\
    in expression starting at /tmp/tmpvs6mfs9n.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.index(\"\
    |\"):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp50an4n6d.jl:15\n\
    in expression starting at /tmp/tmp50an4n6d.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvs6mfs9n.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvs6mfs9n.jl:1\n\
    in expression starting at /tmp/tmpvs6mfs9n.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpizzbnlmr.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpizzbnlmr.jl:1\n\
    in expression starting at /tmp/tmpizzbnlmr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\"|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o\")]\n    music_string = music_string[music_string.findFirst(\"\
    |\")]\n    music_string = music_string[music_string.findFirst(\"o\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\")]\n    music_string = music_string[music_string.findFirst(\"\
    o\")]\n    music_string = music_string[music_string.findFirst(\"|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o\")]\n    music_string = music_string[music_string.findFirst(\"\
    |\")]\n    music_string = music_string[music_string.findFirst(\"o\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\")]\n    music_string = music_string[music_string.findFirst(\"\
    o\")]\n    music_string = music_string[music_string.findFirst(\"|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o\")]\n    music_string = music_string[music_string.findFirst(\"\
    |\")]\n    music_string = music_string[music_string.findFirst(\"o\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\")]\n    music_string = music_string[music_string.findFirst(\"\
    o\")]\n    music_string = music_string[music_string.findFirst(\"|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o\")]\n    music_string = music_string[music_string.findFirst(\"\
    |\")]\n    music_string = music_string[music_string.findFirst(\"o\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"|\")]\n    music_string = music_string[music_string.findFirst(\"\
    o\")]\n    music_string = music_string[music_string.findFirst(\"|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o\")]\n    music_string = music_string[music_string.findFirst(\"\
    |\")]\n    music_string = music_string[music_string.findFirst(\"o\")]\n    music_string\
    \ = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptktvc9it.jl:1\nin expression starting at /tmp/tmptktvc9it.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string != \"\
    \ \"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_string[music_string\
    \ != \"o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \".\"]\n    music_string = music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppdjinnhz.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppdjinnhz.jl:1\n\
    in expression starting at /tmp/tmppdjinnhz.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")]\n    music_string =\
    \ music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")]\n    music_string =\
    \ music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")]\n    music_string =\
    \ music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")]\n    music_string =\
    \ music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")]\n    music_string =\
    \ music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.index(\"\
    |\"):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp93nv99oy.jl:15\n\
    in expression starting at /tmp/tmp93nv99oy.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpak6x9j2b.jl:1\nin expression starting at /tmp/tmpak6x9j2b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpak6x9j2b.jl:1\nin expression starting at /tmp/tmpak6x9j2b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+1]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+2]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+3]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+4]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+5]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+6]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+7]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+8]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+9]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+10]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+11]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\")+music_string.index(\"\
    |\")+12]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\")+music_string.index(\"|\")+13]\n    music_string = music_string[music_string.index(\"\
    |\"):music_string.index(\"|\")+music_string.index(\"|\")+14]\n    music_string\
    \ = music_string[music_string.index(\"|\"):music_string.index(\"|\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.index(\"\
    |\"):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkqophhn2.jl:15\n\
    in expression starting at /tmp/tmpkqophhn2.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.split(\" \")\n    music_string = [music_string[i] for i in range(music_string.length)]\n\
    \    music_string = [music_string[i] for i in range(music_string.length) if music_string[i]\
    \ == \"|\"]\n    music_string = [music_string[i] for i in range(music_string.length)\
    \ if music_string[i] == \"o\"]\n    music_string = [music_string[i] for i in range(music_string.length)\
    \ if music_string[i] == \"|\"]\n    music_string = [music_string[i] for i in range(music_string.length)\
    \ if music_string[i] == \"|\"]\n    music_string = [music_string[i] for i in range(music_string.length)\
    \ if music_string[i] == \"|\"]\n    music_string = [music_string[i] for i in range(music_string.length)\
    \ if music_string[i] == \"|\"]\n    music_string = [music_string[i] for i in range(music_string.length)\
    \ if music_string[i] == \"|\"]\n    music_string = [music_string[i] for i in range(music_string.length)\
    \ if music_string[i] == \"|\"]\n    music_string = [music_string[i] for i in range(music_string.length)\
    \ if music_string[i] == \"|\"]\n    music_string = [music_string[i] for i in range(music_string.length)\
    \ if music_string[i] == \"|\"]\n    music_string = [music_string[i] for i in range(music_string.length)\
    \ if music_string[i] == \"|\"]\n    music_string = [music_string[i] for i in range(music_string.length)\
    \ if music_string[i] == \"|\"]\n    music_string = [music_string[i] for i in range(music_string.length)\
    \ if music_string[i] == \"|\"]\n    music_string = [music_string[i] for i in range(music_string.length)\
    \ if music_string[i] == \"|\"]\n    music_string = [music_string[i] for i in range(music_string.length)\
    \ if music_string[i] == \"|\"]\n    music_string = [music_string[i] for i in range(music_string.length)\
    \ if music_string[i] == \"|\"]\n    music_string = [music_string[i] for i in range(music_string.length)\
    \ if music_string[i] == \"|\"]\n    music_string = [music_string[i] for i in range(music_string.length)\
    \ if music_string[i] == \"|\"]\n    music_string = [music_string[i] for i in range(music_string.length)\
    \ if music_string[i] == \"|\"]\n    music_string = [music_string[i] for i in range(music_string.length)\
    \ if music_string[i] == \"|\"]\n    music_string = [music_string[i] for i in range(music_string.length)\
    \ if music_string[i] == \"|\"]\n    music_string\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4flply77.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp4flply77.jl:1\n\
    in expression starting at /tmp/tmp4flply77.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.replace(\"o\", \"0\")\n\
    \    music_string = music_string.replace(\"|\", \"1\")\n    music_string = music_string.replace(\"\
    .\", \"2\")\n    music_string = music_string.replace(\"o|\", \"3\")\n    music_string\
    \ = music_string.replace(\".|\", \"4\")\n    music_string = music_string.replace(\"\
    o|\", \"5\")\n    music_string = music_string.replace(\".|\", \"6\")\n    music_string\
    \ = music_string.replace(\"o|\", \"7\")\n    music_string = music_string.replace(\"\
    .|\", \"8\")\n    music_string = music_string.replace(\"o|\", \"9\")\n    music_string\
    \ = music_string.replace(\".|\", \"10\")\n    music_string = music_string.replace(\"\
    o|\", \"11\")\n    music_string = music_string.replace(\".|\", \"12\")\n    music_string\
    \ = music_string.replace(\"o|\", \"13\")\n    music_string = music_string.replace(\"\
    .|\", \"14\")\n    music_string = music_string.replace(\"o|\", \"15\")\n    music_string\
    \ = music_string.replace(\".|\", \"16\")\n    music_string = music_string.replace(\"\
    o|\", \"17\")\n    music_string = music_string.replace(\".|\", \"18\")\n    music_string\
    \ = music_string.replace(\"o|\", \"19\")\n    music_string = music_string.replace(\"\
    .|\", \"20\")\n    music_string = music_string.replace(\"o|\", \"21\")\n    music_string\
    \ = music_string.replace(\".|\", \"22\")\n    music_string = music_string.replace(\"\
    o|\", \"23\")\n    music_string = music_string.replace(\".|\", \"24\")\n    music_string\
    \ = music_string.replace(\"o|\", \"25\")\n    music_string = music_string.replace(\"\
    .|\", \"26\")\n    music_string = music_string.replace(\"o|\", \"27\")\n    music_string\
    \ = music_string.replace(\".|\", \"28\")\n    music_string = music_string.replace(\"\
    o|\", \"29\")\n    music_string = music_string.replace(\".|\", \"30\")\n    music_string\
    \ = music_string.replace(\"o|\", \"31\")\n    music_string = music_string.replace(\"\
    .|\", \"32\")\n    music_string = music_string.replace(\"o|\", \"33\")\n    music_string\
    \ = music_string.replace(\".|\", \"34\")\n    music_string = music_string.replace(\"\
    o|\", \"35\")\n    music_string = music_string.replace(\".|\", \"36\")\n    music_string\
    \ = music_string.replace(\"o|\", \"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3okvwc5r.jl:58\nin expression starting at\
    \ /tmp/tmp3okvwc5r.jl:58\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.split(\" \")\n    music_string = [x for x in music_string if\
    \ x != \"\"]\n    music_string = [x for x in music_string if x != \"o\"]\n   \
    \ music_string = [x for x in music_string if x != \"|\"]\n    music_string = [x\
    \ for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmp5q2jglvn.jl:49\nin expression starting at /tmp/tmp5q2jglvn.jl:49\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string[music_string.rfind(\"\
    #\") + 1 .. end]\n    music_string = music_string[music_string.rfind(\"|\") +\
    \ 1 .. end]\n    music_string = music_string[music_string.rfind(\":\") + 1 ..\
    \ end]\n    music_string = music_string[music_string.rfind(\";\") + 1 .. end]\n\
    \    music_string = music_string[music_string.rfind(\":\") + 1 .. end]\n    music_string\
    \ = music_string[music_string.rfind(\":\") + 1 .. end]\n    music_string = music_string[music_string.rfind(\"\
    :\") + 1 .. end]\n    music_string = music_string[music_string.rfind(\":\") +\
    \ 1 .. end]\n    music_string = music_string[music_string.rfind(\":\") + 1 ..\
    \ end]\n    music_string = music_string[music_string.rfind(\":\") + 1 .. end]\n\
    \    music_string = music_string[music_string.rfind(\":\") + 1 .. end]\n    music_string\
    \ = music_string[music_string.rfind(\":\") + 1 .. end]\n    music_string = music_string[music_string.rfind(\"\
    :\") + 1 .. end]\n    music_string = music_string[music_string.rfind(\":\") +\
    \ 1 .. end]\n    music_string = music_string[music_string.rfind(\":\") + 1 ..\
    \ end]\n    music_string = music_string[music_string.rfind(\":\") + 1 .. end]\n\
    \    music_string = music_string[music_string.rfind(\":\") + 1 .. end]\n    music_string\
    \ = music_string[music_string.rfind(\":\") + 1 .. end]\n    music_string = music_string[music_string.rfind(\"\
    :\") + 1 .. end]\n    music_string = music_string[music_string.rfind(\":\") +\
    \ 1 .. end]\n    music_string = music_string[music_string.rfind(\":\") + 1 ..\
    \ end]\n    music_string = music_string[music_string.rfind(\":\") + 1 .. end]\n\
    \    music_string = music_string[music_string.rfind(\":\") + 1 .. end]\n    music_string\
    \ = music_string[music_string.rfind(\":\") + 1 .. end]\n    music_string = music_string[music_string.rfind(\"\
    :\") + 1 .. end]\n    music_string = music_string[music_string.rfind(\":\") +\
    \ 1 .. end]\n    music_string = music_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps5eq4skr.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps5eq4skr.jl:1\n\
    in expression starting at /tmp/tmps5eq4skr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes.map(x -> x.strip)\n    music_notes\
    \ = music_notes.map(x -> x.split(\"o\"))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.toInt64))\n    music_notes = music_notes.map(x -> x.map(x ->\
    \ x.sum))\n    music_notes = music_notes.map(x -> x.map(x -> x.max))\n    music_notes\
    \ = music_notes.map(x -> x.map(x -> x.min))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.product))\n    music_notes = music_notes.map(x -> x.map(x ->\
    \ x.sum))\n    music_notes = music_notes.map(x -> x.map(x -> x.product))\n   \
    \ music_notes = music_notes.map(x -> x.map(x -> x.product))\n    music_notes =\
    \ music_notes.map(x -> x.map(x -> x.product))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.product))\n    music_notes = music_notes.map(x -> x.map(x ->\
    \ x.product))\n    music_notes = music_notes.map(x -> x.map(x -> x.product))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.product))\n    music_notes\
    \ = music_notes.map(x -> x.map(x -> x.product))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.product))\n    music_notes = music_notes.map(x -> x.map(x ->\
    \ x.product))\n    music_notes = music_notes.map(x -> x.map(x -> x.product))\n\
    \    music_notes = music_notes.map(x -> x.map(x -> x.product))\n    music_notes\
    \ = music_notes.map(x -> x.map(x -> x.product))\n    music_notes = music_notes.map(x\
    \ -> x.map(x -> x.product))\n    music_notes = music_notes.map(x -> x.map(x ->\
    \ x.product))\n    music_notes = music_notes.map(x -> x.map(x -> x.product))\n\
    \    music_notes = \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5adytz76.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5adytz76.jl:1\n\
    in expression starting at /tmp/tmp5adytz76.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[1 : music_string.index(\"o\")]\n    music_string = music_string[1\
    \ : music_string.index(\"o\")]\n    music_string = music_string[1 : music_string.index(\"\
    o\")]\n    music_string = music_string[1 : music_string.index(\"o\")]\n    music_string\
    \ = music_string[1 : music_string.index(\"o\")]\n    music_string = music_string[1\
    \ : music_string.index(\"o\")]\n    music_string = music_string[1 : music_string.index(\"\
    o\")]\n    music_string = music_string[1 : music_string.index(\"o\")]\n    music_string\
    \ = music_string[1 : music_string.index(\"o\")]\n    music_string = music_string[1\
    \ : music_string.index(\"o\")]\n    music_string = music_string[1 : music_string.index(\"\
    o\")]\n    music_string = music_string[1 : music_string.index(\"o\")]\n    music_string\
    \ = music_string[1 : music_string.index(\"o\")]\n    music_string = music_string[1\
    \ : music_string.index(\"o\")]\n    music_string = music_string[1 : music_string.index(\"\
    o\")]\n    music_string = music_string[1 : music_string.index(\"o\")]\n    music_string\
    \ = music_string[1 : music_string.index(\"o\")]\n    music_string = music_string[1\
    \ : music_string.index(\"o\")]\n    music_string = music_string[1 : music_string.index(\"\
    o\")]\n    music_string = music_string[1 : music_string.index(\"o\")]\n    music_string\
    \ = music_string[1 : music_string.index(\"o\")]\n    music_string = music_string[1\
    \ : music_string.index(\"o\")]\n    music_string = music_string[1 : music_string.index(\"\
    o\")]\n    music_string = music_string[1 : music_string.index(\"o\")]\n    music_string\
    \ = music_string[1 : music_string.index(\"o\")]\n    music_string = music_string[1\
    \ : music_string.index(\"o\")]\n    music_string = music_string[1 : music_string.index(\"\
    o\")]\n    music_string = music_string[1 : musi\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq2ciefpy.jl:1\nin expression starting at /tmp/tmpq2ciefpy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxh5owx49.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxh5owx49.jl:1\n\
    in expression starting at /tmp/tmpxh5owx49.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2f_v3i4v.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2f_v3i4v.jl:1\n\
    in expression starting at /tmp/tmp2f_v3i4v.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvs6mfs9n.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvs6mfs9n.jl:1\n\
    in expression starting at /tmp/tmpvs6mfs9n.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.start-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_ev5bk4b.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_ev5bk4b.jl:1\n\
    in expression starting at /tmp/tmp_ev5bk4b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.split(\" \")\n    music_string = [x for x in music_string if\
    \ x != \"\"]\n    music_string = [x for x in music_string if x != \"o\"]\n   \
    \ music_string = [x for x in music_string if x != \"|\"]\n    music_string = [x\
    \ for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmp5q2jglvn.jl:49\nin expression starting at /tmp/tmp5q2jglvn.jl:49\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 .. music_string.index(\"|\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 .. music_string.index(\"|\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 .. music_string.index(\"|\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 .. music_string.index(\"|\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 .. music_string.index(\"|\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 .. music_string.index(\"|\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 .. music_string.index(\"|\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 .. music_string.index(\"|\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    |\") + 1 .. music_string.index(\"|\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnscs_id4.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpnscs_id4.jl:1\n\
    in expression starting at /tmp/tmpnscs_id4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.split(\" \")\n    music_string = [x for x in music_string if\
    \ x != \"\"]\n    music_string = [x for x in music_string if x != \"o\"]\n   \
    \ music_string = [x for x in music_string if x != \"|\"]\n    music_string = [x\
    \ for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpgf385h6n.jl:49\nin expression starting at /tmp/tmpgf385h6n.jl:49\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxh5owx49.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxh5owx49.jl:1\n\
    in expression starting at /tmp/tmpxh5owx49.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpak6x9j2b.jl:1\nin expression starting at /tmp/tmpak6x9j2b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.split(\" \")\n    music_string = [x for x in music_string if\
    \ x != \"\"]\n    music_string = [x for x in music_string if x != \"o\"]\n   \
    \ music_string = [x for x in music_string if x != \"|\"]\n    music_string = [x\
    \ for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpgf385h6n.jl:49\nin expression starting at /tmp/tmpgf385h6n.jl:49\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf6daw8ii.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf6daw8ii.jl:1\n\
    in expression starting at /tmp/tmpf6daw8ii.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0f6fka1h.jl:64\nin expression starting at\
    \ /tmp/tmp0f6fka1h.jl:64\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.split(\" \")\n    music_string = [music_string[i] for i in range(music_string.length)]\n\
    \    music_string = [music_string[i] for i in range(music_string.length) if music_string[i]\
    \ == \"|\"]\n    music_string = [music_string[i] for i in range(music_string.length)\
    \ if music_string[i] == \"o\"]\n    music_string = [music_string[i] for i in range(music_string.length)\
    \ if music_string[i] == \"o|\"]\n    music_string = [music_string[i] for i in\
    \ range(music_string.length) if music_string[i] == \".|\"]\n    music_string =\
    \ [music_string[i] for i in range(music_string.length) if music_string[i] == \"\
    .\"]\n    music_string = [music_string[i] for i in range(music_string.length)\
    \ if music_string[i] == \".|\"]\n    music_string = [music_string[i] for i in\
    \ range(music_string.length) if music_string[i] == \".|\"]\n    music_string =\
    \ [music_string[i] for i in range(music_string.length) if music_string[i] == \"\
    .|\"]\n    music_string = [music_string[i] for i in range(music_string.length)\
    \ if music_string[i] == \".|\"]\n    music_string = [music_string[i] for i in\
    \ range(music_string.length) if music_string[i] == \".|\"]\n    music_string =\
    \ [music_string[i] for i in range(music_string.length) if music_string[i] == \"\
    .|\"]\n    music_string = [music_string[i] for i in range(music_string.length)\
    \ if music_string[i] == \".|\"]\n    music_string = [music_string[i] for i in\
    \ range(music_string.length) if music_string[i] == \".|\"]\n    music_string =\
    \ [music_string[i] for i in range(music_string.length) if music_string[i] == \"\
    .|\"]\n    music_string = [music_string[i] for i in range(music_string.length)\
    \ if music_string[i] == \".|\"]\n    music_string = [music_string[i] for i in\
    \ range(music_string.length) if music_string[i] == \".|\"]\n    music_string =\
    \ [music_string[i] for i in range(music_string.length) if music_string[i] == \"\
    .|\"]\n    music_string = [music_string[i] for i in range(music_string.length)\
    \ if music_string[i] == \".|\"]\n    music_string = [music_string[i] for i in\
    \ range(music_string.length) if music_string[i] == \".|\"]\n    music_string =\
    \ [music_string[i] for i in range(music_string.length) if music_string[i] == \"\
    .|\"]\n    music_string = [music_string[i] for i in range(music_string.length)\
    \ if music_string[i] == \".|\"]\n    music_string\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjftylv2i.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjftylv2i.jl:1\n\
    in expression starting at /tmp/tmpjftylv2i.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string != \"\
    \ \"]\n    music_string = music_string[music_string != \"\\n\"]\n    music_string\
    \ = music_string[music_string != \"\\t\"]\n    music_string = music_string[music_string\
    \ != \"\\r\"]\n    music_string = music_string[music_string != \"\\f\"]\n    music_string\
    \ = music_string[music_string != \"\\v\"]\n    music_string = music_string[music_string\
    \ != \"\\a\"]\n    music_string = music_string[music_string != \"\\e\"]\n    music_string\
    \ = music_string[music_string != \"\\v\"]\n    music_string = music_string[music_string\
    \ != \"\\e\"]\n    music_string = music_string[music_string != \"\\a\"]\n    music_string\
    \ = music_string[music_string != \"\\v\"]\n    music_string = music_string[music_string\
    \ != \"\\e\"]\n    music_string = music_string[music_string != \"\\a\"]\n    music_string\
    \ = music_string[music_string != \"\\v\"]\n    music_string = music_string[music_string\
    \ != \"\\e\"]\n    music_string = music_string[music_string != \"\\a\"]\n    music_string\
    \ = music_string[music_string != \"\\v\"]\n    music_string = music_string[music_string\
    \ != \"\\e\"]\n    music_string = music_string[music_string != \"\\a\"]\n    music_string\
    \ = music_string[music_string != \"\\v\"]\n    music_string = music_string[music_string\
    \ != \"\\e\"]\n    music_string = music_string[music_string != \"\\a\"]\n    music_string\
    \ = music_string[music_string != \"\\v\"]\n    music_string = music_string[music_string\
    \ != \"\\e\"]\n    music_string = music_string[music_string != \"\\a\"]\n    music_string\
    \ = music_string[music_string != \"\\v\"]\n    music_string = music_string[music_string\
    \ != \"\\e\"]\n    music_string = music_string[music_string != \"\\a\"]\n    music_string\
    \ = music_string[music_string != \"\\v\"]\n    music_string = music_string[music_string\
    \ != \"\\e\"]\n    music_string = music_string[music_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzea_u6ha.jl:1\nin expression starting at /tmp/tmpzea_u6ha.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string != \"\
    \ \"]\n    music_string = music_string[music_string != \"\\n\"]\n    music_string\
    \ = music_string[music_string != \"\\t\"]\n    music_string = music_string[music_string\
    \ != \"\\r\"]\n    music_string = music_string[music_string != \"\\f\"]\n    music_string\
    \ = music_string[music_string != \"\\v\"]\n    music_string = music_string[music_string\
    \ != \"\\a\"]\n    music_string = music_string[music_string != \"\\e\"]\n    music_string\
    \ = music_string[music_string != \"\\i\"]\n    music_string = music_string[music_string\
    \ != \"\\o\"]\n    music_string = music_string[music_string != \"\\c\"]\n    music_string\
    \ = music_string[music_string != \"\\m\"]\n    music_string = music_string[music_string\
    \ != \"\\p\"]\n    music_string = music_string[music_string != \"\\v\"]\n    music_string\
    \ = music_string[music_string != \"\\a\"]\n    music_string = music_string[music_string\
    \ != \"\\e\"]\n    music_string = music_string[music_string != \"\\i\"]\n    music_string\
    \ = music_string[music_string != \"\\o\"]\n    music_string = music_string[music_string\
    \ != \"\\c\"]\n    music_string = music_string[music_string != \"\\m\"]\n    music_string\
    \ = music_string[music_string != \"\\p\"]\n    music_string = music_string[music_string\
    \ != \"\\v\"]\n    music_string = music_string[music_string != \"\\a\"]\n    music_string\
    \ = music_string[music_string != \"\\e\"]\n    music_string = music_string[music_string\
    \ != \"\\i\"]\n    music_string = music_string[music_string != \"\\o\"]\n    music_string\
    \ = music_string[music_string != \"\\c\"]\n    music_string = music_string[music_string\
    \ != \"\\m\"]\n    music_string = music_string[music_string != \"\\p\"]\n    music_string\
    \ = music_string[music_string != \"\\v\"]\n    music_string = music_string[music_string\
    \ != \"\\a\"]\n    music_string = music_string[music_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjn4dutv2.jl:23\nin expression starting at /tmp/tmpjn4dutv2.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes.map(x -> x.strip)\n    music_notes\
    \ = music_notes.map(x -> x.split(\" \"))\n    music_notes = music_notes.map(x\
    \ -> x[1])\n    music_notes = music_notes.map(x -> x.split(\"o\"))\n    music_notes\
    \ = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x -> x.split(\"\
    .\"))\n    music_notes = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x\
    \ -> x.split(\".\"))\n    music_notes = music_notes.map(x -> x[1])\n    music_notes\
    \ = music_notes.map(x -> x.split(\".\"))\n    music_notes = music_notes.map(x\
    \ -> x[1])\n    music_notes = music_notes.map(x -> x.split(\".\"))\n    music_notes\
    \ = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x -> x.split(\"\
    .\"))\n    music_notes = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x\
    \ -> x.split(\".\"))\n    music_notes = music_notes.map(x -> x[1])\n    music_notes\
    \ = music_notes.map(x -> x.split(\".\"))\n    music_notes = music_notes.map(x\
    \ -> x[1])\n    music_notes = music_notes.map(x -> x.split(\".\"))\n    music_notes\
    \ = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x -> x.split(\"\
    .\"))\n    music_notes = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x\
    \ -> x.split(\".\"))\n    music_notes = music_notes.map(x -> x[1])\n    music_notes\
    \ = music_notes.map(x -> x.split(\".\"))\n    music_notes = music_notes.map(x\
    \ -> x[1])\n    music_notes = music_notes.map(x -> x.split(\".\"))\n    music_notes\
    \ = music_notes.map(x -> x[1])\n    music_notes = music_notes.map(x -> x.split(\"\
    .\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5ii1iiug.jl:52\nin expression starting at\
    \ /tmp/tmp5ii1iiug.jl:52\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_string.index(\"|\"):]\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):]\n    music_string\
    \ = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.index(\"\
    |\"):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp50an4n6d.jl:15\n\
    in expression starting at /tmp/tmp50an4n6d.jl:15\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.split(\" \")\n    music_string = [x for x in music_string if\
    \ x != \"\"]\n    music_string = [x for x in music_string if x != \"o\"]\n   \
    \ music_string = [x for x in music_string if x != \"|\"]\n    music_string = [x\
    \ for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpgf385h6n.jl:49\nin expression starting at /tmp/tmpgf385h6n.jl:49\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end]\n    music_string = music_string[music_string != \".\"\
    ]\n    music_string = music_string[music_string != \"|\"]\n    music_string =\
    \ music_string[music_string != \" \"]\n    music_string = music_string[music_string\
    \ != \"o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \" \"]\n    music_string = music_string[music_string\
    \ != \"o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \" \"]\n    music_string = music_string[music_string\
    \ != \"o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \" \"]\n    music_string = music_string[music_string\
    \ != \"o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \" \"]\n    music_string = music_string[music_string\
    \ != \"o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \" \"]\n    music_string = music_string[music_string\
    \ != \"o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \" \"]\n    music_string = music_string[music_string\
    \ != \"o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \" \"]\n    music_string = music_string[music_string\
    \ != \"o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \" \"]\n    music_string = music_string[music_string\
    \ != \"o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \" \"]\n    music_string = music_string[music_string\
    \ != \"o\"]\n    music_string = music_string[music_string != \"|\"]\n    music_string\
    \ = music_string[music_string != \" \"]\n    music_string = music_string\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkh475t5f.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkh475t5f.jl:1\n\
    in expression starting at /tmp/tmpkh475t5f.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\"|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o\")]\n    music_string = music_string[music_string.findFirst(\"\
    .\")]\n    music_string = music_string[music_string.findFirst(\"o\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o\")]\n    music_string = music_string[music_string.findFirst(\"\
    o\")]\n    music_string = music_string[music_string.findFirst(\"o\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o\")]\n    music_string = music_string[music_string.findFirst(\"\
    o\")]\n    music_string = music_string[music_string.findFirst(\"o\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o\")]\n    music_string = music_string[music_string.findFirst(\"\
    o\")]\n    music_string = music_string[music_string.findFirst(\"o\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o\")]\n    music_string = music_string[music_string.findFirst(\"\
    o\")]\n    music_string = music_string[music_string.findFirst(\"o\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o\")]\n    music_string = music_string[music_string.findFirst(\"\
    o\")]\n    music_string = music_string[music_string.findFirst(\"o\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o\")]\n    music_string = music_string[music_string.findFirst(\"\
    o\")]\n    music_string = music_string[music_string.findFirst(\"o\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o\")]\n    music_string = music_string[music_string.findFirst(\"\
    o\")]\n    music_string = music_string[music_string.findFirst(\"o\")]\n    music_string\
    \ = music_string[music_string.findFirst(\"o\")]\n    music_string = music_string[music_string.findFirst(\"\
    o\")]\n    music_string = music_string[music_string.findFirst(\"o\")]\n    music_string\
    \ = music_string[music_string.\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpighaidzb.jl:1\nin expression starting at /tmp/tmpighaidzb.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \ \")\n    music_string = music_string.strip(\"\\n\")\n    music_string = music_string.strip(\"\
    \\r\")\n    music_string = music_string.strip(\"\\t\")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\" \")\n    music_string = music_string.strip(\"\
    \\n\")\n    music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp653tytfm.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp653tytfm.jl:1\n\
    in expression starting at /tmp/tmp653tytfm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[1 : \nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpadukpv76.jl:36\nin expression starting at\
    \ /tmp/tmpadukpv76.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string\n    music_string = music_string[1:end-1]\n    music_string =\
    \ music_string[findall(\"o|.|\", music_string)]\n    music_string = music_string[findall(\"\
    o\", music_string)]\n    music_string = music_string[findall(\"o|\", music_string)]\n\
    \    music_string = music_string[findall(\".|\", music_string)]\n    music_string\
    \ = music_string[findall(\"o\", music_string)]\n    music_string = music_string[findall(\"\
    o|\", music_string)]\n    music_string = music_string[findall(\".|\", music_string)]\n\
    \    music_string = music_string[findall(\"o\", music_string)]\n    music_string\
    \ = music_string[findall(\"o|\", music_string)]\n    music_string = music_string[findall(\"\
    .|\", music_string)]\n    music_string = music_string[findall(\"o\", music_string)]\n\
    \    music_string = music_string[findall(\"o|\", music_string)]\n    music_string\
    \ = music_string[findall(\".|\", music_string)]\n    music_string = music_string[findall(\"\
    o\", music_string)]\n    music_string = music_string[findall(\"o|\", music_string)]\n\
    \    music_string = music_string[findall(\".|\", music_string)]\n    music_string\
    \ = music_string[findall(\"o\", music_string)]\n    music_string = music_string[findall(\"\
    o|\", music_string)]\n    music_string = music_string[findall(\".|\", music_string)]\n\
    \    music_string = music_string[findall(\"o\", music_string)]\n    music_string\
    \ = music_string[findall(\"o|\", music_string)]\n    music_string = music_string[findall(\"\
    .|\", music_string)]\n    music_string = music_string[findall(\"o\", music_string)]\n\
    \    music_string = music_string[findall(\"o|\", music_string)]\n    music_string\
    \ = music_string[findall(\".|\", music_string)]\n    music_string = music_string[findall(\"\
    o\", music_string)]\n    music_string = music_string[findall(\"o|\", music_string)]\n\
    \    music_string = music_string[findall(\".|\", music_string)]\n    music_string\
    \ = music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpirdlz4kw.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpirdlz4kw.jl:1\n\
    in expression starting at /tmp/tmpirdlz4kw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvs6mfs9n.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvs6mfs9n.jl:1\n\
    in expression starting at /tmp/tmpvs6mfs9n.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvs6mfs9n.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvs6mfs9n.jl:1\n\
    in expression starting at /tmp/tmpvs6mfs9n.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string[1:end-1]\n    music_string = music_string[music_string == \"\
    o\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \".\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_string[music_string\
    \ == \"|\"]\n    music_string = music_string[music_string == \"|\"]\n    music_string\
    \ = music_string[music_string == \"|\"]\n    music_string = music_\nusing Test\n\
    \n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpv4ce0qlp.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv4ce0qlp.jl:1\n\
    in expression starting at /tmp/tmpv4ce0qlp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvs6mfs9n.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvs6mfs9n.jl:1\n\
    in expression starting at /tmp/tmpvs6mfs9n.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpak6x9j2b.jl:1\nin expression starting at /tmp/tmpak6x9j2b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.replace(\"o\", \"0\")\n\
    \    music_string = music_string.replace(\"|\", \"1\")\n    music_string = music_string.replace(\"\
    .\", \"2\")\n    music_string = music_string.replace(\",\", \"3\")\n    music_string\
    \ = music_string.replace(\":\", \"4\")\n    music_string = music_string.replace(\"\
    ;\", \"5\")\n    music_string = music_string.replace(\"-\", \"6\")\n    music_string\
    \ = music_string.replace(\"+\", \"7\")\n    music_string = music_string.replace(\"\
    ?\", \"8\")\n    music_string = music_string.replace(\"!\", \"9\")\n    music_string\
    \ = music_string.replace(\"(\", \"10\")\n    music_string = music_string.replace(\"\
    )\", \"11\")\n    music_string = music_string.replace(\"[\", \"12\")\n    music_string\
    \ = music_string.replace(\"]\", \"13\")\n    music_string = music_string.replace(\"\
    {\", \"14\")\n    music_string = music_string.replace(\"}\", \"15\")\n    music_string\
    \ = music_string.replace(\"<\", \"16\")\n    music_string = music_string.replace(\"\
    >\", \"17\")\n    music_string = music_string.replace(\"|\", \"18\")\n    music_string\
    \ = music_string.replace(\"~\", \"19\")\n    music_string = music_string.replace(\"\
    @\", \"20\")\n    music_string = music_string.replace(\"$\", \"21\")\n    music_string\
    \ = music_string.replace(\"%\", \"22\")\n    music_string = music_string.replace(\"\
    ^\", \"23\")\n    music_string = music_string.replace(\"&\", \"24\")\n    music_string\
    \ = music_string.replace(\"*\", \"25\")\n    music_string = music_string.replace(\"\
    (\", \"26\")\n    music_string = music_string.replace(\")\", \"27\")\n    music_string\
    \ = music_string.replace(\"{\", \"28\")\n    music_string = music_string.replace(\"\
    }\", \"29\")\n    music_string = music_string.replace(\"<\", \"30\")\n    music_string\
    \ = music_string.replace(\">\", \"31\")\n    music_string = music_string.replace(\"\
    |\", \"32\")\n    music_string = music_string.replace(\"~\", \"33\")\n    music_string\
    \ = music_string.replace(\"@\", \"34\")\n    music_string = music_string.replace(\"\
    $\", \"35\")\n    music_string = music_string.replace(\"%\", \"36\")\n    music_string\
    \ = music_string.replace(\"^\", \"37\")\n    music_string = music_string.replace(\"\
    &\", \"38\")\n    musi\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgj6u6g8t.jl:36\nin expression starting at\
    \ /tmp/tmpgj6u6g8t.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"|\") + 1 : music_string.find(\"|\", music_string.find(\"\
    |\") + 1)]\n    music_string = music_string[music_string.find(\"o\") + 1 : music_string.find(\"\
    o\", music_string.find(\"o\") + 1)]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : music_string.find(\"|\", music_string.find(\"|\") + 1)]\n    music_string\
    \ = music_string[music_string.find(\"o\") + 1 : music_string.find(\"o\", music_string.find(\"\
    o\") + 1)]\n    music_string = music_string[music_string.find(\"|\") + 1 : music_string.find(\"\
    |\", music_string.find(\"|\") + 1)]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : music_string.find(\"o\", music_string.find(\"o\") + 1)]\n    music_string\
    \ = music_string\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxh5owx49.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxh5owx49.jl:1\n\
    in expression starting at /tmp/tmpxh5owx49.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 .. music_string.index(\"|\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    .\") + 1 .. music_string.index(\".\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    \nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprpbnjlrz.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprpbnjlrz.jl:1\n\
    in expression starting at /tmp/tmprpbnjlrz.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_string.index(\"|\"):end]\n  \
    \  music_string = music_string[music_string.index(\"|\"):end]\n    music_string\
    \ = music_string[music_string.index(\"|\"):end]\n    music_string = music_string[music_string.index(\"\
    |\"):end]\n    music_string = music_string[music_\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpak6x9j2b.jl:1\nin expression starting at /tmp/tmpak6x9j2b.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.find(\"|\"\
    ) + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    o\") + 1 : string(music_string).end]\n    music_string = music_string[music_string.find(\"\
    |\") + 1 : string(music_string).end]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0frmvj2f.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0frmvj2f.jl:1\n\
    in expression starting at /tmp/tmp0frmvj2f.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \")]\n    music_string\
    \ = music_string[music_string.findFirst(\" \")]\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \")]\n    music_string\
    \ = music_string[music_string.findFirst(\" \")]\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \")]\n    music_string\
    \ = music_string[music_string.findFirst(\" \")]\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \")]\n    music_string\
    \ = music_string[music_string.findFirst(\" \")]\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \")]\n    music_string\
    \ = music_string[music_string.findFirst(\" \")]\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \")]\n    music_string\
    \ = music_string[music_string.findFirst(\" \")]\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \")]\n    music_string\
    \ = music_string[music_string.findFirst(\" \")]\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \")]\n    music_string\
    \ = music_string[music_string.findFirst(\" \")]\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \")]\n    music_string\
    \ = music_string[music_string.findFirst(\" \")]\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \")]\n    music_string\
    \ = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyns0syw5.jl:1\nin expression starting at /tmp/tmpyns0syw5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \") .. end]\n    music_string = music_string[music_string.findFirst(\" \") ..\
    \ end]\n    music_string = music_string[music_string.findFirst(\" \") .. end]\n\
    \    music_string = music_string[music_string.findFirst(\" \") .. end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \") .. end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \") .. end]\n    music_string = music_string[music_string.findFirst(\" \") ..\
    \ end]\n    music_string = music_string[music_string.findFirst(\" \") .. end]\n\
    \    music_string = music_string[music_string.findFirst(\" \") .. end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \") .. end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \") .. end]\n    music_string = music_string[music_string.findFirst(\" \") ..\
    \ end]\n    music_string = music_string[music_string.findFirst(\" \") .. end]\n\
    \    music_string = music_string[music_string.findFirst(\" \") .. end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \") .. end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \") .. end]\n    music_string = music_string[music_string.findFirst(\" \") ..\
    \ end]\n    music_string = music_string[music_string.findFirst(\" \") .. end]\n\
    \    music_string = music_string[music_string.findFirst(\" \") .. end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \") .. end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \") .. end]\n    music_string = music_string[music_string.findFirst(\" \") ..\
    \ end]\n    music_string = music_string[music_string.findFirst(\" \") .. end]\n\
    \    music_string = music_string[music_string.findFirst(\" \") .. end]\n    music_string\
    \ = music_string[music_string.findFirst(\" \") .. end]\n    music_string = music_string[music_string.findFirst(\"\
    \ \") .. end]\n    music_string = music_string[musi\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptiq62er5.jl:1\nin expression starting at /tmp/tmptiq62er5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.split(\" \")\n    music_string = [x for x in music_string if\
    \ x != \"\"]\n    music_string = [x for x in music_string if x != \"o\"]\n   \
    \ music_string = [x for x in music_string if x != \"|\"]\n    music_string = [x\
    \ for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \"|\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \"|\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmpgf385h6n.jl:49\nin expression starting at /tmp/tmpgf385h6n.jl:49\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvs6mfs9n.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvs6mfs9n.jl:1\n\
    in expression starting at /tmp/tmpvs6mfs9n.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.end-1:end]\n\
    \    music_string = music_string[1:end]\n    music_string = music_string[music_string.find(\"\
    /\") + 1 : end]\n    music_string = music_string[music_string.find(\"/\") + 1\
    \ : end]\n    music_string = music_string[music_string.find(\"/\") + 1 : end]\n\
    \    music_string = music_string[music_string.find(\"/\") + 1 : end]\n    music_string\
    \ = music_string[music_string.find(\"/\") + 1 : end]\n    music_string = music_string[music_string.find(\"\
    /\") + 1 : end]\n    music_string = music_string[music_string.find(\"/\") + 1\
    \ : end]\n    music_string = music_string[music_string.find(\"/\") + 1 : end]\n\
    \    music_string = music_string[music_string.find(\"/\") + 1 : end]\n    music_string\
    \ = music_string[music_string.find(\"/\") + 1 : end]\n    music_string = music_string[music_string.find(\"\
    /\") + 1 : end]\n    music_string = music_string[music_string.find(\"/\") + 1\
    \ : end]\n    music_string = music_string[music_string.find(\"/\") + 1 : end]\n\
    \    music_string = music_string[music_string.find(\"/\") + 1 : end]\n    music_string\
    \ = music_string[music_string.find(\"/\") + 1 : end]\n    music_string = music_string[music_string.find(\"\
    /\") + 1 : end]\n    music_string = music_string[music_string.find(\"/\") + 1\
    \ : end]\n    music_string = music_string[music_string.find(\"/\") + 1 : end]\n\
    \    music_string = music_string[music_string.find(\"/\") + 1 : end]\n    music_string\
    \ = music_string[music_string.find(\"/\") + 1 : end]\n    music_string = music_string[music_string.find(\"\
    /\") + 1 : end]\n    music_string = music_string[music_string.find(\"/\") + 1\
    \ : end]\n    music_string = music_string[music_string.find(\"/\") + 1 : end]\n\
    \    music_string = music_string[music_string.find(\"/\") + 1 : end]\n    music_string\
    \ = music_string[music_string.find(\"/\") + 1 : end]\n    music_string = music_string[music_string.find(\"\
    /\") + 1 : end]\n    music_string = music_string[music_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcyknawco.jl:1\nin expression starting at /tmp/tmpcyknawco.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 .. music_string.index(\"|\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    .\") + 1 .. music_string.index(\".\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    music_string = music_string[music_string.index(\"\
    o\") + 1 .. music_string.index(\"o\") - 1]\n    \nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprpbnjlrz.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprpbnjlrz.jl:1\n\
    in expression starting at /tmp/tmprpbnjlrz.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes[2:end]\n    music_notes\
    \ = music_notes[2:end]\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpizzbnlmr.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpizzbnlmr.jl:1\n\
    in expression starting at /tmp/tmpizzbnlmr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\") + 1 : music_string.index(\"|\", music_string.index(\"|\") + 1)]\n    music_string\
    \ = music_string[1 : music_string.index(\"o\")]\n    music_string = music_string[1\
    \ : music_string.index(\"o\")]\n    music_string = music_string[1 : music_string.index(\"\
    o\")]\n    music_string = music_string[1 : music_string.index(\"o\")]\n    music_string\
    \ = music_string[1 : music_string.index(\"o\")]\n    music_string = music_string[1\
    \ : music_string.index(\"o\")]\n    music_string = music_string[1 : music_string.index(\"\
    o\")]\n    music_string = music_string[1 : music_string.index(\"o\")]\n    music_string\
    \ = music_string[1 : music_string.index(\"o\")]\n    music_string = music_string[1\
    \ : music_string.index(\"o\")]\n    music_string = music_string[1 : music_string.index(\"\
    o\")]\n    music_string = music_string[1 : music_string.index(\"o\")]\n    music_string\
    \ = music_string[1 : music_string.index(\"o\")]\n    music_string = music_string[1\
    \ : music_string.index(\"o\")]\n    music_string = music_string[1 : music_string.index(\"\
    o\")]\n    music_string = music_string[1 : music_string.index(\"o\")]\n    music_string\
    \ = music_string[1 : music_string.index(\"o\")]\n    music_string = music_string[1\
    \ : music_string.index(\"o\")]\n    music_string = music_string[1 : music_string.index(\"\
    o\")]\n    music_string = music_string[1 : music_string.index(\"o\")]\n    music_string\
    \ = music_string[1 : music_string.index(\"o\")]\n    music_string = music_string[1\
    \ : music_string.index(\"o\")]\n    music_string = music_string[1 : music_string.index(\"\
    o\")]\n    music_string = music_string[1 : music_string.index(\"o\")]\n    music_string\
    \ = music_string[1 : music_string.index(\"o\")]\n    music_string = music_string[1\
    \ : music_string.index(\"o\")]\n    music_string = music_string[1 : music_string.index(\"\
    o\")]\n    music_string = music_string[1 : musi\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq2ciefpy.jl:1\nin expression starting at /tmp/tmpq2ciefpy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.split(\" \")\n    music_string = [x for x in music_string if\
    \ x != \"\"]\n    music_string = [x for x in music_string if x != \"o\"]\n   \
    \ music_string = [x for x in music_string if x != \"|\"]\n    music_string = [x\
    \ for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_string if x != \".\"]\n\
    \    music_string = [x for x in music_string if x != \"|\"]\n    music_string\
    \ = [x for x in music_string if x != \".\"]\n    music_string = [x for x in music_string\
    \ if x != \"|\"]\n    music_string = [x for x in music_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: expected \"]\"\nStacktrace:\n [1] top-level scope\n\
    \   @ /tmp/tmp5q2jglvn.jl:49\nin expression starting at /tmp/tmp5q2jglvn.jl:49\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\"|\")]\n    music_string\
    \ = music_string[music_string.findFirst(\" \")]\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \")]\n    music_string\
    \ = music_string[music_string.findFirst(\" \")]\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \")]\n    music_string\
    \ = music_string[music_string.findFirst(\" \")]\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \")]\n    music_string\
    \ = music_string[music_string.findFirst(\" \")]\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \")]\n    music_string\
    \ = music_string[music_string.findFirst(\" \")]\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \")]\n    music_string\
    \ = music_string[music_string.findFirst(\" \")]\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \")]\n    music_string\
    \ = music_string[music_string.findFirst(\" \")]\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \")]\n    music_string\
    \ = music_string[music_string.findFirst(\" \")]\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \")]\n    music_string\
    \ = music_string[music_string.findFirst(\" \")]\n    music_string = music_string[music_string.findFirst(\"\
    \ \")]\n    music_string = music_string[music_string.findFirst(\" \")]\n    music_string\
    \ = music_string[music_\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ujk7ot2.jl:1\nin expression starting at /tmp/tmp6ujk7ot2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvs6mfs9n.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvs6mfs9n.jl:1\n\
    in expression starting at /tmp/tmpvs6mfs9n.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip()\n    music_string = music_string.strip(\"\\n\")\n   \
    \ music_string = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\
    \\t\")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvs6mfs9n.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvs6mfs9n.jl:1\n\
    in expression starting at /tmp/tmpvs6mfs9n.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string.strip(\"\\n\")\n    music_string\
    \ = music_string.strip(\"\\r\")\n    music_string = music_string.strip(\"\\t\"\
    )\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n    music_string = music_string.strip(\"\
    \  \")\n    music_string = music_string.strip(\"  \")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7uo0pu1e.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7uo0pu1e.jl:1\n\
    in expression starting at /tmp/tmp7uo0pu1e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_notes = music_string.split(\"|\")\n    music_notes\
    \ = music_notes[2:end]\n    music_notes = music_notes.map(parse_note)\n    music_notes\
    \ = music_notes.map(x -> x * 4)\n    music_notes = music_notes.map(x -> x % 12)\n\
    \    music_notes = music_notes.map(x -> x % 12)\n    music_notes = music_notes.map(x\
    \ -> x % 12)\n    music_notes = music_notes.map(x -> x % 12)\n    music_notes\
    \ = music_notes.map(x -> x % 12)\n    music_notes = music_notes.map(x -> x % 12)\n\
    \    music_notes = music_notes.map(x -> x % 12)\n    music_notes = music_notes.map(x\
    \ -> x % 12)\n    music_notes = music_notes.map(x -> x % 12)\n    music_notes\
    \ = music_notes.map(x -> x % 12)\n    music_notes = music_notes.map(x -> x % 12)\n\
    \    music_notes = music_notes.map(x -> x % 12)\n    music_notes = music_notes.map(x\
    \ -> x % 12)\n    music_notes = music_notes.map(x -> x % 12)\n    music_notes\
    \ = music_notes.map(x -> x % 12)\n    music_notes = music_notes.map(x -> x % 12)\n\
    \    music_notes = music_notes.map(x -> x % 12)\n    music_notes = music_notes.map(x\
    \ -> x % 12)\n    music_notes = music_notes.map(x -> x % 12)\n    music_notes\
    \ = music_notes.map(x -> x % 12)\n    music_notes = music_notes.map(x -> x % 12)\n\
    \    music_notes = music_notes.map(x -> x % 12)\n    music_notes = music_notes.map(x\
    \ -> x % 12)\n    music_notes = music_notes.map(x -> x % 12)\n    music_notes\
    \ = music_notes.map(x -> x % 12)\n    music_notes = music_notes.map(x -> x % 12)\n\
    \    music_notes = music_notes.map(x -> x % 12)\n    music_notes = music_notes.map(x\
    \ -> x % 12)\n    musi\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp72bh5dpy.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp72bh5dpy.jl:1\n\
    in expression starting at /tmp/tmp72bh5dpy.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return vector\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = music_string.strip\n    music_string = music_string[music_string.index(\"\
    |\"):]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.index(\"|\"):music_string.index(\"\
    |\") + 1]\n    music_string = music_string[music_string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"music_string.index(\"\
    |\"):\" range expression \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1cxdhv2x.jl:15\n\
    in expression starting at /tmp/tmp1cxdhv2x.jl:15\n"
  stdout: ''
