language: jl
name: HumanEval_120_maximum
results:
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return\
    \ maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmp1c9gl06y.jl:40\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp1c9gl06y.jl:40 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp1c9gl06y.jl:39\n'''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr\n    for\
    \ i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n            maximum\
    \ = maximum[i-1:end]\n        else\n            break\n    end\n    return maximum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp49nc2ojm.jl:1\nin expression starting at /tmp/tmp49nc2ojm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr) || k < 1 \n        throw(ArgumentError(\"k must be in\
    \ range [1, length(arr)]\"))\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7tdgqqn2.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7tdgqqn2.jl:1\n\
    in expression starting at /tmp/tmp7tdgqqn2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n        maximum[end] = maximum(maximum(arr, k-1), k)\n        return\
    \ maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprcp6i0ww.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprcp6i0ww.jl:1\n\
    in expression starting at /tmp/tmprcp6i0ww.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum.(maximum.>maximum[i])\n\
    \        else\n            maximum = maximum.(maximum.<maximum[i])\n        end\n\
    \    end\n    return maximum\nend\nmaximum([-3, -4, 5], 3)\nmaximum([4, -4, 4],\
    \ 2)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 1)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 2)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 3)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 4)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 5)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 6)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 7)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 8)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 9)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 10)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 11)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 12)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 13)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 14)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 15)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 16)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 17)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 18)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 19)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 20)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 21)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 22)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 23)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 24)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 25)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 26)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 27)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 28)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 29)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 30)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 31)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 32)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 33)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 34)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 35)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 36)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 37)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 38)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 39)\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 40)\nmaximum([-3, 2, 1, 2, \nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: None
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr\n    for\
    \ i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n            maximum\
    \ = maximum[i-1:end]\n        else\n            break\n    end\n    return maximum\n\
    end\nmaximum([-3, -4, 5], 3)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([4,\
    \ -4, 4], 2), 1)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and a positive integer k and returns a sorted vector of length k\
    \ with the minimum k numbers in arr. \nFor example, minimum([-3, -4, 5], 3) should\
    \ return [-3, -4, 5].\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt_c5t3im.jl:39\nin expression starting at\
    \ /tmp/tmpt_c5t3im.jl:39\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            push!(maximum, maximum[i])\n        end\n    end\n\
    \    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpnc8mfk4g.jl:44\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpnc8mfk4g.jl:44 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpnc8mfk4g.jl:43\ntest set: Test Failed
    at /tmp/tmpnc8mfk4g.jl:45\n  Expression: candidate([4, -4, 4], 2) == [4, 4]\n   Evaluated:
    [-4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpnc8mfk4g.jl:45 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpnc8mfk4g.jl:43\n'''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i in 1:k\n   \
    \     maximum = maximum(maximum(maximum, arr), arr[i])\n    end\n    return maximum\n\
    end\nmaximum\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpl7kg06ku.jl:41\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    objects of type Vector{Int64} are not callable\n  Use square brackets [] for indexing
    an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @
    Main /tmp/tmpl7kg06ku.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl7kg06ku.jl:41 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpl7kg06ku.jl:40\ntest set: Error
    During Test at /tmp/tmpl7kg06ku.jl:42\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64} are not callable\n  Use
    square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmpl7kg06ku.jl:31\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpl7kg06ku.jl:42 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpl7kg06ku.jl:40\ntest set: Error During Test at
    /tmp/tmpl7kg06ku.jl:43\n  Test threw exception\n  Expression: candidate([-3, 2,
    1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Vector{Int64} are
    not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpl7kg06ku.jl:31\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpl7kg06ku.jl:43 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level '
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n        end\n    end\n    return maximum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmp0yom3fxq.jl:44\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yom3fxq.jl:44 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yom3fxq.jl:43\ntest set: Test Failed
    at /tmp/tmp0yom3fxq.jl:45\n  Expression: candidate([4, -4, 4], 2) == [4, 4]\n   Evaluated:
    [-4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yom3fxq.jl:45 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yom3fxq.jl:43\ntest set: Test Failed
    at /tmp/tmp0yom3fxq.jl:46\n  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1)
    == [2]\n   Evaluated: [-3, 2, 1, 2, -1, -2, 1] == [2]\nStacktrace:\n [1] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yom3fxq.jl:46 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yom3fxq.jl:43\ntest set: Test Failed
    at /tmp/tmp0yom3fxq.jl:47\n  Expression: candidate([123, -123, 20, 0, 1, 2, -3],
    3) == [2, 20, 123]\n   Evaluated: [123, -123, 20, 0, 1, 2, -3] == [2, 20, 123]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yom3fxq.jl:47 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yom3fxq.jl:43\n'''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), arr)\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(maximum([-3, -4, 5], 3), 3)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the minimum number in a given array of numbers.\nusing Test\n\n\
    @testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb6kjbjcq.jl:32\nin expression starting at\
    \ /tmp/tmpb6kjbjcq.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr\n    for\
    \ i = 1:k\n        maximum = maximum(maximum(maximum, arr), maximum)\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3,\
    \ -4, 5], 3), 3)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([4, -4,\
    \ 4], 2), 2)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, 2, 1, 2,\
    \ -1, -2, 1], 1), 1)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the numbers in a vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxzzktobh.jl:35\nin expression starting at\
    \ /tmp/tmpxzzktobh.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr[k-1]\n  \
    \  for i in k+1:length(arr)\n        if maximum < arr[i]\n            maximum\
    \ = arr[i]\n        end\n    end\n    return maximum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyb164v_w.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyb164v_w.jl:1\n\
    in expression starting at /tmp/tmpyb164v_w.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum.(maximum.>arr[i])\n\
    \        else\n            maximum = maximum.(maximum.<=arr[i])\n        end\n\
    \    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmp1a6gklgm.jl:44\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp1a6gklgm.jl:44 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp1a6gklgm.jl:43\n'''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpenh50iys.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpenh50iys.jl:1\n\
    in expression starting at /tmp/tmpenh50iys.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n        end\n    end\n    return maximum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmp0yom3fxq.jl:44\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yom3fxq.jl:44 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yom3fxq.jl:43\ntest set: Test Failed
    at /tmp/tmp0yom3fxq.jl:45\n  Expression: candidate([4, -4, 4], 2) == [4, 4]\n   Evaluated:
    [-4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yom3fxq.jl:45 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yom3fxq.jl:43\ntest set: Test Failed
    at /tmp/tmp0yom3fxq.jl:46\n  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1)
    == [2]\n   Evaluated: [-3, 2, 1, 2, -1, -2, 1] == [2]\nStacktrace:\n [1] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yom3fxq.jl:46 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yom3fxq.jl:43\ntest set: Test Failed
    at /tmp/tmp0yom3fxq.jl:47\n  Expression: candidate([123, -123, 20, 0, 1, 2, -3],
    3) == [2, 20, 123]\n   Evaluated: [123, -123, 20, 0, 1, 2, -3] == [2, 20, 123]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yom3fxq.jl:47 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yom3fxq.jl:43\n'''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    else\n        maximum = arr[k-1]\n\
    \        for i = k+1:length(arr)\n            if maximum < arr[i]\n          \
    \      maximum = arr[i]\n            end\n        end\n        return maximum\n\
    \    end\nend\nmaximum([-3, -4, 5], 3)\n</cell>\n<code language=julia-1.3>\nmaximum([4,\
    \ -4, 4], 2)\n</cell>\n<code language=julia-1.3>\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the minimum\
    \ number in a given vector. \nThe function should take in a vector of integers\
    \ and a positive integer k. \nThe function should return the minimum number in\
    \ the vector arr of length k.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: None
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr\n    for\
    \ i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n            maximum\
    \ = maximum[i-1:end]\n        else\n            maximum = maximum[i-1:end]\n \
    \       end\n    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp70xnsgac.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp70xnsgac.jl:1\n\
    in expression starting at /tmp/tmp70xnsgac.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= length(arr)\n        maximum = arr\n    else\n        maximum = maximum.(arr[k+1:end])\n\
    \    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpu9iw9h00.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmpu9iw9h00.jl:38\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu9iw9h00.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu9iw9h00.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpu9iw9h00.jl:39\n  Expression: candidate([4, -4, 4], 2) ==\
    \ [4, 4]\n   Evaluated: [4, -4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu9iw9h00.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu9iw9h00.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpu9iw9h00.jl:40\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3, 2, 1, 2, -1, -2, 1] == [2]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu9iw9h00.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu9iw9h00.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpu9iw9h00.jl:41\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, -123, 20, 0, 1, 2, -3] ==\
    \ [2, 20, 123]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu9iw9h00.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu9iw9h00.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpu9iw9h00.jl:42\n  Expression: candidate([-123, 20,"
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 0 \n        return arr\n    else \n        maximum = maximum(k-1,\
    \ maximum(arr, k-1))\n        maximum[end] = maximum(maximum[end], arr[k-1])\n\
    \        return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1bj5xgb1.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1bj5xgb1.jl:1\n\
    in expression starting at /tmp/tmp1bj5xgb1.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= 0 || k > length(arr)\n        throw(ArgumentError(\"k must be in\
    \ range (0, length(arr))\"))\n    end\n    maximum = arr[k-1]\n    for i in k+1:length(arr)\n\
    \        if arr[i] > maximum\n            maximum = arr[i]\n        end\n    end\n\
    \    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp_luh4qk3.jl:42\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    Cannot `convert` an object of type Int64 to an object of type Vector{Int64}\n  Closest
    candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp_luh4qk3.jl:35\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_luh4qk3.jl:42 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_luh4qk3.jl:41\n'''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n        maximum[end] = maximum(arr[end], k-1)\n        return maximum\n\
    end\nmaximum([-3, -4, 5], 3)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3,\
    \ -4, 5], 3), 3)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([4, -4,\
    \ 4], 2), 2)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, 2, 1, 2,\
    \ -1, -2, 1], 1), 1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the numbers in a vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi30mpwvx.jl:34\nin expression starting at\
    \ /tmp/tmpi30mpwvx.jl:34\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be <= length(arr)\"\
    ))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i]\
    \ > maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n     \
    \       break\n        end\n    end\n    return maximum\nend\nmaximum()\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: None
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= 0 || k > length(arr)\n        throw(ArgumentError(\"k must be in\
    \ range [0, length(arr))\"))\n    end\n    maximum = arr\n    for i = k - 1 downto\
    \ 1 \n        maximum = maximum(maximum(maximum, arr[i]), arr[i + 1])\n    end\n\
    \    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpqlop6izh.jl:30 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqlop6izh.jl:30\n\
    in expression starting at /tmp/tmpqlop6izh.jl:30\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr) \n        throw(ArgumentError(\"k should be less than\
    \ or equal to the length of arr\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\
    \ \n        if maximum[i] > maximum[i-1] \n            maximum = maximum[i-1:end]\n\
    \        else\n            maximum = maximum[i-1:end]\n        end\n    end\n\
    \    return maximum\nend\nmaximum\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmp7q0nzyu1.jl:45\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp7q0nzyu1.jl:45 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp7q0nzyu1.jl:44\ntest set: Test Failed
    at /tmp/tmp7q0nzyu1.jl:46\n  Expression: candidate([4, -4, 4], 2) == [4, 4]\n   Evaluated:
    [-4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp7q0nzyu1.jl:46 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp7q0nzyu1.jl:44\n'''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= length(arr)\n        maximum = arr[k:]\n        maximum.push(-maximum(maximum))\n\
    \        return maximum\n    else\n        return arr\n    end\nend\n</cell>\n\
    <text>\nExercise 3: maximum\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"k:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpi8ewd51k.jl:27\nin expression\
    \ starting at /tmp/tmpi8ewd51k.jl:27\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to the length of arr\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return\
    \ maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpophr729l.jl:40\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpophr729l.jl:40 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpophr729l.jl:39\n'''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= length(arr)\n        maximum = arr\n    else\n        maximum = maximum.(arr[k+1:end])\n\
    \    end\n    return maximum\nend\n</cell>\n<text>\nmaximum([-3, -4, 5], 3)\n\
    </cell>\n<text>\nmaximum([4, -4, 4], 2)\n</cell>\n<text>\nmaximum([-3, 2, 1, 2,\
    \ -1, -2, 1], 1)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ arr of integers and a positive integer k, and returns a sorted vector arr of\
    \ length k with the minimum k numbers in arr.\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxvqisxsw.jl:33\nin expression starting at\
    \ /tmp/tmpxvqisxsw.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 0 \n        return arr\n    else \n        maximum = maximum([maximum,\
    \ arr[k]], k-1)\n        return maximum\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_z6t1zg7.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_z6t1zg7.jl:1\n\
    in expression starting at /tmp/tmp_z6t1zg7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr) \n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\
    \ \n        maximum[i] = maximum(maximum(maximum, arr[i]), maximum[i])\n    end\n\
    \    return maximum\nend\n\"\"\"\n    Given a vector arr of integers and a positive\
    \ integer k, return a sorted vector \n    of length k with the minimum k numbers\
    \ in arr.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqo1ta4m6.jl:35\nin expression starting at\
    \ /tmp/tmpqo1ta4m6.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr\n    for\
    \ i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n            maximum\
    \ = maximum[i-1:end]\n        else\n            break\n    end\n    return maximum\n\
    end\nmaximum([-3, -4, 5], 3)\n</cell>\n<text>\nExercise 5\nWrite a function that\
    \ returns the minimum number in a given vector. \nThe function should take in\
    \ a vector of integers and a positive integer k. \nThe function should return\
    \ a sorted vector of length k with the minimum k numbers in arr.\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoao6jzvs.jl:39\nin expression starting at\
    \ /tmp/tmpoao6jzvs.jl:39\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), k)\n    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpzq2fxcby.jl:37\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    objects of type Vector{Int64} are not callable\n  Use square brackets [] for indexing
    an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @
    Main /tmp/tmpzq2fxcby.jl:28\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzq2fxcby.jl:37 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzq2fxcby.jl:36\ntest set: Error
    During Test at /tmp/tmpzq2fxcby.jl:38\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64} are not callable\n  Use
    square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmpzq2fxcby.jl:28\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpzq2fxcby.jl:38 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpzq2fxcby.jl:36\ntest set: Error During Test at
    /tmp/tmpzq2fxcby.jl:39\n  Test threw exception\n  Expression: candidate([-3, 2,
    1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Vector{Int64} are
    not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpzq2fxcby.jl:28\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzq2fxcby.jl:39 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level '
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 0 \n        return arr\n    \n    maximum = arr[1]\n    \n    for\
    \ i = 2:k\n        if maximum < arr[i] \n            maximum = arr[i]\n      \
    \  end\n    end\n    \n    return maximum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpizr9rr2y.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpizr9rr2y.jl:1\n\
    in expression starting at /tmp/tmpizr9rr2y.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k should be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return\
    \ maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpm4za0bq2.jl:40\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpm4za0bq2.jl:40 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpm4za0bq2.jl:39\n'''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), k)\n    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpzq2fxcby.jl:37\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    objects of type Vector{Int64} are not callable\n  Use square brackets [] for indexing
    an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @
    Main /tmp/tmpzq2fxcby.jl:28\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzq2fxcby.jl:37 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpzq2fxcby.jl:36\ntest set: Error
    During Test at /tmp/tmpzq2fxcby.jl:38\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64} are not callable\n  Use
    square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmpzq2fxcby.jl:28\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpzq2fxcby.jl:38 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpzq2fxcby.jl:36\ntest set: Error During Test at
    /tmp/tmpzq2fxcby.jl:39\n  Test threw exception\n  Expression: candidate([-3, 2,
    1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Vector{Int64} are
    not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpzq2fxcby.jl:28\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpzq2fxcby.jl:39 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level '
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= length(arr)\n        maximum = arr\n    else\n        maximum = maximum([maximum,\
    \ arr[k]], k-1)\n    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp88yzyhgy.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmp88yzyhgy.jl:38\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp88yzyhgy.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp88yzyhgy.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp88yzyhgy.jl:39\n  Expression: candidate([4, -4, 4], 2) ==\
    \ [4, 4]\n   Evaluated: [4, -4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp88yzyhgy.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp88yzyhgy.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp88yzyhgy.jl:40\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3, 2, 1, 2, -1, -2, 1] == [2]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp88yzyhgy.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp88yzyhgy.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp88yzyhgy.jl:41\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, -123, 20, 0, 1, 2, -3] ==\
    \ [2, 20, 123]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp88yzyhgy.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp88yzyhgy.jl:37\ntest set: Test\
    \ Failed at /tmp/tmp88yzyhgy.jl:42\n  Expression: candidate([-123, 20,"
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr\n    for\
    \ i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n            maximum\
    \ = maximum[i-1:end]\n        else\n            break\n    end\n    return maximum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp49nc2ojm.jl:1\nin expression starting at /tmp/tmp49nc2ojm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n        end\n    end\n    return maximum\nend\n\
    maximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 1)\nmaximum() = maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 2)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 3)\nmaximum()\
    \ = maximum([-3, 2, 1, 2, -1, -2, 1], 4)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 5)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 6)\nmaximum() = maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 7)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 8)\n\
    maximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 9)\nmaximum() = maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 10)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 11)\nmaximum()\
    \ = maximum([-3, 2, 1, 2, -1, -2, 1], 12)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 13)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 14)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 15)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 16)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 17)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 18)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 19)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 20)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 21)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 22)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 23)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 24)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 25)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 26)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 27)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 28)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 29)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 30)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 31)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 32)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 33)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 34\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg5_ndon2.jl:73\nin expression starting at\
    \ /tmp/tmpg5_ndon2.jl:73\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = 1:k\n    \
    \    maximum = maximum(maximum(maximum, arr[i]), arr[i+1])\n    end\n    return\
    \ maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpxvldirt9.jl:40\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    objects of type Vector{Int64} are not callable\n  Use square brackets [] for indexing
    an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @
    Main /tmp/tmpxvldirt9.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxvldirt9.jl:40 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxvldirt9.jl:39\ntest set: Error
    During Test at /tmp/tmpxvldirt9.jl:41\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64} are not callable\n  Use
    square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmpxvldirt9.jl:31\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpxvldirt9.jl:41 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpxvldirt9.jl:39\ntest set: Error During Test at
    /tmp/tmpxvldirt9.jl:42\n  Test threw exception\n  Expression: candidate([-3, 2,
    1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Vector{Int64} are
    not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpxvldirt9.jl:31\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpxvldirt9.jl:42 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level '
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= length(arr)\n        maximum = arr\n        for i in 2:k\n      \
    \      maximum = maximum(maximum(maximum, arr), i)\n        end\n        return\
    \ maximum\n    else\n        return arr\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(maximum([-3, -4, 5], 3), 3)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([4,\
    \ -4, 4], 2), 2)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 1), 1)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the minimum number in a given vector. \nThe function should take in\
    \ a vector of integers and a positive integer k. \nThe function should return\
    \ the minimum number in the given vector with length k.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpovfyke97.jl:36\nin expression starting at\
    \ /tmp/tmpovfyke97.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, -4, 5],\
    \ 3), 3)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([4, -4, 4], 2),\
    \ 2)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1), 1)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum\
    \ of the numbers in a vector. \nThe function should take in a vector of integers\
    \ and return a vector of integers.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwasnqw6w.jl:35\nin expression starting at\
    \ /tmp/tmpwasnqw6w.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr\n    for\
    \ i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n            maximum\
    \ = maximum[i-1:end]\n        else\n            break\n    end\n    return maximum\n\
    end\nmaximum()\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplvgd77y3.jl:1\nin expression starting at /tmp/tmplvgd77y3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be <= length(arr)\"\
    ))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n        if maximum[i]\
    \ > maximum[i-1]\n            maximum = maximum[i-1:end]\n        else\n     \
    \       break\n        end\n    end\n    return maximum\nend\nmaximum() = maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\nmaximum([4, -4, 4], 2)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 2)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 3)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 4)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 5)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 6)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 7)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 8)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 9)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 10)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 11)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 12)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 13)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 14)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 15)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 16)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 17)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 18)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 19)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 20)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 21)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 22)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 23)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 24)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 25)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 26)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 27)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 28)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 29)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 30)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 31)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 32)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 33)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 34)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 35)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 36)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 37)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 38)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 39)\nmaximum([-3, 2, 1, 2, -1, -2, 1], 40)\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 41)\nmaximum([-3, 2, 1, 2, \nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: BoundsError: attempt to access 2-element Vector{Int64}\
    \ at index [6]\nStacktrace:\n [1] getindex\n   @ ./array.jl:861 [inlined]\n [2]\
    \ maximum(arr::Vector{Int64}, k::Int64)\n   @ Main /tmp/tmp5__3iwl0.jl:31\n [3]\
    \ top-level scope\n   @ /tmp/tmp5__3iwl0.jl:43\nin expression starting at /tmp/tmp5__3iwl0.jl:43\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= length(arr)\n        maximum = arr\n    else\n        maximum = arr[k:]\n\
    \    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"k:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphq0527yz.jl:29\nin expression\
    \ starting at /tmp/tmphq0527yz.jl:29\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to the length of arr\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return\
    \ maximum\nend\nmaximum()\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: None
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i in 1:k\n   \
    \     maximum = maximum(maximum(maximum, arr), arr[i])\n    end\n    return maximum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpx5wb1431.jl:40\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    objects of type Vector{Int64} are not callable\n  Use square brackets [] for indexing
    an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @
    Main /tmp/tmpx5wb1431.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx5wb1431.jl:40 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpx5wb1431.jl:39\ntest set: Error
    During Test at /tmp/tmpx5wb1431.jl:41\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64} are not callable\n  Use
    square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmpx5wb1431.jl:31\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpx5wb1431.jl:41 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpx5wb1431.jl:39\ntest set: Error During Test at
    /tmp/tmpx5wb1431.jl:42\n  Test threw exception\n  Expression: candidate([-3, 2,
    1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Vector{Int64} are
    not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpx5wb1431.jl:31\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpx5wb1431.jl:42 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level '
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 0 \n        return arr \n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k) \n        maximum[end] = maximum(arr[end], k) \n        return maximum\
    \ \nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwbvvwj0a.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpwbvvwj0a.jl:1\n\
    in expression starting at /tmp/tmpwbvvwj0a.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k should be less than or\
    \ equal to length(arr)\"))\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpuat9gg2z.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuat9gg2z.jl:1\n\
    in expression starting at /tmp/tmpuat9gg2z.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return\
    \ maximum\nend\nmaximum\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpk24ec3iu.jl:41\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpk24ec3iu.jl:41 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpk24ec3iu.jl:40\n'''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 0 \n        return arr\n    else \n        maximum = maximum([maximum,\
    \ arr[k]], k-1)\n        return maximum\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_z6t1zg7.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_z6t1zg7.jl:1\n\
    in expression starting at /tmp/tmp_z6t1zg7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= length(arr)\n        maximum = arr\n    else\n        maximum = maximum.(arr[k+1:end])\n\
    \    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpu9iw9h00.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmpu9iw9h00.jl:38\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu9iw9h00.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu9iw9h00.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpu9iw9h00.jl:39\n  Expression: candidate([4, -4, 4], 2) ==\
    \ [4, 4]\n   Evaluated: [4, -4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu9iw9h00.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu9iw9h00.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpu9iw9h00.jl:40\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3, 2, 1, 2, -1, -2, 1] == [2]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu9iw9h00.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu9iw9h00.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpu9iw9h00.jl:41\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, -123, 20, 0, 1, 2, -3] ==\
    \ [2, 20, 123]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpu9iw9h00.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpu9iw9h00.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpu9iw9h00.jl:42\n  Expression: candidate([-123, 20,"
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 0 \n        return arr\n    else \n        maximum = maximum([maximum,\
    \ arr[k]], k-1)\n        return maximum\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_z6t1zg7.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_z6t1zg7.jl:1\n\
    in expression starting at /tmp/tmp_z6t1zg7.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k should be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n        end\n    end\n    return maximum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpw3y35odc.jl:44\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpw3y35odc.jl:44 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpw3y35odc.jl:43\ntest set: Test Failed
    at /tmp/tmpw3y35odc.jl:45\n  Expression: candidate([4, -4, 4], 2) == [4, 4]\n   Evaluated:
    [-4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpw3y35odc.jl:45 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpw3y35odc.jl:43\ntest set: Test Failed
    at /tmp/tmpw3y35odc.jl:46\n  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1)
    == [2]\n   Evaluated: [-3, 2, 1, 2, -1, -2, 1] == [2]\nStacktrace:\n [1] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpw3y35odc.jl:46 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpw3y35odc.jl:43\ntest set: Test Failed
    at /tmp/tmpw3y35odc.jl:47\n  Expression: candidate([123, -123, 20, 0, 1, 2, -3],
    3) == [2, 20, 123]\n   Evaluated: [123, -123, 20, 0, 1, 2, -3] == [2, 20, 123]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpw3y35odc.jl:47 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpw3y35odc.jl:43\n'''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            push!(maximum, maximum[i])\n        end\n    end\n\
    \    return maximum\nend\n</cell>\n<text>\nmaximum([-3, -4, 5], 3)\n</cell>\n\
    <text>\nmaximum([4, -4, 4], 2)\n</cell>\n<text>\nmaximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the minimum\
    \ number in a given vector.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3r2zcyfg.jl:39\nin expression starting at\
    \ /tmp/tmp3r2zcyfg.jl:39\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr\n    for\
    \ i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n            maximum\
    \ = maximum[i-1:end]\n        else\n            maximum = maximum[i-1:end]\n \
    \       end\n    end\n    return maximum\nend\nmaximum([-3, -4, 5], 3)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the minimum number in a given\
    \ vector. \nThe function should take in a vector of integers and a positive integer\
    \ k. \nThe function should return a sorted vector of length k with the minimum\
    \ k numbers in arr. \nThe function should return an empty vector if k is greater\
    \ than the length of the vector.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw6yiuwjs.jl:40\nin expression starting at\
    \ /tmp/tmpw6yiuwjs.jl:40\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to the length of arr\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n        end\n    end\n    return maximum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmp1wi2btkc.jl:44\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp1wi2btkc.jl:44 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp1wi2btkc.jl:43\ntest set: Test Failed
    at /tmp/tmp1wi2btkc.jl:45\n  Expression: candidate([4, -4, 4], 2) == [4, 4]\n   Evaluated:
    [-4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp1wi2btkc.jl:45 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp1wi2btkc.jl:43\ntest set: Test Failed
    at /tmp/tmp1wi2btkc.jl:46\n  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1)
    == [2]\n   Evaluated: [-3, 2, 1, 2, -1, -2, 1] == [2]\nStacktrace:\n [1] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp1wi2btkc.jl:46 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp1wi2btkc.jl:43\ntest set: Test Failed
    at /tmp/tmp1wi2btkc.jl:47\n  Expression: candidate([123, -123, 20, 0, 1, 2, -3],
    3) == [2, 20, 123]\n   Evaluated: [123, -123, 20, 0, 1, 2, -3] == [2, 20, 123]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp1wi2btkc.jl:47 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp1wi2btkc.jl:43\n'''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to the length of the vector\"))\n    end\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvz7n66rd.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvz7n66rd.jl:1\n\
    in expression starting at /tmp/tmpvz7n66rd.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n        end\n    end\n    return maximum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmp0yom3fxq.jl:44\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yom3fxq.jl:44 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yom3fxq.jl:43\ntest set: Test Failed
    at /tmp/tmp0yom3fxq.jl:45\n  Expression: candidate([4, -4, 4], 2) == [4, 4]\n   Evaluated:
    [-4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yom3fxq.jl:45 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yom3fxq.jl:43\ntest set: Test Failed
    at /tmp/tmp0yom3fxq.jl:46\n  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1)
    == [2]\n   Evaluated: [-3, 2, 1, 2, -1, -2, 1] == [2]\nStacktrace:\n [1] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yom3fxq.jl:46 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yom3fxq.jl:43\ntest set: Test Failed
    at /tmp/tmp0yom3fxq.jl:47\n  Expression: candidate([123, -123, 20, 0, 1, 2, -3],
    3) == [2, 20, 123]\n   Evaluated: [123, -123, 20, 0, 1, 2, -3] == [2, 20, 123]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yom3fxq.jl:47 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yom3fxq.jl:43\n'''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr) \n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\
    \ \n        maximum = maximum(maximum(maximum, arr[i]), arr[i])\n    end\n   \
    \ return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3,\
    \ -4, 5], 3), 3)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([4, -4,\
    \ 4], 2), 2)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, 2, 1, 2,\
    \ -1, -2, 1], 1), 1)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the minimum number in a given array.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp5u0553u.jl:35\nin expression starting at\
    \ /tmp/tmpp5u0553u.jl:35\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr) \n        throw(ArgumentError(\"k must be less than or\
    \ equal to the length of the array\"))\n    end\n    maximum = arr[k-1]\n    for\
    \ i = k+1:length(arr) \n        if maximum < arr[i] \n            maximum = arr[i]\n\
    \        end\n    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpyx76myvi.jl:42\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    Cannot `convert` an object of type Int64 to an object of type Vector{Int64}\n  Closest
    candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpyx76myvi.jl:35\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpyx76myvi.jl:42 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpyx76myvi.jl:41\n'''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr\n    for\
    \ i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n            maximum\
    \ = maximum[i-1:end]\n        else\n            break\n    end\n    return maximum\n\
    end\nmaximum()\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplvgd77y3.jl:1\nin expression starting at /tmp/tmplvgd77y3.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    end\n    \n    maximum = arr[k-1]\n\
    \    for i in (1:k-1)\n        if maximum < arr[i]\n            maximum = arr[i]\n\
    \        end\n    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp0ardr3oi.jl:43\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    Cannot `convert` an object of type Int64 to an object of type Vector{Int64}\n  Closest
    candidates are:\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)
    where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/LinearAlgebra/src/factorization.jl:58\n    convert(::Type{T},
    !Matched::AbstractArray) where T<:Array at /shared/centos7/julia/1.7.3/share/julia/base/array.jl:554\n    convert(::Type{T},
    !Matched::T) where T<:AbstractArray at /shared/centos7/julia/1.7.3/share/julia/base/abstractarray.jl:16\n    ...\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp0ardr3oi.jl:36\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp0ardr3oi.jl:43 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp0ardr3oi.jl:42\n'''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr\n    for\
    \ i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n            maximum\
    \ = maximum[i-1:end]\n        else\n            break\n    end\n    return maximum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp49nc2ojm.jl:1\nin expression starting at /tmp/tmp49nc2ojm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr\n    for\
    \ i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n            maximum\
    \ = maximum[i-1:end]\n        else\n            break\n    end\n    return maximum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp49nc2ojm.jl:1\nin expression starting at /tmp/tmp49nc2ojm.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to the length of arr\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            push!(maximum, maximum[i])\n        end\n    end\n\
    \    return maximum\nend\nmaximum\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpuj2kf4x2.jl:45\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpuj2kf4x2.jl:45 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpuj2kf4x2.jl:44\ntest set: Test Failed
    at /tmp/tmpuj2kf4x2.jl:46\n  Expression: candidate([4, -4, 4], 2) == [4, 4]\n   Evaluated:
    [-4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpuj2kf4x2.jl:46 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpuj2kf4x2.jl:44\n'''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k should be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum[i] = maximum(maximum, arr[i])\n    end\n    return maximum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmp7jldv675.jl:40\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp7jldv675.jl:40 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp7jldv675.jl:39\n'''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return\
    \ maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmp1c9gl06y.jl:40\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp1c9gl06y.jl:40 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp1c9gl06y.jl:39\n'''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            maximum = maximum[i-1:end]\n        end\n    end\n\
    \    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmp2ihuvmuz.jl:44\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp2ihuvmuz.jl:44 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp2ihuvmuz.jl:43\ntest set: Test Failed
    at /tmp/tmp2ihuvmuz.jl:45\n  Expression: candidate([4, -4, 4], 2) == [4, 4]\n   Evaluated:
    [-4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp2ihuvmuz.jl:45 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp2ihuvmuz.jl:43\n'''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= 0 || k > length(arr)\n        throw(ArgumentError(\"k must be in\
    \ range [0, length(arr)]\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return\
    \ maximum\nend\nmaximum\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmp2n6ycrsa.jl:41\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp2n6ycrsa.jl:41 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp2n6ycrsa.jl:40\n'''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr\n    for\
    \ i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n            maximum\
    \ = maximum[i-1:end]\n        else\n            break\n    end\n    return maximum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp49nc2ojm.jl:1\nin expression starting at /tmp/tmp49nc2ojm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n        end\n    end\n    return maximum\nend\n\
    maximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 1)\nmaximum() = maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 2)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 3)\nmaximum()\
    \ = maximum([-3, 2, 1, 2, -1, -2, 1], 4)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 5)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 6)\nmaximum() = maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 7)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 8)\n\
    maximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 9)\nmaximum() = maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 10)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 11)\nmaximum()\
    \ = maximum([-3, 2, 1, 2, -1, -2, 1], 12)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 13)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 14)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 15)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 16)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 17)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 18)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 19)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 20)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 21)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 22)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 23)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 24)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 25)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 26)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 27)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 28)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 29)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 30)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 31)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 32)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 33)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 34\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg5_ndon2.jl:73\nin expression starting at\
    \ /tmp/tmpg5_ndon2.jl:73\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr[k-1]\n  \
    \  for i = k+1:length(arr)\n        if arr[i] > maximum\n            maximum =\
    \ arr[i]\n        end\n    end\n    return maximum\nend\nmaximum\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1lovzbd8.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp1lovzbd8.jl:1\n\
    in expression starting at /tmp/tmp1lovzbd8.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr[k-1]\n  \
    \  for i in k+1:length(arr)\n        if maximum < arr[i]\n            maximum\
    \ = arr[i]\n        end\n    end\n    return maximum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyb164v_w.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyb164v_w.jl:1\n\
    in expression starting at /tmp/tmpyb164v_w.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return\
    \ maximum\nend\nmaximum\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpk24ec3iu.jl:41\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpk24ec3iu.jl:41 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpk24ec3iu.jl:40\n'''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    elseif k == length(arr)\n   \
    \     return arr\n    else\n        maximum = arr[k-1]\n        for i in (2:k)\n\
    \            if maximum < arr[i]\n                maximum = arr[i]\n         \
    \   end\n        end\n        return maximum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(maximum([-3, -4, 5], 3), 3)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([4,\
    \ -4, 4], 2), 2)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 1), 1)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the minimum number in a given array of integers. \nThe function should\
    \ take one argument, an array of integers, and return one integer.\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpso99y5z6.jl:40\nin expression starting at\
    \ /tmp/tmpso99y5z6.jl:40\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n        maximum[end] = maximum(arr[end], k-1)\n        return maximum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9zw7wx4p.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9zw7wx4p.jl:1\n\
    in expression starting at /tmp/tmp9zw7wx4p.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr\n    for\
    \ i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n            maximum\
    \ = maximum.(-maximum)\n        end\n    end\n    return maximum\nend\nmaximum()\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkyau2x4q.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpkyau2x4q.jl:1\n\
    in expression starting at /tmp/tmpkyau2x4q.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be <= length(arr)\"\
    ))\n    end\n    maximum = arr\n    for i in 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), maximum)\n    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpnpc2i5kw.jl:40\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    objects of type Vector{Int64} are not callable\n  Use square brackets [] for indexing
    an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @
    Main /tmp/tmpnpc2i5kw.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnpc2i5kw.jl:40 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnpc2i5kw.jl:39\ntest set: Error
    During Test at /tmp/tmpnpc2i5kw.jl:41\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64} are not callable\n  Use
    square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmpnpc2i5kw.jl:31\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpnpc2i5kw.jl:41 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpnpc2i5kw.jl:39\ntest set: Error During Test at
    /tmp/tmpnpc2i5kw.jl:42\n  Test threw exception\n  Expression: candidate([-3, 2,
    1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Vector{Int64} are
    not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpnpc2i5kw.jl:31\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpnpc2i5kw.jl:42 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level '
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr) \n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\
    \ \n        maximum[i] = maximum(maximum(maximum, arr[i-k]), arr[i])\n    end\n\
    \    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpd5upkzby.jl:40\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpd5upkzby.jl:40 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpd5upkzby.jl:39\n'''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    maximum = arr\n    for i = k+1:length(arr)\n        maximum[i] = maximum(maximum,\
    \ arr[i])\n    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpmb8xi57t.jl:37\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpmb8xi57t.jl:37 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpmb8xi57t.jl:36\n'''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr) \n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\
    \ \n        if maximum[i] > maximum[i-1] \n            maximum = maximum[i-1:end]\n\
    \        else\n            maximum = maximum[i-1:end]\n        end\n    end\n\
    \    return maximum\nend\nmaximum\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpk4r4s7lk.jl:45\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpk4r4s7lk.jl:45 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpk4r4s7lk.jl:44\ntest set: Test Failed
    at /tmp/tmpk4r4s7lk.jl:46\n  Expression: candidate([4, -4, 4], 2) == [4, 4]\n   Evaluated:
    [-4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpk4r4s7lk.jl:46 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpk4r4s7lk.jl:44\n'''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr[k-1]\n  \
    \  for i in (1:k-1)\n        maximum = max(maximum, arr[i])\n    end\n    return\
    \ maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_7guwpmn.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_7guwpmn.jl:1\n\
    in expression starting at /tmp/tmp_7guwpmn.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= 0 || k > length(arr)\n        throw(ArgumentError(\"k must be in\
    \ range [0, length(arr)]\"))\n    end\n    maximum = arr\n    for i = k - 1 downto\
    \ 1\n        maximum = maximum(maximum(maximum(maximum, arr[i]), arr[i + 1]),\
    \ arr[i + 2])\n    end\n    return maximum\nend\n</cell>\n<text>\nmaximum([-3,\
    \ -4, 5], 3)\n</cell>\n<text>\nmaximum([4, -4, 4], 2)\n</cell>\n<text>\nmaximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 1)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector arr of integers and a positive integer k and returns a sorted\
    \ vector arr of length k with the minimum k numbers in arr.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp2nh3x2dl.jl:30 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2nh3x2dl.jl:30\n\
    in expression starting at /tmp/tmp2nh3x2dl.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr\n    for\
    \ i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n            maximum\
    \ = maximum[i-1:end]\n        else\n            break\n    end\n    return maximum\n\
    end\n</cell>\n<code language=julia-1.5>\nmaximum(arr, 3)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector arr of integers and a positive integer\
    \ k and returns a sorted vector arr2 of length k with the minimum k numbers in\
    \ arr.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq2d6n1p7.jl:38\nin expression starting at\
    \ /tmp/tmpq2d6n1p7.jl:38\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= 0 || length(arr) <= k\n        return arr\n    else\n        maximum\
    \ = arr[k-1]\n        for i in k+1:length(arr)\n            if arr[i] > maximum\n\
    \                maximum = arr[i]\n            end\n        end\n        return\
    \ maximum\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpmj_h5h6p.jl:43\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpmj_h5h6p.jl:43 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpmj_h5h6p.jl:42\n'''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to the length of the vector\"))\n    end\n    maximum = arr\n    for i\
    \ = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n            maximum\
    \ = maximum[i-1:end]\n        else\n            break\n        end\n    end\n\
    \    return maximum\nend\nmaximum\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpr_mlp472.jl:45\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpr_mlp472.jl:45 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_mlp472.jl:44\ntest set: Test Failed
    at /tmp/tmpr_mlp472.jl:46\n  Expression: candidate([4, -4, 4], 2) == [4, 4]\n   Evaluated:
    [-4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpr_mlp472.jl:46 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_mlp472.jl:44\ntest set: Test Failed
    at /tmp/tmpr_mlp472.jl:47\n  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1)
    == [2]\n   Evaluated: [-3, 2, 1, 2, -1, -2, 1] == [2]\nStacktrace:\n [1] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpr_mlp472.jl:47 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_mlp472.jl:44\ntest set: Test Failed
    at /tmp/tmpr_mlp472.jl:48\n  Expression: candidate([123, -123, 20, 0, 1, 2, -3],
    3) == [2, 20, 123]\n   Evaluated: [123, -123, 20, 0, 1, 2, -3] == [2, 20, 123]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpr_mlp472.jl:48 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpr_mlp472.jl:44\n'''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr[k-1]\n  \
    \  for i in k+1:length(arr)\n        if arr[i] > maximum\n            maximum\
    \ = arr[i]\n        end\n    end\n    return maximum\nend\nmaximum()\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplr1a5gbh.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmplr1a5gbh.jl:1\n\
    in expression starting at /tmp/tmplr1a5gbh.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr) \n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\
    \ \n        maximum[i] = maximum(maximum[i], arr[i])\n    end\n    return maximum\n\
    end\nmaximum\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpopq34orl.jl:41\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpopq34orl.jl:41 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpopq34orl.jl:40\n'''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n        end\n    end\n    return maximum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmp0yom3fxq.jl:44\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yom3fxq.jl:44 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yom3fxq.jl:43\ntest set: Test Failed
    at /tmp/tmp0yom3fxq.jl:45\n  Expression: candidate([4, -4, 4], 2) == [4, 4]\n   Evaluated:
    [-4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yom3fxq.jl:45 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yom3fxq.jl:43\ntest set: Test Failed
    at /tmp/tmp0yom3fxq.jl:46\n  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1)
    == [2]\n   Evaluated: [-3, 2, 1, 2, -1, -2, 1] == [2]\nStacktrace:\n [1] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yom3fxq.jl:46 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yom3fxq.jl:43\ntest set: Test Failed
    at /tmp/tmp0yom3fxq.jl:47\n  Expression: candidate([123, -123, 20, 0, 1, 2, -3],
    3) == [2, 20, 123]\n   Evaluated: [123, -123, 20, 0, 1, 2, -3] == [2, 20, 123]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yom3fxq.jl:47 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yom3fxq.jl:43\n'''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr\n    for\
    \ i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n            maximum\
    \ = maximum[i-1:end]\n        else\n            break\n    end\n    return maximum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp49nc2ojm.jl:1\nin expression starting at /tmp/tmp49nc2ojm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr[1]\n    for\
    \ i = 2:k\n        if maximum < arr[i]\n            maximum = arr[i]\n       \
    \ end\n    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum(maximum([-3, -4, 5], 3), 3)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([4,\
    \ -4, 4], 2), 2)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 1), 1)\n</cell>\n<text>\nExercise 2\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0xxuwm1w.jl:37\nin expression starting at\
    \ /tmp/tmp0xxuwm1w.jl:37\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    else\n        maximum = arr[k-1]\n\
    \        for i in k+1:length(arr)\n            if maximum < arr[i]\n         \
    \       maximum = arr[i]\n            end\n        end\n        return maximum\n\
    \    end\nend\nmaximum([-3, -4, 5], 3)\n</cell>\n<text>\nExercise 3: maximum\n\
    Write a function that returns the maximum element of a given vector. \nThe function\
    \ should take in a vector arr of integers and a positive integer k. \nThe function\
    \ should return a sorted vector of length k with the maximum k numbers in arr.\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: None
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= 0 || k > length(arr)\n        throw(ArgumentError(\"k should be in\
    \ range [1, length(arr)]\"))\n    end\n    maximum = arr\n    for i in 1:k\n \
    \       maximum = maximum(maximum(maximum, arr), arr[i])\n    end\n    return\
    \ maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp1pdr6y6u.jl:40\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    objects of type Vector{Int64} are not callable\n  Use square brackets [] for indexing
    an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @
    Main /tmp/tmp1pdr6y6u.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1pdr6y6u.jl:40 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp1pdr6y6u.jl:39\ntest set: Error
    During Test at /tmp/tmp1pdr6y6u.jl:41\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64} are not callable\n  Use
    square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmp1pdr6y6u.jl:31\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp1pdr6y6u.jl:41 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp1pdr6y6u.jl:39\ntest set: Error During Test at
    /tmp/tmp1pdr6y6u.jl:42\n  Test threw exception\n  Expression: candidate([-3, 2,
    1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Vector{Int64} are
    not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp1pdr6y6u.jl:31\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp1pdr6y6u.jl:42 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level '
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n        end\n    end\n    return maximum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmp0yom3fxq.jl:44\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yom3fxq.jl:44 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yom3fxq.jl:43\ntest set: Test Failed
    at /tmp/tmp0yom3fxq.jl:45\n  Expression: candidate([4, -4, 4], 2) == [4, 4]\n   Evaluated:
    [-4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yom3fxq.jl:45 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yom3fxq.jl:43\ntest set: Test Failed
    at /tmp/tmp0yom3fxq.jl:46\n  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1)
    == [2]\n   Evaluated: [-3, 2, 1, 2, -1, -2, 1] == [2]\nStacktrace:\n [1] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yom3fxq.jl:46 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yom3fxq.jl:43\ntest set: Test Failed
    at /tmp/tmp0yom3fxq.jl:47\n  Expression: candidate([123, -123, 20, 0, 1, 2, -3],
    3) == [2, 20, 123]\n   Evaluated: [123, -123, 20, 0, 1, 2, -3] == [2, 20, 123]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yom3fxq.jl:47 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yom3fxq.jl:43\n'''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr[k-1]\n  \
    \  for i in k+1:length(arr)\n        if maximum < arr[i]\n            maximum\
    \ = arr[i]\n        end\n    end\n    return maximum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyb164v_w.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyb164v_w.jl:1\n\
    in expression starting at /tmp/tmpyb164v_w.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr\n    for\
    \ i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n            maximum\
    \ = maximum[i-1:end]\n        else\n            break\n    end\n    return maximum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp49nc2ojm.jl:1\nin expression starting at /tmp/tmp49nc2ojm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr\n    for\
    \ i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n            maximum\
    \ = maximum[i-1:end]\n        else\n            break\n    end\n    return maximum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp49nc2ojm.jl:1\nin expression starting at /tmp/tmp49nc2ojm.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr) \n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = 1:k\n    \
    \    maximum = maximum(maximum(maximum, arr), arr[i])\n    end\n    return maximum\n\
    end\nmaximum\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmplhtx84jb.jl:41\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    objects of type Vector{Int64} are not callable\n  Use square brackets [] for indexing
    an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @
    Main /tmp/tmplhtx84jb.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmplhtx84jb.jl:41 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmplhtx84jb.jl:40\ntest set: Error
    During Test at /tmp/tmplhtx84jb.jl:42\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64} are not callable\n  Use
    square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmplhtx84jb.jl:31\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmplhtx84jb.jl:42 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmplhtx84jb.jl:40\ntest set: Error During Test at
    /tmp/tmplhtx84jb.jl:43\n  Test threw exception\n  Expression: candidate([-3, 2,
    1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Vector{Int64} are
    not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmplhtx84jb.jl:31\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmplhtx84jb.jl:43 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level '
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr\n    for\
    \ i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n            maximum\
    \ = arr\n        else\n            break\n    end\n    return maximum\nend\n</cell>\n\
    <code language=julia-1.5>\nmaximum(maximum([-3, -4, 5], 3), 3)\n</cell>\n<code\
    \ language=julia-1.5>\nmaximum(maximum([4, -4, 4], 2), 2)\n</cell>\n<code language=julia-1.5>\n\
    maximum(maximum([-3, 2, 1, 2, -1, -2, 1], 1), 1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the sum of the elements of an array.\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpro1v9zln.jl:38\nin expression starting at\
    \ /tmp/tmpro1v9zln.jl:38\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            maximum = maximum[i-1:end]\n        end\n    end\n\
    \    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmp2ihuvmuz.jl:44\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp2ihuvmuz.jl:44 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp2ihuvmuz.jl:43\ntest set: Test Failed
    at /tmp/tmp2ihuvmuz.jl:45\n  Expression: candidate([4, -4, 4], 2) == [4, 4]\n   Evaluated:
    [-4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp2ihuvmuz.jl:45 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp2ihuvmuz.jl:43\n'''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr) \n        return arr \n    \n    maximum = arr \n    for\
    \ i = k+1:length(arr) \n        if maximum[i] > maximum[i-1] \n            maximum\
    \ = arr \n            break \n        end \n    end \n    return maximum \nend\
    \ \nmaximum([-3, -4, 5], 3)\n</cell>\n<code language=julia-1.5>\nmaximum([4, -4,\
    \ 4], 2)\n</cell>\n<code language=julia-1.5>\nmaximum([-3, 2, 1, 2, -1, -2, 1],\
    \ 1)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ numbers in a vector.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjz6ei_tw.jl:39\nin expression starting at\
    \ /tmp/tmpjz6ei_tw.jl:39\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= 0 || k > length(arr)\n        throw(ArgumentError(\"k must be in\
    \ range [0, length(arr))\"))\n    end\n    maximum = arr\n    for i = 1:k\n  \
    \      maximum = maximum(maximum(maximum, arr), arr)\n    end\n    return maximum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpm6qz7qh0.jl:40\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    objects of type Vector{Int64} are not callable\n  Use square brackets [] for indexing
    an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @
    Main /tmp/tmpm6qz7qh0.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm6qz7qh0.jl:40 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpm6qz7qh0.jl:39\ntest set: Error
    During Test at /tmp/tmpm6qz7qh0.jl:41\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64} are not callable\n  Use
    square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmpm6qz7qh0.jl:31\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpm6qz7qh0.jl:41 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpm6qz7qh0.jl:39\ntest set: Error During Test at
    /tmp/tmpm6qz7qh0.jl:42\n  Test threw exception\n  Expression: candidate([-3, 2,
    1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Vector{Int64} are
    not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpm6qz7qh0.jl:31\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpm6qz7qh0.jl:42 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level '
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr\n    for\
    \ i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n            maximum\
    \ = maximum[i-1:end]\n        else\n            maximum = maximum[i-1:end]\n \
    \       end\n    end\n    return maximum\nend\nmaximum()\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjhnk6lou.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjhnk6lou.jl:1\n\
    in expression starting at /tmp/tmpjhnk6lou.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n        end\n    end\n    return maximum\nend\n\
    maximum() = maximum([-1000, 1000])\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmp12_z4oxk.jl:45\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp12_z4oxk.jl:45 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp12_z4oxk.jl:44\ntest set: Test Failed
    at /tmp/tmp12_z4oxk.jl:46\n  Expression: candidate([4, -4, 4], 2) == [4, 4]\n   Evaluated:
    [-4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp12_z4oxk.jl:46 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp12_z4oxk.jl:44\ntest set: Test Failed
    at /tmp/tmp12_z4oxk.jl:47\n  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1)
    == [2]\n   Evaluated: [-3, 2, 1, 2, -1, -2, 1] == [2]\nStacktrace:\n [1] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp12_z4oxk.jl:47 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp12_z4oxk.jl:44\ntest set: Test Failed
    at /tmp/tmp12_z4oxk.jl:48\n  Expression: candidate([123, -123, 20, 0, 1, 2, -3],
    3) == [2, 20, 123]\n   Evaluated: [123, -123, 20, 0, 1, 2, -3] == [2, 20, 123]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp12_z4oxk.jl:48 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp12_z4oxk.jl:44\n'''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr\n    for\
    \ i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n            maximum\
    \ = maximum[i-1:end]\n        else\n            maximum = maximum[i-1:end]\n \
    \       end\n    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp70xnsgac.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp70xnsgac.jl:1\n\
    in expression starting at /tmp/tmp70xnsgac.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr) \n        error(\"k should be less than or equal to length(arr)\"\
    ) \n    else \n        maximum_rec(arr, k, 0) \n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpjqnvtf16.jl:37\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  UndefVarError:
    maximum_rec not defined\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @
    Main /tmp/tmpjqnvtf16.jl:29\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjqnvtf16.jl:37 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjqnvtf16.jl:36\ntest set: Error
    During Test at /tmp/tmpjqnvtf16.jl:38\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  UndefVarError: maximum_rec not defined\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpjqnvtf16.jl:29\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjqnvtf16.jl:38 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjqnvtf16.jl:36\ntest set: Error
    During Test at /tmp/tmpjqnvtf16.jl:39\n  Test threw exception\n  Expression: candidate([-3,
    2, 1, 2, -1, -2, 1], 1) == [2]\n  UndefVarError: maximum_rec not defined\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpjqnvtf16.jl:29\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpjqnvtf16.jl:39 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjqnvtf16.jl:36\ntest set: Error
    During Test at /tmp/tmpjqnvtf16.jl:40\n  Test threw exception\n  Expression: candidate([123,
    -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  UndefVarError: ma'
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr\n    for\
    \ i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n            maximum\
    \ = arr\n        else\n            break\n    end\n    return maximum\nend\nmaximum()\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1je3k2xa.jl:1\nin expression starting at /tmp/tmp1je3k2xa.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k should be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return\
    \ maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpm4za0bq2.jl:40\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpm4za0bq2.jl:40 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpm4za0bq2.jl:39\n'''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n        end\n    end\n    return maximum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmp0yom3fxq.jl:44\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yom3fxq.jl:44 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yom3fxq.jl:43\ntest set: Test Failed
    at /tmp/tmp0yom3fxq.jl:45\n  Expression: candidate([4, -4, 4], 2) == [4, 4]\n   Evaluated:
    [-4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yom3fxq.jl:45 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yom3fxq.jl:43\ntest set: Test Failed
    at /tmp/tmp0yom3fxq.jl:46\n  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1)
    == [2]\n   Evaluated: [-3, 2, 1, 2, -1, -2, 1] == [2]\nStacktrace:\n [1] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yom3fxq.jl:46 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yom3fxq.jl:43\ntest set: Test Failed
    at /tmp/tmp0yom3fxq.jl:47\n  Expression: candidate([123, -123, 20, 0, 1, 2, -3],
    3) == [2, 20, 123]\n   Evaluated: [123, -123, 20, 0, 1, 2, -3] == [2, 20, 123]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yom3fxq.jl:47 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yom3fxq.jl:43\n'''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum_idx = k\n    maximum_value\
    \ = arr[k]\n    \n    for i = k+1:length(arr)\n        if arr[i] > maximum_value\n\
    \            maximum_value = arr[i]\n            maximum_idx = i\n        end\n\
    \    end\n    \n    return arr[k+1:maximum_idx]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5rhzbaxq.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5rhzbaxq.jl:1\n\
    in expression starting at /tmp/tmp5rhzbaxq.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i in 1:k\n   \
    \     maximum = maximum(maximum(maximum, arr), maximum)\n    end\n    return maximum\n\
    end\nmaximum\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpw5q316dx.jl:41\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    objects of type Vector{Int64} are not callable\n  Use square brackets [] for indexing
    an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @
    Main /tmp/tmpw5q316dx.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw5q316dx.jl:41 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpw5q316dx.jl:40\ntest set: Error
    During Test at /tmp/tmpw5q316dx.jl:42\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64} are not callable\n  Use
    square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmpw5q316dx.jl:31\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpw5q316dx.jl:42 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpw5q316dx.jl:40\ntest set: Error During Test at
    /tmp/tmpw5q316dx.jl:43\n  Test threw exception\n  Expression: candidate([-3, 2,
    1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Vector{Int64} are
    not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpw5q316dx.jl:31\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpw5q316dx.jl:43 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level '
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i in 1:k\n   \
    \     maximum = maximum(maximum(maximum, arr[i]), arr[i+1])\n    end\n    return\
    \ maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmprm4jiynx.jl:40\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    objects of type Vector{Int64} are not callable\n  Use square brackets [] for indexing
    an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @
    Main /tmp/tmprm4jiynx.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmprm4jiynx.jl:40 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmprm4jiynx.jl:39\ntest set: Error
    During Test at /tmp/tmprm4jiynx.jl:41\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64} are not callable\n  Use
    square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmprm4jiynx.jl:31\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmprm4jiynx.jl:41 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmprm4jiynx.jl:39\ntest set: Error During Test at
    /tmp/tmprm4jiynx.jl:42\n  Test threw exception\n  Expression: candidate([-3, 2,
    1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Vector{Int64} are
    not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmprm4jiynx.jl:31\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmprm4jiynx.jl:42 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level '
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return\
    \ maximum\nend\nmaximum()\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: None
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to the length of arr\"))\n    end\n    maximum = arr\n    for i = 1:k\n\
    \        maximum = maximum(maximum(maximum, arr[i]), arr[i+1])\n    end\n    return\
    \ maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp4ac_4ug2.jl:40\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    objects of type Vector{Int64} are not callable\n  Use square brackets [] for indexing
    an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @
    Main /tmp/tmp4ac_4ug2.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4ac_4ug2.jl:40 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4ac_4ug2.jl:39\ntest set: Error
    During Test at /tmp/tmp4ac_4ug2.jl:41\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64} are not callable\n  Use
    square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmp4ac_4ug2.jl:31\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp4ac_4ug2.jl:41 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp4ac_4ug2.jl:39\ntest set: Error During Test at
    /tmp/tmp4ac_4ug2.jl:42\n  Test threw exception\n  Expression: candidate([-3, 2,
    1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Vector{Int64} are
    not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp4ac_4ug2.jl:31\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp4ac_4ug2.jl:42 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level '
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr[1]\n    for\
    \ i in 2:length(arr)\n        if arr[i] > maximum\n            maximum = arr[i]\n\
    \        end\n    end\n    \n    maximum = maximum + arr[k-1]\n    \n    for i\
    \ in 2:k\n        maximum = maximum + arr[i-1]\n    end\n    \n    return maximum\n\
    end\nmaximum()\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxoe_viqw.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxoe_viqw.jl:1\n\
    in expression starting at /tmp/tmpxoe_viqw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k should be less than or\
    \ equal to the length of arr\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n        end\n    end\n    return maximum\nend\n\
    maximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 1)\nmaximum() = maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 2)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 3)\nmaximum()\
    \ = maximum([-3, 2, 1, 2, -1, -2, 1], 4)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 5)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 6)\nmaximum() = maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 7)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 8)\n\
    maximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 9)\nmaximum() = maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 10)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 11)\nmaximum()\
    \ = maximum([-3, 2, 1, 2, -1, -2, 1], 12)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 13)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 14)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 15)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 16)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 17)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 18)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 19)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 20)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 21)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 22)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 23)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 24)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 25)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 26)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 27)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 28)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 29)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 30)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 31)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 32)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 33)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 34\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc7880ak_.jl:73\nin expression starting at\
    \ /tmp/tmpc7880ak_.jl:73\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    elseif k == length(arr)\n   \
    \     return arr\n    else\n        maximum = arr[k-1]\n        for i = k+1:length(arr)\n\
    \            if arr[i] > maximum\n                maximum = arr[i]\n         \
    \   end\n        end\n        return maximum\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmp1n6sh1pu.jl:45\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp1n6sh1pu.jl:45 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp1n6sh1pu.jl:44\n'''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr\n    for\
    \ i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n            maximum\
    \ = maximum[i-1:end]\n        else\n            maximum = maximum[i-1:k-1]\n \
    \       end\n    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9du6gj4d.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9du6gj4d.jl:1\n\
    in expression starting at /tmp/tmp9du6gj4d.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum_idx = k\n    maximum_value\
    \ = arr[k]\n    \n    for i = k+1:length(arr)\n        if arr[i] > maximum_value\n\
    \            maximum_value = arr[i]\n            maximum_idx = i\n        end\n\
    \    end\n    \n    return arr[maximum_idx:end]\nend\n</cell>\n<code language=julia-1.5>\n\
    maximum([-3, -4, 5], 3)\n</cell>\n<code language=julia-1.5>\nmaximum([4, -4, 4],\
    \ 2)\n</cell>\n<code language=julia-1.5>\nmaximum([-3, 2, 1, 2, -1, -2, 1], 1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the minimum number\
    \ in a given vector. \nThe function should take in a vector of integers and return\
    \ a sorted vector of length 1 with the minimum number in the vector.\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcnzrlexs.jl:41\nin expression starting at\
    \ /tmp/tmpcnzrlexs.jl:41\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= length(arr)\n        return arr\n    else\n        maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n        return maximum\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpqz026abq.jl:35

    '
  stdout: "test set: Test Failed at /tmp/tmpqz026abq.jl:38\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqz026abq.jl:38 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqz026abq.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpqz026abq.jl:39\n  Expression: candidate([4, -4, 4], 2) ==\
    \ [4, 4]\n   Evaluated: [4, -4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqz026abq.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqz026abq.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpqz026abq.jl:40\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3, 2, 1, 2, -1, -2, 1] == [2]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqz026abq.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqz026abq.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpqz026abq.jl:41\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, -123, 20, 0, 1, 2, -3] ==\
    \ [2, 20, 123]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpqz026abq.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpqz026abq.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpqz026abq.jl:42\n  Expression: candidate([-123, 20,"
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 0 \n        return arr\n    \n    maximum = arr[1]\n    for x in\
    \ arr[2:end]\n        if x > maximum\n            maximum = x\n        end\n \
    \   end\n    maximum = maximum + k\n    return maximum + arr[1:end]\nend\n</cell>\n\
    <code language=julia-1.3>\nmaximum(maximum([-3, -4, 5], 3), 3)\n</cell>\n<code\
    \ language=julia-1.3>\nmaximum(maximum([4, -4, 4], 2), 2)\n</cell>\n<code language=julia-1.3>\n\
    maximum(maximum([-3, 2, 1, 2, -1, -2, 1], 1), 1)\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector arr of integers and a positive integer k\
    \ and returns the sum of the first k numbers in arr. \nFor example, if the vector\
    \ arr is [4, -4, 4], and k is 2, the function should return 4.\nusing Test\n\n\
    @testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm1g3xrik.jl:38\nin expression starting at\
    \ /tmp/tmpm1g3xrik.jl:38\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr\n    for\
    \ i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n            maximum\
    \ = maximum[i-1:end]\n        else\n            maximum = maximum[i-1:end]\n \
    \       end\n    end\n    return maximum\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp70xnsgac.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp70xnsgac.jl:1\n\
    in expression starting at /tmp/tmp70xnsgac.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= 0 || k > length(arr)\n        throw(ArgumentError(\"k must be in\
    \ range [0, length(arr))\"))\n    end\n    maximum = arr\n    for i = k - 1 downto\
    \ 1 do\n        maximum = maximum(maximum(maximum, arr[i]), arr[i + 1])\n    end\n\
    \    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpdzher7oc.jl:30 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdzher7oc.jl:30\n\
    in expression starting at /tmp/tmpdzher7oc.jl:30\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            maximum = maximum[i-1:end]\n        end\n    end\n\
    \    return maximum\nend\nmaximum\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpc5bkjmu4.jl:45\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpc5bkjmu4.jl:45 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpc5bkjmu4.jl:44\ntest set: Test Failed
    at /tmp/tmpc5bkjmu4.jl:46\n  Expression: candidate([4, -4, 4], 2) == [4, 4]\n   Evaluated:
    [-4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpc5bkjmu4.jl:46 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpc5bkjmu4.jl:44\n'''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr\n    for\
    \ i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n            maximum\
    \ = maximum[i-1:end]\n        else\n            break\n    end\n    return maximum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp49nc2ojm.jl:1\nin expression starting at /tmp/tmp49nc2ojm.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n        end\n    end\n    return maximum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmp0yom3fxq.jl:44\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yom3fxq.jl:44 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yom3fxq.jl:43\ntest set: Test Failed
    at /tmp/tmp0yom3fxq.jl:45\n  Expression: candidate([4, -4, 4], 2) == [4, 4]\n   Evaluated:
    [-4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yom3fxq.jl:45 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yom3fxq.jl:43\ntest set: Test Failed
    at /tmp/tmp0yom3fxq.jl:46\n  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1)
    == [2]\n   Evaluated: [-3, 2, 1, 2, -1, -2, 1] == [2]\nStacktrace:\n [1] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yom3fxq.jl:46 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yom3fxq.jl:43\ntest set: Test Failed
    at /tmp/tmp0yom3fxq.jl:47\n  Expression: candidate([123, -123, 20, 0, 1, 2, -3],
    3) == [2, 20, 123]\n   Evaluated: [123, -123, 20, 0, 1, 2, -3] == [2, 20, 123]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yom3fxq.jl:47 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yom3fxq.jl:43\n'''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum_idx = 1\n    maximum_value\
    \ = arr[1]\n    \n    for i in 2:length(arr)\n        if arr[i] > maximum_value\n\
    \            maximum_value = arr[i]\n            maximum_idx = i\n        end\n\
    \    end\n    \n    return arr[1:maximum_idx+1]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp16je5een.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp16je5een.jl:1\n\
    in expression starting at /tmp/tmp16je5een.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr) \n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\
    \ \n        maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n  \
    \  return maximum\nend\nmaximum([-3, -4, 5], 3)\n</cell>\n<text>\nExercise 5\n\
    Write a function that takes a vector arr of integers and a positive integer k\
    \ and returns a sorted vector \nof length k with the minimum k numbers in arr.\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpef9tgw8y.jl:36\nin expression starting at\
    \ /tmp/tmpef9tgw8y.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum_idx = 1\n    maximum_value\
    \ = arr[1]\n    for i = 2:length(arr)\n        if arr[i] > maximum_value\n   \
    \         maximum_value = arr[i]\n            maximum_idx = i\n        end\n \
    \   end\n    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx - k\
    \ + 1\n    maximum_idx = maximum_idx - 1\n    maximum_idx = maximum_idx + 1\n\
    \    return maximum_idx\nend\nmaximum()\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy4odk99n.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpy4odk99n.jl:1\n\
    in expression starting at /tmp/tmpy4odk99n.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= 0 || length(arr) <= k\n        return arr\n    \n    maximum_idx\
    \ = k\n    maximum_value = arr[k]\n    \n    for i in k+1:length(arr)\n      \
    \  if arr[i] > maximum_value\n            maximum_value = arr[i]\n           \
    \ maximum_idx = i\n        end\n    end\n    \n    return arr[maximum_idx:end]\n\
    end\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, -4, 5], 3))\n</cell>\n\
    <code language=julia-1.5>\nmaximum(maximum([4, -4, 4], 2))\n</cell>\n<code language=julia-1.5>\n\
    maximum(maximum([-3, 2, 1, 2, -1, -2, 1], 1))\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the minimum number in a given array of integers. \n\
    The function should take in a vector of integers and a positive integer k. \n\
    The function should return a sorted vector of length k with the minimum k numbers\
    \ in arr.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5882n5ig.jl:41\nin expression starting at\
    \ /tmp/tmp5882n5ig.jl:41\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return\
    \ maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmp1c9gl06y.jl:40\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp1c9gl06y.jl:40 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp1c9gl06y.jl:39\n'''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to the length of arr\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n        end\n    end\n    return maximum\nend\n\
    maximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 1)\nmaximum() = maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 2)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 3)\nmaximum()\
    \ = maximum([-3, 2, 1, 2, -1, -2, 1], 4)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 5)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 6)\nmaximum() = maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 7)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 8)\n\
    maximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 9)\nmaximum() = maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 10)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 11)\nmaximum()\
    \ = maximum([-3, 2, 1, 2, -1, -2, 1], 12)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 13)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 14)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 15)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 16)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 17)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 18)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 19)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 20)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 21)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 22)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 23)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 24)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 25)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 26)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 27)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 28)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 29)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 30)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 31)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 32)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 33)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 34\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxsvqmvas.jl:73\nin expression starting at\
    \ /tmp/tmpxsvqmvas.jl:73\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr) \n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\
    \ \n        maximum[i] = maximum(maximum(maximum, arr[i-k]), arr[i])\n    end\n\
    \    return maximum\nend\nmaximum([-3, -4, 5], 3)\n</cell>\n<text>\nExercise 4\n\
    Write a function that returns the sum of the numbers in a vector.\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp77zl6uv4.jl:36\nin expression starting at\
    \ /tmp/tmp77zl6uv4.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 0 \n        return arr\n    \n    maximum_idx = k - 1\n    maximum_value\
    \ = arr[k]\n    \n    for i = k+1:length(arr) \n        if arr[i] > maximum_value\
    \ \n            maximum_value = arr[i]\n            maximum_idx = i\n        end\n\
    \    end\n    \n    maximum_idx = maximum_idx - k + 1\n    maximum_value = arr[maximum_idx]\n\
    \    \n    maximum(maximum(arr, maximum_idx), maximum_idx - 1)\nend\nmaximum([-3,\
    \ -4, 5], 3)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ arr of integers and a positive integer k and returns a sorted vector \nof length\
    \ k with the minimum k numbers in arr.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_q185im1.jl:45\nin expression starting at\
    \ /tmp/tmp_q185im1.jl:45\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr) \n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\
    \ \n        if maximum[i] > maximum[i-1] \n            maximum = maximum[i-1:end]\n\
    \        else\n            maximum = maximum[i-1:end]\n        end\n    end\n\
    \    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpso4vf0bb.jl:44\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpso4vf0bb.jl:44 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpso4vf0bb.jl:43\ntest set: Test Failed
    at /tmp/tmpso4vf0bb.jl:45\n  Expression: candidate([4, -4, 4], 2) == [4, 4]\n   Evaluated:
    [-4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpso4vf0bb.jl:45 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpso4vf0bb.jl:43\n'''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr\n    for\
    \ i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n            maximum\
    \ = maximum[i-1:end]\n        else\n            break\n    end\n    return maximum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp49nc2ojm.jl:1\nin expression starting at /tmp/tmp49nc2ojm.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    else\n        maximum = arr\n\
    \        for i = k+1:length(arr)\n            if maximum(maximum(maximum, arr[i]),\
    \ arr[i]) < maximum(maximum, arr[i])\n                maximum = maximum(maximum,\
    \ arr[i])\n            else\n                maximum = maximum(maximum, arr[i])\n\
    \            end\n        end\n        return maximum\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpeu8bikbg.jl:45\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpeu8bikbg.jl:45 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpeu8bikbg.jl:44\n'''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = 1:k\n    \
    \    maximum = maximum(maximum(maximum, arr[i]), arr[i+1])\n    end\n    return\
    \ maximum\nend\nmaximum() = maximum([], 0)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpqtb53l9b.jl:41\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    objects of type Vector{Int64} are not callable\n  Use square brackets [] for indexing
    an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @
    Main /tmp/tmpqtb53l9b.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqtb53l9b.jl:41 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpqtb53l9b.jl:40\ntest set: Error
    During Test at /tmp/tmpqtb53l9b.jl:42\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64} are not callable\n  Use
    square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmpqtb53l9b.jl:31\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpqtb53l9b.jl:42 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpqtb53l9b.jl:40\ntest set: Error During Test at
    /tmp/tmpqtb53l9b.jl:43\n  Test threw exception\n  Expression: candidate([-3, 2,
    1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Vector{Int64} are
    not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpqtb53l9b.jl:31\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpqtb53l9b.jl:43 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level '
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be <= length(arr)\"\
    ))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n        maximum =\
    \ maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return maximum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpymkms_ql.jl:40\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpymkms_ql.jl:40 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpymkms_ql.jl:39\n'''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i in 1:k\n   \
    \     maximum = maximum(maximum(maximum, arr[i]), arr[i+1])\n    end\n    return\
    \ maximum\nend\nmaximum\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp_u5vnpg7.jl:41\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    objects of type Vector{Int64} are not callable\n  Use square brackets [] for indexing
    an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @
    Main /tmp/tmp_u5vnpg7.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp_u5vnpg7.jl:41 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_u5vnpg7.jl:40\ntest set: Error
    During Test at /tmp/tmp_u5vnpg7.jl:42\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64} are not callable\n  Use
    square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmp_u5vnpg7.jl:31\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp_u5vnpg7.jl:42 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp_u5vnpg7.jl:40\n'''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), arr)\n    end\n    return maximum\nend\nmaximum([-3, -4, 5], 3)\n</cell>\n\
    <code language=julia-1.5>\nmaximum(maximum([4, -4, 4], 2), 2)\n</cell>\n<code\
    \ language=julia-1.5>\nmaximum(maximum([-3, 2, 1, 2, -1, -2, 1], 1), 1)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of all numbers in a\
    \ vector.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: None
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= length(arr)\n        maximum = arr\n    else\n        maximum = arr[k:]\n\
    \    end\n    return maximum\nend\nmaximum() = maximum([-1000, 1000], 1)\nmaximum([-1000,\
    \ 1000], 2)\nmaximum([-1000, 1000], 3)\nmaximum([-1000, 1000], 4)\nmaximum([-1000,\
    \ 1000], 5)\nmaximum([-1000, 1000], 6)\nmaximum([-1000, 1000], 7)\nmaximum([-1000,\
    \ 1000], 8)\nmaximum([-1000, 1000], 9)\nmaximum([-1000, 1000], 10)\nmaximum([-1000,\
    \ 1000], 11)\nmaximum([-1000, 1000], 12)\nmaximum([-1000, 1000], 13)\nmaximum([-1000,\
    \ 1000], 14)\nmaximum([-1000, 1000], 15)\nmaximum([-1000, 1000], 16)\nmaximum([-1000,\
    \ 1000], 17)\nmaximum([-1000, 1000], 18)\nmaximum([-1000, 1000], 19)\nmaximum([-1000,\
    \ 1000], 20)\nmaximum([-1000, 1000], 21)\nmaximum([-1000, 1000], 22)\nmaximum([-1000,\
    \ 1000], 23)\nmaximum([-1000, 1000], 24)\nmaximum([-1000, 1000], 25)\nmaximum([-1000,\
    \ 1000], 26)\nmaximum([-1000, 1000], 27)\nmaximum([-1000, 1000], 28)\nmaximum([-1000,\
    \ 1000], 29)\nmaximum([-1000, 1000], 30)\nmaximum([-1000, 1000], 31)\nmaximum([-1000,\
    \ 1000], 32)\nmaximum([-1000, 1000], 33)\nmaximum([-1000, 1000], 34)\nmaximum([-1000,\
    \ 1000], 35)\nmaximum([-1000, 1000], 36)\nmaximum([-1000, 1000], 37)\nmaximum([-1000,\
    \ 1000], 38)\nmaximum([-1000, 1000], 39)\nmaximum([-1000, 1000], 40)\nmaximum([-1000,\
    \ 1000], 41)\nmaximum([-1000, 1000], 42)\nmaximum([-1000, 1000], 43)\nmaximum([-1000,\
    \ 1000], 44)\nmaximum([-1000, 1000], 45)\nmaximum([-1000, 1000], 46)\nmaximum([-1000,\
    \ 1000], 47)\nmaximum([-1000, 1000], 48)\nmaximum([-1000, 1000], 49)\nmaximum([-1000,\
    \ 1000], 50)\nmaximum([-1000, 1000], 51)\nmaximum([-1000, 1000], 52)\nmaximum([-1000,\
    \ 1000], 53)\nmaximum([-1000, 1000], 54)\nmaximum([-1000, 1000], 55)\nmaximum([-1000,\
    \ 1000], 56)\nmaximum([-1000, 1000], \nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"k:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpksjvg5pe.jl:29\nin expression\
    \ starting at /tmp/tmpksjvg5pe.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n        maximum[end] = maximum(maximum(arr, k-1), k-1)[end]\n  \
    \      return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphb_hljpa.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphb_hljpa.jl:1\n\
    in expression starting at /tmp/tmphb_hljpa.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to the length of arr\"))\n    end\n    maximum = arr\n    for i in 1:k\n\
    \        maximum = maximum(maximum(maximum, arr[i]), arr[i + 1])\n    end\n  \
    \  return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpwz6ospvm.jl:40\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    objects of type Vector{Int64} are not callable\n  Use square brackets [] for indexing
    an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @
    Main /tmp/tmpwz6ospvm.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwz6ospvm.jl:40 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwz6ospvm.jl:39\ntest set: Error
    During Test at /tmp/tmpwz6ospvm.jl:41\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64} are not callable\n  Use
    square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmpwz6ospvm.jl:31\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpwz6ospvm.jl:41 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpwz6ospvm.jl:39\ntest set: Error During Test at
    /tmp/tmpwz6ospvm.jl:42\n  Test threw exception\n  Expression: candidate([-3, 2,
    1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Vector{Int64} are
    not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpwz6ospvm.jl:31\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpwz6ospvm.jl:42 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level '
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr\n    for\
    \ i = 1:k-1\n        maximum = maximum(maximum(maximum, arr[i]), arr[i+1])\n \
    \   end\n    maximum = maximum(maximum(maximum, arr[k]), arr[k+1])\n    return\
    \ maximum\nend\nmaximum()\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps6nhe2ev.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmps6nhe2ev.jl:1\n\
    in expression starting at /tmp/tmps6nhe2ev.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum[i] = maximum(maximum[i], arr[i])\n    end\n    return maximum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmptho2hgxn.jl:40\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmptho2hgxn.jl:40 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmptho2hgxn.jl:39\n'''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 0 \n        return arr\n    else \n        maximum = maximum([maximum,\
    \ arr[k]], k-1)\n        return maximum\nend\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_z6t1zg7.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_z6t1zg7.jl:1\n\
    in expression starting at /tmp/tmp_z6t1zg7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr\n    for\
    \ i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n            maximum\
    \ = maximum[i-1:end]\n        else\n            break\n    end\n    return maximum\n\
    end\nmaximum([-3, -4, 5], 3)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the numbers in a vector.\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp165d6ah5.jl:39\nin expression starting at\
    \ /tmp/tmp165d6ah5.jl:39\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return\
    \ maximum\nend\n</cell>\n<code language=julia-1.3>\nmaximum(maximum([-3, -4, 5],\
    \ 3), 3)\n</cell>\n<code language=julia-1.3>\nmaximum(maximum([4, -4, 4], 2),\
    \ 2)\n</cell>\n<code language=julia-1.3>\nmaximum(maximum([-3, 2, 1, 2, -1, -2,\
    \ 1], 1), 1)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the minimum\
    \ number in a given vector. \nThe function should take in a vector of integers\
    \ and return a single integer.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkoa3pz6x.jl:35\nin expression starting at\
    \ /tmp/tmpkoa3pz6x.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr[1]\n    for\
    \ i in 2:length(arr)\n        if arr[i] > maximum\n            maximum = arr[i]\n\
    \        end\n    end\n    \n    return maximum\nend\nmaximum()\nusing Test\n\n\
    @testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3ks836w5.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3ks836w5.jl:1\n\
    in expression starting at /tmp/tmp3ks836w5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= 0 || k > length(arr)\n        throw(ArgumentError(\"k must be in\
    \ range [0, length(arr)]\"))\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpspmn8wdo.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpspmn8wdo.jl:1\n\
    in expression starting at /tmp/tmpspmn8wdo.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr\n    for\
    \ i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n            maximum\
    \ = maximum[i-1:end]\n        else\n            break\n    end\n    return maximum\n\
    end\nmaximum([-3, -4, 5], 3)\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ takes a vector arr of integers and a positive integer k and \nreturns a sorted\
    \ vector arr of length k with the minimum k numbers in arr.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2o5h3wim.jl:39\nin expression starting at\
    \ /tmp/tmp2o5h3wim.jl:39\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum[i] = maximum(maximum, arr[i])\n    end\n    return maximum\n\
    end\nmaximum()\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: None
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr[k-1]\n  \
    \  for i = k+1:length(arr)\n        if maximum < arr[i]\n            maximum =\
    \ arr[i]\n        end\n    end\n    return maximum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp27lszjl1.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp27lszjl1.jl:1\n\
    in expression starting at /tmp/tmp27lszjl1.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= 0 || k > length(arr)\n        throw(ArgumentError(\"k must be in\
    \ range [1, length(arr)]\"))\n    end\n    maximum = arr\n    for i = k - 1 downto\
    \ 1\n        maximum = maximum(maximum(maximum, arr[i]), arr[i + 1])\n    end\n\
    \    return maximum\nend\nmaximum\nusing Test\n\n@testset begin\n\ncandidate =\
    \ maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp7efcapxa.jl:30 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7efcapxa.jl:30\n\
    in expression starting at /tmp/tmp7efcapxa.jl:30\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return\
    \ maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmp1c9gl06y.jl:40\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp1c9gl06y.jl:40 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp1c9gl06y.jl:39\n'''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    else\n        maximum = arr\n\
    \        for i = k+1:length(arr)\n            if maximum[i] > maximum[i-1]\n \
    \               maximum = maximum[i-1:end]\n            else\n               \
    \ break\n        end\n        return maximum\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0192lx5n.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0192lx5n.jl:1\n\
    in expression starting at /tmp/tmp0192lx5n.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return\
    \ maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmp1c9gl06y.jl:40\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp1c9gl06y.jl:40 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp1c9gl06y.jl:39\n'''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to the length of arr\"))\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf4pzr4q6.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpf4pzr4q6.jl:1\n\
    in expression starting at /tmp/tmpf4pzr4q6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr\n    for\
    \ i in 1:k\n        maximum = maximum(maximum(maximum, arr), i)\n    end\n   \
    \ \n    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpeq05p2e7.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpeq05p2e7.jl:1\n\
    in expression starting at /tmp/tmpeq05p2e7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr[k-1]\n  \
    \  for i = k+1:length(arr)\n        if maximum < arr[i]\n            maximum =\
    \ arr[i]\n        end\n    end\n    return maximum\nend\nmaximum()\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpijiqkm0l.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpijiqkm0l.jl:1\n\
    in expression starting at /tmp/tmpijiqkm0l.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to the length of arr\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            push!(maximum, maximum[i])\n        end\n    end\n\
    \    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmp2v1n0lbx.jl:44\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp2v1n0lbx.jl:44 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp2v1n0lbx.jl:43\ntest set: Test Failed
    at /tmp/tmp2v1n0lbx.jl:45\n  Expression: candidate([4, -4, 4], 2) == [4, 4]\n   Evaluated:
    [-4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp2v1n0lbx.jl:45 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp2v1n0lbx.jl:43\n'''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    else\n        maximum = arr\n\
    \        for i = k+1:length(arr)\n            if maximum[i] > maximum[k] \n  \
    \              maximum = maximum[:i]\n            else\n                break\n\
    \            end\n        end\n        return maximum\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpfkwvdom2.jl:45\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpfkwvdom2.jl:45 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpfkwvdom2.jl:44\n'''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to the length of arr\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            maximum = maximum[i-1:end]\n        end\n    end\n\
    \    return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpyr2y17nx.jl:44\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpyr2y17nx.jl:44 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpyr2y17nx.jl:43\ntest set: Test Failed
    at /tmp/tmpyr2y17nx.jl:45\n  Expression: candidate([4, -4, 4], 2) == [4, 4]\n   Evaluated:
    [-4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpyr2y17nx.jl:45 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpyr2y17nx.jl:43\n'''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum.(maximum.>maximum[i])\n\
    \        else\n            maximum = maximum.(maximum.<=maximum[i])\n        end\n\
    \    end\n    return maximum\nend\nmaximum\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpvrvmv46q.jl:45\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpvrvmv46q.jl:45 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpvrvmv46q.jl:44\n'''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to the length of arr\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return\
    \ maximum\nend\nmaximum()\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: '''
  stdout: None
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    else\n        maximum = arr\n\
    \        for i in 1:k\n            maximum = maximum(maximum(maximum, arr[i]),\
    \ arr[i+1])\n        end\n        return maximum\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmaximum(maximum([-3, -4, 5], 3), 3)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the minimum number in a given array\
    \ of integers.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ft3ssjn.jl:36\nin expression starting at\
    \ /tmp/tmp3ft3ssjn.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= length(arr)\n        maximum = arr[k:]\n        maximum.sort()\n\
    \        return maximum\n    else\n        return arr\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"k:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpb0bw5ew1.jl:27\nin expression\
    \ starting at /tmp/tmpb0bw5ew1.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    end\n    maximum = arr\n    for\
    \ i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n            maximum\
    \ = arr\n            break\n        end\n    end\n    return maximum\nend\nmaximum([-3,\
    \ -4, 5], 3)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([4, -4, 4],\
    \ 2), 1)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 1), 1)\n</cell>\n<text>\nExercise 2\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0ai0kq90.jl:39\nin expression starting at\
    \ /tmp/tmp0ai0kq90.jl:39\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= length(arr)\n        maximum = arr\n    else\n        maximum = arr[k:]\n\
    \    end\n    return maximum\nend\n</cell>\n<text>\nmaximum([-3, -4, 5], 3)\n\
    </cell>\n<text>\nmaximum([4, -4, 4], 2)\n</cell>\n<text>\nmaximum([-3, 2, 1, 2,\
    \ -1, -2, 1], 1)\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ arr and a positive integer k, and returns a sorted vector arr of length k with\
    \ the minimum k numbers in arr.\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"k:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp9peaytg5.jl:29\nin expression\
    \ starting at /tmp/tmp9peaytg5.jl:29\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = 1:k\n    \
    \    maximum = maximum(maximum(maximum, arr), arr[i])\n    end\n    return maximum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp7ourdq6g.jl:40\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    objects of type Vector{Int64} are not callable\n  Use square brackets [] for indexing
    an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @
    Main /tmp/tmp7ourdq6g.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7ourdq6g.jl:40 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7ourdq6g.jl:39\ntest set: Error
    During Test at /tmp/tmp7ourdq6g.jl:41\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64} are not callable\n  Use
    square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmp7ourdq6g.jl:31\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp7ourdq6g.jl:41 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp7ourdq6g.jl:39\ntest set: Error During Test at
    /tmp/tmp7ourdq6g.jl:42\n  Test threw exception\n  Expression: candidate([-3, 2,
    1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Vector{Int64} are
    not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp7ourdq6g.jl:31\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp7ourdq6g.jl:42 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level '
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    maximum = arr\n    for i = 1:k\n        maximum = maximum(maximum(maximum,\
    \ arr), arr)\n    end\n    maximum\nend\n</cell>\n<text>\nmaximum([-3, -4, 5],\
    \ 3)\n</cell>\n<text>\nmaximum([4, -4, 4], 2)\n</cell>\n<text>\nmaximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 1)\n</cell>\n<text>\nExercise 3\nWrite a function that finds\
    \ the minimum number in a given array of integers. \nThe function should take\
    \ one parameter, an array of integers, and return one integer.\nusing Test\n\n\
    @testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpabuo1vpu.jl:32\nin expression starting at\
    \ /tmp/tmpabuo1vpu.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= 0 || k > length(arr)\n        throw(ArgumentError(\"k must be in\
    \ range [1, length(arr)]\"))\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgzrw55gj.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgzrw55gj.jl:1\n\
    in expression starting at /tmp/tmpgzrw55gj.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr) \n        return arr\n    \n    maximum = arr[1]\n   \
    \ for i = 2:length(arr) \n        if arr[i] > maximum \n            maximum =\
    \ arr[i]\n        end\n    end\n    \n    return maximum\nend\nmaximum()\nusing\
    \ Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5],\
    \ 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpw___ln1a.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpw___ln1a.jl:1\n\
    in expression starting at /tmp/tmpw___ln1a.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr\n    for\
    \ i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n            maximum\
    \ = maximum[i-1:end]\n        else\n            break\n    end\n    return maximum\n\
    end\nmaximum([-3, -4, 5], 3)\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the minimum number in a given vector.\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7jxtg3se.jl:39\nin expression starting at\
    \ /tmp/tmp7jxtg3se.jl:39\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr\n    for\
    \ i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n            maximum\
    \ = maximum[i-1:end]\n        else\n            break\n    end\n    return maximum\n\
    end\nmaximum([-3, -4, 5], 3)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([4,\
    \ -4, 4], 2), 2)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 1), 1)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the minimum number in a given array.\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2mgrlxjd.jl:39\nin expression starting at\
    \ /tmp/tmp2mgrlxjd.jl:39\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= 0 || k > length(arr)\n        throw(ArgumentError(\"k should be in\
    \ range [1, length(arr)]\"))\n    end\n    maximum = arr\n    for i = k - 1 downto\
    \ 1\n        maximum = maximum(maximum(maximum, arr[i]), arr[i + 1])\n    end\n\
    \    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3,\
    \ -4, 5], 3), 3)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([4, -4,\
    \ 4], 2), 2)\n</cell>\n<code language=julia-1.5>\nmaximum(maximum([-3, 2, 1, 2,\
    \ -1, -2, 1], 1), 1)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the minimum number in a given array of numbers.\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpqvh4iqzf.jl:30 expected \"\
    end\", got \"1\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqvh4iqzf.jl:30\n\
    in expression starting at /tmp/tmpqvh4iqzf.jl:30\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to the length of arr\"))\n    end\n    maximum = arr\n    for i = 1:k\n\
    \        maximum = maximum(maximum(maximum, arr), maximum)\n    end\n    return\
    \ maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmb82d3m5.jl:40\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    objects of type Vector{Int64} are not callable\n  Use square brackets [] for indexing
    an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @
    Main /tmp/tmpmb82d3m5.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmb82d3m5.jl:40 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpmb82d3m5.jl:39\ntest set: Error
    During Test at /tmp/tmpmb82d3m5.jl:41\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64} are not callable\n  Use
    square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmpmb82d3m5.jl:31\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpmb82d3m5.jl:41 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpmb82d3m5.jl:39\ntest set: Error During Test at
    /tmp/tmpmb82d3m5.jl:42\n  Test threw exception\n  Expression: candidate([-3, 2,
    1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Vector{Int64} are
    not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpmb82d3m5.jl:31\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpmb82d3m5.jl:42 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level '
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr) \n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\
    \ \n        maximum[i] = maximum(maximum, arr[i])\n    end\n    return maximum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmp9v8i7boh.jl:40\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp9v8i7boh.jl:40 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp9v8i7boh.jl:39\ntest set: Error
    During Test at /tmp/tmp9v8i7boh.jl:41\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64} are not callable\n  Use
    square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmp9v8i7boh.jl:31\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp9v8i7boh.jl:41 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp9v8i7boh.jl:39\ntest set: Error During Test at
    /tmp/tmp9v8i7boh.jl:42\n  Test threw exception\n  Expression: candidate([-3, 2,
    1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Vector{Int64} are
    not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp9v8i7boh.jl:31\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9v8i7boh.jl:42 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9v8i7boh.jl:39\ntest set: Error
    During Test at /tmp/tmp9v8i7boh.jl:43\n  Test threw exception\n  Expression: candidate([123,
    -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodE'
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to the length of arr\"))\n    end\n    maximum = arr\n    for i in 1:k\n\
    \        maximum = maximum(maximum(maximum, arr[i]), arr[i+1])\n    end\n    return\
    \ maximum\nend\nmaximum()\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: 'b''ERROR: LoadError: MethodError: no method matching maximum()\nClosest
    candidates are:\n  maximum(!Matched::Vector{Int64}, !Matched::Int64) at /tmp/tmpb1o3abgm.jl:25\nStacktrace:\n
    [1] top-level scope\n   @ /tmp/'''
  stdout: None
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= length(arr)\n        maximum = arr\n    else\n        maximum = maximum.(arr[k+1:end])\n\
    \    end\n    return maximum\nend\n</cell>\n<code language=julia-1.5>\nmaximum(arr,\
    \ 3)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the minimum number\
    \ in a given array of integers. \nThe function should take in a vector of integers\
    \ and return a sorted vector of length \nk with the minimum k numbers in arr.\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcufdjr00.jl:33\nin expression starting at\
    \ /tmp/tmpcufdjr00.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 0 \n        return arr\n    \n    maximum = maximum([maximum(k-1),\
    \ maximum(k-arr[k])], k-1)\n    maximum = maximum([maximum, maximum(k-arr[k])],\
    \ k-1)\n    maximum = maximum([maximum, maximum(k-arr[k])], k-1)\n    maximum\
    \ = maximum([maximum, maximum(k-arr[k])], k-1)\n    maximum = maximum([maximum,\
    \ maximum(k-arr[k])], k-1)\n    maximum = maximum([maximum, maximum(k-arr[k])],\
    \ k-1)\n    maximum = maximum([maximum, maximum(k-arr[k])], k-1)\n    maximum\
    \ = maximum([maximum, maximum(k-arr[k])], k-1)\n    maximum = maximum([maximum,\
    \ maximum(k-arr[k])], k-1)\n    maximum = maximum([maximum, maximum(k-arr[k])],\
    \ k-1)\n    maximum = maximum([maximum, maximum(k-arr[k])], k-1)\n    maximum\
    \ = maximum([maximum, maximum(k-arr[k])], k-1)\n    maximum = maximum([maximum,\
    \ maximum(k-arr[k])], k-1)\n    maximum = maximum([maximum, maximum(k-arr[k])],\
    \ k-1)\n    maximum = maximum([maximum, maximum(k-arr[k])], k-1)\n    maximum\
    \ = maximum([maximum, maximum(k-arr[k])], k-1)\n    maximum = maximum([maximum,\
    \ maximum(k-arr[k])], k-1)\n    maximum = maximum([maximum, maximum(k-arr[k])],\
    \ k-1)\n    maximum = maximum([maximum, maximum(k-arr[k])], k-1)\n    maximum\
    \ = maximum([maximum, maximum(k-arr[k])], k-1)\n    maximum = maximum([maximum,\
    \ maximum(k-arr[k])], k-1)\n    maximum = maximum([maximum, maximum(k-arr[k])],\
    \ k-1)\n    maximum = maximum([maximum, maximum(k-arr[k])], k-1)\n    maximum\
    \ = maximum([maximum, maximum(k-arr[k])], k-1)\n    maximum = maximum([maximum,\
    \ maximum(k-arr[k])], k-1)\n    maximum = maximum([maximum, maximum(k-arr[k])],\
    \ k-1)\n    maximum = maximum([maximum, maximum(k-arr[k])], k-1)\n    maximum\
    \ = maximum([maximum, maximum(k-arr[k])], k-1)\n    maximum = maximum([maximum,\
    \ maximum(k-arr[k])], k-1)\n    maximum = maximum([maximum, maximum\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxjnolkod.jl:59\nin expression starting at\
    \ /tmp/tmpxjnolkod.jl:59\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    else\n        maximum = arr\n\
    \        for i in 1:k\n            maximum = maximum(maximum(maximum, arr[i]),\
    \ arr[i+1])\n        end\n        return maximum\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4,\
    \ -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpu9r3p4rt.jl:41\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    objects of type Vector{Int64} are not callable\n  Use square brackets [] for indexing
    an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @
    Main /tmp/tmpu9r3p4rt.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu9r3p4rt.jl:41 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpu9r3p4rt.jl:40\ntest set: Error
    During Test at /tmp/tmpu9r3p4rt.jl:42\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64} are not callable\n  Use
    square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmpu9r3p4rt.jl:31\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpu9r3p4rt.jl:42 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpu9r3p4rt.jl:40\ntest set: Error During Test at
    /tmp/tmpu9r3p4rt.jl:43\n  Test threw exception\n  Expression: candidate([-3, 2,
    1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Vector{Int64} are
    not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpu9r3p4rt.jl:31\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpu9r3p4rt.jl:43 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level '
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr) \n        throw(ArgumentError(\"k must be less than or\
    \ equal to the length of arr\"))\n    end\n    maximum = arr\n    for i = 1:k\n\
    \        maximum = maximum(maximum(maximum, arr), arr[i])\n    end\n    return\
    \ maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpndp2h6kw.jl:40\n  Test threw
    exception\n  Expression: candidate([-3, -4, 5], 3) == [-4, -3, 5]\n  MethodError:
    objects of type Vector{Int64} are not callable\n  Use square brackets [] for indexing
    an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64}, k::Int64)\n     @
    Main /tmp/tmpndp2h6kw.jl:31\n   [2] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpndp2h6kw.jl:40 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmpndp2h6kw.jl:39\ntest set: Error
    During Test at /tmp/tmpndp2h6kw.jl:41\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64} are not callable\n  Use
    square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmpndp2h6kw.jl:31\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpndp2h6kw.jl:41 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpndp2h6kw.jl:39\ntest set: Error During Test at
    /tmp/tmpndp2h6kw.jl:42\n  Test threw exception\n  Expression: candidate([-3, 2,
    1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Vector{Int64} are
    not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmpndp2h6kw.jl:31\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmpndp2h6kw.jl:42 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level '
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= 0 || k > length(arr)\n        throw(ArgumentError(\"k must be in\
    \ range (0, length(arr))\"))\n    end\n    maximum = arr\n    for i in k+1:length(arr)\n\
    \        maximum[i] = maximum(maximum[i], arr[i])\n    end\n    return maximum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmp84g95wp1.jl:40\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp84g95wp1.jl:40 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp84g95wp1.jl:39\ntest set: Error
    During Test at /tmp/tmp84g95wp1.jl:41\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64} are not callable\n  Use
    square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmp84g95wp1.jl:31\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp84g95wp1.jl:41 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp84g95wp1.jl:39\ntest set: Error During Test at
    /tmp/tmp84g95wp1.jl:42\n  Test threw exception\n  Expression: candidate([-3, 2,
    1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Vector{Int64} are
    not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp84g95wp1.jl:31\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp84g95wp1.jl:42 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp84g95wp1.jl:39\ntest set: Error
    During Test at /tmp/tmp84g95wp1.jl:43\n  Test threw exception\n  Expression: candidate([123,
    -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodE'
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr[k-1]\n  \
    \  for i = k+1:length(arr)\n        if maximum < arr[i]\n            maximum =\
    \ arr[i]\n        end\n    end\n    return maximum\nend\nmaximum()\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpijiqkm0l.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpijiqkm0l.jl:1\n\
    in expression starting at /tmp/tmpijiqkm0l.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to the length of arr\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            maximum = maximum[i-1:end]\n        end\n    end\n\
    \    return maximum\nend\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 1)\nmaximum()\
    \ = maximum([-3, 2, 1, 2, -1, -2, 1], 2)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 3)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 4)\nmaximum() = maximum([-3,\
    \ 2, 1, 2, -1, -2, 1], 5)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 6)\n\
    maximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 7)\nmaximum() = maximum([-3, 2,\
    \ 1, 2, -1, -2, 1], 8)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 9)\nmaximum()\
    \ = maximum([-3, 2, 1, 2, -1, -2, 1], 10)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 11)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 12)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 13)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 14)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 15)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 16)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 17)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 18)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 19)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 20)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 21)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 22)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 23)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 24)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 25)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 26)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 27)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 28)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 29)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 30)\nmaximum() =\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 31)\nmaximum() = maximum([-3, 2, 1, 2, -1,\
    \ -2, 1], 32)\nmaximum() = maximum([-3, 2, 1, 2, -1, -2, 1], 33)\nmaximum() =\
    \ maximum([-\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr56xmpnq.jl:72\nin expression starting at\
    \ /tmp/tmpr56xmpnq.jl:72\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= length(arr)\n        maximum = arr\n    else\n        maximum = maximum.(arr[k+1:end])\n\
    \    end\n    return maximum\nend\nmaximum()\nusing Test\n\n@testset begin\n\n\
    candidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: MethodError: no method matching maximum()\nClosest candidates\
    \ are:\n  maximum(!Matched::Vector{Int64}, !Matched::Int64) at /tmp/tmp5pn0ux3h.jl:25\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp5pn0ux3h.jl:33\nin expression\
    \ starting at /tmp/tmp5pn0ux3h.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 0 \n        return arr\n    else \n        maximum = maximum([maximum(v,k-1)\
    \ for v in arr], k-1)\n        return maximum\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t\
    @test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2,\
    \ 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\
    \t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\
    \t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpuqpgf4cj.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuqpgf4cj.jl:1\n\
    in expression starting at /tmp/tmpuqpgf4cj.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr\n    for\
    \ i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n            maximum\
    \ = maximum[i-1:end]\n        else\n            break\n    end\n    return maximum\n\
    end\nmaximum()\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplvgd77y3.jl:1\nin expression starting at /tmp/tmplvgd77y3.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return\
    \ maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmp1c9gl06y.jl:40\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp1c9gl06y.jl:40 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp1c9gl06y.jl:39\n'''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr) \n        throw(ArgumentError(\"k must be less than or\
    \ equal to the length of arr\"))\n    end\nusing Test\n\n@testset begin\n\ncandidate\
    \ = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4,\
    \ -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\
    \t@test(candidate([123, -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123,\
    \ 20, 0, 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13,\
    \ -8, 0], 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3,\
    \ -10], 2) == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqeffs0xn.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqeffs0xn.jl:1\n\
    in expression starting at /tmp/tmpqeffs0xn.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum = arr\n    for\
    \ i = k+1:length(arr)\n        if maximum[i] > maximum[i-1]\n            maximum\
    \ = maximum[i-1:end]\n        else\n            break\n    end\n    return maximum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp49nc2ojm.jl:1\nin expression starting at /tmp/tmp49nc2ojm.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr) \n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\
    \ \n        maximum[i] = maximum(maximum, arr[i])\n    end\n    return maximum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmp9v8i7boh.jl:40\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp9v8i7boh.jl:40 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp9v8i7boh.jl:39\ntest set: Error
    During Test at /tmp/tmp9v8i7boh.jl:41\n  Test threw exception\n  Expression: candidate([4,
    -4, 4], 2) == [4, 4]\n  MethodError: objects of type Vector{Int64} are not callable\n  Use
    square brackets [] for indexing an Array.\n  Stacktrace:\n   [1] maximum(arr::Vector{Int64},
    k::Int64)\n     @ Main /tmp/tmp9v8i7boh.jl:31\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp9v8i7boh.jl:41 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp9v8i7boh.jl:39\ntest set: Error During Test at
    /tmp/tmp9v8i7boh.jl:42\n  Test threw exception\n  Expression: candidate([-3, 2,
    1, 2, -1, -2, 1], 1) == [2]\n  MethodError: objects of type Vector{Int64} are
    not callable\n  Use square brackets [] for indexing an Array.\n  Stacktrace:\n   [1]
    maximum(arr::Vector{Int64}, k::Int64)\n     @ Main /tmp/tmp9v8i7boh.jl:31\n   [2]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [3] macro expansion\n     @ /tmp/tmp9v8i7boh.jl:42 [inlined]\n   [4]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9v8i7boh.jl:39\ntest set: Error
    During Test at /tmp/tmp9v8i7boh.jl:43\n  Test threw exception\n  Expression: candidate([123,
    -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123]\n  MethodE'
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    else\n        maximum = arr\n\
    \        for i = k+1:length(arr)\n            if maximum[i] > maximum[i-1]\n \
    \               maximum = maximum[i-1:end]\n            else\n               \
    \ break\n        end\n        return maximum\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) == [-4, -3,\
    \ 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3, 2,\
    \ 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2, -3],\
    \ 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0, 1,\
    \ 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0, 0,\
    \ 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0192lx5n.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0192lx5n.jl:1\n\
    in expression starting at /tmp/tmp0192lx5n.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k <= length(arr)\n        maximum = arr\n    else\n        maximum = maximum.(arr[k+1:end])\n\
    \    end\n    return maximum\nend\nmaximum() = maximum([-1000, 1000])\nusing Test\n\
    \n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4, 5], 3) ==\
    \ [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 10 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpos23u1s9.jl:36

    '
  stdout: "test set: Test Failed at /tmp/tmpos23u1s9.jl:39\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpos23u1s9.jl:39 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpos23u1s9.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpos23u1s9.jl:40\n  Expression: candidate([4, -4, 4], 2) ==\
    \ [4, 4]\n   Evaluated: [4, -4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpos23u1s9.jl:40 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpos23u1s9.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpos23u1s9.jl:41\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3, 2, 1, 2, -1, -2, 1] == [2]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpos23u1s9.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpos23u1s9.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpos23u1s9.jl:42\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, -123, 20, 0, 1, 2, -3] ==\
    \ [2, 20, 123]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpos23u1s9.jl:42 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpos23u1s9.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpos23u1s9.jl:43\n  Expression: candidate([-123, 20,"
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        return arr\n    \n    maximum_idx = findmax(arr[k+1:end],\
    \ k)\n    maximum_idx = maximum_idx + k\n    maximum_idx = maximum_idx + 1\n \
    \   maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx\
    \ = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx\
    \ + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n\
    \    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx\
    \ = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx\
    \ + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n\
    \    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx\
    \ = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx\
    \ + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n\
    \    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx\
    \ = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx\
    \ + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n\
    \    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx\
    \ = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx\
    \ + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n\
    \    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx\
    \ = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx\
    \ + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n\
    \    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx\
    \ = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx\
    \ + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n\
    \    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx\
    \ = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx\
    \ + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n\
    \    maximum_idx = maximum_idx + 1\n    maximum_idx = maximum_idx + 1\n    maximum_idx\
    \ = maximum_idx + 1\n\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t\
    @test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl3_02d4e.jl:1\nin expression starting at /tmp/tmpl3_02d4e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k == 0 \n        return arr\n    else \n        maximum = maximum(maximum(arr,\
    \ k-1), k-1)\n        maximum[end] = maximum(maximum[end], maximum(arr, k-1))\n\
    \        return maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\
    \t@test(candidate([-3, -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4],\
    \ 2) == [4, 4])\n\t@test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpni1cvhao.jl:25\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpni1cvhao.jl:1\n\
    in expression starting at /tmp/tmpni1cvhao.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n        end\n    end\n    return maximum\nend\n\
    maximum\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 1 passed, 8 failed, 2 errored,
    0 broken.

    in expression starting at /tmp/tmpcjykl5d6.jl:42

    '
  stdout: "test set: Test Failed at /tmp/tmpcjykl5d6.jl:45\n  Expression: candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcjykl5d6.jl:45 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcjykl5d6.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpcjykl5d6.jl:46\n  Expression: candidate([4, -4, 4], 2) ==\
    \ [4, 4]\n   Evaluated: [-4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcjykl5d6.jl:46 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcjykl5d6.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpcjykl5d6.jl:47\n  Expression: candidate([-3, 2, 1, 2, -1,\
    \ -2, 1], 1) == [2]\n   Evaluated: [-3, 2, 1, 2, -1, -2, 1] == [2]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcjykl5d6.jl:47 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcjykl5d6.jl:44\ntest set: Test\
    \ Failed at /tmp/tmpcjykl5d6.jl:48\n  Expression: candidate([123, -123, 20, 0,\
    \ 1, 2, -3], 3) == [2, 20, 123]\n   Evaluated: [123, -123, 20, 0, 1, 2, -3] ==\
    \ [2, 20, 123]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpcjykl5d6.jl:48 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpcjykl5d6.jl:44\ntest set: Error\
    \ During Test at /tmp/tmpcjykl5d6.jl:49\n  Test threw exception\n  Expres"
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to length(arr)\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        if maximum[i] > maximum[i-1]\n            maximum = maximum[i-1:end]\n\
    \        else\n            break\n        end\n    end\n    return maximum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3, -4,\
    \ 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t@test(candidate([-3,\
    \ 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123, -123, 20, 0, 1, 2,\
    \ -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0, 1, 2, -3], 4) == [0,\
    \ 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0], 7) == [-13, -8, 0,\
    \ 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2) == [3, 5])\n\t@test(candidate([1,\
    \ 0, 5, -7], 1) == [5])\n\t@test(candidate([4, -4], 2) == [-4, 4])\n\t@test(candidate([-10,\
    \ 10], 2) == [-10, 10])\n\t@test(candidate([1, 2, 3, -23, 243, -400, 0], 0) ==\
    \ Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmp0yom3fxq.jl:44\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yom3fxq.jl:44 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yom3fxq.jl:43\ntest set: Test Failed
    at /tmp/tmp0yom3fxq.jl:45\n  Expression: candidate([4, -4, 4], 2) == [4, 4]\n   Evaluated:
    [-4, 4] == [4, 4]\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yom3fxq.jl:45 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yom3fxq.jl:43\ntest set: Test Failed
    at /tmp/tmp0yom3fxq.jl:46\n  Expression: candidate([-3, 2, 1, 2, -1, -2, 1], 1)
    == [2]\n   Evaluated: [-3, 2, 1, 2, -1, -2, 1] == [2]\nStacktrace:\n [1] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yom3fxq.jl:46 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yom3fxq.jl:43\ntest set: Test Failed
    at /tmp/tmp0yom3fxq.jl:47\n  Expression: candidate([123, -123, 20, 0, 1, 2, -3],
    3) == [2, 20, 123]\n   Evaluated: [123, -123, 20, 0, 1, 2, -3] == [2, 20, 123]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmp0yom3fxq.jl:47 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmp0yom3fxq.jl:43\n'''
- exit_code: -1
  program: "\"\"\"\n    Given a vector arr of integers and a positive integer k, return\
    \ a sorted vector \n    of length k with the maximum k numbers in arr.\n\n   \
    \ Example 1:\n\n    >>> maximum([-3, -4, 5], 3)\n    [-4, -3, 5]\n\n    Example\
    \ 2:\n\n    >>> maximum([4, -4, 4], 2)\n    [4, 4]\n\n    Example 3:\n\n    >>>\
    \ maximum([-3, 2, 1, 2, -1, -2, 1], 1)\n    [2]\n\n    Note:\n        1. The length\
    \ of the vector will be in the range of [1, 1000].\n        2. The elements in\
    \ the vector will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n\
    \    \"\"\"\nfunction maximum(arr::Vector{Int64}, k::Int64)::Vector{Int64} \n\
    \    if k > length(arr)\n        throw(ArgumentError(\"k must be less than or\
    \ equal to the length of arr\"))\n    end\n    maximum = arr\n    for i = k+1:length(arr)\n\
    \        maximum = maximum(maximum(maximum, arr[i]), maximum)\n    end\n    return\
    \ maximum\nend\nusing Test\n\n@testset begin\n\ncandidate = maximum;\n\t@test(candidate([-3,\
    \ -4, 5], 3) == [-4, -3, 5])\n\t@test(candidate([4, -4, 4], 2) == [4, 4])\n\t\
    @test(candidate([-3, 2, 1, 2, -1, -2, 1], 1) == [2])\n\t@test(candidate([123,\
    \ -123, 20, 0, 1, 2, -3], 3) == [2, 20, 123])\n\t@test(candidate([-123, 20, 0,\
    \ 1, 2, -3], 4) == [0, 1, 2, 20])\n\t@test(candidate([5, 15, 0, 3, -13, -8, 0],\
    \ 7) == [-13, -8, 0, 0, 3, 5, 15])\n\t@test(candidate([-1, 0, 2, 5, 3, -10], 2)\
    \ == [3, 5])\n\t@test(candidate([1, 0, 5, -7], 1) == [5])\n\t@test(candidate([4,\
    \ -4], 2) == [-4, 4])\n\t@test(candidate([-10, 10], 2) == [-10, 10])\n\t@test(candidate([1,\
    \ 2, 3, -23, 243, -400, 0], 0) == Vector{Int64}([]))\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Test Failed at /tmp/tmpophr729l.jl:40\n  Expression: candidate([-3,
    -4, 5], 3) == [-4, -3, 5]\n   Evaluated: [-3, -4, 5] == [-4, -3, 5]\nStacktrace:\n
    [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n [2] macro expansion\n   @ /tmp/tmpophr729l.jl:40 [inlined]\n [3] macro
    expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n [4] top-level scope\n   @ /tmp/tmpophr729l.jl:39\n'''
