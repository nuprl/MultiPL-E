name: HumanEval_22_filter_integers
language: jl
prompt: "\"\"\" Filter given vector of any jlthon values only for integers\n    >>>\
  \ filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3,\
  \ \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"\nfunction filter_integers(values::Vector{Any})::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = filter_integers;\n\t@test(candidate(Vector{Any}([]))\
  \ == Vector{Int64}([]))\n\t@test(candidate([4, Dict(), [], 23.2, 9, \"adasd\"])\
  \ == [4, 9])\n\t@test(candidate([3, \"c\", 3, 3, \"a\", \"b\"]) == [3, 3, 3])\n\
  end\n"
completions: ["    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.3>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integers",
  "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"", "    filter!(x -> isa(x, Int64), values)\nend\n</cell>\n<text>\n\
    Filter out all strings from given vector of strings\nWe will filter out all strings\
    \ from given vector of strings. We will use filter! function from Julia to filter\
    \ out all strings from given vector of strings. We will use isa function to check\
    \ if given value is string.", "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n\
    <code language=julia-1.4>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter out all strings that are not integers", "    filter!(x -> isa(x, Int64),\
    \ values)\n    return values\nend\n</cell>\n<text>\nFilter a vector of any jlthon\
    \ values only for integers", "    filter!(x -> isa(x, Int64), values)\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| a |>\n<code>\njulia> function filter_integers(x::Vector{Any})\n\
    \           filter!(x -> isa(x, Int64), x)\n       end\nfilter_integers (generic\
    \ function with 1 method)", "    filter!(x -> isa(x, Int64), values)\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=julia,arrays |>\nI believe that your problem is that\
    \ you are trying to use filter! on a vector of Any. filter! works on arrays of\
    \ type AbstractArray{T,1} where T is any type. \nIn your case you have a vector\
    \ of Any. \n<code>\njulia> filter!(x -> isa(x, Int64), [\"a\", 3.14, 5])\n5-element\
    \ Array{Any,1}:\n \"a\"\n 3.14\n 5\n</code>\nYou can convert your vector to an\
    \ array of type AbstractArray{T,1} where T is Int64. \n<code>\njulia> filter!(x\
    \ -> isa(x, Int64), [\"a\", 3.14, 5] .|> Base.convert{Int64})\n5-element Array{Int64,1}:\n\
    \ 3\n 3.14\n 5\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThanks, this works. I guess\
    \ I should read up on `Base.convert` a bit more. I'm still a bit confused about\
    \ how `filter!` works, since it seems to me that `filter!` should work on any\
    \ `AbstractArray{T,1}` where `T` is `Int64`.\n<|/ c |>\n<| c |>\n`filter!` works\
    \ on any `AbstractArray{T,1}` where `T` is `Int64`. But your vector is of type\
    \ `Any`. `filter!` works on arrays of type `AbstractArray{T,1}` where `T` is any\
    \ type. `filter!` works on arrays of type `AbstractArray{T,1}` where `T` is any\
    \ type. `filter!` works on arrays of type `AbstractArray{T,1}` where `T` is any\
    \ type. `filter!` works on arrays of type `AbstractArray{T,1}` where `T` is any\
    \ type.\n<|/ c |>\n<| c |>\nI understand now. Thanks for your help!\n<|/ c |>\n\
    <| a tags=julia,arrays |>\nI believe that your problem is that you are trying\
    \ to use filter! on a vector of Any. filter! works on arrays of type AbstractArray{T,1}\
    \ where T is any type. \nIn your case you have a vector of Any. \n<code>\njulia>\
    \ filter!(x -> isa(x, Int64), [\"a\", 3.14, 5])\n5-element Array{Any,1}:\n \"\
    a\"\n 3.14\n 5\n</code>\nYou can ", "    values = filter(values, x -> isa(x, Int64))\n\
    \    return values\nend", "    filter!(x -> isa(x, Int64), values)\nend\n</cell>\n\
    <text>\nFilter out all non-numeric values\nThe function filter! will remove all\
    \ elements from a vector that do not satisfy a given predicate.", "    filter(values,\
    \ x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter out any jlthon values which are not integers\n\
    Julia has many built in functions for filtering out values from a vector. Here\
    \ are some examples:", "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"\
    a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"", "    if isa(values, Vector{Int64}) == true\n    \
    \    return values\n    else\n        integer = Int64[]\n        for i in values\n\
    \            if isa(i, Int64) == true\n                push!(integer, i)\n   \
    \         else\n                push!(integer, 0)\n            end\n        end\n\
    \        return integer\n    end\nend", "    filter!(x -> isa(x, Int64), values)\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,arrays |>\nThe most efficient\
    \ way is to use isa(x, Int64) instead of typeof(x) == Int64. \n<code>\njulia>\
    \ filter!(x -> isa(x, Int64), rand(1:10, 10))\n10-element Vector{Int64}:\n 3\n\
    \ 3\n 3\n 3\n 3\n 3\n 3\n 3\n 3\n 3\n 3\n 3\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ tags=julia,arrays |>\nI came up with this solution:\n<code>", "    values =\
    \ filter(values, x -> isa(x, Int64))\n    return values\nend", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    return values\nend", "    values = filter(values, x\
    \ -> isa(x, Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integer\
    \ values", "    filter!(x -> isa(x, Int64), values)\n    return values\nend\n\
    </cell>\n<code language=julia-1.4>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFiltering out empty vectors and dictionaries", "    filter!(x -> isa(x,\
    \ Int64), values)\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for me.\
    \ `filter!` doesn't seem to accept `Any` types. I get the following error: `ERROR:\
    \ LoadError: ArgumentError: invalid argument type Any`\n<|/ c |>\n<| c |>\nI tested\
    \ it on Julia 0.6.2 and 0.6.3. Both worked. Maybe you have a different version?\n\
    <|/ c |>\n<| c |>\nI tested it on 0.6.2 and 0.6.3. Both worked. Maybe you have\
    \ a different version?\n<|/ c |>\n<| c |>\nI tested it on 0.6.2 and 0.6.3. Both\
    \ worked. Maybe you have a different version?\n<|/ c |>\n<| c |>\nI tested it\
    \ on 0.6.2 and 0.6.3. Both worked. Maybe you have a different version?\n<|/ c\
    \ |>\n<| a dscore=2 |>\nI believe that Julia 0.7 has added a filter function which\
    \ can do this for you. \n<code>\njulia> filter(x -> isa(x, Int), [1, 2, 3, 4.5,\
    \ 6])\n6-element Array{Int64,1}:\n 1\n 2\n 3\n 4.5\n 6\n</code>\n<|/ a tags=julia,arrays\
    \ |>\n<| a tags=julia,arrays |>\nI came up with this solution:\n<code>", "   \
    \ if length(values) == 0 \n        return Vector{Int64}() \n    else \n      \
    \  integer = Int64() \n        integers = Vector{Int64}() \n        for v in values\
    \ \n            if isa(v,Int64) \n                push!(integers,v) \n       \
    \     else \n                push!(integers,integer) \n                push!(integer,v)\
    \ \n            end \n        end \n        return integers \n    end \nend \n\
    </cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter given vector of any jlthon values only for integers\n    >>> filter_integers([\"\
    a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"", "    values = filter(values, x -> isa(x, Int64))\n\
    \    return values\nend", "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter out all non-integers", "    filter!(x -> isa(x, Int64), values)\n    return\
    \ values\nend\n</code>\n<|/ a |>\n<| c |>\nI like the idea of using filter!, but\
    \ this doesn't seem to work when applied to vectors of strings. I get the following\
    \ error:", "    values = filter(values, x -> isa(x, Int64))\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> x != 0)\n    return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integer values", "    filter!(x\
    \ -> isa(x, Int64), values)\n    return values\nend", "    filter(values, x ->\
    \ isa(x, Int64))\nend\n</cell>\n<text>\nFilter given vector of any jlthon values\
    \ only for floats\n    >>> filter_floats([\"a\", 3.14, 5])\n    [3.14, 5]\n  \
    \  >>> filter_floats([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3, \"abc\"]\n\
    \    \"\"\"", "    \n    values = filter(values, x -> isa(x, Int64))\n    values\
    \ = filter(values, x -> !isa(x, Dict))\n    values = filter(values, x -> !isa(x,\
    \ Array))\n    values = filter(values, x -> !isa(x, Union))\n    values = filter(values,\
    \ x -> !isa(x, Tuple))\n    values = filter(values, x -> !isa(x, String))\n  \
    \  values = filter(values, x -> !isa(x, Symbol))\n    values = filter(values,\
    \ x -> !isa(x, Set))\n    values = filter(values, x -> !isa(x, Dict))\n    values\
    \ = filter(values, x -> !isa(x, Vector))\n    values = filter(values, x -> !isa(x,\
    \ Array))\n    values = filter(values, x -> !isa(x, Union))\n    values = filter(values,\
    \ x -> !isa(x, Tuple))\n    values = filter(values, x -> !isa(x, String))\n  \
    \  values = filter(values, x -> !isa(x, Symbol))\n    values = filter(values,\
    \ x -> !isa(x, Set))\n    values = filter(values, x -> !isa(x, Dict))\n    values\
    \ = filter(values, x -> !isa(x, Vector))\n    values = filter(values, x -> !isa(x,\
    \ Array))\n    values = filter(values, x -> !isa(x, Union))\n    values = filter(values,\
    \ x -> !isa(x, Tuple))\n    values = filter(values, x -> !isa(x, String))\n  \
    \  values = filter(values, x -> !isa(x, Symbol))\n    values = filter(values,\
    \ x -> !isa(x, Set))\n    values = filter(values, x -> !isa(x, Dict))\n    values\
    \ = filter(values, x -> !isa(x, Vector))\n    values = filter(values, x -> !isa(x,\
    \ Array))\n    values = filter(values, x -> !isa(x, Union))\n    values = filter(values,\
    \ x -> !isa(x, Tuple))\n    values = filter(values, x -> !isa(x, String))\n  \
    \  values = filter(values, x -> !isa(x, Symbol))\n    values = filter(values,\
    \ x -> !isa(x, Set))\n    values = filter(values, x -> !isa(x, Dict))\n    values\
    \ = filter(values, x -> !isa(x, Vector))\n    values = filter(values, x -> !isa(x,\
    \ Array))\n    values = filter(values, x -> !isa(x, Union))\n    values = filter(values,\
    \ x -> ", "    filter!(x -> isa(x, Int64), values)\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| a |>\nThe function filter! from Julia is designed for that purpose.\n\
    <code>\njulia> filter!(x->isa(x,Int64),[1,2,\"abc\",Dict(),[]])\n1-element Array{Int64,1}:\n\
    \ 1\n</code>\n<|/ a tags=julia dscore=2 |>\n<| a dscore=1 |>\nI wanted to filter\
    \ out all strings and all numbers from a vector. \n<code>\njulia> filter!(x ->\
    \ isa(x,String) || isa(x,Number),[1,2,\"abc\",Dict(),[]])\n1-element Array{Any,1}:\n\
    \ 1\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nI wanted to filter out\
    \ all strings and all numbers from a vector. \n<code>\njulia> filter!(x -> isa(x,String)\
    \ || isa(x,Number),[1,2,\"abc\",Dict(),[]])\n1-element Array{Any,1}:\n 1\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=julia |>\n<code>\njulia> filter!(x -> isa(x,String)\
    \ || isa(x,Number),[1,2,\"abc\",Dict(),[]])\n1-element Array{Any,1}:\n 1\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\njulia> filter!(x -> isa(x,String)\
    \ || isa(x,Number),[1,2,\"abc\",Dict(),[]])\n1-element Array{Any,1}:\n 1\n</code>\n\
    <|/ a tags=julia |>\n<| a |>\n<code>\njulia> filter!(x -> isa(x,String) || isa(x,Number),[1,2,\"\
    abc\",Dict(),[]])\n1-element Array{Any,1}:\n 1\n</code>\n<|/ a tags=julia dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\njulia> filter!(x -> isa(x,String) || isa(x,Number),[1,2,\"\
    abc\",Dict(),[]])\n1-element Array{Any,1}:\n 1\n</code>\n<|/ a tags=julia |>\n\
    <| a dscore=1 |>\n<code>\njulia> filter!(x -> isa(x,String) || isa(x,Number),[1,2,\"\
    abc\",Dict(),[]])\n1-element Array{Any,1}", "    filter!(x -> isa(x, Int64), values)\n\
    end\n</code>\n<|/ a tags=julia |>\n<| c |>\nI like the `isa` approach, though\
    \ it might be worth pointing out that `isa` also works with `Float64`, `Float32`,\
    \ `Complex{Float32}`, etc.\n<|/ c |>\n<| c |>\nThanks, I didn't know about `isa`,\
    \ but `isa` also works with `Int64`, `Float64`, `Complex{Float32}`, etc.\n<|/\
    \ c |>\n<| a tags=julia |>\n<code>\njulia> function filter_integers(x::Vector{Any})\n\
    \           filter!(x -> isa(x, Int), x)\n       end\nfilter_integers (generic\
    \ function with 1 method)", "    if length(values) == 0 \n        return [] \n\
    \    end\n    \n    values = filter(values, x -> isa(x, Int64))\n    \n    if\
    \ length(values) == 0 \n        return [] \n    end\n    \n    values = filter(values,\
    \ x -> x != 0)\n    \n    if length(values) == 0 \n        return [] \n    end\n\
    \    \n    return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<code language=julia-1.5>\nfilter_integers([1, 2, 3,\
    \ \"abc\", Dict(), []])\n</cell>\n<text>\nFilter out all non-integer values",
  "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters given vector of any jlthon values only for integers\
    \ and returns vector of integers", "    values = filter(values, x -> isa(x, Int64))\n\
    \    return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any jlthon values only\
    \ for floats\n    >>> filter_floats([\"a\", 3.14, 5])\n    [3.14]\n    >>> filter_floats([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1.0, 2.0, 3.0]\n    \"\"\"", "    \n    if\
    \ length(values) == 0 \n        return values\n    \n    values = filter(values,\
    \ x -> isa(x, Int64))\n    \n    if length(values) == 0 \n        return values\n\
    \    \n    values = filter(values, x -> isa(x, Int))\n    \n    if length(values)\
    \ == 0 \n        return values\n    \n    values = filter(values, x -> isa(x,\
    \ Int8))\n    \n    if length(values) == 0 \n        return values\n    \n   \
    \ values = filter(values, x -> isa(x, Int16))\n    \n    if length(values) ==\
    \ 0 \n        return values\n    \n    values = filter(values, x -> isa(x, Int32))\n\
    \    \n    if length(values) == 0 \n        return values\n    \n    values =\
    \ filter(values, x -> isa(x, Int64))\n    \n    if length(values) == 0 \n    \
    \    return values\n    \n    values = filter(values, x -> isa(x, Int))\n    \n\
    \    if length(values) == 0 \n        return values\n    \n    values = filter(values,\
    \ x -> isa(x, Int8))\n    \n    if length(values) == 0 \n        return values\n\
    \    \n    values = filter(values, x -> isa(x, Int16))\n    \n    if length(values)\
    \ == 0 \n        return values\n    \n    values = filter(values, x -> isa(x,\
    \ Int32))\n    \n    if length(values) == 0 \n        return values\n    \n  \
    \  values = filter(values, x -> isa(x, Int64))\n    \n    if length(values) ==\
    \ 0 \n        return values\n    \n    values = filter(values, x -> isa(x, Int))\n\
    \    \n    if length(values) == 0 \n        return values\n    \n    values =\
    \ filter(values, x -> isa(x, Int8))\n    \n    if length(values) == 0 \n     \
    \   return values\n    \n    values = filter(values, x -> isa(x, Int16))\n   \
    \ \n    if length(values) == 0 \n        return values\n    \n    values = filter(values,\
    \ x -> isa(x, Int32))\n    \n    if length(values) == 0 \n        return values\n\
    \    \n    values = filter(values, x -> isa(x, Int64))\n    \n    if length(values)\
    \ == 0 \n        return values\n    \n    values = filter(values, x -> isa(x,\
    \ Int))\n    \n    if length(values) == 0 \n        return values\n    \n    values\
    \ = filter(values, x -> isa(x, Int8))\n    \n    if length(values) == 0 \n   \
    \     return values\n    \n    values = filter(values, x -> isa(x, Int16))\n \
    \   \n    if length(values) == 0 \n        return values\n    \n    ", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    values = filter(values, x -> x !=\
    \ 0)\n    return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integer values", "    filter(values,\
    \ x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any jlthon values only\
    \ for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"", "    filter(values,\
    \ x -> isa(x, Int64))\nend\n</cell>\n<text>\nfilter_integers([\"a\", 3.14, 5])\n\
    # => [5]", "    \n    integers = Set()\n    for value in values\n        if isa(value,Int64)\n\
    \            integers.add(value)\n        end\n    end\n    return integers\n\
    end", "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<text>\nFilter given\
    \ vector of any jlthon values only for integers\n    >>> filter_integers([\"a\"\
    , 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"", "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n\
    <code language=julia-1.3>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"\
    a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"", "    values = filter(values, x -> isa(x, Int64))\n\
    \    return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integers", "    filter(values,\
    \ x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any jlthon values only\
    \ for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"", "    filter(values,\
    \ x -> isa(x, Int64))\nend", "    \n    filter_integers = filter(values, x ->\
    \ isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any jlthon values only\
    \ for floats\n    >>> filter_floats([\"a\", 3.14, 5])\n    [3.14, 5]\n    >>>\
    \ filter_floats([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3, \"abc\", Dict(),\
    \ []]\n    \"\"\"", "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<text>\n\
    Filter out all non-integers\nWe can filter out all non-integers using the filter_integers\
    \ function defined above. Let's see how it works.", "    filter(values, x -> isa(x,\
    \ Int64))\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14,\
    \ 5])\n</cell>\n<text>\nFilter given vector of any jlthon values only for integers\n\
    \    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"", "    filter!(x -> isa(x,\
    \ Int64), values)\n    return values\nend", "    \n    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> !isa(x, Dict))\n    values\
    \ = filter(values, x -> !isa(x, Vector))\n    values = filter(values, x -> !isa(x,\
    \ Tuple))\n    values = filter(values, x -> !isa(x, Union))\n    values = filter(values,\
    \ x -> !isa(x, Bool))\n    values = filter(values, x -> !isa(x, String))\n   \
    \ values = filter(values, x -> !isa(x, Symbol))\n    values = filter(values, x\
    \ -> !isa(x, Array))\n    values = filter(values, x -> !isa(x, Dict))\n    values\
    \ = filter(values, x -> !isa(x, Vector))\n    values = filter(values, x -> !isa(x,\
    \ Tuple))\n    values = filter(values, x -> !isa(x, Union))\n    values = filter(values,\
    \ x -> !isa(x, Bool))\n    values = filter(values, x -> !isa(x, String))\n   \
    \ values = filter(values, x -> !isa(x, Symbol))\n    values = filter(values, x\
    \ -> !isa(x, Array))\n    values = filter(values, x -> !isa(x, Dict))\n    values\
    \ = filter(values, x -> !isa(x, Vector))\n    values = filter(values, x -> !isa(x,\
    \ Tuple))\n    values = filter(values, x -> !isa(x, Union))\n    values = filter(values,\
    \ x -> !isa(x, Bool))\n    values = filter(values, x -> !isa(x, String))\n   \
    \ values = filter(values, x -> !isa(x, Symbol))\n    values = filter(values, x\
    \ -> !isa(x, Array))\n    values = filter(values, x -> !isa(x, Dict))\n    values\
    \ = filter(values, x -> !isa(x, Vector))\n    values = filter(values, x -> !isa(x,\
    \ Tuple))\n    values = filter(values, x -> !isa(x, Union))\n    values = filter(values,\
    \ x -> !isa(x, Bool))\n    values = filter(values, x -> !isa(x, String))\n   \
    \ values = filter(values, x -> !isa(x, Symbol))\n    values = filter(values, x\
    \ -> !isa(x, Array))\n    values = filter(values, x -> !isa(x, Dict))\n    values\
    \ = filter(values, x -> !isa(x, Vector))\n    values = filter(values, x -> !isa(x,\
    \ Tuple))\n    values = filter(values, x -> ", "    filter(values, x -> isa(x,\
    \ Int64))\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14,\
    \ 5])\n</cell>\n<text>\nFilter given vector of any jlthon values only for integers\n\
    \    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"", "    filter!(x -> isa(x,\
    \ Int64), values)\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integer\
    \ values", "    filter!(x -> isa(x, Int64), values)\nend\n</code>\n<|/ a tags=julia,arrays,filter\
    \ |>\n<| a dscore=2 |>\nI like using filter for this. It makes it easy to write\
    \ code that is more readable and maintainable. \n<code>\njulia> using Statistics",
  "    \n    filter_integers = filter(x -> isa(x, Int64), values)\n    \n    return\
    \ filter_integers\nend", "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"\
    a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"", "    filter!(x -> isa(x, Int64), values)\nend\n</code>\n\
    <|/ a tags=julia,julia-jump |>\n<| a tags=julia,julia-jump |>\nThe answer by is\
    \ correct but Julia has built-in functions for this. \n<code>\njulia> filter(x->isa(x,\
    \ Int64), 1:10)\n10-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n\
    \ 9\n10\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\nIn Julia 1.2 you can also\
    \ use isa(x, Int64):\n<code>\njulia> filter(x->isa(x, Int64), 1:10)\n10-element\
    \ Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n</code>\n<|/ a tags=julia,julia-jump\
    \ |>\n<| a dscore=2 |>\nIn Julia 1.2, you can also use isa(x, Int64):\n<code>\n\
    julia> filter(x->isa(x, Int64), 1:10)\n10-element Array{Int64,1}:\n 1\n 2\n 3\n\
    \ 4\n 5\n 6\n 7\n 8\n 9\n10\n</code>\n<|/ a tags=julia,julia-jump |>\n<| a dscore=2\
    \ |>\nIn Julia 1.2 you can also use isa(x, Int64):\n<code>\njulia> filter(x->isa(x,\
    \ Int64), 1:10)\n10-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n\
    \ 9\n10\n</code>\n<|/ a tags=julia,julia-jump |>\n<| a tags=julia,julia-jump |>\n\
    In Julia 1.2 you can also use isa(x, Int64):\n<code>\njulia> filter(x->isa(x,\
    \ Int64), 1:10)\n10-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n\
    \ 9\n10\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nIn Julia 1.2, you can also\
    \ use isa(x, Int64):\n<code>\njulia> filter(x->isa(x, Int64), 1:10)\n", "    \n\
    \    filter_integers = filter(values, x -> isa(x, Int64))\n    \n    return filter_integers\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([1, 2, 3, \"abc\", Dict(), []])\n</cell>\n\
    <text>\nFilter out all non-integers", "    filter(values, x -> isa(x, Int64))\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter given vector of any jlthon values only for integers\n    >>> filter_integers([\"\
    a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"", "    filter!(x -> isa(x, Int64), values)\nend\n</code>\n\
    <|/ a tags=julia,type-conversion,arrays |>\n<| a |>\nI came across this question\
    \ while trying to solve a similar problem. My solution was to convert the array\
    \ to a tuple and then back to an array:\n<code>\njulia> a = [1, 2, 3, 4]\n4-element\
    \ Array{Int64,1}:\n 1\n 2\n 3\n 4", "    filter(values, x -> isa(x, Int64))\n\
    end\n</cell>\n<text>\nFilter out all non-integer values from given vector of any\
    \ jlthon values", "    \n    if length(values) == 0\n        return values\n \
    \   \n    if length(values) == 1\n        return filter_integers(values(1))\n\
    \    \n    if length(values) > 1\n        \n        filtered = filter_integers(values(1))\n\
    \        \n        for v in values(2:end)\n            if isa(v,Int64)\n     \
    \           push!(filtered,v)\n            else\n                push!(filtered,filter_integers(v))\n\
    \            end\n        end\n        \n        return filtered\n    end\n  \
    \  \n    return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n</cell>\n<text>\nFilter given vector of any jlthon\
    \ values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n\
    \    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\
    \"\"", "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<text>\nfilter_integers([\"\
    a\", 3.14, 5])", "    values = filter(values, x -> isa(x, Int64))\n    return\
    \ values\nend", "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.3>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"", "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFiltering\
    \ by type", "    filter!(x -> isa(x, Int64), values)\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a |>\nI wrote a Julia package that does this for you. \n<code>\nusing\
    \ DataFrames", "    filter!(x -> isa(x, Int64), values)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for floats\n    >>> filter_floats([\"a\", 3.14, 5])\n   \
    \ [3.14, 5]\n    >>> filter_floats([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3, \"abc\", Dict(), []]\n    \"\"\"", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    return values\nend", "    filter(values, x -> isa(x, Int64))\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter given vector of any jlthon values only for integers\n    >>> filter_integers([\"\
    a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"", "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"\
    a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"", "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"\
    a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"", "    values = filter(values, x -> isa(x, Int64))\n\
    \    return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any jlthon values only\
    \ for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    return values\nend", "    values = filter(values, x\
    \ -> isa(x, Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>",
  "    filter!(x -> isa(x, Int64), values)\nend\n</code>\n<|/ a tags=julia |>\n<|\
    \ c |>\nThanks for the answer. I am not very familiar with Julia yet, so I might\
    \ have missed something, but I get the following error when I try your code: `ERROR:\
    \ LoadError: MethodError: no method matching filter!(::Type{Int64}, ::Array{Any,1})`\n\
    <|/ c |>\n<| c |>\nI added a version that works with `Any` instead of `Int64`.\n\
    <|/ c |>\n<| c |>\nThanks, that works great! I still have some issues with my\
    \ code though, since I still get an error when I try to run it: `ERROR: LoadError:\
    \ MethodError: no method matching filter!(::Type{Int64}, ::Array{Any,1})`. Any\
    \ ideas on how to fix that?\n<|/ c |>\n<| c |>\nI added a version that works with\
    \ `Any` instead of `Int64`.\n<|/ c |>\n<| c |>\nThanks, that works great! I still\
    \ have some issues with my code though, since I still get an error when I try\
    \ to run it: `ERROR: LoadError: MethodError: no method matching filter!(::Type{Int64},\
    \ ::Array{Any,1})`. Any ideas on how to fix that?\n<|/ c |>\n<| a dscore=1 |>\n\
    The other answers here are great, but I thought I'd add my own answer since I\
    \ ran into this issue myself and thought it might be helpful to others.\nI wanted\
    \ to filter out any non-integer values from a vector of strings. I used the isa\
    \ function to do this, but I ran into issues because isa doesn't work with strings.\
    \ Instead, I used the isa function to check if each element in the vector is a\
    \ string, and then used the isa function to check if each element in the vector\
    \ is an integer.\n<code>", "    filter!(x -> isa(x, Int64), values)\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"\
    a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"", "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter given vector of any jlthon values only for floats\n    >>> filter_floats([\"\
    a\", 3.14, 5])\n    [3.14, 5]\n    >>> filter_floats([1, 2, 3, \"abc\", Dict(),\
    \ []])\n    [1, 2, 3, \"abc\", Dict(), []]\n    \"\"\"", "    filter!(x -> isa(x,\
    \ Int64), values)\n    return values\nend", "    \n    filtered = filter(values,\
    \ x -> isa(x, Int64))\n    \n    if length(filtered) == length(values)\n     \
    \   return values\n    else\n        return filtered\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([1, 2, 3, \"abc\", Dict(), []])\n</cell>\n\
    <text>\nFilter given vector of any jlthon values only for integers\n    >>> filter_integers([\"\
    a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"", "    values = filter(values, x -> isa(x, Int64))\n\
    \    return values\nend", "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n\
    <code language=julia-1.5>", "    values = filter(values, x -> isa(x, Int64))\n\
    \    values = filter(values, x -> !isa(x, Dict))\n    values = filter(values,\
    \ x -> !isa(x, Vector))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integers",
  "    filter(values, x -> isa(x, Int64))\nend", "    filter(values, x -> isa(x, Int64))\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter given vector of any jlthon values only for integers\n    >>> filter_integers([\"\
    a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"", "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n\
    <text>\nFilter given vector of any jlthon values only for integers\n>>> filter_integers([\"\
    a\", 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n[1,\
    \ 2, 3]\n</text>\n<text>\nFilter given vector of any jlthon values only for integers\n\
    >>> filter_integers([\"a\", 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, \"abc\"\
    , Dict(), []])\n[1, 2, 3]\n</text>\n<text>\nFilter given vector of any jlthon\
    \ values only for integers\n>>> filter_integers([\"a\", 3.14, 5])\n[5]\n>>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n[1, 2, 3]\n</text>\n<text>\nFilter given vector\
    \ of any jlthon values only for integers\n>>> filter_integers([\"a\", 3.14, 5])\n\
    [5]\n>>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n[1, 2, 3]\n</text>\n\
    <text>\nFilter given vector of any jlthon values only for integers\n>>> filter_integers([\"\
    a\", 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n[1,\
    \ 2, 3]\n</text>\n<text>\nFilter given vector of any jlthon values only for integers\n\
    >>> filter_integers([\"a\", 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, \"abc\"\
    , Dict(), []])\n[1, 2, 3]\n</text>\n<text>\nFilter given vector of any jlthon\
    \ values only for integers\n>>> filter_integers([\"a\", 3.14, 5])\n[5]\n>>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n[1, 2, 3]\n</text>\n<text>\nFilter given vector\
    \ of any jlthon values only for integers\n>>> filter_integers([\"a\", 3.14, 5])\n\
    [5]\n>>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n[1, 2, 3]\n</text>\n\
    <text>\nFilter given vector of any jlthon values only for integers\n>>> filter_integers([\"\
    a\", 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n[1,\
    \ 2, 3]\n</text>\n<text>\nFilter given vector of any jlthon values only for integers\n\
    >>> filter_integers([\"a\", 3.14, 5])\n[5]\n>>> filter_integers([1, 2, 3, \"abc\"\
    , Dict(), []])\n[1, 2, 3]\n</text>\n<text>\nFilter given vector of any jlthon\
    \ values only for integers\n>>> filter_integers([\"a\", 3.14, 5])\n[5]\n>>> filter_integers([1,\
    \ 2, 3, \"", "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"", "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code\
    \ language=julia-1.3>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter\
    \ given vector of any jlthon values only for integers\n    >>> filter_integers([\"\
    a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"", "    filter!(x -> isa(x, Int64), values)\nend\n</cell>\n\
    <text>\nFiltering out non-numeric values\nFiltering out non-numeric values can\
    \ be done by using the isa function", "    filter(values, x -> isa(x, Int64))\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter given vector of any jlthon values only for integers\n    >>> filter_integers([\"\
    a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"", "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter out all non-integers", "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n\
    <text>\nFiltering by type\nWe can also filter by type. For example, we can filter\
    \ out all strings by checking if their type is an Int64:", "    \n    values =\
    \ filter(values, x -> isa(x, Int64))\n    \n    return values\nend", "    filter(values,\
    \ x -> isa(x, Int64))\nend", "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n\
    <text>\nFilter given vector of any jlthon values only for integers\n    >>> filter_integers([\"\
    a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"", "    if length(values) == 0 \n        return Vector{Int64}()\
    \ \n    else \n        integers = Vector{Int64}() \n        for value in values\
    \ \n            if isa(value,Int64) \n                push!(integers,value) \n\
    \            else \n                push!(integers,0) \n            end \n   \
    \     end \n        return integers \n    end \nend \n</cell>\n<text>\nFilter\
    \ out all non-integer values", "    \n    values = filter(values, x -> isa(x,\
    \ Int64))\n    \n    return values\nend", "    filter(values, x -> isa(x, Int64))\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter given vector of any jlthon values only for integers\n    >>> filter_integers([\"\
    a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"", "    values = filter(values, x -> isa(x, Int64))\n\
    \    return values\nend", "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"\
    a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"", "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filtering out all non-integers\nWe can also filter out all non-integers by using\
    \ filter!", "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values,\
    \ x -> !isa(x, Dict))\n    return values\nend", "    filter(values, x -> isa(x,\
    \ Int64))\nend\n</cell>\n<text>\nFilter given vector of any jlthon values only\
    \ for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"", "    filter(values,\
    \ x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integer values", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    return values\nend", "    \n    filter_integers\
    \ = filter(x -> isa(x, Int64), values)\n    \n    return filter_integers\nend",
  "    \n    if length(values) == 0 \n        return values\n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    ", "    values = filter(values, x -> isa(x, Int64))\n    return values\n\
    end", "    filter!(x -> isa(x, Int64), values)\n    return values\nend\n</code>\n\
    <|/ a |>\n<| a tags=julia,arrays |>\n<code>\njulia> a = [1, 2, 3, Dict(), []]\n\
    4-element Array{Any,1}:\n 1\n 2\n 3\n Dict()\n []", "    filter(values, x -> isa(x,\
    \ Int64))\nend\n</cell>\n<text>\nFilter given vector of any jlthon values only\
    \ for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"", "    filter!(x -> isa(x,\
    \ Int64), values)\nend\n</cell>\n<text>\nFiltering out empty vectors and strings",
  "    filter!(x -> isa(x, Int64), values)\n    return values\nend", "    filter!(x\
    \ -> isa(x, Int64), values)\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"", "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter\
    \ given vector of any jlthon values only for integers\n    >>> filter_integers([\"\
    a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"", "    filter!(x -> isa(x, Int64), values)\nend\n</cell>\n\
    <text>\nFiltering out all non-integers\nWe can also filter out all non-integers\
    \ by applying the filter_integers function to the vector of any jlthon values.",
  "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> x != 0)\n    return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<code language=julia-1.5>\nfilter_integers([1, 2, 3,\
    \ \"abc\", Dict(), []])\n</cell>\n<text>\nFilter out all non-integer values",
  "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<text>\nFilter given vector\
    \ of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14,\
    \ 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1,\
    \ 2, 3]\n    \"\"\"", "    filter!(x -> isa(x, Int64), values)\n    return values\n\
    end", "    values = filter(values, x -> isa(x, Int64))\n    return values\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter given vector of any jlthon values only for integers\n    >>> filter_integers([\"\
    a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"", "    filter!(x -> isa(x, Int64), values)\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter out all non-integers", "    filter!(x -> isa(x, Int64), values)\nend\n\
    </code>\n<|/ a |>\n<| a |>\nI like using filter! for this:\n<code>\njulia> filter!(x->isa(x,Int64),[1,2,\"\
    abc\",Dict(),[]])\n3-element Array{Int64,1}:\n 1\n 2\n 3\n</code>\n<|/ a dscore=2\
    \ tags=julia |>\n<| a tags=julia |>\nI like using filter! for this:\n<code>\n\
    julia> filter!(x->isa(x,Int64),[1,2,\"abc\",Dict(),[]])\n3-element Array{Int64,1}:\n\
    \ 1\n 2\n 3\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia |>\nI like using filter!\
    \ for this:\n<code>\njulia> filter!(x->isa(x,Int64),[1,2,\"abc\",Dict(),[]])\n\
    3-element Array{Int64,1}:\n 1\n 2\n 3\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia\
    \ |>\nI like using filter! for this:\n<code>\njulia> filter!(x->isa(x,Int64),[1,2,\"\
    abc\",Dict(),[]])\n3-element Array{Int64,1}:\n 1\n 2\n 3\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=julia |>\nI like using filter! for this:\n<code>\njulia> filter!(x->isa(x,Int64),[1,2,\"\
    abc\",Dict(),[]])\n3-element Array{Int64,1}:\n 1\n 2\n 3\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=0 |>\nI like using filter! for this:\n<code>\njulia> filter!(x->isa(x,Int64),[1,2,\"\
    abc\",Dict(),[]])\n3-element Array{Int64,1}:\n 1\n 2\n 3\n</code>\n<|/ a tags=julia\
    \ |>\n<| a tags=julia |>\nI like using filter! for this:\n<code>\njulia> filter!(x->isa(x,Int64),[1,2,\"\
    abc\",Dict(),[]])\n3-element Array{Int64,1}:\n 1\n 2\n 3\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\nI like using filter! for this:\n<code>\njuli", "    filter(values,\
    \ x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFiltering out all non-integers\nWe can also filter\
    \ out all non-integers", "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n\
    <text>\nFilter out all non-integer values\nFilter out all non-integer values",
  "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<text>\nFilter given vector\
    \ of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14,\
    \ 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1,\
    \ 2, 3]\n    \"\"\"", "    filter!(x -> isa(x, Int64), values)\n    return values\n\
    end\n</cell>\n<text>\nfilter!\nfilter! is a higher-order function that takes a\
    \ function and applies it to every element of a collection. filter! returns nothing\
    \ and modifies the original collection in place. filter! can take any number of\
    \ functions as arguments. In this case, we are only interested in filtering out\
    \ integers. We can do this by passing filter! a function that checks if an element\
    \ is an integer:", "    filter!(x -> isa(x, Int64), values)\nend\n</code>\n<|/\
    \ a tags=julia |>\n<| c |>\nThanks, this was very helpful. One thing I noticed\
    \ is that `filter!` doesn't seem to work on `Vector{Any}`, so I changed it to\
    \ `filter!(x->isa(x, Int64), values)`\n<|/ c |>\n<| c |>\nYes, I forgot about\
    \ that one. Thanks for pointing that out.\n<|/ c |>\n<| a dscore=1 |>\nI came\
    \ up with a solution using filter! and isa functions. \n<code>", "    filter(values,\
    \ x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter out any jlthon values which are not integers\n\
    The function filter_integers filters out any jlthon values which are not integers",
  "    \n    filter_integers = filter(values, x -> isa(x, Int64))\n    return filter_integers\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter given vector of any jlthon values only for integers\n    >>> filter_integers([\"\
    a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"", "    filter!(x -> isa(x, Int64), values)\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter out all non-integers", "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n\
    <text>\nFiltering by type", "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n\
    <text>\nFilter given vector of any jlthon values only for integers\n    >>> filter_integers([\"\
    a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"", "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n\
    <text>\nFilter given vector of any jlthon values only for integers\n    >>> filter_integers([\"\
    a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"", "    filter(values, x -> isa(x, Int64))\nend", " \
    \   filter(values, x -> isa(x, Int64))\nend\n</cell>\n<text>\nFilter given vector\
    \ of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14,\
    \ 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1,\
    \ 2, 3]\n    \"\"\"", "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"\
    a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"", "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n\
    <text>\nfilter_integers([\"a\", 3.14, 5])", "    values = filter(values, x ->\
    \ isa(x, Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out any jlthon values\
    \ which are not integers\nWe will filter out any jlthon values which are not integers",
  "    filter!(x -> isa(x, Int64), values)\nend\n</cell>\n<text>\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter out all non-integers\nFilter out all non-integers\nFilter out all non-integers\n\
    Filter ", "    filter!(x -> isa(x, Int64), values)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integers",
  "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"", "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFiltering\
    \ out all non-integers", "    filter(values, x -> isa(x, Int64))\nend", "    filter(values,\
    \ x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any jlthon values only\
    \ for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"", "    filter(values,\
    \ x -> isa(x, Int64))\nend\n</cell>\n<text>\nfilter_bigints", "    values = filter(values,\
    \ x -> isa(x, Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<code language=julia-1.5>\nfilter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n</cell>\n<text>\nFilter out all non-integers",
  "    if isa(values, Vector{Int64})\n        return values\n    elseif isa(values,\
    \ Vector{Any})\n        integer = filter_integers(values)\n        return Vector{Int64}[Int64(integer)]\n\
    \    elseif isa(values, Vector{Union{Int64, String}})\n        integer = filter_integers(values)\n\
    \        return Vector{Int64}[Int64(integer)]\n    elseif isa(values, Vector{Union{Int64,\
    \ String}})\n        integer = filter_integers(values)\n        return Vector{Int64}[Int64(integer)]\n\
    \    elseif isa(values, Vector{Union{Int64, String}})\n        integer = filter_integers(values)\n\
    \        return Vector{Int64}[Int64(integer)]\n    elseif isa(values, Vector{Union{Int64,\
    \ String}})\n        integer = filter_integers(values)\n        return Vector{Int64}[Int64(integer)]\n\
    \    elseif isa(values, Vector{Union{Int64, String}})\n        integer = filter_integers(values)\n\
    \        return Vector{Int64}[Int64(integer)]\n    elseif isa(values, Vector{Union{Int64,\
    \ String}})\n        integer = filter_integers(values)\n        return Vector{Int64}[Int64(integer)]\n\
    \    elseif isa(values, Vector{Union{Int64, String}})\n        integer = filter_integers(values)\n\
    \        return Vector{Int64}[Int64(integer)]\n    elseif isa(values, Vector{Union{Int64,\
    \ String}})\n        integer = filter_integers(values)\n        return Vector{Int64}[Int64(integer)]\n\
    \    elseif isa(values, Vector{Union{Int64, String}})\n        integer = filter_integers(values)\n\
    \        return Vector{Int64}[Int64(integer)]\n    elseif isa(values, Vector{Union{Int64,\
    \ String}})\n        integer = filter_integers(values)\n        return Vector{Int64}[Int64(integer)]\n\
    \    elseif isa(values, Vector{Union{Int64, String}})\n        integer = filter_integers(values)\n\
    \        return Vector{Int64}[Int64(integer)]\n    elseif isa(values, Vector{Union{Int64,\
    \ String}})\n        integer = filter_integers(values)\n        return Vector{Int64}[Int64(integer)]\n\
    \    elseif isa(values, Vector{Union{Int64, String}})\n        integer = filter_integers(values)\n\
    \        return Vector{Int64}[Int64(integer", "    filter(values, x -> isa(x,\
    \ Int64))\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14,\
    \ 5])\n</cell>\n<text>\nFilter out all non-integers", "    \n    filtered = filter(values,\
    \ x -> isa(x, Int64))\n    \n    if length(filtered) == length(values)\n     \
    \   return values\n    else\n        return filtered\n    end\nend\n</cell>\n\
    <text>\nFilter given vector of any jlthon values only for integers\nFilter given\
    \ vector of any jlthon values only for integers\nFilter given vector of any jlthon\
    \ values only for integers\nFilter given vector of any jlthon values only for\
    \ integers\nFilter given vector of any jlthon values only for integers\nFilter\
    \ given vector of any jlthon values only for integers\nFilter given vector of\
    \ any jlthon values only for integers\nFilter given vector of any jlthon values\
    \ only for integers\nFilter given vector of any jlthon values only for integers\n\
    Filter given vector of any jlthon values only for integers\nFilter given vector\
    \ of any jlthon values only for integers\nFilter given vector of any jlthon values\
    \ only for integers\nFilter given vector of any jlthon values only for integers\n\
    Filter given vector of any jlthon values only for integers\nFilter given vector\
    \ of any jlthon values only for integers\nFilter given vector of any jlthon values\
    \ only for integers\nFilter given vector of any jlthon values only for integers\n\
    Filter given vector of any jlthon values only for integers\nFilter given vector\
    \ of any jlthon values only for integers\nFilter given vector of any jlthon values\
    \ only for integers\nFilter given vector of any jlthon values only for integers\n\
    Filter given vector of any jlthon values only for integers\nFilter given vector\
    \ of any jlthon values only for integers\nFilter given vector of any jlthon values\
    \ only for integers\nFilter given vector of any jlthon values only for integers\n\
    Filter given vector of any jlthon values only for integers\nFilter given vector\
    \ of any jlthon values only for integers\nFilter given vector of any jlthon values\
    \ only for integers\nFilter given vector of any jlthon values only for integers\n\
    Filter given vector of any jlthon values only for integers\nFilter given vector\
    \ of any jlthon values only for integers\nFilter given vector of any jlthon values\
    \ only for integers\nFilter given vector of any jlthon values only for integers\n\
    Filter given vector of any jlthon values only for integers\nFilter given vector\
    \ of any jlthon values only for integers\nFilter given vector of any jlthon values\
    \ only for integers\nFilter given vector of any jlthon values only for integers\n\
    Filter given vector of any jlthon values only for integers\nFilter given vector\
    \ of any jlthon values only for integers\n", "    filter(values, x -> isa(x, Int64))\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter given vector of any jlthon values only for integers\n    >>> filter_integers([\"\
    a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"", "    if isa(values, Vector{Int64}) == false\n   \
    \     error(\"values must be vector of integers\")\n    end\n    \n    filter!(x\
    \ -> isa(x, Int64), values)\n    return values\nend\n</cell>\n<code language=julia-1.3>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"", "    filter!(x -> isa(x, Int64), values)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter\
    \ out all non-integer values", "    filter(values, x -> isa(x, Int64))\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter given vector of any jlthon values only for integers\n    >>> filter_integers([\"\
    a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"", "    if isa(values, Vector{Int64})\n        return\
    \ values\n    elseif isa(values, Vector{Any})\n        filtered = filter(values,\
    \ x -> isa(x, Int64))\n        return filter_integers(filtered)\n    else\n  \
    \      error(\"filter_integers: expected vector of Int64 or Any\")\n    end\n\
    end\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nI came up with a solution\
    \ that is more generic and does not require any packages. \n<code>", "    values\
    \ = filter(values, x -> isa(x, Int64))\n    return values\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter\
    \ out all strings that are not integers", "    filter(values, x -> isa(x, Int64))\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter given vector of any jlthon values only for integers\n    >>> filter_integers([\"\
    a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"", "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n\
    <code language=julia-1.3>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"\
    a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"", "    filter!(x -> isa(x, Int64), values)\n    return\
    \ values\nend\n</cell>\n<text>\nFilter out all non-numeric values\nThe function\
    \ filter!() removes elements from a vector that do not satisfy a given predicate.",
  "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for floats\n>>> filter_integers([\"a\", 3.14, 5])\n[3.14,\
    \ 5]\n>>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n[1, 2, 3]\n>>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []], Float64)\n[1, 2, 3]\n>>> filter_integers([1, 2,\
    \ 3, \"abc\", Dict(), []], Float32)\n[1, 2, 3]\n>>> filter_integers([1, 2, 3,\
    \ \"abc\", Dict(), []], Int64)\n[1, 2, 3]\n>>> filter_integers([1, 2, 3, \"abc\"\
    , Dict(), []], Int32)\n[1, 2, 3]\n>>> filter_integers([1, 2, 3, \"abc\", Dict(),\
    \ []], Int16)\n[1, 2, 3]\n>>> filter_integers([1, 2, 3, \"abc\", Dict(), []],\
    \ Int8)\n[1, 2, 3]\n>>> filter_integers([1, 2, 3, \"abc\", Dict(), []], Int)\n\
    [1, 2, 3]\n>>> filter_integers([1, 2, 3, \"abc\", Dict(), []], Union{Int64, Int32,\
    \ Int16, Int8, Int, Float64, Float32, Float16})\n[1, 2, 3]\n>>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []], Union{Int64, Int32, Int16, Int8, Int, Float64, Float32,\
    \ Float16}, Float64)\n[1, 2, 3]\n>>> filter_integers([1, 2, 3, \"abc\", Dict(),\
    \ []], Union{Int64, Int32, Int16, Int8, Int, Float64, Float32, Float16}, Float32)\n\
    [1, 2, 3]\n>>> filter_integers([1, 2, 3, \"abc\", Dict(), []], Union{Int64, Int32,\
    \ Int16, Int8, Int, Float64, Float32, Float16}, Int64)\n[1, 2, 3]\n>>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []], Union{Int64, Int32, Int16, Int8, Int, Float64, Float32,\
    \ Float16}, Int32)\n[1, 2, 3]\n>>> filter_integers([1, 2, 3, \"abc\", Dict(),\
    \ []], Union{Int64, Int32, Int16, Int8, Int, Float64, Float32, Float16}, Int16)\n\
    [1, 2, 3]\n>>> filter_integers([1, 2, 3, \"abc\", Dict(), []], Union{Int64, Int32,\
    \ Int16, Int8, Int, Float64, Float32, Float16}, Int8)\n[1, 2, 3]\n>>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []], Union{Int64, Int32, Int16, Int8, Int, Float64, Float32,\
    \ Float", "    values = filter(values, x -> isa(x, Int64))\n    return values\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([1, 2, 3, \"abc\", Dict(), []])\n</cell>\n\
    <text>\nFilter given vector of any jlthon values only for floats\n    >>> filter_floats([\"\
    a\", 3.14, 5])\n    [3.14, 5]\n    >>> filter_floats([1, 2, 3, \"abc\", Dict(),\
    \ []])\n    [1.0, 2.0, 3.0, 3.0, 3.0, 3.0]\n    \"\"\"", "    filter!(x -> isa(x,\
    \ Int64), values)\nend\n</cell>\n<text>\nFilter out all non-integer values from\
    \ given vector of any jlthon values", "    filter(values, x -> isa(x, Int64))\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter given vector of any jlthon values only for floats\n    >>> filter_floats([\"\
    a\", 3.14, 5])\n    [3.14, 5]\n    >>> filter_floats([1, 2, 3, \"abc\", Dict(),\
    \ []])\n    [1, 2, 3, \"abc\", Dict(), []]\n    \"\"\"", "    filter!(x -> isa(x,\
    \ Int64), values)\n    return values\nend", "    filter(values, x -> isa(x, Int64))\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter out all non-integers", "    filter(values, x -> isa(x, Int64))\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter given vector of any jlthon values only for integers\n    >>> filter_integers([\"\
    a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"", "    values = filter(values, x -> isa(x, Int64))\n\
    \    return values\nend\n</cell>\n<text>\nFilter given vector of any jlthon values\
    \ only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>>\
    \ filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"",
  "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<text>\nFilter given vector\
    \ of any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14,\
    \ 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1,\
    \ 2, 3]\n    \"\"\"", "    filter!(x -> isa(x, Int64), values)\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filtering out strings and dictionaries", "    filter(values, x -> isa(x, Int64))\n\
    end\n</cell>\n<text>\nFilter out all non-integer values from given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"", "    \n    filtered = filter(values, x -> isa(x, Int64))\n\
    \    return collect(filtered)\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any jlthon values only\
    \ for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"", "    filter(values,\
    \ x -> isa(x, Int64))\nend", "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n\
    <text>\nFilter given vector of any jlthon values only for integers\n    >>> filter_integers([\"\
    a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"", "    \n    if length(values) == 0 \n        return\
    \ values\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    ", "    values = filter(values, x -> isa(x,\
    \ Int64))\n    return values\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integers", "    if isa(values,\
    \ Vector{Int64}) == true\n        return values\n    else\n        error(\"Expected\
    \ vector of integers\")\n    end\nend\n</cell>\n<text>\nFilter given vector of\
    \ any jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"", "    filter!(x -> isa(x, Int64), values)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter\
    \ out all strings that are not integers\nWe could also filter out all strings\
    \ that are not integers, but this would leave out all strings that are not integers.\
    \ We will leave out all strings that are not integers because we know that all\
    \ strings are integers. We will also leave out all strings that are not integers\
    \ because we know that all strings are integers. We will also leave out all strings\
    \ that are not integers because we know that all strings are integers. We will\
    \ also leave out all strings that are not integers because we know that all strings\
    \ are integers. We will also leave out all strings that are not integers because\
    \ we know that all strings are integers. We will also leave out all strings that\
    \ are not integers because we know that all strings are integers. We will also\
    \ leave out all strings that are not integers because we know that all strings\
    \ are integers. We will also leave out all strings that are not integers because\
    \ we know that all strings are integers. We will also leave out all strings that\
    \ are not integers because we know that all strings are integers. We will also\
    \ leave out all strings that are not integers because we know that all strings\
    \ are integers. We will also leave out all strings that are not integers because\
    \ we know that all strings are integers. We will also leave out all strings that\
    \ are not integers because we know that all strings are integers. We will also\
    \ leave out all strings that are not integers because we know that all strings\
    \ are integers. We will also leave out all strings that are not integers because\
    \ we know that all strings are integers. We will also leave out all strings that\
    \ are not integers because we know that all strings are integers. We will also\
    \ leave out all strings that are not integers because we know that all strings\
    \ are integers. We will also leave out all strings that are not integers because\
    \ we know that all strings are integers. We will also leave out all strings that\
    \ are not integers because we know that all strings are integers. We will also\
    \ leave out all strings that are not integers because we know that all strings\
    \ are integers. We will also leave out all strings that are not integers because\
    \ we know that all strings are integers. We will also leave out all strings that\
    \ are not integers because we know that all strings are integers. We will also\
    \ leave out all strings that are not integers because we know that all strings\
    \ are integers. We will ", "    filter(values, x -> isa(x, Int64))\nend", "  \
    \  filter(values, x -> isa(x, Int64))\nend\n</cell>\n<text>\nFiltering by type",
  "    filter!(x -> isa(x, Int64), values)\n    return values\nend", "    \n    filter_integers\
    \ = filter(x -> isa(x, Int64), values)\n    return filter_integers\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter given vector of any jlthon values only for integers\n    >>> filter_integers([\"\
    a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"", "    \n    integers = Int64[]\n    for value in values\n\
    \        if isa(value,Int64)\n            push!(integers,value)\n        end\n\
    \    end\n    return integers\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ values = filter(values, x -> isa(x, Int64))\n    return values\nend", "    filter!(x\
    \ -> isa(x, Int64), values)\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of any jlthon values and returns a vector of integers \n\
    \    containing only integers\n    >>> filter_integers([\"a\", 3.14, 5])\n   \
    \ [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n\
    \    \"\"\"", "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out any jlthon values\
    \ which are not integers\nWe will filter out any jlthon values which are not integers",
  "    filter!(x -> isa(x, Int64), values)\nend\n</code>\n<|/ a tags=julia,arrays,vector,filter\
    \ |>\n<| a tags=julia,arrays,vector,filter |>\nIn Julia 1.2 you can use filter!:\n\
    <code>\njulia> filter!(x->isa(x,Int64),[1,2,\"a\",3.14,5])\n5-element Array{Int64,1}:\n\
    \ 1\n 2\n a\n 3.14\n 5\n</code>\n<|/ a dscore=4 |>\n<| a tags=julia,arrays,vector,filter\
    \ |>\nIn Julia 1.2 you can use filter!:\n<code>\njulia> filter!(x->isa(x,Int64),[1,2,\"\
    a\",3.14,5])\n5-element Array{Int64,1}:\n 1\n 2\n a\n 3.14\n 5\n</code>\n<|/ a\
    \ dscore=3 |>\n<| a tags=julia,arrays,vector,filter |>\nIn Julia 1.2 you can use\
    \ filter!:\n<code>\njulia> filter!(x->isa(x,Int64),[1,2,\"a\",3.14,5])\n5-element\
    \ Array{Int64,1}:\n 1\n 2\n a\n 3.14\n 5\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3\
    \ |>\nIn Julia 1.2 you can use filter!:\n<code>\njulia> filter!(x->isa(x,Int64),[1,2,\"\
    a\",3.14,5])\n5-element Array{Int64,1}:\n 1\n 2\n a\n 3.14\n 5\n</code>\n<|/ a\
    \ tags=julia,arrays,vector,filter |>\n<| a tags=julia,arrays,vector,filter |>\n\
    In Julia 1.2 you can use filter!:\n<code>\njulia> filter!(x->isa(x,Int64),[1,2,\"\
    a\",3.14,5])\n5-element Array{Int64,1}:\n 1\n 2\n a\n 3.14\n 5\n</code>\n<|/ a\
    \ dscore=3 |>\n<| a dscore=3 |>\nIn Julia 1.2 you can use filter!:\n<code>\njulia>\
    \ filter!(x->isa(x,Int64),[1,2,\"a\",3.14,5])\n5-element Array{Int64,1}:\n 1\n\
    \ 2\n a\n 3.14\n 5\n</code>\n<|/ a tags=julia,arrays,vector,filter |>\n<| a tags=julia,arrays,",
  "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"", "    filter(values, x -> isa(x, Int64))\nend", "    filter(values,\
    \ x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any jlthon values only\
    \ for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1,\
    \ 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"", "    filter(values,\
    \ x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\nfilter_integers([\"\
    a\", 3.14, 5])\n</cell>\n<text>\nFiltering by type", "    filter(values, x ->\
    \ isa(x, Int64))\nend\n</cell>\n<text>\nFilter given vector of any jlthon values\
    \ only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n    [5]\n    >>>\
    \ filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2, 3]\n    \"\"\"",
  "    values = filter(values, x -> isa(x, Int64))\n    values = filter(values, x\
    \ -> isa(x, Int))\n    return values\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter out all non-integers",
  "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"", "    values = filter(values, x -> isa(x, Int64))\n    values\
    \ = filter(values, x -> !isa(x, Int64))\n    return values\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<code language=julia-1.5>\n\
    filter_integers([1, 2, 3, \"abc\", Dict(), []])\n</cell>\n<text>\nFilter out all\
    \ non-numeric values", "    \n    values = filter(values, x -> isa(x, Int64))\n\
    \    \n    return values\nend", "    values = filter(values, x -> isa(x, Int64))\n\
    \    values = filter(values, x -> x != 0)\n    return values\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter\
    \ given vector of any jlthon values only for integers\n    >>> filter_integers([\"\
    a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"", "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\n\
    Filter out all non-integers", "    filter!(x -> isa(x, Int64), values)\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n\
    <text>\nFilter out all non-integer values", "    values = filter(values, x ->\
    \ isa(x, Int64))\n    return values\nend", "    \n    if length(values) == 0 \n\
    \        return values\n    \n    values = filter(values, x -> isa(x, Int64))\n\
    \    \n    if length(values) == 0 \n        return values\n    \n    values =\
    \ filter(values, x -> !isa(x, Int64))\n    \n    if length(values) == 0 \n   \
    \     return values\n    \n    values = filter(values, x -> isa(x, Int))\n   \
    \ \n    if length(values) == 0 \n        return values\n    \n    values = filter(values,\
    \ x -> !isa(x, Int))\n    \n    if length(values) == 0 \n        return values\n\
    \    \n    values = filter(values, x -> isa(x, Float64))\n    \n    if length(values)\
    \ == 0 \n        return values\n    \n    values = filter(values, x -> !isa(x,\
    \ Float64))\n    \n    if length(values) == 0 \n        return values\n    \n\
    \    values = filter(values, x -> isa(x, Float))\n    \n    if length(values)\
    \ == 0 \n        return values\n    \n    values = filter(values, x -> !isa(x,\
    \ Float))\n    \n    if length(values) == 0 \n        return values\n    \n  \
    \  values = filter(values, x -> isa(x, String))\n    \n    if length(values) ==\
    \ 0 \n        return values\n    \n    values = filter(values, x -> !isa(x, String))\n\
    \    \n    if length(values) == 0 \n        return values\n    \n    values =\
    \ filter(values, x -> isa(x, Array{Any}))\n    \n    if length(values) == 0 \n\
    \        return values\n    \n    values = filter(values, x -> !isa(x, Array{Any}))\n\
    \    \n    if length(values) == 0 \n        return values\n    \n    values =\
    \ filter(values, x -> isa(x, Dict))\n    \n    if length(values) == 0 \n     \
    \   return values\n    \n    values = filter(values, x -> !isa(x, Dict))\n   \
    \ \n    if length(values) == 0 \n        return values\n    \n    values = filter(values,\
    \ x -> isa(x, Union{Nothing, Any}))\n    \n    if length(values) == 0 \n     \
    \   return values\n    \n    values = filter(values, x -> !isa(x, Union{Nothing,\
    \ Any}))\n    \n    if length(values) == 0 \n        return values\n    \n   \
    \ values = filter(values, x -> isa(x, Union{Nothing, AnyRef}))\n    \n    if length(values)\
    \ == 0 \n        return values\n    \n    values = filter(values, x -> !isa(x,\
    \ Union{Nothing, AnyRef}))\n    \n    if length(values) == 0 \n        return\
    \ values\n    \n", "    filter!(x -> isa(x, Int64), values)\nend\n</code>\n<|/\
    \ a dscore=3 |>\n<| c |>\nI like this solution, but I wonder if there is a way\
    \ to avoid the allocation of a new vector and still use filter!\n<|/ c |>\n<|\
    \ c |>\nI guess you could do something like `filter!(x -> isa(x, Int64), values)`\
    \ but then you'd have to do `Int64[]` instead of `Int64`\n<|/ c |>\n<| c |>\n\
    Yeah, I thought about that too, but then you'd have to do `Int64[]` instead of\
    \ `Int64`\n<|/ c |>\n<| c |>\nI guess you could do something like `filter!(x ->\
    \ isa(x, Int64), values)` but then you'd have to do `Int64[]` instead of `Int64`\n\
    <|/ c |>\n<| c |>\nYeah, I guess you could do something like `filter!(x -> isa(x,\
    \ Int64), values)` but then you'd have to do `Int64[]` instead of `Int64`\n<|/\
    \ c |>\n<| a tags=julia,arrays |>\nI came up with this solution:\n<code>", " \
    \   if length(values) == 0 \n        return Vector{Int64}() \n    else \n    \
    \    integer = Int64() \n        for value in values \n            if typeof(value)\
    \ == Int \n                integer += value \n            end \n        end \n\
    \        return Vector{Int64}(integer) \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    filter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter given vector of any\
    \ jlthon values only for integers\n    >>> filter_integers([\"a\", 3.14, 5])\n\
    \    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n    [1, 2,\
    \ 3]\n    \"\"\"", "    filter(values, x -> isa(x, Int64))\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_integers([\"a\", 3.14, 5])\n</cell>\n<text>\nFilter\
    \ given vector of any jlthon values only for integers\n    >>> filter_integers([\"\
    a\", 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, \"abc\", Dict(), []])\n\
    \    [1, 2, 3]\n    \"\"\"", "    filter!(x -> isa(x, Int64), values)\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| c |>\nI like this solution, although it does require\
    \ you to write `filter_integers` twice. One could also define `filter_integers`\
    \ as a macro.\n<|/ c |>\n<| a |>\nI like using filter! here because it's more\
    \ general:\n<code>\njulia> filter!(x -> isa(x, Int), 1:10)\n1-element Array{Int64,1}:\n\
    \ 1\n</code>\n<|/ a dscore=4 tags=julia,arrays |>\n<| c |>\nI like this solution,\
    \ although it does require you to write `filter_integers` twice. One could also\
    \ define `filter_integers` as a macro.\n<|/ c |>\n<| a dscore=4 |>\nI like using\
    \ filter! here because it's more general:\n<code>\njulia> filter!(x -> isa(x,\
    \ Int), 1:10)\n1-element Array{Int64,1}:\n 1\n</code>\n<|/ a tags=julia,arrays\
    \ |>\n<| a tags=julia,arrays |>\nI like using filter! here because it's more general:\n\
    <code>\njulia> filter!(x -> isa(x, Int), 1:10)\n1-element Array{Int64,1}:\n 1\n\
    </code>\n<|/ a dscore=3 |>\n<| a tags=julia,arrays |>\nI like using filter! here\
    \ because it's more general:\n<code>\njulia> filter!(x -> isa(x, Int), 1:10)\n\
    1-element Array{Int64,1}:\n 1\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n\
    I like using filter! here because it's more general:\n<code>\njulia> filter!(x\
    \ -> isa(x, Int), 1:10)\n1-element Array{Int64,1}:\n 1\n</code>\n<|/ a tags=julia,arrays\
    \ |>\n<| a dscore=3 |>\nI like using filter! here because it's more general:\n\
    <code>\njulia> filter!(x -> isa(x, Int), 1:10)\n1-element Array{Int64,1}:\n 1\n\
    </code>\n<|/ a tags=julia,arrays |>\n<| a tags=julia,arrays |>\nI like using filter!\
    \ here because it's more general:\n<code>\njulia> filter!(x -> isa(x, Int), 1:10)\n\
    1-element Array{Int64,1}:\n 1\n</code>\n<|/", "    \n    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    values\
    \ = filter(values, x -> isa(x, Int8))\n    values = filter(values, x -> isa(x,\
    \ Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    values\
    \ = filter(values, x -> isa(x, Int8))\n    values = filter(values, x -> isa(x,\
    \ Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    values\
    \ = filter(values, x -> isa(x, Int8))\n    values = filter(values, x -> isa(x,\
    \ Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    values\
    \ = filter(values, x -> isa(x, Int8))\n    values = filter(values, x -> isa(x,\
    \ Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    values\
    \ = filter(values, x -> isa(x, Int8))\n    values = filter(values, x -> isa(x,\
    \ Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    values\
    \ = filter(values, x -> isa(x, Int8))\n    values = filter(values, x -> isa(x,\
    \ Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    values\
    \ = filter(values, x -> isa(x, Int8))\n    values = filter(values, x -> isa(x,\
    \ Int16))\n    values = filter(values, x -> isa(x, Int32))\n    values = filter(values,\
    \ x -> isa(x, Int64))\n    values = filter(values, x -> isa(x, Int))\n    values\
    \ = filter(values, x -> isa(x, Int8))\n    values = filter(values, x -> isa",
  "    \n    filter_integers = filter(values, x -> isa(x, Int64))\n    \n    return\
    \ filter_integers\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
