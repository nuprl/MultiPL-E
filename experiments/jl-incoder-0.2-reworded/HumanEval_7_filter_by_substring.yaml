name: HumanEval_7_filter_by_substring
language: jl
prompt: "\"\"\" Filter an input vector of strings only for ones that contain given\
  \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
  abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
  ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
  \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
  , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
  ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"\
  xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
  grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
  ])\nend\n"
completions: ["    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 2: filter_by_substring()\nWrite a function that filters an input vector\
    \ of strings only for ones that contain given substring\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"ba\"\
    )\n    [\"bacd\", \"array\"]\n    >>> filter_by_substring([\"abc\", \"bacd\",\
    \ \"cde\", \"array\"], \"bacd\")\n    []\n    >>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"bacd\", keep_all=true)\n    [\"abc\", \"bacd\"\
    , \"cde\", \"array\"]\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"bacd\", keep_all=false)\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacd\", keep_all=true)\n    [\"abc\",\
    \ \"bacd\", \"cde\", \"array\"]\n    >>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"bacd\", keep_all=false)\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacd\", keep_all=true)\n    [\"abc\",\
    \ \"bacd\", \"cde\", \"array\"]\n    >>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"bacd\", keep_all=false)\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacd\", keep_all=true)\n    [\"abc\",\
    \ \"bacd\", \"cde\", \"array\"]\n    >>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"bacd\", keep_all=false)\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacd\", keep_all=true)\n    [\"abc\",\
    \ \"bacd\", \"cde\", \"array\"]\n    >>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"bacd\", keep_all=false)\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacd\", keep_all=true)\n    [\"abc\",\
    \ \"bacd\", \"cde\", \"array\"]\n    >>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"bacd\", keep_all=false)\n", "    \n    filtered_strings\
    \ = Vector{String}()\n    for string in strings\n        if contains(string, substring)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<text>\nExercise 7\nWrite a function\
    \ that filters an input vector of strings only for ones that do not contain given\
    \ substring\n>>> filter_by_not_substring([], \"a\")\n[]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n[\"cde\", \"array\"]\n\"\"\"", " \
    \   strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that filters an input vector\
    \ of strings only for ones that do not contain given substring\n>>> filter_by_substring([],\
    \ \"a\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"a\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"b\")\n[\"abc\", \"bacd\", \"cde\"]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"c\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"d\")\n[\"abc\", \"bacd\", \"cde\", \"\
    array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    e\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"f\")\n[\"abc\", \"bacd\", \"cde\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"g\")\n[\"\
    abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"h\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"i\")\n[\"abc\", \"bacd\", \"cde\", \"\
    array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    j\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"k\")\n[\"abc\", \"bacd\", \"cde\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n[\"\
    abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"m\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n[\"abc\", \"bacd\", \"cde\", \"\
    array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    o\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"p\")\n[\"abc\", \"bacd", "    strings = filter((x)\
    \ -> contains(x, substring), strings)\n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.4>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nfilter_by_substring([1,2,3,4,5,6,7,8,9], 2)", "  \
    \  strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end", "    strings = filter((x) -> contains(x, substring), strings)\n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that filters an input vector of strings only for ones that do not contain\
    \ given substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    []\n    \"\"\"", "    strings\
    \ = [s for s in strings if substring in s]\n    return strings\nend\n</cell>\n\
    <code language=julia-1.4>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n</cell>\n<text>\nExercise 2: filter_by_substring", "    \n \
    \   strings = strings[findall(strings, substring)]\n    \n    return strings\n\
    end", "    strings = filter((x) -> contains(x, substring), strings)\n    return\
    \ strings\nend", "    \n    strings = filter((x) -> contains(x, substring), strings)\n\
    \    \n    return strings\nend", "    \n    strings = strings[findall(strings,\
    \ substring)]\n    \n    return strings\nend\n</cell>\n<text>\nExercise 2: filter_by_substring()\n\
    Write a function that filters an input vector of strings only for ones that contain\
    \ given substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"", "    \n    strings = strings[findall(x -> contains(x, substring),\
    \ strings)]\n    \n    return strings\nend", "    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    return strings\nend\n</cell>\n<code language=julia-1.3>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 4\nWrite a function that filters input vector of strings only\
    \ for those that contain given substring\n    >>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n\
    \    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"ba\")\n\
    \    [\"bacd\", \"array\"]\n    >>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"ab\")\n    []\n    \"\"\"", "    strings = [s for s in strings\
    \ if substring in s]\n    return strings\nend", "    strings = filter( x -> contains(x,\
    \ substring), strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that filters an input vector of strings only\
    \ for ones that do not contain given substring\ne.g. filter_by_not_containing([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\nshould return [\"bacd\", \"cde\"\
    ]", "    \n    strings = strings[findall(strings, substring .== \"*\")]\n    \n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters an input vector of strings only for those that contain\
    \ given substring\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"b\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"c\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"d\"\
    )\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"e\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"f\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"g\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\",\
    \ \"cde\", \"array\"], \"h\")\n    []\n    >>> filter_by_substring([\"abc\", \"\
    bacd\", \"cde\", \"array\"], \"i\")\n    []\n    >>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"j\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"m\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"p\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"q\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"r\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"s\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"t\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"c", "    \n    strings = strings[findall(strings,substring)]\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that filters an input vector of strings only for ones that do not\
    \ contain given substring\n    >>> filter_by_substring([], \"a\")\n    []\n  \
    \  >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n \
    \   []\n    \"\"\"", "    strings = filter( x -> contains(x, substring), strings)\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of strings and a vector of strings as inputs\
    \ and returns a vector of strings as output. The function should return the same\
    \ vector if both inputs are empty or if both inputs have the same length. The\
    \ function should return an empty vector if one of the inputs is empty.", "  \
    \  strings = filter( x -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input vector of strings only for ones that do not contain given substring\n\
    >>> filter_by_substring([], \"a\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"d\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"ab\")\n[\"abc\", \"bacd\", \"array\"]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"ba\")\n[\"\
    bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"bc\")\n[\"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"c\")\n[\"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"e\")\n[\"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"f\")\n[\"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"g\")\n[\"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"h\")\n[\"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"i\")\n[\"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"j\")\n[\"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n[\"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n[\"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"m\")\n[\"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n[\"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n[\"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"", "    \n    strings = strings[findall(strings, substring)]\n\
    \    return strings\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
