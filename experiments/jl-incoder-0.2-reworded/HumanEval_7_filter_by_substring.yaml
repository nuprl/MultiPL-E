name: HumanEval_7_filter_by_substring
language: jl
prompt: "\"\"\" Filter an input vector of strings only for ones that contain given\
  \ substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
  abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
  ]\n    \"\"\"\nfunction filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
  \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
  , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
  ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"\
  xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
  grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
  ])\nend\n"
completions: ["    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 2: filter_by_substring()\nWrite a function that filters an input vector\
    \ of strings only for ones that contain given substring\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"ba\"\
    )\n    [\"bacd\", \"array\"]\n    >>> filter_by_substring([\"abc\", \"bacd\",\
    \ \"cde\", \"array\"], \"bacd\")\n    []\n    >>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"bacd\", keep_all=true)\n    [\"abc\", \"bacd\"\
    , \"cde\", \"array\"]\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"bacd\", keep_all=false)\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacd\", keep_all=true)\n    [\"abc\",\
    \ \"bacd\", \"cde\", \"array\"]\n    >>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"bacd\", keep_all=false)\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacd\", keep_all=true)\n    [\"abc\",\
    \ \"bacd\", \"cde\", \"array\"]\n    >>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"bacd\", keep_all=false)\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacd\", keep_all=true)\n    [\"abc\",\
    \ \"bacd\", \"cde\", \"array\"]\n    >>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"bacd\", keep_all=false)\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacd\", keep_all=true)\n    [\"abc\",\
    \ \"bacd\", \"cde\", \"array\"]\n    >>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"bacd\", keep_all=false)\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bacd\", keep_all=true)\n    [\"abc\",\
    \ \"bacd\", \"cde\", \"array\"]\n    >>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"bacd\", keep_all=false)\n", "    \n    filtered_strings\
    \ = Vector{String}()\n    for string in strings\n        if contains(string, substring)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<text>\nExercise 7\nWrite a function\
    \ that filters an input vector of strings only for ones that do not contain given\
    \ substring\n>>> filter_by_not_substring([], \"a\")\n[]\n>>> filter_by_not_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n[\"cde\", \"array\"]\n\"\"\"", " \
    \   strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that filters an input vector\
    \ of strings only for ones that do not contain given substring\n>>> filter_by_substring([],\
    \ \"a\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"a\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"b\")\n[\"abc\", \"bacd\", \"cde\"]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"c\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"d\")\n[\"abc\", \"bacd\", \"cde\", \"\
    array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    e\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"f\")\n[\"abc\", \"bacd\", \"cde\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"g\")\n[\"\
    abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"h\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"i\")\n[\"abc\", \"bacd\", \"cde\", \"\
    array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    j\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"k\")\n[\"abc\", \"bacd\", \"cde\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n[\"\
    abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"m\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n[\"abc\", \"bacd\", \"cde\", \"\
    array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    o\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"p\")\n[\"abc\", \"bacd", "    strings = filter((x)\
    \ -> contains(x, substring), strings)\n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.4>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nfilter_by_substring([1,2,3,4,5,6,7,8,9], 2)", "  \
    \  strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end", "    strings = filter((x) -> contains(x, substring), strings)\n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that filters an input vector of strings only for ones that do not contain\
    \ given substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    []\n    \"\"\"", "    strings\
    \ = [s for s in strings if substring in s]\n    return strings\nend\n</cell>\n\
    <code language=julia-1.4>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n</cell>\n<text>\nExercise 2: filter_by_substring", "    \n \
    \   strings = strings[findall(strings, substring)]\n    \n    return strings\n\
    end", "    strings = filter((x) -> contains(x, substring), strings)\n    return\
    \ strings\nend", "    \n    strings = filter((x) -> contains(x, substring), strings)\n\
    \    \n    return strings\nend", "    \n    strings = strings[findall(strings,\
    \ substring)]\n    \n    return strings\nend\n</cell>\n<text>\nExercise 2: filter_by_substring()\n\
    Write a function that filters an input vector of strings only for ones that contain\
    \ given substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"", "    \n    strings = strings[findall(x -> contains(x, substring),\
    \ strings)]\n    \n    return strings\nend", "    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    return strings\nend\n</cell>\n<code language=julia-1.3>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 4\nWrite a function that filters input vector of strings only\
    \ for those that contain given substring\n    >>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n\
    \    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"ba\")\n\
    \    [\"bacd\", \"array\"]\n    >>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"ab\")\n    []\n    \"\"\"", "    strings = [s for s in strings\
    \ if substring in s]\n    return strings\nend", "    strings = filter( x -> contains(x,\
    \ substring), strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that filters an input vector of strings only\
    \ for ones that do not contain given substring\ne.g. filter_by_not_containing([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\nshould return [\"bacd\", \"cde\"\
    ]", "    \n    strings = strings[findall(strings, substring .== \"*\")]\n    \n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters an input vector of strings only for those that contain\
    \ given substring\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"b\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"c\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"d\"\
    )\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"e\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"f\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"g\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\",\
    \ \"cde\", \"array\"], \"h\")\n    []\n    >>> filter_by_substring([\"abc\", \"\
    bacd\", \"cde\", \"array\"], \"i\")\n    []\n    >>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"j\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"m\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"p\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"q\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"r\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"s\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"t\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"c", "    \n    strings = strings[findall(strings,substring)]\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that filters an input vector of strings only for ones that do not\
    \ contain given substring\n    >>> filter_by_substring([], \"a\")\n    []\n  \
    \  >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n \
    \   []\n    \"\"\"", "    strings = filter( x -> contains(x, substring), strings)\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of strings and a vector of strings as inputs\
    \ and returns a vector of strings as output. The function should return the same\
    \ vector if both inputs are empty or if both inputs have the same length. The\
    \ function should return an empty vector if one of the inputs is empty.", "  \
    \  strings = filter( x -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input vector of strings only for ones that do not contain given substring\n\
    >>> filter_by_substring([], \"a\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"d\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"ab\")\n[\"abc\", \"bacd\", \"array\"]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"ba\")\n[\"\
    bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"bc\")\n[\"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"c\")\n[\"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"e\")\n[\"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"f\")\n[\"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"g\")\n[\"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"h\")\n[\"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"i\")\n[\"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"j\")\n[\"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n[\"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n[\"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"m\")\n[\"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n[\"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n[\"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"", "    \n    strings = strings[findall(strings, substring)]\n\
    \    return strings\nend", "    \n    strings = strings[findall(strings, substring)]\n\
    \    \n    return strings\nend", "    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    return strings\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that filters an input vector of strings only for ones that do\
    \ not contain given substring\n>>> filter_by_substring([], \"a\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n[\"abc\", \"bacd\", \"array\"]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"b\")\n[\"abc\"\
    , \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"c\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"d\")\n[\"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"e\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"f\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"g\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"h\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"i\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"j\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"m\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"p\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"q\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"r\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"s\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"t\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"u\")\n[]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"v\")", "    \n    strings = strings[findall(strings,\
    \ substring)]\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 2: filter_by_substring()\nWrite a function that filters an input\
    \ vector of strings only for ones that contain a given substring anywhere in the\
    \ string\ne.g. filter_by_substring([ \"abc\", \"bacd\", \"cde\", \"array\"], \"\
    a\") should return [\"abc\", \"bacd\", \"array\"]\nHint: use filter_by_substring()",
  "    strings = filter( x -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input vector of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    []\n    \"\"\"", "    strings\
    \ = filter((x) -> contains(x, substring), strings)\n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()", "    \n  \
    \  strings = filter(x->contains(x, substring), strings)\n    \n    return strings\n\
    end", "    strings = filter( x -> contains(x, substring), strings)\n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.4>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a vector of strings and a substring and returns a vector\
    \ of strings that only contain the substring.", "    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nfilter_by_substring!", "    \n    strings = strings[findall(x -> contains(x,\
    \ substring), strings)]\n    \n    return strings\nend", "    strings = filter((x)\
    \ -> contains(x, substring), strings)\n    return strings\nend", "    strings\
    \ = filter(x->contains(x, substring), strings)\n    return strings\nend\n</cell>\n\
    <text>\nExercise 9\nWrite a function that filters an input vector of strings only\
    \ for ones that do not contain given substring\n    >>> filter_by_not_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_not_substring([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"a\")\n    [\"cde\", \"array\"]\n    \"\"\"", "    \n    strings\
    \ = strings[findall(strings,substring)]\n    \n    return strings\nend", "   \
    \ strings = filter( x -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()", "    filter_by_substring(strings,\
    \ substring, true)\nend", "    strings = filter((x) -> contains(x, substring),\
    \ strings)\n    return strings\nend", "    \n    strings = strings[findall(x ->\
    \ contains(x, substring), strings)]\n    \n    return strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of strings and a vector of strings as arguments and returns a vector of strings\
    \ that contains all strings from the first vector that also exist in the second\
    \ vector.", "    \n    strings = strings[:]\n    \n    strings = filter((x) ->\
    \ contains(x, substring), strings)\n    \n    return strings\nend", "    \n  \
    \  strings = strings[findall(strings, substring .== \"$substring\")]\n    \nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that filters an input vector of\
    \ strings only for ones that do not contain given substring\n>>> filter_by_substring([],\
    \ \"a\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"a\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"b\")\n[\"abc\", \"bacd\", \"cde\"]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"c\")\n[\"abc\", \"bacd\", \"cde\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"d\")\n[\"abc\", \"bacd\", \"cde\"]\n>>>\
    \ filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"e\")\n[\"abc\"\
    , \"bacd\", \"cde\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"f\")\n[\"abc\", \"bacd\", \"cde\"]\n>>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"g\")\n[\"abc\", \"bacd\", \"cde\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"h\")\n[\"abc\", \"bacd\", \"cde\"]\n>>>\
    \ filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"i\")\n[\"abc\"\
    , \"bacd\", \"cde\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"j\")\n[\"abc\", \"bacd\", \"cde\"]\n>>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"k\")\n[\"abc\", \"bacd\", \"cde\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n[\"abc\", \"bacd\", \"cde\"]\n>>>\
    \ filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"m\")\n[\"abc\"\
    , \"bacd\", \"cde\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"n\")\n[\"abc\", \"bacd\", \"cde\"]\n>>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"o\")\n[\"abc\", \"bacd\", \"cde\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"p\")\n[\"abc\", \"bacd\", \"cde\"]\n>>>\
    \ filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"q\")\n[\"", " \
    \   filter_by_substring = filter(x -> contains(x, substring), strings)\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of strings and a substring and returns a vector of strings that\
    \ only contain the given substring. For example, given [\"abc\", \"bacd\", \"\
    cde\", \"array\"] and \"a\", the function should return [\"abc\", \"bacd\"].",
  "    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input vector of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    []\n    \"\"\"", "    \n   \
    \ strings = strings[findall(strings, substring)]\n    return strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters an\
    \ input vector of strings only for ones that do not contain given substring\n\
    e.g. filter_by_not_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n\
    >>> filter_by_not_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n\
    [\"cde\", \"array\"]\n</text>\n<code language=julia-1.5>", "    \n    strings\
    \ = strings[findall(strings, substring)]\n    \n    return strings\nend", "  \
    \  \n    strings = strings[findall(x -> contains(x, substring), strings)]\n  \
    \  \n    return strings\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input vector of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    []\n    \"\"\"", "    filter_by_substring(strings,\
    \ substring, true)\nend", "    \n    filtered_strings = Vector{String}()\n   \
    \ for string in strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters input\
    \ vectors based on whether they contain a given substring.", "    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<text>\nExercise 4\nWrite a\
    \ function that filters input vectors based on whether they contain all substrings\n\
    in the given list.", "    strings = filter( x -> contains(x,substring), strings)\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of strings and a substring and returns a vector\
    \ of strings that only contain the given substring. Test it on the following strings:",
  "    \n    strings = strings[findall(strings,substring)]\n    return strings\nend\n\
    </cell>\n<code language=julia-1.4>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters input vectors based on whether they contain all given substrings\ne.g.\
    \ filter_by_substring([1,2,3], \"a\", \"b\", \"c\") = [1,2]\nHint: use findall",
  "    \n    strings = strings[findall(x -> contains(x, substring), strings)]\n  \
    \  \n    return strings\nend", "    \n    strings = strings[findall(strings, substring\
    \ .== \"*\")]\n    \n    return strings\nend", "    \n    strings = strings[findall(strings,\
    \ substring)]\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that filters input vectors based on whether\
    \ they contain any of a set of substrings.", "    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2: Filter\
    \ by substring\nWrite a function that filters an input vector of strings only\
    \ for ones that contain given substring\n>>> filter_by_substring([\"abc\", \"\
    bacd\", \"cde\", \"array\"], \"a\")\n[\"abc\", \"bacd\", \"array\"]", "    strings\
    \ = strings[findall(strings, substring)]\n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters an input\
    \ vector of strings only for ones that do not contain given substring\n    >>>\
    \ filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n    []\n    \"\"\"", "    \n    filter_by_substring\
    \ = @filter2 contains(substring)\n    \n    return filter_by_substring(strings)\n\
    end", "    strings = filter((x) -> contains(x, substring), strings)\n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.4>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3: Write a\
    \ function that filters input vector of strings only for ones that do not contain\
    \ given substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    []\n    \"\"\"", "    strings\
    \ = filter( x -> contains(x, substring), strings)\n    return strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()", "    \n    strings\
    \ = strings[findall(strings, substring .== \"a\")]\n    return strings\nend\n\
    </cell>\n<text>\nExercise 3: Filter by substring\nWrite a function that filters\
    \ an input vector of strings only for ones that contain given substring\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n[\"abc\", \"bacd\", \"array\"]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"b\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"c\")\n[\"abc\"\
    , \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"d\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"e\")\n[\"abc\", \"bacd\", \"cde\", \"\
    array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    f\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"g\")\n[\"abc\", \"bacd\", \"cde\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"h\")\n[\"\
    abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"i\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"j\")\n[\"abc\", \"bacd\", \"cde\", \"\
    array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    k\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"l\")\n[\"abc\", \"bacd\", \"cde\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"m\")\n[\"\
    abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"n\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n[\"abc\", \"bacd\", \"cde\", \"\
    array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    p\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> ", "    \n    strings = strings[findall(strings,substring)]\n\
    \    return strings\nend", "    strings = filter( x -> contains(x, substring),\
    \ strings)\n    return strings\nend", "    \n    strings = strings[findall(strings,substring)]\n\
    \    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input vector of strings only for ones that do not\
    \ contain given substring\n    >>> filter_by_substring([], \"a\")\n    []\n  \
    \  >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n \
    \   []\n    \"\"\"", "    strings = filter((x) -> contains(x, substring), strings)\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input vector of strings only for ones that do not\
    \ contain given substring\n    >>> filter_by_substring([], \"a\")\n    []\n  \
    \  >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n \
    \   []\n    \"\"\"", "    \n    strings = strings[findall(strings, substring)]\n\
    \    \n    return strings\nend", "    \n    strings = strings[findall(strings,substring)]\n\
    \    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input vector of strings only for ones that do not\
    \ contain given substring\n    >>> filter_by_substring([], \"a\")\n    []\n  \
    \  >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n \
    \   []\n    \"\"\"", "    \n    strings = filter( x -> contains(x, substring),\
    \ strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.4>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and a vector\
    \ of substrings and returns a vector of strings containing only those strings\
    \ that contain the substrings.", "    strings = filter((x) -> contains(x, substring),\
    \ strings)\n    return strings\nend", "    strings = strings[findall(strings,substring)]\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.4>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input vector of strings only for ones that do not\
    \ contain given substring\n    >>> filter_by_substring([], \"a\")\n    []\n  \
    \  >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n \
    \   []\n    \"\"\"", "    \n    strings = filter( x -> contains(x, substring),\
    \ strings)\n    \n    return strings\nend", "    \n    strings = strings[findall(strings,\
    \ substring)]\n    \n    return strings\nend", "    \n    strings = strings[findall(strings,substring)]\n\
    \    \n    return strings\nend", "    \n    strings = strings[findall(strings,\
    \ substring .== \"*\")]\n    \n    return strings\nend", "    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 2: filter_by_substring()\nWrite a function that filters an input\
    \ vector of strings only for ones that contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n    \"\"\"", "    \n   \
    \ strings = strings[:]\n    \n    i = 0\n    while i < length(strings)\n     \
    \   if contains(strings[i], substring)\n            i += 1\n        else\n   \
    \         deleteat!(strings, i)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that filters an input vector\
    \ of strings only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    []\n    \"\"\"", "    \n    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend", "    strings = filter((x)\
    \ -> contains(x, substring), strings)\n    return strings\nend\n</cell>\n<text>\n\
    filter_by_substring()", "    strings = strings[findall(strings,substring)]\n \
    \   return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of strings and a vector of strings as arguments\
    \ and returns a vector of the same length with all strings containing all substrings\
    \ of at least one string in the input vectors.", "    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if string.contains(substring)\n    \
    \        strings.remove(string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of strings and a vector of substrings and returns a vector of\
    \ strings containing only the strings that contain the substrings.", "    strings\
    \ = filter((x) -> contains(x, substring), strings)\n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of strings and a substring and returns a vector of strings containing\
    \ only the strings that contain the given substring. Test it on the following\
    \ strings:", "    strings = strings[findall(strings,substring)]\n    return strings\n\
    end", "    \n    strings = strings[findall(strings, substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters an input vector of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    []\n    \"\"\"", "    \n   \
    \ strings = strings[findall(strings, substring)]\n    return strings\nend", " \
    \   \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end", "    strings = filter( x -> contains(x, substring), strings)\n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that filters an input vector of strings only for ones that do not contain\
    \ given substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    []\n    \"\"\"", "    \n   \
    \ strings = strings[findall(x -> contains(x, substring), strings)]\n    \n   \
    \ return strings\nend\n</cell>\n<text>\nfilter_by_substring()", "    strings =\
    \ filter((x) -> contains(x, substring), strings)\n    return strings\nend", " \
    \   \n    strings = strings[findall(strings, substring)]\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.3>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nFilter an input vector of strings\
    \ only for ones that do not contain given substring\nThe opposite of filter_by_substring",
  "    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of strings and a substring and returns a vector of strings containing\
    \ only those strings that contain the substring. For example, given [\"abc\",\
    \ \"bacd\", \"cde\", \"array\"], \"a\", the function should return [\"abc\", \"\
    bacd\"].", "    strings = filter((x) -> contains(x, substring), strings)\n   \
    \ return strings\nend", "    \n    strings = strings[findall(strings, substring)]\n\
    \    return strings\nend", "    \n    filtered_strings = Vector{String}()\n  \
    \  for string in strings\n        if contains(string, substring)\n           \
    \ push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input vector\
    \ of strings only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    []\n    \"\"\"", "    \n    strings = strings[findall(strings,\
    \ substring)]\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"b\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"c\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"d\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"e\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"f\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"g\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"h\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"i\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"j\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"k\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"m\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"n\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"p\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"q\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"r\")\n</cell>\n<code language=julia-1.5>\n\
    filter", "    \n    strings = strings[findall(strings, substring)]\n    \n   \
    \ return strings\nend", "    \n    filter_by_substring = filter(x -> contains(x,\
    \ substring), strings)\n    return filter_by_substring\nend", "    \n    strings\
    \ = strings[findall(strings, substring)]\n    \n    return strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n</cell>\n<text>\nFiltering by substring", "    strings = filter((x)\
    \ -> contains(x, substring), strings)\n    return strings\nend", "    strings\
    \ = filter((x) -> contains(x, substring), strings)\n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring", "    strings\
    \ = filter( x -> contains(x, substring), strings)\n    return strings\nend", " \
    \   \n    strings = strings[:]\n    \n    for string in strings\n        if string.contains(substring)\n\
    \            remove!(strings, string)\n        end\n    end\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()",
  "    \n    strings = strings[findall(strings, x -> contains(x, substring))]\n  \
    \  return strings\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of strings and a vector of strings as inputs and returns a vector of\
    \ strings as output. The function should remove all strings from the input vector\
    \ that do not contain any of the strings in the second input vector.", "    strings\
    \ = filter((x) -> contains(x, substring), strings)\n    return strings\nend",
  "    \n    strings = strings[findall(strings,substring)]\n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3: Filter an input vector\
    \ of strings only for ones that contain given substring\nWrite a function that\
    \ filters an input vector of strings only for ones that contain given substring\n\
    Use filter_by_substring() to filter an input vector of strings only for ones that\
    \ contain given substring\nUse filter_by_substring() to filter an input vector\
    \ of strings only for ones that contain given substring\nUse filter_by_substring()\
    \ to filter an input vector of strings only for ones that contain given substring\n\
    Use filter_by_substring() to filter an input vector of strings only for ones that\
    \ contain given substring\nUse filter_by_substring() to filter an input vector\
    \ of strings only for ones that contain given substring\nUse filter_by_substring()\
    \ to filter an input vector of strings only for ones that contain given substring\n\
    Use filter_by_substring() to filter an input vector of strings only for ones that\
    \ contain given substring\nUse filter_by_substring() to filter an input vector\
    \ of strings only for ones that contain given substring\nUse filter_by_substring()\
    \ to filter an input vector of strings only for ones that contain given substring\n\
    Use filter_by_substring() to filter an input vector of strings only for ones that\
    \ contain given substring\nUse filter_by_substring() to filter an input vector\
    \ of strings only for ones that contain given substring\nUse filter_by_substring()\
    \ to filter an input vector of strings only for ones that contain given substring\n\
    Use filter_by_substring() to filter an input vector of strings only for ones that\
    \ contain given substring\nUse filter_by_substring() to filter an input vector\
    \ of strings only for ones that contain given substring\nUse filter_by_substring()\
    \ to filter an input vector of strings only for ones that contain given substring\n\
    Use filter_by_substring() to filter an input vector of strings only for ones that\
    \ contain given substring\nUse filter_by_substring() to filter an input vector\
    \ of strings only for ones that contain given substring\nUse filter_by_substring()\
    \ to filter an input vector of strings only for ones that contain given substring\n\
    Use filter_by_substring() to filter an input vector of strings only for ones that\
    \ contain given substring\nUse filter_by_substring() to filter an input vector\
    \ of strings only for ones that contain given substring\nUse filter_by_substring()\
    \ to filter an input vector of strings only for ones that contain given substring\n\
    Use filter_by_substring() to filter an input vector of strings only for ones that\
    \ contain given substring\nUse filter_by_substring() to filter an input vector\
    \ of strings only for ones that contain given substring\nUse filter_by_substring()\
    \ to filter an input vector of strings only for ones that contain given substring\n\
    Use filter_by_substring() to filter an input vector of strings only for ones that\
    \ contain given substring\nUse filter_by_substring() to filter an input vector\
    \ of strings only for ones that contain given substring\nUse filter_by_substring()\
    \ to filter an input vector of strings only for ones that contain given substring\n\
    Use filter", "    \n    strings = strings[findall(strings,substring)]\n    \n\
    \    return strings\nend", "    filter_by_substring(strings, substring, true)\n\
    end", "    strings = filter((x) -> contains(x, substring), strings)\n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring",
  "    strings = strings[findall(strings, substring)]\n    return strings\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a vector of strings and a substring\
    \ and returns a vector of strings containing only the strings that contain the\
    \ given substring. Test it on some examples:", "    \n    strings = strings[findall(x\
    \ -> contains(x, substring), strings)]\n    \n    return strings\nend", "    \n\
    \    strings = strings[findall(strings, substring)]\n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input vector of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    []\n    \"\"\"", "    \n   \
    \ strings = strings[findall(strings,substring)]\n    return strings\nend", " \
    \   strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end", "    strings = filter((x) -> contains(x, substring), strings)\n    return\
    \ strings\nend", "    \n    strings = strings[findall(strings, substring)]\n \
    \   \n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input vector of strings only for ones that do not\
    \ contain given substring\n    >>> filter_by_substring([], \"a\")\n    []\n  \
    \  >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n \
    \   []\n    \"\"\"", "    \n    strings = strings[findall(strings, substring .==\
    \ true)]\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that filters an input vector of strings only\
    \ for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"b\")\n    [\"abc\", \"bacd\", \"cde\", \"array\"]\n    \"\"\"",
  "    \n    strings = strings[findall(strings, substring .== \"_\")]\n    \n    return\
    \ strings\nend\n</cell>\n<text>\nExercise 2\nWrite a function that filters input\
    \ vectors based on whether they contain any of a list of substrings.", "    \n\
    \    strings = strings[findall(x -> contains(x, substring), strings)]\n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that filters an input vector of strings only for ones that do not contain\
    \ given substring\n    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    []\n    \"\"\"", "    \n   \
    \ strings = strings[findall(strings, substring)]\n    \n    return strings\nend",
  "    \n    strings = strings[:]\n    \n    strings = filter((x) -> contains(x, substring),\
    \ strings)\n    \n    return strings\nend", "    filter_by_substring(strings,\
    \ substring, true)\nend", "    \n    filtered_strings = Vector{String}()\n   \
    \ for string in strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an\
    \ input vector of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    []\n    \"\"\"", "    strings\
    \ = filter((x) -> contains(x, substring), strings)\n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2: filter_by_substring",
  "    \n    strings = filter((x) -> contains(x, substring), strings)\n    return\
    \ strings\nend", "    \n    strings = strings[findall(strings, substring)]\n \
    \   \n    return strings\nend", "    \n    strings = strings[findall(strings,substring)]\n\
    \    \n    return strings\nend", "    \n    strings = strings[findall(strings,\
    \ substring .== \"*\")]\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nFilter an input vector of strings only for ones that contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    \"\"\"", "    strings = filter((x) -> contains(x, substring), strings)\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.3>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of strings and a vector of substrings and returns\
    \ a vector of strings that only contain substrings.", "    \n    strings = strings[findall(strings,\
    \ substring)]\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that filters input vector of strings only\
    \ for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    []\n    \"\"\"", "    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that filters an input vector of strings only\
    \ for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    []\n    \"\"\"", "    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that filters input strings based on whether\
    \ they contain any of a set of substrings.", "    \n    strings = strings[:]\n\
    \    \n    strings = filter((x) -> contains(x, substring), strings)\n    \n  \
    \  return strings\nend", "    \n    strings = strings[:]\n    \n    strings =\
    \ filter((x) -> contains(x, substring), strings)\n    \n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring", "    \n    strings\
    \ = filter( x -> contains(x, substring), strings)\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input vector of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"ab\")\n    [\"abc\", \"bacd\", \"cde\"\
    , \"array\"]\n    \"\"\"", "    \n    strings = strings[findall(strings, substring)]\n\
    \    \n    return strings\nend", "    \n    strings = strings[findall(strings,\
    \ substring .== \"*\")]\n    \n    return strings\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that filters an input vector of strings only for ones that\
    \ do not contain given substring\n    >>> filter_by_substring([], \"a\")\n   \
    \ []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    a\")\n    []\n    \"\"\"", "    \n    filtered_strings = Vector{String}()\n  \
    \  \n    for string in strings\n        if contains(string, substring)\n     \
    \       push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend", "    \n    strings = strings[findall(strings,substring)]\n\
    \    \n    return strings\nend", "    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input vector\
    \ of strings only for ones that do not contain given substring\n>>> filter_by_substring([],\
    \ \"a\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"],\
    \ \"a\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"\
    bacd\", \"cde\", \"array\"], \"b\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"bacd\", \"array\"]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"d\")\n[\"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"e\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"f\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"g\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"h\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"i\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"j\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"m\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"p\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"q\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"r\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"s\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"t\")\n[]\n\
    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"u", "    \n\
    \    strings = filter(x->contains(x, substring), strings)\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()", "    filter_by_substring(strings,\
    \ substring, true)\nend", "    \n    strings = filter(x->contains(x, substring),\
    \ strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and a vector\
    \ of substrings and returns a vector of strings that only contain substrings.",
  "    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()", "    strings\
    \ = strings[findall(strings, substring)]\n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of\
    \ strings and a vector of strings as inputs and returns a vector of strings as\
    \ output. \nThe function should return all strings in the input vector that do\
    \ not contain any of the strings in the input vector of strings.", "    \n   \
    \ strings = strings[findall(strings,substring)]\n    return strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an\
    \ input vector of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    []\n    \"\"\"", "    \n   \
    \ strings = strings[:]\n    \n    strings = filter((x) -> contains(x, substring),\
    \ strings)\n    \n    return strings\nend", "    filter_by_substring(strings,\
    \ substring, true)\nend", "    \n    strings = strings[findall(strings,substring)]\n\
    \    return strings\nend", "    \n    strings = strings[findall(strings, substring)]\n\
    \    \n    return strings\nend", "    \n    strings = strings[findall(x -> contains(x,\
    \ substring), strings)]\n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 2: filter_by_substring", "    \n    strings = strings[findall(strings,\
    \ substring)]\n    \n    return strings\nend", "    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that filters an input vector of strings only\
    \ for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ \"a\")\n    []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n    []\n    \"\"\"", "    \n    strings = strings[findall(strings,\
    \ x -> contains(x, substring))]\n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nfilter_by_substring()", "    strings = strings[findall(strings,substring)]\n\
    \    return strings\nend", "    \n    strings = filter( x -> contains(x, substring),\
    \ strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and a vector\
    \ of strings as arguments and returns a vector of strings that contains all the\
    \ strings in the first vector that also exist in the second vector. \nFor example,\
    \ given the following vectors:", "    strings = [s for s in strings if substring\
    \ in s]\n    return strings\nend", "    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2: filter_by_substring",
  "    \n    strings = strings[findall(strings, substring)]\n    return strings\n\
    end", "    \n    strings = filter((x) -> contains(x, substring), strings)\n  \
    \  \n    return strings\nend", "    strings = filter((x) -> contains(x, substring),\
    \ strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nFilter an input\
    \ vector of strings only for ones that do not contain given substring\n    >>>\
    \ filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n    []\n    \"\"\"", "    \n    strings\
    \ = filter( x -> contains(x, substring), strings)\n    return strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that filters an\
    \ input vector of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    []\n    \"\"\"", "    strings\
    \ = filter((x) -> contains(x, substring), strings)\n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()", "    strings\
    \ = filter((x) -> contains(x, substring), strings)\n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of strings and a substring and returns the vector of strings\
    \ containing only the strings that contain the substring. For example, given [\"\
    abc\", \"bacd\", \"cde\", \"array\"] and \"a\", the function should return [\"\
    abc\", \"bacd\"].", "    \n    strings = strings[findall(strings, substring)]\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters input vector of strings only for those that contain\
    \ given substring and are longer than a given length\ne.g. filter_by_length_longer([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", 2)\nshould return [\"abc\", \"bacd\"\
    , \"array\"]", "    \n    strings = strings[findall(strings,substring)]\n    \n\
    \    return strings\nend", "    \n    filtered_strings = Set{String}()\n    \n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return collect(filtered_strings)\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ filters an input vector of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    []\n    \"\"\"", "    \n   \
    \ strings = strings[findall(strings, substring)]\n    \n    return strings\nend\n\
    </cell>\n<code language=julia-1.4>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring", "    strings\
    \ = filter(x->contains(x, substring), strings)\n    return strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an\
    \ input vector of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    []\n    \"\"\"", "    strings\
    \ = filter(x->contains(x, substring), strings)\n    return strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()", "    \n    strings\
    \ = strings[findall(strings, substring)]\n    \n    return strings\nend", "  \
    \  filter_by_substring(strings, substring, true)\nend", "    strings = filter((x)\
    \ -> contains(x, substring), strings)\n    return strings\nend", "    strings\
    \ = filter((x) -> contains(x, substring), strings)\n    return strings\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of strings and\
    \ a vector of strings as inputs and returns a vector of strings as output. Your\
    \ function should remove all strings from the input vector that do not contain\
    \ any of the strings in the second input vector.", "    \n    strings = filter(x->contains(x,\
    \ substring), strings)\n    \n    return strings\nend", "    \n    strings = filter(x->contains(x,\
    \ substring), strings)\n    return strings\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that filters strings by a substring that appears at least twice\
    \ in a row.", "    \n    strings = strings[findall(strings,substring)]\n    \n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of strings and a substring and returns a vector\
    \ of strings containing only the strings that contain the given substring. For\
    \ example, given [\"abc\", \"bacd\", \"cde\", \"array\", \"abba\", \"abbaabba\"\
    ], substring = \"abba\" the function should return [\"abc\", \"bacd\", \"array\"\
    ].", "    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end", "    \n    strings = filter(x->contains(x, substring), strings)\n    \n\
    \    return strings\nend", "    strings = filter((x) -> contains(x, substring),\
    \ strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()",
  "    \n    strings = filter(x->contains(x, substring), strings)\n    \n    return\
    \ strings\nend", "    \n    strings = strings[findall(strings, substring .== true)]\n\
    \    \n    return strings\nend\n</cell>\n<code language=julia-1.4>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input vector of strings only for those that contain\
    \ given substrings\n    >>> filter_by_substrings([], \"a\")\n    []\n    >>> filter_by_substrings([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"\
    ]\n    >>> filter_by_substrings([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\"\
    , \"b\", \"c\")\n    [\"abc\", \"bacd\", \"array\"]\n    >>> filter_by_substrings([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", \"b\", \"c\", \"d\")\n    []\n  \
    \  \"\"\"", "    \n    strings = filter((x) -> contains(x, substring), strings)\n\
    \    \n    return strings\nend", "    \n    strings = strings[findall(strings,\
    \ substring)]\n    return strings\nend", "    \n    strings = strings[findall(strings,substring)]\n\
    \    return strings\nend", "    strings = filter((x) -> contains(x, substring),\
    \ strings)\n    return strings\nend\n</cell>\n<code language=julia-1.4>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2: Filter\
    \ a vector of strings based on a predicate function\nWrite a predicate function\
    \ filter_by_predicate that filters a vector of strings based on a predicate function.\
    \ The predicate function should take two arguments (the string and the substring)\
    \ and return a boolean indicating whether the string contains the substring.",
  "    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of\
    \ strings and a substring and returns all strings that contain that substring.\
    \ Test it on some example strings.", "    \n    strings = strings[findall(strings,\
    \ substring .== true)]\n    \n    return strings\nend", "    \n    strings = strings[findall(strings,substring)]\n\
    \    return strings\nend", "    \n    strings = strings[findall(strings, substring)]\n\
    \    \n    return strings\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that filters strings by a regular expression.\nThe function should take two\
    \ arguments: a string and a regular expression. The function should return a new\
    \ vector with only the strings that match the regular expression.", "    \n  \
    \  strings = strings[findall(x -> contains(x, substring), strings)]\n    \n  \
    \  return strings\nend", "    strings = filter((x) -> contains(x, substring),\
    \ strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input vector of strings only for ones that do not\
    \ contain given substring\n    >>> filter_by_substring([], \"a\")\n    []\n  \
    \  >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n \
    \   []\n    \"\"\"", "    strings = filter((x) -> contains(x, substring), strings)\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of strings and a vector of substrings and returns\
    \ a vector of strings that only contain substrings.", "    filter_by_substring\
    \ = @filter (x -> contains(x, substring)) strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that filters an input vector of strings only\
    \ for ones that do not contain given substring\n>>> filter_by_substring([], \"\
    a\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    a\")\n[]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    b\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"c\")\n[\"abc\", \"bacd\", \"cde\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"d\")\n[\"\
    abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"e\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"f\")\n[\"abc\", \"bacd\", \"cde\", \"\
    array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    g\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"h\")\n[\"abc\", \"bacd\", \"cde\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"i\")\n[\"\
    abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"j\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n[\"abc\", \"bacd\", \"cde\", \"\
    array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    l\")\n[\"abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"m\")\n[\"abc\", \"bacd\", \"cde\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n[\"\
    abc\", \"bacd\", \"cde\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"o\")\n[\"abc\", \"bacd\", \"cde", "    \n    strings\
    \ = strings[findall(strings, x -> contains(x, substring))]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters strings based on whether they contain any of a list of substrings.",
  "    \n    strings = strings[findall(strings,substring)]\n    return strings\nend\n\
    </cell>\n<code language=julia-1.4>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3: Filter an input vector\
    \ of strings only for ones that contain given substring\nWrite a function that\
    \ filters an input vector of strings only for ones that contain given substring\n\
    Use filter_by_substring() to filter an input vector of strings only for ones that\
    \ contain given substring\nUse filter_by_substring() to filter an input vector\
    \ of strings only for ones that contain given substring\nUse filter_by_substring()\
    \ to filter an input vector of strings only for ones that contain given substring\n\
    Use filter_by_substring() to filter an input vector of strings only for ones that\
    \ contain given substring\nUse filter_by_substring() to filter an input vector\
    \ of strings only for ones that contain given substring\nUse filter_by_substring()\
    \ to filter an input vector of strings only for ones that contain given substring\n\
    Use filter_by_substring() to filter an input vector of strings only for ones that\
    \ contain given substring\nUse filter_by_substring() to filter an input vector\
    \ of strings only for ones that contain given substring\nUse filter_by_substring()\
    \ to filter an input vector of strings only for ones that contain given substring\n\
    Use filter_by_substring() to filter an input vector of strings only for ones that\
    \ contain given substring\nUse filter_by_substring() to filter an input vector\
    \ of strings only for ones that contain given substring\nUse filter_by_substring()\
    \ to filter an input vector of strings only for ones that contain given substring\n\
    Use filter_by_substring() to filter an input vector of strings only for ones that\
    \ contain given substring\nUse filter_by_substring() to filter an input vector\
    \ of strings only for ones that contain given substring\nUse filter_by_substring()\
    \ to filter an input vector of strings only for ones that contain given substring\n\
    Use filter_by_substring() to filter an input vector of strings only for ones that\
    \ contain given substring\nUse filter_by_substring() to filter an input vector\
    \ of strings only for ones that contain given substring\nUse filter_by_substring()\
    \ to filter an input vector of strings only for ones that contain given substring\n\
    Use filter_by_substring() to filter an input vector of strings only for ones that\
    \ contain given substring\nUse filter_by_substring() to filter an input vector\
    \ of strings only for ones that contain given substring\nUse filter_by_substring()\
    \ to filter an input vector of strings only for ones that contain given substring\n\
    Use filter_by_substring() to filter an input vector of strings only for ones that\
    \ contain given substring\nUse filter_by_substring() to filter an input vector\
    \ of strings only for ones that contain given substring\nUse filter_by_substring()\
    \ to filter an input vector of strings only for ones that contain given substring\n\
    Use filter_by_substring() to filter an input vector of strings only for ones that\
    \ contain given substring\nUse filter_by_substring() to filter an input vector\
    \ of strings only for ones that contain given substring\nUse filter_by_substring()\
    \ to filter an input vector of strings only for ones that contain given substring\n\
    Use filter", "    filter_by_substring(strings, substring, true)\nend\n</cell>\n\
    <code language=julia-1.4>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n</cell>\n<text>\nExercise: filter_by_substring", "    \n   \
    \ strings = strings[findall(strings, substring .== true)]\n    \n    return strings\n\
    end\n</cell>\n<text>\nExercise 2: Filter by substring\nWrite a function that filters\
    \ an input vector of strings only for ones that contain given substring\n    >>>\
    \ filter_by_substring([], \"a\")\n    []\n    >>> filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n    [\"abc\", \"bacd\", \"array\"]\n\
    \    \"\"\"", "    \n    filtered_strings = Vector{String}()\n    \n    for string\
    \ in strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters input\
    \ vectors based on whether they contain all substrings given in an input vector\
    \ of strings.", "    \n    strings = filter( x -> contains(x, substring), strings)\n\
    \    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of strings and a vector of strings as inputs\
    \ and returns a vector of strings as output. The function should remove all strings\
    \ from the input vector that do not contain any of the strings in the input vector.\
    \ For example, if the input vector is [\"abc\", \"bacd\", \"cde\", \"array\"]\
    \ and the input vector is [\"a\", \"b\", \"c\"], then the output vector should\
    \ be [\"abc\", \"bacd\", \"array\"].", "    strings = [s for s in strings if substring\
    \ in s]\n    return strings\nend\n</cell>\n<code language=julia-1.3>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input vector of strings only for ones that do not\
    \ contain given substring\n    >>> filter_by_substring([], \"a\")\n    []\n  \
    \  >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n \
    \   []\n    >>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"\
    b\")\n    [\"abc\", \"bacd\", \"array\"]\n    \"\"\"", "    strings = strings[findall(strings,\
    \ substring .== \".\") .!= []]\n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that filters input strings based on whether\
    \ they contain given substrings\ne.g. filter_by_substrings([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\", \"b\", \"c\")\nshould return [\"abc\", \"bacd\"]",
  "    \n    strings = strings[findall(strings,substring)]\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.3>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters strings by a substring that appears at least twice in each string. For\
    \ example, given [\"abc\", \"bacd\", \"cde\", \"array\", \"ab\", \"ba\", \"cde\"\
    , \"array\", \"ab\"], return [\"abc\", \"bacd\", \"array\", \"ab\", \"ba\", \"\
    array\", \"ab\"].", "    strings = filter((x) -> contains(x, substring), strings)\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of strings and a substring and returns a vector\
    \ of strings containing only the strings that contain the substring.", "    \n\
    \    strings = strings[:]\n    \n    strings = filter(x->contains(x, substring),\
    \ strings)\n    \n    strings = filter(x->!contains(x, substring), strings)\n\
    \    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()",
  "    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 3: filter_by_substring"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
