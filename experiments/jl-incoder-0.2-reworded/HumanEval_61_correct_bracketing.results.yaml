language: jl
name: HumanEval_61_correct_bracketing
results:
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4smq7jzz.jl:14\nin expression starting at /tmp/tmp4smq7jzz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphr_4in_4.jl:14\nin expression starting at /tmp/tmphr_4in_4.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp129zyxs6.jl:14\nin expression starting at /tmp/tmp129zyxs6.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp79zed3gz.jl:14\nin expression starting at /tmp/tmp79zed3gz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp972rx0t2.jl:68\nin expression starting at\
    \ /tmp/tmp972rx0t2.jl:68\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7iuvfilg.jl:14\nin expression starting at /tmp/tmp7iuvfilg.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpi2ie1ho0.jl:14\nin expression starting at /tmp/tmpi2ie1ho0.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphr_4in_4.jl:14\nin expression starting at /tmp/tmphr_4in_4.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphr_4in_4.jl:14\nin expression starting at /tmp/tmphr_4in_4.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp129zyxs6.jl:14\nin expression starting at /tmp/tmp129zyxs6.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphr_4in_4.jl:14\nin expression starting at /tmp/tmphr_4in_4.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpi2ie1ho0.jl:14\nin expression starting at /tmp/tmpi2ie1ho0.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpteup77_6.jl:14\nin expression starting at /tmp/tmpteup77_6.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\":\", \":\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn18tgatc.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn18tgatc.jl:1\n\
    in expression starting at /tmp/tmpn18tgatc.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7iuvfilg.jl:14\nin expression starting at /tmp/tmp7iuvfilg.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdy0tpx92.jl:68\nin expression starting at\
    \ /tmp/tmpdy0tpx92.jl:68\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplh9q2mc6.jl:14\nin expression starting at /tmp/tmplh9q2mc6.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4smq7jzz.jl:14\nin expression starting at /tmp/tmp4smq7jzz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphr_4in_4.jl:14\nin expression starting at /tmp/tmphr_4in_4.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\"=\", \"\\=\")\n    brackets =\
    \ brackets.replace(\"+\", \"\\+\")\n    brackets = brackets.replace(\"-\", \"\\\
    -\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"\
    ^\", \"\\^\")\n    brackets = brackets.replace(\"~\", \"\\~\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\"=\", \"\\=\")\n    brackets = brackets.replace(\"+\", \"\\\
    +\")\n    brackets = brackets.replace(\"-\", \"\\-\")\n    brackets = brackets.replace(\"\
    *\", \"\\*\")\n    brackets = brackets.replace(\"^\", \"\\^\")\n    brackets =\
    \ brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvve317xf.jl:14\nin expression starting at /tmp/tmpvve317xf.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4smq7jzz.jl:14\nin expression starting at /tmp/tmp4smq7jzz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjyda49tk.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjyda49tk.jl:1\n\
    in expression starting at /tmp/tmpjyda49tk.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7iuvfilg.jl:14\nin expression starting at /tmp/tmp7iuvfilg.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcjmjjhbm.jl:67\nin expression starting at\
    \ /tmp/tmpcjmjjhbm.jl:67\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2i1dcobz.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2i1dcobz.jl:1\n\
    in expression starting at /tmp/tmp2i1dcobz.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4smq7jzz.jl:14\nin expression starting at /tmp/tmp4smq7jzz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpng4vpeqj.jl:68\nin expression starting at\
    \ /tmp/tmpng4vpeqj.jl:68\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7iuvfilg.jl:14\nin expression starting at /tmp/tmp7iuvfilg.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwog3_vy6.jl:66\nin expression starting at\
    \ /tmp/tmpwog3_vy6.jl:66\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzlesxh2p.jl:14\nin expression starting at /tmp/tmpzlesxh2p.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"'\", \"\\\
    '\")\n    brackets = brackets.replace(\"\\(\", \"\\(\")\n    brackets = brackets.replace(\"\
    \\)\", \"\\)\")\n    brackets = brackets.replace(\"\\[\", \"\\[\")\n    brackets\
    \ = brackets.replace(\"\\]\", \"\\]\")\n    brackets = brackets.replace(\"\\{\"\
    , \"\\{\")\n    brackets = brackets.replace(\"\\}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"\\<\", \"\\<\")\n    brackets = brackets.replace(\"\\>\"\
    , \"\\>\")\n    brackets = brackets.replace(\"\\,\", \"\\,\")\n    brackets =\
    \ brackets.replace(\"\\;\", \"\\;\")\n    brackets = brackets.replace(\"\\:\"\
    , \"\\:\")\n    brackets = brackets.replace(\"\\!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"\\?\", \"\\?\")\n    brackets = brackets.replace(\"\\'\"\
    , \"\\'\")\n    brackets = brackets.replace(\"\\(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\"\\)\", \"\\)\")\n    brackets = brackets.replace(\"\\[\"\
    , \"\\[\")\n    brackets = brackets.replace(\"\\]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"\\{\", \"\\{\")\n    brackets = brackets.replace(\"\\}\"\
    , \"\\}\")\n    brackets = brackets.replace(\"\\<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\"\\>\", \"\\>\")\n    brackets = brackets.replace(\"\\,\"\
    , \"\\,\")\n    brackets = brackets.replace(\"\\;\", \"\\;\")\n    brackets =\
    \ brackets.replace(\"\\:\", \"\\:\")\n    brackets = brackets.replace(\"\\!\"\
    , \"\\!\")\n    brackets = brackets.replace(\"\\?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\"\\'\", \"\\'\")\n    brackets = brackets.replace(\"\\(\"\
    , \"\\(\")\n    brackets = brackets.replace(\"\\)\", \"\\\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_r_ef562.jl:14\nin expression starting at /tmp/tmp_r_ef562.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp129zyxs6.jl:14\nin expression starting at /tmp/tmp129zyxs6.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppx6yv66b.jl:68\nin expression starting at\
    \ /tmp/tmppx6yv66b.jl:68\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfbslmhk3.jl:54\nin expression starting at\
    \ /tmp/tmpfbslmhk3.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4smq7jzz.jl:14\nin expression starting at /tmp/tmp4smq7jzz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp129zyxs6.jl:14\nin expression starting at /tmp/tmp129zyxs6.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4smq7jzz.jl:14\nin expression starting at /tmp/tmp4smq7jzz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\",\
    \ \"\\{\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    |\", \"\\|\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"\
    ?\", \"\\?\")\n    brackets = brackets.replace(\"%\", \"\\%\")\n    brackets =\
    \ brackets.replace(\"$\", \"\\$\")\n    brackets = brackets.replace(\"&\", \"\\\
    &\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\",\
    \ \"\\{\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    |\", \"\\|\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"\
    ?\", \"\\?\")\n    brackets = brackets.replace(\"%\", \"\\%\")\n    brackets =\
    \ brackets.replace(\"$\", \"\\$\")\n    brackets = brackets.replace(\"&\", \"\\\
    &\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\",\
    \ \"\\{\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    |\", \"\\|\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppnkwwtfl.jl:14\nin expression starting at /tmp/tmppnkwwtfl.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4smq7jzz.jl:14\nin expression starting at /tmp/tmp4smq7jzz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"\\\\\", \"\\\\\\\\\")\n    brackets\
    \ = brackets.replace(\"\\\"\", \"\\\\\\\"\")\n    brackets = brackets.replace(\"\
    \\n\", \"\\\\n\")\n    brackets = brackets.replace(\"\\t\", \"\\\\t\")\n    brackets\
    \ = brackets.replace(\"\\r\", \"\\\\r\")\n    brackets = brackets.replace(\"'\"\
    , \"\\\\'\")\n    brackets = brackets.replace(\"`\", \"\\\\`\")\n    brackets\
    \ = brackets.replace(\"\\\"\", \"\\\\\\\"\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"?\", \"\\\
    ?\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"?\", \"\\\
    ?\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"?\", \"\\\
    ?\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"?\", \"\\\
    ?\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"?\", \"\\\
    ?\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"?\", \"\\\
    ?\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1_wr2t0c.jl:14\nin expression starting at /tmp/tmp1_wr2t0c.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4smq7jzz.jl:14\nin expression starting at /tmp/tmp4smq7jzz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4smq7jzz.jl:14\nin expression starting at /tmp/tmp4smq7jzz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4smq7jzz.jl:14\nin expression starting at /tmp/tmp4smq7jzz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjyda49tk.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjyda49tk.jl:1\n\
    in expression starting at /tmp/tmpjyda49tk.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp129zyxs6.jl:14\nin expression starting at /tmp/tmp129zyxs6.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"|\", \"\\|\")\n    brackets = brackets.replace(\"\
    ~\", \"\\~\")\n    brackets = brackets.replace(\"^\", \"\\^\")\n    brackets =\
    \ brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"_\", \"\\\
    _\")\n    brackets = brackets.replace(\"+\", \"\\+\")\n    brackets = brackets.replace(\"\
    *\", \"\\*\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"=\", \"\\\
    =\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = bracket\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4f9kluxv.jl:14\nin expression starting at /tmp/tmp4f9kluxv.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcjmjjhbm.jl:67\nin expression starting at\
    \ /tmp/tmpcjmjjhbm.jl:67\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\(\")\n    brackets = brackets.replace(\"}\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    (\")\n    brackets = brackets.replace(\"}\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"{\", \"\\(\")\n    brackets = brackets.replace(\"\
    }\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    {\", \"\\(\")\n    brackets = brackets.replace(\"}\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\(\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\(\")\n    brackets = brackets.replace(\"}\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    (\")\n    brackets = brackets.replace(\"}\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"{\", \"\\(\")\n    brackets = brackets.replace(\"\
    }\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpffshltbi.jl:14\nin expression starting at /tmp/tmpffshltbi.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\"=\", \"\\=\")\n    brackets =\
    \ brackets.replace(\"+\", \"\\+\")\n    brackets = brackets.replace(\"-\", \"\\\
    -\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"\
    ^\", \"\\^\")\n    brackets = brackets.replace(\"~\", \"\\~\")\n    brackets =\
    \ brackets.replace(\"|\", \"\\|\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\"@\", \"\\@\")\n    brackets =\
    \ brackets.replace(\"$\", \"\\$\")\n    brackets = brackets.replace(\"%\", \"\\\
    %\")\n    brackets = brackets.replace(\"^\", \"\\^\")\n    brackets = brackets.replace(\"\
    &\", \"\\&\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\"=\", \"\\=\")\n    brackets = brackets.replace(\"+\", \"\\\
    +\")\n    brackets = brackets.replace(\"-\", \"\\-\")\n    bracket\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo17nwm0w.jl:14\nin expression starting at /tmp/tmpo17nwm0w.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk9rj6cd0.jl:68\nin expression starting at\
    \ /tmp/tmpk9rj6cd0.jl:68\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp129zyxs6.jl:14\nin expression starting at /tmp/tmp129zyxs6.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp129zyxs6.jl:14\nin expression starting at /tmp/tmp129zyxs6.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = bracket\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8bnjzq8k.jl:14\nin expression starting at /tmp/tmp8bnjzq8k.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4smq7jzz.jl:14\nin expression starting at /tmp/tmp4smq7jzz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk9rj6cd0.jl:68\nin expression starting at\
    \ /tmp/tmpk9rj6cd0.jl:68\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"[\").replace(\"\
    }\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\")\n    brackets\
    \ = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"(\", \"[\"\
    ).replace(\")\", \"]\")\n    brackets = brackets.replace(\"{\", \"[\").replace(\"\
    }\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\")\n    brackets\
    \ = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"(\", \"[\"\
    ).replace(\")\", \"]\")\n    brackets = brackets.replace(\"{\", \"[\").replace(\"\
    }\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\")\n    brackets\
    \ = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"(\", \"[\"\
    ).replace(\")\", \"]\")\n    brackets = brackets.replace(\"{\", \"[\").replace(\"\
    }\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\")\n    brackets\
    \ = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"(\", \"[\"\
    ).replace(\")\", \"]\")\n    brackets = brackets.replace(\"{\", \"[\").replace(\"\
    }\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\")\n    brackets\
    \ = brackets.replace(\"{\", \"[\").replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\").replace(\"]\", \")\")\n    brackets = brackets.replace(\"(\", \"[\"\
    ).replace(\")\", \"]\")\n    brackets = brackets.replace(\"{\", \"[\").replace(\"\
    }\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\"\
    )\n    bracket\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5icvnfg8.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5icvnfg8.jl:1\n\
    in expression starting at /tmp/tmp5icvnfg8.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7iuvfilg.jl:14\nin expression starting at /tmp/tmp7iuvfilg.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp129zyxs6.jl:14\nin expression starting at /tmp/tmp129zyxs6.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpidh17d2_.jl:14\nin expression starting at /tmp/tmpidh17d2_.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"|\", \"\\\
    |\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"?\", \"\\\
    ?\")\n    brackets = brackets.replace(\"%\", \"\\%\")\n    brackets = brackets.replace(\"\
    $\", \"\\$\")\n    brackets = brackets.replace(\"@\", \"\\@\")\n    brackets =\
    \ brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"^\", \"\\\
    ^\")\n    brackets = brackets.replace(\"&\", \"\\&\")\n    brackets = brackets.replace(\"\
    *\", \"\\*\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"|\", \"\\|\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"!\", \"\\\
    !\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"\
    %\", \"\\%\")\n    brackets = brackets.replace(\"$\", \"\\$\")\n    brackets =\
    \ brackets.replace(\"@\", \"\\@\")\n    brackets = brackets.replace(\"~\", \"\\\
    ~\")\n    brackets = brackets.replace(\"^\", \"\\^\")\n    brackets = brackets.replace(\"\
    &\", \"\\&\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpq_jswg7r.jl:14\nin expression starting at /tmp/tmpq_jswg7r.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7iuvfilg.jl:14\nin expression starting at /tmp/tmp7iuvfilg.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjyda49tk.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjyda49tk.jl:1\n\
    in expression starting at /tmp/tmpjyda49tk.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\(\")\n    brackets = brackets.replace(\"}\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\(\")\n    brackets = brackets.replace(\"\
    ]\", \"\\)\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    (\")\n    brackets = brackets.replace(\"}\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\(\")\n    brackets = brackets.replace(\"]\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\(\")\n    brackets = brackets.replace(\"\
    }\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\(\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\)\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\(\")\n    brackets = brackets.replace(\"}\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\(\")\n    brackets = brackets.replace(\"]\", \"\\\
    )\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\(\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    (\")\n    brackets = brackets.replace(\"]\", \"\\)\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\(\")\n    brackets = brackets.replace(\"}\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\(\")\n    brackets = brackets.replace(\"\
    ]\", \"\\)\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    (\")\n    brackets = brackets.replace(\"}\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\(\")\n    brackets = brackets.replace(\"]\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppvalh7ud.jl:14\nin expression starting at /tmp/tmppvalh7ud.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphgq_6ehx.jl:68\nin expression starting at\
    \ /tmp/tmphgq_6ehx.jl:68\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\"=\", \"\\=\")\n    brackets =\
    \ brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"?\", \"\\\
    ?\")\n    brackets = brackets.replace(\"%\", \"\\%\")\n    brackets = brackets.replace(\"\
    ^\", \"\\^\")\n    brackets = brackets.replace(\"&\", \"\\&\")\n    brackets =\
    \ brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"+\", \"\\\
    +\")\n    brackets = brackets.replace(\"/\", \"\\/\")\n    brackets = brackets.replace(\"\
    \\\\\", \"\\\\\\\\\")\n    brackets = brackets.replace(\"|\", \"\\|\")\n    brackets\
    \ = brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"`\", \"\
    \\`\")\n    brackets = brackets.replace(\"'\", \"\\'\")\n    brackets = brackets.replace(\"\
    \\\"\", \"\")\n    brackets = brackets.replace(\"\\\\n\", \"\")\n    brackets\
    \ = brackets.replace(\"\\\\\", \"\")\n    brackets = brackets.replace(\"\\\\u0001\"\
    , \"\")\n    brackets = brackets.replace(\"\\\\u0010\", \"\")\n    brackets =\
    \ brackets.replace(\"\\\\u0011\", \"\")\n    brackets = brackets.replace(\"\\\\\
    u0012\", \"\")\n    brackets = brackets.replace(\"\\\\u0013\", \"\")\n    brackets\
    \ = brackets.replace(\"\\\\u0014\", \"\")\n    brackets = brackets.replace(\"\\\
    \\u0015\", \"\")\n    brackets = brackets.replace(\"\\\\u0016\", \"\")\n    brackets\
    \ = brackets.replace(\"\\\\u0017\", \"\")\n    brackets = brackets.replace(\"\\\
    \\u0018\", \"\")\n    brackets = brackets.replace(\"\\\\u0019\", \"\")\n    brackets\
    \ = brackets.replace(\"\\\\u001a\", \"\")\n    brackets = brackets.replace(\"\\\
    \\u001b\", \"\")\n    brackets = brackets.replace(\"\\\\u001c\", \"\")\n    brackets\
    \ = brackets.replace(\"\\\\u001d\", \"\")\n    brackets = brackets.replace(\"\\\
    \\u001e\", \"\")\n    brackets = brackets.replace(\"\\\\u001f\", \"\")\n    brackets\
    \ = brackets.replace(\"\\\\u007f\", \"\")\n    brackets = bracket\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmps63_otqy.jl:14\nin expression starting at /tmp/tmps63_otqy.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7iuvfilg.jl:14\nin expression starting at /tmp/tmp7iuvfilg.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp79zed3gz.jl:14\nin expression starting at /tmp/tmp79zed3gz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjyda49tk.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjyda49tk.jl:1\n\
    in expression starting at /tmp/tmpjyda49tk.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4smq7jzz.jl:14\nin expression starting at /tmp/tmp4smq7jzz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"!\", \"\\\
    !\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\"=\", \"\\=\")\n    brackets = brackets.replace(\"?\", \"\\\
    ?\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"=\", \"\\\
    =\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\"=\", \"\\=\")\n    brackets = brackets.replace(\"\
    ?\", \"\\?\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    =\", \"\\=\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\"=\", \"\\=\")\n    brackets =\
    \ brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"!\", \"\\\
    !\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\"=\", \"\\=\")\n    brackets = brackets.replace(\"?\", \"\\\
    ?\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3pov4yes.jl:14\nin expression starting at /tmp/tmp3pov4yes.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp79zed3gz.jl:14\nin expression starting at /tmp/tmp79zed3gz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp129zyxs6.jl:14\nin expression starting at /tmp/tmp129zyxs6.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp129zyxs6.jl:14\nin expression starting at /tmp/tmp129zyxs6.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp129zyxs6.jl:14\nin expression starting at /tmp/tmp129zyxs6.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp79zed3gz.jl:14\nin expression starting at /tmp/tmp79zed3gz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"$\", \"\\\
    $\")\n    brackets = brackets.replace(\"%\", \"\\%\")\n    brackets = brackets.replace(\"\
    ^\", \"\\^\")\n    brackets = brackets.replace(\"&\", \"\\&\")\n    brackets =\
    \ brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"\
    ~\", \"\\~\")\n    brackets = brackets.replace(\"$\", \"\\$\")\n    brackets =\
    \ brackets.replace(\"%\", \"\\%\")\n    brackets = brackets.replace(\"^\", \"\\\
    ^\")\n    brackets = brackets.replace(\"&\", \"\\&\")\n    brackets = brackets.replace(\"\
    *\", \"\\*\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = bracket\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbx_cxl0i.jl:14\nin expression starting at /tmp/tmpbx_cxl0i.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcjmjjhbm.jl:67\nin expression starting at\
    \ /tmp/tmpcjmjjhbm.jl:67\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpi2ie1ho0.jl:14\nin expression starting at /tmp/tmpi2ie1ho0.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\",\
    \ \"\\{\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\", \"\\{\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\
    \\]\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\{\\}\")\n    brackets\
    \ = brackets.replace(\"}\", \"\\{\\}\")\n    brackets = brackets.replace(\"[\"\
    , \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\",\
    \ \"\\{\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\", \"\\{\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\
    \\]\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\{\\}\")\n    brackets\
    \ = brackets.replace(\"}\", \"\\{\\}\")\n    brackets = brackets.replace(\"[\"\
    , \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\",\
    \ \"\\{\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp20viqlwu.jl:14\nin expression starting at /tmp/tmp20viqlwu.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphr_4in_4.jl:14\nin expression starting at /tmp/tmphr_4in_4.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\",\
    \ \"\\{\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\", \"\\{\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\
    \\]\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"=\", \"\\\
    =\")\n    brackets = brackets.replace(\"+\", \"\\+\")\n    brackets = brackets.replace(\"\
    -\", \"\\-\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets =\
    \ brackets.replace(\"^\", \"\\^\")\n    brackets = brackets.replace(\"~\", \"\\\
    ~\")\n    brackets = brackets.replace(\"|\", \"\\|\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\\}\")\n    brackets = brackets.replace(\"}\", \"\\{\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\"=\", \"\\=\")\n    brackets =\
    \ brackets.replace(\"+\", \"\\+\")\n    brackets = brackets.replace(\"-\", \"\\\
    -\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"\
    ^\", \"\\^\")\n    brackets = brackets.replace(\"~\", \"\\~\")\n    brackets =\
    \ brackets.replace(\"|\", \"\\|\")\n    brackets = brackets.replace(\"!\", \"\\\
    !\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3mxurjab.jl:14\nin expression starting at /tmp/tmp3mxurjab.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm02u98ek.jl:67\nin expression starting at\
    \ /tmp/tmpm02u98ek.jl:67\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    =\", \"\\=\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"=\", \"\\\
    =\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\"=\", \"\\=\")\n    brackets =\
    \ brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    ?\", \"\\?\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\"=\", \"\\=\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"?\", \"\\\
    ?\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqdwycvzr.jl:14\nin expression starting at /tmp/tmpqdwycvzr.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8f9wvvtf.jl:68\nin expression starting at\
    \ /tmp/tmp8f9wvvtf.jl:68\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4smq7jzz.jl:14\nin expression starting at /tmp/tmp4smq7jzz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8ooo8410.jl:14\nin expression starting at /tmp/tmp8ooo8410.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjyda49tk.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjyda49tk.jl:1\n\
    in expression starting at /tmp/tmpjyda49tk.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4smq7jzz.jl:14\nin expression starting at /tmp/tmp4smq7jzz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4smq7jzz.jl:14\nin expression starting at /tmp/tmp4smq7jzz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    {\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbulin0df.jl:68\nin expression starting at\
    \ /tmp/tmpbulin0df.jl:68\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphr_4in_4.jl:14\nin expression starting at /tmp/tmphr_4in_4.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp129zyxs6.jl:14\nin expression starting at /tmp/tmp129zyxs6.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    bracket\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_jy0xl_a.jl:14\nin expression starting at /tmp/tmp_jy0xl_a.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7iuvfilg.jl:14\nin expression starting at /tmp/tmp7iuvfilg.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwjkpm3xi.jl:68\nin expression starting at\
    \ /tmp/tmpwjkpm3xi.jl:68\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpteup77_6.jl:14\nin expression starting at /tmp/tmpteup77_6.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpejtvf0gz.jl:68\nin expression starting at\
    \ /tmp/tmpejtvf0gz.jl:68\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphr_4in_4.jl:14\nin expression starting at /tmp/tmphr_4in_4.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp129zyxs6.jl:14\nin expression starting at /tmp/tmp129zyxs6.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7lw8zcr2.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7lw8zcr2.jl:1\n\
    in expression starting at /tmp/tmp7lw8zcr2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8ooo8410.jl:14\nin expression starting at /tmp/tmp8ooo8410.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\",\
    \ \"\\{\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\", \"\\{\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\
    \\]\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"|\", \"\\|\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\\}\")\n    brackets = brackets.replace(\"\
    }\", \"\\{\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets\
    \ = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"<\", \"\
    \\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    |\", \"\\|\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"\
    ?\", \"\\?\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\\}\")\n    brackets = brackets.replace(\"}\", \"\\{\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"|\", \"\\|\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\nusing Test\n\n\
    @testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") ==\
    \ true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8zttzid0.jl:14\nin expression starting at /tmp/tmp8zttzid0.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpidh17d2_.jl:14\nin expression starting at /tmp/tmpidh17d2_.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7iuvfilg.jl:14\nin expression starting at /tmp/tmp7iuvfilg.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7iuvfilg.jl:14\nin expression starting at /tmp/tmp7iuvfilg.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphr_4in_4.jl:14\nin expression starting at /tmp/tmphr_4in_4.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcjmjjhbm.jl:67\nin expression starting at\
    \ /tmp/tmpcjmjjhbm.jl:67\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7iuvfilg.jl:14\nin expression starting at /tmp/tmp7iuvfilg.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"!\", \"\\\
    !\")\n    brackets = brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"\
    @\", \"\\@\")\n    brackets = brackets.replace(\"$\", \"\\$\")\n    brackets =\
    \ brackets.replace(\"%\", \"\\%\")\n    brackets = brackets.replace(\"^\", \"\\\
    ^\")\n    brackets = brackets.replace(\"&\", \"\\&\")\n    brackets = brackets.replace(\"\
    *\", \"\\*\")\n    brackets = brackets.replace(\"+\", \"\\+\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    ?\", \"\\?\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"@\", \"\\\
    @\")\n    brackets = brackets.replace(\"$\", \"\\$\")\n    brackets = brackets.replace(\"\
    %\", \"\\%\")\n    brackets = brackets.replace(\"^\", \"\\^\")\n    brackets =\
    \ brackets.replace(\"&\", \"\\&\")\n    brackets = brackets.replace(\"*\", \"\\\
    *\")\n    brackets = brackets.replace(\"+\", \"\\+\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"?\", \"\\\
    ?\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = \nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp62kigk3i.jl:14\nin expression starting at /tmp/tmp62kigk3i.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxcc5doh8.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxcc5doh8.jl:1\n\
    in expression starting at /tmp/tmpxcc5doh8.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpe_p26utb.jl:14\nin expression starting at /tmp/tmpe_p26utb.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7iuvfilg.jl:14\nin expression starting at /tmp/tmp7iuvfilg.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = bracket\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpin9b_r70.jl:14\nin expression starting at /tmp/tmpin9b_r70.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp129zyxs6.jl:14\nin expression starting at /tmp/tmp129zyxs6.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"=\", \"=\")\n    brackets = brackets.replace(\"\
    +\", \"+\")\n    brackets = brackets.replace(\"-\", \"_\")\n    brackets = brackets.replace(\"\
    *\", \"*\")\n    brackets = brackets.replace(\"?\", \"?\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    =\", \"=\")\n    brackets = brackets.replace(\"+\", \"+\")\n    brackets = brackets.replace(\"\
    -\", \"_\")\n    brackets = brackets.replace(\"*\", \"*\")\n    brackets = brackets.replace(\"\
    ?\", \"?\")\n    brackets = brackets.replace(\"!\", \"!\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\"=\", \"=\")\n    brackets = brackets.replace(\"\
    +\", \"+\")\n    brackets = brackets.replace(\"-\", \"_\")\n    brackets = brackets.replace(\"\
    *\", \"*\")\n    brackets = brackets.replace(\"?\", \"?\")\n    brackets = brackets.replace(\"\
    !\", \"!\")\n    brackets = brackets.replace(\",\", \",\")\n    brackets = brackets.replace(\"\
    ;\", \";\")\n    brackets = brackets.replace(\":\", \":\")\n    brackets = brackets.replace(\"\
    =\", \"=\")\n    brackets = brackets.replace(\"+\", \"+\")\n    brackets = brackets.replace(\"\
    -\", \"_\")\n    brackets = brackets.replace(\"*\", \"*\")\n    brackets = brackets.replace(\"\
    ?\", \"?\")\n    brackets = brackets.replace(\"!\", \"!\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"function\" at /tmp/tmpdnlsb2hs.jl:13 expected\
    \ \"end\", got \"Test\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdnlsb2hs.jl:64\n\
    in expression starting at /tmp/tmpdnlsb2hs.jl:64\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\",\
    \ \"\\{\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\"=\", \"\\=\")\n    brackets =\
    \ brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    ?\", \"\\?\")\n    brackets = brackets.replace(\"~\", \"\\~\")\n    brackets =\
    \ brackets.replace(\"|\", \"\\|\")\n    brackets = brackets.replace(\"\\\"\",\
    \ \"\\\"\")\n    brackets = brackets.replace(\"'\", \"\\'\")\n    brackets = brackets.replace(\"\
    `\", \"\\`\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\"=\", \"\\=\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"?\", \"\\\
    ?\")\n    brackets = brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"\
    |\", \"\\|\")\n    brackets = brackets.replace(\"\\\"\", \"\\\"\")\n    brackets\
    \ = brackets.replace(\"'\", \"\\'\")\n    brackets = brackets.replace(\"`\", \"\
    \\`\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\"=\", \"\\=\")\n    brackets = brackets.replace(\"!\", \"\\\
    !\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"|\", \"\\\
    |\")\n    brackets = brackets.replace(\"\\\"\", \"\\\"\")\n    brackets = brackets.replace(\"\
    '\", \"\\'\")\n    brackets = brackets.replace(\"`\", \"\\`\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg5vb9s9l.jl:14\nin expression starting at /tmp/tmpg5vb9s9l.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp129zyxs6.jl:14\nin expression starting at /tmp/tmp129zyxs6.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4smq7jzz.jl:14\nin expression starting at /tmp/tmp4smq7jzz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpidh17d2_.jl:14\nin expression starting at /tmp/tmpidh17d2_.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4smq7jzz.jl:14\nin expression starting at /tmp/tmp4smq7jzz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphr_4in_4.jl:14\nin expression starting at /tmp/tmphr_4in_4.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcjmjjhbm.jl:67\nin expression starting at\
    \ /tmp/tmpcjmjjhbm.jl:67\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7iuvfilg.jl:14\nin expression starting at /tmp/tmp7iuvfilg.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"|\", \"\\|\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"!\", \"\\\
    !\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"|\", \"\\|\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    |\", \"\\|\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"\
    ?\", \"\\?\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"|\", \"\\\
    |\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    ;\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvo7ngfvx.jl:14\nin expression starting at /tmp/tmpvo7ngfvx.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"~\", \"\\\
    ~\")\n    brackets = brackets.replace(\"|\", \"\\|\")\n    brackets = brackets.replace(\"\
    ^\", \"\\^\")\n    brackets = brackets.replace(\"&\", \"\\&\")\n    brackets =\
    \ brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"+\", \"\\\
    +\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\"=\", \"\\=\")\n    brackets =\
    \ brackets.replace(\"|=\", \"\\|=\")\n    brackets = brackets.replace(\"^=\",\
    \ \"\\^=\")\n    brackets = brackets.replace(\"&=\", \"\\&=\")\n    brackets =\
    \ brackets.replace(\"*=\", \"\\*=\")\n    brackets = brackets.replace(\"+=\",\
    \ \"\\+=\")\n    brackets = brackets.replace(\"?=\", \"\\?=\")\n    brackets =\
    \ brackets.replace(\"!=\", \"\\!=\")\n    brackets = brackets.replace(\"<=\",\
    \ \"\\<=\")\n    brackets = brackets.replace(\">=\", \"\\>=\")\n    brackets =\
    \ brackets.replace(\"~=\", \"\\~=\")\n    brackets = brackets.replace(\"|=\",\
    \ \"\\|=\")\n    brackets = brackets.replace(\"^=\", \"\\^=\")\n    brackets =\
    \ brackets.replace(\"&=\", \"\\&=\")\n    brackets = brackets.replace(\"*=\",\
    \ \"\\*=\")\n    brackets = brackets.replace(\"+=\", \"\\+=\")\n    brackets =\
    \ brackets.replace(\"?=\", \"\\?=\")\n    brackets = brackets.replace(\"!=\",\
    \ \"\\!=\")\n    brackets = brackets.replace(\"<=\", \"\\<=\")\n    brackets =\
    \ brackets.replace(\">=\", \"\\>=\")\n    brackets = brackets.replace(\"~=\",\
    \ \"\\~=\")\n    brackets = brackets.replace(\"|=\", \"\\|=\")\n    brackets =\
    \ brackets.replace(\"^=\", \"\\^=\")\n    brackets = brackets.replace(\"&=\",\
    \ \"\\&=\")\n    brackets = brackets.replace(\"*=\", \"\\*=\")\n    brackets =\
    \ brackets.replace(\"+=\", \"\\+=\")\n    brackets = brackets.replace(\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpag6uf2_g.jl:14\nin expression starting at /tmp/tmpag6uf2_g.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjyda49tk.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjyda49tk.jl:1\n\
    in expression starting at /tmp/tmpjyda49tk.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"\\\\\", \"\\\\\\\\\")\n    brackets\
    \ = brackets.replace(\"\\\"\", \"\\\\\\\"\")\n    brackets = brackets.replace(\"\
    \\n\", \"\\\\n\")\n    brackets = brackets.replace(\"\\t\", \"\\\\t\")\n    brackets\
    \ = brackets.replace(\"\\r\", \"\\\\r\")\n    brackets = brackets.replace(\"'\"\
    , \"\\\\'\")\n    brackets = brackets.replace(\"\\\"\", \"\\\\\\\"\")\n    brackets\
    \ = brackets.replace(\"\\n\", \"\\\\n\")\n    brackets = brackets.replace(\"\\\
    t\", \"\\\\t\")\n    brackets = brackets.replace(\"\\r\", \"\\\\r\")\n    brackets\
    \ = brackets.replace(\"'\", \"\\\\'\")\n    brackets = brackets.replace(\"\\\"\
    \", \"\\\\\\\"\")\n    brackets = brackets.replace(\"\\n\", \"\\\\n\")\n    brackets\
    \ = brackets.replace(\"\\t\", \"\\\\t\")\n    brackets = brackets.replace(\"\\\
    r\", \"\\\\r\")\n    brackets = brackets.replace(\"'\", \"\\\\'\")\n    brackets\
    \ = brackets.replace(\"\\\"\", \"\\\\\\\"\")\n    brackets = brackets.replace(\"\
    \\n\", \"\\\\n\")\n    brackets = brackets.replace(\"\\t\", \"\\\\t\")\n    brackets\
    \ = brackets.replace(\"\\r\", \"\\\\r\")\n    brackets = brackets.replace(\"'\"\
    , \"\\\\'\")\n    brackets = brackets.replace(\"\\\"\", \"\\\\\\\"\")\n    brackets\
    \ = brackets.replace(\"\\n\", \"\\\\n\")\n    brackets = brackets.replace(\"\\\
    t\", \"\\\\t\")\n    brackets = brackets.replace(\"\\r\", \"\\\\r\")\n    brackets\
    \ = brackets.replace(\"'\", \"\\\\'\")\n    brackets = brackets.replace(\"\\\"\
    \", \"\\\\\\\"\")\n    brackets = brackets.replace(\"\\n\", \"\\\\n\")\n    brackets\
    \ = brackets.replace(\"\\t\", \"\\\\t\")\n    brackets = brackets.replace(\"\\\
    r\", \"\\\\r\")\n    brackets = brackets.replace(\"'\", \"\\\\'\")\n    brackets\
    \ = brackets.replace(\"\\\"\", \"\\\\\\\"\")\n    brackets = brackets.replace(\"\
    \\n\", \"\\\\n\")\n    brackets = brackets.replace(\"\\t\", \"\\\\t\")\n    brackets\
    \ = brackets.replace(\"\\r\", \"\\\\r\")\n    brackets = brackets.replace(\"'\"\
    , \"\\\\'\")\n    brackets = brackets.replace(\"\\\"\", \"\\\\\\\"\")\n    brackets\
    \ = brackets.replace(\"\\n\", \"\\\\n\")\n    brackets = brackets.replace(\"\\\
    t\", \"\\\\t\")\n    brackets = brackets.replace(\"\\r\", \"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqh4ehn2b.jl:14\nin expression starting at /tmp/tmpqh4ehn2b.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp129zyxs6.jl:14\nin expression starting at /tmp/tmp129zyxs6.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphr_4in_4.jl:14\nin expression starting at /tmp/tmphr_4in_4.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4smq7jzz.jl:14\nin expression starting at /tmp/tmp4smq7jzz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7iuvfilg.jl:14\nin expression starting at /tmp/tmp7iuvfilg.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmu9ugn16.jl:68\nin expression starting at\
    \ /tmp/tmpmu9ugn16.jl:68\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphr_4in_4.jl:14\nin expression starting at /tmp/tmphr_4in_4.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjyda49tk.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjyda49tk.jl:1\n\
    in expression starting at /tmp/tmpjyda49tk.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp972rx0t2.jl:68\nin expression starting at\
    \ /tmp/tmp972rx0t2.jl:68\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4smq7jzz.jl:14\nin expression starting at /tmp/tmp4smq7jzz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp972rx0t2.jl:68\nin expression starting at\
    \ /tmp/tmp972rx0t2.jl:68\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpi2ie1ho0.jl:14\nin expression starting at /tmp/tmpi2ie1ho0.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp129zyxs6.jl:14\nin expression starting at /tmp/tmp129zyxs6.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7iuvfilg.jl:14\nin expression starting at /tmp/tmp7iuvfilg.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphr_4in_4.jl:14\nin expression starting at /tmp/tmphr_4in_4.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm02u98ek.jl:67\nin expression starting at\
    \ /tmp/tmpm02u98ek.jl:67\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    !\", \"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqaq3cml8.jl:14\nin expression starting at /tmp/tmpqaq3cml8.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp129zyxs6.jl:14\nin expression starting at /tmp/tmp129zyxs6.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpidh17d2_.jl:14\nin expression starting at /tmp/tmpidh17d2_.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphr_4in_4.jl:14\nin expression starting at /tmp/tmphr_4in_4.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4smq7jzz.jl:14\nin expression starting at /tmp/tmp4smq7jzz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk9rj6cd0.jl:68\nin expression starting at\
    \ /tmp/tmpk9rj6cd0.jl:68\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcjmjjhbm.jl:67\nin expression starting at\
    \ /tmp/tmpcjmjjhbm.jl:67\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpq7sjdr_j.jl:14\nin expression starting at /tmp/tmpq7sjdr_j.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjyda49tk.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjyda49tk.jl:1\n\
    in expression starting at /tmp/tmpjyda49tk.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphr_4in_4.jl:14\nin expression starting at /tmp/tmphr_4in_4.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"~\", \"\\\
    ~\")\n    brackets = brackets.replace(\"|\", \"\\|\")\n    brackets = brackets.replace(\"\
    ^\", \"\\^\")\n    brackets = brackets.replace(\"&\", \"\\&\")\n    brackets =\
    \ brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"+\", \"\\\
    +\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4lxr_099.jl:14\nin expression starting at /tmp/tmp4lxr_099.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk9rj6cd0.jl:68\nin expression starting at\
    \ /tmp/tmpk9rj6cd0.jl:68\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjyda49tk.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjyda49tk.jl:1\n\
    in expression starting at /tmp/tmpjyda49tk.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcjmjjhbm.jl:67\nin expression starting at\
    \ /tmp/tmpcjmjjhbm.jl:67\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp129zyxs6.jl:14\nin expression starting at /tmp/tmp129zyxs6.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk9rj6cd0.jl:68\nin expression starting at\
    \ /tmp/tmpk9rj6cd0.jl:68\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4smq7jzz.jl:14\nin expression starting at /tmp/tmp4smq7jzz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjyda49tk.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjyda49tk.jl:1\n\
    in expression starting at /tmp/tmpjyda49tk.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\(\")\n    brackets = brackets.replace(\"}\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\(\")\n    brackets = brackets.replace(\"\
    ]\", \"\\)\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    (\")\n    brackets = brackets.replace(\"}\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\(\")\n    brackets = brackets.replace(\"]\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\(\")\n    brackets = brackets.replace(\"\
    }\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\(\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\)\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\(\")\n    brackets = brackets.replace(\"}\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\(\")\n    brackets = brackets.replace(\"]\", \"\\\
    )\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\(\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    (\")\n    brackets = brackets.replace(\"]\", \"\\)\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\(\")\n    brackets = brackets.replace(\"}\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\(\")\n    brackets = brackets.replace(\"\
    ]\", \"\\)\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    (\")\n    brackets = brackets.replace(\"}\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\(\")\n    brackets = brackets.replace(\"]\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppvalh7ud.jl:14\nin expression starting at /tmp/tmppvalh7ud.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcjmjjhbm.jl:67\nin expression starting at\
    \ /tmp/tmpcjmjjhbm.jl:67\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpidh17d2_.jl:14\nin expression starting at /tmp/tmpidh17d2_.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\"=\", \"\\=\")\n    brackets =\
    \ brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"~\", \"\\\
    ~\")\n    brackets = brackets.replace(\"$\", \"\\$\")\n    brackets = brackets.replace(\"\
    %\", \"\\%\")\n    brackets = brackets.replace(\"^\", \"\\^\")\n    brackets =\
    \ brackets.replace(\"&\", \"\\&\")\n    brackets = brackets.replace(\"*\", \"\\\
    *\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    =\", \"\\=\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"$\", \"\\\
    $\")\n    brackets = brackets.replace(\"%\", \"\\%\")\n    brackets = brackets.replace(\"\
    ^\", \"\\^\")\n    brackets = brackets.replace(\"&\", \"\\&\")\n    brackets =\
    \ brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = \nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxvnvtyqq.jl:14\nin expression starting at /tmp/tmpxvnvtyqq.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7iuvfilg.jl:14\nin expression starting at /tmp/tmp7iuvfilg.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"\
    ?\", \"\\?\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"!\", \"\\\
    !\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"?\", \"\\\
    ?\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"\
    ?\", \"\\?\")\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1rkv46xf.jl:14\nin expression starting at /tmp/tmp1rkv46xf.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpc1mciam7.jl:14\nin expression starting at /tmp/tmpc1mciam7.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjyda49tk.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjyda49tk.jl:1\n\
    in expression starting at /tmp/tmpjyda49tk.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphr_4in_4.jl:14\nin expression starting at /tmp/tmphr_4in_4.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    =\", \"=\")\n    brackets = brackets.replace(\"+\", \"+\")\n    brackets = brackets.replace(\"\
    -\", \"_\")\n    brackets = brackets.replace(\"*\", \"*\")\n    brackets = brackets.replace(\"\
    ?\", \"?\")\n    brackets = brackets.replace(\"!\", \"!\")\n    brackets = brackets.replace(\"\
    <\", \"<\")\n    brackets = brackets.replace(\">\", \">\")\n    brackets = brackets.replace(\"\
    |\", \"|\")\n    brackets = brackets.replace(\"~\", \"~\")\n    brackets = brackets.replace(\"\
    ^\", \"^\")\n    brackets = brackets.replace(\"%\", \"%\")\n    brackets = brackets.replace(\"\
    &\", \"&\")\n    brackets = brackets.replace(\"*\", \"*\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    ,\", \",\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    :\", \":\")\n    brackets = brackets.replace(\";\", \";\")\n    brackets = brackets.replace(\"\
    =\", \"=\")\n    brackets = brackets.replace(\"+\", \"+\")\n    brackets = brackets.replace(\"\
    -\", \"_\")\n    brackets = brackets.replace(\"*\", \"*\")\n    brackets = brackets.replace(\"\
    ?\", \"?\")\n    brackets = brackets.replace(\"!\", \"!\")\n    brackets = brackets.replace(\"\
    <\", \"<\")\n    brackets = brackets.replace(\">\", \">\")\n    brackets = brackets.replace(\"\
    |\", \"|\")\n    brackets = brackets.replace(\"~\", \"~\")\n    brackets = brackets.replace(\"\
    ^\", \"^\")\n    brackets = brackets.replace(\"%\", \"%\")\n    brackets = \n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpae1w09r6.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpae1w09r6.jl:1\n\
    in expression starting at /tmp/tmpae1w09r6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\",\
    \ \"\\{\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\", \"\\{\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\
    \\]\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"|\", \"\\|\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\"%\", \"\\%\")\n    brackets = brackets.replace(\"$\", \"\\\
    $\")\n    brackets = brackets.replace(\"@\", \"\\@\")\n    brackets = brackets.replace(\"\
    ~\", \"\\~\")\n    brackets = brackets.replace(\"^\", \"\\^\")\n    brackets =\
    \ brackets.replace(\"&\", \"\\&\")\n    brackets = brackets.replace(\"*\", \"\\\
    *\")\n    brackets = brackets.replace(\"+\", \"\\+\")\n    brackets = brackets.replace(\"\
    =\", \"\\=\")\n    brackets = brackets.replace(\"|\", \"\\|\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\"%\", \"\\%\")\n    brackets = brackets.replace(\"$\", \"\\\
    $\")\n    brackets = brackets.replace(\"@\", \"\\@\")\n    brackets = brackets.replace(\"\
    ~\", \"\\~\")\n    brackets = brackets.replace(\"^\", \"\\^\")\n    brackets =\
    \ brackets.replace(\"&\", \"\\&\")\n    brackets = brackets.replace(\"*\", \"\\\
    *\")\n    brackets = brackets.replace(\"+\", \"\\+\")\n    brackets = brackets.replace(\"\
    =\", \"\\=\")\n    brackets = brackets.replace(\"|\", \"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcvgleh46.jl:14\nin expression starting at /tmp/tmpcvgleh46.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjyda49tk.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjyda49tk.jl:1\n\
    in expression starting at /tmp/tmpjyda49tk.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7iuvfilg.jl:14\nin expression starting at /tmp/tmp7iuvfilg.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp129zyxs6.jl:14\nin expression starting at /tmp/tmp129zyxs6.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjyda49tk.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjyda49tk.jl:1\n\
    in expression starting at /tmp/tmpjyda49tk.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcjmjjhbm.jl:67\nin expression starting at\
    \ /tmp/tmpcjmjjhbm.jl:67\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8f9wvvtf.jl:68\nin expression starting at\
    \ /tmp/tmp8f9wvvtf.jl:68\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\(\")\n    brackets = brackets.replace(\"}\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    (\")\n    brackets = brackets.replace(\"}\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\(\")\n    brackets = brackets.replace(\"\
    }\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\(\")\n    brackets = brackets.replace(\"}\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\(\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\(\")\n    brackets = brackets.replace(\"}\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    (\")\n    brackets = brackets.replace(\"}\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\(\")\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqec7d_3y.jl:14\nin expression starting at /tmp/tmpqec7d_3y.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp903qwo84.jl:68\nin expression starting at\
    \ /tmp/tmp903qwo84.jl:68\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4smq7jzz.jl:14\nin expression starting at /tmp/tmp4smq7jzz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp972rx0t2.jl:68\nin expression starting at\
    \ /tmp/tmp972rx0t2.jl:68\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp972rx0t2.jl:68\nin expression starting at\
    \ /tmp/tmp972rx0t2.jl:68\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4smq7jzz.jl:14\nin expression starting at /tmp/tmp4smq7jzz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\",\
    \ \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n\
    \    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n   \
    \ brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets\
    \ = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\",\
    \ \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\",\
    \ \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n\
    \    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n   \
    \ brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\",\
    \ \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\").replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\",\
    \ \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n\
    \    brackets = brackets.replace(\"(\", \"\\(\").replace(\")\", \"\\)\")\n   \
    \ brackets = brackets.replace(\"[\", \"\\[\").replace(\"]\", \"\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\{\").replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\").replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\",\
    \ \"\\[\").replace(\"]\", \"\\]\")\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7iuvfilg.jl:14\nin expression starting at /tmp/tmp7iuvfilg.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxvp2n0m1.jl:14\nin expression starting at /tmp/tmpxvp2n0m1.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    !\", \"\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcbkwvm_s.jl:14\nin expression starting at /tmp/tmpcbkwvm_s.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"\\\\\", \"\\\\\\\\\")\n    brackets\
    \ = brackets.replace(\"\\\"\", \"\\\\\\\"\")\n    brackets = brackets.replace(\"\
    \\n\", \"\\\\n\")\n    brackets = brackets.replace(\"\\t\", \"\\\\t\")\n    brackets\
    \ = brackets.replace(\"\\r\", \"\\\\r\")\n    brackets = brackets.replace(\"'\"\
    , \"\\\\'\")\n    brackets = brackets.replace(\"`\", \"\\\\`\")\n    brackets\
    \ = brackets.replace(\"~\", \"\\\\~\")\n    brackets = brackets.replace(\"^\"\
    , \"\\\\^\")\n    brackets = brackets.replace(\"$\", \"\\\\$\")\n    brackets\
    \ = brackets.replace(\"&\", \"\\\\&\")\n    brackets = brackets.replace(\"*\"\
    , \"\\\\*\")\n    brackets = brackets.replace(\"+\", \"\\\\+\")\n    brackets\
    \ = brackets.replace(\"-\", \"\\\\-\")\n    brackets = brackets.replace(\"=\"\
    , \"\\\\=\")\n    brackets = brackets.replace(\"<\", \"\\\\<\")\n    brackets\
    \ = brackets.replace(\">\", \"\\\\>\")\n    brackets = brackets.replace(\"|\"\
    , \"\\\\|\")\n    brackets = brackets.replace(\",\", \"\\\\,\")\n    brackets\
    \ = brackets.replace(\":\", \"\\\\:\")\n    brackets = brackets.replace(\";\"\
    , \"\\\\;\")\n    brackets = brackets.replace(\"?\", \"\\\\?\")\n    brackets\
    \ = brackets.replace(\"@\", \"\\\\@\")\n    brackets = brackets.replace(\"[\"\
    , \"\\\\[\")\n    brackets = brackets.replace(\"]\", \"\\\\]\")\n    brackets\
    \ = brackets.replace(\"{\", \"\\\\{\")\n    brackets = brackets.replace(\"}\"\
    , \"\\\\}\")\n    brackets = brackets.replace(\"\\\\\", \"\\\\\\\\\")\n    brackets\
    \ = brackets.replace(\"\\\"\", \"\\\\\\\"\")\n    brackets = brackets.replace(\"\
    \\n\", \"\\\\n\")\n    brackets = brackets.replace(\"\\t\", \"\\\\t\")\n    brackets\
    \ = brackets.replace(\"\\r\", \"\\\\r\")\n    brackets = brackets.replace(\"'\"\
    , \"\\\\'\")\n    brackets = brackets.replace(\"`\", \"\\\\`\")\n    brackets\
    \ = brackets.replace(\"~\", \"\\\\~\")\n    brackets = brackets.replace(\"^\"\
    , \"\\\\^\")\n    brackets = brackets.replace(\"$\", \"\\\\$\")\n    brackets\
    \ = brackets.replace(\"&\", \"\\\\&\")\n    brackets = brackets.replace(\"*\"\
    , \"\\\\*\")\n    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzob5f0yp.jl:14\nin expression starting at /tmp/tmpzob5f0yp.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\",\
    \ \"\\{\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    |\", \"\\|\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\\}\")\n    brackets = brackets.replace(\"}\", \"\\{\\}\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"|\", \"\\|\")\n    brackets = brackets.replace(\"\
    ,\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\",\
    \ \"\\{\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    |\", \"\\|\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3l2t22fl.jl:14\nin expression starting at /tmp/tmp3l2t22fl.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"[\")\n    brackets = brackets.replace(\"]\", \"]\")\n    brackets = brackets.replace(\"\
    {\", \"{\")\n    brackets = brackets.replace(\"}\", \"}\")\n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjyda49tk.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjyda49tk.jl:1\n\
    in expression starting at /tmp/tmpjyda49tk.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\",\
    \ \"\\{\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\", \"\\{\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\
    \\]\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\{\\}\")\n    brackets\
    \ = brackets.replace(\"}\", \"\\{\\}\")\n    brackets = brackets.replace(\"[\"\
    , \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\",\
    \ \"\\{\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\", \"\\{\\}\")\n    brackets\
    \ = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\
    \\]\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\{\\}\")\n    brackets\
    \ = brackets.replace(\"}\", \"\\{\\}\")\n    brackets = brackets.replace(\"[\"\
    , \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\\}\")\n    brackets = brackets.replace(\"}\",\
    \ \"\\{\\}\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\\}\")\n\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp20viqlwu.jl:14\nin expression starting at /tmp/tmp20viqlwu.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\")\n    brackets\
    \ = brackets.replace(\"{\", \"(\").replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\").replace(\")\", \"]\")\n    brackets = brackets.replace(\"[\", \"(\"\
    ).replace(\"]\", \")\")\n    brackets = brackets.replace(\"{\", \"(\").replace(\"\
    }\", \")\")\n    brackets = brackets.replace(\"(\", \"[\").replace(\")\", \"]\"\
    )\n    brackets = brackets.replace(\"[\", \"(\").replace(\"]\", \")\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfbslmhk3.jl:54\nin expression starting at\
    \ /tmp/tmpfbslmhk3.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp79zed3gz.jl:14\nin expression starting at /tmp/tmp79zed3gz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"(\")\n    brackets = brackets.replace(\")\", \")\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"{\")\n    brackets = brackets.replace(\"]\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"[\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    (\", \"{\")\n    brackets = brackets.replace(\")\", \"}\")\n    brackets = brackets.replace(\"\
    {\", \"(\")\n    brackets = brackets.replace(\"}\", \"]\")\n    brackets = brackets.replace(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp972rx0t2.jl:68\nin expression starting at\
    \ /tmp/tmp972rx0t2.jl:68\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\(\")\n    brackets = brackets.replace(\"}\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"{\", \"\\\
    (\")\n    brackets = brackets.replace(\"}\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\\\
    ;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\"=\", \"\\=\")\n    brackets =\
    \ brackets.replace(\"+\", \"\\+\")\n    brackets = brackets.replace(\"-\", \"\\\
    -\")\n    brackets = brackets.replace(\"*\", \"\\*\")\n    brackets = brackets.replace(\"\
    ^\", \"\\^\")\n    brackets = brackets.replace(\"~\", \"\\~\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"{\", \"\\(\")\n    brackets = brackets.replace(\"\
    }\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    :\", \"\\:\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets =\
    \ brackets.replace(\"=\", \"\\=\")\n    brackets = brackets.replace(\"+\", \"\\\
    +\")\n    brackets = brackets.replace(\"-\", \"\\-\")\n    brackets = brackets.replace(\"\
    *\", \"\\*\")\n    brackets = brackets.replace(\"^\", \"\\^\")\n    brackets =\
    \ brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    {\", \"\\(\")\n    brackets = brackets.replace(\"}\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpugmbj9ym.jl:14\nin expression starting at /tmp/tmpugmbj9ym.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\"\
    >\", \"\\>\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\\
    <\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"<\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\\
    >\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpi2ie1ho0.jl:14\nin expression starting at /tmp/tmpi2ie1ho0.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4smq7jzz.jl:14\nin expression starting at /tmp/tmp4smq7jzz.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = bracket\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphr_4in_4.jl:14\nin expression starting at /tmp/tmphr_4in_4.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"\\\\\", \"\\\\\\\\\")\n    brackets\
    \ = brackets.replace(\"\\\"\", \"\\\\\\\"\")\n    brackets = brackets.replace(\"\
    \\n\", \"\\\\n\")\n    brackets = brackets.replace(\"\\t\", \"\\\\t\")\n    brackets\
    \ = brackets.replace(\"\\r\", \"\\\\r\")\n    brackets = brackets.replace(\"'\"\
    , \"\\\\'\")\n    brackets = brackets.replace(\",\", \"\\,\")\n    brackets =\
    \ brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"\
    ?\", \"\\?\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets =\
    \ brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\\
    [\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"\
    {\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets =\
    \ brackets.replace(\"\\\\\", \"\\\\\\\\\")\n    brackets = brackets.replace(\"\
    \\\"\", \"\\\\\\\"\")\n    brackets = brackets.replace(\"\\n\", \"\\\\n\")\n \
    \   brackets = brackets.replace(\"\\t\", \"\\\\t\")\n    brackets = brackets.replace(\"\
    \\r\", \"\\\\r\")\n    brackets = brackets.replace(\"'\", \"\\\\'\")\n    brackets\
    \ = brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\";\", \"\
    \\;\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    !\", \"\\!\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\\
    )\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"\
    ]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets =\
    \ brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\\\\\",\
    \ \"\\\\\\\\\")\n    brackets = brackets.replace(\"\\\"\", \"\\\\\\\"\")\n   \
    \ brackets = brackets.replace(\"\\n\", \"\\\\n\")\n    brackets = brackets.replace(\"\
    \\t\", \"\\\\t\")\n    brackets = brackets.replace(\"\\r\", \"\\\\r\")\n    brackets\
    \ = brackets.replace(\"'\", \"\\\\\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp26qr1aku.jl:14\nin expression starting at /tmp/tmp26qr1aku.jl:14\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\", \")\")\n    brackets = brackets.replace(\"\
    (\", \"[\")\n    brackets = brackets.replace(\")\", \"]\")\n    brackets = brackets.replace(\"\
    [\", \"(\")\n    brackets = brackets.replace(\"]\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcjmjjhbm.jl:67\nin expression starting at\
    \ /tmp/tmpcjmjjhbm.jl:67\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return true if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    false\n    >>> correct_bracketing(\"()\")\n    true\n    >>> correct_bracketing(\"\
    (()())\")\n    true\n    >>> correct_bracketing(\")(()\")\n    false\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    brackets = brackets.replace(\"\
    (\", \"\\(\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets =\
    \ brackets.replace(\"[\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\\
    ]\")\n    brackets = brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"\
    }\", \"\\}\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets =\
    \ brackets.replace(\">\", \"\\>\")\n    brackets = brackets.replace(\"~\", \"\\\
    ~\")\n    brackets = brackets.replace(\"|\", \"\\|\")\n    brackets = brackets.replace(\"\
    ^\", \"\\^\")\n    brackets = brackets.replace(\"&\", \"\\&\")\n    brackets =\
    \ brackets.replace(\"+\", \"\\+\")\n    brackets = brackets.replace(\",\", \"\\\
    ,\")\n    brackets = brackets.replace(\":\", \"\\:\")\n    brackets = brackets.replace(\"\
    ;\", \"\\;\")\n    brackets = brackets.replace(\"?\", \"\\?\")\n    brackets =\
    \ brackets.replace(\"!\", \"\\!\")\n    brackets = brackets.replace(\"=\", \"\\\
    =\")\n    brackets = brackets.replace(\"(\", \"\\(\")\n    brackets = brackets.replace(\"\
    )\", \"\\)\")\n    brackets = brackets.replace(\"[\", \"\\[\")\n    brackets =\
    \ brackets.replace(\"]\", \"\\]\")\n    brackets = brackets.replace(\"{\", \"\\\
    {\")\n    brackets = brackets.replace(\"}\", \"\\}\")\n    brackets = brackets.replace(\"\
    <\", \"\\<\")\n    brackets = brackets.replace(\">\", \"\\>\")\n    brackets =\
    \ brackets.replace(\"~\", \"\\~\")\n    brackets = brackets.replace(\"|\", \"\\\
    |\")\n    brackets = brackets.replace(\"^\", \"\\^\")\n    brackets = brackets.replace(\"\
    &\", \"\\&\")\n    brackets = brackets.replace(\"+\", \"\\+\")\n    brackets =\
    \ brackets.replace(\",\", \"\\,\")\n    brackets = brackets.replace(\":\", \"\\\
    :\")\n    brackets = brackets.replace(\";\", \"\\;\")\n    brackets = brackets.replace(\"\
    ?\", \"\\?\")\n    brackets = brackets.replace(\"!\", \"\\!\")\n    brackets =\
    \ brackets.replace(\"=\", \"\\=\")\n    brackets = brackets.replace(\"(\", \"\\\
    (\")\n    brackets = brackets.replace(\")\", \"\\)\")\n    brackets = brackets.replace(\"\
    [\", \"\\[\")\n    brackets = brackets.replace(\"]\", \"\\]\")\n    brackets =\
    \ brackets.replace(\"{\", \"\\{\")\n    brackets = brackets.replace(\"}\", \"\\\
    }\")\n    brackets = brackets.replace(\"<\", \"\\<\")\n    brackets = \nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpuptxllv5.jl:14\nin expression starting at /tmp/tmpuptxllv5.jl:14\n"
  stdout: ''
