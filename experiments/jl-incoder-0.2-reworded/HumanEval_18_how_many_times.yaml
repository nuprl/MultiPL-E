name: HumanEval_18_how_many_times
language: jl
prompt: "\"\"\" Find how many times a given substring can be found in the original\
  \ string. Count overlaping cases.\n    >>> how_many_times(\"\", \"a\")\n    0\n\
  \    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"aaaa\"\
  , \"aa\")\n    3\n    \"\"\"\nfunction how_many_times(string::String, substring::String)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = how_many_times;\n\t@test(candidate(\"\
  \", \"x\") == 0)\n\t@test(candidate(\"xyxyxyx\", \"x\") == 4)\n\t@test(candidate(\"\
  cacacacac\", \"cac\") == 4)\n\t@test(candidate(\"john doe\", \"john\") == 1)\nend\n"
completions: ["    if string == \"\" || substring == \"\"\n        return 0\n    \n\
    \    len_string = length(string)\n    len_substring = length(substring)\n    \n\
    \    if len_string == 0 || len_substring == 0\n        return 0\n    \n    if\
    \ string[0] == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    \n    if string[len_string] == substring[len_substring]\n        return 1\
    \ + how_many_times(string[len_string+1:], substring[len_substring+1:])\n    \n\
    \    if string[len_string] == substring[0]\n        return 1 + how_many_times(string[len_string+1:],\
    \ substring[1:])\n    \n    if string[0] == substring[len_substring]\n       \
    \ return 1 + how_many_times(string[1:], substring[len_substring+1:])\n    \n \
    \   if string[len_string] == substring[0]\n        return 1 + how_many_times(string[len_string+1:],\
    \ substring[1:])\n    \n    return how_many_times(string[1:], substring) + how_many_times(string[len_string+1:],\
    \ substring)\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"\
    a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of times a substring appears\
    \ in a given string.", "    if string == \"\" || substring == \"\"\n        return\
    \ 0\n    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return 1 + how_many_times(string[1:], substring)\n\
    end\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.3>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.3>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and a substring and returns the number of times the substring\
    \ appears in the string. \nFor example, how_many_times(\"aaa\", \"a\") should\
    \ return 3.\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string. \nFor example, how_many_times(\"\
    aaa\", \"a\") should return 3.\nWrite a function that takes a string and a substring\
    \ and returns the number of times the substring appears in the string. \nFor example,\
    \ how_many_times(\"aaa\", \"a\") should return 3.\nWrite a function that takes\
    \ a string and a substring and returns the number of times the substring appears\
    \ in the string. \nFor example, how_many_times(\"aaa\", \"a\") should return 3.\n\
    Write a function that takes a string and a substring and returns the number of\
    \ times the substring appears in the string. \nFor example, how_many_times(\"\
    aaa\", \"a\") should return 3.\nWrite a function that takes a string and a substring\
    \ and returns the number of times the substring appears in the string. \nFor example,\
    \ how_many_times(\"aaa\", \"a\") should return 3.\nWrite a function that takes\
    \ a string and a substring and returns the number of times the substring appears\
    \ in the string. \nFor example, how_many_times(\"aaa\", \"a\") should return 3.\n\
    Write a function that takes a string and a substring and returns the number of\
    \ times the substring appears in the string. \nFor example, how_many_times(\"\
    aaa\", \"a\") should return 3.\nWrite a function that takes a string and a substring\
    \ and returns the number of times the substring appears in the string. \nFor example,\
    \ how_many_times(\"aaa\", \"a\") should return 3.\nWrite a function that takes\
    \ a string and a substring and returns the number of times the substring appears\
    \ in the string. \nFor example, how_many_times(\"aaa\", \"a\") should return 3.\n\
    Write a function that takes a string and a substring and returns the number of\
    \ times the substring appears in the string. \nFor example, how_many_times(\"\
    aaa\", \"a\") should return 3.\nWrite a function that takes a ", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times the substring appears in the string. Count overlaping cases.",
  "    if string == \"\" || substring == \"\"\n        return 0\n    \n    len_string\
    \ = length(string)\n    len_substring = length(substring)\n    \n    if len_string\
    \ == 0 || len_substring == 0\n        return 0\n    \n    if string[len_string\
    \ - 1] == substring[0]\n        return 1 + how_many_times(string[len_string -\
    \ 2 : len_string - 1], substring[1:])\n    \n    if substring[len_substring -\
    \ 1] == string[0]\n        return 1 + how_many_times(string[1 : len_string - 1],\
    \ substring[len_substring - 2 : len_substring - 1])\n    \n    if string[len_string\
    \ - 1] == substring[len_substring - 1]\n        return 1 + how_many_times(string[len_string\
    \ - 2 : len_string - 1], substring[len_substring - 2 : len_substring - 1])\n \
    \   \n    if substring[len_substring - 1] == string[len_string - 1]\n        return\
    \ 1 + how_many_times(string[1 : len_string - 1], substring[len_substring - 2 :\
    \ len_substring - 1])\n    \n    if string[len_string - 1] == substring[0]\n \
    \       return 1 + how_many_times(string[len_string - 2 : len_string - 1], substring[1:])\n\
    \    \n    if substring[len_substring - 1] == string[len_string - 1]\n       \
    \ return 1 + how_many_times(string[1 : len_string - 1], substring[len_substring\
    \ - 2 : len_substring - 1])\n    \n    if string[len_string - 1] == substring[len_substring\
    \ - 1]\n        return 1 + how_many_times(string[len_string - 2 : len_string -\
    \ 1], substring[len_substring - 2 : len_substring - 1])\n    \n    if substring[len_substring\
    \ - 1] == string[0]\n        return 1 + how_many_times(string[1 : len_string -\
    \ 1], substring[len_substring - 2 : len_substring - 1])\n    \n    if string[len_string\
    \ - 1] == substring[len_substring - 1]\n        return 1 + how_many_times(string[len_string\
    \ - 2 : len_string - 1], substring[len_substring - 2 : len_substring - 1])\n \
    \   \n    if substring[len_substring - 1] == string[len_string - 1]\n        return\
    \ 1 + how_many_times(string[1 : len_string - 1], substring[len_substring - 2 :\
    \ len_substring - 1])\n    \n    if string[len_string - 1] == substring[0]\n \
    \       return 1 + how_many_times(string[len_string - 2 : len_string - ", "  \
    \  if string == \"\" || substring == \"\"\n        return 0\n    \n    i = 0\n\
    \    \n    while i < length(substring)\n        if substring(i, 1) == string\n\
    \            i += 1\n        else\n            i += 1\n        end\n    end\n\
    \    \n    return i\nend\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    \", \"a\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise: Write a function that returns the number of times a given substring\
    \ can be found in the original string. Count overlaping cases.", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    \n    count = 0\n    \n\
    \    for c in string\n        if c == substring\n            count += 1\n    \
    \    else\n            count = 0\n    end\n    \n    return count\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and a substring and returns the number of times the substring appears in the\
    \ string.", "    if string == \"\" || substring == \"\"\n        return 0\n  \
    \  else if substring == string\n        return 1\n    else\n        return 1 +\
    \ how_many_times(string[1:end-1], substring)\nend\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"\
    aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times each character appears in the string.", "    if string ==\
    \ \"\" || substring == \"\"\n        return 0\n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return 1 + how_many_times(string[1:], substring)\nend\n</cell>\n<code language=julia-1.3>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times a substring appears in the\
    \ string. Count overlaping cases.", "    if string == \"\" || substring == \"\"\
    \n        return 0\n    \n    count = 0\n    \n    for c in string\n        if\
    \ c == substring[0]\n            count = count + 1\n            \n           \
    \ if substring[1] == c\n                count = count + 1\n            \n    \
    \        if substring[2] == c\n                count = count + 1\n           \
    \ \n            if substring[3] == c\n                count = count + 1\n    \
    \        \n            if substring[4] == c\n                count = count + 1\n\
    \            \n            if substring[5] == c\n                count = count\
    \ + 1\n            \n            if substring[6] == c\n                count =\
    \ count + 1\n            \n            if substring[7] == c\n                count\
    \ = count + 1\n            \n            if substring[8] == c\n              \
    \  count = count + 1\n            \n            if substring[9] == c\n       \
    \         count = count + 1\n            \n            if substring[10] == c\n\
    \                count = count + 1\n            \n            if substring[11]\
    \ == c\n                count = count + 1\n            \n            if substring[12]\
    \ == c\n                count = count + 1\n            \n            if substring[13]\
    \ == c\n                count = count + 1\n            \n            if substring[14]\
    \ == c\n                count = count + 1\n            \n            if substring[15]\
    \ == c\n                count = count + 1\n            \n            if substring[16]\
    \ == c\n                count = count + 1\n            \n            if substring[17]\
    \ == c\n                count = count + 1\n            \n            if substring[18]\
    \ == c\n                count = count + 1\n            \n            if substring[19]\
    \ == c\n                count = count + 1\n            \n            if substring[20]\
    \ == c\n                count = count + 1\n            \n            if substring[21]\
    \ == c\n                count = count + 1\n            \n            if substring[22]\
    \ == c\n                count = count + 1\n            \n            if substring[23]\
    \ == c\n                count = count + 1\n            \n            if substring[24]\
    \ == c\n                count = count + 1\n            \n            if substring[25]\
    \ == c\n                count = count + 1\n            \n            if substring[26]\
    \ == c\n                count = count + 1\n            \n            if substring[27]\
    \ == c\n                count = count + 1\n            \n            if substring[28]\
    \ == c\n                count = count + 1\n            \n            if substring[29]\
    \ == c\n                count = count + 1\n            \n            if substring[30]\
    \ == c\n                count = count + 1\n            \n            if substring[31]\
    \ == c\n                count = count + 1\n            \n            if substring[32]\
    \ == c\n                count = count + 1\n            \n            if substring[33]\
    \ == c\n                count = count + 1\n            \n            if substring[34]\
    \ == c\n                count = count + 1\n            \n            if substring[35]\
    \ == c\n                count = count + 1\n            ", "    if string == \"\
    \" || substring == \"\"\n        return 0\n    else if string[0] == substring[0]\n\
    \        return 1 + how_many_times(string[1:], substring[1:])\n    else\n    \
    \    return how_many_times(string[1:], substring) + how_many_times(string, substring[1:])\n\
    end\n</cell>\n<text>\nExercise 3: Write a function that takes a string and returns\
    \ the number of times the substring \"aa\" appears in the string. Case insensitive.\n\
    \    >>> how_many_times(\"aaa\", \"aa\")\n    3\n    >>> how_many_times(\"aaaa\"\
    , \"aa\")\n    3\n    \"\"\"", "    if string == \"\" || substring == \"\"\n \
    \       return 0\n    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else\n        return 1 + how_many_times(string[1:], substring)\n\
    end\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\", \"a\")\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.4>\n\
    how_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times it contains the substring\
    \ \"ab\"", "    if string == \"\" || substring == \"\"\n        return 0\n   \
    \ \n    len_string = length(string)\n    len_substring = length(substring)\n \
    \   \n    if len_string == 0 || len_substring == 0\n        return 0\n    \n \
    \   if len_string == len_substring\n        return 1\n    \n    if len_string\
    \ > len_substring\n        return how_many_times(substring(string, 1, len_substring),\
    \ substring)\n    \n    return how_many_times(substring(string, 0, len_string),\
    \ substring)\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\", \"\
    a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ a substring appears within that string.", "    if string == \"\" || substring\
    \ == \"\"\n        return 0\n    \n    if string[0] == substring[0]\n        return\
    \ 1 + how_many_times(string[1:], substring[1:])\n    \n    if string[-1] == substring[-1]\n\
    \        return 1 + how_many_times(string[1..-1], substring[1..-1])\n    \n  \
    \  return how_many_times(string[1:], substring) + how_many_times(string[1..-1],\
    \ substring[1..-1])\nend\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    \", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and a substring and returns\
    \ the number of times the substring appears in the string. Case insensitive.",
  "    if string == \"\" || substring == \"\"\n        return 0\n    else if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.0>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.0>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times a substring appears within that string. Count overlaping cases.", " \
    \   if string == \"\" || substring == \"\"\n        return 0\n    \n    i = 0\n\
    \    j = string.length()\n    \n    while i < j\n        if string[i] == substring[0]\n\
    \            i += 1\n            \n            if i == j\n                return\
    \ 1\n            \n            j = j - i\n            \n        elseif string[j]\
    \ == substring[1]\n            j += 1\n            \n            if j == i\n \
    \               return 1\n            \n            i = i - j\n        else\n\
    \            i += 1\n            j += 1\n    end\n    \n    return 0\nend\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ number of times a given substring can be found in the original string. Count\
    \ overlaping cases.\n>>> how_many_times_2(\"\", \"a\")\n0\n>>> how_many_times_2(\"\
    aaa\", \"a\")\n3\n>>> how_many_times_2(\"aaaa\", \"aa\")\n3\n>>> how_many_times_2(\"\
    aaaa\", \"aaa\")\n3\n>>> how_many_times_2(\"aaaa\", \"aaaa\")\n3\n>>> how_many_times_2(\"\
    aaaa\", \"aaaaa\")\n3\n>>> how_many_times_2(\"aaaa\", \"aaaaaa\")\n3\n>>> how_many_times_2(\"\
    aaaa\", \"aaaaaaa\")\n3\n>>> how_many_times_2(\"aaaa\", \"aaaaaaab\")\n3\n>>>\
    \ how_many_times_2(\"aaaa\", \"aaaaaaabb\")\n3\n>>> how_many_times_2(\"aaaa\"\
    , \"aaaaaaabbb\")\n3\n>>> how_many_times_2(\"aaaa\", \"aaaaaaabbbb\")\n3\n>>>\
    \ how_many_times_2(\"aaaa\", \"aaaaaaabbbbb\")\n3\n>>> how_many_times_2(\"aaaa\"\
    , \"aaaaaaabbbbba\")\n3\n>>> how_many_times_2(\"aaaa\", \"aaaaaaabbbbbaa\")\n\
    3\n>>> how_many_times_2(\"aaaa\", \"aaaaaaabbbbbaaa\")\n3\n>>> how_many_times_2(\"\
    aaaa\", \"aaaaaaabbbbbaaaa\")\n3\n>>> how_many_times_2(\"aaaa", "    if string\
    \ == \"\" || substring == \"\"\n        return 0\n    else if substring.length()\
    \ == 0\n        return 1\n    else\n        return 1 + how_many_times(string[1:],\
    \ substring)\nend\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"\", \"\
    a\")\n</cell>\n<code language=julia-1.3>\nhow_many_times(\"aaa\", \"a\")\n</cell>\n\
    <code language=julia-1.3>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of times\
    \ the substring appears in the string. Count overlaping cases.\n    >>> how_many_times(\"\
    \", \"a\")\n    0\n    >>> how_many_times(\"aaa\", \"a\")\n    3\n    >>> how_many_times(\"\
    aaaa\", \"aa\")\n    3\n    \"\"\"", "    if string == \"\" || substring == \"\
    \"\n        return 0 \n    else if string[0] == substring[0]\n        return 1\
    \ + how_many_times(string[1:], substring[1:])\n    else\n        return how_many_times(string[1:],\
    \ substring) + how_many_times(string[1:], substring[1:])\nend\n</cell>\n<code\
    \ language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ number of times a substring appears in a string. Count overlaping cases.\n \
    \   >>> how_many_times_2(\"\", \"a\")\n    0\n    >>> how_many_times_2(\"aaa\"\
    , \"a\")\n    3\n    >>> how_many_times_2(\"aaaa\", \"aa\")\n    3\n    \"\"\"",
  "    if string == \"\" || substring == \"\"\n        return 0 \n    else if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else if string[0] == substring[0]\n        return 1 + how_many_times(string[1:],\
    \ substring[1:])\n    else if string[-1] == substring[-1]\n        return 1 +\
    \ how_many_times(string[1..-1], substring[1..-1])\n    else if string[-1] == substring[-1]\n\
    \        return 1 + how_many_times(string[1..-1], substring[1..-1])\n    else\n\
    \        return how_many_times(string[1:], substring) + how_many_times(string[1..-1],\
    \ substring[1..-1])\nend\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    \", \"a\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaa\", \"a\"\
    )\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <code language=julia-1.4>\nhow_many_times(\"aaaaa\", \"aa\")\n</cell>\n<code language=julia-1.4>\n\
    how_many_times(\"aaaaaa\", \"aa\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"\
    aaaaaaa\", \"aa\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaaaaa\"\
    , \"aaa\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaaaaa\", \"\
    aaaa\")\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaaaaa\", \"aaaaa\"\
    )\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaaaaa\", \"aaaaaa\"\
    )\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaaaaa\", \"aaaaaaa\"\
    )\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaaaaa\", \"aaaaaaab\"\
    )\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaaaaa\", \"aaaaaaaba\"\
    )\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaaaaa\", \"aaaaaaabaa\"\
    )\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaaaaa\", \"aaaaaaabaaa\"\
    )\n</cell>\n<code language=julia-1.4>\nhow_many_times(\"aaaaaaa\", \"aaaaaaabaaab\"\
    )\n</", "    if string == \"\" || substring == \"\"\n        return 0\n    \n\
    \    len_string = length(string)\n    len_substring = length(substring)\n    \n\
    \    if len_string == 0 || len_substring == 0\n        return 0\n    \n    count\
    \ = 0\n    \n    for i from 0 to len_string-1\n        if string[i] == substring[0]\n\
    \            count += 1\n            \n            if count > len_substring-1\n\
    \                break\n            \n            for j from i+1 to len_string-1\n\
    \                if string[j] == substring[len_substring-1]\n                \
    \    count += 1\n                    \n                    if count > len_substring-1\n\
    \                        break\n                \n    return count\n</cell>\n\
    <code language=julia-1.5>\nhow_many_times(\"\", \"a\")\n</cell>\n<code language=julia-1.5>\n\
    how_many_times(\"aaa\", \"a\")\n</cell>\n<code language=julia-1.5>\nhow_many_times(\"\
    aaaa\", \"aa\")\n</cell>\n<text>\nExercise 2\nWrite a function that counts the\
    \ number of times a substring appears in a string. Count overlaping cases.", " \
    \   if string == \"\" || substring == \"\"\n        return 0\n    else if string[0]\
    \ == substring[0]\n        return 1 + how_many_times(string[1:], substring[1:])\n\
    \    else\n        return how_many_times(string[1:], substring) + how_many_times(string,\
    \ substring[1:])\nend\n</cell>\n<code language=julia-1.1>\nhow_many_times(\"\"\
    , \"a\")\n</cell>\n<code language=julia-1.1>\nhow_many_times(\"aaa\", \"a\")\n\
    </cell>\n<code language=julia-1.1>\nhow_many_times(\"aaaa\", \"aa\")\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns the number\
    \ of times each character appears in the string."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
