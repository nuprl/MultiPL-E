language: jl
name: HumanEval_84_solve
results:
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    if N == 0\n        return \"0\"\n\
    \    if N == 1\n        return \"1\"\n    \n    digits = N % 10\n    N = N / 10\n\
    \    \n    digits = solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    return digits\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</\nusing Test\n\n\
    @testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoxnfzkgt.jl:34\nin expression starting at\
    \ /tmp/tmpoxnfzkgt.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N == 0 \n        return \"0\"\n    \n    digits = digits(N)\n    \n\
    \    if digits[1] == 0 \n        return \"0\"\n    \n    digits = digits[2:end]\n\
    \    \n    sum = 0\n    for digit in digits\n        sum = sum + digit\n    \n\
    \    return string(digits, sum)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpla2wdy6m.jl:1\nin expression starting at /tmp/tmpla2wdy6m.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"-1\"\n    \n    digits = zeros(Int, N)\n  \
    \  \n    for i = 1:N\n        digits[i] = digits[i-1] + N % 2\n        N = N /\
    \ 2\n    end\n    \n    digits[N] = 0\n    \n    return join(digits, \"\")\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a Julia function that takes a positive integer\
    \ N and returns the sum of its digits in binary. Your function should take no\
    \ arguments and return a string.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpksb0nvgj.jl:32\nin expression starting at\
    \ /tmp/tmpksb0nvgj.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        error(\"N must be positive\")\n    \n    if N\
    \ < 10\n        return string(N)\n    \n    digits = zeros(Int, 10)\n    \n  \
    \  for i = 1:N\n        digits[i] = digits[i-1] + N % 10\n        N = N / 10\n\
    \    end\n    \n    digits[end] = digits[end] + N % 10\n    \n    return string(digits)\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<text>\nProblem\
    \ 3\nA palindromic number reads the same both ways. The largest palindrome made\
    \ from the product of two 2-digit numbers is 9009 = 91 \xD7 99.\nusing Test\n\n\
    @testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpwlnug4nk.jl:36\nin expression starting at\
    \ /tmp/tmpwlnug4nk.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        error(\"N must be positive\")\n    end\n    \n\
    \    if N == 0\n        return \"0\"\n    end\n    \n    digits = zeros(Int, 10)\n\
    \    digits[1] = 1\n    \n    for i = 2:N\n        digits[i] = digits[i-1] * 2\n\
    \    end\n    \n    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb1oxb46q.jl:36\nin expression starting at\
    \ /tmp/tmpb1oxb46q.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    end\n    \n    digits\
    \ = zeros(Int, 10)\n    \n    for i = 1:N\n        digits[N % 10] += 1\n     \
    \   N /= 10\n    end\n    \n    digits = digits[digits[1:end-1]]\n    \n    digits\
    \ = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n    \n\
    \    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmposb_9h_4.jl:1\nin expression starting at /tmp/tmposb_9h_4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N == 0 \n        return \"0\"\n    if N < 0 \n        return \"0\"\n\
    \    \n    digits = N % 10\n    N = N / 10\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    digits = digits + solve(\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppeuvl2z6.jl:115\nin expression starting at\
    \ /tmp/tmppeuvl2z6.jl:115\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    end\n    \n    digits\
    \ = zeros(Int, N)\n    \n    for d in digits[2:end]\n        digits[d] = digits[d]\
    \ + 1\n    end\n    \n    digits[end] = digits[end] + 1\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[digits[end] == 1]\n    \n    return join(digits, \"\
    \")\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(149)\n</cell>\n<code language=julia-1.5>\n\
    solve(151)\n</cell>\n<code language=julia-1.5>\nsolve(152)\n</cell>\n<code language=julia-1.5>\n\
    solve(153)\n</cell>\n<code language=julia-1.5>\nsolve(154)\n</cell>\n<code language=julia-1.5>\n\
    solve(155)\n</cell>\n<code language=julia-1.5>\nsolve(156)\n</cell>\n<code language=julia-1.5>\n\
    solve(157)\n</cell>\n<code language=julia-1.5>\nsolve(158)\n</cell>\n<code language=julia-1.5>\n\
    solve(159)\n</cell>\n<code language=julia-1.5>\nsolve(160)\n</cell>\n<code language=julia-1.5>\n\
    solve(161)\n</cell>\n<code language=julia-1.5>\nsolve(162)\n</cell>\n<code language=julia-1.5>\n\
    solve(163)\n</cell>\n<code language=julia-1.5>\nsolve(164)\n</cell>\n<code language=julia-1.5>\n\
    solve(165)\n</cell>\n<code language=julia-1.5>\nsolve(166)\n</cell>\n<code language=julia-1.5>\n\
    solve(167)\n</cell>\n<code language=julia-1.5>\nsolve(168)\n</cell>\n<code language=julia-1.5>\n\
    solve(169)\n</cell>\n<code language=julia-1.5>\nsolve(170)\n</cell>\n<code language=julia-1.5>\n\
    solve(171)\n</cell>\n<code language=julia-1.5>\nsolve(172)\n</cell>\n<code language=julia-1.5>\n\
    solve(173)\n</cell>\n<code language=julia-1.5>\nsolve(174)\n</cell>\n<code language=julia-1.5>\n\
    solve(175)\n</\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzbq81_jy.jl:36\nin expression starting at\
    \ /tmp/tmpzbq81_jy.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        return \"0\"\n    \n    if N < 10\n        return\
    \ string(\"0\", N)\n    \n    digits = string(\"0\", N)\n    \n    for i = 1:N\n\
    \        digits = digits[2:end-2] + digits[2:end]\n    end\n    \n    return digits\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(123)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_9bpa_oj.jl:33\nin expression starting at\
    \ /tmp/tmp_9bpa_oj.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"-1\"\n    if N < 10\n        return string(\"\
    0\", N)\n    \n    digits = digits(N)\n    \n    binary = \"\"\n    for d in digits\n\
    \        binary += string(\"1\", d)\n    \n    return binary\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\n\
    @assert solve(3) == \"111\"\n@assert solve(5) == \"1111\"\n@assert solve(10) ==\
    \ \"1010\"\n@assert solve(15) == \"11111\"\n@assert solve(20) == \"111111\"\n\
    @assert solve(25) == \"1111111\"\n@assert solve(30) == \"11111110\"\n@assert solve(35)\
    \ == \"111111110\"\n@assert solve(40) == \"1111111101\"\n@assert solve(45) ==\
    \ \"11111111010\"\n@assert solve(50) == \"111111110100\"\n@assert solve(55) ==\
    \ \"1111111101010\"\n@assert solve(60) == \"11111111010100\"\n@assert solve(65)\
    \ == \"111111110101011\"\n@assert solve(70) == \"1111111101010011\"\n@assert solve(75)\
    \ == \"11111111010100110\"\n@assert solve(80) == \"1111111101010011001\"\n@assert\
    \ solve(85) == \"111111110101001100110\"\n@assert solve(90) == \"1111111101010011001101\"\
    \n@assert solve(95) == \"11111111010100110011010\"\n@assert solve(100) == \"111111110101001100110101\"\
    \n@assert solve(101) == \"1111111101010011001101010\"\n@assert solve(110) == \"\
    11111111010100110011010100\"\n@assert solve(111) == \"1111111101010011001101010001\"\
    \n@assert solve(1000) == \"111111110101001100110101000110\"\n@assert solve(1500)\
    \ == \"111111110101001100110101000110110\"\n@assert solve(2000) == \"111111110101001100110101000110110100\"\
    \n@assert solve(2500) == \"111111110101001100110101000110110100100\"\n@assert\
    \ solve(3000) == \"11111111010100110011010100011011010010010\"\n@assert solve(3500)\
    \ == \"1111111101010011001101010001101101001001010\"\n@assert solve(4000) == \"\
    11111111010100110011010100011011010010010100\"\n@assert solve(\nusing Test\n\n\
    @testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphxf32m06.jl:31\nin expression starting at\
    \ /tmp/tmphxf32m06.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N == 0 \n        return \"0\"\n    if N < 0 \n        return \"0\"\n\
    \    if N < 10 \n        return string(\"0\", N)\n    \n    digits = string(\"\
    0\", N)\n    digits = digits[2:end]\n    \n    sum = 0\n    for digit in digits\n\
    \        sum += digit\n    \n    return string(\"1\", sum)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\nProblem 3\nGiven\
    \ a positive integer N, return the number of trailing zeroes in N's binary representation.\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprga4fljn.jl:34\nin expression starting at\
    \ /tmp/tmprga4fljn.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        error(\"N must be positive\")\n    \n    digits\
    \ = zeros(Int, N)\n    \n    for i = 1:N\n        digits[i] = digits[i-1] + N\
    \ % 2\n        N = N / 2\n    end\n    \n    digits[N] = digits[N-1] + N % 2\n\
    \    \n    return join(digits, \"\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptqbkzrrm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptqbkzrrm.jl:1\n\
    in expression starting at /tmp/tmptqbkzrrm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N == 0 \n        return \"0\"\n    \n    if N < 0\n        return\
    \ \"-1\"\n    \n    if N < 10\n        return string(\"0\", N)\n    \n    digits\
    \ = N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n \
    \   N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n   \
    \ \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n \
    \   N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n   \
    \ \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n \
    \   N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n   \
    \ \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n \
    \   N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n   \
    \ \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n \
    \   N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n   \
    \ \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n \
    \   N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n   \
    \ \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    \n    N = N / 10\n    \n    digit\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz60kymc2.jl:1\nin expression starting at /tmp/tmpz60kymc2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    end\n    if N ==\
    \ 0\n        return \"0\"\n    end\n    \n    digits = zeros(Int, 10)\n    digits[1]\
    \ = 1\n    digits[2] = 1\n    digits[3] = 1\n    digits[4] = 1\n    digits[5]\
    \ = 1\n    digits[6] = 1\n    digits[7] = 1\n    digits[8] = 1\n    digits[9]\
    \ = 1\n    \n    sum = 0\n    \n    for i in 1:N\n        digit = digits[i]\n\
    \        sum += digit\n    end\n    \n    return string(digits)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solve(0) == \"0\"\n@assert solve(1) == \"1\"\
    \n@assert solve(2) == \"10\"\n@assert solve(3) == \"11\"\n@assert solve(4) ==\
    \ \"100\"\n@assert solve(5) == \"101\"\n@assert solve(6) == \"110\"\n@assert solve(7)\
    \ == \"111\"\n@assert solve(8) == \"1000\"\n@assert solve(9) == \"1001\"\n@assert\
    \ solve(10) == \"1010\"\n@assert solve(11) == \"1011\"\n@assert solve(12) == \"\
    1100\"\n@assert solve(13) == \"1101\"\n@assert solve(14) == \"1110\"\n@assert\
    \ solve(15) == \"1111\"\n@assert solve(16) == \"10000\"\n@assert solve(17) ==\
    \ \"10001\"\n@assert solve(18) == \"10010\"\n@assert solve(19) == \"10011\"\n\
    @assert solve(20) == \"10100\"\n@assert solve(21) == \"10101\"\n@assert solve(22)\
    \ == \"10110\"\n@assert solve(23) == \"10111\"\n@assert solve(24) == \"11100\"\
    \n@assert solve(25) == \"11101\"\n@assert solve(26) == \"11110\"\n@assert solve(27)\
    \ == \"11111\"\n@assert solve(28) == \"100001\"\n@assert solve(29) == \"100002\"\
    \n@assert solve(30) == \"100003\"\n@assert solve(31) == \"100004\"\n@assert solve(32)\
    \ == \"100005\"\n@assert solve(33) == \"100006\"\n@assert solve(34) == \"100007\"\
    \n@assert solve(35) == \"100008\"\n@assert solve(36) == \"100009\"\n@assert solve(37)\
    \ == \"100010\"\n@assert solve(38) == \"100011\"\n@assert solve(39) == \"100012\"\
    \n@assert solve(40) == \"100013\"\n@assert solve(41) == \"100014\"\n@assert solve(42)\
    \ == \"100015\"\n@assert solve(43) == \"100016\"\n@assert solve(44) == \"100017\"\
    \n@assert solve(45) == \"\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_mgkmeam.jl:45\nin expression starting at\
    \ /tmp/tmp_mgkmeam.jl:45\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    digits = digits(N)\n    \n    binary = \"\"\n    \n    for digit\
    \ in digits\n        binary = binary + digit\n    end\n    \n    return binary\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\n\
    Problem 7\nThe sum of the numbers from 1 to N is given by\n$$\n\\sum{n=1}^N n\n\
    $$\nThe first ten terms so far have no digits in common. \nThe next ten terms\
    \ have one digit, and so on. \nBy \"digit\" we mean the base-ten number with that\
    \ many leading zeros. \nThe same \"digit\" appears twice with different base-ten\
    \ values. \nFor example, with N=12 the terms so far are \n$$\n1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, \\text{and}\\, 10.\n$$\nThe terms so far have 1, 2, 3, ... , 9,\
    \ and 10 repeated. \nSince the 1's have no common factors, 1 + 2 + 3 + 4 + 5 +\
    \ 6 + 7 + 8 + 9 + 10 = 55. \nThe only numbers left are 5, 7, and 8. \nSo the sum\
    \ of the numbers from 1 to N is: \n$$\n\\sum{n=1}^N 5 + \\sum{n=1}^N 7 + \\sum{n=1}^N\
    \ 8\n$$\nThe first ten terms so far have no digits in common. \nThe next ten terms\
    \ have one digit, and so on. \nBy \"digit\" we mean the base-ten number with that\
    \ many leading zeros. \nThe same \"digit\" appears twice with different base-ten\
    \ values. \nFor example, with N=12 the terms so far are \n$$\n1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, \\text{and}\\, 10.\n$$\nThe terms so far have 1, 2, 3, ... , 9,\
    \ and 10 repeated. \nSince the 1's have no common factors, 1 + 2 + 3 + 4 + 5 +\
    \ 6 + 7 + 8 + 9 + 10 = 55. \nThe only numbers left are 5, 7, and 8. \nSo the sum\
    \ of the numbers from 1 to N is: \n$$\n\\sum{n=1}^N 5 + \\sum{n=1}^N 7 + \\sum{n=1}^N\
    \ 8\n$$\nThe first ten terms so far have no digits in common. \nThe next t\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"\
    1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\
    \t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb8efmo4d.jl:29\nin expression starting at\
    \ /tmp/tmpb8efmo4d.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    end\n    if N ==\
    \ 0\n        return \"0\"\n    end\n    \n    digits = zeros(Int, N)\n    \n \
    \   digits[1] = 1\n    \n    for i = 2:N\n        digits[i] = digits[i-1] * 2\n\
    \    end\n    \n    digits[N] = digits[N-1] * 2\n    \n    digits = digits[2:end]\n\
    \    \n    return join(digits, \"\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmp4jt8_03j.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmp4jt8_03j.jl:44\n  Expression: candidate(1000)\
    \ == \"1\"\n   Evaluated: \"24816326412825651210242048409681921638432768655361310722621445242881048576209715241943048388608167772163355443267108864134217728268435456536870912107374182421474836484294967296858993459217179869184343597383686871947673613743895347227487790694454975581388810995116277762199023255552439804651110487960930222081759218604441635184372088832703687441776641407374883553282814749767106565629499534213121125899906842624225179981368524845035996273704969007199254740992180143985094819843602879701896396872057594037927936144115188075855872288230376151711744576460752303423488115292150460684697623058430092136939524611686018427387904-9223372036854775808000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\
    \ == \"1\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmp4jt8_03j.jl:44 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmp4jt8_03j.jl:43\ntest set: Test\
    \ Failed at"
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    \n    if N < 10\n        return string(\"\
    1\", N)\n    \n    digits = string(\"0\", N)\n    \n    for i = 2 to N\n     \
    \   digits = digits[1:] + string(\"0\", N - i)\n    end\n    \n    return digits\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\n\
    Problem 9\nWrite a Julia function called digits that takes a positive integer\
    \ N and returns the total sum of its digits in binary.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpdmb8swen.jl:26 expected \"\
    end\", got \"N\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdmb8swen.jl:26\n\
    in expression starting at /tmp/tmpdmb8swen.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N == 0 \n        return \"0\"\n    \n    digits = digits(N)\n    \n\
    \    sum = 0\n    for d in digits\n        sum += d\n    \n    return string(digits,\
    \ sum)\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp681_oozw.jl:1\nin expression starting at /tmp/tmp681_oozw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    end\n    \n    binary\
    \ = \"\"\n    \n    for i = 1:N\n        binary = binary + string(i, 2)\n    end\n\
    \    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n@assert solve(1)\
    \ == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"111\"\n@assert solve(4)\
    \ == \"1001\"\n@assert solve(5) == \"10101\"\n@assert solve(6) == \"11000\"\n\
    @assert solve(7) == \"110000\"\n@assert solve(8) == \"1100001\"\n@assert solve(9)\
    \ == \"1100010\"\n@assert solve(10) == \"11000100\"\n@assert solve(11) == \"110001000\"\
    \n@assert solve(12) == \"1100010000\"\n@assert solve(13) == \"11000100000\"\n\
    @assert solve(14) == \"110001000000\"\n@assert solve(15) == \"1100010000000\"\n\
    @assert solve(16) == \"11000100000000\"\n@assert solve(17) == \"110001000000000\"\
    \n@assert solve(18) == \"1100010000000000\"\n@assert solve(19) == \"11000100000000000\"\
    \n@assert solve(20) == \"110001000000000000\"\n@assert solve(21) == \"1100010000000000000\"\
    \n@assert solve(22) == \"11000100000000000000\"\n@assert solve(23) == \"110001000000000000000\"\
    \n@assert solve(24) == \"1100010000000000000000\"\n@assert solve(25) == \"11000100000000000000000\"\
    \n@assert solve(26) == \"110001000000000000000000\"\n@assert solve(27) == \"1100010000000000000000000\"\
    \n@assert solve(28) == \"11000100000000000000000000\"\n@assert solve(29) == \"\
    110001000000000000000000000\"\n@assert solve(30) == \"1100010000000000000000000000\"\
    \n@assert solve(31) == \"11000100000000000000000000000\"\n@assert solve(32) ==\
    \ \"110001000000000000000000000000\"\n@assert solve(33) == \"1100010000000000000000000000000\"\
    \n@assert solve(34) == \"11000100000000000000000000000000\"\n@assert solve(35)\
    \ == \"110001000000000000000000000000000\"\n@assert solve(36) == \"1100010000000000000000000000000000\"\
    \n@assert solve(37) == \"11000100000000000000000000000000000\"\n@assert solve(38)\
    \ == \"110001000000000000000000000000000000\"\n@assert solve(39) == \"1100010000000000000000000000000000000\"\
    \n@assert solve(40) == \"11000100000000000000000000000000000000\"\n@assert solve(41)\
    \ == \"110001000000000000000000000000000000000\"\n@assert solve(42) == \"1100010000000000000000000000000000000000\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3xvjlrjc.jl:30\nin expression starting at\
    \ /tmp/tmp3xvjlrjc.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    binary = \"\"\n    \n    if N < 0\n        error(\"N must be positive\"\
    )\n    \n    if N == 0\n        binary = \"0\"\n    \n    if N < 10\n        binary\
    \ = \"0\"\n    \n    if N < 100\n        binary = \"1\" + binary\n    \n    if\
    \ N < 1000\n        binary = \"10\" + binary\n    \n    if N < 10000\n       \
    \ binary = \"100\" + binary\n    \n    if N < 100000\n        binary = \"1000\"\
    \ + binary\n    \n    if N < 1000000\n        binary = \"10000\" + binary\n  \
    \  \n    if N < 10000000\n        binary = \"100000\" + binary\n    \n    if N\
    \ < 100000000\n        binary = \"1000000\" + binary\n    \n    if N < 1000000000\n\
    \        binary = \"10000000\" + binary\n    \n    if N < 10000000000\n      \
    \  binary = \"100000000\" + binary\n    \n    if N < 100000000000\n        binary\
    \ = \"1000000000\" + binary\n    \n    if N < 1000000000000\n        binary =\
    \ \"10000000000\" + binary\n    \n    if N < 10000000000000\n        binary =\
    \ \"100000000000\" + binary\n    \n    if N < 100000000000000\n        binary\
    \ = \"1000000000000\" + binary\n    \n    if N < 1000000000000000\n        binary\
    \ = \"10000000000000\" + binary\n    \n    if N < 10000000000000000\n        binary\
    \ = \"100000000000000\" + binary\n    \n    if N < 100000000000000000\n      \
    \  binary = \"1000000000000000\" + binary\n    \n    if N < 1000000000000000000\n\
    \        binary = \"10000000000000000\" + binary\n    \n    return binary\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert solve(0) == \"0\"\n@assert solve(1)\
    \ == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"111\"\n@assert solve(4)\
    \ == \"1010\"\n@assert solve(5) == \"10111\"\n@assert solve(6) == \"11100\"\n\
    @assert solve(7) == \"11101\"\n@assert solve(8) == \"11110\"\n@assert solve(9)\
    \ == \"11111\"\n@assert solve(10) == \"111010\"\n@assert solve(11) == \"1110111\"\
    \n@assert solve(12) == \"1111010\"\n@assert solve(13) == \"11110110\"\n@assert\
    \ solve(14) == \"11111011\"\n@assert solve(15) == \"111111010\"\n@assert solve(16)\
    \ == \"1111110110\"\n@assert solve(17) == \"1111111011\"\n@assert solve(18) ==\
    \ \"11111111010\"\n@assert solve(19) == \"111111110110\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoew76h5k.jl:83\nin expression starting at\
    \ /tmp/tmpoew76h5k.jl:83\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    end\n    \n    digits\
    \ = zeros(Int, N)\n    \n    for i = 1:N\n        digits[i] = digits[i-1] + N\
    \ % 2\n        N = N // 2\n    end\n    \n    digits[N] = 0\n    \n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n@assert solve(1)\
    \ == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"111\"\n@assert solve(4)\
    \ == \"1010\"\n@assert solve(5) == \"10111\"\n@assert solve(6) == \"111010\"\n\
    @assert solve(7) == \"1110111\"\n@assert solve(8) == \"1111010\"\n@assert solve(9)\
    \ == \"111101101\"\n@assert solve(10) == \"1111101010\"\n@assert solve(11) ==\
    \ \"11111011111\"\n@assert solve(12) == \"111111101010\"\n@assert solve(13) ==\
    \ \"1111111011111\"\n@assert solve(14) == \"1111111101010\"\n@assert solve(15)\
    \ == \"11111111010111\"\n@assert solve(16) == \"11111111011010\"\n@assert solve(17)\
    \ == \"111111110110111\"\n@assert solve(18) == \"111111110111010\"\n@assert solve(19)\
    \ == \"1111111101110111\"\n@assert solve(20) == \"1111111101111010\"\n@assert\
    \ solve(21) == \"11111111011110111\"\n@assert solve(22) == \"11111111010111010\"\
    \n@assert solve(23) == \"111111110101110111\"\n@assert solve(24) == \"111111110101111010\"\
    \n@assert solve(25) == \"1111111101011110111\"\n@assert solve(26) == \"11111111011010111010\"\
    \n@assert solve(27) == \"111111110110101110111\"\n@assert solve(28) == \"111111110110101111010\"\
    \n@assert solve(29) == \"1111111101101011110111\"\n@assert solve(30) == \"11111111011011010111010\"\
    \n@assert solve(31) == \"111111110110110101110111\"\n@assert solve(32) == \"111111110110110101111010\"\
    \n@assert solve(33) == \"1111111101101101011110111\"\n@assert solve(34) == \"\
    11111111011011011010111010\"\n@assert solve(35) == \"111111110110110110101110111\"\
    \n@assert solve(36) == \"111111110110110110101111010\"\n@assert solve(37) == \"\
    1111111101101101101011110111\"\n\nusing Test\n\n@testset begin\n\ncandidate =\
    \ solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy3gzjpmr.jl:33\nin expression starting at\
    \ /tmp/tmpy3gzjpmr.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    end\n    \n    digits\
    \ = zeros(Int, N)\n    \n    for i = 1:N\n        digits[i] = digits[i-1] + N\
    \ % 2\n        N = N / 2\n    end\n    \n    return join(digits, \"\")\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert solve(1) == \"1\"\n@assert solve(2)\
    \ == \"10\"\n@assert solve(3) == \"111\"\n@assert solve(4) == \"1001\"\n@assert\
    \ solve(5) == \"1011\"\n@assert solve(6) == \"11001\"\n@assert solve(7) == \"\
    11010\"\n@assert solve(8) == \"11100\"\n@assert solve(9) == \"111101\"\n@assert\
    \ solve(10) == \"111100\"\n@assert solve(11) == \"111111\"\n@assert solve(12)\
    \ == \"1111110\"\n@assert solve(13) == \"1111111\"\n@assert solve(14) == \"11111110\"\
    \n@assert solve(15) == \"111111100\"\n@assert solve(16) == \"1111111000\"\n@assert\
    \ solve(17) == \"11111110000\"\n@assert solve(18) == \"111111100000\"\n@assert\
    \ solve(19) == \"1111111000000\"\n@assert solve(20) == \"11111110000000\"\n@assert\
    \ solve(21) == \"111111100000000\"\n@assert solve(22) == \"1111111000000000\"\n\
    @assert solve(23) == \"11111110000000000\"\n@assert solve(24) == \"111111100000000000\"\
    \n@assert solve(25) == \"1111111000000000000\"\n@assert solve(26) == \"11111110000000000000\"\
    \n@assert solve(27) == \"111111100000000000000\"\n@assert solve(28) == \"1111111000000000000000\"\
    \n@assert solve(29) == \"11111110000000000000000\"\n@assert solve(30) == \"111111100000000000000000\"\
    \n@assert solve(31) == \"1111111000000000000000000\"\n@assert solve(32) == \"\
    11111110000000000000000000\"\n@assert solve(33) == \"111111100000000000000000000\"\
    \n@assert solve(34) == \"1111111000000000000000000000\"\n@assert solve(35) ==\
    \ \"11111110000000000000000000000\"\n@assert solve(36) == \"111111100000000000000000000000\"\
    \n@assert solve(37) == \"1111111000000000000000000000000\"\n@assert solve(38)\
    \ == \"11111110000000000000000000000000\"\n@assert solve(39) == \"111111100000000000000000000000000\"\
    \n@assert solve(40) == \"1111111000000000000000000000000000\"\n@assert solve(41)\
    \ == \"11111110000000000000000000000000000\"\n@assert solve(42) == \"111111100000000000000000000000000000\"\
    \n@assert solve(43) == \"\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpeayah5g3.jl:31\nin expression starting at\
    \ /tmp/tmpeayah5g3.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    if N < 10\n        return string(\"\
    1\",N)\n    \n    digits = string(\"0\",N)\n    \n    digits = digits[2:end]\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits\
    \ = reverse(digits)\n    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n\
    \    \n    digits = reverse(digits)\n    \n    digits = reverse(digits)\n    \n\
    \    digits = reverse(digits)\n    \n    digits = \nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt9b27m6f.jl:1\nin expression starting at /tmp/tmpt9b27m6f.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    if N < 10\n        return string(\"\
    0\", N)\n    \n    digits = string(\"0\", N)\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t\
    @test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkokqgs_5.jl:1\nin expression starting at /tmp/tmpkokqgs_5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    \n    digits = digits(N)\n    \n \
    \   if length(digits) == 0\n        return \"0\"\n    \n    digits = digits[1..end]\n\
    \    \n    if length(digits) == 0\n        return \"0\"\n    \n    digits = reverse(digits)\n\
    \    \n    if length(digits) == 0\n        return \"0\"\n    \n    digits = reverse(digits)\n\
    \    \n    if length(digits) == 0\n        return \"0\"\n    \n    digits = reverse(digits)\n\
    \    \n    if length(digits) == 0\n        return \"0\"\n    \n    digits = reverse(digits)\n\
    \    \n    if length(digits) == 0\n        return \"0\"\n    \n    digits = reverse(digits)\n\
    \    \n    if length(digits) == 0\n        return \"0\"\n    \n    digits = reverse(digits)\n\
    \    \n    if length(digits) == 0\n        return \"0\"\n    \n    digits = reverse(digits)\n\
    \    \n    if length(digits) == 0\n        return \"0\"\n    \n    digits = reverse(digits)\n\
    \    \n    if length(digits) == 0\n        return \"0\"\n    \n    digits = reverse(digits)\n\
    \    \n    if length(digits) == 0\n        return \"0\"\n    \n    digits = reverse(digits)\n\
    \    \n    if length(digits) == 0\n        return \"0\"\n    \n    digits = reverse(digits)\n\
    \    \n    if length(digits) == 0\n        return \"0\"\n    \n    digits = reverse(digits)\n\
    \    \n    if length(digits) == 0\n        return \"0\"\n    \n    digits = reverse(digits)\n\
    \    \n    if length(digits) == 0\n        return \"0\"\n    \n    digits = reverse(digits)\n\
    \    \n    if length(digits) == 0\n        return \"0\"\n    \n    digits = reverse(digits)\n\
    \    \n    if length(digits) == 0\n        return \"0\"\n    \n    digits = reverse(digits)\n\
    \    \n    if length(digits) == 0\n        return \"0\"\n    \n    digits = reverse(digits)\n\
    \    \n    if length(digits) == 0\n        return \"0\"\n    \n    digits = reverse(digits)\n\
    \    \n    if length(digits) == 0\n        return \"0\"\n    \n    digits = reverse(digits)\n\
    \    \n    if length(digits) == 0\n        return \"0\"\n    \n    digits = reverse(digits)\n\
    \    \n    if length(digits) == 0\n        return \"0\"\n    \n    digits = reverse(digits)\n\
    \    \n    if length(digits) == 0\n        return \"0\"\n    \n    digits = reverse(digits)\n\
    \    \n    if length(digits) == 0\n        return \"0\"\n    \n    digits = reverse(digits)\n\
    \    \n    if length(digits) == 0\n        return \"0\"\n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8f5dgzaz.jl:1\nin expression starting at /tmp/tmp8f5dgzaz.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    digits = zeros(Int, 10)\n    \n    for i = 1:N\n        digits[i]\
    \ = digits[i-1] + N % 2\n        N = N / 2\n    end\n    \n    digits = digits[digits[end]\
    \ == 1]\n    \n    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7\nWrite a Julia function called count_digits(N)\
    \ that takes an integer N and returns the number of digits in N in binary.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"\
    1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\
    \t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy5wapnto.jl:30\nin expression starting at\
    \ /tmp/tmpy5wapnto.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        return \"-1\"\n    \n    digits = N % 10\n   \
    \ \n    if digits == 0\n        return \"0\"\n    \n    digits = digits + 1\n\
    \    \n    binary = \"\"\n    \n    while digits > 0\n        binary = digits\
    \ % 2\n        digits = digits / 2\n    \n    return binary\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\nExercise 2\n\
    Write a function that converts a binary number to its decimal equivalent.\nThe\
    \ function should take a single argument that is a binary number.\nThe function\
    \ should return the decimal equivalent of the binary number.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpksup_y7j.jl:37\nin expression starting at\
    \ /tmp/tmpksup_y7j.jl:37\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        return \"0\"\n    \n    if N == 0\n        return\
    \ \"0\"\n    \n    if N < 10\n        return string(\"0\", N)\n    \n    digits\
    \ = string(\"0\", N)\n    \n    digits[1:end-1] = digits[1:end-1] + string(\"\
    1\", N - digits[end-1])\n    \n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solve(0) == \"0\"\n@assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\
    \n@assert solve(3) == \"11\"\n@assert solve(4) == \"100\"\n@assert solve(5) ==\
    \ \"101\"\n@assert solve(6) == \"110\"\n@assert solve(7) == \"111\"\n@assert solve(8)\
    \ == \"1000\"\n@assert solve(9) == \"1001\"\n@assert solve(10) == \"1010\"\n@assert\
    \ solve(11) == \"1011\"\n@assert solve(12) == \"1100\"\n@assert solve(13) == \"\
    1101\"\n@assert solve(14) == \"1110\"\n@assert solve(15) == \"1111\"\n@assert\
    \ solve(16) == \"10000\"\n@assert solve(17) == \"10001\"\n@assert solve(18) ==\
    \ \"10010\"\n@assert solve(19) == \"10011\"\n@assert solve(20) == \"10100\"\n\
    @assert solve(21) == \"10501\"\n@assert solve(22) == \"10110\"\n@assert solve(23)\
    \ == \"10111\"\n@assert solve(24) == \"11100\"\n@assert solve(25) == \"11101\"\
    \n@assert solve(26) == \"11110\"\n@assert solve(27) == \"11111\"\n@assert solve(28)\
    \ == \"100001\"\n@assert solve(29) == \"100002\"\n@assert solve(30) == \"100003\"\
    \n@assert solve(31) == \"100004\"\n@assert solve(32) == \"100005\"\n@assert solve(33)\
    \ == \"100006\"\n@assert solve(34) == \"100007\"\n@assert solve(35) == \"100008\"\
    \n@assert solve(36) == \"100009\"\n@assert solve(37) == \"100010\"\n@assert solve(38)\
    \ == \"100011\"\n@assert solve(39) == \"100012\"\n@assert solve(40) == \"100013\"\
    \n@assert solve(41) == \"100014\"\n@assert solve(42) == \"100015\"\n@assert solve(43)\
    \ == \"100016\"\n@assert solve(44) == \"100017\"\n@assert solve(45) == \"100018\"\
    \n@assert solve(46) == \"100019\"\n@assert solve(47) == \"100020\"\n@assert solve(48)\
    \ == \"100021\"\n@assert solve(49) == \"100022\"\n@assert solve(\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t\
    @test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333)\
    \ == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcm_hvx3i.jl:34\nin expression starting at\
    \ /tmp/tmpcm_hvx3i.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    digits = zeros(Int, N)\n    \n    for i = 1:N\n        digits[i]\
    \ = digits[i-1] + N % 2\n        N = N / 2\n    end\n    \n    digits[N] = digits[N-1]\
    \ + N % 2\n    \n    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.3>\n\
    solve(1000)\n</cell>\n<code language=julia-1.3>\nsolve(150)\n</cell>\n<code language=julia-1.3>\n\
    solve(147)\n</cell>\n<text>\nProblem 7\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprfou6prx.jl:30\nin expression starting at\
    \ /tmp/tmprfou6prx.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N == 0 \n        return \"0\"\n    \n    digits = digits(N)\n    \n\
    \    if digits[1] == 0 \n        return digits[2]\n    \n    if digits[1] == 1\
    \ \n        return digits[2] + solve(digits[2])\n    \n    digits[1] = digits[1]\
    \ - 1\n    \n    return digits[2] + solve(digits[2])\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprt5unnn9.jl:33\nin expression starting at\
    \ /tmp/tmprt5unnn9.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        return \"0\"\n    \n    digits = zeros(Int, 10)\n\
    \    digits[1] = 1\n    \n    for i = 2 to N\n        digits[i] = digits[i-1]\
    \ * 2\n    end\n    \n    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 9\nA palindromic number reads the same both\
    \ ways. The largest palindrome made from the product of two 2-digit numbers is\
    \ 9009 = 91 \xD7 99.\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpm_rlwsqr.jl:25 expected \"\
    end\", got \"N\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpm_rlwsqr.jl:25\n\
    in expression starting at /tmp/tmpm_rlwsqr.jl:25\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        error(\"N must be positive\")\n    end\n    \n\
    \    if N == 0\n        return \"0\"\n    end\n    \n    if N < 10\n        return\
    \ string(N, \"0\") \n    end\n    \n    digits = zeros(Int, 10)\n    \n    for\
    \ d in digits[2:end]\n        digits[d] = digits[d] + N % 2\n        N = N / 2\n\
    \    end\n    \n    digits[1] = digits[1] + N % 2\n    \n    return string(digits)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpmsqcorf6.jl:47\n  Test threw
    exception\n  Expression: candidate(1000) == "1"\n  BoundsError: attempt to access
    10-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @
    ./array.jl:861 [inlined]\n   [2] solve(N::Int64)\n     @ Main /tmp/tmpmsqcorf6.jl:34\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmsqcorf6.jl:47 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmsqcorf6.jl:46\ntest set: Error
    During Test at /tmp/tmpmsqcorf6.jl:48\n  Test threw exception\n  Expression: candidate(150)
    == "110"\n  BoundsError: attempt to access 10-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1]
    getindex\n     @ ./array.jl:861 [inlined]\n   [2] solve(N::Int64)\n     @ Main
    /tmp/tmpmsqcorf6.jl:34\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmsqcorf6.jl:48 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmsqcorf6.jl:46\ntest set: Error
    During Test at /tmp/tmpmsqcorf6.jl:49\n  Test threw exception\n  Expression: candidate(147)
    == "1100"\n  BoundsError: attempt to access 10-element Vector{Int64} at index
    [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] solve(N::Int64)\n     @
    Main /tmp/tmpmsqcorf6.jl:34\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpmsqcorf6.jl:49 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpmsqcorf6.jl:46\ntest set: Error
    During Test at /tmp/tmpmsqcorf6.'
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    \n    digits = N % 10\n    \n    if\
    \ digits == 0\n        return \"0\"\n    \n    binary = \"\"\n    \n    for d\
    \ in digits\n        binary = d + \"0\" * (N - digits) + binary\n    \n    return\
    \ binary\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy2jh911v.jl:1\nin expression starting at /tmp/tmpy2jh911v.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        throw(ArgumentError(\"N must be positive\"))\n    \n\
    \    binary = \"\"\n    \n    for i = 1:N\n        binary = binary + bin(i)[2:]\n\
    \    end\n    \n    return binary\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpyv546im9.jl:24\nin expression\
    \ starting at /tmp/tmpyv546im9.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    end\n    if N ==\
    \ 0\n        return \"0\"\n    end\n    if N < 10\n        return string(\"0\"\
    , N)\n    end\n    \n    digits = zeros(Int, 10)\n    digits[1] = 1\n    \n  \
    \  digits[2::2] = 1\n    digits[2::2] = digits[2::2] * 2\n    \n    digits[4::4]\
    \ = 1\n    digits[4::4] = digits[4::4] * 2\n    \n    digits[8::8] = 1\n    digits[8::8]\
    \ = digits[8::8] * 2\n    \n    digits[16::16] = 1\n    digits[16::16] = digits[16::16]\
    \ * 2\n    \n    digits[32::32] = 1\n    digits[32::32] = digits[32::32] * 2\n\
    \    \n    digits[64::64] = 1\n    digits[64::64] = digits[64::64] * 2\n    \n\
    \    digits[128::128] = 1\n    digits[128::128] = digits[128::128] * 2\n    \n\
    \    digits[256::256] = 1\n    digits[256::256] = digits[256::256] * 2\n    \n\
    \    digits[512::512] = 1\n    digits[512::512] = digits[512::512] * 2\n    \n\
    \    digits[1024::1024] = 1\n    digits[1024::1024] = digits[1024::1024] * 2\n\
    \    \n    digits[2048::2048] = 1\n    digits[2048::2048] = digits[2048::2048]\
    \ * 2\n    \n    digits[4096::4096] = 1\n    digits[4096::4096] = digits[4096::4096]\
    \ * 2\n    \n    digits[8192::8192] = 1\n    digits[8192::8192] = digits[8192::8192]\
    \ * 2\n    \n    digits[16384::16384] = 1\n    digits[16384::16384] = digits[16384::16384]\
    \ * 2\n    \n    digits[32768::32768] = 1\n    digits[32768::32768] = digits[32768::32768]\
    \ * 2\n    \n    digits[65536::65536] = 1\n    digits[65536::65536] = digits[65536::65536]\
    \ * 2\n    \n    digits[131072::131072] = 1\n    digits[131072::131072] = digits[131072::131072]\
    \ * 2\n    \nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq8qqsj31.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpq8qqsj31.jl:1\n\
    in expression starting at /tmp/tmpq8qqsj31.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        return \"0\"\n    \n    if N == 0\n        return\
    \ \"0\"\n    \n    if N == 1\n        return \"1\"\n    \n    digits = N % 10\n\
    \    \n    binary_digits = solve(floor(N / 10))\n    \n    binary_digits = binary_digits\
    \ * 10 + digits\n    \n    return binary_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpedvy2chg.jl:36\nin expression starting at\
    \ /tmp/tmpedvy2chg.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    \n    digits = zeros(Int, N)\n   \
    \ \n    for i = 1:N\n        digits[i] = digits[i-1] + N % 2\n        N = N /\
    \ 2\n    end\n    \n    digits[N] = digits[N] + 1\n    \n    return join(digits,\
    \ \"\")\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvkh_cxsb.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvkh_cxsb.jl:1\n\
    in expression starting at /tmp/tmpvkh_cxsb.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        throw(DomainError(string(\"N must be positive\")))\n\
    \    end\n    \n    binary = \"\"\n    \n    for i = 1:N\n        binary = binary\
    \ + string(i, 2)\n    end\n    \n    return binary\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpuyfq62yp.jl:35\n  Test threw
    exception\n  Expression: candidate(1000) == "1"\n  MethodError: no method matching
    +(::String, ::String)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any,
    !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n  Stacktrace:\n   [1]
    solve(N::Int64)\n     @ Main /tmp/tmpuyfq62yp.jl:25\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpuyfq62yp.jl:35 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpuyfq62yp.jl:34\n'''
- exit_code: -1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        error(\"N must be positive\")\n    end\n    \n\
    \    if N == 0\n        return \"0\"\n    end\n    \n    binary = \"\"\n    \n\
    \    while N > 0\n        \n        if N % 2 == 1\n            binary = string(binary,\
    \ N, 2)\n            N -= 1\n        else\n            binary = string(binary,\
    \ N, 1) + string(binary, N / 2, 2)\n            N -= 2\n        end\n    end\n\
    \    \n    return binary\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp4yjhu4o8.jl:47\n  Test threw
    exception\n  Expression: candidate(1000) == "1"\n  MethodError: no method matching
    +(::String, ::String)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any,
    !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n  Stacktrace:\n   [1]
    solve(N::Int64)\n     @ Main /tmp/tmp4yjhu4o8.jl:35\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmp4yjhu4o8.jl:47 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmp4yjhu4o8.jl:46\n'''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N == 0 \n        return \"0\"\n    \n    if N < 0 \n        return\
    \ \"0\"\n    \n    if N < 10 \n        return string(N, \"0\") \n    \n    digits\
    \ = floor(log10(N))\n    \n    if digits == 0 \n        return \"0\"\n    \n \
    \   digits = digits + 1\n    \n    binary = string(N, \"0\")\n    \n    binary\
    \ = binary[1:digits]\n    \n    binary = binary + string(N, \"1\")\n    \n   \
    \ return binary\nend\n</cell>\n<code language=julia-1.5>\n@assert solve(0) ==\
    \ \"0\"\n@assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3)\
    \ == \"11\"\n@assert solve(4) == \"100\"\n@assert solve(5) == \"101\"\n@assert\
    \ solve(6) == \"110\"\n@assert solve(7) == \"111\"\n@assert solve(8) == \"1000\"\
    \n@assert solve(9) == \"1001\"\n@assert solve(10) == \"1010\"\n@assert solve(11)\
    \ == \"1011\"\n@assert solve(12) == \"1100\"\n@assert solve(13) == \"1101\"\n\
    @assert solve(14) == \"1110\"\n@assert solve(15) == \"1111\"\n@assert solve(16)\
    \ == \"10000\"\n@assert solve(17) == \"10001\"\n@assert solve(18) == \"10010\"\
    \n@assert solve(19) == \"10011\"\n@assert solve(20) == \"10100\"\n@assert solve(21)\
    \ == \"10101\"\n@assert solve(22) == \"10110\"\n@assert solve(23) == \"10111\"\
    \n@assert solve(24) == \"11000\"\n@assert solve(25) == \"11001\"\n@assert solve(26)\
    \ == \"11010\"\n@assert solve(27) == \"11011\"\n@assert solve(28) == \"11100\"\
    \n@assert solve(29) == \"11101\"\n@assert solve(30) == \"11110\"\n@assert solve(31)\
    \ == \"11111\"\n@assert solve(32) == \"10000\"\n@assert solve(33) == \"10001\"\
    \n@assert solve(34) == \"10010\"\n@assert solve(35) == \"10011\"\n@assert solve(36)\
    \ == \"10100\"\n@assert solve(37) == \"10101\"\n@assert solve(38) == \"10110\"\
    \n@assert solve(39) == \"10111\"\n@assert solve(40) == \"11000\"\n@assert solve(41)\
    \ == \"11001\"\n@assert solve(42) == \"11010\"\n@assert solve(43) == \"11011\"\
    \n@assert solve(44) == \"11100\"\n@assert solve(45) == \"11101\"\n@assert solve(46)\
    \ == \"11110\"\n@assert solve(47) == \"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppmvhee64.jl:42\nin expression starting at\
    \ /tmp/tmppmvhee64.jl:42\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"-1\"\n    if N == 0\n        return \"0\"\n\
    \    if N == 1\n        return \"1\"\n    \n    digits = N % 10\n    N = N / 10\n\
    \    \n    digits = solve(digits)\n    \n    digits = digits + N % 10\n    N =\
    \ N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits \nusing Test\n\n\
    @testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0jicuiba.jl:1\nin expression starting at /tmp/tmp0jicuiba.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    if N == 0\n        return \"0\"\n\
    \    if N == 1\n        return \"1\"\n    \n    digits = N % 10\n    N = N / 10\n\
    \    \n    digits = solve(digits)\n    \n    return digits + solve(digits)\nend\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(149)\n</cell>\n<code language=julia-1.5>\n\
    solve(151)\n</cell>\n<code language=julia-1.5>\nsolve(152)\n</cell>\n<code language=julia-1.5>\n\
    solve(153)\n</cell>\n<code language=julia-1.5>\nsolve(154)\n</cell>\n<code language=julia-1.5>\n\
    solve(155)\n</cell>\n<code language=julia-1.5>\nsolve(156)\n</cell>\n<code language=julia-1.5>\n\
    solve(157)\n</cell>\n<code language=julia-1.5>\nsolve(158)\n</cell>\n<code language=julia-1.5>\n\
    solve(159)\n</cell>\n<code language=julia-1.5>\nsolve(160)\n</cell>\n<code language=julia-1.5>\n\
    solve(161)\n</cell>\n<code language=julia-1.5>\nsolve(162)\n</cell>\n<code language=julia-1.5>\n\
    solve(163)\n</cell>\n<code language=julia-1.5>\nsolve(164)\n</cell>\n<code language=julia-1.5>\n\
    solve(165)\n</cell>\n<code language=julia-1.5>\nsolve(166)\n</cell>\n<code language=julia-1.5>\n\
    solve(167)\n</cell>\n<code language=julia-1.5>\nsolve(168)\n</cell>\n<code language=julia-1.5>\n\
    solve(169)\n</cell>\n<code language=julia-1.5>\nsolve(170)\n</cell>\n<code language=julia-1.5>\n\
    solve(171)\n</cell>\n<code language=julia-1.5>\nsolve(172)\n</cell>\n<code language=julia-1.5>\n\
    solve(173)\n</cell>\n<code language=julia-1.5>\nsolve(174)\n</cell>\n<code language=julia-1.5>\n\
    solve(175)\n</cell>\n<code language=julia-1.5>\nsolve(176)\n</cell>\n<code language=julia-1.5>\n\
    solve(177)\n</cell>\n<code language=julia-1.5\nusing Test\n\n@testset begin\n\n\
    candidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsjdoxzdx.jl:32\nin expression starting at\
    \ /tmp/tmpsjdoxzdx.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        throw(ArgumentError(\"N must be positive\"))\n    end\n\
    \    \n    digits = zeros(Int, N)\n    \n    for i = 1:N\n        digits[i] =\
    \ digits[i-1] + N % 2\n        N = N / 2\n    end\n    \n    return join(digits,\
    \ \"\")\nend\n</cell>\n<text>\nProblem 3\nWrite a Julia function that takes a\
    \ positive integer N and returns the number of digits in binary representation\
    \ of N.\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7t4v3ku2.jl:31\nin expression starting at\
    \ /tmp/tmp7t4v3ku2.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        return \"-1\"\n    \n    if N == 0\n        return\
    \ \"0\"\n    \n    if N == 1\n        return \"1\"\n    \n    digits = String[1..N]\n\
    \    \n    binary = String[1..N]\n    \n    binary = digits[1..N]\n    \n    binary\
    \ = binary[1..N]\n    \n    binary = binary[1..N]\n    \n    binary = binary[1..N]\n\
    \    \n    binary = binary[1..N]\n    \n    binary = binary[1..N]\n    \n    binary\
    \ = binary[1..N]\n    \n    binary = binary[1..N]\n    \n    binary = binary[1..N]\n\
    \    \n    binary = binary[1..N]\n    \n    binary = binary[1..N]\n    \n    binary\
    \ = binary[1..N]\n    \n    binary = binary[1..N]\n    \n    binary = binary[1..N]\n\
    \    \n    binary = binary[1..N]\n    \n    binary = binary[1..N]\n    \n    binary\
    \ = binary[1..N]\n    \n    binary = binary[1..N]\n    \n    binary = binary[1..N]\n\
    \    \n    binary = binary[1..N]\n    \n    binary = binary[1..N]\n    \n    binary\
    \ = binary[1..N]\n    \n    binary = binary[1..N]\n    \n    binary = binary[1..N]\n\
    \    \n    binary = binary[1..N]\n    \n    binary = binary[1..N]\n    \n    binary\
    \ = binary[1..N]\n    \n    binary = binary[1..N]\n    \n    binary = binary[1..N]\n\
    \    \n    binary = binary[1..N]\n    \n    binary = binary[1..N]\n    \n    binary\
    \ = binary[1..N]\n    \n    binary = binary[1..N]\n    \n    binary = binary[1..N]\n\
    \    \n    binary = binary[1..N]\n    \n    binary = binary[1..N]\n    \n    binary\
    \ = binary[1..N]\n    \n    binary = binary[1..N]\n    \n    \nusing Test\n\n\
    @testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7uv7dvsf.jl:1\nin expression starting at /tmp/tmp7uv7dvsf.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        return \"0\"\n    \n    digits = String[]\n  \
    \  \n    digits = digits[0..N-1]\n    \n    sum = 0\n    \n    for i in digits\n\
    \        sum += i\n    \n    return String(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7: Find the sum of all numbers between 1\
    \ and N that are divisible by 7\nInput:\n    N integer\n    Constraints: 1 \u2264\
    \ N \u2264 10000.\nOutput:\n    an integer\n    Constraints: 1 \u2264 N \u2264\
    \ 10000.\nExamples:\n    solve(1000)\n    solve(150)\n    solve(147)\n    solve(123)\n\
    \    solve(125)\n    solve(126)\n    solve(127)\n    solve(129)\n    solve(130)\n\
    \    solve(131)\n    solve(132)\n    solve(133)\n    solve(134)\n    solve(135)\n\
    \    solve(136)\n    solve(137)\n    solve(138)\n    solve(139)\n    solve(140)\n\
    \    solve(141)\n    solve(142)\n    solve(143)\n    solve(144)\n    solve(145)\n\
    \    solve(146)\n    solve(147)\n    solve(148)\n    solve(149)\n    solve(150)\n\
    \    solve(151)\n    solve(152)\n    solve(153)\n    solve(154)\n    solve(155)\n\
    \    solve(156)\n    solve(157)\n    solve(158)\n    solve(159)\n    solve(160)\n\
    \    solve(161)\n    solve(162)\n    solve(163)\n    solve(164)\n    solve(165)\n\
    \    solve(166)\n    solve(167)\n    solve(168)\n    solve(169)\n    solve(170)\n\
    \    solve(171)\n    solve(172)\n    solve(173)\n    solve(174)\n    solve(175)\n\
    \    solve(176)\n    solve(177)\n    solve(178)\n    solve(179)\n    solve(180)\n\
    \    solve(181)\n    solve(182)\n    solve(183)\n    solve(184)\n    solve(185)\n\
    \    solve(186)\n    solve(187)\n    solve(188)\n    solve(189)\n    solve(190)\n\
    \    solve(191)\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphz7qsxwu.jl:33\nin expression starting at\
    \ /tmp/tmphz7qsxwu.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    \n    digits = digits(N)\n\
    \    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits(N)\n\
    \    \n    binary = \"\"\n    \n    for d in digits\n        binary = binary +\
    \ string(d) + string(d)\n    end\n    \n    return binary\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxiqhfs5g.jl:1\nin expression starting at /tmp/tmpxiqhfs5g.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"-1\"\n    if N == 0 \n        return \"0\"\n\
    \    if N == 1\n        return \"1\"\n    \n    digits = digits(N)\n    \n   \
    \ binary = \"\"\n    \n    for digit in digits\n        binary = binary + digit\n\
    \    end\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 3\nA palindromic number reads the same backward\
    \ as forward, for example, 9876 could be read as either of the following two ways,\
    \ 9876 and\n  7663. Write a Julia function called palindromic that takes in a\
    \ positive integer and outputs true if the number is a palindrome, false otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmlok7aks.jl:35\nin expression starting at\
    \ /tmp/tmpmlok7aks.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        return \"0\"\n    \n    if N < 10\n        return\
    \ string(\"0\", N)\n    \n    digits = string(\"0\", N)\n    \n    digits[1:end-1]\
    \ = digits[1:end-1] .+ string(\"1\", N - 10)\n    \n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solve(0) == \"0\"\n@assert solve(10) == \"\
    0\"\n@assert solve(100) == \"1\"\n@assert solve(101) == \"11\"\n@assert solve(110)\
    \ == \"110\"\n@assert solve(111) == \"111\"\n@assert solve(1000) == \"1\"\n@assert\
    \ solve(1001) == \"11\"\n@assert solve(1010) == \"110\"\n@assert solve(1011) ==\
    \ \"111\"\n@assert solve(1100) == \"1101\"\n@assert solve(1101) == \"1111\"\n\
    @assert solve(1110) == \"11111\"\n@assert solve(1111) == \"111111\"\n@assert solve(10000)\
    \ == \"100\"\n@assert solve(10001) == \"101\"\n@assert solve(10010) == \"110\"\
    \n@assert solve(10011) == \"111\"\n@assert solve(10100) == \"1101\"\n@assert solve(10101)\
    \ == \"1111\"\n@assert solve(10110) == \"11111\"\n@assert solve(10111) == \"111111\"\
    \n@assert solve(11000) == \"11010\"\n@assert solve(11001) == \"11111\"\n@assert\
    \ solve(11010) == \"1111111\"\n@assert solve(11011) == \"11111110\"\n@assert solve(11100)\
    \ == \"111111110\"\n@assert solve(11101) == \"1111111011\"\n@assert solve(11110)\
    \ == \"11111110111\"\n@assert solve(11111) == \"111111101111\"\n@assert solve(111111)\
    \ == \"111111111111\"\n@assert solve(11111111) == \"1111111111111\"\n@assert solve(111111111)\
    \ == \"11111111111111\"\n@assert solve(1111111111) == \"111111111111111\"\n@assert\
    \ solve(11111111111) == \"1111111111111110\"\n@assert solve(111111111111) == \"\
    11111111111111110\"\n@assert solve(1111111111111) == \"111111111111111101\"\n\
    @assert solve(11111111111111) == \"1111111111111111010\"\n@assert solve(111111111111111)\
    \ == \"11111111111111110100\"\n@assert solve(111111111111111) == \"111111111111111101000\"\
    \n@assert solve(1111111111111110) == \"1111111111111111010001\"\n@assert solve(11111111111111110)\
    \ == \"1111111111111111010010\"\n@assert solve(11111111111111101) == \"11111111111111110100100\"\
    \n@\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx98rrlro.jl:31\nin expression starting at\
    \ /tmp/tmpx98rrlro.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    digits = zeros(Int, N+1)\n    digits[1] = 1\n    digits[2] = 1\n\
    \    digits[3] = 1\n    digits[4] = 1\n    digits[5] = 1\n    digits[6] = 1\n\
    \    digits[7] = 1\n    digits[8] = 1\n    digits[9] = 1\n    digits[10] = 1\n\
    \    digits[11] = 1\n    digits[12] = 1\n    digits[13] = 1\n    digits[14] =\
    \ 1\n    digits[15] = 1\n    digits[16] = 1\n    digits[17] = 1\n    digits[18]\
    \ = 1\n    digits[19] = 1\n    digits[20] = 1\n    digits[21] = 1\n    digits[22]\
    \ = 1\n    digits[23] = 1\n    digits[24] = 1\n    digits[25] = 1\n    digits[26]\
    \ = 1\n    digits[27] = 1\n    digits[28] = 1\n    digits[29] = 1\n    digits[30]\
    \ = 1\n    digits[31] = 1\n    digits[32] = 1\n    digits[33] = 1\n    digits[34]\
    \ = 1\n    digits[35] = 1\n    digits[36] = 1\n    digits[37] = 1\n    digits[38]\
    \ = 1\n    digits[39] = 1\n    digits[40] = 1\n    digits[41] = 1\n    digits[42]\
    \ = 1\n    digits[43] = 1\n    digits[44] = 1\n    digits[45] = 1\n    digits[46]\
    \ = 1\n    digits[47] = 1\n    digits[48] = 1\n    digits[49] = 1\n    digits[50]\
    \ = 1\n    digits[51] = 1\n    digits[52] = 1\n    digits[53] = 1\n    digits[54]\
    \ = 1\n    digits[55] = 1\n    digits[56] = 1\n    digits[57] = 1\n    digits[58]\
    \ = 1\n    digits[59] = 1\n    digits[60] = 1\n    digits[61] = 1\n    digits[62]\
    \ = 1\n    digits[63] = 1\n    digits[64] = 1\n    digits[65] = 1\n    digits[66]\
    \ = 1\n    digits[67] = 1\n    digits[68] = 1\n    digits[69] = 1\n    digits[70]\
    \ = 1\n    digits[71] = 1\n    digits[72] = 1\n    digits[73] = 1\n    digits[74]\
    \ = 1\n    digits[75] = 1\n    digits[76] = 1\n    digits[77] = 1\n    digits[78]\
    \ = 1\n    digits[79] = 1\n    digits[80] = 1\n    digits[81] = 1\n    digits[82]\
    \ = 1\n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn8nvis7u.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn8nvis7u.jl:1\n\
    in expression starting at /tmp/tmpn8nvis7u.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        throw(ArgumentError(\"N must be positive\"))\n    end\n\
    \    \n    digits = zeros(Int, N)\n    \n    for i = 1:N\n        digits[i] =\
    \ digits[i-1] + N % 2\n        N = N / 2\n    end\n    \n    digits[end] = digits[end]\
    \ + N % 2\n    \n    digits = digits[2:end]\n    \n    return join(digits, \"\"\
    )\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpr1qqh6v_.jl:40\n  Test threw
    exception\n  Expression: candidate(1000) == "1"\n  BoundsError: attempt to access
    1000-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @
    ./array.jl:861 [inlined]\n   [2] solve(N::Int64)\n     @ Main /tmp/tmpr1qqh6v_.jl:25\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpr1qqh6v_.jl:40 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpr1qqh6v_.jl:39\ntest set: Error
    During Test at /tmp/tmpr1qqh6v_.jl:41\n  Test threw exception\n  Expression: candidate(150)
    == "110"\n  BoundsError: attempt to access 150-element Vector{Int64} at index
    [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] solve(N::Int64)\n     @
    Main /tmp/tmpr1qqh6v_.jl:25\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpr1qqh6v_.jl:41 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpr1qqh6v_.jl:39\ntest set: Error
    During Test at /tmp/tmpr1qqh6v_.jl:42\n  Test threw exception\n  Expression: candidate(147)
    == "1100"\n  BoundsError: attempt to access 147-element Vector{Int64} at index
    [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] solve(N::Int64)\n     @
    Main /tmp/tmpr1qqh6v_.jl:25\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpr1qqh6v_.jl:42 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpr1qqh6v_.jl:39\ntest set: Error
    During Test at /tmp/tmpr1qqh'
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    end\n    if N ==\
    \ 0\n        return \"0\"\n    end\n    \n    digits = zeros(Int, N+1)\n    digits[1]\
    \ = 1\n    \n    for i = 2:N\n        digits[i] = digits[i-1] * 2\n    end\n \
    \   \n    digits[N] = 0\n    \n    return join(digits, \"\")\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t\
    @test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333)\
    \ == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpho_l1y4k.jl:38

    '
  stdout: "test set: Test Failed at /tmp/tmpho_l1y4k.jl:41\n  Expression: candidate(1000)\
    \ == \"1\"\n   Evaluated: \"124816326412825651210242048409681921638432768655361310722621445242881048576209715241943048388608167772163355443267108864134217728268435456536870912107374182421474836484294967296858993459217179869184343597383686871947673613743895347227487790694454975581388810995116277762199023255552439804651110487960930222081759218604441635184372088832703687441776641407374883553282814749767106565629499534213121125899906842624225179981368524845035996273704969007199254740992180143985094819843602879701896396872057594037927936144115188075855872288230376151711744576460752303423488115292150460684697623058430092136939524611686018427387904-92233720368547758080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\
    \ == \"1\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpho_l1y4k.jl:41 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpho_l1y4k.jl:40\ntest set: Test\
    \ Failed "
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"-1\"\n    \n    if N < 10\n        return tostring(N)\n\
    \    \n    digits = digits(N)\n    \n    if length(digits) < 2\n        return\
    \ tostring(N)\n    \n    digits = reverse(digits)\n    \n    sum = 0\n    \n \
    \   for i in digits\n        sum += tointeger(i)\n    \n    return tostring(sum)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplyzbsnlr.jl:1\nin expression starting at /tmp/tmplyzbsnlr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        throw(ArgumentError(\"N must be positive\"))\n    \n\
    \    digits = zeros(Int, 10)\n    digits[1] = 1\n    \n    for i = 2:N\n     \
    \   digits[i] = digits[i-1] * 2\n    end\n    \n    sum = \"\"\n    for i = 2:length(digits)\n\
    \        sum = sum + string(digits[i-1], digits[i])\n    end\n    \n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solve(0) == \"1\"\n@assert\
    \ solve(1) == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"111\"\n\
    @assert solve(4) == \"1001\"\n@assert solve(5) == \"10101\"\n@assert solve(6)\
    \ == \"111001\"\n@assert solve(7) == \"1110101\"\n@assert solve(8) == \"111101001\"\
    \n@assert solve(9) == \"1111010101\"\n@assert solve(10) == \"111101101001\"\n\
    @assert solve(11) == \"1111011010101\"\n@assert solve(12) == \"111101101101001\"\
    \n@assert solve(13) == \"1111011011010101\"\n@assert solve(14) == \"111101101101101001\"\
    \n@assert solve(15) == \"1111011011011010101\"\n@assert solve(16) == \"111101101101101101001\"\
    \n@assert solve(17) == \"1111011011011011010101\"\n@assert solve(18) == \"111101101101101101101001\"\
    \n@assert solve(19) == \"1111011011011011011010101\"\n@assert solve(20) == \"\
    111101101101101101101101001\"\n@assert solve(21) == \"1111011011011011011011010101\"\
    \n@assert solve(22) == \"111101101101101101101101101001\"\n@assert solve(23) ==\
    \ \"1111011011011011011011011010101\"\n@assert solve(24) == \"111101101101101101101101101101001\"\
    \n@assert solve(25) == \"1111011011011011011011011011010101\"\n@assert solve(26)\
    \ == \"111101101101101101101101101101101001\"\n@assert solve(27) == \"1111011011011011011011011011011010101\"\
    \n@assert solve(28) == \"111101101101101101101101101101101101001\"\n@assert solve(29)\
    \ == \"1111011011011011011011011011011010101\"\n@assert solve(30) == \"111101101101101101101101101101101101001\"\
    \n@assert solve(31) == \"11110\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpukdsumjj.jl:35\nin expression starting at\
    \ /tmp/tmpukdsumjj.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"-1\"\n    \n    digits = zeros(Int, N)\n  \
    \  \n    for i = 1:N\n        digits[i] = digits[i-1] + N % 2\n        N = N /\
    \ 2\n    end\n    \n    digits = digits[digits[1:end-1]]\n    \n    return join(digits,\
    \ \"\")\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n\
    </cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(151)\n</cell>\n<code language=julia-1.5>\n\
    solve(152)\n</cell>\n<code language=julia-1.5>\nsolve(153)\n</cell>\n<code language=julia-1.5>\n\
    solve(154)\n</cell>\n<code language=julia-1.5>\nsolve(155)\n</cell>\n<code language=julia-1.5>\n\
    solve(156)\n</cell>\n<code language=julia-1.5>\nsolve(157)\n</cell>\n<code language=julia-1.5>\n\
    solve(158)\n</cell>\n<code language=julia-1.5>\nsolve(159)\n</cell>\n<code language=julia-1.5>\n\
    solve(160)\n</cell>\n<code language=julia-1.5>\nsolve(161)\n</cell>\n<code language=julia-1.5>\n\
    solve(162)\n</cell>\n<code language=julia-1.5>\nsolve(163)\n</cell>\n<code language=julia-1.5>\n\
    solve(164)\n</cell>\n<code language=julia-1.5>\nsolve(165)\n</cell>\n<code language=julia-1.5>\n\
    solve(166)\n</cell>\n<code language=julia-1.5>\nsolve(167)\n</cell>\n<code language=julia-1.5>\n\
    solve(168)\n</cell>\n<code language=julia-1.5>\nsolve(169)\n</cell>\n<code language=julia-1.5>\n\
    solve(170)\n</cell>\n<code language=julia-1.5>\nsolve(171)\n</cell>\n<code language=julia-1.5>\n\
    solve(172)\n</cell>\n<code language=julia-1.5>\nsolve(173)\n</cell>\n<code language=julia-1.5>\n\
    solve(174)\n</cell>\n<code language=julia-1.5>\nsolve(175)\n</cell>\n<code language=julia-1.5>\n\
    solve(176)\n</cell>\n<code language=julia-1.5>\nsolve(\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4nhtfgj9.jl:32\nin expression starting at\
    \ /tmp/tmp4nhtfgj9.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    digits = digits(N)\n    \n    binary = \"\"\n    \n    for digit\
    \ in digits\n        binary = binary + digit\n    \n    return binary\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\nProblem 7: Binary\
    \ to Decimal\nThe binary number represented is given by the string \"010011101\"\
    . \nThe decimal number represented is given by the sum of the digits in the binary\
    \ number. \nThe binary number \"1110\" is equivalent to the decimal number 52.\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfxjuc4yt.jl:28\nin expression starting at\
    \ /tmp/tmpfxjuc4yt.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    binary = \"\"\n    \n    if N < 0\n        error(\"N must be positive\"\
    )\n    \n    if N == 0\n        binary = \"0\"\n    \n    if N < 10\n        binary\
    \ = \"0\"\n    \n    if N < 100\n        binary = \"1\"\n    \n    if N < 1000\n\
    \        binary = \"10\"\n    \n    if N < 10000\n        binary = \"11\"\n  \
    \  \n    if N < 100000\n        binary = \"100\"\n    \n    if N < 1000000\n \
    \       binary = \"101\"\n    \n    if N < 10000000\n        binary = \"110\"\n\
    \    \n    if N < 100000000\n        binary = \"111\"\n    \n    if N < 1000000000\n\
    \        binary = \"1000\"\n    \n    if N < 10000000000\n        binary = \"\
    1001\"\n    \n    if N < 100000000000\n        binary = \"1010\"\n    \n    if\
    \ N < 1000000000000\n        binary = \"1011\"\n    \n    if N < 10000000000000\n\
    \        binary = \"1100\"\n    \n    if N < 100000000000000\n        binary =\
    \ \"1101\"\n    \n    if N < 1000000000000000\n        binary = \"1110\"\n   \
    \ \n    if N < 10000000000000000\n        binary = \"1111\"\n    \n    return\
    \ binary\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbk8am5ta.jl:1\nin expression starting at /tmp/tmpbk8am5ta.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    end\n    \n    digits\
    \ = zeros(Int, N)\n    \n    for i = 1:N\n        digits[i] = digits[i-1] + N\
    \ % 2\n        N = N / 2\n    end\n    \n    digits[end] = digits[end] + N % 2\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[digits[1:end-1] .!=\
    \ digits[2:end-1]]\n    \n    return join(digits, \"\")\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpc3gnqimh.jl:42\n  Test threw
    exception\n  Expression: candidate(1000) == "1"\n  BoundsError: attempt to access
    1000-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @
    ./array.jl:861 [inlined]\n   [2] solve(N::Int64)\n     @ Main /tmp/tmpc3gnqimh.jl:25\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc3gnqimh.jl:42 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc3gnqimh.jl:41\ntest set: Error
    During Test at /tmp/tmpc3gnqimh.jl:43\n  Test threw exception\n  Expression: candidate(150)
    == "110"\n  BoundsError: attempt to access 150-element Vector{Int64} at index
    [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] solve(N::Int64)\n     @
    Main /tmp/tmpc3gnqimh.jl:25\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc3gnqimh.jl:43 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc3gnqimh.jl:41\ntest set: Error
    During Test at /tmp/tmpc3gnqimh.jl:44\n  Test threw exception\n  Expression: candidate(147)
    == "1100"\n  BoundsError: attempt to access 147-element Vector{Int64} at index
    [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] solve(N::Int64)\n     @
    Main /tmp/tmpc3gnqimh.jl:25\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpc3gnqimh.jl:44 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpc3gnqimh.jl:41\ntest set: Error
    During Test at /tmp/tmpc3gnq'
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    \n    digits = zeros(Int, 10)\n  \
    \  digits[1] = 1\n    digits[2] = 1\n    digits[3] = 1\n    digits[4] = 1\n  \
    \  digits[5] = 1\n    digits[6] = 1\n    digits[7] = 1\n    digits[8] = 1\n  \
    \  digits[9] = 1\n    \n    sum = 0\n    for i in digits[2:end]\n        sum +=\
    \ i\n    \n    return String(digits[2:end], digits[end])\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\nProblem 7\nWrite\
    \ a Julia function called sumdigits(N) that returns the sum of its digits in binary.\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpoz26e9et.jl:38\nin expression starting at\
    \ /tmp/tmpoz26e9et.jl:38\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    binary = \"\"\n    \n    if N < 0\n        error(\"N must be positive\"\
    )\n    \n    if N == 0\n        binary = \"0\"\n    \n    if N < 10\n        binary\
    \ = \"0\"\n    \n    if N < 100\n        binary = \"1\"\n    \n    if N < 1000\n\
    \        binary = \"10\"\n    \n    if N < 10000\n        binary = \"11\"\n  \
    \  \n    if N < 100000\n        binary = \"100\"\n    \n    if N < 1000000\n \
    \       binary = \"101\"\n    \n    if N < 10000000\n        binary = \"110\"\n\
    \    \n    if N < 100000000\n        binary = \"111\"\n    \n    if N < 1000000000\n\
    \        binary = \"1000\"\n    \n    if N < 10000000000\n        binary = \"\
    1001\"\n    \n    if N < 100000000000\n        binary = \"1010\"\n    \n    if\
    \ N < 1000000000000\n        binary = \"1011\"\n    \n    if N < 10000000000000\n\
    \        binary = \"1100\"\n    \n    if N < 100000000000000\n        binary =\
    \ \"1101\"\n    \n    if N < 1000000000000000\n        binary = \"1110\"\n   \
    \ \n    if N < 10000000000000000\n        binary = \"1111\"\n    \n    return\
    \ binary\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn2eotikg.jl:77\nin expression starting at\
    \ /tmp/tmpn2eotikg.jl:77\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    binary = \"\"\n    \n    if N < 0\n        return \"-1\"\n    \n\
    \    if N == 0\n        return \"0\"\n    \n    if N == 1\n        return \"1\"\
    \n    \n    digits = floor(log10(N))\n    \n    if digits == 0\n        digits\
    \ = 1\n    \n    digits = digits - 1\n    \n    digits = floor(digits)\n    \n\
    \    digits = digits + 1\n    \n    digits = floor(digits)\n    \n    digits =\
    \ digits - 1\n    \n    digits = floor(digits)\n    \n    digits = digits - 1\n\
    \    \n    digits = floor(digits)\n    \n    digits = digits - 1\n    \n    digits\
    \ = floor(digits)\n    \n    digits = digits - 1\n    \n    digits = floor(digits)\n\
    \    \n    digits = digits - 1\n    \n    digits = floor(digits)\n    \n    digits\
    \ = digits - 1\n    \n    digits = floor(digits)\n    \n    digits = digits -\
    \ 1\n    \n    digits = floor(digits)\n    \n    digits = digits - 1\n    \n \
    \   digits = floor(digits)\n    \n    digits = digits - 1\n    \n    digits =\
    \ floor(digits)\n    \n    digits = digits - 1\n    \n    digits = floor(digits)\n\
    \    \n    digits = digits - 1\n    \n    digits = floor(digits)\n    \n    digits\
    \ = digits - 1\n    \n    digits = floor(digits)\n    \n    digits = digits -\
    \ 1\n    \n    digits = floor(digits)\n    \n    digits = digits - 1\n    \n \
    \   digits = floor(digits)\n    \n    digits = digits - 1\n    \n    digits =\
    \ floor(digits)\n    \n    digits = digits - 1\n    \n    digits = floor(digits)\n\
    \    \n    digits = digits - 1\n    \n    digits = floor(digits)\n    \n    digits\
    \ = digits - 1\n    \n    digits = floor(digits)\n    \n    digits = digits -\
    \ 1\n    \n    digits = floor(digits)\n    \n    digits = digits - 1\n    \n \
    \   digits = floor(digits)\n    \n    digits = digits - 1\n    \n    digits =\
    \ floor(digits)\n    \n    digits = digits - 1\n    \n    digits = floor(digits)\n\
    \    \n    digits = digits - 1\n    \n    digits = floor(digits)\n    \n    digits\
    \ = digits - 1\n    \n    digits = floor(digits)\n    \n    digits = digits -\
    \ 1\n    \n    digit\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfmfqtrft.jl:1\nin expression starting at /tmp/tmpfmfqtrft.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjx4l4zyt.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjx4l4zyt.jl:1\n\
    in expression starting at /tmp/tmpjx4l4zyt.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    if N < 10\n        return string(\"\
    0\", N)\n    if N < 100\n        return string(\"1\", N - 10)\n    if N < 1000\n\
    \        return string(\"10\", N - 100)\n    if N < 10000\n        return string(\"\
    11\", N - 1000)\n    if N < 100000\n        return string(\"100\", N - 10000)\n\
    \    if N < 1000000\n        return string(\"1000\", N - 100000)\n    if N < 10000000\n\
    \        return string(\"10000\", N - 1000000)\n    if N < 100000000\n       \
    \ return string(\"100000\", N - 10000000)\n    if N < 1000000000\n        return\
    \ string(\"1000000\", N - 1000000000)\n    if N < 10000000000\n        return\
    \ string(\"10000000\", N - 1000000000)\n    if N < 100000000000\n        return\
    \ string(\"100000000\", N - 1000000000)\n    if N < 1000000000000\n        return\
    \ string(\"1000000000\", N - 1000000000)\n    if N < 10000000000000\n        return\
    \ string(\"10000000000\", N - 1000000000)\n    if N < 100000000000000\n      \
    \  return string(\"100000000000\", N - 1000000000)\n    if N < 1000000000000000\n\
    \        return string(\"1000000000000\", N - 1000000000)\n    if N < 10000000000000000\n\
    \        return string(\"10000000000000\", N - 1000000000)\n    if N < 100000000000000000\
    \ \n        return string(\"100000000000000\", N - 1000000000)\n    if N < 100000000000000000\n\
    \        return string(\"1000000000000000\", N - 1000000000)\n    if N < 1000000000000000000\n\
    \        return string(\"10000000000000000\", N - 1000000000)\n    if N < 10000000000000000000\n\
    \        return string(\"10000000000000000\", N - 1000000000)\n    if N < 100000000000000000000\n\
    \        return string(\"100000000000000000\", N - 1000000000)\n    if N < 1000000000000000000000\n\
    \        return string(\"1000000000000000000\", N - 1000000000)\n    if N < 10000000000000000000000\n\
    \        return string(\"10000000000000000000\", N - 1000000000)\n    if N < 100000000000000000000000\n\
    \        return string(\"100000000000000000000\", N - 1000000000)\n    if N <\
    \ 1000000000000000000000000\n        return string(\"1000000000000000000000\"\
    , N - 1000000000)\n    if N < 100000000000000000000000000\n        return string(\"\
    100000000000000000000000\", N - 1000000000)\n    if N < 1000000000000000000000000000\n\
    \        return string(\"1000000000000000000000000\", N - 1000000000)\n    if\
    \ N < 10000000000000000000000000000\n        return string(\"100000000000000000000000000\"\
    , N - \nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr49j91h9.jl:78\nin expression starting at\
    \ /tmp/tmpr49j91h9.jl:78\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"-1\"\n    if N == 0\n        return \"0\"\n\
    \    if N < 10\n        return string(\"0\", N)\n    \n    digits = string(\"\
    0\", N)\n    digits = digits[2:end]\n    \n    digits = digits[digits[1:end-1]\
    \ + digits[2:end-1]]\n    \n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=juli\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6kdtvdag.jl:32\nin expression starting at\
    \ /tmp/tmp6kdtvdag.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    end\n    \n    digits\
    \ = zeros(Int, 10)\n    digits[1] = 1\n    digits[2] = 1\n    digits[3] = 1\n\
    \    digits[4] = 1\n    digits[5] = 1\n    digits[6] = 1\n    digits[7] = 1\n\
    \    digits[8] = 1\n    digits[9] = 1\n    \n    sum = 0\n    \n    for i in 1:N\n\
    \        digit = digits[i]\n        sum += digit\n        digits[i] = 0\n    end\n\
    \    \n    return string(digits)\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 3\nWrite a Julia function called solve that\
    \ takes an integer N and returns the number of digits in binary representation\
    \ of N.\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpirl7hss_.jl:43\nin expression starting at\
    \ /tmp/tmpirl7hss_.jl:43\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        throw(DomainError(string(\"N must be positive\")))\n\
    \    \n    digits = zeros(Int, 10)\n    digits[1] = 1\n    \n    for i = 2 to\
    \ N\n        digits[i] = digits[i-1] + digits[i-2]\n    end\n    \n    return\
    \ string(digits)\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t\
    @test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpux3y5sta.jl:24 expected \"\
    end\", got \"N\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpux3y5sta.jl:24\n\
    in expression starting at /tmp/tmpux3y5sta.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        throw(DomainError(string(\"N must be positive\")))\n\
    \    \n    if N == 0\n        return \"0\"\n    \n    digits = zeros(Int, N)\n\
    \    digits[1] = 1\n    \n    for i = 2:N\n        digits[i] = digits[i-1]*10\
    \ + digits[i-2]\n    end\n    \n    return string(digits)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert solve(100) == \"1\"\n@assert solve(150) == \"110\"\
    \n@assert solve(147) == \"1100\"\n</cell>\n<text>\nProblem 7\nA palindromic number\
    \ reads the same both ways. The largest palindrome made from the product of two\
    \ 2-digit numbers is 9009 = 91 \xD7 99.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmlt9stdc.jl:33\nin expression starting at\
    \ /tmp/tmpmlt9stdc.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        throw(ArgumentError(\"N must be positive\"))\n    \n\
    \    if N == 0\n        return \"0\"\n    \n    digits = zeros(Int, 10)\n    digits[1]\
    \ = 1\n    \n    for i = 2:N\n        digits[i] = digits[i-1] * 10 + digits[i-2]\n\
    \    end\n    \n    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7\nA palindromic number reads the same both\
    \ ways. The largest palindrome made from the product of two 2-digit numbers is\
    \ 9009 = 91 \xD7 99.\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4eth2yma.jl:33\nin expression starting at\
    \ /tmp/tmp4eth2yma.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    end\n    \n    digits\
    \ = zeros(Int, N)\n    digits[1] = 1\n    \n    for i = 2:N\n        digits[i]\
    \ = digits[i-1] * 10 + digits[i-2]\n    end\n    \n    return join(digits, \"\"\
    )\nend\n</cell>\n<text>\nExercise 2\nWrite a Julia function that takes a positive\
    \ integer N and returns the number of digits in binary representation of N. For\
    \ example, solve(1000) should return 3.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8dwxl5rx.jl:31\nin expression starting at\
    \ /tmp/tmp8dwxl5rx.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N == 0 \n        return \"0\"\n    if N < 0 \n        return \"0\"\n\
    \    if N < 10 \n        return string(\"0\", N)\n    if N < 100 \n        return\
    \ string(\"1\", N - 10)\n    if N < 1000 \n        return string(\"1\", N - 100)\
    \ + string(\"0\", N - 10)\n    if N < 10000 \n        return string(\"1\", N -\
    \ 1000) + string(\"0\", N - 100) + string(\"0\", N - 10)\n    if N < 100000 \n\
    \        return string(\"1\", N - 10000) + string(\"0\", N - 1000) + string(\"\
    0\", N - 100) + string(\"0\", N - 10)\n    if N < 1000000 \n        return string(\"\
    1\", N - 100000) + string(\"0\", N - 10000) + string(\"0\", N - 1000) + string(\"\
    0\", N - 100) + string(\"0\", N - 10)\n    if N < 10000000 \n        return string(\"\
    1\", N - 10000000) + string(\"0\", N - 100000) + string(\"0\", N - 10000) + string(\"\
    0\", N - 1000) + string(\"0\", N - 100) + string(\"0\", N - 10)\n    if N < 100000000\
    \ \n        return string(\"1\", N - 100000000) + string(\"0\", N - 10000000)\
    \ + string(\"0\", N - 10000) + string(\"0\", N - 1000) + string(\"0\", N - 100)\
    \ + string(\"0\", N - 10)\n    if N < 1000000000 \n        return string(\"1\"\
    , N - 1000000000) + string(\"0\", N - 100000000) + string(\"0\", N - 10000) +\
    \ string(\"0\", N - 1000) + string(\"0\", N - 100) + string(\"0\", N - 10)\n \
    \   if N < 10000000000 \n        return string(\"1\", N - 10000000000) + string(\"\
    0\", N - 1000000000) + string(\"0\", N - 10000) + string(\"0\", N - 1000) + string(\"\
    0\", N - 100) + string(\"0\", N - 10)\n    if N < 100000000000 \n        return\
    \ string(\"1\", N - 100000000000) + string(\"0\", N - 10000000000) + string(\"\
    0\", N - 10000) + string(\"0\", N - 1000) + string(\"0\", N - 100) + string(\"\
    0\", N - 10)\n    if N < 1000000000000 \n        return string(\"1\", N - 1000000000000)\
    \ + string(\"0\", N - 100000000000) + string(\"0\", N - 10000) + string(\"0\"\
    , N - 1000) + string(\"0\", N - 100) + string(\"0\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppgakfe6x.jl:51\nin expression starting at\
    \ /tmp/tmppgakfe6x.jl:51\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    digits = digits(N)\n    \n    if digits.length == 0 \n        return\
    \ \"0\"\n    \n    digits = digits[0..digits.length-1]\n    \n    sum = 0\n  \
    \  for i in digits\n        sum += i\n    \n    return toBinary(sum)\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(151)\n</cell>\n<code language=julia-1.5>\nsolve(152)\n</cell>\n<code language=julia-1.5>\n\
    solve(153)\n</cell>\n<code language=julia-1.5>\nsolve(154)\n</cell>\n<code language=julia-1.5>\n\
    solve(155)\n</cell>\n<code language=julia-1.5>\nsolve(156)\n</cell>\n<code language=julia-1.5>\n\
    solve(157)\n</cell>\n<code language=julia-1.5>\nsolve(158)\n</cell>\n<code language=julia-1.5>\n\
    solve(159)\n</cell>\n<code language=julia-1.5>\nsolve(160)\n</cell>\n<code language=julia-1.5>\n\
    solve(161)\n</cell>\n<code language=julia-1.5>\nsolve(162)\n</cell>\n<code language=julia-1.5>\n\
    solve(163)\n</cell>\n<code language=julia-1.5>\nsolve(164)\n</cell>\n<code language=julia-1.5>\n\
    solve(165)\n</cell>\n<code language=julia-1.5>\nsolve(166)\n</cell>\n<code language=julia-1.5>\n\
    solve(167)\n</cell>\n<code language=julia-1.5>\nsolve(168)\n</cell>\n<code language=julia-1.5>\n\
    solve(169)\n</cell>\n<code language=julia-1.5>\nsolve(170)\n</cell>\n<code language=julia-1.5>\n\
    solve(171)\n</cell>\n<code language=julia-1.5>\nsolve(172)\n</cell>\n<code language=julia-1.5>\n\
    solve(173)\n</cell>\n<code language=julia-1.5>\nsolve(174)\n</cell>\n<code language=julia-1.5>\n\
    solve(175)\n</cell>\n<code language=julia-1.5>\nsolve(176)\n</cell>\n<code language=julia-1.5>\n\
    solve(177)\n</cell>\n<code language=julia-1.5\nusing Test\n\n@testset begin\n\n\
    candidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_yv8nfg0.jl:32\nin expression starting at\
    \ /tmp/tmp_yv8nfg0.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    digits = digits(N)\n    \n    sum = 0\n    for digit in digits\n\
    \        sum += digit\n        \n    return bin(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"\
    11\"\n@assert solve(4) == \"100\"\n@assert solve(5) == \"101\"\n@assert solve(6)\
    \ == \"110\"\n@assert solve(7) == \"111\"\n@assert solve(8) == \"1000\"\n@assert\
    \ solve(9) == \"1001\"\n@assert solve(10) == \"1010\"\n@assert solve(11) == \"\
    1011\"\n@assert solve(12) == \"1100\"\n@assert solve(13) == \"1101\"\n@assert\
    \ solve(14) == \"1110\"\n@assert solve(15) == \"1111\"\n@assert solve(16) == \"\
    10000\"\n@assert solve(17) == \"10001\"\n@assert solve(18) == \"10010\"\n@assert\
    \ solve(19) == \"10011\"\n@assert solve(20) == \"10100\"\n@assert solve(21) ==\
    \ \"10101\"\n@assert solve(22) == \"10110\"\n@assert solve(23) == \"10111\"\n\
    @assert solve(24) == \"11100\"\n@assert solve(25) == \"11101\"\n@assert solve(26)\
    \ == \"11110\"\n@assert solve(27) == \"11111\"\n@assert solve(28) == \"100001\"\
    \n@assert solve(29) == \"100002\"\n@assert solve(30) == \"100003\"\n@assert solve(31)\
    \ == \"100004\"\n@assert solve(32) == \"100005\"\n@assert solve(33) == \"100006\"\
    \n@assert solve(34) == \"100007\"\n@assert solve(35) == \"100008\"\n@assert solve(36)\
    \ == \"100009\"\n@assert solve(37) == \"100010\"\n@assert solve(38) == \"100011\"\
    \n@assert solve(39) == \"100012\"\n@assert solve(40) == \"100013\"\n@assert solve(41)\
    \ == \"100014\"\n@assert solve(42) == \"100015\"\n@assert solve(43) == \"100016\"\
    \n@assert solve(44) == \"100017\"\n@assert solve(45) == \"100018\"\n@assert solve(46)\
    \ == \"100019\"\n@assert solve(47) == \"100020\"\n@assert solve(48) == \"100021\"\
    \n@assert solve(49) == \"100022\"\n@assert solve(50) == \"100023\"\n@assert solve(51)\
    \ == \"100024\"\n@assert solve(52) == \"100025\"\n@assert solve(53) == \"100026\"\
    \n@assert solve(54) == \"100027\"\n@assert solve(55) == \"100028\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t\
    @test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333)\
    \ == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa7fdz3gp.jl:27\nin expression starting at\
    \ /tmp/tmpa7fdz3gp.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        return \"-1\"\n    \n    if N == 0\n        return\
    \ \"0\"\n    \n    if N == 1\n        return \"1\"\n    \n    if N == 2\n    \
    \    return \"10\"\n    \n    if N == 3\n        return \"11\"\n    \n    if N\
    \ == 4\n        return \"100\"\n    \n    if N == 5\n        return \"101\"\n\
    \    \n    if N == 6\n        return \"110\"\n    \n    if N == 7\n        return\
    \ \"111\"\n    \n    if N == 8\n        return \"1000\"\n    \n    if N == 9\n\
    \        return \"1001\"\n    \n    if N == 10\n        return \"1010\"\n    \n\
    \    if N == 11\n        return \"1011\"\n    \n    if N == 12\n        return\
    \ \"1100\"\n    \n    if N == 13\n        return \"1101\"\n    \n    if N == 14\n\
    \        return \"1110\"\n    \n    if N == 15\n        return \"1111\"\n    \n\
    \    if N == 16\n        return \"10000\"\n    \n    if N == 17\n        return\
    \ \"10001\"\n    \n    if N == 18\n        return \"10010\"\n    \n    if N ==\
    \ 19\n        return \"10011\"\n    \n    if N == 20\n        return \"10100\"\
    \n    \n    if N == 21\n        return \"10101\"\n    \n    if N == 22\n     \
    \   return \"10110\"\n    \n    if N == 23\n        return \"10111\"\n    \n \
    \   if N == 24\n        return \"11000\"\n    \n    if N == 25\n        return\
    \ \"11001\"\n    \n    if N == 26\n        return \"11010\"\n    \n    if N ==\
    \ 27\n        return \"11011\"\n    \n    if N == 28\n        return \"11100\"\
    \n    \n    if N == 29\n        return \"11101\"\n    \n    if N == 30\n     \
    \   return \"11111\"\n    \n    if N == 31\n        return \"100000\"\n    \n\
    \    if N == 32\n        return \"100001\"\n    \n    if N == 33\n        return\
    \ \"100010\"\n    \n    if N == 34\n        return \"100011\"\n    \n    if N\
    \ == 35\n        return \"100100\"\n    \n    if N == 36\n        return \"100101\"\
    \n    \n    if N == 37\n        return \"100110\"\n    \n    if N == 38\n    \
    \    return \"100111\"\n    \n    if N == 39\n        return \"101000\"\n    \n\
    \    if N == 40\n        return \"101001\"\n    \n    if N == 41\n        return\
    \ \"101010\"\n    \n    if N == 42\n        return \"101011\"\n    \n    if N\
    \ == 43\n        return \"101100\"\n    \n    if N == 44\n        return \"101101\"\
    \n    \n    if \nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing condition in \"if\" at /tmp/tmpmocu6hy6.jl:157\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpmocu6hy6.jl:158\nin expression\
    \ starting at /tmp/tmpmocu6hy6.jl:158\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    end\n    \n    binary\
    \ = \"\"\n    \n    for d in digits(N)\n        binary += string(d[1])\n    end\n\
    \    \n    return binary\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at '''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    digits = zeros(Int, N+1)\n    digits[1] = 1\n    \n    for i = 2\
    \ to N\n        digits[i] = digits[i-1] + digits[i-2]\n    end\n    \n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n@assert solve(1)\
    \ == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"111\"\n@assert solve(4)\
    \ == \"1001\"\n@assert solve(5) == \"10101\"\n@assert solve(6) == \"11000\"\n\
    @assert solve(7) == \"110000\"\n@assert solve(8) == \"1100001\"\n@assert solve(9)\
    \ == \"1100010\"\n@assert solve(10) == \"11000100\"\n@assert solve(11) == \"110001000\"\
    \n@assert solve(12) == \"1100010000\"\n@assert solve(13) == \"11000100000\"\n\
    @assert solve(14) == \"110001000000\"\n@assert solve(15) == \"1100010000000\"\n\
    @assert solve(16) == \"11000100000000\"\n@assert solve(17) == \"110001000000000\"\
    \n@assert solve(18) == \"1100010000000000\"\n@assert solve(19) == \"11000100000000000\"\
    \n@assert solve(20) == \"110001000000000000\"\n@assert solve(21) == \"1100010000000000000\"\
    \n@assert solve(22) == \"11000100000000000000\"\n@assert solve(23) == \"110001000000000000000\"\
    \n@assert solve(24) == \"1100010000000000000000\"\n@assert solve(25) == \"11000100000000000000000\"\
    \n@assert solve(26) == \"110001000000000000000000\"\n@assert solve(27) == \"1100010000000000000000000\"\
    \n@assert solve(28) == \"11000100000000000000000000\"\n@assert solve(29) == \"\
    110001000000000000000000000\"\n@assert solve(30) == \"1100010000000000000000000000\"\
    \n@assert solve(31) == \"11000100000000000000000000000\"\n@assert solve(32) ==\
    \ \"110001000000000000000000000000\"\n@assert solve(33) == \"1100010000000000000000000000000\"\
    \n@assert solve(34) == \"11000100000000000000000000000000\"\n@assert solve(35)\
    \ == \"110001000000000000000000000000000\"\n@assert solve(36) == \"1100010000000000000000000000000000\"\
    \n@assert solve(37) == \"11000100000000000000000000000000000\"\n@assert solve(38)\
    \ == \"110001000000000000000000000000000000\"\n@assert solve(39) == \"1100010000000000000000000000000000000\"\
    \n@assert solve(40) == \"11000100000000000000000000000000000000\"\n@assert solve(41)\
    \ == \"110001000000000000000000000000000000000\"\n@assert solve(42) == \"110001000000000000000000\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpztdp20yx.jl:22 expected \"\
    end\", got \"N\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpztdp20yx.jl:22\n\
    in expression starting at /tmp/tmpztdp20yx.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N == 0 \n        return \"0\"\n    \n    digits = N % 10\n    N = N\
    \ / 10\n    \n    digits = solve(digits)\n    \n    return digits + string(N %\
    \ 2)\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\n\
    Problem 8\nA palindromic number reads the same both ways. The largest palindrome\
    \ made from the product of two 2-digit numbers is 9009 = 91 \xD7 99.\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t\
    @test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333)\
    \ == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgo2ubtgk.jl:28\nin expression starting at\
    \ /tmp/tmpgo2ubtgk.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    if N < 10\n        return string(\"\
    0\", N)\n    \n    digits = string(\"0\", N)\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t\
    @test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkokqgs_5.jl:1\nin expression starting at /tmp/tmpkokqgs_5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    digits = digits(N)\n    \n    if N == 0 \n        return \"0\"\n\
    \    \n    if N < 0 \n        return \"0\"\n    \n    sum = 0\n    \n    for i\
    \ in digits\n        sum += i\n    \n    return bin(sum)[2:]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t\
    @test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333)\
    \ == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpcgp0gkqc.jl:32\nin expression\
    \ starting at /tmp/tmpcgp0gkqc.jl:32\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        throw(DomainError(string(\"N must be positive\")))\n\
    \    end\n    \n    binary = \"\"\n    \n    for i = 1:N\n        binary = string(binary,\
    \ i) + string(i, 2)\n    end\n    \n    return binary\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpj_bh18gf.jl:35\n  Test threw
    exception\n  Expression: candidate(1000) == "1"\n  MethodError: no method matching
    +(::String, ::String)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any,
    !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n  Stacktrace:\n   [1]
    solve(N::Int64)\n     @ Main /tmp/tmpj_bh18gf.jl:25\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpj_bh18gf.jl:35 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpj_bh18gf.jl:34\n'''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        return \"0\"\n    \n    if N < 10\n        return\
    \ string(\"0\", N)\n    \n    digits = string(\"0\", N)\n    \n    for i = 1:N\n\
    \        digits = digits[1:] + string(\"1\", N - i)\n    end\n    \n    return\
    \ digits\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_xv3oylp.jl:28\nin expression\
    \ starting at /tmp/tmp_xv3oylp.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    digits = digits(N)\n    \n    if N == 0 \n        return \"0\"\n\
    \    \n    if N < 0 \n        return \"0\"\n    \n    if N < 10 \n        return\
    \ digits[1]\n    \n    sum = 0\n    \n    for digit in digits\n        sum +=\
    \ digit\n    \n    return digits[1] * digits[2] * digits[3] * digits[4] * digits[5]\
    \ * digits[6] * digits[7] * digits[8] * digits[9] * digits[10] * digits[11] *\
    \ digits[12] * digits[13] * digits[14] * digits[15] * digits[16] * digits[17]\
    \ * digits[18] * digits[19] * digits[20] * digits[21] * digits[22] * digits[23]\
    \ * digits[24] * digits[25] * digits[26] * digits[27] * digits[28] * digits[29]\
    \ * digits[30] * digits[31] * digits[32] * digits[33] * digits[34] * digits[35]\
    \ * digits[36] * digits[37] * digits[38] * digits[39] * digits[40] * digits[41]\
    \ * digits[42] * digits[43] * digits[44] * digits[45] * digits[46] * digits[47]\
    \ * digits[48] * digits[49] * digits[50] * digits[51] * digits[52] * digits[53]\
    \ * digits[54] * digits[55] * digits[56] * digits[57] * digits[58] * digits[59]\
    \ * digits[60] * digits[61] * digits[62] * digits[63] * digits[64] * digits[65]\
    \ * digits[66] * digits[67] * digits[68] * digits[69] * digits[70] * digits[71]\
    \ * digits[72] * digits[73] * digits[74] * digits[75] * digits[76] * digits[77]\
    \ * digits[78] * digits[79] * digits[80] * digits[81] * digits[82] * digits[83]\
    \ * digits[84] * digits[85] * digits[86] * digits[87] * digits[88] * digits[89]\
    \ * digits[90] * digits[91] * digits[92] * digits[93] * digits[94] * digits[95]\
    \ * digits[96] * digits[97] * digits[98] * digits[99] * digits[100] * digits[101]\
    \ * digits[102] * digits[103] * digits[104] * digits[105] * digits[106] * digits[107]\
    \ * digits[108\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi7b5fq2a.jl:1\nin expression starting at /tmp/tmpi7b5fq2a.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    end\n    \n    digits\
    \ = zeros(Int, N)\n    \n    for i = 1:N\n        digits[i] = digits[i-1] + N\
    \ % 2\n        N = N / 2\n    end\n    \n    digits[N] = digits[N] - 1\n    \n\
    \    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[digits[1:end-1]]\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    digits = digits[\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcn1ue0m6.jl:1\nin expression starting at /tmp/tmpcn1ue0m6.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    if N == 0\n        return \"0\"\n\
    \    if N == 1\n        return \"1\"\n    \n    digits = N % 10\n    N = N / 10\n\
    \    \n    digits = solve(digits)\n    \n    digits = digits + N % 10\n    N =\
    \ N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    digits = digits + \nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t\
    @test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333)\
    \ == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpec1c955a.jl:1\nin expression starting at /tmp/tmpec1c955a.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjx4l4zyt.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjx4l4zyt.jl:1\n\
    in expression starting at /tmp/tmpjx4l4zyt.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    if N < 10\n        return string(\"\
    0\", N)\n    if N < 100\n        return string(\"1\", N - 10)\n    if N < 1000\n\
    \        return string(\"10\", N - 100)\n    if N < 10000\n        return string(\"\
    11\", N - 1000)\n    if N < 100000\n        return string(\"100\", N - 10000)\n\
    \    if N < 1000000\n        return string(\"1000\", N - 100000)\n    if N < 10000000\n\
    \        return string(\"10000\", N - 1000000)\n    if N < 100000000\n       \
    \ return string(\"100000\", N - 10000000)\n    if N < 1000000000\n        return\
    \ string(\"1000000\", N - 100000000)\n    if N < 10000000000\n        return string(\"\
    10000000\", N - 1000000000)\n    if N < 100000000000\n        return string(\"\
    100000000\", N - 1000000000)\n    if N < 1000000000000\n        return string(\"\
    1000000000\", N - 1000000000)\n    if N < 10000000000000\n        return string(\"\
    10000000000\", N - 1000000000)\n    if N < 100000000000000\n        return string(\"\
    100000000000\", N - 1000000000)\n    if N < 1000000000000000\n        return string(\"\
    1000000000000\", N - 1000000000)\n    if N < 10000000000000000\n        return\
    \ string(\"10000000000000\", N - 1000000000)\n    if N < 100000000000000000 \n\
    \        return string(\"100000000000000\", N - 1000000000)\n    if N < 100000000000000000\n\
    \        return string(\"1000000000000000\", N - 1000000000)\n    if N < 1000000000000000000\n\
    \        return string(\"10000000000000000\", N - 1000000000)\n    if N < 10000000000000000000\n\
    \        return string(\"10000000000000000\", N - 1000000000)\n    if N < 100000000000000000000\n\
    \        return string(\"100000000000000000\", N - 1000000000)\n    if N < 1000000000000000000000\n\
    \        return string(\"1000000000000000000\", N - 1000000000)\n    if N < 10000000000000000000000\n\
    \        return string(\"10000000000000000000\", N - 1000000000)\n    if N < 100000000000000000000000\n\
    \        return string(\"100000000000000000000\", N - 1000000000)\n    if N <\
    \ 1000000000000000000000000\n        return string(\"1000000000000000000000\"\
    , N - 1000000000)\n    if N < 100000000000000000000000000\n        return string(\"\
    10000000000000000000000\", N - 1000000000)\n    if N < 1000000000000000000000000000\n\
    \        return string(\"100000000000000000000000\", N - 1000000000)\n    if N\
    \ < 10000000000000000000000000000\n        return string(\"1000000000000000000000000\"\
    , N - \nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph1dzexix.jl:78\nin expression starting at\
    \ /tmp/tmph1dzexix.jl:78\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        return \"0\"\n    \n    if N < 10\n        return\
    \ string(\"0\", N)\n    \n    sum = 0\n    \n    for d in digits(N)\n        sum\
    \ += d\n    \n    return string(\"1\", sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7\nA palindromic number reads the same both\
    \ ways. The largest palindrome made from the product of two 2-digit numbers is\
    \ 9009 = 91 \xD7 99.\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppvrfyi6k.jl:32\nin expression starting at\
    \ /tmp/tmppvrfyi6k.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    \n    digits = N % 10\n    N = N /\
    \ 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = \nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkosjn_6l.jl:1\nin expression starting at /tmp/tmpkosjn_6l.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    end\n    \n    digits\
    \ = zeros(Int, 10)\n    \n    for d in digits[digits[1:end-1]]\n        digits[d]\
    \ = digits[d] + 1\n    end\n    \n    return join(digits, \"\")\nend\n</cell>\n\
    <text>\nProblem 7\nWrite a Julia function that takes a positive integer N and\
    \ returns the number of digits in its binary representation.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5if3mh_v.jl:30\nin expression starting at\
    \ /tmp/tmp5if3mh_v.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    digits = digits(N)\n    \n    if N < 0\n        error(\"N must be\
    \ positive\")\n    end\n    \n    if N == 0\n        return \"0\"\n    end\n \
    \   \n    if N == 1\n        return \"1\"\n    end\n    \n    binary = \"\"\n\
    \    \n    for digit in digits\n        binary = string(binary, digit)\n    end\n\
    \    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t\
    @test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333)\
    \ == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprfdw0sea.jl:41\nin expression starting at\
    \ /tmp/tmprfdw0sea.jl:41\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        return \"0\"\n    \n    digits = zeros(Int, 10)\n\
    \    digits[1] = 1\n    \n    sum = 0\n    \n    for i = 2 to N\n        digits[i]\
    \ = digits[i-1] * 2\n        sum += digits[i]\n    end\n    \n    return string(digits)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmppza8lnqw.jl:27 expected \"\
    end\", got \"N\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppza8lnqw.jl:27\n\
    in expression starting at /tmp/tmppza8lnqw.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    \n    digits = zeros(Int,\
    \ N)\n    \n    for i = 1:N\n        digits[i] = digits[i-1] + N % 2\n       \
    \ N = N / 2\n    end\n    \n    return join(digits, \"\")\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn0zdnmf7.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn0zdnmf7.jl:1\n\
    in expression starting at /tmp/tmpn0zdnmf7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        return \"-1\"\n    \n    if N == 0\n        return\
    \ \"0\"\n    \n    sum = 0\n    \n    while N > 0\n        sum += N % 2\n    \
    \    N = N / 2\n    end\n    \n    return string(sum)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxg1bxdim.jl:1\nin expression starting at /tmp/tmpxg1bxdim.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    digits = N % 10\n    N = N / 10\n    \n    if N == 0 \n        return\
    \ \"0\"\n    \n    digits = solve(digits)\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    if N == 0 \n        return \"0\"\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    if N == 0 \n        return \"0\"\
    \n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N == 0 \n \
    \       return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n   \
    \ \n    if N == 0 \n        return \"0\"\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    if N == 0 \n        return \"0\"\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    if N == 0 \n        return \"0\"\
    \n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N == 0 \n \
    \       return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n   \
    \ \n    if N == 0 \n        return \"0\"\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    if N == 0 \n        return \"0\"\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    if N == 0 \n        return \"0\"\
    \n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N == 0 \n \
    \       return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n   \
    \ \n    if N == 0 \n        return \"0\"\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    if N == 0 \n        return \"0\"\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    if N == 0 \n        return \"0\"\
    \n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N == 0 \n \
    \       return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n   \
    \ \n    if N == 0 \n        return \"0\"\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    if N == 0 \n        return \"0\"\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppboarv6e.jl:1\nin expression starting at /tmp/tmppboarv6e.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"-1\"\n    \n    if N < 10\n        return string(\"\
    0\", N)\n    \n    digits = digits(N)\n    \n    binary = \"\"\n    \n    for\
    \ i in digits\n        binary = binary + string(\"1\", i)\n    \n    return binary\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7p51auam.jl:1\nin expression starting at /tmp/tmp7p51auam.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    if N == 0\n        return \"0\"\n\
    \    if N == 1\n        return \"1\"\n    \n    digits = N % 10\n    N = N / 10\n\
    \    \n    digits = solve(digits)\n    \n    digits = digits + solve(digits)\n\
    \    \n    return digits\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</\nusing Test\n\n\
    @testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkyqsb6qw.jl:34\nin expression starting at\
    \ /tmp/tmpkyqsb6qw.jl:34\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    digits = zeros(Int, N)\n    \n    for i = 1:N\n        digits[i]\
    \ = digits[i-1] + digits[i-1] % 2\n    end\n    \n    digits = digits[digits[1:end-1]]\n\
    \    \n    return join(digits, \"\")\nend\n</cell>\n<text>\nProblem 3\nThe Fibonacci\
    \ sequence is defined by the formula:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgar4g3_m.jl:29\nin expression starting at\
    \ /tmp/tmpgar4g3_m.jl:29\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        throw(DomainError(string(\"N must be positive\")))\n\
    \    end\n    \n    digits = zeros(Int, 10)\n    digits[1] = 1\n    \n    for\
    \ i = 2:N\n        digits[i] = digits[i-1] + digits[i-2]\n    end\n    \n    return\
    \ string(digits)\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t\
    @test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpajgttgqd.jl:36\n  Test threw
    exception\n  Expression: candidate(1000) == "1"\n  BoundsError: attempt to access
    10-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1] getindex\n     @
    ./array.jl:861 [inlined]\n   [2] solve(N::Int64)\n     @ Main /tmp/tmpajgttgqd.jl:26\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpajgttgqd.jl:36 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpajgttgqd.jl:35\ntest set: Error
    During Test at /tmp/tmpajgttgqd.jl:37\n  Test threw exception\n  Expression: candidate(150)
    == "110"\n  BoundsError: attempt to access 10-element Vector{Int64} at index [0]\n  Stacktrace:\n   [1]
    getindex\n     @ ./array.jl:861 [inlined]\n   [2] solve(N::Int64)\n     @ Main
    /tmp/tmpajgttgqd.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpajgttgqd.jl:37 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpajgttgqd.jl:35\ntest set: Error
    During Test at /tmp/tmpajgttgqd.jl:38\n  Test threw exception\n  Expression: candidate(147)
    == "1100"\n  BoundsError: attempt to access 10-element Vector{Int64} at index
    [0]\n  Stacktrace:\n   [1] getindex\n     @ ./array.jl:861 [inlined]\n   [2] solve(N::Int64)\n     @
    Main /tmp/tmpajgttgqd.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpajgttgqd.jl:38 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpajgttgqd.jl:35\ntest set: Error
    During Test at /tmp/tmpajgttgqd.'
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"-1\"\n    if N == 0\n        return \"0\"\n\
    \    if N == 1\n        return \"1\"\n    \n    digits = N % 10\n    N = N / 10\n\
    \    \n    digits = digits + solve(digits)\n    \n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(125)\n</cell>\n<code language=julia-1.5>\n\
    solve(126)\n</cell>\n<code language=julia-1.5>\nsolve(127)\n</cell>\n<code language=julia-1.5>\n\
    solve(129)\n</cell>\n<code language=julia-1.5>\nsolve(130)\n</cell>\n<code language=julia-1.5>\n\
    solve(131)\n</cell>\n<code language=julia-1.5>\nsolve(132)\n</cell>\n<code language=julia-1.5>\n\
    solve(133)\n</cell>\n<code language=julia-1.5>\nsolve(134)\n</cell>\n<code language=julia-1.5>\n\
    solve(135)\n</cell>\n<code language=julia-1.5>\nsolve(136)\n</cell>\n<code language=julia-1.5>\n\
    solve(137)\n</cell>\n<code language=julia-1.5>\nsolve(138)\n</cell>\n<code language=julia-1.5>\n\
    solve(139)\n</cell>\n<code language=julia-1.5>\nsolve(140)\n</cell>\n<code language=julia-1.5>\n\
    solve(141)\n</cell>\n<code language=julia-1.5>\nsolve(142)\n</cell>\n<code language=julia-1.5>\n\
    solve(143)\n</cell>\n<code language=julia-1.5>\nsolve(144)\n</cell>\n<code language=julia-1.5>\n\
    solve(145)\n</cell>\n<code language=julia-1.5>\nsolve(146)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(149)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(151)\n</cell>\n<code language=julia-1.5>\nsolve(152)\n</cell>\n<code language=julia-1.5>\n\
    solve(153)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpytj7wehb.jl:32\nin expression starting at\
    \ /tmp/tmpytj7wehb.jl:32\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    end\n    \n    if\
    \ N == 0\n        return \"0\"\n    end\n    \n    binary = \"\"\n    \n    while\
    \ N > 0\n        binary = string(N % 2) + binary\n        N = N / 2\n    end\n\
    \    \n    return binary\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpxapscv5d.jl:40\n  Test threw
    exception\n  Expression: candidate(1000) == "1"\n  MethodError: no method matching
    +(::String, ::String)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any,
    !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n  Stacktrace:\n   [1]
    solve(N::Int64)\n     @ Main /tmp/tmpxapscv5d.jl:29\n   [2] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [3]
    macro expansion\n     @ /tmp/tmpxapscv5d.jl:40 [inlined]\n   [4] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [5]
    top-level scope\n     @ /tmp/tmpxapscv5d.jl:39\n'''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    \n    binary = \"\
    \"\n    \n    for d in digits(N)\n        binary += d\n    \n    return binary\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnran7p9f.jl:1\nin expression starting at /tmp/tmpnran7p9f.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    end\n    if N ==\
    \ 0\n        return \"0\"\n    end\n    \n    digits = zeros(Int, N)\n    digits[1]\
    \ = 1\n    \n    for i = 2:N\n        digits[i] = digits[i-1] * 2\n    end\n \
    \   \n    sum = 0\n    for i = 2:N\n        sum += digits[i]\n    end\n    \n\
    \    return string(digits, sum)\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"\
    1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\
    \t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk4qrp0zx.jl:39\nin expression starting at\
    \ /tmp/tmpk4qrp0zx.jl:39\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"-1\"\n    if N == 0\n        return \"0\"\n\
    \    if N == 1\n        return \"1\"\n    \n    digits = N % 10\n    N = N / 10\n\
    \    \n    digits = digits + solve(digits)\n    \n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\nProblem 3\nWrite\
    \ a Julia function called solve that takes a positive integer N and returns the\
    \ number of digits in binary representation of N. For example, solve(1000) should\
    \ return 3.\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpre5xzfdl.jl:32\nin expression starting at\
    \ /tmp/tmpre5xzfdl.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        error(\"N must be positive\")\n    end\n    \n\
    \    binary = \"\"\n    \n    for i = 1:N\n        binary = string(binary, i)\
    \ + string(i, 2)\n    end\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 4\nWrite a Julia function called sumdigits(N)\
    \ that returns the sum of its digits in binary.\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6bb6_ngk.jl:31\nin expression starting at\
    \ /tmp/tmp6bb6_ngk.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    digits = digits(N)\n    \n    sum = 0\n    for d in digits\n   \
    \     sum += d\n    \n    return show(sum)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn50yjj2j.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn50yjj2j.jl:1\n\
    in expression starting at /tmp/tmpn50yjj2j.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        return \"0\"\n    \n    digits = digits(N)\n \
    \   \n    if length(digits) < 2\n        return \"0\"\n    \n    digits = reverse(digits)\n\
    \    \n    if digits[1] == \"1\"\n        return \"1\"\n    \n    if digits[1]\
    \ == \"0\"\n        return \"0\"\n    \n    digits = reverse(digits)\n    \n \
    \   if digits[1] == \"1\"\n        return \"1\"\n    \n    if digits[1] == \"\
    0\"\n        return \"0\"\n    \n    digits = reverse(digits)\n    \n    if digits[1]\
    \ == \"1\"\n        return \"1\"\n    \n    if digits[1] == \"0\"\n        return\
    \ \"0\"\n    \n    digits = reverse(digits)\n    \n    if digits[1] == \"1\"\n\
    \        return \"1\"\n    \n    if digits[1] == \"0\"\n        return \"0\"\n\
    \    \n    digits = reverse(digits)\n    \n    if digits[1] == \"1\"\n       \
    \ return \"1\"\n    \n    if digits[1] == \"0\"\n        return \"0\"\n    \n\
    \    digits = reverse(digits)\n    \n    if digits[1] == \"1\"\n        return\
    \ \"1\"\n    \n    if digits[1] == \"0\"\n        return \"0\"\n    \n    digits\
    \ = reverse(digits)\n    \n    if digits[1] == \"1\"\n        return \"1\"\n \
    \   \n    if digits[1] == \"0\"\n        return \"0\"\n    \n    digits = reverse(digits)\n\
    \    \n    if digits[1] == \"1\"\n        return \"1\"\n    \n    if digits[1]\
    \ == \"0\"\n        return \"0\"\n    \n    digits = reverse(digits)\n    \n \
    \   if digits[1] == \"1\"\n        return \"1\"\n    \n    if digits[1] == \"\
    0\"\n        return \"0\"\n    \n    digits = reverse(digits)\n    \n    if digits[1]\
    \ == \"1\"\n        return \"1\"\n    \n    if digits[1] == \"0\"\n        return\
    \ \"0\"\n    \n    digits = reverse(digits)\n    \n    if digits[1] == \"1\"\n\
    \        return \"1\"\n    \n    if digits[1] == \"0\"\n        return \"0\"\n\
    \    \n    digits = reverse(digits)\n    \n    if digits[1] == \"1\"\n       \
    \ return \"1\"\n    \n    if digits[1] == \"0\"\n        return \"0\"\n    \n\
    \    digits = reverse(digits)\n    \n    if digits[1] == \"1\"\n        return\
    \ \"1\"\n    \n    if digits[1] == \"0\"\n        return \"0\"\n    \n    digits\
    \ = reverse(digits)\n    \n    if digits[1] == \"1\"\n        return \"1\"\n \
    \   \n    if digits[1] == \"0\"\n        return \"0\"\n    \n    digits = reverse(digits)\n\
    \    \n    if digits[1] == \"1\"\n        return \"1\"\n    \n    if digits[1]\
    \ == \"0\"\n        return \"0\"\n    \n    digits = reverse(digits)\n    \n \
    \   if digits[1] == \"1\"\n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3w6dg2ib.jl:1\nin expression starting at /tmp/tmp3w6dg2ib.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N == 0 \n        return \"0\"\n    \n    digits = String[1..N]\n  \
    \  \n    binary = digits[0..N-1]\n    \n    binary = reverse(binary)\n    \n \
    \   binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary\
    \ = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n\
    \    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n\
    \    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary\
    \ = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n\
    \    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n\
    \    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary\
    \ = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n\
    \    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n\
    \    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary\
    \ = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n\
    \    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n\
    \    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary\
    \ = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n\
    \    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n\
    \    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary\
    \ = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n\
    \    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n\
    \    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary\
    \ = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n\
    \    \n    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n\
    \    binary = reverse(binary)\n    \n    binary = reverse(binary)\n    \n    binary\
    \ = reverse(binary)\n    \n    \nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp66oxco1z.jl:1\nin expression starting at /tmp/tmp66oxco1z.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        error(\"N must be positive\")\n    \n    binary\
    \ = \"\"\n    \n    while N > 0\n        binary = string(N % 2) + binary\n   \
    \     N = N / 2\n    end\n    \n    return binary\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpspaq07iq.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpspaq07iq.jl:1\n\
    in expression starting at /tmp/tmpspaq07iq.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N == 0 \n        return \"0\"\n    \n    if N < 0 \n        return\
    \ \"0\"\n    \n    if N < 10 \n        return string(\"0\", N)\n    \n    digits\
    \ = string(\"0\", N)\n    \n    digits = digits[1:end-1]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf_m5hu4q.jl:1\nin expression starting at /tmp/tmpf_m5hu4q.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    end\n    \n    digits\
    \ = zeros(Int, 10)\n    digits[1] = 1\n    \n    for i = 2:N\n        digits[i]\
    \ = digits[i-1] * 2\n    end\n    \n    digits = digits[2:end]\n    \n    return\
    \ join(digits, \"\")\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp6jpvlmja.jl:38\n  Test threw
    exception\n  Expression: candidate(1000) == "1"\n  BoundsError: attempt to access
    10-element Vector{Int64} at index [11]\n  Stacktrace:\n   [1] setindex!\n     @
    ./array.jl:903 [inlined]\n   [2] solve(N::Int64)\n     @ Main /tmp/tmp6jpvlmja.jl:26\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6jpvlmja.jl:38 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6jpvlmja.jl:37\ntest set: Error
    During Test at /tmp/tmp6jpvlmja.jl:39\n  Test threw exception\n  Expression: candidate(150)
    == "110"\n  BoundsError: attempt to access 10-element Vector{Int64} at index [11]\n  Stacktrace:\n   [1]
    setindex!\n     @ ./array.jl:903 [inlined]\n   [2] solve(N::Int64)\n     @ Main
    /tmp/tmp6jpvlmja.jl:26\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp6jpvlmja.jl:39 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp6jpvlmja.jl:37\ntest set: Error
    During Test at /tmp/tmp6jpvlmja.jl:40\n  Test threw exception\n  Expression: candidate(147)
    == "1100"\n  BoundsError: attempt to access 10-element Vector{Int64} at index
    [11]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903 [inlined]\n   [2]
    solve(N::Int64)\n     @ Main /tmp/tmp6jpvlmja.jl:26\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp6jpvlmja.jl:40 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp6jpvlmja.jl:37\ntest set: Error During Test at
    /tmp/tmp6jp'
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    \n    digits = zeros(Int, N)\n   \
    \ \n    for i = 1:N\n        digits[i] = digits[i-1] + N % 2\n        N = N /\
    \ 2\n    end\n    \n    digits[N] = digits[N] - 1\n    \n    return join(digits,\
    \ \"\")\nend\n</cell>\n<code language=julia-1.5>\n@assert solve(1) == \"1\"\n\
    @assert solve(2) == \"10\"\n@assert solve(3) == \"111\"\n@assert solve(4) == \"\
    1001\"\n@assert solve(5) == \"1010\"\n@assert solve(6) == \"1011\"\n@assert solve(7)\
    \ == \"10011\"\n@assert solve(8) == \"100101\"\n@assert solve(9) == \"100100\"\
    \n@assert solve(10) == \"1001000\"\n@assert solve(11) == \"10010000\"\n@assert\
    \ solve(12) == \"100100000\"\n@assert solve(13) == \"1001000000\"\n@assert solve(14)\
    \ == \"10010000000\"\n@assert solve(15) == \"100100000000\"\n@assert solve(16)\
    \ == \"1001000000000\"\n@assert solve(17) == \"10010000000000\"\n@assert solve(18)\
    \ == \"100100000000000\"\n@assert solve(19) == \"1001000000000000\"\n@assert solve(20)\
    \ == \"10010000000000000\"\n@assert solve(21) == \"100100000000000000\"\n@assert\
    \ solve(22) == \"1001000000000000000\"\n@assert solve(23) == \"10010000000000000000\"\
    \n@assert solve(24) == \"100100000000000000000\"\n@assert solve(25) == \"1001000000000000000000\"\
    \n@assert solve(26) == \"10010000000000000000000\"\n@assert solve(27) == \"100100000000000000000000\"\
    \n@assert solve(28) == \"1001000000000000000000000\"\n@assert solve(29) == \"\
    10010000000000000000000000\"\n@assert solve(30) == \"100100000000000000000000000\"\
    \n@assert solve(31) == \"1001000000000000000000000000\"\n@assert solve(32) ==\
    \ \"10010000000000000000000000000\"\n@assert solve(33) == \"100100000000000000000000000000\"\
    \n@assert solve(34) == \"1001000000000000000000000000000\"\n@assert solve(35)\
    \ == \"10010000000000000000000000000000\"\n@assert solve(36) == \"100100000000000000000000000000000\"\
    \n@assert solve(37) == \"1001000000000000000000000000000000\"\n@assert solve(38)\
    \ == \"10010000000000000000000000000000000\"\n@assert solve(39) == \"100100000000000000000000000000000000\"\
    \n@assert solve(40) == \"1001000000000000000000000000000000000\"\n@assert solve(41)\
    \ == \"10010000000000000000000000000000000000\"\n@assert solve(42) == \"100100000000000000000000000000000000000\"\
    \n@assert solve(43) == \"1001000000000000000000000000000000000000\"\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t\
    @test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333)\
    \ == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbwbcyo1p.jl:32\nin expression starting at\
    \ /tmp/tmpbwbcyo1p.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        return \"0\"\n    \n    digits = String[Int64]()\n\
    \    \n    digits = digits[0..N-1]\n    \n    sum = 0\n    \n    for i in digits\n\
    \        sum += Int(i)\n    \n    return String(sum)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptppvhhiz.jl:1\nin expression starting at /tmp/tmptppvhhiz.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    digits = digits(N)\n    \n    sum = 0\n    for d in digits\n   \
    \     sum += d\n    \n    return string(digits, sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 3\nA palindromic number reads the same both\
    \ ways. The largest palindrome made from the product of two 2-digit numbers is\
    \ 9009 = 91 \xD7 99.\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpicrohcj1.jl:27\nin expression starting at\
    \ /tmp/tmpicrohcj1.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    \n    digits = zeros(Int, N)\n   \
    \ \n    for i = 1:N\n        digits[i] = digits[i-1] + N % 2\n        N = N /\
    \ 2\n    end\n    \n    return join(digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solve(0) == \"0\"\n@assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\
    \n@assert solve(3) == \"11\"\n@assert solve(4) == \"100\"\n@assert solve(5) ==\
    \ \"101\"\n@assert solve(6) == \"110\"\n@assert solve(7) == \"111\"\n@assert solve(8)\
    \ == \"1000\"\n@assert solve(9) == \"1001\"\n@assert solve(10) == \"1010\"\n@assert\
    \ solve(11) == \"1011\"\n@assert solve(12) == \"1100\"\n@assert solve(13) == \"\
    1101\"\n@assert solve(14) == \"1110\"\n@assert solve(15) == \"1111\"\n@assert\
    \ solve(16) == \"10000\"\n@assert solve(17) == \"10001\"\n@assert solve(18) ==\
    \ \"10010\"\n@assert solve(19) == \"10011\"\n@assert solve(20) == \"10100\"\n\
    @assert solve(21) == \"10101\"\n@assert solve(22) == \"10110\"\n@assert solve(23)\
    \ == \"10111\"\n@assert solve(24) == \"11100\"\n@assert solve(25) == \"11101\"\
    \n@assert solve(26) == \"11110\"\n@assert solve(27) == \"11111\"\n@assert solve(28)\
    \ == \"100000\"\n@assert solve(29) == \"100001\"\n@assert solve(30) == \"100010\"\
    \n@assert solve(31) == \"100011\"\n@assert solve(32) == \"100100\"\n@assert solve(33)\
    \ == \"100101\"\n@assert solve(34) == \"100110\"\n@assert solve(35) == \"100111\"\
    \n@assert solve(36) == \"101000\"\n@assert solve(37) == \"101001\"\n@assert solve(38)\
    \ == \"101010\"\n@assert solve(39) == \"101011\"\n@assert solve(40) == \"101100\"\
    \n@assert solve(41) == \"101101\"\n@assert solve(42) == \"101110\"\n@assert solve(43)\
    \ == \"101111\"\n@assert solve(44) == \"111000\"\n@assert solve(45) == \"111001\"\
    \n@assert solve(46) == \"111010\"\n@assert solve(47) == \"111011\"\n@assert solve(48)\
    \ == \"111100\"\n@assert solve(49) == \"111101\"\n@assert solve(50) == \"111110\"\
    \n@assert solve(51) == \"111111\"\n@assert solve(52) == \"100\nusing Test\n\n\
    @testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq1yfq3ie.jl:30\nin expression starting at\
    \ /tmp/tmpq1yfq3ie.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    if N < 10\n        return string(\"\
    0\", N)\n    if N < 100\n        return string(\"1\", N)\n    if N < 1000\n  \
    \      return string(\"10\", N)\n    if N < 10000\n        return string(\"11\"\
    , N)\n    if N < 100000\n        return string(\"100\", N)\n    if N < 1000000\n\
    \        return string(\"1000\", N)\n    if N < 10000000\n        return string(\"\
    10000\", N)\n    if N < 100000000\n        return string(\"100000\", N)\n    if\
    \ N < 1000000000\n        return string(\"1000000\", N)\n    if N < 10000000000\n\
    \        return string(\"10000000\", N)\n    if N < 100000000000\n        return\
    \ string(\"100000000\", N)\n    if N < 1000000000000\n        return string(\"\
    1000000000\", N)\n    if N < 10000000000000\n        return string(\"10000000000\"\
    , N)\n    if N < 100000000000000\n        return string(\"100000000000\", N)\n\
    \    if N < 1000000000000000\n        return string(\"1000000000000\", N)\n  \
    \  if N < 10000000000000000\n        return string(\"10000000000000\", N)\n  \
    \  if N < 100000000000000000 \n        return string(\"100000000000000\", N)\n\
    \    if N < 100000000000000000\n        return string(\"1000000000000000\", N)\n\
    \    if N < 1000000000000000000\n        return string(\"10000000000000000\",\
    \ N)\n    if N < 10000000000000000000\n        return string(\"100000000000000000\"\
    , N)\n    if N < 100000000000000000000\n        return string(\"1000000000000000000\"\
    , N)\n    if N < 1000000000000000000000\n        return string(\"10000000000000000000\"\
    , N)\n    if N < 10000000000000000000000\n        return string(\"100000000000000000000\"\
    , N)\n    if N < 100000000000000000000000\n        return string(\"1000000000000000000000\"\
    , N)\n    if N < 1000000000000000000000000\n        return string(\"10000000000000000000000\"\
    , N)\n    if N < 10000000000000000000000000\n        return string(\"100000000000000000000000\"\
    , N)\n    if N < 100000000000000000000000000\n        return string(\"1000000000000000000000000\"\
    , N)\n    if N < 1000000000000000000000000000\n        return string(\"10000000000000000000000000\"\
    , N)\n    if N < 10000000000000000000000000000\n        return string(\"100000000000000000000000000\"\
    , N)\n    if N < 100000000000000000000000000000\n        return string(\"1000000000000000000000000000\"\
    , N)\n    if N < 1000000000000000000000000000000\n        return string(\"10000000000000000000000000000\"\
    , N)\n    if N < 10000000000000000000000000000000\n        return string(\"100000000000000000000000000000\"\
    , N)\n    if N < 100000000000000000000000000000000\n        return string(\"1000000000000000000000000000000\"\
    , N)\n    if N < 100000000000000000000000000\nusing Test\n\n@testset begin\n\n\
    candidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpthr_idmf.jl:1\nin expression starting at /tmp/tmpthr_idmf.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        return \"-1\"\n    \n    digits = String[]\n \
    \   \n    digits = digits[0..N-1]\n    \n    sum = 0\n    \n    for i in digits\n\
    \        sum = sum + Int(i)\n    \n    return String(sum)\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdzyitriv.jl:1\nin expression starting at /tmp/tmpdzyitriv.jl:1\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        error(\"N must be positive\")\n    end\n    \n\
    \    digits = zeros(Int, 10)\n    \n    for d in digits[1:N]\n        digits[d]\
    \ += 1\n    end\n    \n    digits = digits[digits[1:end-1]]\n    \n    return\
    \ join(digits, \"\")\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmps3sybsxh.jl:38\n  Test threw
    exception\n  Expression: candidate(1000) == "1"\n  BoundsError: attempt to access
    10-element Vector{Int64} at index [1:1000]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64},
    I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2] checkbounds\n     @
    ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @ ./array.jl:867 [inlined]\n   [4]
    solve(N::Int64)\n     @ Main /tmp/tmps3sybsxh.jl:25\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [6]
    macro expansion\n     @ /tmp/tmps3sybsxh.jl:38 [inlined]\n   [7] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [8]
    top-level scope\n     @ /tmp/tmps3sybsxh.jl:37\ntest set: Error During Test at
    /tmp/tmps3sybsxh.jl:39\n  Test threw exception\n  Expression: candidate(150) ==
    "110"\n  BoundsError: attempt to access 10-element Vector{Int64} at index [1:150]\n  Stacktrace:\n   [1]
    throw_boundserror(A::Vector{Int64}, I::Tuple{UnitRange{Int64}})\n     @ Base ./abstractarray.jl:691\n   [2]
    checkbounds\n     @ ./abstractarray.jl:656 [inlined]\n   [3] getindex\n     @
    ./array.jl:867 [inlined]\n   [4] solve(N::Int64)\n     @ Main /tmp/tmps3sybsxh.jl:25\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [6] macro expansion\n     @ /tmp/tmps3sybsxh.jl:39 [inlined]\n   [7]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [8] top-level scope\n     @ /tmp/tmps3sybsxh.jl:37\ntest set: Error
    During Test at /tmp/tmps3sybsxh.jl:40\n  Test threw exception\n  Expression: candidate(147)
    == "1100"\n  BoundsError: attempt to access 10-element Vector{Int64} at index
    [1:147]\n  Stacktrace:\n   [1] throw_boundserror(A::Vector{Int64}, I::Tuple{UnitRange{Int64}})\n     @
    Base ./abstractarray.jl:691\n   [2] checkbounds\n     @ ./abstractarray.jl:656 '
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    \n    digits = zeros(Int, N)\n   \
    \ digits[1] = 1\n    \n    for i = 2 to N\n        digits[i] = digits[i-1] * 2\n\
    \    end\n    \n    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 3\nA palindromic number reads the same both\
    \ ways. The largest palindrome made from the product of two 2-digit numbers is\
    \ 9009 = 91 \xD7 99.\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmp0pl3_fl6.jl:24 expected \"\
    end\", got \"N\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0pl3_fl6.jl:24\n\
    in expression starting at /tmp/tmp0pl3_fl6.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    \n    if N < 10\n        return string(\"\
    0\", N)\n    \n    digits = string(\"0\", N)\n    \n    for i = N - 1, j = 0,\
    \ k = N - 1, m = N - 1, n = N - 1\n        while i >= 0\n            digits[k]\
    \ = digits[k] // 10\n            i -= 1\n            k -= 1\n            m -=\
    \ 1\n            n -= 1\n        \n        digits[k] = digits[k] % 10\n      \
    \  \n    digits = digits[1..end]\n    \n    return digits\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp7rjj0gst.jl:26\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp7rjj0gst.jl:1\n\
    in expression starting at /tmp/tmp7rjj0gst.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"-1\"\n    if N < 10\n        return string(\"\
    0\", N)\n    \n    digits = N % 10\n    N = N / 10\n    \n    digits = solve(digits)\n\
    \    \n    return digits + string(\"1\", N)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptkgp1qum.jl:1\nin expression starting at /tmp/tmptkgp1qum.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        return \"0\"\n    \n    if N < 10\n        return\
    \ string(\"0\", N)\n    \n    binary = string(\"1\", N)\n    \n    for i in 2:N\n\
    \        binary = string(\"0\", i) + binary\n    end\n    \n    return binary\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solve(1) == \"1\"\n@assert solve(2)\
    \ == \"10\"\n@assert solve(3) == \"111\"\n@assert solve(4) == \"1001\"\n@assert\
    \ solve(5) == \"10101\"\n@assert solve(6) == \"11000\"\n@assert solve(7) == \"\
    110000\"\n@assert solve(8) == \"1100001\"\n@assert solve(9) == \"11000011\"\n\
    @assert solve(10) == \"110000111\"\n@assert solve(11) == \"1100001111\"\n@assert\
    \ solve(12) == \"11000011111\"\n@assert solve(13) == \"110000111111\"\n@assert\
    \ solve(14) == \"1100001111111\"\n@assert solve(15) == \"11000011111110\"\n@assert\
    \ solve(16) == \"110000111111110\"\n@assert solve(17) == \"1100001111111101\"\n\
    @assert solve(18) == \"11000011111111010\"\n@assert solve(19) == \"110000111111110100\"\
    \n@assert solve(20) == \"1100001111111101000\"\n@assert solve(21) == \"11000011111111010000\"\
    \n@assert solve(22) == \"110000111111110100000\"\n@assert solve(23) == \"1100001111111101000000\"\
    \n@assert solve(24) == \"11000011111111010000000\"\n@assert solve(25) == \"110000111111110100000000\"\
    \n@assert solve(26) == \"1100001111111101000000000\"\n@assert solve(27) == \"\
    11000011111111010000000000\"\n@assert solve(28) == \"110000111111110100000000000\"\
    \n@assert solve(29) == \"1100001111111101000000000000\"\n@assert solve(30) ==\
    \ \"11000011111111010000000000000\"\n@assert solve(31) == \"110000111111110100000000000000\"\
    \n@assert solve(32) == \"1100001111111101000000000000000\"\n@assert solve(33)\
    \ == \"11000011111111010000000000000000\"\n@assert solve(34) == \"1100001111111101000000000000000000\"\
    \n@assert solve(35) == \"11000011111111010000000000000000000\"\n@assert solve(36)\
    \ == \"110000111111110100000000000000000000\"\n@assert solve(37) == \"1100001111111101000000000000000000000\"\
    \nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe8ncr4ol.jl:33\nin expression starting at\
    \ /tmp/tmpe8ncr4ol.jl:33\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    end\n    \n    if\
    \ N == 0\n        return \"0\"\n    end\n    \n    if N < 10\n        return string(N,\
    \ \"01\")\n    end\n    \n    binary = string(N, \"0\")\n    \n    binary = string(N,\
    \ \"0\")\n    \n    for i = length(binary)-2:-1:1\n        binary = string(N,\
    \ \"0\") + string(N, \"1\") + binary\n    end\n    \n    return binary\nend\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmpv2le9jz4.jl:45\n  Test threw
    exception\n  Expression: candidate(1000) == "1"\n  MethodError: no method matching
    +(::String, ::String)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any,
    !Matched::Any...) at /shared/centos7/julia/1.7.3/share/julia/base/operators.jl:655\n  Stacktrace:\n   [1]
    +(::String, ::String, ::String)\n     @ Base ./operators.jl:655\n   [2] solve(N::Int64)\n     @
    Main /tmp/tmpv2le9jz4.jl:35\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmpv2le9jz4.jl:45 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmpv2le9jz4.jl:44\n'''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    digits = digits(N)\n    \n    sum = 0\n    for i in digits\n   \
    \     sum += i\n    \n    return sum.to_s(2)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 4\nWrite a Julia function named digits that\
    \ takes a positive integer N and returns the number of digits in binary representation\
    \ of N.\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpc2x10k02.jl:27\nin expression starting at\
    \ /tmp/tmpc2x10k02.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    if N < 10\n        return string(\"\
    0\", N)\n    \n    digits = string(\"0\", N)\n    digits = digits[2:end]\n   \
    \ \n    sum = 0\n    for digit in digits\n        sum = sum + digit\n    end\n\
    \    \n    return string(digits, sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpffdl0_l4.jl:33\nin expression starting at\
    \ /tmp/tmpffdl0_l4.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    digits = digits(N)\n    \n    sum = 0\n    for i in digits\n   \
    \     sum += i\n    \n    return show(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7\nA palindromic number reads the same both\
    \ ways. The largest palindrome made from the product of two 2-digit numbers is\
    \ 9009 = 91 \xD7 99.\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9b5fsvkb.jl:27\nin expression starting at\
    \ /tmp/tmp9b5fsvkb.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    \n    if N == 0\n        return \"\
    0\"\n    \n    if N < 10\n        return string(\"0\", N)\n    \n    digits =\
    \ string(\"0\", N)\n    \n    for i = length(digits) - 1, j = 1, k = 1\n     \
    \   while i >= k\n            digits[i] += digits[j] * 10\n            digits[j]\
    \ = 0\n            j += k\n            k += 1\n    \n    return digits\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy_eeo9x8.jl:38\nin expression starting at\
    \ /tmp/tmpy_eeo9x8.jl:38\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    end\n    if N ==\
    \ 0\n        return \"0\"\n    end\n    \n    digits = zeros(Int, 10)\n    digits[1]\
    \ = 1\n    digits[2] = 1\n    digits[3] = 1\n    digits[4] = 1\n    digits[5]\
    \ = 1\n    digits[6] = 1\n    digits[7] = 1\n    digits[8] = 1\n    digits[9]\
    \ = 1\n    \n    digits = digits[N]\n    \n    sum = 0\n    for i in digits\n\
    \        sum += i\n    end\n    \n    return string(digits, digits[digits])\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\n\
    Problem 7\nWrite a Julia function called solve that takes an integer N and returns\
    \ the number of digits in the binary representation of N.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg33a_sz8.jl:45\nin expression starting at\
    \ /tmp/tmpg33a_sz8.jl:45\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        return \"0\"\n    \n    if N == 0 \n        return\
    \ \"0\"\n    \n    if N % 2 == 0\n        return solve(N div 2) + \"1\"\n    \n\
    \    return solve(N div 2) + solve(N mod 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuul67fun.jl:26\nin expression starting at\
    \ /tmp/tmpuul67fun.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"-1\"\n    if N == 0 \n        return \"0\"\n\
    \    if N == 1\n        return \"1\"\n    \n    digits = N % 10\n    N = N / 10\n\
    \    \n    digits = solve(digits)\n    \n    return digits + solve(digits)\nend\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(140)\n</cell>\n<code language=julia-1.5>\n\
    solve(141)\n</cell>\n<code language=julia-1.5>\nsolve(142)\n</cell>\n<code language=julia-1.5>\n\
    solve(143)\n</cell>\n<code language=julia-1.5>\nsolve(144)\n</cell>\n<code language=julia-1.5>\n\
    solve(145)\n</cell>\n<code language=julia-1.5>\nsolve(146)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(149)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(151)\n</cell>\n<code language=julia-1.5>\nsolve(152)\n</cell>\n<code language=julia-1.5>\n\
    solve(153)\n</cell>\n<code language=julia-1.5>\nsolve(154)\n</cell>\n<code language=julia-1.5>\n\
    solve(155)\n</cell>\n<code language=julia-1.5>\nsolve(156)\n</cell>\n<code language=julia-1.5>\n\
    solve(157)\n</cell>\n<code language=julia-1.5>\nsolve(158)\n</cell>\n<code language=julia-1.5>\n\
    solve(159)\n</cell>\n<code language=julia-1.5>\nsolve(160)\n</cell>\n<code language=julia-1.5>\n\
    solve(161)\n</cell>\n<code language=julia-1.5>\nsolve(162)\n</cell>\n<code language=julia-1.5>\n\
    solve(163)\n</cell>\n<code language=julia-1.5>\nsolve(164)\n</cell>\n<code language=julia-1.5>\n\
    solve(165)\n</cell>\n<code language=julia-1.5>\nsolve(166)\n</cell>\n<code language=julia-1.5>\n\
    solve(167)\n</cell>\n<code language=juli\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpt6uqr8ub.jl:32\nin expression starting at\
    \ /tmp/tmpt6uqr8ub.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    end\n    if N ==\
    \ 0\n        return \"0\"\n    end\n    \n    digits = zeros(Int, N+1)\n    digits[1]\
    \ = 1\n    \n    for i = 2:N\n        digits[i] = digits[i-1] * 2\n    end\n \
    \   \n    digits[N] = 0\n    \n    return join(digits, \"\")\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert solve(0) == \"0\"\n@assert solve(1) == \"1\"\n\
    @assert solve(2) == \"10\"\n@assert solve(3) == \"11\"\n@assert solve(4) == \"\
    100\"\n@assert solve(5) == \"101\"\n@assert solve(6) == \"110\"\n@assert solve(7)\
    \ == \"111\"\n@assert solve(8) == \"1000\"\n@assert solve(9) == \"1001\"\n@assert\
    \ solve(10) == \"1010\"\n@assert solve(11) == \"1011\"\n@assert solve(12) == \"\
    1100\"\n@assert solve(13) == \"1101\"\n@assert solve(14) == \"1110\"\n@assert\
    \ solve(15) == \"1111\"\n@assert solve(16) == \"10000\"\n@assert solve(17) ==\
    \ \"10001\"\n@assert solve(18) == \"10010\"\n@assert solve(19) == \"10011\"\n\
    @assert solve(20) == \"10100\"\n@assert solve(21) == \"10101\"\n@assert solve(22)\
    \ == \"10110\"\n@assert solve(23) == \"10111\"\n@assert solve(24) == \"11100\"\
    \n@assert solve(25) == \"11101\"\n@assert solve(26) == \"11110\"\n@assert solve(27)\
    \ == \"11111\"\n@assert solve(28) == \"100000\"\n@assert solve(29) == \"100001\"\
    \n@assert solve(30) == \"100010\"\n@assert solve(31) == \"100011\"\n@assert solve(32)\
    \ == \"100100\"\n@assert solve(33) == \"100101\"\n@assert solve(34) == \"100110\"\
    \n@assert solve(35) == \"100111\"\n@assert solve(36) == \"101000\"\n@assert solve(37)\
    \ == \"101001\"\n@assert solve(38) == \"101010\"\n@assert solve(39) == \"101011\"\
    \n@assert solve(40) == \"101100\"\n@assert solve(41) == \"101101\"\n@assert solve(42)\
    \ == \"101110\"\n@assert solve(43) == \"101111\"\n@assert solve(44) == \"111000\"\
    \n@assert solve(45) == \"111001\"\n@assert solve(46) == \"111010\"\n@assert solve(47)\
    \ == \"111011\"\n@assert solve(48) == \"111100\"\n@assert solve(49) == \"111101\"\
    \n@assert \nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpe3honcow.jl:36\nin expression starting at\
    \ /tmp/tmpe3honcow.jl:36\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        return \"-1\"\n    \n    if N == 0\n        return\
    \ \"0\"\n    \n    if N == 1\n        return \"1\"\n    \n    digits = zeros(Int,\
    \ N+1)\n    digits[1] = 1\n    \n    for i = 2 to N\n        digits[i] = digits[i-1]\
    \ + digits[i-2]\n    end\n    \n    return string(digits)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert solve(0) == \"0\"\n@assert solve(1) == \"1\"\n\
    @assert solve(2) == \"10\"\n@assert solve(3) == \"11\"\n@assert solve(4) == \"\
    100\"\n@assert solve(5) == \"101\"\n@assert solve(6) == \"110\"\n@assert solve(7)\
    \ == \"111\"\n@assert solve(8) == \"1000\"\n@assert solve(9) == \"1001\"\n@assert\
    \ solve(10) == \"1010\"\n@assert solve(11) == \"1011\"\n@assert solve(12) == \"\
    1100\"\n@assert solve(13) == \"1101\"\n@assert solve(14) == \"1110\"\n@assert\
    \ solve(15) == \"1111\"\n@assert solve(16) == \"10000\"\n@assert solve(17) ==\
    \ \"10001\"\n@assert solve(18) == \"10010\"\n@assert solve(19) == \"10011\"\n\
    @assert solve(20) == \"10100\"\n@assert solve(21) == \"10101\"\n@assert solve(22)\
    \ == \"10110\"\n@assert solve(23) == \"10111\"\n@assert solve(24) == \"11100\"\
    \n@assert solve(25) == \"11101\"\n@assert solve(26) == \"11110\"\n@assert solve(27)\
    \ == \"11111\"\n@assert solve(28) == \"100000\"\n@assert solve(29) == \"100001\"\
    \n@assert solve(30) == \"100010\"\n@assert solve(31) == \"100011\"\n@assert solve(32)\
    \ == \"100100\"\n@assert solve(33) == \"100101\"\n@assert solve(34) == \"100110\"\
    \n@assert solve(35) == \"100111\"\n@assert solve(36) == \"101000\"\n@assert solve(37)\
    \ == \"101001\"\n@assert solve(38) == \"101010\"\n@assert solve(39) == \"101011\"\
    \n@assert solve(40) == \"101100\"\n@assert solve(41) == \"101101\"\n@assert solve(42)\
    \ == \"101110\"\n@assert solve(43) == \"101111\"\n@assert solve(44) == \"111000\"\
    \n@assert solve(45) == \"111001\"\n@assert solve(46) == \"111010\"\n@assert solve(47)\
    \ == \"111011\"\n@assert solve(48) == \"111100\"\n@assert solve(49) == \"111101\"\
    \n@assert \nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpd2ql88y3.jl:31 expected \"\
    end\", got \"N\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpd2ql88y3.jl:31\n\
    in expression starting at /tmp/tmpd2ql88y3.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    end\n    if N ==\
    \ 0\n        return \"0\"\n    end\n    \n    digits = zeros(Int, 10)\n    digits[1]\
    \ = 1\n    digits[2] = 1\n    digits[3] = 1\n    digits[4] = 1\n    digits[5]\
    \ = 1\n    digits[6] = 1\n    digits[7] = 1\n    digits[8] = 1\n    digits[9]\
    \ = 1\n    \n    sum = 0\n    \n    for i = 1:N\n        digit = digits[i]\n \
    \       sum += digit\n    end\n    \n    return string(digits)\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkcezcsic.jl:45\nin expression starting at\
    \ /tmp/tmpkcezcsic.jl:45\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    if N == 0\n        return \"0\"\n\
    \    if N == 1\n        return \"1\"\n    if N == 2\n        return \"10\"\n \
    \   if N == 3\n        return \"11\"\n    if N == 4\n        return \"100\"\n\
    \    if N == 5\n        return \"101\"\n    if N == 6\n        return \"110\"\n\
    \    if N == 7\n        return \"111\"\n    if N == 8\n        return \"1000\"\
    \n    if N == 9\n        return \"1001\"\n    if N == 10\n        return \"1010\"\
    \n    if N == 11\n        return \"1011\"\n    if N == 12\n        return \"1100\"\
    \n    if N == 13\n        return \"1101\"\n    if N == 14\n        return \"1110\"\
    \n    if N == 15\n        return \"1111\"\n    return \"\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    solve(N, digits::Int64)::String\n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgt81_3nv.jl:54\nin expression starting at\
    \ /tmp/tmpgt81_3nv.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        return \"0\"\n    \n    if N < 10\n        return\
    \ string(\"0\", N)\n    \n    digits = string(\"0\", N)\n    \n    for i = digits.length\
    \ - 2; i >= 0; i--\n        digits[i] = digits[i + 1] * 2\n    \n    return digits\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\n\
    Problem 7: Find the sum of all numbers between 1 and N that are divisible by 3\n\
    Input:\n    N integer\nConstraints:\n    1 \u2264 N \u2264 10^5\nOutput:\n   \
    \ sum of all numbers between 1 and N that are divisible by 3\nExample\n    >>>\
    \ solve(1000)\n    6\n    >>> solve(150)\n    12\n    >>> solve(147)\n    18\n\
    \    \n    Variables:\n        @N integer\n             Constraints: 1 \u2264\
    \ N \u2264 10^5.\n    Output:\n         an integer\n\"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpe9bwwija.jl:27\nin expression starting at /tmp/tmpe9bwwija.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    if N < 10\n        return string(\"\
    0\", N)\n    \n    digits = string(\"0\", N)\n    \n    for i = 1:N\n        digits\
    \ = digits[1:] + string(\"1\", N - i)\n    end\n    \n    return digits\nend\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\n\
    Problem 4\nWrite a Julia function called digitsum that takes an integer N and\
    \ returns the sum of the digits of N in binary.\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing last argument in \"1:\" range expression\
    \ \nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpvib8_r79.jl:26\nin expression\
    \ starting at /tmp/tmpvib8_r79.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"-1\"\n    if N == 0\n        return \"0\"\n\
    \    if N == 1\n        return \"1\"\n    \n    digits = zeros(Int, N)\n    digits[1]\
    \ = 1\n    \n    for i = 2:N\n        digits[i] = digits[i-1] * 2\n    end\n \
    \   \n    return join(digits, \"\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpq_6w4wnd.jl:1\nin expression starting at /tmp/tmpq_6w4wnd.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    \n    binary = \"\
    \"\n    \n    for i = N:-1:1\n        binary = binary + string(i)\n    end\n \
    \   \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Given\
    \ a positive integer N, return the total sum of its digits in binary.\n    \n\
    \    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n    \"110\"\n\
    \    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1rczzc06.jl:29\nin expression starting at\
    \ /tmp/tmp1rczzc06.jl:29\n"
  stdout: ''
- exit_code: -1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    end\n    if N ==\
    \ 0\n        return \"0\"\n    end\n    \n    digits = zeros(Int, 10)\n    digits[1]\
    \ = 1\n    \n    for i = 2:N\n        digits[i] = digits[i-1] * 2\n    end\n \
    \   \n    return join(digits, \"\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  status: Timeout
  stderr: None
  stdout: 'b''test set: Error During Test at /tmp/tmp0041iqh9.jl:39\n  Test threw
    exception\n  Expression: candidate(1000) == "1"\n  BoundsError: attempt to access
    10-element Vector{Int64} at index [11]\n  Stacktrace:\n   [1] setindex!\n     @
    ./array.jl:903 [inlined]\n   [2] solve(N::Int64)\n     @ Main /tmp/tmp0041iqh9.jl:29\n   [3]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0041iqh9.jl:39 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0041iqh9.jl:38\ntest set: Error
    During Test at /tmp/tmp0041iqh9.jl:40\n  Test threw exception\n  Expression: candidate(150)
    == "110"\n  BoundsError: attempt to access 10-element Vector{Int64} at index [11]\n  Stacktrace:\n   [1]
    setindex!\n     @ ./array.jl:903 [inlined]\n   [2] solve(N::Int64)\n     @ Main
    /tmp/tmp0041iqh9.jl:29\n   [3] macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445
    [inlined]\n   [4] macro expansion\n     @ /tmp/tmp0041iqh9.jl:40 [inlined]\n   [5]
    macro expansion\n     @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283
    [inlined]\n   [6] top-level scope\n     @ /tmp/tmp0041iqh9.jl:38\ntest set: Error
    During Test at /tmp/tmp0041iqh9.jl:41\n  Test threw exception\n  Expression: candidate(147)
    == "1100"\n  BoundsError: attempt to access 10-element Vector{Int64} at index
    [11]\n  Stacktrace:\n   [1] setindex!\n     @ ./array.jl:903 [inlined]\n   [2]
    solve(N::Int64)\n     @ Main /tmp/tmp0041iqh9.jl:29\n   [3] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445 [inlined]\n   [4]
    macro expansion\n     @ /tmp/tmp0041iqh9.jl:41 [inlined]\n   [5] macro expansion\n     @
    /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283 [inlined]\n   [6]
    top-level scope\n     @ /tmp/tmp0041iqh9.jl:38\ntest set: Error During Test at
    /tmp/tmp004'
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        return \"0\"\n    \n    digits = N % 10\n    N\
    \ = N / 10\n    \n    digits = digits:: Int64\n    \n    if N == 0\n        return\
    \ \"0\"\n    \n    if N > 0\n        digits = digits:: Int64\n        \n     \
    \   digits = digits:: Int64\n        \n        digits = digits:: Int64\n     \
    \   \n        digits = digits:: Int64\n        \n        digits = digits:: Int64\n\
    \        \n        digits = digits:: Int64\n        \n        digits = digits::\
    \ Int64\n        \n        digits = digits:: Int64\n        \n        digits =\
    \ digits:: Int64\n        \n        digits = digits:: Int64\n        \n      \
    \  digits = digits:: Int64\n        \n        digits = digits:: Int64\n      \
    \  \n        digits = digits:: Int64\n        \n        digits = digits:: Int64\n\
    \        \n        digits = digits:: Int64\n        \n        digits = digits::\
    \ Int64\n        \n        digits = digits:: Int64\n        \n        digits =\
    \ digits:: Int64\n        \n        digits = digits:: Int64\n        \n      \
    \  digits = digits:: Int64\n        \n        digits = digits:: Int64\n      \
    \  \n        digits = digits:: Int64\n        \n        digits = digits:: Int64\n\
    \        \n        digits = digits:: Int64\n        \n        digits = digits::\
    \ Int64\n        \n        digits = digits:: Int64\n        \n        digits =\
    \ digits:: Int64\n        \n        digits = digits:: Int64\n        \n      \
    \  digits = digits:: Int64\n        \n        digits = digits:: Int64\n      \
    \  \n        digits = digits:: Int64\n        \n        digits = digits:: Int64\n\
    \        \n        digits = digits:: Int64\n        \n        digits = digits::\
    \ Int64\n        \n        digits = digits:: Int64\n        \n        digits =\
    \ digits:: Int64\n        \n        digits = digits:: Int64\n        \n      \
    \  digits = digits:: Int64\n        \n        digits = digits:: Int64\n      \
    \  \n        digits = digits:: Int64\n        \n        digits = digits:: Int64\n\
    \        \n        digits = digits:: Int64\n\nusing Test\n\n@testset begin\n\n\
    candidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpk8af8vm5.jl:1\nin expression starting at /tmp/tmpk8af8vm5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        throw(ArgumentError(\"N must be positive\"))\n    \n\
    \    digits = zeros(Int, 10)\n    digits[1] = 1\n    \n    for i = 2 to N\n  \
    \      digits[i] = digits[i-1] + digits[i-2]\n    end\n    \n    return string(digits)\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpddia2amu.jl:24 expected \"\
    end\", got \"N\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpddia2amu.jl:24\n\
    in expression starting at /tmp/tmpddia2amu.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        error(\"N must be positive\")\n    \n    binary\
    \ = \"\"\n    \n    if N < 10\n        binary = string(N, \"01\")\n    else\n\
    \        binary = string(N, \"0\") \n    \n    binary = reverse(binary)\n    \n\
    \    sum = 0\n    \n    for i = 1:length(binary)\n        sum = sum + binary[i]\n\
    \    end\n    \n    return string(sum, \"0\") \nend\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpspm5v696.jl:1\nin expression starting at /tmp/tmpspm5v696.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"-1\"\n    \n    if N == 0\n        return \"\
    0\"\n    \n    if N < 10\n        return string(\"0\", N)\n    \n    digits =\
    \ N % 10\n    N = N / 10\n    \n    sum = \"\"\n    \n    while N > 0\n      \
    \  sum += string(\"0\", N)\n        N = N / 10\n    \n    return sum + digits\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(149)\n</cell>\n<code language=julia-1.5>\n\
    solve(151)\n</cell>\n<code language=julia-1.5>\nsolve(152)\n</cell>\n<code language=julia-1.5>\n\
    solve(153)\n</cell>\n<code language=julia-1.5>\nsolve(154)\n</cell>\n<code language=julia-1.5>\n\
    solve(155)\n</cell>\n<code language=julia-1.5>\nsolve(156)\n</cell>\n<code language=julia-1.5>\n\
    solve(157)\n</cell>\n<code language=julia-1.5>\nsolve(158)\n</cell>\n<code language=julia-1.5>\n\
    solve(159)\n</cell>\n<code language=julia-1.5>\nsolve(160)\n</cell>\n<code language=julia-1.5>\n\
    solve(161)\n</cell>\n<code language=julia-1.5>\nsolve(162)\n</cell>\n<code language=julia-1.5>\n\
    solve(163)\n</cell>\n<code language=julia-1.5>\nsolve(164)\n</cell>\n<code language=julia-1.5>\n\
    solve(165)\n</cell>\n<code language=julia-1.5>\nsolve(166)\n</cell>\n<code language=julia-1.5>\n\
    solve(167)\n</cell>\n<code language=julia-1.5>\nsolve(168)\n</cell>\n<code language=julia-1.5>\n\
    solve(169)\n</cell>\n<code language=julia-1.5>\nsolve(170)\n</cell>\n<code language=julia-1.5>\n\
    solve(171)\n</cell>\n<code language=julia-1.5>\nsolve(172)\n</cell>\n<code language=julia-1.5>\n\
    solve(173)\n</cell>\n<code language=julia-1.5>\nsolve(174)\n</cell>\n<code language=julia-1.5>\n\
    solve(175)\n</cell>\n<code language=julia-1.5>\n\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpaydi9aff.jl:38\nin expression starting at\
    \ /tmp/tmpaydi9aff.jl:38\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        error(\"N must be positive\")\n    \n    digits\
    \ = zeros(Int, N)\n    \n    for i = 1:N\n        digits[i] = digits[i-1] + N\
    \ % 2\n        N = N / 2\n    end\n    \n    return join(digits, \"\")\nend\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmppkcwa7.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpmppkcwa7.jl:1\n\
    in expression starting at /tmp/tmpmppkcwa7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    \n    digits = zeros(Int, 10)\n  \
    \  digits[1] = 1\n    \n    for i in 2:N\n        digits[i] = digits[i-1] * 2\n\
    \    end\n    \n    return join(digits, \"\")\nend\n</cell>\n<text>\nProblem 9\n\
    A palindromic number reads the same both ways. The largest palindrome made from\
    \ the product of two 2-digit numbers is 9009 = 91 \xD7 99.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvntg7dij.jl:30\nin expression starting at\
    \ /tmp/tmpvntg7dij.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    \n    digits = zeros(Int, 10)\n  \
    \  digits[1] = 1\n    \n    for i = 2:N\n        digits[i] = digits[i-1] * 10\
    \ + digits[i-2]\n    end\n    \n    return join(digits, \"\")\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\n\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpu1bfllcg.jl:30\nin expression starting at\
    \ /tmp/tmpu1bfllcg.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N == 0 \n        return \"0\"\n    \n    digits = zeros(Int,\
    \ N)\n    digits[1] = 1\n    \n    for i = 2:N\n        digits[i] = digits[i-1]\
    \ * 2\n    \n    digits = digits[2:end]\n    \n    return string(digits)\nend\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\n\
    Problem 9\nThe sum of the squares of the first ten natural numbers is,\n$$1^2\
    \ + 2^2 + ... + 10^2 = 385$$\nThe square of the sum of the first ten natural numbers\
    \ is,\n$$(1 + 2 + ... + 10)^2 = 55^2 = 3025$$\nHence the difference between the\
    \ sum of the squares of the first ten natural numbers and the square of the sum\
    \ is 3025 \u2212 385 = 2640.\nFind the difference between the sum of the squares\
    \ of the first one hundred natural numbers and the square of the sum.\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t\
    @test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333)\
    \ == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl3clgxny.jl:32\nin expression starting at\
    \ /tmp/tmpl3clgxny.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N == 0 \n        return \"0\"\n    \n    sum::Int64 = 0\n    \n   \
    \ for d in digits(N) \n        sum += d\n    \n    return bin(sum)\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(1000)\n</cell>\n<text>\nProblem 7\nA palindromic\
    \ number reads the same both ways. The largest palindrome made from the product\
    \ of two 2-digit numbers is 9009 = 91 \xD7 99.\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpb6x0rfao.jl:28\nin expression starting at\
    \ /tmp/tmpb6x0rfao.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        return \"-1\"\n    \n    if N == 0\n        return\
    \ \"0\"\n    \n    if N == 1\n        return \"1\"\n    \n    digits = digits(N)\n\
    \    \n    sum = 0\n    \n    for digit in digits\n        sum += digit\n    \n\
    \    return string(digits, sum)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqmklkggt.jl:1\nin expression starting at /tmp/tmpqmklkggt.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    end\n    \n    digits\
    \ = zeros(Int, N)\n    digits[1] = 1\n    \n    for i = 2:N\n        digits[i]\
    \ = digits[i-1] * 10 + digits[i-2]\n    end\n    \n    return string(digits)\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\n\
    Problem 7\nWrite a Julia function called isPrime(N) that returns true if the integer\
    \ N is prime and false otherwise. \nThe function should take one integer argument\
    \ and return a boolean.\nThe function should use the following algorithm:\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"\
    1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\
    \t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgnrrfbon.jl:31\nin expression starting at\
    \ /tmp/tmpgnrrfbon.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N == 0 \n        return \"0\"\n    \n    digits = N % 10\n    \n  \
    \  if N < 10 \n        return digits::String\n    \n    digits = solve(N / 10)\n\
    \    \n    return digits + digits\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7: Binary to Decimal\nGiven a binary number\
    \ represented as a string, convert it to decimal and return the decimal number.\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqbd2yjf2.jl:30\nin expression starting at\
    \ /tmp/tmpqbd2yjf2.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        throw(DomainError(string(\"N must be positive\")))\n\
    \    if N == 0\n        return \"0\"\n    if N < 10\n        return string(\"\
    0\")\n    \n    digits = string(\"0\")\n    \n    for d in digits:\n        digits\
    \ = digits + string(\"1\"*N % d)\n        N = N / d\n    \n    return digits\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmsz473x5.jl:28\nin expression starting at\
    \ /tmp/tmpmsz473x5.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    if N == 0\n        return \"0\"\n\
    \    if N == 1\n        return \"1\"\n    \n    digits = String[]\n    digits.push(N\
    \ % 2)\n    \n    N = N / 2\n    while N > 0\n        digits.push(N % 2)\n   \
    \     N = N / 2\n    \n    digits = reverse(digits)\n    \n    sum = \"\"\n  \
    \  for digit in digits\n        sum = sum + digit\n    \n    return sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"while\" at /tmp/tmpchrfczod.jl:29\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpchrfczod.jl:1\n\
    in expression starting at /tmp/tmpchrfczod.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N == 0 \n        return \"0\"\n    \n    digits = N % 10\n    N = N\
    \ / 10\n    \n    digits = solve(digits)\n    \n    digits = digits + digits\n\
    \    \n    digits = digits * 2\n    \n    digits = digits + digits\n    \n   \
    \ digits = digits * 2\n    \n    digits = digits + digits\n    \n    digits =\
    \ digits * 2\n    \n    digits = digits + digits\n    \n    digits = digits *\
    \ 2\n    \n    digits = digits + digits\n    \n    digits = digits * 2\n    \n\
    \    digits = digits + digits\n    \n    digits = digits * 2\n    \n    digits\
    \ = digits + digits\n    \n    digits = digits * 2\n    \n    digits = digits\
    \ + digits\n    \n    digits = digits * 2\n    \n    digits = digits + digits\n\
    \    \n    digits = digits * 2\n    \n    digits = digits + digits\n    \n   \
    \ digits = digits * 2\n    \n    digits = digits + digits\n    \n    digits =\
    \ digits * 2\n    \n    digits = digits + digits\n    \n    digits = digits *\
    \ 2\n    \n    digits = digits + digits\n    \n    digits = digits * 2\n    \n\
    \    digits = digits + digits\n    \n    digits = digits * 2\n    \n    digits\
    \ = digits + digits\n    \n    digits = digits * 2\n    \n    digits = digits\
    \ + digits\n    \n    digits = digits * 2\n    \n    digits = digits + digits\n\
    \    \n    digits = digits * 2\n    \n    digits = digits + digits\n    \n   \
    \ digits = digits * 2\n    \n    digits = digits + digits\n    \n    digits =\
    \ digits * 2\n    \n    digits = digits + digits\n    \n    digits = digits *\
    \ 2\n    \n    digits = digits + digits\n    \n    digits = digits * 2\n    \n\
    \    digits = digits + digits\n    \n    digits = digits * 2\n    \n    digits\
    \ = digits + digits\n    \n    digits = digits * 2\n    \n    digits = digits\
    \ + digits\n    \n    digits = digits * 2\n    \n    digits = digits + digits\n\
    \    \n    digits = digits * 2\n    \n    digits = digits + digits\n    \n   \
    \ digits = digits * 2\n    \n    digits = digits + digits\n    \n    \nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t\
    @test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333)\
    \ == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpib6o3y93.jl:1\nin expression starting at /tmp/tmpib6o3y93.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        return \"0\"\n    \n    if N == 0\n        return\
    \ \"0\"\n    \n    if N == 1\n        return \"1\"\n    \n    digits = zeros(Int,\
    \ 10)\n    digits[1] = 1\n    \n    for i = 2:N\n        digits[i] = digits[i-1]\
    \ * 2\n    \n    digits = digits[2:end]\n    \n    return string(digits)\nend\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(151)\n</cell>\n<code language=julia-1.5>\n\
    solve(152)\n</cell>\n<code language=julia-1.5>\nsolve(153)\n</cell>\n<code language=julia-1.5>\n\
    solve(154)\n</cell>\n<code language=julia-1.5>\nsolve(155)\n</cell>\n<code language=julia-1.5>\n\
    solve(156)\n</cell>\n<code language=julia-1.5>\nsolve(157)\n</cell>\n<code language=julia-1.5>\n\
    solve(158)\n</cell>\n<code language=julia-1.5>\nsolve(159)\n</cell>\n<code language=julia-1.5>\n\
    solve(160)\n</cell>\n<code language=julia-1.5>\nsolve(161)\n</cell>\n<code language=julia-1.5>\n\
    solve(162)\n</cell>\n<code language=julia-1.5>\nsolve(163)\n</cell>\n<code language=julia-1.5>\n\
    solve(164)\n</cell>\n<code language=julia-1.5>\nsolve(165)\n</cell>\n<code language=julia-1.5>\n\
    solve(166)\n</cell>\n<code language=julia-1.5>\nsolve(167)\n</cell>\n<code language=julia-1.5>\n\
    solve(168)\n</cell>\n<code language=julia-1.5>\nsolve(169)\n</cell>\n<code language=julia-1.5>\n\
    solve(170)\n</cell>\n<code language=julia-1.5>\nsolve(171)\n</cell>\n<code language=julia-1.5>\n\
    solve(172)\n</cell>\n<code language=julia-1.5>\nsolve(173)\n</cell>\n<code language=julia-1.5>\n\
    solve(174)\n</cell>\n<code language=julia-1.5>\nsolve(175)\n</cell>\n<code language=julia-1.5>\n\
    solve(176)\n</cell>\n<code language=julia-1.5>\nsolve(177)\n</\nusing Test\n\n\
    @testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1wgt_il_.jl:38\nin expression starting at\
    \ /tmp/tmp1wgt_il_.jl:38\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        throw(ArgumentError(\"N must be positive\"))\n\
    \    \n    if N == 0\n        return \"0\"\n    \n    if N == 1\n        return\
    \ \"1\"\n    \n    digits = zeros(Int, 10)\n    digits[1] = 1\n    \n    for i\
    \ = 2 to N\n        digits[i] = digits[i-1] * 2\n    end\n    \n    return join(digits,\
    \ \"\")\nend\n</cell>\n<code language=julia-1.5>\n@assert solve(1000) == \"1\"\
    \n@assert solve(150) == \"110\"\n@assert solve(147) == \"1100\"\n</cell>\n<text>\n\
    Problem 7\nWrite a Julia function named solve that takes a positive integer N\
    \ and returns the sum of its digits in binary.\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmprwtk80n9.jl:31 expected \"\
    end\", got \"N\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmprwtk80n9.jl:31\n\
    in expression starting at /tmp/tmprwtk80n9.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    \n    digits = N % 10\n    N = N /\
    \ 10\n    \n    if N < 0\n        return \"0\"\n    \n    digits = digits + N\
    \ % 10\n    N = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    if N < 0\n        return \"0\"\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0\n    \
    \    return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n\
    \    if N < 0\n        return \"0\"\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n \
    \   digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0\n        return\
    \ \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    if N < 0\n        return \"0\"\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n    digits =\
    \ digits + N % 10\n    N = N / 10\n    \n    if N < 0\n        return \"0\"\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0\n    \
    \    return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n\
    \    if N < 0\n        return \"0\"\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n \
    \   digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0\n        return\
    \ \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    if \nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing condition in \"if\" at /tmp/tmpy5gj5yv2.jl:132\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpy5gj5yv2.jl:133\nin expression\
    \ starting at /tmp/tmpy5gj5yv2.jl:133\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    digits = zeros(Int, N+1)\n    digits[1] = 1\n    digits[2] = 1\n\
    \    digits[3] = 1\n    digits[4] = 1\n    digits[5] = 1\n    digits[6] = 1\n\
    \    digits[7] = 1\n    digits[8] = 1\n    digits[9] = 1\n    digits[10] = 1\n\
    \    digits[11] = 1\n    digits[12] = 1\n    digits[13] = 1\n    digits[14] =\
    \ 1\n    digits[15] = 1\n    digits[16] = 1\n    digits[17] = 1\n    digits[18]\
    \ = 1\n    digits[19] = 1\n    digits[20] = 1\n    digits[21] = 1\n    digits[22]\
    \ = 1\n    digits[23] = 1\n    digits[24] = 1\n    digits[25] = 1\n    digits[26]\
    \ = 1\n    digits[27] = 1\n    digits[28] = 1\n    digits[29] = 1\n    digits[30]\
    \ = 1\n    digits[31] = 1\n    digits[32] = 1\n    digits[33] = 1\n    digits[34]\
    \ = 1\n    digits[35] = 1\n    digits[36] = 1\n    digits[37] = 1\n    digits[38]\
    \ = 1\n    digits[39] = 1\n    digits[40] = 1\n    digits[41] = 1\n    digits[42]\
    \ = 1\n    digits[43] = 1\n    digits[44] = 1\n    digits[45] = 1\n    digits[46]\
    \ = 1\n    digits[47] = 1\n    digits[48] = 1\n    digits[49] = 1\n    digits[50]\
    \ = 1\n    digits[51] = 1\n    digits[52] = 1\n    digits[53] = 1\n    digits[54]\
    \ = 1\n    digits[55] = 1\n    digits[56] = 1\n    digits[57] = 1\n    digits[58]\
    \ = 1\n    digits[59] = 1\n    digits[60] = 1\n    digits[61] = 1\n    digits[62]\
    \ = 1\n    digits[63] = 1\n    digits[64] = 1\n    digits[65] = 1\n    digits[66]\
    \ = 1\n    digits[67] = 1\n    digits[68] = 1\n    digits[69] = 1\n    digits[70]\
    \ = 1\n    digits[71] = 1\n    digits[72] = 1\n    digits[73] = 1\n    digits[74]\
    \ = 1\n    digits[75] = 1\n    digits[76] = 1\n    digits[77] = 1\n    digits[78]\
    \ = 1\n    digits[79] = 1\n    digits[80] = 1\n    digits[81] = 1\n    digits[82]\
    \ = 1\n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn8nvis7u.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn8nvis7u.jl:1\n\
    in expression starting at /tmp/tmpn8nvis7u.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    digits = zeros(Int, N)\n    \n    for i = 1:N\n        digits[i]\
    \ = digits[i-1] + N % 2\n        N = N / 2\n    end\n    \n    return join(digits)\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<text>\nProblem\
    \ 7\nWrite a Julia function called solve that takes an integer N and returns the\
    \ sum of the digits of N in binary.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprwwc9qi6.jl:28\nin expression starting at\
    \ /tmp/tmprwwc9qi6.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    digits = zeros(Int, 10)\n    digits[1] = 1\n    \n    for i in 2:N\n\
    \        digits[i] = digits[i-1]*10 + digits[i-2]\n    end\n    \n    return string(digits)\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(144)\n</cell>\n<code language=julia-1.5>\n\
    solve(143)\n</cell>\n<code language=julia-1.5>\nsolve(142)\n</cell>\n<code language=julia-1.5>\n\
    solve(141)\n</cell>\n<code language=julia-1.5>\nsolve(140)\n</cell>\n<code language=julia-1.5>\n\
    solve(139)\n</cell>\n<code language=julia-1.5>\nsolve(138)\n</cell>\n<code language=julia-1.5>\n\
    solve(137)\n</cell>\n<code language=julia-1.5>\nsolve(136)\n</cell>\n<code language=julia-1.5>\n\
    solve(135)\n</cell>\n<code language=julia-1.5>\nsolve(134)\n</cell>\n<code language=julia-1.5>\n\
    solve(133)\n</cell>\n<code language=julia-1.5>\nsolve(132)\n</cell>\n<code language=julia-1.5>\n\
    solve(131)\n</cell>\n<code language=julia-1.5>\nsolve(130)\n</cell>\n<code language=julia-1.5>\n\
    solve(129)\n</cell>\n<code language=julia-1.5>\nsolve(128)\n</cell>\n<code language=julia-1.5>\n\
    solve(127)\n</cell>\n<code language=julia-1.5>\nsolve(126)\n</cell>\n<code language=julia-1.5>\n\
    solve(125)\n</cell>\n<code language=julia-1.5>\nsolve(124)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(122)\n</cell>\n<code language=julia-1.5>\n\
    solve(121)\n</cell>\n<code language=julia-1.5>\nsolve(120)\n</cell>\n<code language=julia-1.5>\n\
    solve(119)\n</cell>\n<code language=julia-1.5>\nsolve(118)\n</cell>\n<code language=julia-1.5>\n\
    solve(117)\n</cell>\n<code language=julia-1.5>\nsolve(116)\n</cell>\n<code language=julia-\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8ro8afe5.jl:28\nin expression starting at\
    \ /tmp/tmp8ro8afe5.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        return \"0\"\n    \n    if N == 0 \n        return\
    \ \"0\"\n    \n    if N == 1\n        return \"1\"\n    \n    digits = N % 10\n\
    \    \n    if digits == 0\n        return solve(floor(N/10)) \n    \n    digits\
    \ = floor(N/10)\n    \n    sum = 0\n    \n    while digits > 0\n        sum +=\
    \ digits%2\n        digits /= 2\n    \n    return sum.to_s + solve(floor(N / 10))\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\n\
    Problem 8\nWrite a Julia function called digitsum that takes an integer N and\
    \ returns the sum of its digits in binary.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdxo7z9b2.jl:43\nin expression starting at\
    \ /tmp/tmpdxo7z9b2.jl:43\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    \n    digits = N % 10\n    N = N /\
    \ 10\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    N = \nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkosjn_6l.jl:1\nin expression starting at /tmp/tmpkosjn_6l.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        throw(ArgumentError(\"N must be positive\"))\n    \n\
    \    digits = digits(N)\n    \n    if length(digits) < 2\n        throw(ArgumentError(\"\
    N must be positive\"))\n    \n    binary = \"\"\n    \n    for digit in digits\n\
    \        binary += digit2binary(digit)\n    \n    return binary\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t\
    @test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333)\
    \ == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5zy_6y_f.jl:1\nin expression starting at /tmp/tmp5zy_6y_f.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    \n    digits = zeros(Int, N)\n   \
    \ \n    for i = 1:N\n        digits[i] = digits[i-1] + N % 2\n        N = N /\
    \ 2\n    end\n    \n    return join(digits)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn_1iq9jf.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn_1iq9jf.jl:1\n\
    in expression starting at /tmp/tmpn_1iq9jf.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    \n    digits = zeros(Int, N)\n   \
    \ digits[1] = 1\n    \n    for i = 2 to N\n        digits[i] = digits[i-1] + digits[i-2]\n\
    \    end\n    \n    return string(digits)\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    solve(N, digits)\n    \n    Variables:\n        @N integer\n     \
    \   @digits array of integers\n    Output:\n        @digits array of integers\n\
    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpzsjxa0ak.jl:24 expected \"\
    end\", got \"N\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpzsjxa0ak.jl:24\n\
    in expression starting at /tmp/tmpzsjxa0ak.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        return \"0\"\n    \n    if N == 0\n        return\
    \ \"0\"\n    \n    if N == 1\n        return \"1\"\n    \n    digits = N % 10\n\
    \    \n    if digits == 0\n        return solve(floor(N / 10))\n    \n    digits\
    \ = floor(N / 10)\n    \n    return solve(floor(N / 10)) + digits_to_binary(digits)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcc3zm5iv.jl:1\nin expression starting at /tmp/tmpcc3zm5iv.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    if N < 10\n        return string(\"\
    0\", N)\n    if N < 100\n        return string(\"1\", N - 10)\n    if N < 1000\n\
    \        return string(\"10\", N - 100)\n    if N < 10000\n        return string(\"\
    11\", N - 1000)\n    if N < 100000\n        return string(\"100\", N - 10000)\n\
    \    if N < 1000000\n        return string(\"1000\", N - 100000)\n    if N < 10000000\n\
    \        return string(\"10000\", N - 1000000)\n    if N < 100000000\n       \
    \ return string(\"100000\", N - 10000000)\n    if N < 1000000000\n        return\
    \ string(\"1000000\", N - 1000000000)\n    if N < 10000000000\n        return\
    \ string(\"10000000\", N - 1000000000)\n    if N < 100000000000\n        return\
    \ string(\"100000000\", N - 1000000000)\n    if N < 1000000000000\n        return\
    \ string(\"1000000000\", N - 1000000000)\n    if N < 10000000000000\n        return\
    \ string(\"10000000000\", N - 1000000000)\n    if N < 100000000000000\n      \
    \  return string(\"100000000000\", N - 1000000000)\n    if N < 1000000000000000\n\
    \        return string(\"1000000000000\", N - 1000000000)\n    if N < 10000000000000000\n\
    \        return string(\"10000000000000\", N - 1000000000)\n    if N < 100000000000000000\
    \ \n        return string(\"100000000000000\", N - 1000000000)\n    if N < 100000000000000000\n\
    \        return string(\"1000000000000000\", N - 1000000000)\n    if N < 1000000000000000000\n\
    \        return string(\"10000000000000000\", N - 1000000000)\n    if N < 10000000000000000000\n\
    \        return string(\"10000000000000000\", N - 1000000000)\n    if N < 100000000000000000000\n\
    \        return string(\"100000000000000000\", N - 1000000000)\n    if N < 1000000000000000000000\n\
    \        return string(\"1000000000000000000\", N - 1000000000)\n    if N < 10000000000000000000000\n\
    \        return string(\"10000000000000000000\", N - 1000000000)\n    if N < 100000000000000000000000\n\
    \        return string(\"100000000000000000000\", N - 1000000000)\n    if N <\
    \ 1000000000000000000000000\n        return string(\"1000000000000000000000\"\
    , N - 1000000000)\n    if N < 100000000000000000000000000\n        return string(\"\
    10000000000000000000000\", N - 1000000000)\n    if N < 1000000000000000000000000000\n\
    \        return string(\"100000000000000000000000\", N - 1000000000)\n    if N\
    \ < 10000000000000000000000000000\n        return string(\"1000000000000000000000000\"\
    , N - \nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpojievslw.jl:78\nin expression starting at\
    \ /tmp/tmpojievslw.jl:78\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    \n    if N == 0\n\
    \        return \"0\"\n    \n    digits = zeros(Int, N)\n    \n    digits[1] =\
    \ 1\n    \n    for i in 2:N\n        digits[i] = digits[i-1] * 2\n    \n    digits\
    \ = digits[1..N]\n    \n    digits = digits[digits[end-1] \u2264 N]\n    \n  \
    \  digits = digits[digits[end-1] \u2264 N]\n    \n    digits = digits[digits[end-1]\
    \ \u2264 N]\n    \n    digits = digits[digits[end-1] \u2264 N]\n    \n    digits\
    \ = digits[digits[end-1] \u2264 N]\n    \n    digits = digits[digits[end-1] \u2264\
    \ N]\n    \n    digits = digits[digits[end-1] \u2264 N]\n    \n    digits = digits[digits[end-1]\
    \ \u2264 N]\n    \n    digits = digits[digits[end-1] \u2264 N]\n    \n    digits\
    \ = digits[digits[end-1] \u2264 N]\n    \n    digits = digits[digits[end-1] \u2264\
    \ N]\n    \n    digits = digits[digits[end-1] \u2264 N]\n    \n    digits = digits[digits[end-1]\
    \ \u2264 N]\n    \n    digits = digits[digits[end-1] \u2264 N]\n    \n    digits\
    \ = digits[digits[end-1] \u2264 N]\n    \n    digits = digits[digits[end-1] \u2264\
    \ N]\n    \n    digits = digits[digits[end-1] \u2264 N]\n    \n    digits = digits[digits[end-1]\
    \ \u2264 N]\n    \n    digits = digits[digits[end-1] \u2264 N]\n    \n    digits\
    \ = digits[digits[end-1] \u2264 N]\n    \n    digits = digits[digits[end-1] \u2264\
    \ N]\n    \n    digits = digits[digits[end-1] \u2264 N]\n    \n    digits = digits[digits[end-1]\
    \ \u2264 N]\n    \n    digits = digits[digits[end\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp51_0gui.jl:1\nin expression starting at /tmp/tmpp51_0gui.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    \n    if N == 0\n\
    \        return \"0\"\n    \n    digits = String[1..N]\n    \n    binary = String[1..N]\n\
    \    \n    for i in digits\n        binary = binary.*(i%2).+i//2\n    \n    return\
    \ binary\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<text>\n\
    Problem 3\nWrite a Julia function called solve that takes an integer N and returns\
    \ the number of digits in binary representation of N. \n    \n    Variables:\n\
    \        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         an integer\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpawdtmx29.jl:33\nin expression starting at\
    \ /tmp/tmpawdtmx29.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    if N < 10\n        return string(\"\
    1\",N)\n    if N < 100\n        return string(\"10\",N)\n    if N < 1000\n   \
    \     return string(\"100\",N)\n    if N < 10000\n        return string(\"1000\"\
    ,N)\n    if N < 100000\n        return string(\"10000\",N)\n    if N < 1000000\n\
    \        return string(\"100000\",N)\n    if N < 10000000\n        return string(\"\
    1000000\",N)\n    if N < 100000000\n        return string(\"10000000\",N)\n  \
    \  if N < 1000000000\n        return string(\"100000000\",N)\n    if N < 10000000000\n\
    \        return string(\"1000000000\",N)\n    if N < 100000000000\n        return\
    \ string(\"10000000000\",N)\n    if N < 1000000000000\n        return string(\"\
    100000000000\",N)\n    if N < 10000000000000\n        return string(\"1000000000000\"\
    ,N)\n    if N < 100000000000000\n        return string(\"10000000000000\",N)\n\
    \    if N < 1000000000000000\n        return string(\"100000000000000\",N)\n \
    \   if N < 10000000000000000\n        return string(\"1000000000000000\",N)\n\
    \    if N < 100000000000000000\n        return string(\"10000000000000000\",N)\n\
    \    if N < 1000000000000000000\n        return string(\"100000000000000000\"\
    ,N)\n    if N < 10000000000000000000\n        return string(\"1000000000000000000\"\
    ,N)\n    if N < 100000000000000000000\n        return string(\"10000000000000000000\"\
    ,N)\n    if N < 1000000000000000000000\n        return string(\"100000000000000000000\"\
    ,N)\n    if N < 10000000000000000000000\n        return string(\"1000000000000000000000\"\
    ,N)\n    if N < 100000000000000000000000\n        return string(\"10000000000000000000000\"\
    ,N)\n    if N < 1000000000000000000000000\n        return string(\"100000000000000000000000\"\
    ,N)\n    if N < 10000000000000000000000000\n        return string(\"1000000000000000000000000\"\
    ,N)\n    if N < 100000000000000000000000000\n        return string(\"10000000000000000000000000\"\
    ,N)\n    if N < 1000000000000000000000000000\n        return string(\"100000000000000000000000000\"\
    ,N)\n    if N < 10000000000000000000000000000\n        return string(\"1000000000000000000000000000\"\
    ,N)\n    if N < 100000000000000000000000000000\n        return string(\"10000000000000000000000000000\"\
    ,N)\n    if N < 1000000000000000000000000000000\n        return string(\"100000000000000000000000000000\"\
    ,N)\n    if N < 10000000000000000000000000000000\n        return string(\"1000000000000000000000000000000\"\
    ,N)\n    if N < 100000000000000000000000000000000\n        return string(\"10000000000000000000000000000000\"\
    ,N)\n    if N < 1000000000000000000000000000000000\n        return string(\"100000000000000000000000000000000\"\
    ,N)\n    if N < 1000000000000000000000000000000000\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuy83i6ix.jl:1\nin expression starting at /tmp/tmpuy83i6ix.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    digits = digits(N)\n    \n    if digits.length == 0 \n        return\
    \ \"0\"\n    \n    digits = digits[0..digits.length-1]\n    \n    sum = 0\n  \
    \  for i in digits\n        sum += i\n    \n    return to_string(sum)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"\
    1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\
    \t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6e7qgvhw.jl:1\nin expression starting at /tmp/tmp6e7qgvhw.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    digits = digits(N)\n    \n    sum = 0\n    for digit in digits\n\
    \        sum += digit\n    \n    return string(digits, sum)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\n\
    @assert solve(3) == \"11\"\n@assert solve(4) == \"100\"\n@assert solve(5) == \"\
    101\"\n@assert solve(6) == \"110\"\n@assert solve(7) == \"111\"\n@assert solve(8)\
    \ == \"1000\"\n@assert solve(9) == \"1001\"\n@assert solve(10) == \"1010\"\n@assert\
    \ solve(11) == \"1011\"\n@assert solve(12) == \"1100\"\n@assert solve(13) == \"\
    1101\"\n@assert solve(14) == \"1110\"\n@assert solve(15) == \"1111\"\n@assert\
    \ solve(16) == \"10000\"\n@assert solve(17) == \"10001\"\n@assert solve(18) ==\
    \ \"10010\"\n@assert solve(19) == \"10011\"\n@assert solve(20) == \"10100\"\n\
    @assert solve(21) == \"10101\"\n@assert solve(22) == \"10110\"\n@assert solve(23)\
    \ == \"10111\"\n@assert solve(24) == \"11100\"\n@assert solve(25) == \"11101\"\
    \n@assert solve(26) == \"11110\"\n@assert solve(27) == \"11111\"\n@assert solve(28)\
    \ == \"100000\"\n@assert solve(29) == \"100001\"\n@assert solve(30) == \"100010\"\
    \n@assert solve(31) == \"100011\"\n@assert solve(32) == \"100100\"\n@assert solve(33)\
    \ == \"100101\"\n@assert solve(34) == \"100110\"\n@assert solve(35) == \"100111\"\
    \n@assert solve(36) == \"101000\"\n@assert solve(37) == \"101001\"\n@assert solve(38)\
    \ == \"101010\"\n@assert solve(39) == \"101011\"\n@assert solve(40) == \"101100\"\
    \n@assert solve(41) == \"101101\"\n@assert solve(42) == \"101110\"\n@assert solve(43)\
    \ == \"101111\"\n@assert solve(44) == \"111000\"\n@assert solve(45) == \"111001\"\
    \n@assert solve(46) == \"111010\"\n@assert solve(47) == \"111011\"\n@assert solve(48)\
    \ == \"111100\"\n@assert solve(49) == \"111101\"\n@assert solve(50) == \"111110\"\
    \n@assert solve(51) == \"111111\"\n@assert solve(52) == \"10000000\"\n@assert\
    \ solve(53) == \"10000001\"\n@assert solve(54) == \"10000010\"\n@assert solve(55)\
    \ == \"\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp_hwnkp8k.jl:27\nin expression starting at\
    \ /tmp/tmp_hwnkp8k.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    \n    binary = \"\
    \"\n    \n    for d in digits(N)\n        binary += d\n    \n    return binary\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnran7p9f.jl:1\nin expression starting at /tmp/tmpnran7p9f.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    digits = zeros(Int, N)\n    digits[1] = 1\n    \n    for i = 2:N\n\
    \        digits[i] = digits[i-1] * 2\n    end\n    \n    return join(digits, \"\
    \")\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpb4_32mio.jl:30

    '
  stdout: "test set: Test Failed at /tmp/tmpb4_32mio.jl:33\n  Expression: candidate(1000)\
    \ == \"1\"\n   Evaluated: \"124816326412825651210242048409681921638432768655361310722621445242881048576209715241943048388608167772163355443267108864134217728268435456536870912107374182421474836484294967296858993459217179869184343597383686871947673613743895347227487790694454975581388810995116277762199023255552439804651110487960930222081759218604441635184372088832703687441776641407374883553282814749767106565629499534213121125899906842624225179981368524845035996273704969007199254740992180143985094819843602879701896396872057594037927936144115188075855872288230376151711744576460752303423488115292150460684697623058430092136939524611686018427387904-9223372036854775808000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\"\
    \ == \"1\"\nStacktrace:\n [1] macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:445\
    \ [inlined]\n [2] macro expansion\n   @ /tmp/tmpb4_32mio.jl:33 [inlined]\n [3]\
    \ macro expansion\n   @ /shared/centos7/julia/1.7.3/share/julia/stdlib/v1.7/Test/src/Test.jl:1283\
    \ [inlined]\n [4] top-level scope\n   @ /tmp/tmpb4_32mio.jl:32\ntest set: Test\
    \ Failed a"
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    end\n    if N ==\
    \ 0\n        return \"0\"\n    end\n    \n    digits = zeros(Int, 10)\n    digits[1]\
    \ = 1\n    \n    for d in digits[2:end]\n        digits[d] = digits[d-1] * 2\n\
    \    end\n    \n    digits[end] = digits[end-1] * 2\n    \n    sum = \"\"\n  \
    \  for d in digits\n        sum = sum * 10 + d\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\n\
    Problem 9\nA palindromic number reads the same both ways. The largest palindrome\
    \ made from the product of two 2-digit numbers is 9009 = 91 \xD7 99.\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t\
    @test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333)\
    \ == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjejs8fmz.jl:40\nin expression starting at\
    \ /tmp/tmpjejs8fmz.jl:40\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    \n    if N == 0\n\
    \        return \"0\"\n    \n    digits = zeros(Int, N+1)\n    digits[1] = 1\n\
    \    \n    for i = 2:N\n        digits[i] = digits[i-1] * 2\n        \n    sum\
    \ = \"\"\n    \n    for i = N:-1:1\n        sum = digits[i] + sum\n    end\n \
    \   \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solve(0)\
    \ == \"0\"\n@assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3)\
    \ == \"111\"\n@assert solve(4) == \"1010\"\n@assert solve(5) == \"10111\"\n@assert\
    \ solve(6) == \"111010\"\n@assert solve(7) == \"1110111\"\n@assert solve(8) ==\
    \ \"1111010\"\n@assert solve(9) == \"111101101\"\n@assert solve(10) == \"1111101010\"\
    \n@assert solve(11) == \"11111011111\"\n@assert solve(12) == \"111111101010\"\n\
    @assert solve(13) == \"1111111011111\"\n@assert solve(14) == \"1111111101010\"\
    \n@assert solve(15) == \"11111111010111\"\n@assert solve(16) == \"111111110111010\"\
    \n@assert solve(17) == \"1111111101110111\"\n@assert solve(18) == \"11111111011010\"\
    \n@assert solve(19) == \"111111110110111\"\n@assert solve(20) == \"11111111011101010\"\
    \n@assert solve(21) == \"111111110111011111\"\n@assert solve(22) == \"11111111011111010\"\
    \n@assert solve(23) == \"111111110111110111\"\n@assert solve(24) == \"111111110110101010\"\
    \n@assert solve(25) == \"1111111101101011111\"\n@assert solve(26) == \"111111110110111010\"\
    \n@assert solve(27) == \"1111111101101110111\"\n@assert solve(28) == \"1111111101110101010\"\
    \n@assert solve(29) == \"11111111011101010111\"\n@assert solve(30) == \"111111110111011101010\"\
    \n@assert solve(31) == \"1111111101110111011111\"\n@assert solve(32) == \"111111110111110101010\"\
    \n@assert solve(33) == \"1111111101111101010111\"\n@assert solve(34) == \"11111111011111010101010\"\
    \n@assert solve(35) == \"111111110111110101011111\"\n@assert solve(36) == \"1111111101111101110101010\"\
    \n@assert solve(37) == \"1111\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5kwr1d7h.jl:38\nin expression starting at\
    \ /tmp/tmp5kwr1d7h.jl:38\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    digits = zeros(Int, N)\n    digits[1] = 1\n    digits[2] = 1\n \
    \   digits[3] = 1\n    digits[4] = 1\n    digits[5] = 1\n    digits[6] = 1\n \
    \   digits[7] = 1\n    digits[8] = 1\n    digits[9] = 1\n    \n    sum = 0\n \
    \   for i in digits\n        sum += i\n    \n    return String(sum)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"\
    1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\
    \t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0n97onfg.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp0n97onfg.jl:1\n\
    in expression starting at /tmp/tmp0n97onfg.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    \n    digits = zeros(Int, N)\n   \
    \ digits[1] = 1\n    \n    for i = 2 to N\n        digits[i] = digits[i-1] * 2\n\
    \    end\n    \n    sum = 0\n    for i = 2 to N\n        sum = sum + digits[i]\n\
    \    end\n    \n    return string(digits, digits[N])\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 8\nWrite a Julia function called count_digits(N)\
    \ that returns the number of digits in binary representation of N.\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t\
    @test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333)\
    \ == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"for\" at /tmp/tmpfieoxgt_.jl:24 expected \"\
    end\", got \"N\"\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfieoxgt_.jl:24\n\
    in expression starting at /tmp/tmpfieoxgt_.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"-1\"\n    \n    if N < 10\n        return string(\"\
    0\", N)\n    \n    digits = string(\"0\", N)\n    \n    for i = digits.length\
    \ - 1, j = 0, k = 0; i >= 0; i--, j++, k++\n        digits[k] = digits[i] - digits[j]\
    \ + digits[k]\n    \n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(149)\n</cell>\n<code language=julia-1.5>\nsolve(151)\n</cell>\n<code language=julia-1.5>\n\
    solve(152)\n</cell>\n<code language=julia-1.5>\nsolve(153)\n</cell>\n<code language=julia-1.5>\n\
    solve(154)\n</cell>\n<code language=julia-1.5>\nsolve(155)\n</cell>\n<code language=julia-1.5>\n\
    solve(156)\n</cell>\n<code language=julia-1.5>\nsolve(157)\n</cell>\n<code language=julia-1.5>\n\
    solve(158)\n</cell>\n<code language=julia-1.5>\nsolve(159)\n</cell>\n<code language=julia-1.5>\n\
    solve(160)\n</cell>\n<code language=julia-1.5>\nsolve(161)\n</cell>\n<code language=julia-1.5>\n\
    solve(162)\n</cell>\n<code language=julia-1.5>\nsolve(163)\n</cell>\n<code language=julia-1.5>\n\
    solve(164)\n</cell>\n<code language=julia-1.5>\nsolve(165)\n</cell>\n<code language=julia-1.5>\n\
    solve(166)\n</cell>\n<code language=julia-1.5>\nsolve(167)\n</cell>\n<code language=julia-1.5>\n\
    solve(168)\n</cell>\n<code language=julia-1.5>\nsolve(169)\n</cell>\n<code language=julia-1.5>\n\
    solve(170)\n</cell>\n<code language=julia-1.5>\nsolve(171)\n</cell>\n<code language=julia-1.5>\n\
    solve(172)\n</cell>\n<code language=julia-1.5>\nsolve(173)\n</cell>\n<code language=julia-1.5>\n\
    solve(174)\n</cell>\n<code language=julia-1.5>\nsolve(175)\n</cell>\n<code language=julia-1.5>\n\
    solve(176)\n</cell\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2h0d63cx.jl:26\nin expression starting at /tmp/tmp2h0d63cx.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        return \"-1\"\n    \n    digits = zeros(Int, N)\n\
    \    \n    for i = 1:N\n        digits[i] = digits[i-1] + N % 2\n        N = N\
    \ / 2\n    end\n    \n    digits[N] = 1\n    \n    return join(digits)\nend\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\n\
    Problem 3\nA palindromic number reads the same both ways. The largest palindrome\
    \ made from the product of two 2-digit numbers is 9009 = 91 \xD7 99.\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t\
    @test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333)\
    \ == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5mfayq0e.jl:33\nin expression starting at\
    \ /tmp/tmp5mfayq0e.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        return \"0\"\n    \n    if N == 0 \n        return\
    \ \"0\"\n    \n    if N == 1 \n        return \"1\"\n    \n    if N > 1\n    \
    \    \n        digits = N % 10\n        \n        if digits == 0 \n          \
    \  return \"0\"\n        \n        binary = solve(floor(N / 10))\n        \n \
    \       return binary + string(digits)\n    \nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjje181tc.jl:40\nin expression starting at\
    \ /tmp/tmpjje181tc.jl:40\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    digits = digits(N)\n    \n    sum = \"\"\n    \n    for digit in\
    \ digits\n        sum = sum + digit\n    \n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsolve(1000)\n</cell>\n<code language=julia-1.3>\nsolve(150)\n\
    </cell>\n<code language=julia-1.3>\nsolve(147)\n</cell>\n<code language=julia-1.3>\n\
    solve(1500)\n</cell>\n<code language=julia-1.3>\nsolve(1500)\n</cell>\n<code language=julia-1.3>\n\
    solve(1500)\n</cell>\n<code language=julia-1.3>\nsolve(1500)\n</cell>\n<code language=julia-1.3>\n\
    solve(1500)\n</cell>\n<code language=julia-1.3>\nsolve(1500)\n</cell>\n<code language=julia-1.3>\n\
    solve(1500)\n</cell>\n<code language=julia-1.3>\nsolve(1500)\n</cell>\n<code language=julia-1.3>\n\
    solve(1500)\n</cell>\n<code language=julia-1.3>\nsolve(1500)\n</cell>\n<code language=julia-1.3>\n\
    solve(1500)\n</cell>\n<code language=julia-1.3>\nsolve(1500)\n</cell>\n<code language=julia-1.3>\n\
    solve(1500)\n</cell>\n<code language=julia-1.3>\nsolve(1500)\n</cell>\n<code language=julia-1.3>\n\
    solve(1500)\n</cell>\n<code language=julia-1.3>\nsolve(1500)\n</cell>\n<code language=julia-1.3>\n\
    solve(1500)\n</cell>\n<code language=julia-1.3>\nsolve(1500)\n</cell>\n<code language=julia-1.3>\n\
    solve(1500)\n</cell>\n<code language=julia-1.3>\nsolve(1500)\n</cell>\n<code language=julia-1.3>\n\
    solve(1500)\n</cell>\n<code language=julia-1.3>\nsolve(1500)\n</cell>\n<code language=julia-1.3>\n\
    solve(1500)\n</cell>\n<code language=julia-1.3>\nsolve(1500)\n</cell>\n<code language=julia-1.3>\n\
    solve(1500)\n</cell>\n<code language=julia-1.3>\nsolve(1500)\n</cell>\n<code language=julia-1.3>\n\
    solve(1500)\n</cell>\n<code language=julia-1.3>\nsolve(1500)\n</cell>\n<code language=julia-1.3>\n\
    solve(1500)\n</cell>\n<code language=julia-1.3>\nsolve(1500)\n</cell>\n<code language=julia-1.3>\n\
    solve(1500)\n</cell\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpso0msgh3.jl:28\nin expression starting at\
    \ /tmp/tmpso0msgh3.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    end\n    if N ==\
    \ 0\n        return \"0\"\n    end\n    \n    digits = zeros(Int, N+1)\n    digits[1]\
    \ = 1\n    \n    for i = 2:N\n        digits[i] = digits[i-1] * 2\n    end\n \
    \   \n    sum = 0\n    for i = 2:N\n        sum = sum + digits[i]\n    end\n \
    \   \n    return string(digits, digits[N])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: 'ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,
    0 broken.

    in expression starting at /tmp/tmpf7ywdcg_.jl:41

    '
  stdout: "test set: Test Failed at /tmp/tmpf7ywdcg_.jl:44\n  Expression: candidate(1000)\
    \ == \"1\"\n   Evaluated: \"[1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048,\
    \ 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304,\
    \ 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824,\
    \ 2147483648, 4294967296, 8589934592, 17179869184, 34359738368, 68719476736, 137438953472,\
    \ 274877906944, 549755813888, 1099511627776, 2199023255552, 4398046511104, 8796093022208,\
    \ 17592186044416, 35184372088832, 70368744177664, 140737488355328, 281474976710656,\
    \ 562949953421312, 1125899906842624, 2251799813685248, 4503599627370496, 9007199254740992,\
    \ 18014398509481984, 36028797018963968, 72057594037927936, 144115188075855872,\
    \ 288230376151711744, 576460752303423488, 1152921504606846976, 2305843009213693952,\
    \ 4611686018427387904, -9223372036854775808, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    digits = N % 10\n    N = N / 10\n    \n    if N == 0 \n        return\
    \ \"0\"\n    \n    digits = solve(digits)\n    \n    if digits == \"0\"\n    \
    \    return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n\
    \    if N == 0 \n        return \"0\"\n    \n    digits = digits + N % 10\n  \
    \  N = N / 10\n    \n    if N == 0 \n        return \"0\"\n    \n    digits =\
    \ digits + N % 10\n    N = N / 10\n    \n    if N == 0 \n        return \"0\"\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N == 0 \n  \
    \      return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n\
    \    if N == 0 \n        return \"0\"\n    \n    digits = digits + N % 10\n  \
    \  N = N / 10\n    \n    if N == 0 \n        return \"0\"\n    \n    digits =\
    \ digits + N % 10\n    N = N / 10\n    \n    if N == 0 \n        return \"0\"\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N == 0 \n  \
    \      return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n\
    \    if N == 0 \n        return \"0\"\n    \n    digits = digits + N % 10\n  \
    \  N = N / 10\n    \n    if N == 0 \n        return \"0\"\n    \n    digits =\
    \ digits + N % 10\n    N = N / 10\n    \n    if N == 0 \n        return \"0\"\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N == 0 \n  \
    \      return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n\
    \    if N == 0 \n        return \"0\"\n    \n    digits = digits + N % 10\n  \
    \  N = N / 10\n    \n    if N == 0 \n        return \"0\"\n    \n    digits =\
    \ digits + N % 10\n    N = N / 10\n    \n    if N == 0 \n        return \"0\"\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N == 0 \n  \
    \      return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n\
    \    if N == 0 \n        return \"0\"\n    \n    digits = digits + N % \nusing\
    \ Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"\
    1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\
    \t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpacodsmgb.jl:1\nin expression starting at /tmp/tmpacodsmgb.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    \n    digits = N % 10\n    N = N /\
    \ 10\n    \n    if N < 0\n        return \"0\"\n    \n    digits = digits + N\
    \ % 10\n    N = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    if N < 0\n        return \"0\"\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0\n    \
    \    return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n\
    \    if N < 0\n        return \"0\"\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n \
    \   digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0\n        return\
    \ \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    if N < 0\n        return \"0\"\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n    digits =\
    \ digits + N % 10\n    N = N / 10\n    \n    if N < 0\n        return \"0\"\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0\n    \
    \    return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n\
    \    if N < 0\n        return \"0\"\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n \
    \   digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0\n        return\
    \ \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    if \nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing condition in \"if\" at /tmp/tmpy5gj5yv2.jl:132\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpy5gj5yv2.jl:133\nin expression\
    \ starting at /tmp/tmpy5gj5yv2.jl:133\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    \n    digits = N % 10\n    N = N /\
    \ 10\n    \n    if N == 0\n        return \"0\"\n    \n    digits = solve(digits)\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N == 0\n   \
    \     return digits\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n\
    \    if N == 0\n        return digits\n    \n    digits = digits + N % 10\n  \
    \  N = N / 10\n    \n    if N == 0\n        return digits\n    \n    digits =\
    \ digits + N % 10\n    N = N / 10\n    \n    if N == 0\n        return digits\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N == 0\n   \
    \     return digits\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n\
    \    if N == 0\n        return digits\n    \n    digits = digits + N % 10\n  \
    \  N = N / 10\n    \n    if N == 0\n        return digits\n    \n    digits =\
    \ digits + N % 10\n    N = N / 10\n    \n    if N == 0\n        return digits\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N == 0\n   \
    \     return digits\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n\
    \    if N == 0\n        return digits\n    \n    digits = digits + N % 10\n  \
    \  N = N / 10\n    \n    if N == 0\n        return digits\n    \n    digits =\
    \ digits + N % 10\n    N = N / 10\n    \n    if N == 0\n        return digits\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N == 0\n   \
    \     return digits\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n\
    \    if N == 0\n        return digits\n    \n    digits = digits + N % 10\n  \
    \  N = N / 10\n    \n    if N == 0\n        return digits\n    \n    digits =\
    \ digits + N % 10\n    N = N / 10\n    \n    if N == 0\n        return digits\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N == 0\n   \
    \     return digits\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n\
    \    if N == 0\n        return digits\n    \n    \nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprttc_mcq.jl:1\nin expression starting at /tmp/tmprttc_mcq.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    \n    digits = N % 10\n    N = N /\
    \ 10\n    \n    if N < 0\n        return \"0\"\n    \n    digits = digits + N\
    \ % 10\n    N = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n    digits\
    \ = digits + N % 10\n    N = N / 10\n    \n    if N < 0\n        return \"0\"\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0\n    \
    \    return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n\
    \    if N < 0\n        return \"0\"\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n \
    \   digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0\n        return\
    \ \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    if N < 0\n        return \"0\"\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n    digits =\
    \ digits + N % 10\n    N = N / 10\n    \n    if N < 0\n        return \"0\"\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0\n    \
    \    return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n\
    \    if N < 0\n        return \"0\"\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n \
    \   digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0\n        return\
    \ \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    if \nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing condition in \"if\" at /tmp/tmpy5gj5yv2.jl:132\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpy5gj5yv2.jl:133\nin expression\
    \ starting at /tmp/tmpy5gj5yv2.jl:133\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    if N < 10\n        return string(\"\
    0\", N)\n    \n    digits = digits(N)\n    \n    sum = 0\n    for i in digits\n\
    \        sum += i\n    \n    return string(\"1\", sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7\nWrite a Julia function named digits that\
    \ takes a positive integer N and returns the number of digits in binary representation\
    \ of N.\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3ltkyvy4.jl:31\nin expression starting at\
    \ /tmp/tmp3ltkyvy4.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    if N == 0\n        return \"0\"\n\
    \    if N == 1\n        return \"1\"\n    if N == 2\n        return \"10\"\n \
    \   if N == 3\n        return \"11\"\n    if N == 4\n        return \"100\"\n\
    \    if N == 5\n        return \"101\"\n    if N == 6\n        return \"110\"\n\
    \    if N == 7\n        return \"111\"\n    if N == 8\n        return \"1000\"\
    \n    if N == 9\n        return \"1001\"\n    if N == 10\n        return \"1010\"\
    \n    if N == 11\n        return \"1011\"\n    if N == 12\n        return \"1100\"\
    \n    if N == 13\n        return \"1101\"\n    if N == 14\n        return \"1110\"\
    \n    if N == 15\n        return \"1111\"\n    return \"0\"\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(151)\n</cell>\n<code language=julia-1.5>\nsolve(152)\n</cell>\n<code language=julia-1.5>\n\
    solve(153)\n</cell>\n<code language=julia-1.5>\nsolve(154)\n</cell>\n<code language=julia-1.5>\n\
    solve(155)\n</cell>\n<code language=julia-1.5>\nsolve(156)\n</cell>\n<code language=julia-1.5>\n\
    solve(157)\n</cell>\n<code language=julia-1.5>\nsolve(158)\n</cell>\n<code language=julia-1.5>\n\
    solve(159)\n</cell>\n<code language=julia-1.5>\nsolve(160)\n</cell>\n<code language=julia-1.5>\n\
    solve(161)\n</cell>\n<code language=julia-1.5>\nsolve(162)\n</cell>\n<code language=julia-1.5>\n\
    solve(163)\n</cell>\n<code language=julia-1.5>\nsolve(164)\n</cell>\n<code language=julia-1.5>\n\
    solve(165)\n</cell>\n<code language=julia-1.5>\nsolve(166)\n</cell>\n<code language=julia-1.5>\n\
    solve(167)\n</cell>\n<code language=julia-1.5>\nsolve(168)\n</cell>\n<code language=julia-1.5>\n\
    solve(169)\n</cell>\n<code language=julia-1.5>\nsolve(170)\n</cell>\n<code language=julia-1.5>\n\
    solve(171)\n</cell>\n<code language=juli\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpensacvv8.jl:54\nin expression starting at\
    \ /tmp/tmpensacvv8.jl:54\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    digits = zeros(Int, N)\n    \n    for i = 1:N\n        digits[i]\
    \ = digits[i-1] + N % 2\n        N = N / 2\n    end\n    \n    return join(digits)\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=juli\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplva6px_t.jl:28\nin expression starting at\
    \ /tmp/tmplva6px_t.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        return \"-1\"\n    \n    digits = zeros(Int, N)\n\
    \    \n    for i = 1:N\n        digits[i] = digits[i-1] + N % 2\n        N = N\
    \ / 2\n    end\n    \n    digits[N] = digits[N-1] + N % 2\n    \n    return join(digits,\
    \ \"\")\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n\
    </cell>\n<text>\nProblem 4\nA palindromic number reads the same both ways. The\
    \ largest palindrome made from the product of two 2-digit numbers is 9009 = 91\
    \ \xD7 99.\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkzt8hdrq.jl:33\nin expression starting at\
    \ /tmp/tmpkzt8hdrq.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    digits = zeros(Int, N+1)\n    digits[1] = 1\n    digits[2] = 1\n\
    \    digits[3] = 1\n    digits[4] = 1\n    digits[5] = 1\n    digits[6] = 1\n\
    \    digits[7] = 1\n    digits[8] = 1\n    digits[9] = 1\n    digits[10] = 1\n\
    \    digits[11] = 1\n    digits[12] = 1\n    digits[13] = 1\n    digits[14] =\
    \ 1\n    digits[15] = 1\n    digits[16] = 1\n    digits[17] = 1\n    digits[18]\
    \ = 1\n    digits[19] = 1\n    digits[20] = 1\n    digits[21] = 1\n    digits[22]\
    \ = 1\n    digits[23] = 1\n    digits[24] = 1\n    digits[25] = 1\n    digits[26]\
    \ = 1\n    digits[27] = 1\n    digits[28] = 1\n    digits[29] = 1\n    digits[30]\
    \ = 1\n    digits[31] = 1\n    digits[32] = 1\n    digits[33] = 1\n    digits[34]\
    \ = 1\n    digits[35] = 1\n    digits[36] = 1\n    digits[37] = 1\n    digits[38]\
    \ = 1\n    digits[39] = 1\n    digits[40] = 1\n    digits[41] = 1\n    digits[42]\
    \ = 1\n    digits[43] = 1\n    digits[44] = 1\n    digits[45] = 1\n    digits[46]\
    \ = 1\n    digits[47] = 1\n    digits[48] = 1\n    digits[49] = 1\n    digits[50]\
    \ = 1\n    digits[51] = 1\n    digits[52] = 1\n    digits[53] = 1\n    digits[54]\
    \ = 1\n    digits[55] = 1\n    digits[56] = 1\n    digits[57] = 1\n    digits[58]\
    \ = 1\n    digits[59] = 1\n    digits[60] = 1\n    digits[61] = 1\n    digits[62]\
    \ = 1\n    digits[63] = 1\n    digits[64] = 1\n    digits[65] = 1\n    digits[66]\
    \ = 1\n    digits[67] = 1\n    digits[68] = 1\n    digits[69] = 1\n    digits[70]\
    \ = 1\n    digits[71] = 1\n    digits[72] = 1\n    digits[73] = 1\n    digits[74]\
    \ = 1\n    digits[75] = 1\n    digits[76] = 1\n    digits[77] = 1\n    digits[78]\
    \ = 1\n    digits[79] = 1\n    digits[80] = 1\n    digits[81] = 1\n    digits[82]\
    \ = 1\n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn8nvis7u.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpn8nvis7u.jl:1\n\
    in expression starting at /tmp/tmpn8nvis7u.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        return \"-1\"\n    \n    if N == 0\n        return\
    \ \"0\"\n    \n    if N == 1\n        return \"1\"\n    \n    digits = N % 10\n\
    \    \n    if digits == 0\n        return solve(floor(N / 10))\n    \n    return\
    \ solve(floor(N / 10)) + (\"0\" * digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(151)\n</cell>\n<code language=julia-1.5>\n\
    solve(152)\n</cell>\n<code language=julia-1.5>\nsolve(153)\n</cell>\n<code language=julia-1.5>\n\
    solve(154)\n</cell>\n<code language=julia-1.5>\nsolve(155)\n</cell>\n<code language=julia-1.5>\n\
    solve(156)\n</cell>\n<code language=julia-1.5>\nsolve(157)\n</cell>\n<code language=julia-1.5>\n\
    solve(158)\n</cell>\n<code language=julia-1.5>\nsolve(159)\n</cell>\n<code language=julia-1.5>\n\
    solve(160)\n</cell>\n<code language=julia-1.5>\nsolve(161)\n</cell>\n<code language=julia-1.5>\n\
    solve(162)\n</cell>\n<code language=julia-1.5>\nsolve(163)\n</cell>\n<code language=julia-1.5>\n\
    solve(164)\n</cell>\n<code language=julia-1.5>\nsolve(165)\n</cell>\n<code language=julia-1.5>\n\
    solve(166)\n</cell>\n<code language=julia-1.5>\nsolve(167)\n</cell>\n<code language=julia-1.5>\n\
    solve(168)\n</cell>\n<code language=julia-1.5>\nsolve(169)\n</cell>\n<code language=julia-1.5>\n\
    solve(170)\n</cell>\n<code language=julia-1.5>\nsolve(171)\n</cell>\n<code language=julia-1.5>\n\
    solve(172)\n</cell>\n<code language=julia-1.5>\nsolve(173)\n</cell>\n<code language=julia-1.5>\n\
    solve(174)\n</cell>\n<code language=julia-1.5>\nsolve(175)\n</cell>\n<code language=julia-1.5>\n\
    solve(176)\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuiwegfzk.jl:35\nin expression starting at\
    \ /tmp/tmpuiwegfzk.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    if N == 0 \n        return \"0\"\n\
    \    if N == 1 \n        return \"1\"\n    \n    digits = floor(log10(N))\n  \
    \  \n    binary = \"\"\n    \n    for d in digits:\n        binary = binary +\
    \ bin(N // 10 ** d)\n        N = N // 10 ** d\n    \n    return binary\nend\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t\
    @test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333)\
    \ == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm5b_2grm.jl:30\nin expression starting at\
    \ /tmp/tmpm5b_2grm.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        throw(DomainError(string(\"N must be positive\")))\n\
    \    \n    digits = digits(N)\n    \n    if N == 0 \n        return \"0\"\n  \
    \  \n    if N == 1 \n        return \"1\"\n    \n    if N % 2 == 0 \n        return\
    \ solve(N // 2) + digits[1]\n    \n    digits_odd = digits(N // 2)\n    \n   \
    \ if digits_odd[1] == 0 \n        return digits_odd[0] + solve(N // 2)\n    \n\
    \    return digits_odd[0] + solve(N // 2) + digits_odd[1]\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000)\n</cell>\n<text>\nProblem 7: Reverse a number\n\
    Given a positive integer N, return the reverse of its binary representation.\n\
    \    \n    Example\n    >>> solve(1000)\n    \"1000\"\n    >>> solve(150)\n  \
    \  \"1110\"\n    >>> solve(147)\n    \"11110\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppoasqrdr.jl:39\nin expression starting at\
    \ /tmp/tmppoasqrdr.jl:39\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    digits = digits(N)\n    \n    if N == 0 \n        digits = \"0\"\
    \n    \n    else if N < 0\n        digits = \"0\"\n    \n    else\n        digits\
    \ = digits[2:end]\n        \n    sum = 0\n    for digit in digits\n        sum\
    \ = sum + digit2bin(digit)\n    \n    return digit2bin(sum)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\nProblem 4\nWrite\
    \ a Julia function called digits2bin(digits::Array{Int64}). Given an array of\
    \ integers, return an array of binary numbers. Each binary number should be represented\
    \ as a string of length N.\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjrlok95u.jl:24\nin expression starting at\
    \ /tmp/tmpjrlok95u.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    if N < 10\n        return string(\"\
    1\",N)\n    if N < 100\n        return string(\"10\",N)\n    if N < 1000\n   \
    \     return string(\"100\",N)\n    if N < 10000\n        return string(\"1000\"\
    ,N)\n    if N < 100000\n        return string(\"10000\",N)\n    if N < 1000000\n\
    \        return string(\"100000\",N)\n    if N < 10000000\n        return string(\"\
    1000000\",N)\n    if N < 100000000\n        return string(\"10000000\",N)\n  \
    \  if N < 1000000000\n        return string(\"100000000\",N)\n    if N < 10000000000\n\
    \        return string(\"1000000000\",N)\n    if N < 100000000000\n        return\
    \ string(\"10000000000\",N)\n    if N < 1000000000000\n        return string(\"\
    100000000000\",N)\n    if N < 10000000000000\n        return string(\"1000000000000\"\
    ,N)\n    if N < 100000000000000\n        return string(\"10000000000000\",N)\n\
    \    if N < 1000000000000000\n        return string(\"100000000000000\",N)\n \
    \   if N < 10000000000000000\n        return string(\"1000000000000000\",N)\n\
    \    if N < 100000000000000000\n        return string(\"10000000000000000\",N)\n\
    \    if N < 1000000000000000000\n        return string(\"100000000000000000\"\
    ,N)\n    if N < 10000000000000000000\n        return string(\"1000000000000000000\"\
    ,N)\n    if N < 100000000000000000000\n        return string(\"10000000000000000000\"\
    ,N)\n    if N < 1000000000000000000000\n        return string(\"100000000000000000000\"\
    ,N)\n    if N < 10000000000000000000000\n        return string(\"1000000000000000000000\"\
    ,N)\n    if N < 100000000000000000000000\n        return string(\"10000000000000000000000\"\
    ,N)\n    if N < 1000000000000000000000000\n        return string(\"100000000000000000000000\"\
    ,N)\n    if N < 10000000000000000000000000\n        return string(\"1000000000000000000000000\"\
    ,N)\n    if N < 100000000000000000000000000\n        return string(\"10000000000000000000000000\"\
    ,N)\n    if N < 1000000000000000000000000000\n        return string(\"100000000000000000000000000\"\
    ,N)\n    if N < 10000000000000000000000000000\n        return string(\"1000000000000000000000000000\"\
    ,N)\n    if N < 100000000000000000000000000000\n        return string(\"10000000000000000000000000000\"\
    ,N)\n    if N < 1000000000000000000000000000000\n        return string(\"100000000000000000000000000000\"\
    ,N)\n    if N < 10000000000000000000000000000000\n        return string(\"1000000000000000000000000000000\"\
    ,N)\n    if N < 100000000000000000000000000000000\n        return string(\"10000000000000000000000000000000\"\
    ,N)\n    if N < 1000000000000000000000000000000000\n        return string(\"100000000000000000000000000000000\"\
    ,N)\n    if N < 1000000000000000000000000000000000\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150)\
    \ == \"110\")\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) ==\
    \ \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuy83i6ix.jl:1\nin expression starting at /tmp/tmpuy83i6ix.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    \n    if N < 0\n        return \"0\"\n    \n    if N < 10\n        return\
    \ string(\"1\",N)\n    \n    digits = string(\"0\",N)\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpydnzat52.jl:1\nin expression starting at /tmp/tmpydnzat52.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    end\n    \n    if\
    \ N == 0\n        return \"0\"\n    end\n    \n    digits = zeros(Int, 10)\n \
    \   digits[1] = 1\n    \n    for i = 2:N\n        digits[i] = digits[i-1] * 2\n\
    \    end\n    \n    return join(digits, \"\")\nend\n</cell>\n<text>\nProblem 3\n\
    Write a Julia function that takes a positive integer N and returns the number\
    \ of digits in binary representation of N. For example, solve(1000) should return\
    \ 3.\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
    \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"\
    1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\"\
    )\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgg6u3pxs.jl:35\nin expression starting at\
    \ /tmp/tmpgg6u3pxs.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    if N == 0 \n        return \"0\"\n\
    \    if N == 1 \n        return \"1\"\n    if N % 2 == 0 \n        return solve(N\
    \ div 2) + \"0\"\n    \n    sum = \"\"\n    i = 2\n    while i <= N \n       \
    \ sum += solve(N - i)\n        i += 2\n    return sum\nend\n</cell>\n<code language=julia-1.4>\n\
    solve(1000)\n</cell>\n<text>\nProblem 7: Binary to Decimal\nGiven a binary number\
    \ represented as a string, convert it to decimal form and return the decimal number.\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) ==\
    \ \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
    )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\n\
    end\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn3a4iky0.jl:25\nin expression starting at\
    \ /tmp/tmpn3a4iky0.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        error(\"N must be positive\")\n    end\n    if N ==\
    \ 0\n        return \"0\"\n    end\n    \n    binary = \"\"\n    \n    while N\
    \ > 0\n        digit = N % 2\n        N = N / 2\n        binary = string(digit)\
    \ + binary\n    end\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7: Binary to Decimal\nGiven a binary number\
    \ in string format, convert it to decimal and return the decimal number.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000) == \"\
    1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\")\n\
    \t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf50mezsj.jl:35\nin expression starting at\
    \ /tmp/tmpf50mezsj.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"0\"\n    if N < 10\n        return string(\"\
    0\", N)\n    \n    digits = string(\"0\", N)\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t\
    @test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147)\
    \ == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) ==\
    \ \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkokqgs_5.jl:1\nin expression starting at /tmp/tmpkokqgs_5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"Given a positive integer N, return the total sum of its digits in\
    \ binary.\n    \n    Example\n    >>> solve(1000)\n    \"1\"\n    >>> solve(150)\n\
    \    \"110\"\n    >>> solve(147)\n    \"1100\"\n    \n    Variables:\n       \
    \ @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"\nfunction solve(N::Int64)::String\
    \ \n    if N < 0\n        return \"-1\"\n    if N == 0 \n        return \"0\"\n\
    \    if N == 1 \n        return \"1\"\n    if N > 1 \n        digits = digits(N)\n\
    \        sum = 0\n        for d in digits\n            sum = sum + Int(d)\n  \
    \      return bin(sum)\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7\nWrite a Julia function called digits(N)\
    \ that returns the digits of N in binary.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(1000) == \"1\")\n\t@test(candidate(150) == \"110\"\
    )\n\t@test(candidate(147) == \"1100\")\n\t@test(candidate(333) == \"1001\")\n\t\
    @test(candidate(963) == \"10010\")\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpofco5dli.jl:31\nin expression starting at\
    \ /tmp/tmpofco5dli.jl:31\n"
  stdout: ''
