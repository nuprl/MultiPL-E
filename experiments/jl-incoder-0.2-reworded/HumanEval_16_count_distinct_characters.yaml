name: HumanEval_16_count_distinct_characters
language: jl
prompt: "\"\"\" Given a string, find out how many distinct characters (regardless\
  \ of case) does it consist of\n    >>> count_distinct_characters(\"xyzXYZ\")\n \
  \   3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\"\nfunction\
  \ count_distinct_characters(string::String)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = count_distinct_characters;\n\t\
  @test(candidate(\"\") == 0)\n\t@test(candidate(\"abcde\") == 5)\n\t@test(candidate(\"\
  abcdecadeCADE\") == 5)\n\t@test(candidate(\"aaaaAAAAaaaa\") == 1)\n\t@test(candidate(\"\
  Jerry jERRY JeRRRY\") == 5)\nend\n"
completions: ["    count_distinct_characters_helper(string,0,0)\nend", "    count_distinct_characters\
    \ = \"\"\n    for character in string\n        count_distinct_characters = count_distinct_characters\
    \ + character\n    end\n    return count_distinct_characters\nend\n</cell>\n<code\
    \ language=julia-1.4>\ncount_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.4>\n\
    count_distinct_characters(\"Jerry\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of times each character appears in\
    \ the string.", "    \n    count = 0\n    for c in string:\n        if c.isUpper():\n\
    \            count += 1\n        elif c.isLower():\n            count += 1\n \
    \       elif c.isUpper():\n            count += 1\n        elif c.isLower():\n\
    \            count += 1\n        else:\n            count += 1\n    return count\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of times the string \"abc\" appears in the string.", "    count_distinct_characters_helper(string,0,0)\n\
    end", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend\n</cell>\n<code language=julia-1.3>\n\
    count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.3>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of distinct characters in it.", "    count_distinct_characters(string,\
    \ 0)\nend", "    if string == \"\" then return 0\n    \n    chars = string.chars()\n\
    \    \n    chars = chars.filter(|c| c !~ Char.IsUpper(c))\n    \n    chars = chars.filter(|c|\
    \ c !~ Char.IsLower(c))\n    \n    chars = chars.filter(|c| c !~ Char.IsDigit(c))\n\
    \    \n    chars = chars.filter(|c| c !~ Char.IsControl(c))\n    \n    chars =\
    \ chars.filter(|c| c !~ Char.IsWhiteSpace(c))\n    \n    return chars.count\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"xyzXYZ\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"Jerry\")\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of distinct characters (regardless of case) does it consist of. For\
    \ example, the string \"xyzXYZ\" has 3 distinct characters (regardless of case).",
  "    count_distinct_characters(string, 0)\nend\n</cell>\n<code language=julia-1.5>",
  "    count_distinct_characters_helper(string,0,0)\nend", "    if string == \"\"\
    \ then return 0\n    else if string.length == 0 then return 0\n    else if string.length\
    \ == 1 then return 1\n    else if string.length == 2 then return 2\n    else if\
    \ string.length == 3 then return 3\n    else if string.length == 4 then return\
    \ 4\n    else if string.length == 5 then return 5\n    else if string.length ==\
    \ 6 then return 6\n    else if string.length == 7 then return 7\n    else if string.length\
    \ == 8 then return 8\n    else if string.length == 9 then return 9\n    else if\
    \ string.length == 10 then return 10\n    else if string.length == 11 then return\
    \ 11\n    else if string.length == 12 then return 12\n    else if string.length\
    \ == 13 then return 13\n    else if string.length == 14 then return 14\n    else\
    \ if string.length == 15 then return 15\n    else if string.length == 16 then\
    \ return 16\n    else if string.length == 17 then return 17\n    else if string.length\
    \ == 18 then return 18\n    else if string.length == 19 then return 19\n    else\
    \ if string.length == 20 then return 20\n    else if string.length == 21 then\
    \ return 21\n    else if string.length == 22 then return 22\n    else if string.length\
    \ == 23 then return 23\n    else if string.length == 24 then return 24\n    else\
    \ if string.length == 25 then return 25\n    else if string.length == 26 then\
    \ return 26\n    else if string.length == 27 then return 27\n    else if string.length\
    \ == 28 then return 28\n    else if string.length == 29 then return 29\n    else\
    \ if string.length == 30 then return 30\n    else if string.length == 31 then\
    \ return 31\n    else if string.length == 32 then return 32\n    else if string.length\
    \ == 33 then return 33\n    else if string.length == 34 then return 34\n    else\
    \ if string.length == 35 or string.length == 36 or string.length == 37 or string.length\
    \ == 38 or string.length == 39 or string.length == 40 or string.length == 41 or\
    \ string.length == 42 or string.length == 43\n    then return 35\n    else if\
    \ string.length == 44 or string.length == 45 or string.length == 46 or string.length\
    \ == 47 or string.length == 48 or string.length == 49 or string.length == 50 or\
    \ string.length == 51 or string.length == 52 or string.length == 53 or string.length\
    \ == 54 or string.length == 55 or string.length == 56 or string.length == 57 or\
    \ string.length == 58 or string.length == 59", "    count_distinct_characters(\"\
    \", string)\nend", "    count_distinct_characters(string, 0)\nend", "    \n  \
    \  count_distinct_characters = \n        count_distinct_characters(string.to_lowercase())\n\
    \        +count_distinct_characters(string.to_uppercase())\n        +count_distinct_characters(string.to_titlecase())\n\
    \        +count_distinct_characters(string.to_lowercase(string))\n        +count_distinct_characters(string.to_uppercase(string))\n\
    \        +count_distinct_characters(string.to_titlecase(string))\n        \n \
    \   return count_distinct_characters\n</code>\n<|/ a dscore=1 |>\n<| a dscore=0\
    \ |>\n<code>\ndef count_distinct_characters(string::String)::Int64\n    count_distinct_characters\
    \ = \n        count_distinct_characters(string.to_lowercase())\n        +count_distinct_characters(string.to_uppercase())\n\
    \        +count_distinct_characters(string.to_titlecase())\n        +count_distinct_characters(string.to_lowercase(string))\n\
    \        +count_distinct_characters(string.to_uppercase(string))\n        +count_distinct_characters(string.to_titlecase(string))\n\
    \        \n    return count_distinct_characters\n</code>\n<|/ a tags=string,haskell\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| a tags=string,haskell |>\n<code>\nimport Data.List", " \
    \   count_distinct_characters(string, 0)\nend", "    \n    count = 0\n    for\
    \ c in string:\n        if c.isUpper():\n            count += 1\n        elif\
    \ c.isLower():\n            count += 1\n        elif c.isDigit():\n          \
    \  count += 1\n    return count\n</cell>\n<text>\nExercise 3: Write a function\
    \ that counts the number of unique characters in a given string. For example,\
    \ given \"abcde\", it should return 4.", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend", "    \n    count_distinct_characters(string,\
    \ 0)\nend", "    \n    count_distinct_characters = \n        count_distinct_characters(string,\
    \ 0, \"\")\n    \n    return count_distinct_characters\nend count_distinct_characters",
  "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters\
    \ = foldl(add,0,map(tolower,string))\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of times each character\
    \ appears in the string. For example, the string \"abracadabra\" has 4 a's and\
    \ 2 b's, and the string \"aba\" has 1 a, 1 b, and 1 c.", "    \n    count = 0\n\
    \    for c in string:\n        if c.isUpper():\n            count += 1\n     \
    \   elif c.isLower():\n            count += 1\n        elif c.isDigit():\n   \
    \         count += 1\n        elif c.isSpace():\n            count += 1\n    \
    \    else:\n            count += 1\n    return count\n</code>\n<|/ a tags=string,haskell,count,character\
    \ |>\n<| c |>\nI like this solution, but I wonder if there's a way to avoid the\
    \ duplicated `if` statements.\n<|/ c |>\n<| c |>\nI agree with you, there might\
    \ be a way to avoid the duplicated `if` statements, but I haven't thought about\
    \ it yet. Maybe someone else will come up with a better solution.\n<|/ c |>\n\
    <| c |>\nI added a solution without `if` statements.\n<|/ c |>\n<| c |>\nI like\
    \ your solution, but I wonder if there's a way to avoid the duplicated `if` statements.\n\
    <|/ c |>\n<| c |>\nI added a solution without `if` statements.\n<|/ c |>\n<| a\
    \ tags=string,haskell,count,character |>\nHere's a solution without if-statements:\n\
    <code>\nimport Data.Char", "    \n    count_distinct_characters = String.length(string)\n\
    \    for character in string\n        count_distinct_characters = count_distinct_characters\
    \ - String.length(String.lower(character))\n        count_distinct_characters\
    \ = count_distinct_characters - String.length(String.upper(character))\n    end\n\
    \    return count_distinct_characters\nend\n</cell>\n<code language=julia-1.5>",
  "    count_distinct_characters = count(map(toLower, string))\nend", "    count_distinct_characters_helper(string,0,0)\n\
    end", "    count_distinct_characters(string, 0)\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string and\
    \ returns the number of distinct characters (regardless of case) does it consist\
    \ of. For example, given \"xyzXYZ\", it should return 3.", "    count_distinct_characters\
    \ = \n        count_distinct_characters_impl(string)\n    return count_distinct_characters\n\
    end count_distinct_characters", "    count_distinct_characters(string, 0)\nend",
  "    \n    count = 0\n    \n    for c in string:\n        if c.isUpper():\n    \
    \        count += 1\n        elif c.isLower():\n            count += 1\n     \
    \   elif c.isUpper():\n            count += 1\n        elif c.isLower():\n   \
    \         count += 1\n        elif c.isDigit():\n            count += 1\n    \
    \    elif c.isSpace():\n            count += 1\n        elif c.isAlpha():\n  \
    \          count += 1\n        elif c.isAlphaNumeric():\n            count +=\
    \ 1\n        elif c.isPunctuation():\n            count += 1\n        elif c.isSymbol():\n\
    \            count += 1\n        elif c.isPunctChar():\n            count += 1\n\
    \        elif c.isPunctChar():\n            count += 1\n        elif c.isPunctChar():\n\
    \            count += 1\n        elif c.isPunctChar():\n            count += 1\n\
    \        elif c.isPunctChar():\n            count += 1\n        elif c.isPunctChar():\n\
    \            count += 1\n        elif c.isPunctChar():\n            count += 1\n\
    \        elif c.isPunctChar():\n            count += 1\n        elif c.isPunctChar():\n\
    \            count += 1\n        elif c.isPunctChar():\n            count += 1\n\
    \        elif c.isPunctChar():\n            count += 1\n        elif c.isPunctChar():\n\
    \            count += 1\n        elif c.isPunctChar():\n            count += 1\n\
    \        elif c.isPunctChar():\n            count += 1\n        elif c.isPunctChar():\n\
    \            count += 1\n        elif c.isPunctChar():\n            count += 1\n\
    \        elif c.isPunctChar():\n            count += 1\n        elif c.isPunctChar():\n\
    \            count += 1\n        elif c.isPunctChar():\n            count += 1\n\
    \        elif c.isPunctChar():\n            count += 1\n        elif c.isPunctChar():\n\
    \            count += 1\n        elif c.isPunctChar():\n            count += 1\n\
    \        elif c.isPunctChar():\n            count += 1\n        elif c.isPunctChar():\n\
    \            count += 1\n        elif c.isPunctChar():\n            count += 1\n\
    \        elif c.isPunctChar():\n            count += 1\n        elif c.isPunctChar():\n\
    \            count += 1\n        elif c.isPunctChar():\n            count += 1\n\
    \        elif c.isPunctChar():\n            count += 1\n        elif c.isPunctChar():\n\
    \            count += 1\n        elif c.isPunctChar():\n            count += 1\n\
    \        elif c.isPunctChar():\n            count += 1\n        elif c.isPunctChar():\n\
    \            count += 1\n        elif c.isPunctChar():\n            count += 1\n\
    \        elif c.", "    \n    count_distinct_characters(string, 0)\nend", "  \
    \  if string == \"\"\n        0\n    else\n        count_distinct_characters(string[1:end-1])\
    \ + count_distinct_characters(string[end])\nend\n</cell>\n<code language=julia-1.3>\n\
    count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.3>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of distinct characters in that string.", "    count_distinct_characters(string,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"xyzXYZ\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"Jerry\")\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of distinct characters in that string.", "    count_distinct_characters\
    \ = string.count{char}\nend\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    xyzXYZ\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"Jerry\"\
    )\n</cell>\n<text>\nExercise: Write a function that returns the number of distinct\
    \ characters in a string. \nHint: Use count_distinct_characters()", "    count_distinct_characters(string,\
    \ 0)\nend", "    \n    count = 0\n    for c in string:\n        if c not in string.ascii_lowercase:\n\
    \            count += 1\n    return count\n</code>\n<|/ a dscore=1 |>\n<| c |>\n\
    This answer doesn't take into account the fact that `count_distinct_characters`\
    \ should return `0` for `\"Jerry\"`.\n<|/ c |>\n<| c |>\nI agree. My answer was\
    \ meant to be a guide to the OP's solution, not an exact solution. I'll edit my\
    \ answer to include a solution that does take into account the fact that `count_distinct_characters`\
    \ should return `0` for `\"Jerry\"`.\n<|/ c |>\n<| a dscore=1 |>\n<code>\ndef\
    \ count_distinct_characters(string::String)::Int64\n    count = 0\n    for c in\
    \ string.chars\n        if c not in string.ascii_lowercase\n            count\
    \ += 1\n    return count\n</code>\n<|/ a tags=string,haskell |>\n<| a dscore=1\
    \ |>\n<code>\nimport Data.List\nimport Data.Char", "    count_distinct_characters_helper(string,\
    \ \"\", \"\")\nend", "    count_distinct_characters = \"\"\n    for i in string.chars\n\
    \        count_distinct_characters = count_distinct_characters + i\n    return\
    \ count_distinct_characters.length\n</code>\n<|/ a tags=string,haskell,count |>\n\
    <| c |>\nThe `count_distinct_characters` function can be written more concisely\
    \ as `length . toLower` . map toLower`.\n<|/ c |>\n<| c |>\n`toLower` will convert\
    \ all characters to lower case. `map toLower` will apply `toLower` to each character\
    \ in the string. `length . toLower` will apply `toLower` to each character in\
    \ the string and count the characters. `length . map toLower` will apply `toLower`\
    \ to each character in the string and count the characters. `length . map toLower`\
    \ will apply `toLower` to each character in the string and count the characters.\
    \ `length . map toLower` will apply `toLower` to each character in the string\
    \ and count the characters.\n<|/ c |>\n<| c |>\n`length . map toLower` will apply\
    \ `toLower` to each character in the string and count the characters. `length\
    \ . map toLower` will apply `toLower` to each character in the string and count\
    \ the characters. `length . map toLower` will apply `toLower` to each character\
    \ in the string and count the characters. `length . map toLower` will apply `toLower`\
    \ to each character in the string and count the characters.\n<|/ c |>\n<| c |>\n\
    `length . map toLower` will apply `toLower` to each character in the string and\
    \ count the characters. `length . map toLower` will apply `toLower` to each character\
    \ in the string and count the characters. `length . map toLower` will apply `toLower`\
    \ to each character in the string and count the characters. `length . map toLower`\
    \ will apply `toLower` to each character in the string and count the characters.\n\
    <|/ c |>\n<| c |>\n`length . map toLower` will apply `toLower` to each character\
    \ in the string and count the characters. `length . map toLower` will apply `toLower`\
    \ to each character in the string and count the characters. `length . map toLower`\
    \ will apply `toLower` to each character in the string and count the characters.\
    \ `length . map toLower` will apply `toLower` to each character in the string\
    \ and count the characters.\n<|/ c |>\n<| a tags=string,haskell", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise 2\nWrite a function that counts the number\
    \ of distinct characters in a string that begin with a given prefix.", "    \n\
    \    count_distinct_characters = HashSet()\n    for char in string:\n        count_distinct_characters.add(char)\n\
    \    return count_distinct_characters.length\nend\n</cell>\n<code language=julia-1.5>",
  "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"xyzXYZ\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"Jerry\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of distinct characters in it (regardless of case).", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters = foldl(\n        count_distinct_characters_helper,\n\
    \        0,\n        string.chars\n    )\nend", "    count_distinct_characters(string,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"xyzXYZ\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"Jerry\")\n\
    </cell>\n<text>\nWrite a function that counts the number of distinct characters\
    \ in a string ignoring case.", "    if string == \"\" then return 0\n    \n  \
    \  chars = string.to_lowercase().chars()\n    \n    distinct = 0\n    for c in\
    \ chars do\n        if c != chars.next() then\n            distinct += 1\n   \
    \     end\n    end\n    \n    return distinct\nend\n</cell>\n<code language=julia-1.4>",
  "    \n    count_distinct_characters = String.length(string)\n    \n    for char\
    \ in string\n        count_distinct_characters = count_distinct_characters - String.length(String.lower(char))\n\
    \        count_distinct_characters = count_distinct_characters - String.length(String.upper(char))\n\
    \    end\n    \n    return count_distinct_characters\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of times the string \"Jerry\" occurs in the string. \nFor\
    \ example, given the string \"JerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJerryJ",
  "    count_distinct_characters(string, 0)\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise 2\nWrite a function that counts the number\
    \ of times a character appears in a string. For example, count_chars(\"xyzXYZ\"\
    , \"z\") should return 3.", "    \n    count_distinct_characters = \"\"\n    \n\
    \    for i in string:\n        if count_distinct_characters == \"\":\n       \
    \     count_distinct_characters = i\n        else:\n            if count_distinct_characters\
    \ != i:\n                count_distinct_characters = count_distinct_characters\
    \ + 1\n    \n    return count_distinct_characters\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nWrite a function that takes a string and returns the\
    \ number of times each character appears in the string. Case is ignored.", " \
    \   if string == \"\"\n        0\n    else\n        count_distinct_characters(string[1:end-1])\
    \ + count_distinct_characters(string[end])\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns the number of characters in the string that are not in the alphabet\
    \ \"abc\".", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend\n</cell>\n<code language=julia-1.0>\ncount_distinct_characters(\"xyzXYZ\"\
    )\n</cell>\n<code language=julia-1.0>\ncount_distinct_characters(\"Jerry\")\n\
    </cell>\n<text>\nExercise 3\nWrite a function that counts the number of times\
    \ a character appears in a string. For example, count_characters(\"abcabc\") should\
    \ return 3.", "    count_distinct_characters_helper(string, \"\", \"\")\nend",
  "    \n    count_distinct_characters = \n        count_distinct_characters_helper(\n\
    \            string\n        )\n    \n    return count_distinct_characters\nend\
    \ count_distinct_characters", "    count_distinct_characters = String.length(string)\n\
    \    return count_distinct_characters\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of distinct characters in that string. For example, count_distinct_characters(\"\
    xyzXYZ\") should return 3.", "    count_distinct_characters(string, 0)\nend",
  "    if string == \"\"\n        0\n    else\n        count_distinct_characters(string[1:end-1])\
    \ + count_distinct_characters(string[end])\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of characters in that\
    \ string that appear more than once.", "    count_distinct_characters = foldl(count_distinct_characters_helper,\
    \ 0::Int64, string)\nend", "    count_distinct_characters(string, 0)\nend", " \
    \   count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that counts the number\
    \ of distinct characters in a string ignoring case.", "    \n    count = 0\n \
    \   for c in string:\n        if c.isUpper():\n            count += 1\n      \
    \  elif c.isLower():\n            count += 1\n        elif c.isDigit():\n    \
    \        count += 1\n    return count\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,haskell\
    \ |>\n<code>\nimport Data.List", "    count_distinct_characters(string, 0)\nend",
  "    count_distinct_characters = \"\"\n    for character in string\n        count_distinct_characters\
    \ = count_distinct_characters + character\n    end\n    count_distinct_characters\
    \ = count_distinct_characters.toInt64()\n    return count_distinct_characters\n\
    end\n</cell>\n<code language=julia-1.5>", "    count_distinct_characters = foldl(count_distinct_characters_helper,\
    \ 0::Int64, string)\nend", "    count_distinct_characters = \n        count_distinct_characters(string.chars)\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"xyzXYZ\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"Jerry\")\n\
    </cell>\n<text>\nExercise: Write a function that takes a string and returns the\
    \ number of distinct characters in that string.", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters = \n        foldl(\n            fn\
    \ (count, char) -> count + count_distinct_characters(char),\n            0,\n\
    \            string.chars\n        )\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise: Write a function that counts the number of\
    \ distinct characters in a string that only consists of uppercase letters.", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    count_distinct_characters(string,\
    \ 0)\nend", "    \n    count_distinct_characters = String.length(string)\n   \
    \ \n    for i in 0..(count_distinct_characters - 1)\n        \n        if string.charAt(i)\
    \ == string.charAt(i+1)\n            count_distinct_characters = count_distinct_characters\
    \ - 1\n        end\n    end\n    \n    return count_distinct_characters\nend\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"xyzXYZ\")\n</cell>\n\
    <code language=julia-1.5>\ncount_distinct_characters(\"Jerry\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of times a substring appears\
    \ in a given string.", "    count_distinct_characters(\"\", string)\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_distinct_characters(\"xyzXYZ\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"Jerry\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of times\
    \ each character appears in the string. \nFor example, if the string were \"Jerry\"\
    , the function would return Dict(J=>1, e=>1, a=>1, r=>1, y=>1, =>1)", "    if\
    \ string == \"\"\n        0\n    else\n        count_distinct_characters(string[1:end-1])\
    \ + count_distinct_characters(string[end])\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are not in the alphabet \"abc\".", "    if string == \"\"\
    \n        0\n    else\n        count_distinct_characters(string[1:end-1]) + count_distinct_characters(string[end])\n\
    \    end\nend\n</cell>\n<code language=julia-1.1>", "    \n    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"xyzXYZ\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"Jerry\")\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of distinct characters in it.", "    count_distinct_characters(string,\
    \ 0)\nend\n</cell>\n<code language=julia-1.1>", "    count_distinct_characters(string,\
    \ 0)\nend\n</cell>\n<code language=julia-1.3>\ncount_distinct_characters(\"xyzXYZ\"\
    )\n</cell>\n<code language=julia-1.3>\ncount_distinct_characters(\"Jerry\")\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are not in the alphabet of our alphabet.",
  "    count_distinct_characters(string, 0)\nend\n</cell>\n<code language=julia-1.5>",
  "    count_distinct_characters = string.len()\n    for c in string.chars()\n   \
    \     count_distinct_characters = count_distinct_characters - 1\n    end\n   \
    \ return count_distinct_characters\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    \n    count_distinct_characters(\"\", string)\n    \nend\n</cell>\n\
    <code language=julia-1.5>", "    count_distinct_characters(string, 0)\nend", " \
    \   count_distinct_characters_helper(string,0,0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters\
    \ = HashSet()\n    for c in string:\n        count_distinct_characters.add(c)\n\
    \    return count_distinct_characters.length\n</code>\n<|/ a tags=string,haskell,functional-programming\
    \ |>\n<| c |>\nThis doesn't work. `count_distinct_characters` returns a `HashSet`,\
    \ which doesn't have a `length` method.\n<|/ c |>\n<| c |>\nI didn't know that.\
    \ Thanks for the heads up. I'll update the answer.\n<|/ c |>\n<| a dscore=2 |>\n\
    <code>\nimport Data.List", "    \n    count_distinct_characters = \"\"\n    for\
    \ character in string\n        count_distinct_characters += character\n    end\n\
    \    return count_distinct_characters.length\nend\n</cell>\n<code language=julia-1.3>\n\
    count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.3>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns the number of characters in the string that are not in the alphabet\
    \ (including uppercase and lowercase).", "    count_distinct_characters = count(string.chars)\n\
    end", "    count_distinct_characters = \n        string.map(x => x.toLowerCase\
    \ |> String.length |> Int64) |> \n        foldl(add, 0L)\n</code>\n<|/ a |>\n\
    <| c |>\nThe `foldl` function was new to me, and it looks like it could be very\
    \ useful in other situations. Thanks for sharing!\n<|/ c |>\n<| c |>\nI added\
    \ a version that doesn't require `foldl`.\n<|/ c |>\n<| a dscore=2 |>\nI like\
    \ using foldl for these kinds of problems. It's a little bit more concise than\
    \ a for loop, but it's also more flexible (you can do more complicated things\
    \ with it).\n<code>\nlet count_distinct_characters(string::String)::Int64 = \n\
    \    string.foldl(fun acc c -> if c.ToLower() = c then acc + 1 else acc) 0\n</code>\n\
    <|/ a tags=string,f# |>\n<| c |>\nI like it, but I wonder if this is actually\
    \ more efficient than a for loop. I'm guessing it's not, but I'd like to know\
    \ for sure.\n<|/ c |>\n<| c |>\nI doubt it would be more efficient, but I guess\
    \ it would be more readable. `foldl` also has some nice properties that make it\
    \ very useful for other things.\n<|/ c |>\n<| c |>\nI added a version that doesn't\
    \ require `foldl`.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nlet count_distinct_characters(string::String)::Int64\
    \ = \n    string |> Seq.countBy (fun c -> c.ToLower()) |> Seq.length\n</code>\n\
    <|/ a tags=string,f# |>\n<| a tags=string,f# |>\n<code>\nlet count_distinct_characters(string::String)::Int64\
    \ = \n    string |> Seq.countBy (fun c -> c.ToLower()) |> Seq.length\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=string,f# |>\n<code>\nlet count_distinct_characters(string::String)::Int64\
    \ = \n    string |> Seq.countBy (fun c -> c.ToLower()) |> Seq.length\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nlet count_distinct_characters(string::String)::Int64\
    \ = \n    string |> Seq.countBy (fun ", "    count_distinct_characters(string,\
    \ 0)\nend", "    \n    count_distinct_characters = \"\"\n    for character in\
    \ string\n        count_distinct_characters = count_distinct_characters + character\n\
    \    end\n    \n    return count_distinct_characters.length\nend", "    count_distinct_characters(string,\
    \ 0)\nend\n</cell>\n<code language=julia-1.0>\ncount_distinct_characters(\"xyzXYZ\"\
    )\n</cell>\n<code language=julia-1.0>\ncount_distinct_characters(\"Jerry\")\n\
    </cell>\n<text>\nExercise: Write a function that takes a string and returns the\
    \ number of distinct characters in that string in upper case. For example, count_distinct_characters(\"\
    xyzXYZ\") should return 3.", "    count_distinct_characters = \"\"\n    for char\
    \ in string\n        count_distinct_characters = count_distinct_characters + char\n\
    \    end\n    return count_distinct_characters.length\nend", "    count_distinct_characters(string,\
    \ 0)\nend\n</cell>\n<code language=julia-1.4>\ncount_distinct_characters(\"xyzXYZ\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_distinct_characters(\"Jerry\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of distinct\
    \ characters in a given string. \nThe function should take a string as input,\
    \ and output a number.", "    count_distinct_characters(string, 0)\nend", "  \
    \  \n    count_distinct_characters = \n        count_distinct_characters(string::String)::Int64\n\
    \    \n    if string == \"\"\n        count_distinct_characters = 1\n    else\n\
    \        count_distinct_characters = \n            count_distinct_characters(string::String)::Int64\
    \ + \n            count_distinct_characters(string::String)::Int64\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"xyzXYZ\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"Jerry\")\n\
    </cell>\n<text>\nExercise\nWrite a function that counts the number of unique characters\
    \ in a given string.", "    \n    count_distinct_characters = \"\"\n    for character\
    \ in string\n        count_distinct_characters = count_distinct_characters + character\n\
    \    end\n    return count_distinct_characters.length\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"Jerry\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"Jerry\")\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"Jerry\")\n</cell>\n\
    <code language=julia-1.5>\ncount_distinct_characters(\"Jerry\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"Jerry\")\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"Jerry\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"Jerry\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"Jerry\")\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"Jerry\")\n</cell>\n\
    <code language=julia-1.5>\ncount_distinct_characters(\"Jerry\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"Jerry\")\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"Jerry\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"Jerry\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"Jerry\")\n\
    </cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"Jerry\")\n</cell>\n\
    <code language=julia-1.5>\ncount_distinct_characters(\"Jerry\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"Jerry\")\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"Jerry\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"Jerry\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"Jerry", " \
    \   \n    count_distinct_characters = \n        count_distinct_characters(\n \
    \           string\n            |> String.to_lowercase\n        )\n    \n    count_distinct_characters\
    \ = \n        count_distinct_characters + \n        count_distinct_characters(\n\
    \            string\n            |> String.to_uppercase\n        )\n    \n   \
    \ count_distinct_characters\nend", "    \n    count = 0\n    for c in string:\n\
    \        if c.isUpper():\n            count += 1\n        elif c.isLower():\n\
    \            count += 1\n        elif c.isDigit():\n            count += 1\n \
    \       elif c.isSpace():\n            count += 1\n        elif c.isAlpha():\n\
    \            count += 1\n        elif c.isAlphaNumeric():\n            count +=\
    \ 1\n        elif c.isPunct():\n            count += 1\n        else:\n      \
    \      count += 1\n    return count\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of uppercase letters, lowercase letters,\
    \ digits, spaces, and punctuation marks does it consist of. For example, given\
    \ \"xyzXYZ\", it should return 3.", "    count_distinct_characters = \"\"\n  \
    \  for i in string\n        count_distinct_characters = count_distinct_characters\
    \ + i\n    end\n    return count_distinct_characters\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise: Write a function that counts the number of\
    \ distinct characters in a string ignoring case.", "    count_distinct_characters\
    \ = \"\"\n    for i in string\n        count_distinct_characters += i\n    return\
    \ count_distinct_characters.length\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters = Set.new()\n    for c in string:\n\
    \        if c not in count_distinct_characters:\n            count_distinct_characters.add(c)\n\
    \    return count_distinct_characters.length\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ tags=string,haskell,algorithm |>\n<code>\nimport Data.List\nimport Data.Maybe\n\
    import Data.Char", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\n@code_native count_distinct_characters(\"\
    xyzXYZ\")\n</cell>\n<code language=julia-1.5>\n@code_native count_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns the number of distinct characters in that string. \nFor example, given\
    \ the string \"Jerry\", it should return 4.", "    count_distinct_characters(string,\
    \ 0)\nend\n</cell>\n<code language=julia-1.4>\ncount_distinct_characters(\"xyzXYZ\"\
    )\n</cell>\n<text>\nExercise 3\nWrite a function that counts the number of characters\
    \ in a string that appears more than once.", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend\n</cell>\n<code language=julia-1.0>\ncount_distinct_characters(\"xyzXYZ\"\
    )\n</cell>\n<code language=julia-1.0>\ncount_distinct_characters(\"Jerry\")\n\
    </cell>\n<text>\nExercise: Write a function that counts the number of distinct\
    \ characters in a string that start with a given character. For example, count_distinct_characters(\"\
    xyzXYZ\", \"x\") should return 3.", "    count_distinct_characters(string, 0)\n\
    end", "    count_distinct_characters = \"\"\n    for character in string\n   \
    \     count_distinct_characters += character\n    end\n    return count_distinct_characters.length\n\
    end", "    count_distinct_characters(string, 0)\nend\n</cell>\n<code language=julia-1.0>\n\
    count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.0>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of distinct characters in that string. \nWrite a function\
    \ that takes a string and returns the number of distinct characters in that string\
    \ ignoring case.\nWrite a function that takes a string and returns the number\
    \ of distinct characters in that string ignoring case.\nWrite a function that\
    \ takes a string and returns the number of distinct characters in that string\
    \ ignoring case.\nWrite a function that takes a string and returns the number\
    \ of distinct characters in that string ignoring case.\nWrite a function that\
    \ takes a string and returns the number of distinct characters in that string\
    \ ignoring case.\nWrite a function that takes a string and returns the number\
    \ of distinct characters in that string ignoring case.\nWrite a function that\
    \ takes a string and returns the number of distinct characters in that string\
    \ ignoring case.\nWrite a function that takes a string and returns the number\
    \ of distinct characters in that string ignoring case.\nWrite a function that\
    \ takes a string and returns the number of distinct characters in that string\
    \ ignoring case.\nWrite a function that takes a string and returns the number\
    \ of distinct characters in that string ignoring case.\nWrite a function that\
    \ takes a string and returns the number of distinct characters in that string\
    \ ignoring case.\nWrite a function that takes a string and returns the number\
    \ of distinct characters in that string ignoring case.\nWrite a function that\
    \ takes a string and returns the number of distinct characters in that string\
    \ ignoring case.\nWrite a function that takes a string and returns the number\
    \ of distinct characters in that string ignoring case.\nWrite a function that\
    \ takes a string and returns the number of distinct characters in that string\
    \ ignoring case.\nWrite a function that takes a string and returns the number\
    \ of distinct characters in that string ignoring case.\nWrite a function that\
    \ takes a string and returns the number of distinct characters in that string\
    \ ignoring case.\nWrite a function that takes a string and returns the number\
    \ of distinct characters in that string ignoring case.\nWrite a function that\
    \ takes a string and returns the number of distinct characters in that string\
    \ ignoring case.\nWrite a function that takes a string and returns the number\
    \ of distinct characters in that string ignoring case.\nWrite a function that\
    \ takes a string and returns the number of distinct characters in that string\
    \ ignoring case.\nWrite a function that takes a string and returns the number\
    \ of distinct characters in that string ignoring case.\nWrite a function that\
    \ takes a string and returns the number of distinct characters in that string\
    \ ignoring case.\nWrite a function that takes a string and returns the number\
    \ of distinct characters in that string ignoring case.\nWrite a function that\
    \ takes a string and returns the number of distinct characters in that string\
    \ ignoring case.\nWrite a function that takes a string and returns the number\
    \ of distinct characters in that string ", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend\n</cell>\n<code language=julia-1.5>\n\
    @time count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.5>\n\
    @time count_distinct_characters(\"Jerry\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of distinct characters\
    \ in it (regardless of case).", "    count_distinct_characters(string, 0)\nend",
  "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend\n</cell>\n<code language=julia-1.3>\n\
    count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.3>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nWrite a function that counts the number of distinct\
    \ characters in a string ignoring case.", "    count_distinct_characters(string,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"xyzXYZ\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"Jerry\")\n\
    </cell>\n<text>\nExercise: Write a function that counts the number of distinct\
    \ characters in a string ignoring case.", "    count_distinct_characters_helper(string,0,0)\n\
    end", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters_helper(string,0,0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend\n</cell>\n<code language=julia-1.3>\n\
    count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.3>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of distinct characters (regardless of case) in the string.\
    \ For example, count_distinct_characters(\"xyzXYZ\") should return 3.", "    count_distinct_characters\
    \ = foldl(\n        count_distinct_characters_helper,\n        0,\n        string.chars\n\
    \    )\nend", "    count_distinct_characters(string, 0)\nend", "    \n    count\
    \ = 0\n    for c in string:\n        if c.isUpper():\n            count += 1\n\
    \        elif c.isLower():\n            count += 1\n        elif c.isDigit():\n\
    \            count += 1\n        elif c.isSpace():\n            count += 1\n \
    \   return count\n</cell>\n<cell>\ncount_distinct_characters(\"xyzXYZ\")\n</cell>\n\
    <cell>\ncount_distinct_characters(\"Jerry\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are not digits. For example, given the string \"Jerry\", your function\
    \ should return 3.", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_native count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.5>\n\
    @code_native count_distinct_characters(\"Jerry\")\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of distinct characters\
    \ in that string.", "    \n    count_distinct_characters = \"\"\n    \n    for\
    \ character in string:\n        if character in count_distinct_characters:\n \
    \           count_distinct_characters = count_distinct_characters + character\n\
    \        else:\n            count_distinct_characters = count_distinct_characters\
    \ + 1\n    \n    return count_distinct_characters\n</code>\n<|/ a tags=string,haskell\
    \ |>\n<| c |>\n`count_distinct_characters = foldl (\\acc x -> if x `elem` acc\
    \ then acc else (acc ++ [x])) [] string`\n<|/ c |>\n<| c |>\n`foldl` isn't a good\
    \ choice here because `foldl` will traverse the entire list before returning the\
    \ result. `foldl'` will traverse the list lazily and return the result immediately.\n\
    <|/ c |>\n<| c |>\n`foldl'` will traverse the list lazily and return the result\
    \ immediately. `foldl` will traverse the entire list before returning the result.\
    \ `foldl` will traverse the list lazily and return the result immediately. `foldl'`\
    \ will traverse the list lazily and return the result immediately. `foldl` will\
    \ traverse the list lazily and return the result immediately. `foldl'` will traverse\
    \ the list lazily and return the result immediately. `foldl` will traverse the\
    \ list lazily and return the result immediately. `foldl'` will traverse the list\
    \ lazily and return the result immediately. `foldl` will traverse the list lazily\
    \ and return the result immediately. `foldl'` will traverse the list lazily and\
    \ return the result immediately. `foldl` will traverse the list lazily and return\
    \ the result immediately. `foldl'` will traverse the list lazily and return the\
    \ result immediately. `foldl` will traverse the list lazily and return the result\
    \ immediately. `foldl'` will traverse the list lazily and return the result immediately.\
    \ `foldl` will traverse the list lazily and return the result immediately. `foldl'`\
    \ will traverse the list lazily and return the result immediately. `foldl` will\
    \ traverse the list lazily and return the result immediately. `foldl'` will traverse\
    \ the list lazily and return the result immediately. `foldl` will traverse the\
    \ list lazily and return the result immediately. `foldl'` will traverse the list\
    \ lazily and return the result immediately. ", "    \n    count_distinct_characters\
    \ = \"\"\n    for character in string\n        count_distinct_characters = count_distinct_characters\
    \ + character\n    end\n    \n    return count_distinct_characters\nend\n</cell>\n\
    <code language=julia-1.5>\ncount_distinct_characters(\"xyzXYZ\")\n</cell>\n<code\
    \ language=julia-1.5>\ncount_distinct_characters(\"Jerry\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of characters\
    \ in the string that are not in the alphabet (case insensitive).", "    if string\
    \ == \"\"\n        0\n    else\n        count_distinct_characters(string[1:end-1])\
    \ + count_distinct_characters(string[end])\nend\n</cell>\n<code language=julia-1.5>",
  "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    if string == \"\"\n        0\n    else\n        count_distinct_characters(string[1:end-1])\
    \ + count_distinct_characters(string[end])\nend\n</cell>\n<code language=julia-1.4>",
  "    \n    count_distinct_characters = HashSet()\n    for c in string:\n       \
    \ if c in count_distinct_characters:\n            count_distinct_characters.add(c)\n\
    \        else:\n            count_distinct_characters.add(c+c.upper())\n     \
    \       count_distinct_characters.add(c+c.lower())\n            count_distinct_characters.add(c+c.title())\n\
    \            count_distinct_characters.add(c+c.capitalize())\n            count_distinct_characters.add(c+c.swapcase())\n\
    \            count_distinct_characters.add(c+c.title())\n            count_distinct_characters.add(c+c.swapcase())\n\
    \            count_distinct_characters.add(c+c.lower())\n            count_distinct_characters.add(c+c.upper())\n\
    \            count_distinct_characters.add(c+c.title())\n            count_distinct_characters.add(c+c.swapcase())\n\
    \            count_distinct_characters.add(c+c.lower())\n            count_distinct_characters.add(c+c.upper())\n\
    \            count_distinct_characters.add(c+c.title())\n            count_distinct_characters.add(c+c.swapcase())\n\
    \            count_distinct_characters.add(c+c.lower())\n            count_distinct_characters.add(c+c.upper())\n\
    \            count_distinct_characters.add(c+c.title())\n            count_distinct_characters.add(c+c.swapcase())\n\
    \            count_distinct_characters.add(c+c.lower())\n            count_distinct_characters.add(c+c.upper())\n\
    \            count_distinct_characters.add(c+c.title())\n            count_distinct_characters.add(c+c.swapcase())\n\
    \            count_distinct_characters.add(c+c.lower())\n            count_distinct_characters.add(c+c.upper())\n\
    \            count_distinct_characters.add(c+c.title())\n            count_distinct_characters.add(c+c.swapcase())\n\
    \            count_distinct_characters.add(c+c.lower())\n            count_distinct_characters.add(c+c.upper())\n\
    \            count_distinct_characters.add(c+c.title())\n            count_distinct_characters.add(c+c.swapcase())\n\
    \            count_distinct_characters.add(c+c.lower())\n            count_distinct_characters.add(c+c.upper())\n\
    \            count_distinct_characters.add(c+c.title())\n            count_distinct_characters.add(c+c.swapcase())\n\
    \            count_distinct_characters.add(c+c.lower())\n            count_distinct_characters.add(c+c.upper())\n\
    \            count_distinct_characters.add(c+c.title())\n            count_distinct_characters.add(c+c.swapcase())\n\
    \            count_distinct_characters.add(c+c.", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters_helper(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>", "    \n    count_distinct_characters\
    \ = \n        count_distinct_characters(string::String)::Int64\n    \n    if string\
    \ == \"\"\n        count_distinct_characters = 1\n    else\n        count_distinct_characters\
    \ = \n            count_distinct_characters(string::String)::Int64 + \n      \
    \      count_distinct_characters(string::String)::Int64\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of distinct characters in that string. \nFor example, given the string \"xyzXYZ\"\
    , the function should return 3.", "    \n    count = 0\n    for c in string:\n\
    \        if c.isUpper():\n            count += 1\n        elif c.isLower():\n\
    \            count += 1\n        elif c.isDigit():\n            count += 1\n \
    \       elif c.isSpace():\n            count += 1\n    return count\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis doesn't work. `count_distinct_characters(\"Jerry\"\
    )` returns `4` instead of `3`.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before\
    \ posting. What is your input? What is your expected output? What is your actual\
    \ output?\n<|/ c |>\n<| c |>\nI tested it again and it works now. Thanks for pointing\
    \ that out.\n<|/ c |>\n<| a dscore=1 |>\n<code>\ndef count_distinct_characters(string::String)::Int64\
    \ \n    \n    count = 0\n    for c in string:\n        if c.isUpper():\n     \
    \       count += 1\n        elif c.isLower():\n            count += 1\n      \
    \  elif c.isDigit():\n            count += 1\n        elif c.isSpace():\n    \
    \        count += 1\n    return count\n</code>\n<|/ a tags=haskell,string |>\n\
    <| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding how and/or why it solves the problem would improve the answer's long-term\
    \ value.\n<|/ c |>\n<| a |>\n<code>\nimport Data.Char", "    count_distinct_characters_helper(string,\
    \ 0, \"\")\nend", "    if string == \"\"\n        0\n    else\n        count_distinct_characters(string[1:end-1])\
    \ + count_distinct_characters(string[end])\nend\n</cell>\n<code language=julia-1.5>",
  "    count_distinct_characters = \n        count_distinct_characters_impl(string)\n\
    end\n</cell>\n<code language=julia-1.4>\ncount_distinct_characters(\"xyzXYZ\"\
    )\n</cell>\n<code language=julia-1.4>\ncount_distinct_characters(\"Jerry\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in that string that are not in the alphabet (including\
    \ spaces). For example, if the input string is \"Jerry\", the output should be\
    \ 4.", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(\"\
    \", string)\nend", "    count_distinct_characters(string, 0)\nend", "    if string\
    \ == \"\" then return 0\n    else if string[0] == string[1] then return 1\n  \
    \  else if string[0] == string[2] then return 2\n    else if string[0] == string[3]\
    \ then return 3\n    else if string[0] == string[4] then return 4\n    else if\
    \ string[0] == string[5] then return 5\n    else if string[0] == string[6] then\
    \ return 6\n    else if string[0] == string[7] then return 7\n    else if string[0]\
    \ == string[8] then return 8\n    else if string[0] == string[9] then return 9\n\
    \    else if string[0] == string[10] then return 10\n    else if string[0] ==\
    \ string[11] then return 11\n    else if string[0] == string[12] then return 12\n\
    \    else if string[0] == string[13] then return 13\n    else if string[0] ==\
    \ string[14] then return 14\n    else if string[0] == string[15] then return 15\n\
    \    else if string[0] == string[16] then return 16\n    else if string[0] ==\
    \ string[17] then return 17\n    else if string[0] == string[18] then return 18\n\
    \    else if string[0] == string[19] then return 19\n    else if string[0] ==\
    \ string[20] then return 20\n    else if string[0] == string[21] then return 21\n\
    \    else if string[0] == string[22] then return 22\n    else if string[0] ==\
    \ string[23] then return 23\n    else if string[0] == string[24] then return 24\n\
    \    else if string[0] == string[25] then return 25\n    else if string[0] ==\
    \ string[26] then return 26\n    else if string[0] == string[27] then return 27\n\
    \    else if string[0] == string[28] then return 28\n    else if string[0] ==\
    \ string[29] then return 29\n    else if string[0] == string[30] then return 30\n\
    \    else if string[0] == string[31] then return 31\n    else if string[0] ==\
    \ string[32] then return 32\n    else if string[0] == string[33] then return 33\n\
    \    else if string[0] == string[34] then return 34\n    else if string[0] ==\
    \ string[35] then return 35\n    else if string[0] == string[36] then return 36\n\
    \    else if string[0] == string[37] then return 37\n    else if string[0] ==\
    \ string[38] then return 38\n    else if string[0] == string[39] then return 39\n\
    \    else if string[0] == string[40] then return 40\n", "    count_distinct_characters\
    \ = \n        foldl(\n            count_distinct_characters_helper,\n        \
    \    0,\n            string.chars()\n        )\n    return count_distinct_characters\n\
    </code>\n<|/ a dscore=2 |>\n<| a tags=haskell,string |>\n<code>\nimport Data.List",
  "    if string == \"\" then return 0 \n    else \n        count_distinct_characters(string[1:end-1])\
    \ + count_distinct_characters(string[end])\n    end\nend\n</cell>\n<code language=julia-1.4>",
  "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend\n</cell>\n<code language=julia-1.3>\ncount_distinct_characters(\"xyzXYZ\"\
    )\n</cell>\n<code language=julia-1.3>\ncount_distinct_characters(\"Jerry\")\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the number of distinct\
    \ characters in a given string. For example, given \"xyzXYZ\", it should return\
    \ 3.", "    \n    count_distinct_characters = \"\"\n    for character in string\n\
    \        count_distinct_characters += character\n    end\n    return count_distinct_characters.length\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"xyzXYZ\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"Jerry\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of times each character appears in the string. \nFor example, given\
    \ the string \"Jerry\" it should return {\"J\" = 1, \"y\" = 1, \"r\" = 1, \"e\"\
    \ = 2}.", "    \n    count_distinct_characters(\"\", string)\n    ", "    \n \
    \   count_distinct_characters = \n        string.map(x => x.toLowerCase |> String.length\
    \ |> Int64) |> \n        foldl(add, 0L)\n    \nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise: Write a function that counts the number of\
    \ characters in a string that appears more than once.", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(string, 0)\nend", "    \n    count\
    \ = 0\n    for c in string:\n        if c.isUpper():\n            count += 1\n\
    \        elif c.isLower():\n            count += 1\n        elif c.isDigit():\n\
    \            count += 1\n        elif c.isSpace():\n            count += 1\n \
    \   return count\n</code>\n<|/ a tags=string,haskell |>\n<| c |>\n`countDistinctChars\
    \ \"\" = 0` should be `countDistinctChars \"\" = 1` since `\"\"` is an empty string.\
    \ Also `countDistinctChars \"\" = 1` should be `countDistinctChars \"\" = 0` since\
    \ `\"\"` is an empty string. Also `countDistinctChars \"\" = 1` should be `countDistinctChars\
    \ \"\" = 1` since `\"\"` is an empty string. Also `countDistinctChars \"\" = 1`\
    \ should be `countDistinctChars \"\" = 1` since `\"\"` is an empty string. Also\
    \ `countDistinctChars \"\" = 1` should be `countDistinctChars \"\" = 1` since\
    \ `\"\"` is an empty string. Also `countDistinctChars \"\" = 1` should be `countDistinctChars\
    \ \"\" = 1` since `\"\"` is an empty string. Also `countDistinctChars \"\" = 1`\
    \ should be `countDistinctChars \"\" = 1` since `\"\"` is an empty string. Also\
    \ `countDistinctChars \"\" = 1` should be `countDistinctChars \"\" = 1` since\
    \ `\"\"` is an empty string. Also `countDistinctChars \"\" = 1` should be `countDistinctChars\
    \ \"\" = 1` since `\"\"` is an empty string. Also `countDistinctChars \"\" = 1`\
    \ should be `countDistinctChars \"\" = 1` since `\"\"` is an empty string. Also\
    \ `countDistinctChars \"\" = 1` should be `countDistinctChars \"\" = 1` since\
    \ `\"\"` is an empty string. Also `countDistinctChars \"\" = 1` should be `countDistinctChars\
    \ \"\" = 1` since `\"\"` is an empty string. Also `countDistinctChars \"\" = 1`\
    \ should be `countDistinctChars \"\" = 1` since `\"\"` is an empty string. Also\
    \ `countDistinctChars \"\" = 1` should be `countDistinctChars \"\" = 1` since\
    \ `\"\"` is an empty string. Also `countDistinctChars \"\" = 1` should be `countDistinctChars\
    \ \"\" = 1` since `\"\"` is an empty string. Also `countDistinctChars \"\" = 1`\
    \ should be ", "    count_distinct_characters = \"\"\n    for character in string\n\
    \        count_distinct_characters = count_distinct_characters + character\n \
    \   end\n    return count_distinct_characters.length\nend\n</cell>\n<code language=julia-1.1>\n\
    count_distinct_characters(\"xyzXYZ\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are not in the alphabet (including spaces). For example, the string \"Jerry\"\
    \ has 4 characters that are not in the alphabet, namely \"J\", \"e\", \"y\", and\
    \ \"r\". Write a function that takes a string and returns the number of characters\
    \ in the string that are not in the alphabet (including spaces). For example,\
    \ the string \"Jerry\" has 4 characters that are not in the alphabet, namely \"\
    J\", \"e\", \"y\", and \"r\". Write a function that takes a string and returns\
    \ the number of characters in the string that are not in the alphabet (including\
    \ spaces). For example, the string \"Jerry\" has 4 characters that are not in\
    \ the alphabet, namely \"J\", \"e\", \"y\", and \"r\". Write a function that takes\
    \ a string and returns the number of characters in the string that are not in\
    \ the alphabet (including spaces). For example, the string \"Jerry\" has 4 characters\
    \ that are not in the alphabet, namely \"J\", \"e\", \"y\", and \"r\". Write a\
    \ function that takes a string and returns the number of characters in the string\
    \ that are not in the alphabet (including spaces). For example, the string \"\
    Jerry\" has 4 characters that are not in the alphabet, namely \"J\", \"e\", \"\
    y\", and \"r\". Write a function that takes a string and returns the number of\
    \ characters in the string that are not in the alphabet (including spaces). For\
    \ example, the string \"Jerry\" has 4 characters that are not in the alphabet,\
    \ namely \"J\", \"e\", \"y\", and \"r\". Write a function that takes a string\
    \ and returns the number of characters in the string that are not in the alphabet\
    \ (including spaces). For example, the string \"Jerry\" has 4 characters that\
    \ are not in the alphabet, namely \"J\", \"e\", \"y\", and \"r\". Write a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are not in the alphabet (including spaces). For example, the string \"Jerry\"\
    \ has 4 characters that are not in the alphabet, namely \"J\", \"e\", \"y\", and\
    \ \"r\". Write a function that takes a string and returns the number of characters\
    \ in the string that are not in the alphabet (including spaces). For example,\
    \ the string \"Jerry\" has 4 characters that are not in the alphabet, namely \"\
    J\", \"e\", \"y\", and \"r\". Write a function that takes a string and returns\
    \ the number of characters in the string that are not in the alphabet (including\
    \ spaces). For example, the ", "    count_distinct_characters = \n        string.map(x\
    \ => x.toLowercase()).map(x => x.toUpperCase()).map(x => x.toUpperCase()).distinct().length\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that counts the number of times\
    \ a character appears in a string. For example, count_characters(\"abracadabra\"\
    ) should return 5 because 'a' appears 5 times, 'b' appears 4 times, and 'r' appears\
    \ 1 time.", "    \n    count_distinct_characters = \n        string.map(x => x.toLowerCase\
    \ |> String.length |> Int64).distinct\n    \nend\n</cell>\n<code language=julia-1.5>\n\
    count_distinct_characters(\"xyzXYZ\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise: Write a function that takes a string and\
    \ returns the number of unique characters in that string. \nHint: Use count_distinct_characters\
    \ to solve this exercise.", "    if string == \"\" then return 0 \n    else if\
    \ string[0] == string[1] then return count_distinct_characters(string[2:]) + 1\
    \ \n    else if string[0] == string[2] then return count_distinct_characters(string[1:])\
    \ + 1 \n    else if string[1] == string[2] then return count_distinct_characters(string[2:])\
    \ + 1 \n    else if string[0] == string[3] then return count_distinct_characters(string[2:])\
    \ + 1 \n    else if string[1] == string[3] then return count_distinct_characters(string[1:])\
    \ + 1 \n    else if string[2] == string[3] then return count_distinct_characters(string[2:])\
    \ + 1 \n    else return count_distinct_characters(string[1:]) + 1 \nend \n</cell>\n\
    <code language=julia-1.0>\ncount_distinct_characters(\"xyzXYZ\")\n</cell>\n<code\
    \ language=julia-1.0>\ncount_distinct_characters(\"Jerry\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns the number\
    \ of distinct characters in that string.", "    \n    count = 0\n    for c in\
    \ string:\n        if c.isUpper():\n            count += 1\n        elif c.isLower():\n\
    \            count += 1\n        elif c.isDigit():\n            count += 1\n \
    \       elif c.isSpace():\n            count += 1\n    return count\n</cell>\n\
    <cell>\ncount_distinct_characters(\"xyzXYZ\")\n</cell>\n<cell>\ncount_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string and\
    \ returns the number of distinct characters in it.", "    count_distinct_characters(string,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\n@code_native count_distinct_characters(\"\
    xyzXYZ\")\n</cell>\n<code language=julia-1.5>\n@code_native count_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise 2\nWrite a function that counts the number\
    \ of distinct characters in a string that start with a given letter.", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    count_distinct_characters(string,\
    \ 0)\nend\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"xyzXYZ\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"Jerry\")\n\
    </cell>\n<text>\nExercise: Write a function that counts how many distinct characters\
    \ (regardless of case) does it consist of\n    >>> count_distinct_characters(\"\
    xyzXYZ\")\n    3\n    >>> count_distinct_characters(\"Jerry\")\n    4\n    \"\"\
    \"", "    count_distinct_characters(string, 0)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters = \"\"\n    for character in string\n\
    \        count_distinct_characters = count_distinct_characters + character\n \
    \   end\n    return count_distinct_characters.length\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    count = 0\n    for c in string:\n        if c.isUpper():\n          \
    \  count += 1\n        elif c.isLower():\n            count += 1\n        elif\
    \ c.isDigit():\n            count += 1\n        elif c.isSpace():\n          \
    \  count += 1\n    return count\n</code>\n<|/ a tags=string,haskell,count,character\
    \ |>\n<| c |>\nThis doesn't work if you have a string like \"aBcD\" where \"B\"\
    \ is a space. You'll get \"2\" instead of \"3\".\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work if you have a string like \"aBcD\" where \"B\" is a space. You'll get \"\
    2\" instead of \"3\".\n<|/ c |>\n<| a dscore=2 |>\nHere's a solution using Data.List.\n\
    <code>\nimport Data.List", "    \n    count = 0\n    for c in string:\n      \
    \  if c.isUpper():\n            count += 1\n        elif c.isLower():\n      \
    \      count += 1\n        elif c.isAlpha():\n            count += 1\n    return\
    \ count\n</cell>\n<cell>\ncount_distinct_characters(\"xyzXYZ\")\n</cell>\n<cell>\n\
    count_distinct_characters(\"Jerry\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are uppercase letters.", "    count_distinct_characters(string, 0)\nend\n</cell>\n\
    <code language=julia-1.5>\n@code_native count_distinct_characters(\"xyzXYZ\")\n\
    </cell>\n<code language=julia-1.5>\n@code_native count_distinct_characters(\"\
    Jerry\")\n</cell>\n<text>\nExercise 2\nWrite a function that counts the number\
    \ of distinct characters in a given string ignoring case.", "    count_distinct_characters\
    \ = count(string.chars())\nend", "    count_distinct_characters(string, 0)\nend\n\
    </cell>\n<code language=julia-1.4>\ncount_distinct_characters(\"xyzXYZ\")\n</cell>\n\
    <code language=julia-1.4>\ncount_distinct_characters(\"Jerry\")\n</cell>\n<text>\n\
    Exercise\nWrite a function that counts the number of distinct characters in a\
    \ string ignoring case.", "    count_distinct_characters(string, 0)\nend", " \
    \   count_distinct_characters_helper(string,0,0)\nend", "    if string == \"\"\
    \n        return 0\n    \n    chars = string.chars()\n    \n    chars = chars.filter(|c|c.isUppercase())\n\
    \    chars = chars.filter(|c|c.isLowercase())\n    chars = chars.filter(|c|c.isDigit())\n\
    \    chars = chars.filter(|c|c.isAlpha())\n    chars = chars.filter(|c|c.isSpace())\n\
    \    chars = chars.filter(|c|c.isPunctuation())\n    chars = chars.filter(|c|c.isSymbol())\n\
    \    chars = chars.filter(|c|c.isControl())\n    \n    chars = chars.map(|c|c.to_lowercase())\n\
    \    chars = chars.map(|c|c.to_uppercase())\n    chars = chars.map(|c|c.to_digit())\n\
    \    chars = chars.map(|c|c.to_alpha())\n    chars = chars.map(|c|c.to_space())\n\
    \    chars = chars.map(|c|c.to_punctuation())\n    chars = chars.map(|c|c.to_symbol())\n\
    \    chars = chars.map(|c|c.to_control())\n    \n    chars = chars.distinct()\n\
    \    \n    return chars.len()\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ count_distinct_characters(\"\", string)\nend", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters(\"\", string)\nend", "    count_distinct_characters_helper(string,0,0)\n\
    end\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"xyzXYZ\"\
    )\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"Jerry\")\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of characters\
    \ in a string that occur more than once.", "    count_distinct_characters(string,\
    \ 0)\nend", "    count_distinct_characters = count(string)\n    return count_distinct_characters\n\
    end count_distinct_characters\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"\
    xyzXYZ\")\n</cell>\n<code language=julia-1.5>\ncount_distinct_characters(\"Jerry\"\
    )\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of times the string \"Jerry\" appears in the string.", "    \n  \
    \  count = 0\n    for c in string:\n        if c.isUpper():\n            count\
    \ += 1\n        elif c.isLower():\n            count += 1\n        elif c.isDigit():\n\
    \            count += 1\n        elif c.isSpace():\n            count += 1\n \
    \   return count\n</code>\n<|/ a tags=string,haskell |>\n<| c |>\nThis doesn't\
    \ work if there are spaces in the string. Try `count_distinct_characters(\"a b\"\
    )`.\n<|/ c |>\n<| c |>\nYes, I see that now. Thanks for pointing that out. I've\
    \ updated my answer to account for spaces.\n<|/ c |>\n<| c |>\nThis doesn't work\
    \ if there are spaces in the string. Try `count_distinct_characters(\"a b\")`.\n\
    <|/ c |>\n<| c |>\nYes, I see that now. Thanks for pointing that out. I've updated\
    \ my answer to account for spaces.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nimport\
    \ Data.List"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
