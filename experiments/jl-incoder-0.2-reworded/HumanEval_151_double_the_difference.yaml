name: HumanEval_151_double_the_difference
language: jl
prompt: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
  \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
  \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
  \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
  \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
  \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
  \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
  \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
  \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
completions: ["    if length(lst) == 0\n        return 0\n    else\n        return\
    \ sum(map(x -> x * x, lst[1 : (end - 1)]))\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the product of the numbers in a given vector.\
    \ Ignore numbers that are negative or not integers.", "    if length(lst) == 0\n\
    \        return 0\n    \n    sum = 0\n    for i in lst\n        if isinteger(i)\n\
    \            sum += i\n        else\n            sum += i*i\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of numbers and returns the product of the numbers in the vector. Ignore numbers\
    \ that are negative or not integers.", "    sum = 0\n    for x in lst\n      \
    \  if x % 2 == 1\n            sum += x\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a vector of numbers,\
    \ return the sum of squares of the numbers\n    in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    else\n        sum = 0\n        for i\
    \ in lst\n            if isinteger(i)\n                sum += i * i\n        \
    \    else\n                sum += i\n        end\n        return sum\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector of numbers,\
    \ return the sum of squares of the numbers\n    in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n  \
    \      if isinteger(i)\n            sum += i\n        else\n            sum +=\
    \ i * i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Given a vector of numbers, return the sum of squares of the numbers\n  \
    \  in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n        for\
    \ i in lst \n            if isinteger(i) \n                sum += i * i \n   \
    \         else \n                sum += i \n        return sum \n    end\nend\n\
    </cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a vector of numbers, return\
    \ the sum of squares of the numbers\n    in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    else\n        sum = 0\n        for i\
    \ in lst\n            if typeof(i) == Int\n                sum += i\n        \
    \    elseif typeof(i) == Float64\n                sum += i * i\n            else\n\
    \                throw(ArgumentError(\"Input vector must be of integer or float\
    \ type\"))\n        end\n        return sum\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes in a vector of numbers and returns the sum of\
    \ the squares of the numbers in the vector that are odd. Ignore numbers that are\
    \ negative or not integers.\nWrite a function that takes in a vector of numbers\
    \ and returns the sum of the squares of the numbers in the vector that are odd.\
    \ Ignore numbers that are negative or not integers.\nWrite a function that takes\
    \ in a vector of numbers and returns the sum of the squares of the numbers in\
    \ the vector that are odd. Ignore numbers that are negative or not integers.\n\
    Write a function that takes in a vector of numbers and returns the sum of the\
    \ squares of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that takes in a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that takes in a vector of numbers and returns the sum of the squares of the\
    \ numbers in the vector that are odd. Ignore numbers that are negative or not\
    \ integers.\nWrite a function that takes in a vector of numbers and returns the\
    \ sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that takes in a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that takes in a vector of numbers and returns the sum of the squares of the\
    \ numbers in the vector that are odd. Ignore numbers that are negative or not\
    \ integers.\nWrite a function that takes in a vector of numbers and returns the\
    \ sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that takes in a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that takes in a vector of numbers and returns the sum of the squares of the\
    \ numbers in the vector that are odd. Ignore numbers that are negative or not\
    \ integers.\nWrite a function that takes in a vector of numbers and returns the\
    \ sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that takes in a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that takes in a vector of numbers and returns the sum of the squares of the\
    \ numbers in the vector that are odd. Ignore numbers that are negative or not\
    \ integers.\nWrite ", "    if length(lst) == 0\n        return 0\n    \n    sum\
    \ = 0\n    for i in lst\n        if i > 0\n            sum += i * i\n        else\n\
    \            sum += i\n    end\n    return sum\nend", "    sum = 0\n    for x\
    \ in lst\n        if x % 2 == 1\n            sum += x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a\
    \ vector of numbers, return the sum of squares of the numbers\n    in the vector\
    \ that are odd. Ignore numbers that are negative or not integers.\n    \n    >>>\
    \ double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n  \
    \      if isinteger(i)\n            sum += i\n        else\n            sum +=\
    \ i*i\n    end\n    return sum\nend", "    if length(lst) == 0\n        return\
    \ 0\n    else\n        sum = 0\n        for i in lst\n            if isodd(i)\n\
    \                sum += i\n            end\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a vector\
    \ of numbers, return the sum of squares of the numbers\n    in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for x in lst\n        if x > 0\n            sum += x * x\n        else\n\
    \            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\n    sum_of_squares(lst)", "    if length(lst) ==\
    \ 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst \n \
    \           if typeof(i) == Int64 \n                sum += i \n            else\
    \ \n                sum += i * i \n        return sum \n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of numbers and returns\
    \ the sum of the squares of the numbers in the list that are odd. Ignore numbers\
    \ that are negative or not integers.", "    if length(lst) == 0\n        return\
    \ 0\n    else\n        sum = 0\n        for i in lst\n            if i > 0\n \
    \               sum += i\n            else\n                sum -= i\n       \
    \ end\n        return sum\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a list of numbers and returns the product of the numbers\
    \ in the list that are odd. Ignore numbers that are negative or not integers.",
  "    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum += x\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the product of the numbers in a vector. Ignore numbers\
    \ that are negative or not integers.", "    if length(lst) == 0 \n        return\
    \ 0 \n    else \n        sum = 0\n        for i in lst\n            if i > 0\n\
    \                sum += i * i\n            else\n                sum += i\n  \
    \      return sum\n    end\nend\n</cell>\n<text>\nExercise: Write a function that\
    \ returns the sum of the squares of the numbers in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.", "    if length(lst) == 0 \n   \
    \     return 0 \n    else \n        sum = 0\n        for i in lst\n          \
    \  if i > 0\n                sum += i * i\n            else\n                sum\
    \ += i\n        return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    \n    sum = 0\n    for x in lst\n  \
    \      if x % 2 == 1\n            sum += x\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 7\nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers in the list that are odd.\
    \ Ignore numbers that are negative or not integers.\nFor example, given [3, -2,\
    \ 7, 4], the function should return 50.", "    if length(lst) == 0\n        return\
    \ 0\n    \n    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\""]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
