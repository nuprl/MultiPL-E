name: HumanEval_151_double_the_difference
language: jl
prompt: "\"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
  \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
  \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
  \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
  \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"\nfunction double_the_difference(lst::Vector{Float64})::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = double_the_difference;\n\t@test(candidate(Vector{Float64}([]))\
  \ == 0)\n\t@test(candidate([5.0, 4.0]) == 25)\n\t@test(candidate([0.1, 0.2, 0.3])\
  \ == 0)\n\t@test(candidate([-10.0, -20.0, -30.0]) == 0)\n\t@test(candidate([-1.0,\
  \ -2.0, 8.0]) == 0)\n\t@test(candidate([0.2, 3.0, 5.0]) == 34)\n\t@test(candidate([-9.0,\
  \ -7.0, -5.0, -3.0, -1.0, 1.0, 3.0, 5.0, 7.0, 9.0]) == 165)\nend\n"
completions: ["    if length(lst) == 0\n        return 0\n    else\n        return\
    \ sum(map(x -> x * x, lst[1 : (end - 1)]))\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the product of the numbers in a given vector.\
    \ Ignore numbers that are negative or not integers.", "    if length(lst) == 0\n\
    \        return 0\n    \n    sum = 0\n    for i in lst\n        if isinteger(i)\n\
    \            sum += i\n        else\n            sum += i*i\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of numbers and returns the product of the numbers in the vector. Ignore numbers\
    \ that are negative or not integers.", "    sum = 0\n    for x in lst\n      \
    \  if x % 2 == 1\n            sum += x\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a vector of numbers,\
    \ return the sum of squares of the numbers\n    in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    else\n        sum = 0\n        for i\
    \ in lst\n            if isinteger(i)\n                sum += i * i\n        \
    \    else\n                sum += i\n        end\n        return sum\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector of numbers,\
    \ return the sum of squares of the numbers\n    in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n  \
    \      if isinteger(i)\n            sum += i\n        else\n            sum +=\
    \ i * i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Given a vector of numbers, return the sum of squares of the numbers\n  \
    \  in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n        for\
    \ i in lst \n            if isinteger(i) \n                sum += i * i \n   \
    \         else \n                sum += i \n        return sum \n    end\nend\n\
    </cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a vector of numbers, return\
    \ the sum of squares of the numbers\n    in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    else\n        sum = 0\n        for i\
    \ in lst\n            if typeof(i) == Int\n                sum += i\n        \
    \    elseif typeof(i) == Float64\n                sum += i * i\n            else\n\
    \                throw(ArgumentError(\"Input vector must be of integer or float\
    \ type\"))\n        end\n        return sum\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes in a vector of numbers and returns the sum of\
    \ the squares of the numbers in the vector that are odd. Ignore numbers that are\
    \ negative or not integers.\nWrite a function that takes in a vector of numbers\
    \ and returns the sum of the squares of the numbers in the vector that are odd.\
    \ Ignore numbers that are negative or not integers.\nWrite a function that takes\
    \ in a vector of numbers and returns the sum of the squares of the numbers in\
    \ the vector that are odd. Ignore numbers that are negative or not integers.\n\
    Write a function that takes in a vector of numbers and returns the sum of the\
    \ squares of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nWrite a function that takes in a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that takes in a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that takes in a vector of numbers and returns the sum of the squares of the\
    \ numbers in the vector that are odd. Ignore numbers that are negative or not\
    \ integers.\nWrite a function that takes in a vector of numbers and returns the\
    \ sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that takes in a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that takes in a vector of numbers and returns the sum of the squares of the\
    \ numbers in the vector that are odd. Ignore numbers that are negative or not\
    \ integers.\nWrite a function that takes in a vector of numbers and returns the\
    \ sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that takes in a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that takes in a vector of numbers and returns the sum of the squares of the\
    \ numbers in the vector that are odd. Ignore numbers that are negative or not\
    \ integers.\nWrite a function that takes in a vector of numbers and returns the\
    \ sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that takes in a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that takes in a vector of numbers and returns the sum of the squares of the\
    \ numbers in the vector that are odd. Ignore numbers that are negative or not\
    \ integers.\nWrite ", "    if length(lst) == 0\n        return 0\n    \n    sum\
    \ = 0\n    for i in lst\n        if i > 0\n            sum += i * i\n        else\n\
    \            sum += i\n    end\n    return sum\nend", "    sum = 0\n    for x\
    \ in lst\n        if x % 2 == 1\n            sum += x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a\
    \ vector of numbers, return the sum of squares of the numbers\n    in the vector\
    \ that are odd. Ignore numbers that are negative or not integers.\n    \n    >>>\
    \ double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n  \
    \      if isinteger(i)\n            sum += i\n        else\n            sum +=\
    \ i*i\n    end\n    return sum\nend", "    if length(lst) == 0\n        return\
    \ 0\n    else\n        sum = 0\n        for i in lst\n            if isodd(i)\n\
    \                sum += i\n            end\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a vector\
    \ of numbers, return the sum of squares of the numbers\n    in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for x in lst\n        if x > 0\n            sum += x * x\n        else\n\
    \            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\n    sum_of_squares(lst)", "    if length(lst) ==\
    \ 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst \n \
    \           if typeof(i) == Int64 \n                sum += i \n            else\
    \ \n                sum += i * i \n        return sum \n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of numbers and returns\
    \ the sum of the squares of the numbers in the list that are odd. Ignore numbers\
    \ that are negative or not integers.", "    if length(lst) == 0\n        return\
    \ 0\n    else\n        sum = 0\n        for i in lst\n            if i > 0\n \
    \               sum += i\n            else\n                sum -= i\n       \
    \ end\n        return sum\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a list of numbers and returns the product of the numbers\
    \ in the list that are odd. Ignore numbers that are negative or not integers.",
  "    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum += x\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the product of the numbers in a vector. Ignore numbers\
    \ that are negative or not integers.", "    if length(lst) == 0 \n        return\
    \ 0 \n    else \n        sum = 0\n        for i in lst\n            if i > 0\n\
    \                sum += i * i\n            else\n                sum += i\n  \
    \      return sum\n    end\nend\n</cell>\n<text>\nExercise: Write a function that\
    \ returns the sum of the squares of the numbers in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.", "    if length(lst) == 0 \n   \
    \     return 0 \n    else \n        sum = 0\n        for i in lst\n          \
    \  if i > 0\n                sum += i * i\n            else\n                sum\
    \ += i\n        return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    \n    sum = 0\n    for x in lst\n  \
    \      if x % 2 == 1\n            sum += x\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 7\nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers in the list that are odd.\
    \ Ignore numbers that are negative or not integers.\nFor example, given [3, -2,\
    \ 7, 4], the function should return 50.", "    if length(lst) == 0\n        return\
    \ 0\n    \n    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum\
    \ += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the squares of the numbers in the input vector that\
    \ are odd.", "    sum = 0\n    for x in lst\n        if x > 0\n            sum\
    \ += x\n        end\n    end\n    return sum * sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for x in lst\n        if x % 2 != 0\n            sum += x\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Given a vector of numbers, return the sum of squares of the numbers\n  \
    \  in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Given a vector of numbers, return the sum of squares of the numbers\n  \
    \  in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n  \
    \      if isinteger(i)\n            sum += i\n        else\n            sum +=\
    \ i*i\n    end\n    return sum\nend\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the sum of the squares of the numbers in the input vector that\
    \ are odd. Ignore numbers that are negative or not integers.", "    if length(lst)\
    \ == 0\n        return 0\n    else\n        sum = 0\n        for i in lst\n  \
    \          if isodd(i)\n                sum += i\n            else\n         \
    \       sum -= i\n        end\n        return sum\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the squares of the numbers\
    \ in the input vector\nthat are divisible by 7. Ignore numbers that are not integers.",
  "    sum = 0\n    for x in lst\n        if x % 2 != 0\n            sum += x\n  \
    \      end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes in a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.", "    if length(lst) == 0 \n        return 0 \n    else \n\
    \        sum = 0\n        for i in lst \n            if i > 0\n              \
    \  sum += i * i \n            else \n                sum += i \n        return\
    \ sum\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in the\
    \ vector that are odd. Ignore numbers that are negative or not integers.", " \
    \   sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n \
    \       end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that returns the sum of the squares of the numbers in the vector\
    \ that are odd. Ignore numbers that are negative or not integers.", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        return sum(map(x -> x*x, lst[1\
    \ : (end-1)]))\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the product of the numbers in a given vector. \nIf the vector is empty,\
    \ return 1.\nIf the vector has one element, return that element.\nIf the vector\
    \ has more than one element, return the product of the elements in the vector.\n\
    Ignore numbers that are negative or not integers.\nFor example, the product of\
    \ the vector [1,2,3] is 6. \nThe product of the vector [-1,2,3] is -1. \nThe product\
    \ of the vector [9,8,7,6,5] is 90. \nThe product of the vector [9,8,7,6,5] is\
    \ 90. \nThe product of the vector [9,8,7,6,5] is 90. \nThe product of the vector\
    \ [9,8,7,6,5] is 90. \nThe product of the vector [9,8,7,6,5] is 90. \nThe product\
    \ of the vector [9,8,7,6,5] is 90. \nThe product of the vector [9,8,7,6,5] is\
    \ 90. \nThe product of the vector [9,8,7,6,5] is 90. \nThe product of the vector\
    \ [9,8,7,6,5] is 90. \nThe product of the vector [9,8,7,6,5] is 90. \nThe product\
    \ of the vector [9,8,7,6,5] is 90. \nThe product of the vector [9,8,7,6,5] is\
    \ 90. \nThe product of the vector [9,8,7,6,5] is 90. \nThe product of the vector\
    \ [9,8,7,6,5] is 90. \nThe product of the vector [9,8,7,6,5] is 90. \nThe product\
    \ of the vector [9,8,7,6,5] is 90. \nThe product of the vector [9,8,7,6,5] is\
    \ 90. \nThe product of the vector [9,8,7,6,5] is 90. \nThe product of the vector\
    \ [9,8,7,6,5] is 90. \nThe product of the vector [9,8,7,6,5] is 90. \nThe product\
    \ of the vector [9,8,7,6,5] is 90. \nThe product of the vector [9,8,7,6,5] is\
    \ 90. \nThe product of the vector [9,8,7,6,5] is 90. \nThe product of the vector\
    \ [9,8,7,6,5] is 90. \nThe product of the vector [9,8,7,6,5] is 90. \nThe product\
    \ of the vector [9,8,7,6,5] is 90. \nThe product of the vector [9,8,7,6,5] is\
    \ 90. \nThe product of the vector [9,8,7,6,5] is 90. \nThe product of the vector\
    \ [9,8,7,", "    if length(lst) == 0 \n        return 0 \n    else \n        sum\
    \ = 0\n        for i in lst \n            if isinteger(i) \n                sum\
    \ += i*i \n            else \n                sum += i \n        return sum \n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes in a vector of numbers\
    \ and returns the sum of the squares of the numbers in the vector that are odd.\
    \ Ignore numbers that are negative or not integers.", "    sum = 0\n    for i\
    \ in lst\n        if isa(i, Int64)\n            sum += i\n        else\n     \
    \       sum += i * i\n    end\n    return sum\nend\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the sum of the squares of the numbers in a vector.\n\
    The input vector is assumed to be non-empty.", "    sum = 0\n    for i in lst\n\
    \        if isinteger(i)\n            sum += i\n        else\n            sum\
    \ += i*i\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a vector of numbers and returns the product of the numbers in the\
    \ vector that are odd. Ignore numbers that are negative or not integers.\n   \
    \ \n    >>> double_the_difference([1, 3, 2, 0])\n    6\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    27\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    else\n        sum = 0\n        for i\
    \ in lst\n            if i > 0\n                sum += i * i\n            else\n\
    \                sum += i\n        end\n        return sum\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a vector of numbers, return the sum\
    \ of squares of the numbers\n    in the vector that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2,\
    \ 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"", "    sum = 0\n    for x in lst\n  \
    \      if x > 0\n            sum += x * x\n        else\n            sum += x\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3: Write\
    \ a function that returns the sum of the squares of the numbers in the vector\
    \ that are odd. Ignore numbers that are negative or not integers.", "    if length(lst)\
    \ == 0\n        return 0\n    \n    sum = 0\n    for x in lst\n        if x %\
    \ 2 == 1\n            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that returns the sum of the squares of the\
    \ numbers in the input vector that are even.", "    sum = 0\n    for x in lst\n\
    \        if x % 2 == 1\n            sum += x\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum\
    \ of the squares of the numbers in the vector that are odd. Ignore numbers that\
    \ are negative or not integers.", "    sum = 0\n    for i in lst\n        if isa(i,\
    \ Int)\n            sum += i\n        else\n            sum += i * i\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a\
    \ vector of numbers, return the sum of squares of the numbers\n    in the vector\
    \ that are odd. Ignore numbers that are negative or not integers.\n    \n    >>>\
    \ double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n        for\
    \ i in lst\n            if typeof(i) == Int\n                sum += i\n      \
    \      else\n                sum += i * i\n        return sum\n    end\nend\n\
    </cell>\n<text>\nExercise 2: Write a function that returns the sum of the squares\
    \ of the numbers in the vector that are odd.", "    sum = 0\n    for i in lst\n\
    \        if isinteger(i)\n            sum += i\n        else\n            sum\
    \ += i * i\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that returns the sum of the squares of the numbers in the vector that are odd.\
    \ Ignore numbers that are negative or not integers.\nWrite a function that returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that returns the sum of\
    \ the squares of the numbers in the vector that are odd. Ignore numbers that are\
    \ negative or not integers.\nWrite a function that returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nWrite a function that returns the sum of the squares of the\
    \ numbers in the vector that are odd. Ignore numbers that are negative or not\
    \ integers.\nWrite a function that returns the sum of the squares of the numbers\
    \ in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    Write a function that returns the sum of the squares of the numbers in the vector\
    \ that are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that returns the sum of the squares of the numbers in the vector that are odd.\
    \ Ignore numbers that are negative or not integers.\nWrite a function that returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that returns the sum of\
    \ the squares of the numbers in the vector that are odd. Ignore numbers that are\
    \ negative or not integers.\nWrite a function that returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nWrite a function that returns the sum of the squares of the\
    \ numbers in the vector that are odd. Ignore numbers that are negative or not\
    \ integers.\nWrite a function that returns the sum of the squares of the numbers\
    \ in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    Write a function that returns the sum of the squares of the numbers in the vector\
    \ that are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that returns the sum of the squares of the numbers in the vector that are odd.\
    \ Ignore numbers that are negative or not integers.\nWrite a function that returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that returns the sum of\
    \ the squares of the numbers in the vector that are odd. Ignore numbers that are\
    \ negative or not integers.\nWrite a function that returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nWrite a function that returns the sum of the squares of the\
    \ numbers in the vector that are odd. Ignore numbers that are negative or not\
    \ integers.\nWrite a function that returns the sum of the squares of the numbers\
    \ in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    Write a function that returns the sum of the squares of the number", "    sum\
    \ = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Given a vector of numbers, return the sum of squares of the numbers\n    in\
    \ the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\
    \n    Given a vector of numbers, return the sum of squares of the numbers\n  \
    \  in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n  \
    \      if isodd(i)\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector of numbers,\
    \ return the sum of squares of the numbers\n    in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n  \
    \      if isinteger(i)\n            sum += i\n        else\n            sum +=\
    \ i*i\n    end\n    return sum\nend", "    if length(lst) == 0\n        return\
    \ 0\n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum\
    \ += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that returns the sum of the squares of the numbers in the vector\
    \ that are odd.", "    if length(lst) == 0\n        return 0\n    \n    sum =\
    \ 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Given a vector of numbers, return the sum of squares of the numbers\n    in\
    \ the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n        for\
    \ i in lst \n            if i > 0\n                sum += i * i \n           \
    \ else \n                sum += i \n        return sum\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a vector of numbers, return the sum\
    \ of squares of the numbers\n    in the vector that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2,\
    \ 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"", "    if length(lst) == 0\n        return\
    \ 0\n    else\n        sum = 0\n        for i in lst\n            if isodd(i)\n\
    \                sum += i\n            end\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd.", "    if length(lst) == 0 \n        return 0 \n    else \n       \
    \ return sum(lst[i : i + 2]) \nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the sum of the squares of the numbers in the vector that are odd.\
    \ Ignore numbers that are negative or not integers.\nWrite a function that returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that returns the sum of\
    \ the squares of the numbers in the vector that are odd. Ignore numbers that are\
    \ negative or not integers.\nWrite a function that returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nWrite a function that returns the sum of the squares of the\
    \ numbers in the vector that are odd. Ignore numbers that are negative or not\
    \ integers.\nWrite a function that returns the sum of the squares of the numbers\
    \ in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    Write a function that returns the sum of the squares of the numbers in the vector\
    \ that are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that returns the sum of the squares of the numbers in the vector that are odd.\
    \ Ignore numbers that are negative or not integers.\nWrite a function that returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that returns the sum of\
    \ the squares of the numbers in the vector that are odd. Ignore numbers that are\
    \ negative or not integers.\nWrite a function that returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nWrite a function that returns the sum of the squares of the\
    \ numbers in the vector that are odd. Ignore numbers that are negative or not\
    \ integers.\nWrite a function that returns the sum of the squares of the numbers\
    \ in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    Write a function that returns the sum of the squares of the numbers in the vector\
    \ that are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that returns the sum of the squares of the numbers in the vector that are odd.\
    \ Ignore numbers that are negative or not integers.\nWrite a function that returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that returns the sum of\
    \ the squares of the numbers in the vector that are odd. Ignore numbers that are\
    \ negative or not integers.\nWrite a function that returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nWrite a function that returns the sum of the squares of the\
    \ numbers in the vector that are odd. Ignore numbers that are negative or not\
    \ integers.\nWrite a function that returns the sum of the squares of the numbers\
    \ in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    Write a function that returns the sum of the squares of the numbers in the vector\
    \ that are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that returns the sum of the squares of the numbers in the vector that are odd.\
    \ Ignore number", "    if length(lst) == 0 \n        return 0 \n    else \n  \
    \      sum = 0\n        for i in lst\n            if i > 0\n                sum\
    \ += i * i\n            else\n                sum += i\n        return sum\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector of\
    \ numbers, return the sum of squares of the numbers\n    in the vector that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for x in lst\n        if x % 2 != 0\n            sum += x\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Given a vector of numbers, return the sum of squares of the numbers\n  \
    \  in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for i in lst\n        if i > 0\n            sum += i\n        else\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Given a vector of numbers, return the sum of\
    \ squares of the numbers\n    in the vector that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2,\
    \ 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"", "    if length(lst) == 0\n        return\
    \ 0\n    \n    sum = 0\n    for i in lst\n        if i > 0\n            sum +=\
    \ i * i\n        else\n            sum += i\n    end\n    return sum\nend", " \
    \   sum = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n \
    \       end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for i in lst\n        if i > 0\n            sum += i * i\n        else\n\
    \            sum += i\n    end\n    return sum\nend", "    sum = 0\n    for x\
    \ in lst\n        if x > 0\n            sum += x\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list of\
    \ numbers and returns the product of all the numbers in the list. \nIf any of\
    \ the numbers in the list is negative, return 0.\nIf all the numbers in the list\
    \ are 0, return 1.\nIf the list has only one number, return that number.\nIf the\
    \ list has more than one number, raise a TypeError exception.", "    \n    if\
    \ length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n  \
    \      if isodd(i)\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector of numbers,\
    \ return the sum of squares of the numbers\n    in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n  \
    \      if isinteger(i)\n            sum += i\n        else\n            sum +=\
    \ i * i\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the product of all the numbers in a given vector.\nIf the vector\
    \ is empty, return 1.\nIf the vector has one element, return that element.\nIf\
    \ the vector has more than one element, return the product of the elements in\
    \ the vector.\nIf the vector has more than two elements, raise an error.", " \
    \   if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n\
    \        if isodd(i)\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a vector of numbers,\
    \ return the sum of squares of the numbers\n    in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Given a vector of numbers, return the sum of squares of the numbers\n    in\
    \ the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n        for\
    \ i in lst \n            if isinteger(i) \n                sum += i * i \n   \
    \         else \n                sum += i \n        return sum\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector of numbers, return\
    \ the sum of squares of the numbers\n    in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n        for\
    \ i in lst \n            if isinteger(i) \n                sum += i * i \n   \
    \         else \n                sum += i \n        return sum \n    end\nend\n\
    </cell>\n<text>\nExercise: Write a function that returns the product of the numbers\
    \ in a vector. Ignore numbers that are negative or not integers.", "    sum =\
    \ 0\n    for i in lst\n        if isodd(i)\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 2: Write a function that\
    \ returns the sum of the squares of the numbers in the vector that are odd.",
  "    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n     \
    \   for i in lst \n            if isodd(i) \n                sum += i \n     \
    \       else \n                continue \n        end \n        return sum \n\
    \    end \nend \n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a vector\
    \ of numbers, return the sum of squares of the numbers\n    in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n        for\
    \ i in lst \n            if typeof(i) == Int64 \n                sum += i \n \
    \           else \n                sum += i * i \n        return sum \n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector of numbers,\
    \ return the sum of squares of the numbers\n    in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for i in lst\n        if isa(i, Int)\n            sum += i\n      \
    \  else\n            sum += i * i\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the squares of the numbers\
    \ in the vector that are odd.", "    sum = 0\n    for x in lst\n        if x >\
    \ 0\n            sum += x * x\n        else\n            sum += x\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes in a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    For example, given [4, 3, -2, 1], return 25.", "    sum = 0\n    for i in lst\n\
    \        if isa(i, Int)\n            sum += i\n        else\n            sum +=\
    \ i * i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n  \
    \      if isodd(i)\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector of numbers,\
    \ return the sum of squares of the numbers\n    in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for x in lst\n        if x % 2 != 0\n            sum += x\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\
    \n    Given a vector of numbers, return the sum of squares of the numbers\n  \
    \  in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for i in lst\n        if isinteger(i)\n            sum += i\n     \
    \   else\n            sum += i*i\n        end\n    end\n    return sum\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the product of the\
    \ numbers in a given vector. \nIgnore numbers that are negative or not integers.\n\
    If the input vector is empty, return 1.\nIf the input vector is empty, return\
    \ 0.", "    sum = 0\n    for i in lst\n        if isodd(i)\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend", "    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ squares of the numbers in the vector that are odd.", "    sum = 0\n    for i\
    \ in lst\n        if isinteger(i)\n            sum += i\n        else\n      \
    \      sum += i*i\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the sum of the squares of the numbers in the input\
    \ vector\nthat are less than or equal to 100. Ignore numbers that are negative\
    \ or not integers.", "    if length(lst) == 0\n        return 0\n    \n    sum\
    \ = 0\n    for i in lst\n        if isinteger(i)\n            sum += i\n     \
    \   else\n            sum += i * i\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in the vector that are odd. Ignore numbers that\
    \ are negative or not integers.\nWrite a function that takes a vector of numbers\
    \ and returns the sum of the squares of the numbers in the vector that are odd.\
    \ Ignore numbers that are negative or not integers.\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in the\
    \ vector that are odd. Ignore numbers that are negative or not integers.\nWrite\
    \ a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that takes a vector of\
    \ numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that takes a vector of\
    \ numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that takes a vector of\
    \ numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that takes a vector of\
    \ numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore number", "    sum = 0\n    for i in lst\n        if isodd(i)\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in the vector that are odd. Ignore numbers that\
    \ are negative or not integers.", "    sum = 0\n    for i in lst\n        if i\
    \ > 0\n            sum += i*i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the squares of the\
    \ numbers in the input vector\nthat are odd. Ignore numbers that are negative\
    \ or not integers.\n    \n    >>> sum_squares_odd([1, 3, 2, 0])\n    10\n    >>>\
    \ sum_squares_odd([-1, -2, 0])\n    0\n    >>> sum_squares_odd([9, -2])\n    81\n\
    \    >>> sum_squares_odd([0])\n    0\n   \n    If the input vector is empty, return\
    \ 0.\n    \"\"\"", "    sum = 0\n    for x in lst\n        if x % 2 == 1\n   \
    \         sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the product of the numbers in the vector\
    \ that are odd. Ignore numbers that are negative or not integers.", "    if length(lst)\
    \ == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n        if isinteger(i)\n\
    \            sum += i\n        else\n            sum += i * i\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a vector\
    \ of numbers and returns the product of the numbers in the vector that are odd.\
    \ Ignore numbers that are negative or not integers.\nFor example, given [4, 6,\
    \ -2, 3], return 24.\nAssume that the input vector is non-empty and contains only\
    \ numbers.", "    sum = 0\n    for x in lst\n        if x % 2 == 1\n         \
    \   sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the squares of the numbers in the\
    \ vector that are odd. Ignore numbers that are negative or not integers.", " \
    \   sum = 0\n    for i in lst\n        if isa(i, Int)\n            sum += i\n\
    \        else\n            sum += i * i\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a vector of numbers, return the sum\
    \ of squares of the numbers\n    in the vector that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2,\
    \ 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"", "    if length(lst) == 0\n        return\
    \ 0\n    else\n        sum = 0\n        for i in lst\n            if isinteger(i)\n\
    \                sum += i\n            else\n                sum += i * i\n  \
    \      end\n        return sum\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers in the list that are odd. Ignore numbers that are negative or\
    \ not integers.\nFor example, given [4, 6, -2, 3], your function should return\
    \ 50.", "    sum = 0\n    for i in lst\n        if isinteger(i)\n            sum\
    \ += i\n        else\n            sum += i*i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a vector of\
    \ numbers, return the sum of squares of the numbers\n    in the vector that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n  \
    \      if isodd(i)\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 2: Write a function that returns the product of\
    \ all the numbers in a vector.", "    sum = 0\n    for x in lst\n        if x\
    \ % 2 != 0\n            sum += x\n        end\n    end\n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector of numbers, return\
    \ the sum of squares of the numbers\n    in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    \n\
    \    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n\
    \        if isodd(i)\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a vector of numbers,\
    \ return the sum of squares of the numbers\n    in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\
    \n    Given a vector of numbers, return the sum of squares of the numbers\n  \
    \  in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for x in lst\n        if x > 0\n            sum += x * x\n        else\n\
    \            sum += x\n        end\n    end\n    return sum\nend", "    sum =\
    \ 0\n    for i in lst\n        if isinteger(i)\n            sum += i\n       \
    \ else\n            sum += i*i\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in the vector that are odd. Ignore numbers that\
    \ are negative or not integers.", "    sum = 0\n    for i in lst\n        if isodd(i)\n\
    \            sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Given a vector of numbers, return the sum of\
    \ squares of the numbers\n    in the vector that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2,\
    \ 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"", "    sum = 0\n    for x in lst\n  \
    \      if x % 2 == 1\n            sum += x\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product of\
    \ a list of numbers. If the list is empty, return 1.", "    if length(lst) ==\
    \ 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst\n  \
    \          if isodd(i) \n                sum += i\n            else \n       \
    \         sum -= i\n        return sum\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the product of the numbers in a given vector.\
    \ \nIf the vector is empty, return 1.\nIf the vector has only one element, return\
    \ that element.\nIf the vector has two or more elements, return the product of\
    \ the two first elements. \nIf the vector has more than two elements, raise a\
    \ TypeError exception.", "    if length(lst) == 0 \n        return 0 \n    else\
    \ \n        sum = 0\n        for i in lst\n            if isodd(i) \n        \
    \        sum += i\n            else \n                sum += 0\n        return\
    \ sum\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in the\
    \ vector that are odd. Ignore numbers that are negative or not integers.", " \
    \   if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n\
    \        if i%2 == 1\n            sum += i\n        end\n    end\n    return sum\n\
    end", "    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for x\
    \ in lst\n        if x % 2 == 1\n            sum += x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a\
    \ vector of numbers, return the sum of squares of the numbers\n    in the vector\
    \ that are odd. Ignore numbers that are negative or not integers.\n    \n    >>>\
    \ double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    \n    sum = 0\n    for x in lst\n  \
    \      if x % 2 == 1\n            sum += x\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of numbers\
    \ and returns the sum of the squares of the numbers in the vector that are odd.\
    \ Ignore numbers that are negative or not integers.", "    sum = 0\n    for i\
    \ in lst\n        if isa(i, Int)\n            sum += i\n        elseif isa(i,\
    \ Float64)\n            sum += i * i\n        else\n            throw(ArgumentError(\"\
    Input must be a list of integers or floats\"))\n    end\n    return sum\nend",
  "    sum = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n    \
    \    end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the sum of the squares of the numbers in the input vector\nthat\
    \ are even.", "    if length(lst) == 0\n        return 0\n    else\n        sum\
    \ = 0\n        for i in lst\n            if typeof(i) == Int\n               \
    \ sum += i\n            elseif typeof(i) == Float64\n                sum += i\
    \ * i\n            else\n                throw(ArgumentError(\"Input vector must\
    \ be a list of integers or floats.\"))\n        end\n        return sum\n    end\n\
    end\n</cell>\n<text>\nExercise 9\nWrite a function that returns the product of\
    \ a list of numbers. If the list is empty, return 1.\nIf the list has one element,\
    \ return that element.\nIf the list has two elements, return the first element\
    \ multiplied by the second element.\nIf the list has three or more elements, return\
    \ the first two elements multiplied by the third\nelement, and so on.\nWrite a\
    \ function that returns the product of a list of numbers. If the list is empty,\
    \ return 1.\nIf the list has one element, return that element.\nIf the list has\
    \ two elements, return the first element multiplied by the second element.\nIf\
    \ the list has three or more elements, return the first two elements multiplied\
    \ by the third\nelement, and so on.\nWrite a function that returns the product\
    \ of a list of numbers. If the list is empty, return 1.\nIf the list has one element,\
    \ return that element.\nIf the list has two elements, return the first element\
    \ multiplied by the second element.\nIf the list has three or more elements, return\
    \ the first two elements multiplied by the third\nelement, and so on.\nWrite a\
    \ function that returns the product of a list of numbers. If the list is empty,\
    \ return 1.\nIf the list has one element, return that element.\nIf the list has\
    \ two elements, return the first element multiplied by the second element.\nIf\
    \ the list has three or more elements, return the first two elements multiplied\
    \ by the third\nelement, and so on.\nWrite a function that returns the product\
    \ of a list of numbers. If the list is empty, return 1.\nIf the list has one element,\
    \ return that element.\nIf the list has two elements, return the first element\
    \ multiplied by the second element.\nIf the list has three or more elements, return\
    \ the first two elements multiplied by the third\nelement, and so on.\nWrite a\
    \ function that returns the product of a list of numbers. If the list is empty,\
    \ return 1.\nIf the list has one element, return that element.\nIf the list has\
    \ two elements, return the first element multiplied by the second element.\nIf\
    \ the list has three or more elements, return the first two elements multiplied\
    \ by the third\nelement, and so on.\nWrite a function that returns the product\
    \ of a list of numbers. If the list is empty, return 1.\nIf the list has one element,\
    \ return that element.\nIf the list has two elements, return the first element\
    \ multiplied by the second element.\nIf the list has three or more elements, return\
    \ the first two elements multiplied by the third\nelement, and so on.\nWrite a\
    \ function that returns the product of a list of numbers. If the list is empty,\
    \ return 1.\nIf the list has one element, ", "    if length(lst) == 0 \n     \
    \   return 0 \n    else \n        sum = 0\n        for i in lst\n            if\
    \ isodd(i) \n                sum += i\n            end\n        end\n        return\
    \ sum\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in the\
    \ vector that are odd. Ignore numbers that are negative or not integers.", " \
    \   if length(lst) == 0\n        return 0\n    else\n        sum = 0\n       \
    \ for i in lst\n            if isinteger(i)\n                sum += i\n      \
    \      else\n                sum += i * i\n        end\n        return sum\n \
    \   end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product\
    \ of the numbers in a vector. Ignore numbers that are negative or not integers.",
  "    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n        for\
    \ i in lst\n            if isodd(i)\n                sum += i\n            else\n\
    \                continue\n        end\n        return sum\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    Given a vector of numbers, return the sum\
    \ of squares of the numbers\n    in the vector that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2,\
    \ 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"", "    if length(lst) == 0 \n       \
    \ return 0 \n    else \n        sum = 0\n        for i in lst\n            if\
    \ type(i) == Int\n                sum += i\n            elseif type(i) == Float64\n\
    \                sum += i * i\n            else\n                throw(ArgumentError(\"\
    Input must be a list of integers or floats\"))\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a vector\
    \ of numbers, return the sum of squares of the numbers\n    in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n  \
    \      if isodd(i)\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product of\
    \ a given vector of numbers. \nThe function should ignore numbers that are negative\
    \ or not integers.\nThe function should return 0 if the input vector is empty.",
  "    sum = 0\n    for x in lst\n        if x > 0\n            sum += x\n       \
    \ else\n            sum += 0\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Given a vector of numbers, return the sum of squares of the numbers\n    in\
    \ the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n        for\
    \ i in lst\n            if isinteger(i) \n                sum += i \n        \
    \    else \n                sum += i * i \n        return sum\n    end\nend\n\
    </cell>\n<text>\nExercise 9\nWrite a function that returns the sum of the squares\
    \ of the numbers in the input vector\nthat are divisible by 3. The input vector\
    \ can be empty.", "    if length(lst) == 0 \n        return 0 \n    else \n  \
    \      sum = 0\n        for i in lst\n            if isinteger(i)\n          \
    \      sum += i * i\n            else \n                sum += i\n        return\
    \ sum\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of numbers and returns the sum of the squares of the numbers in the\
    \ vector that are odd. Ignore numbers that are negative or not integers.\nFor\
    \ example, given [4, 9, 2, -7, 3], your function should return 50.", "    sum\
    \ = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Given a vector of numbers, return the sum of squares of the numbers\n  \
    \  in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for i in lst\n        if isa(i, Int)\n            sum += i\n      \
    \  else\n            sum += i * i\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes in a list of numbers and returns the product\
    \ of the numbers in the list.", "    sum = 0\n    for x in lst\n        if x >\
    \ 0\n            sum += x * x\n        else\n            sum += x\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise: Write a function that\
    \ returns the sum of the squares of the numbers in the vector that are odd.",
  "    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n\
    \        if isodd(i)\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector of numbers,\
    \ return the sum of squares of the numbers\n    in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    \n\
    \    if length(lst) == 0\n        return 0\n    end\n    \n    sum = 0\n    for\
    \ x in lst\n        if x % 2 != 0\n            sum += x\n        end\n    end\n\
    \    \n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector that are odd. Ignore numbers that are negative or not integers.",
  "    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n\
    \        if isodd(i)\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product of\
    \ the numbers in a vector. Ignore numbers that are negative or not integers.",
  "    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n     \
    \   for i in lst \n            if isinteger(i) \n                sum += i * i\
    \ \n            else \n                sum += i \n        return sum\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of numbers\
    \ and returns the sum of the squares of the numbers in the vector that are odd.\
    \ Ignore numbers that are negative or not integers.", "    if length(lst) == 0\n\
    \        return 0\n    \n    sum = 0\n    for i in lst\n        if isinteger(i)\n\
    \            sum += i\n        else\n            sum += i*i\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.", "    sum = 0\n    for i in lst\n        if isa(i, Int)\n\
    \            sum += i\n        else\n            sum += i * i\n    end\n    return\
    \ sum\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a vector of\
    \ numbers, return the sum of squares of the numbers\n    in the vector that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n        for\
    \ i in lst\n            if typeof(i) == Int\n                sum += i\n      \
    \      else\n                sum += i*i\n        end\n        return sum\n   \
    \ end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a vector of\
    \ numbers, return the sum of squares of the numbers\n    in the vector that are\
    \ odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    else\n        sum = 0\n        for i\
    \ in lst\n            if isinteger(i)\n                sum += i * i\n        \
    \    else\n                sum += i\n        end\n        return sum\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ squares of the numbers in the input vector\nthat are divisible by 7. Ignore\
    \ numbers that are negative or not integers.\nFor example, sum([1, 2, 4, 7, 8,\
    \ 9]) should return 52.\nWrite a function that returns the sum of the squares\
    \ of the numbers in the input vector\nthat are divisible by 7 and are greater\
    \ than 10. Ignore numbers that are negative or\nnot integers.\nFor example, sum([1,\
    \ 2, 4, 7, 8, 9]) should return 104.\nWrite a function that returns the sum of\
    \ the squares of the numbers in the input vector\nthat are divisible by 7 and\
    \ are greater than 10. Ignore numbers that are negative or\nnot integers. If the\
    \ input vector is empty, return 0.\nFor example, sum([1, 2, 4, 7, 8, 9]) should\
    \ return 104.", "    sum = 0\n    for x in lst\n        if x % 2 == 1\n      \
    \      sum += x\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    else\n        sum = 0\n        for i\
    \ in lst\n            if i > 0\n                sum += i * i\n            else\n\
    \                sum += i\n        end\n        return sum\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\n\"\"\"\n    Given a vector of numbers, return the sum\
    \ of squares of the numbers\n    in the vector that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2,\
    \ 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"", "    sum = 0\n    for i in lst\n  \
    \      if isodd(i)\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise: Write a function that returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.", "    sum = 0\n    for i in lst\n        if isodd(i)\n   \
    \         sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the squares of the numbers\
    \ in the vector that are odd. Ignore numbers that are negative or not integers.",
  "    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n     \
    \   for i in lst \n            if i .% 2 == 1 \n                sum += i \n  \
    \          else \n                continue \n        end \n        return sum\
    \ \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.", "    sum = 0\n\
    \    for i in lst\n        if isodd(i)\n            sum += i\n        end\n  \
    \  end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the squares of the numbers in the vector that are odd.",
  "    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n        for\
    \ i in lst\n            if isinteger(i)\n                sum += i * i\n      \
    \      else\n                sum += i\n        end\n        return sum\n    end\n\
    end\n</cell>\n<code language=julia-0.6>\n\"\"\"\n    Given a vector of numbers,\
    \ return the sum of squares of the numbers\n    in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n        for\
    \ i in lst\n            if i > 0\n                sum += i * i\n            else\n\
    \                sum += i\n        return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n        for\
    \ i in lst\n            if typeof(i) == Int64 \n                sum += i \n  \
    \          else \n                sum += i * i \n        return sum\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ squares of the numbers in the input vector that are odd. Ignore numbers that\
    \ are negative or not integers.", "    if length(lst) == 0\n        return 0\n\
    \    else\n        sum = 0\n        for n in lst\n            if n > 0\n     \
    \           sum += n * n\n            else\n                sum += n\n       \
    \ end\n        return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n        for\
    \ i in lst\n            if isodd(i) \n                sum += i * i \n        \
    \    else \n                sum += i \n        return sum \nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in the vector that are odd. Ignore numbers that\
    \ are negative or not integers.", "    if length(lst) == 0 \n        return 0\
    \ \n    else \n        sum = 0\n        for i in lst\n            if isodd(i)\
    \ \n                sum += i\n            end\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes in a vector\
    \ of numbers and returns the product of all the numbers in the vector. Ignore\
    \ numbers that are negative or not integers.", "    if length(lst) == 0 \n   \
    \     return 0 \n    else \n        sum = 0\n        for i in lst\n          \
    \  if isinteger(i) \n                sum += i * i \n            else \n      \
    \          sum += i \n        return sum\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of numbers and returns the sum of the numbers\
    \ in the vector that are odd. Ignore numbers that are negative or not integers.",
  "    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n     \
    \   for i in lst\n            if isodd(i) \n                sum += i * i \n  \
    \          end\n        end\n        return sum\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Given a vector of numbers, return the sum of\
    \ squares of the numbers\n    in the vector that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2,\
    \ 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"", "    sum = 0\n    for i in lst\n  \
    \      if isa(i, Int)\n            sum += i\n        elseif isa(i, Float64)\n\
    \            sum += i * i\n        else\n            throw(ArgumentError(\"Input\
    \ must be a list of integers or floats\"))\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.4>\n\"\"\"\n    Given a vector of numbers, return the sum\
    \ of squares of the numbers\n    in the vector that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2,\
    \ 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"", "    if length(lst) == 0\n        return\
    \ 0\n    else\n        sum = 0\n        for i in lst\n            if i > 0\n \
    \               sum += i * i\n            else\n                sum += i\n   \
    \     end\n        return sum\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the squares of the numbers in the input vector\
    \ that are odd. Ignore numbers that are negative or not integers.", "    sum =\
    \ 0\n    for x in lst\n        if x > 0\n            sum += x*x\n        else\n\
    \            sum += x\n    end\n    return sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of numbers and returns the sum of the\
    \ squares of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that takes a vector of\
    \ numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that takes a vector of\
    \ numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that takes a vector of\
    \ numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that takes a vector of\
    \ numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nWrite a function that takes a ", "    \n\
    \    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for x in lst\n\
    \        if x % 2 == 1\n            sum += x\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst \n\
    \            if typeof(i) == Int64 \n                sum += i \n            else\
    \ \n                sum += i * i \n        return sum \nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the squares of the numbers\
    \ in the vector that are odd. Ignore numbers that are negative or not integers.",
  "    sum = 0\n    for x in lst\n        if x > 0\n            sum += x\n       \
    \ end\n    end\n    return sum * sum\nend\n</cell>\n<text>\nExercise 2: Write\
    \ a function that returns the sum of the squares of the numbers in the vector\
    \ that are odd. Ignore numbers that are negative or not integers.", "    sum =\
    \ 0\n    for i in lst\n        if isinteger(i)\n            sum += i\n       \
    \ else\n            sum += i*i\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the product of the numbers in\
    \ the input vector that are odd. Ignore numbers that are negative or not integers.",
  "    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n        for\
    \ i in lst\n            if isodd(i)\n                sum += i\n            else\n\
    \                sum -= i\n        end\n        return sum\n    end\nend\n</cell>\n\
    <text>\nExercise: Write a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.", "    if length(lst) == 0 \n        return\
    \ 0 \n    else \n        sum = 0\n        for i in lst \n            if isodd(i)\
    \ \n                sum += i * i \n        return sum\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    Given a vector of numbers, return the sum\
    \ of squares of the numbers\n    in the vector that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2,\
    \ 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"", "    sum = 0\n    for i in lst\n  \
    \      if isinteger(i)\n            sum += i\n        else\n            sum +=\
    \ i*i\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the squares of the numbers in the vector that are odd.\
    \ Ignore numbers that are negative or not integers.", "    sum = 0\n    for x\
    \ in lst\n        if x % 2 == 1\n            sum += x\n        end\n    end\n\
    \    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.", "    if length(lst) == 0 \n        return\
    \ 0 \n    else \n        sum = 0\n        for i in lst \n            if isodd(i)\
    \ \n                sum += i*i \n            else \n                sum += i \n\
    \        return sum\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector that are odd. Ignore numbers that are negative or not integers.",
  "    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n\
    \        if isodd(i)\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a vector of numbers,\
    \ return the sum of squares of the numbers\n    in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n        for\
    \ i in lst\n            if isinteger(i) \n                sum += i * i \n    \
    \        else \n                sum += i \n        return sum \n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of numbers and\
    \ returns the product of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.", "    if length(lst) == 0\n        return\
    \ 0\n    else\n        sum = 0\n        for i in lst\n            if isinteger(i)\n\
    \                sum += i\n            else\n                sum += i * i\n  \
    \      end\n        return sum\n    end\nend\n</cell>\n<text>\nExercise 3: Write\
    \ a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector that are odd.", "    sum = 0\n    for x in lst\n\
    \        if x > 0\n            sum += x\n        else\n            sum -= x\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Given a vector of numbers, return the sum of squares of the numbers\n    in\
    \ the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n        for\
    \ i in lst\n            if i > 0\n                sum += i * i\n            else\n\
    \                sum += i\n        end\n        return sum\n    end\nend", " \
    \   if length(lst) == 0\n        return 0\n    else\n        sum = 0\n       \
    \ for i in lst\n            if typeof(i) == Int\n                sum += i\n  \
    \          else\n                sum += i * i\n        end\n        return sum\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a vector\
    \ of numbers and returns the product of all the numbers in the vector. Ignore\
    \ numbers that are negative or not integers.", "    if length(lst) == 0\n    \
    \    return 0\n    else\n        sum = 0\n        for i in lst\n            if\
    \ isodd(i)\n                sum += i\n            else\n                sum -=\
    \ i\n        end\n        return sum\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the product of the numbers in a vector. Ignore\
    \ numbers that are negative or not integers.", "    if length(lst) == 0\n    \
    \    return 0\n    \n    sum = 0\n    for i in lst\n        if isinteger(i)\n\
    \            sum += i\n        else\n            sum += i * i\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the squares of the numbers in the vector that are odd.", "    if length(lst)\
    \ == 0\n        return 0\n    else\n        sum = 0\n        for n in lst\n  \
    \          if isodd(n)\n                sum += n\n            end\n        end\n\
    \        return sum\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the sum of the squares of the numbers in the vector that are odd.\
    \ Ignore numbers that are negative or not integers.\nFor example, given [4, 6,\
    \ -2, 3], return 25.", "    if length(lst) == 0\n        return 0\n    \n    sum\
    \ = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the sum of the squares of the numbers in the input vector\nthat\
    \ are divisible by 7. Ignore numbers that are not integers.\n    \n    >>> sum_of_squares_divisible_by_7([1,\
    \ 3, 2, 0])\n    49\n    >>> sum_of_squares_divisible_by_7([-1, -2, 0])\n    0\n\
    \    >>> sum_of_squares_divisible_by_7([9, -2])\n    81\n    >>> sum_of_squares_divisible_by_7([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    else\n        sum = 0\n        for i\
    \ in lst\n            if typeof(i) == Int\n                sum += i\n        \
    \    elseif typeof(i) == Float64\n                sum += i*i\n            else\n\
    \                throw(ArgumentError(\"Input must be a list of numbers or integers\"\
    ))\n        end\n        return sum\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the product of a list of numbers. If the list is\
    \ empty, return 1.", "    if length(lst) == 0\n        return 0\n    \n    sum\
    \ = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Given a vector of numbers, return the sum of squares of the numbers\n    in\
    \ the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n        for\
    \ i in lst\n            if isinteger(i)\n                sum += i * i\n      \
    \      else \n                sum += i\n        return sum\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the product of a given vector\
    \ of numbers. \nThe input vector is assumed to be non-empty.", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst \n\
    \            if isinteger(i) \n                sum += i * i \n            else\
    \ \n                sum += i \n        return sum\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\n    Given a vector of numbers, return the sum of\
    \ squares of the numbers\n    in the vector that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2,\
    \ 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"", "    if length(lst) == 0\n        return\
    \ 0\n    else\n        sum = 0\n        for i in lst\n            if isodd(i)\n\
    \                sum += i\n            else\n                sum -= i\n      \
    \  end\n        return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n  \
    \      if isodd(i)\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of numbers\
    \ and returns the product of all the numbers in the vector. Ignore numbers that\
    \ are negative or not integers.", "    if length(lst) == 0 \n        return 0\
    \ \n    else \n        sum = 0\n        for i in lst \n            if isinteger(i)\
    \ \n                sum += i*i \n            else \n                sum += i \n\
    \        return sum\n    end\nend\n</cell>\n<text>\nExercise 3: Write a function\
    \ that returns the sum of the squares of the numbers in the input vector that\
    \ are odd. Ignore numbers that are negative or not integers.\nFor example, given\
    \ [3, -2, 5, 9], the function should return 50.", "    if length(lst) == 0\n \
    \       return 0\n    \n    sum = 0\n    for i in lst\n        if isodd(i)\n \
    \           sum += i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of numbers and returns the sum\
    \ of the squares of the numbers in the vector that are odd. Ignore numbers that\
    \ are negative or not integers.", "    if length(lst) == 0\n        return 0\n\
    \    \n    sum = 0\n    for i in lst\n        if isodd(i)\n            sum +=\
    \ i\n        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for i in lst\n        if i > 0\n            sum += i * i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst\n\
    \            if isodd(i) \n                sum += i * i \n            else \n\
    \                sum += i \n        return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    else\n        sum = 0\n        for i\
    \ in lst\n            if isinteger(i)\n                sum += i\n            else\n\
    \                sum += i*i\n        end\n        return sum\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the product of the numbers in\
    \ the input vector that are odd. Ignore numbers that are negative or not integers.",
  "    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n     \
    \   for i in lst \n            if typeof(i) == Int \n                sum += i*i\
    \ \n            else \n                sum += i*i \n        end \n        return\
    \ sum \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a\
    \ vector of numbers, return the sum of squares of the numbers\n    in the vector\
    \ that are odd. Ignore numbers that are negative or not integers.\n    \n    >>>\
    \ double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n        for\
    \ i in lst \n            if typeof(i) == Int64 \n                sum += i \n \
    \           else \n                sum += i * i \n        return sum \nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector that are odd.", "    if\
    \ length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n        for\
    \ i in lst \n            if isodd(i) \n                sum += i*i \n        return\
    \ sum\n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Given a vector\
    \ of numbers, return the sum of squares of the numbers\n    in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n  \
    \      if isinteger(i)\n            sum += i\n        else\n            sum +=\
    \ i*i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Given a vector of numbers, return the sum of squares of the numbers\n  \
    \  in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n        for\
    \ i in lst \n            if i mod 2 != 0 \n                sum += i \n       \
    \     else \n                sum += i*i \n        return sum \n    end\nend\n\
    </cell>\n<text>\nExercise 2: Write a function that returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.", "    if length(lst) == 0\n        return 0\n    \n    sum\
    \ = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of numbers and returns the sum of the squares of the numbers\
    \ in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    For example, if the input vector is [1, 3, 2, 0], then the output should be 17.\n\
    If the input vector is [-1, -2, 0], then the output should be 0.\nIf the input\
    \ vector is [9, -2], then the output should be 81.\nIf the input vector is [0],\
    \ then the output should be 0.", "    if length(lst) == 0\n        return 0\n\
    \    else\n        sum = 0\n        for i in lst\n            if typeof(i) ==\
    \ Int\n                sum += i\n            else\n                sum += i*i\n\
    \        end\n        return sum\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes in a vector of numbers and returns the product of\
    \ all the numbers in the vector. Ignore numbers that are negative or not integers.",
  "    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n        for\
    \ i in lst\n            if isodd(i)\n                sum += i\n            else\n\
    \                sum -= i\n        end\n        return sum\n    end\nend\n</cell>\n\
    <text>\nExercise 9\nWrite a function that returns the sum of the squares of the\
    \ numbers in the input vector that are odd.", "    sum = 0\n    for i in lst\n\
    \        if isa(i, Int)\n            sum += i\n        else\n            sum +=\
    \ i*i\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the sum of the squares of the numbers in the input\
    \ vector\nthat are even. Ignore numbers that are negative or not integers.\nThe\
    \ function should take in a vector of numbers and return a number.", "    if length(lst)\
    \ == 0\n        return 0\n    else\n        sum = 0\n        for i in lst\n  \
    \          if isodd(i)\n                sum += i\n            else\n         \
    \       sum -= i\n        end\n        return sum\n    end\nend\n</cell>\n<text>\n\
    Exercise 7\nWrite a function that returns the product of the numbers in the input\
    \ vector\nthat are even. Ignore numbers that are negative or not integers.", " \
    \   if length(lst) == 0 \n        return 0 \n    else \n        return sum(map(x\
    \ -> x*x, lst[1 : (end-1)]))\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    \n    sum = 0\n    for x in lst\n  \
    \      if x % 2 != 0\n            sum += x\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector of numbers,\
    \ return the sum of squares of the numbers\n    in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    sum\
    \ = 0\n    for x in lst\n        if x % 2 == 1\n            sum += x\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  \n    if length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in\
    \ lst\n        if isodd(i)\n            sum += i\n        end\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes in a vector\
    \ of numbers and returns the sum of the squares of the numbers in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst \n\
    \            if isinteger(i) \n                sum += i * i \n            else\
    \ \n                sum += i \n        return sum\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Given a vector of numbers, return the sum of\
    \ squares of the numbers\n    in the vector that are odd. Ignore numbers that\
    \ are negative or not integers.\n    \n    >>> double_the_difference([1, 3, 2,\
    \ 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>> double_the_difference([9,\
    \ -2])\n    81\n    >>> double_the_difference([0])\n    0\n   \n    If the input\
    \ vector is empty, return 0.\n    \"\"\"", "    sum = 0\n    for x in lst\n  \
    \      if x % 2 == 1\n            sum += x\n        end\n    end\n    return sum\n\
    end", "    if length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n\
    \        for i in lst \n            if typeof(i) == Int64 \n                sum\
    \ += i * i \n            else \n                sum += i \n        return sum\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector\
    \ of numbers, return the sum of squares of the numbers\n    in the vector that\
    \ are odd. Ignore numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n  \
    \      if isodd(i)\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector of numbers,\
    \ return the sum of squares of the numbers\n    in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    else\n        sum = 0\n        for n\
    \ in lst\n            if n >= 0\n                sum += n * n\n            else\n\
    \                sum += n\n        end\n        return sum\n    end\nend\n</cell>\n\
    <text>\nExercise 3: Write a function that takes a vector of numbers and returns\
    \ the product of the numbers in the vector that are odd. Ignore numbers that are\
    \ negative or not integers.", "    sum = 0\n    for i in lst\n        if isa(i,\
    \ Int64)\n            sum += i\n        else\n            sum += i*i\n       \
    \ end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\
    \n    Given a vector of numbers, return the sum of squares of the numbers\n  \
    \  in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    \n    sum = 0\n    for i in lst\n  \
    \      if isodd(i)\n            sum += i\n        end\n    end\n    return sum\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes an integer vector\
    \ and returns the sum of the squares of the numbers in the vector that are odd.",
  "    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n        for\
    \ n in lst\n            if n > 0\n                sum += n * n\n            else\n\
    \                sum += n\n        end\n        return sum\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of numbers and returns\
    \ the sum of the squares of the numbers in the vector that are odd. Ignore numbers\
    \ that are negative or not integers.\nFor example, if the input vector is [1,\
    \ 3, 2, 0], the output should be 22.", "    if length(lst) == 0\n        return\
    \ 0\n    else\n        sum = 0\n        for i in lst\n            if isinteger(i)\n\
    \                sum += i\n            else\n                sum += i*i\n    \
    \    end\n        return sum\n    end\nend\n</cell>\n<text>\nExercise 2: Write\
    \ a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.", "    if length(lst) == 0\n        return 0\n    \n    sum\
    \ = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Given a vector of numbers, return the sum of squares of the numbers\n    in\
    \ the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n        for\
    \ i in lst \n            if isinteger(i) \n                sum += i * i \n   \
    \         else \n                sum += i \n        return sum\n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the squares\
    \ of the numbers in the input vector that are odd.", "    sum = 0\n    for x in\
    \ lst\n        if x > 0\n            sum += x\n        else\n            sum +=\
    \ x^2\n        end\n    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector of numbers and returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nTest your function on the following vectors:", "    if length(lst)\
    \ == 0 \n        return 0 \n    else \n        sum = 0\n        for i in lst \n\
    \            if isodd(i) \n                sum += i*i \n            else \n  \
    \              sum += i \n        return sum \nend\n</cell>\n<text>\nExercise\
    \ 7\nWrite a function that returns the sum of the squares of the numbers in the\
    \ input vector\nthat are divisible by 7. Ignore numbers that are not integers.",
  "    if length(lst) == 0\n        return 0\n    else\n        sum = 0\n        for\
    \ i in lst\n            if isinteger(i)\n                sum += i * i\n      \
    \      else\n                sum += i\n        end\n        return sum\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector of numbers,\
    \ return the sum of squares of the numbers\n    in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0\n        return 0\n    else\n        return sum(lst[i] for\
    \ i in lst if i%2 == 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\n    Given a vector of numbers, return the sum of squares of the numbers\n\
    \    in the vector that are odd. Ignore numbers that are negative or not integers.\n\
    \    \n    >>> double_the_difference([1, 3, 2, 0])\n    10\n    >>> double_the_difference([-1,\
    \ -2, 0])\n    0\n    >>> double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n        for\
    \ i in lst\n            if typeof(i) == Int64 \n                sum += i \n  \
    \          else \n                sum += i * i \n        return sum \n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a vector of numbers,\
    \ return the sum of squares of the numbers\n    in the vector that are odd. Ignore\
    \ numbers that are negative or not integers.\n    \n    >>> double_the_difference([1,\
    \ 3, 2, 0])\n    10\n    >>> double_the_difference([-1, -2, 0])\n    0\n    >>>\
    \ double_the_difference([9, -2])\n    81\n    >>> double_the_difference([0])\n\
    \    0\n   \n    If the input vector is empty, return 0.\n    \"\"\"", "    if\
    \ length(lst) == 0 \n        return 0 \n    else \n        sum = 0\n        for\
    \ i in lst \n            if isinteger(i) \n                sum += i * i \n   \
    \         else \n                sum += i \n        return sum \n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the squares\
    \ of the numbers in the vector that are odd. Ignore numbers that are negative\
    \ or not integers.", "    if length(lst) == 0\n        return 0\n    \n    sum\
    \ = 0\n    for i in lst\n        if isodd(i)\n            sum += i\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes in a list of numbers and returns the product of all the numbers in the\
    \ list that are not negative.", "    sum = 0\n    for i in lst\n        if isinteger(i)\n\
    \            sum += i\n        else\n            sum += i*i\n    end\n    return\
    \ sum\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the product\
    \ of the numbers in the input vector that are odd. Ignore numbers that are negative\
    \ or not integers.\nFor example, given [3, -2, 6, -9, 4, 1, -9] the function should\
    \ return -36. Note that 1 is not included in the product because it is not odd.\n\
    If the input vector is empty, return 1."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
