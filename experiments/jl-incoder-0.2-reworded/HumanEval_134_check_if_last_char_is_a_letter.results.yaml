language: jl
name: HumanEval_134_check_if_last_char_is_a_letter
results:
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    txt = txt.split(\" \")\n    txt = txt[end]\n    \n    if txt ==\
    \ \"a\" or txt == \"e\" or txt == \"i\" or txt == \"o\" or txt == \"u\":\n   \
    \     return true\n    else\n        return false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Create a function that returns true if the\
    \ last character\n    of a given string is a digit and is not\n    a part of a\
    \ word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"txt\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp702arm5u.jl:22\nin expression starting at /tmp/tmp702arm5u.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt[txt.length\
    \ - 1] == \" \" \n        false\n    elseif txt[txt.length - 1] == \"\\n\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\t\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\r\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\v\" \n        false\n    elseif txt[txt.length - 1] == \"\\f\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\e\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\\"\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\'\" \n        false\n    elseif txt[txt.length - 1] == \"\\\\\"\
    \ \n        false\n    elseif txt[txt.length - 1] == \"%\" \n        false\n \
    \   elseif txt[txt.length - 1] == \"&\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"'\" \n        false\n    elseif txt[txt.length - 1] == \"(\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \")\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"*\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"+\" \n        false\n    elseif txt[txt.length - 1] == \"-\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"/\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \",\" \n        false\n    elseif txt[txt.length - 1] == \".\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"0\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"1\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"2\" \n        false\n    elseif txt[txt.length - 1] == \"3\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"4\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"5\" \n        false\n    elseif txt[txt.length - 1] == \"6\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"7\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"8\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"9\" \n        false\n    elseif txt[txt.length - 1] == \"a\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"b\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"c\" \n        false\n    elseif txt[txt.length - 1] == \"d\" \n  \
    \      false\n    elseif txt[txt.length - 1]\nusing Test\n\n@testset begin\n\n\
    candidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") == false)\n\
    \t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\") == false)\n\
    \t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie \") == false)\n\
    \t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"apple pie\") ==\
    \ false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzzkbfzjp.jl:1\nin expression starting at /tmp/tmpzzkbfzjp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\" \")\n\
    \    txt = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n    txt\
    \ = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip(\"\
    \ \")\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\" \"\
    )\n    txt = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n   \
    \ txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n   \
    \ txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt =\
    \ txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip(\" \")\n    txt\nusing Test\n\n@testset begin\n\
    \ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") ==\
    \ false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\"\
    ) == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie\
    \ \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk8xkbnb_.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk8xkbnb_.jl:1\n\
    in expression starting at /tmp/tmpk8xkbnb_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    if txt == \"\"\n        return false\n    \n    txt = txt.split(\"\
    \ \")\n    \n    for word in txt\n        if word[length(word)-1] == \" \"\n \
    \           return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdwuo2uw2.jl:30\nin expression starting at\
    \ /tmp/tmpdwuo2uw2.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    txt = txt.split(\" \")\n    \n    if txt[txt.length-1].isalpha()\
    \ == true \n        \n        return false\n    \n    return true\n    \nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is an alphabetical character\
    \ and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is\
    \ a group of characters separated by space.\nusing Test\n\n@testset begin\n\n\
    candidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") == false)\n\
    \t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\") == false)\n\
    \t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie \") == false)\n\
    \t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"apple pie\") ==\
    \ false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5xic9mkq.jl:28\nin expression starting at\
    \ /tmp/tmp5xic9mkq.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    txt = txt.strip()\n    \n    if txt.ends_with(\"e\")\n        true\n\
    \    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.1>\n\"\
    \"\"\n    Create a function that returns true if the last character\n    of a\
    \ given string is a number and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcrbms8cx.jl:27\nin expression starting at\
    \ /tmp/tmpcrbms8cx.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    if txt.length == 0 \n        false\n    elseif txt[txt.length-1] == '\
    \ ' \n        false\n    else\n        true\n    end\nend\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2ed365lm.jl:26\nin expression starting at\
    \ /tmp/tmp2ed365lm.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.split(\" \")\n    txt = txt[end]\n    if txt.isalpha()\n   \
    \     return true\n    else\n        return false\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\n    Create a function that returns true if the\
    \ last character\n    of a given string is a digit and is not\n    a part of a\
    \ word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpawt8dle2.jl:26\nin expression starting at\
    \ /tmp/tmpawt8dle2.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt[txt.length\
    \ - 1].isalpha()\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <text>\nExercise 2: check_if_last_char_is_a_letter\nusing Test\n\n@testset begin\n\
    \ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") ==\
    \ false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\"\
    ) == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie\
    \ \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuf5fefyu.jl:27\nin expression starting at\
    \ /tmp/tmpuf5fefyu.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.strip()\n    if txt == \"\"\n        false\n    else\n     \
    \   txt[end-1] \u2208 letters \u2227 txt[end-1] \u2209 word\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns true if the last character\n\
    \    of a given string is a digit and is not\n    a part of a word, and false\
    \ otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\
    using Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t\
    @test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpl45r87iw.jl:25\nin expression starting at\
    \ /tmp/tmpl45r87iw.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt.last\
    \ == \" \" \n        false\n    elseif txt.last == \" \" \n        false\n   \
    \ elseif txt.last == \" \" \n        false\n    elseif txt.last == \" \" \n  \
    \      false\n    elseif txt.last == \" \" \n        false\n    elseif txt.last\
    \ == \" \" \n        false\n    elseif txt.last == \" \" \n        false\n   \
    \ elseif txt.last == \" \" \n        false\n    elseif txt.last == \" \" \n  \
    \      false\n    elseif txt.last == \" \" \n        false\n    elseif txt.last\
    \ == \" \" \n        false\n    elseif txt.last == \" \" \n        false\n   \
    \ elseif txt.last == \" \" \n        false\n    elseif txt.last == \" \" \n  \
    \      false\n    elseif txt.last == \" \" \n        false\n    elseif txt.last\
    \ == \" \" \n        false\n    elseif txt.last == \" \" \n        false\n   \
    \ elseif txt.last == \" \" \n        false\n    elseif txt.last == \" \" \n  \
    \      false\n    elseif txt.last == \" \" \n        false\n    elseif txt.last\
    \ == \" \" \n        false\n    elseif txt.last == \" \" \n        false\n   \
    \ elseif txt.last == \" \" \n        false\n    elseif txt.last == \" \" \n  \
    \      false\n    elseif txt.last == \" \" \n        false\n    elseif txt.last\
    \ == \" \" \n        false\n    elseif txt.last == \" \" \n        false\n   \
    \ elseif txt.last == \" \" \n        false\n    elseif txt.last == \" \" \n  \
    \      false\n    elseif txt.last == \" \" \n        false\n    elseif txt.last\
    \ == \" \" \n        false\n    elseif txt.last == \" \" \n        false\n   \
    \ elseif txt.last == \" \" \n        false\n    elseif txt.last == \" \" \n  \
    \      false\n    elseif txt.last == \" \" \n        false\n    elseif txt.last\
    \ == \" \" \n        false\n    elseif txt.last == \" \" \n        false\n   \
    \ elseif txt.last == \" \" \n        false\n    elseif txt.last == \" \" \n  \
    \      false\n    elseif txt.last == \" \" \n        false\n    elseif txt.last\
    \ == \" \" \n        false\n    elseif txt\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") == false)\n\t\
    @test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\") == false)\n\
    \t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie \") == false)\n\
    \t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"apple pie\") ==\
    \ false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi425xxzm.jl:1\nin expression starting at /tmp/tmpi425xxzm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \"\
    )\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    \nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphyv6rdcm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphyv6rdcm.jl:1\n\
    in expression starting at /tmp/tmphyv6rdcm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    else\n \
    \       if txt[txt.length - 1].isalpha()\n            true\n        else\n   \
    \         false\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppsyzmate.jl:29\nin expression starting at\
    \ /tmp/tmppsyzmate.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt[txt.length-1]\
    \ == ' ' \n        false\n    else\n        true\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Create a function that returns true if the\
    \ last character\n    of a given string is a digit and is not\n    a part of a\
    \ word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzn4jk_7v.jl:27\nin expression starting at\
    \ /tmp/tmpzn4jk_7v.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    if txt.length == 0 \n        false\n    elseif txt[txt.length-1] == \"\
    \ \" \n        false\n    elseif txt[txt.length-1] in string.ascii_letters \n\
    \        false\n    else\n        true\n    end\nend\n</cell>\n<text>\nExercise\
    \ 2: Write a function that returns true if the last character of a given string\
    \ is a digit and is not\n    a part of a word, and false otherwise.\n    Note:\
    \ \"word\" is a group of characters separated by space.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\"\
    ) == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3nhprddg.jl:28\nin expression starting at\
    \ /tmp/tmp3nhprddg.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    if txt.size == 0\n        return false\n    \n    txt = txt.split(\"\
    \ \")\n    \n    if txt[txt.size - 1] == \" \"\n        return false\n    \n \
    \   txt = txt[txt.size - 1]\n    \n    if txt.isalpha()\n        return true\n\
    \    \n    return false\n    \nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Create a function that returns true if the last character\n    of a given\
    \ string is a digit and is not\n    a part of a word, and false otherwise.\n \
    \   Note: \"word\" is a group of characters separated by space.\nusing Test\n\n\
    @testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpam2adkwc.jl:35\nin expression starting at\
    \ /tmp/tmpam2adkwc.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0\n        false\n    elseif txt.length\
    \ == 1\n        txt.head == txt.last\n    else\n        txt.head == txt.last.head\
    \ && txt.last.head != \" \" && txt.last.head != \"\\n\"\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Create a function that returns true if\
    \ the last character\n    of a given string is a digit and is not\n    a part\
    \ of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsenb_3h1.jl:27\nin expression starting at\
    \ /tmp/tmpsenb_3h1.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    if txt.length == 0 \n        false\n    else\n        txt[txt.length-1]\
    \ == \" \" || txt[txt.length-1] == \"\\n\" || txt[txt.length-1] == \"\\t\" ||\
    \ txt[txt.length-1] == \"\\r\" || txt[txt.length-1] == \"\\v\" || txt[txt.length-1]\
    \ == \"\\f\" || txt[txt.length-1] == \"\\e\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpx54o22_7.jl:24\nin expression starting at\
    \ /tmp/tmpx54o22_7.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \"\
    )\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    \nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphyv6rdcm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphyv6rdcm.jl:1\n\
    in expression starting at /tmp/tmphyv6rdcm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt[txt.length-1]\
    \ == ' ' \n        false\n    elseif txt[txt.length-1] == '-' \n        false\n\
    \    elseif txt[txt.length-1] == '.' \n        false\n    elseif txt[txt.length-1]\
    \ == '!' \n        false\n    elseif txt[txt.length-1] == '?' \n        false\n\
    \    elseif txt[txt.length-1] == '\\'' \n        false\n    elseif txt[txt.length-1]\
    \ == '\\\"' \n        false\n    elseif txt[txt.length-1] == '(' \n        false\n\
    \    elseif txt[txt.length-1] == ')' \n        false\n    elseif txt[txt.length-1]\
    \ == '[' \n        false\n    elseif txt[txt.length-1] == ']' \n        false\n\
    \    elseif txt[txt.length-1] == '{' \n        false\n    elseif txt[txt.length-1]\
    \ == '}' \n        false\n    elseif txt[txt.length-1] == '*' \n        false\n\
    \    elseif txt[txt.length-1] == '&' \n        false\n    elseif txt[txt.length-1]\
    \ == '%' \n        false\n    elseif txt[txt.length-1] == '$' \n        false\n\
    \    elseif txt[txt.length-1] == '#' \n        false\n    elseif txt[txt.length-1]\
    \ == '@' \n        false\n    elseif txt[txt.length-1] == '^' \n        false\n\
    \    elseif txt[txt.length-1] == '~' \n        false\n    elseif txt[txt.length-1]\
    \ == '_' \n        false\n    elseif txt[txt.length-1] == '+' \n        false\n\
    \    elseif txt[txt.length-1] == '-' \n        false\n    elseif txt[txt.length-1]\
    \ == '.' \n        false\n    elseif txt[txt.length-1] == '/' \n        false\n\
    \    elseif txt[txt.length-1] == ':' \n        false\n    elseif txt[txt.length-1]\
    \ == ';' \n        false\n    elseif txt[txt.length-1] == '<' \n        false\n\
    \    elseif txt[txt.length-1] == '>' \n        false\n    elseif txt[txt.length-1]\
    \ == '?' \n        false\n    elseif txt[txt.length-1] == '\\'' \n        false\n\
    \    elseif txt[txt.length-1] == '\\\"' \n        false\n    elseif txt[txt.length-1]\
    \ == '|' \n        false\n    elseif txt[txt.length-1] == '\\\\' \n        false\n\
    \    elseif txt[txt.length-1] == '\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") == false)\n\t\
    @test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\") == false)\n\
    \t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie \") == false)\n\
    \t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"apple pie\") ==\
    \ false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope\n   @ /tmp/tmpalmgpcxx.jl:97\nin expression starting at /tmp/tmpalmgpcxx.jl:97\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    else\n \
    \       txt[txt.length-1].isalpha()\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcp1_xiik.jl:25\nin expression starting at\
    \ /tmp/tmpcp1_xiik.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \"\
    )\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    \nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphyv6rdcm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphyv6rdcm.jl:1\n\
    in expression starting at /tmp/tmphyv6rdcm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    else\n \
    \       txt[txt.length-1] == \" \" || txt[txt.length-1] == \".\" || txt[txt.length-1]\
    \ == \",\" || txt[txt.length-1] == \"?\" || txt[txt.length-1] == \"!\" || txt[txt.length-1]\
    \ == \"-\" || txt[txt.length-1] == \"_\" || txt[txt.length-1] == \"/\" || txt[txt.length-1]\
    \ == \"\\\\\" || txt[txt.length-1] == \"@\" || txt[txt.length-1] == \"#\" || txt[txt.length-1]\
    \ == \"$\" || txt[txt.length-1] == \"%\" || txt[txt.length-1] == \"^\" || txt[txt.length-1]\
    \ == \"&\" || txt[txt.length-1] == \"*\" || txt[txt.length-1] == \"(\" || txt[txt.length-1]\
    \ == \")\" || txt[txt.length-1] == \"|\" || txt[txt.length-1] == \"[\" || txt[txt.length-1]\
    \ == \"]\" || txt[txt.length-1] == \"{\" || txt[txt.length-1] == \"}\" || txt[txt.length-1]\
    \ == \"~\" || txt[txt.length-1] == \"`\" || txt[txt.length-1] == \"'\" || txt[txt.length-1]\
    \ == \"<\" || txt[txt.length-1] == \">\" || txt[txt.length-1] == \"=\" || txt[txt.length-1]\
    \ == \"\\\"\" || txt[txt.length-1] == \"'\" || txt[txt.length-1] == \"%\" || txt[txt.length-1]\
    \ == \"$\" || txt[txt.length-1] == \"&\" || txt[txt.length-1] == \"*\" || txt[txt.length-1]\
    \ == \"(\"\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t\
    @test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmppbq8_ky2.jl:22\nin expression starting at\
    \ /tmp/tmppbq8_ky2.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    if txt.length == 0\n        return false\n    \n    txt = txt.split(\"\
    \ \")\n    \n    for word in txt\n        if word[word.length - 1].isalpha()\n\
    \            return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t\
    @test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsxq_dqoz.jl:30\nin expression starting at\
    \ /tmp/tmpsxq_dqoz.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    if txt.length == 0\n        false\n    else\n        txt[txt.length-1]\
    \ == ' ' || txt[txt.length-1] == '\\t' || txt[txt.length-1] == '\\n'\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmphnxb5cke.jl:24\nin expression starting at\
    \ /tmp/tmphnxb5cke.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.strip()\n    if txt.size == 0\n        return false\n    txt\
    \ = txt.split(\" \")\n    txt = txt[txt.size - 1]\n    if txt.size == 0\n    \
    \    return false\n    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n \
    \   if txt.size == 0\n        return false\n    txt = txt.split(\" \")\n    txt\
    \ = txt[txt.size - 1]\n    if txt.size == 0\n        return false\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.size - 1]\n    if txt.size == 0\n        return false\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n    if txt.size == 0\n\
    \        return false\n    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n\
    \    if txt.size == 0\n        return false\n    txt = txt.split(\" \")\n    txt\
    \ = txt[txt.size - 1]\n    if txt.size == 0\n        return false\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.size - 1]\n    if txt.size == 0\n        return false\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n    if txt.size == 0\n\
    \        return false\n    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n\
    \    if txt.size == 0\n        return false\n    txt = txt.split(\" \")\n    txt\
    \ = txt[txt.size - 1]\n    if txt.size == 0\n        return false\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.size - 1]\n    if txt.size == 0\n        return false\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n    if txt.size == 0\n\
    \        return false\n    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n\
    \    if txt.size == 0\n        return false\n    txt = txt.split(\" \")\n    txt\
    \ = txt[txt.size - 1]\n    if txt.size == 0\n        return false\n    txt = txt.split(\"\
    \ \")\n    txt = txt[txt.size - 1]\n    if txt.size == 0\n        return false\n\
    \    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n    if txt.size == 0\n\
    \        return false\n    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n\
    \    if txt.size == 0\n        return false\n    txt = txt.split(\" \")\n    txt\
    \ = txt[txt.size - 1]\n    if txt.size == 0\n        return false\n    txt\nusing\
    \ Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjm0y2km3.jl:1\nin expression starting at /tmp/tmpjm0y2km3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    if txt.length == 0 \n        false\n    else\n        txt[txt.length\
    \ - 1] \u2209 \" abcdefghijklmnopqrstuvwxyz\"\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfh74xr28.jl:25\nin expression starting at\
    \ /tmp/tmpfh74xr28.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt[txt.length\
    \ - 1].isalpha()\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Create a function that returns true if\
    \ the last character\n    of a given string is a digit and is not\n    a part\
    \ of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqkomrq4y.jl:27\nin expression starting at\
    \ /tmp/tmpqkomrq4y.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt[txt.length\
    \ - 1].isalpha()\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\n\"\"\"\n    Create a function that returns true if\
    \ the last character\n    of a given string is a digit and is not\n    a part\
    \ of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvzmvbojg.jl:27\nin expression starting at\
    \ /tmp/tmpvzmvbojg.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    if txt.length == 0 \n        false\n    else\n        if txt[txt.length\
    \ - 1] == \" \" \n            false\n        else\n            if txt[txt.length\
    \ - 1].isalpha() \n                false\n            else\n                true\n\
    \        end\n    end\nend\n</code>\n<|/ a tags=julia,string |>\n<| c |>\nThis\
    \ does not work if the last character is a space. Try `check_if_last_char_is_a_letter(\"\
    apple pi e \")`.\n<|/ c |>\n<| c |>\nThanks for the comment. I edited my answer\
    \ to include a check for a space at the end.\n<|/ c |>\n<| a tags=julia,string\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0act9x4p.jl:31\nin expression starting at\
    \ /tmp/tmp0act9x4p.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt[txt.length-1].isalpha()\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5hoeppmq.jl:27\nin expression starting at\
    \ /tmp/tmp5hoeppmq.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    if txt.length == 0 \n        false\n    else\n        txt[txt.length -\
    \ 1] == ' ' || txt[txt.length - 1] == '.' || txt[txt.length - 1] == '?' || txt[txt.length\
    \ - 1] == '!' || txt[txt.length - 1] == '-' || txt[txt.length - 1] == '_' || txt[txt.length\
    \ - 1] == '*' || txt[txt.length - 1] == '+' || txt[txt.length - 1] == '(' || txt[txt.length\
    \ - 1] == ')' || txt[txt.length - 1] == '[' || txt[txt.length - 1] == ']' || txt[txt.length\
    \ - 1] == '{' || txt[txt.length - 1] == '}' || txt[txt.length - 1] == ':' || txt[txt.length\
    \ - 1] == ';' || txt[txt.length - 1] == '\"' || txt[txt.length - 1] == '\\'' ||\
    \ txt[txt.length - 1] == '\\\\'\n    end\nend\n</cell>\n<text>\nExercise 7\nWrite\
    \ a function that returns true if the last character of a given string is a digit,\
    \ and false otherwise.\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp484unhu6.jl:24\nin expression starting at\
    \ /tmp/tmp484unhu6.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    if txt.length == 0 \n        false\n    elseif txt[txt.length-1]\
    \ == \" \" \n        false\n    elseif txt[txt.length-1] == \"\\n\" \n       \
    \ false\n    elseif txt[txt.length-1] == \"\\t\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\r\" \n        false\n    elseif txt[txt.length-1] == \"\\v\" \n     \
    \   false\n    elseif txt[txt.length-1] == \"\\f\" \n        false\n    elseif\
    \ txt[txt.length-1] == \"\\e\" \n        false\n    elseif txt[txt.length-1] ==\
    \ \"\\\"\" \n        false\n    elseif txt[txt.length-1] == \"\\'\" \n       \
    \ false\n    elseif txt[txt.length-1] == \"\\\\\" \n        false\n    elseif\
    \ txt[txt.length-1] == \"%\" \n        false\n    elseif txt[txt.length-1] ==\
    \ \"&\" \n        false\n    elseif txt[txt.length-1] == \"'\" \n        false\n\
    \    elseif txt[txt.length-1] == \"(\" \n        false\n    elseif txt[txt.length-1]\
    \ == \")\" \n        false\n    elseif txt[txt.length-1] == \",\" \n        false\n\
    \    elseif txt[txt.length-1] == \".\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"/\" \n        false\n    elseif txt[txt.length-1] == \"0\" \n        false\n\
    \    elseif txt[txt.length-1] == \"1\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"2\" \n        false\n    elseif txt[txt.length-1] == \"3\" \n        false\n\
    \    elseif txt[txt.length-1] == \"4\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"5\" \n        false\n    elseif txt[txt.length-1] == \"6\" \n        false\n\
    \    elseif txt[txt.length-1] == \"7\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"8\" \n        false\n    elseif txt[txt.length-1] == \"9\" \n        false\n\
    \    elseif txt[txt.length-1] == \"-\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"+\" \n        false\n    elseif txt[txt.length-1] == \"=\" \n        false\n\
    \    elseif txt[txt.length-1] == \"_\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"*\" \n        false\n    elseif txt[txt.length-1] == \"?\" \n        false\n\
    \    elseif txt[txt.length-1] == \"!\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"@\" \n        false\n\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn4ay0hsr.jl:1\nin expression starting at /tmp/tmpn4ay0hsr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \"\
    )\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    \nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphyv6rdcm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphyv6rdcm.jl:1\n\
    in expression starting at /tmp/tmphyv6rdcm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0\n        false\n    elseif txt.length\
    \ == 1\n        txt.head == txt.last\n    else\n        txt.head == txt.last.head\
    \ && txt.last.tail != txt.last\n    end\nend\n</code>\n<|/ a tags=julia,string\
    \ |>\n<| a dscore=1 |>\nThe answer by is great, but I wanted to add that you can\
    \ also use regular expressions to do this.\n<code>\njulia> using Regexp\nusing\
    \ Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9csd0nam.jl:27\nin expression starting at\
    \ /tmp/tmp9csd0nam.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    if txt.length == 0 \n        false\n    else\n        txt[txt.length-1]\
    \ == \" \" || txt[txt.length-1] == \".\" || txt[txt.length-1] == \",\" || txt[txt.length-1]\
    \ == \";\" || txt[txt.length-1] == \"?\" || txt[txt.length-1] == \"!\" || txt[txt.length-1]\
    \ == \"-\" || txt[txt.length-1] == \"_\" || txt[txt.length-1] == \"'\" || txt[txt.length-1]\
    \ == \"\\\"\" || txt[txt.length-1] == \"$\" || txt[txt.length-1] == \"#\" || txt[txt.length-1]\
    \ == \"@\" || txt[txt.length-1] == \"$\" || txt[txt.length-1] == \"%\" || txt[txt.length-1]\
    \ == \"^\" || txt[txt.length-1] == \"&\" || txt[txt.length-1] == \"*\" || txt[txt.length-1]\
    \ == \"(\" || txt[txt.length-1] == \")\" || txt[txt.length-1] == \"[\" || txt[txt.length-1]\
    \ == \"]\" || txt[txt.length-1] == \"{\" || txt[txt.length-1] == \"}\" || txt[txt.length-1]\
    \ == \"|\" || txt[txt.length-1] == \"\\\\\" || txt[txt.length-1] == \"~\" || txt[txt.length-1]\
    \ == \"`\" || txt[txt.length-1] == \"~\" || txt[txt.length-1] == \"<\" || txt[txt.length-1]\
    \ == \">\" || txt[txt.length-1] == \"?\" || txt[txt.length-1] == \"!\" || txt[txt.length-1]\
    \ == \"-\" || txt[txt.length-1] == \"_\" || txt[txt.length-1] == \"'\" || txt[txt.length-1]\
    \ == \"\\\"\" || txt[txt.length-1] == \"$\" || txt[txt.length-1] == \"#\" || txt[txt.length-1]\
    \ == \"@\" || txt[txt.length-1] == \"$\" || txt[txt.length-1] == \"%\" || txt[txt.length-1]\
    \ == \"^\" || txt[txt.length-1] == \"&\" || txt[txt.length-1] == \"*\" || txt[txt.length-1]\
    \ == \"(\" || txt[txt.length-1] == \")\" || txt[txt.length-1] == \"[\" || txt[txt.length-1]\
    \ == \"]\" || txt[txt.length-1] == \"{\" || txt[txt.length-1] == \"}\" || txt[txt.length-1]\
    \ == \"|\" || txt[txt.length-1] == \"\\\\\" || txt[txt.length-1] == \"~\" || txt[txt.length-1]\
    \ == \"`\" || txt[txt.length-1] == \"~\" || txt[txt.length-1] == \"<\" || txt[txt.length-1]\
    \ == \">\" || txt[txt.length-1] == \"?\" || txt[txt.length-1] == \"!\" || txt[txt.length-1]\
    \ == \"-\" || txt[txt.length-1] == \"_\" || txt[\nusing Test\n\n@testset begin\n\
    \ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") ==\
    \ false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\"\
    ) == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie\
    \ \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdgf0_wu5.jl:22\nin expression starting at\
    \ /tmp/tmpdgf0_wu5.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt.last.isalpha()\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpd_dt5qgz.jl:27\nin expression starting at\
    \ /tmp/tmpd_dt5qgz.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt[txt.length\
    \ - 1].isalpha()\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Create a function that returns true if\
    \ the last character\n    of a given string is a digit and is not\n    a part\
    \ of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqkomrq4y.jl:27\nin expression starting at\
    \ /tmp/tmpqkomrq4y.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    if txt.length == 0 \n        false\n    elseif txt[txt.length-1]\
    \ == \" \" \n        false\n    elseif txt[txt.length-1] in [\"a\", \"e\", \"\
    i\", \"o\", \"u\"] \n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Create a function that returns true if\
    \ the last character\n    of a given string is a digit and is not\n    a part\
    \ of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnmwvquxx.jl:29\nin expression starting at\
    \ /tmp/tmpnmwvquxx.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \"\
    )\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    \nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphyv6rdcm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphyv6rdcm.jl:1\n\
    in expression starting at /tmp/tmphyv6rdcm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \"\
    )\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    \nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphyv6rdcm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphyv6rdcm.jl:1\n\
    in expression starting at /tmp/tmphyv6rdcm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    if txt.length == 0 \n        false\n    elseif txt[txt.length-1] == \"\
    \ \" \n        false\n    elseif txt[txt.length-1] == \"-\" \n        false\n\
    \    elseif txt[txt.length-1] == \"_\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"/\" \n        false\n    elseif txt[txt.length-1] == \"\\\\\" \n      \
    \  false\n    elseif txt[txt.length-1] == \"'\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"!\" \n        false\n    elseif txt[txt.length-1] == \"?\" \n        false\n\
    \    elseif txt[txt.length-1] == \"#\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"$\" \n        false\n    elseif txt[txt.length-1] == \"%\" \n        false\n\
    \    elseif txt[txt.length-1] == \"&\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"*\" \n        false\n    elseif txt[txt.length-1] == \"(\"\n        false\n\
    \    elseif txt[txt.length-1] == \")\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"-\" \n        false\n    elseif txt[txt.length-1] == \":\" \n        false\n\
    \    elseif txt[txt.length-1] == \"+\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"=\" \n        false\n    elseif txt[txt.length-1] == \"<\" \n        false\n\
    \    elseif txt[txt.length-1] == \">\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"?\" \n        false\n    elseif txt[txt.length-1] == \"/\" \n        false\n\
    \    elseif txt[txt.length-1] == \"\\\\\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"|\" \n        false\n    elseif txt[txt.length-1] == \"{\" \n        false\n\
    \    elseif txt[txt.length-1] == \"}\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"[\" \n        false\n    elseif txt[txt.length-1] == \"]\" \n        false\n\
    \    elseif txt[txt.length-1] == \"^\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"~\" \n        false\n    elseif txt[txt.length-1] == \"`\" \n        false\n\
    \    elseif txt[txt.length-1] == \"{\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"|\" \n        false\n    elseif txt[txt.length-1] == \"~\" \n        false\n\
    \    elseif txt[txt.length-1] == \"[\" \n        false\n    elseif txt\nusing\
    \ Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa6hrn6qk.jl:38\nin expression starting at\
    \ /tmp/tmpa6hrn6qk.jl:38\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt[txt.length\
    \ - 1] == \" \" \n        false\n    elseif txt[txt.length - 1] == \".\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \",\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"?\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"!\" \n        false\n    elseif txt[txt.length - 1] == \"'\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"-\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"_\" \n        false\n    elseif txt[txt.length - 1] == \":\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \";\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \",\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \".\" \n        false\n    elseif txt[txt.length - 1] == \",\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"?\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"!\" \n        false\n    elseif txt[txt.length - 1] == \"'\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"-\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"_\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \":\" \n        false\n    elseif txt[txt.length - 1] == \";\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \",\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \".\" \n        false\n    elseif txt[txt.length - 1] == \",\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"?\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"!\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"'\" \n        false\n    elseif txt[txt.length - 1] == \"-\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"_\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \":\" \n        false\n    elseif txt[txt.length - 1] == \";\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \",\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \".\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \",\" \n        false\n    elseif txt[txt.length - 1] == \"?\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"!\" \n        false\n    elseif txt[txt\n\
    using Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t\
    @test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkfeet0be.jl:1\nin expression starting at /tmp/tmpkfeet0be.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    if txt.length == 0 \n        false\n    elseif txt[txt.length -\
    \ 1] == \" \" \n        false\n    elseif txt[txt.length - 1] == \"\\n\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"\\t\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"\\r\" \n        false\n    elseif txt[txt.length -\
    \ 1] == \"\\v\" \n        false\n    elseif txt[txt.length - 1] == \"\\f\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\e\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\\"\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\'\" \n        false\n    elseif txt[txt.length - 1] == \"\\\\\"\
    \ \n        false\n    elseif txt[txt.length - 1] == \"%\" \n        false\n \
    \   elseif txt[txt.length - 1] == \"&\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"*\" \n        false\n    elseif txt[txt.length - 1] == \"+\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"-\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"/\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"0\" \n        false\n    elseif txt[txt.length - 1] == \"1\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"2\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"3\" \n        false\n    elseif txt[txt.length - 1] == \"4\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"5\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"6\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"7\" \n        false\n    elseif txt[txt.length - 1] == \"8\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"9\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \":\" \n        false\n    elseif txt[txt.length - 1] == \";\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"<\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"=\"\n        false\n    elseif txt[txt.length - 1]\
    \ == \">\" \n        false\n    elseif txt[txt.length - 1] == \"?\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"@\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"[\" \n        false\n    elseif txt[txt.length - 1] == \"]\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"^\" \n        false\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7o282rlb.jl:1\nin expression starting at /tmp/tmp7o282rlb.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    if txt.length == 0 \n        false\n    else\n        txt[txt.length -\
    \ 1] \u2209 \" \" \u2227 txt[txt.length - 1] \u2209 \"\\n\" \u2227 txt[txt.length\
    \ - 1] \u2209 \"\\t\" \u2227 txt[txt.length - 1] \u2209 \"\\r\" \u2227 txt[txt.length\
    \ - 1] \u2209 \"\\v\" \u2227 txt[txt.length - 1] \u2209 \"\\f\" \u2227 txt[txt.length\
    \ - 1] \u2209 \"\\e\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Create a function that returns true if the last character\n    of a given\
    \ string is a digit, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuhh2bzqi.jl:24\nin expression starting at\
    \ /tmp/tmpuhh2bzqi.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0\n        false\n    elseif txt[txt.length\
    \ - 1] in string.ascii_letters\n        true\n    else\n        false\n    end\n\
    end\n</cell>\n<text>\nExercise 7: Write a function that returns true if the last\
    \ character\n    of a given string is a digit and is not\n    a part of a word,\
    \ and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpbme2zy83.jl:27\nin expression starting at\
    \ /tmp/tmpbme2zy83.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.strip()\n    if txt.size == 0\n        false\n    elseif txt.size\
    \ == 1\n        txt.head == txt.last\n    else\n        txt.head == txt.last.head\
    \ && txt.last.head != \" \"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6d9njttv.jl:27\nin expression starting at\
    \ /tmp/tmp6d9njttv.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    if txt.length == 0 \n        false\n    elseif txt[txt.length -\
    \ 1] == \" \" \n        false\n    elseif txt[txt.length - 1] == \"\\n\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"\\t\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"\\r\" \n        false\n    elseif txt[txt.length -\
    \ 1] == \"\\v\" \n        false\n    elseif txt[txt.length - 1] == \"\\f\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\e\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\\"\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\'\" \n        false\n    elseif txt[txt.length - 1] == \"\\\\\"\
    \ \n        false\n    elseif txt[txt.length - 1] == \"%\" \n        false\n \
    \   elseif txt[txt.length - 1] == \"&\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"'\" \n        false\n    elseif txt[txt.length - 1] == \"(\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \")\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \",\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"-\" \n        false\n    elseif txt[txt.length - 1] == \".\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \":\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"/\" \n        false\n    elseif txt[txt.length - 1] == \"[\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"]\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"?\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"{\" \n        false\n    elseif txt[txt.length - 1] == \"}\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"|\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"~\" \n        false\n    elseif txt[txt.length - 1] == \"*\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"^\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"_\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"`\" \n        false\n    elseif txt[txt.length - 1] == \"'\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"<\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \">\" \n        false\n    elseif txt[txt.length - 1] == \"=\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"+\" \n        \nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp85iz0cyq.jl:1\nin expression starting at /tmp/tmp85iz0cyq.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\" \")\n\
    \    txt = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n    if\
    \ txt == \"a\" or txt == \"e\" or txt == \"i\" or txt == \"o\" or txt == \"u\"\
    :\n        return true\n    return false\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a vowel, and false otherwise.\n    Note: \"vowel\" is a group\
    \ of characters separated by space.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") == false)\n\t\
    @test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\") == false)\n\
    \t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie \") == false)\n\
    \t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"apple pie\") ==\
    \ false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: unexpected \"txt\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmx52eycq.jl:27\nin expression starting at /tmp/tmpmx52eycq.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt.lastchar.isalpha()\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2u3yyvjr.jl:27\nin expression starting at\
    \ /tmp/tmp2u3yyvjr.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \"\
    )\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    \nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphyv6rdcm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphyv6rdcm.jl:1\n\
    in expression starting at /tmp/tmphyv6rdcm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    if txt.length == 0 \n        false\n    elseif txt[txt.length -\
    \ 1] == ' ' \n        false\n    elseif txt[txt.length - 1] == '-' \n        false\n\
    \    elseif txt[txt.length - 1] == '.' \n        false\n    elseif txt[txt.length\
    \ - 1] == ',' \n        false\n    elseif txt[txt.length - 1] == '?' \n      \
    \  false\n    elseif txt[txt.length - 1] == '!' \n        false\n    elseif txt[txt.length\
    \ - 1] == '-' \n        false\n    elseif txt[txt.length - 1] == '.' \n      \
    \  false\n    elseif txt[txt.length - 1] == ',' \n        false\n    elseif txt[txt.length\
    \ - 1] == '?' \n        false\n    elseif txt[txt.length - 1] == '!' \n      \
    \  false\n    elseif txt[txt.length - 1] == '-' \n        false\n    elseif txt[txt.length\
    \ - 1] == '.' \n        false\n    elseif txt[txt.length - 1] == ',' \n      \
    \  false\n    elseif txt[txt.length - 1] == '?' \n        false\n    elseif txt[txt.length\
    \ - 1] == '!' \n        false\n    elseif txt[txt.length - 1] == '-' \n      \
    \  false\n    elseif txt[txt.length - 1] == '.' \n        false\n    elseif txt[txt.length\
    \ - 1] == ',' \n        false\n    elseif txt[txt.length - 1] == '?' \n      \
    \  false\n    elseif txt[txt.length - 1] == '!' \n        false\n    elseif txt[txt.length\
    \ - 1] == '-' \n        false\n    elseif txt[txt.length - 1] == '.' \n      \
    \  false\n    elseif txt[txt.length - 1] == ',' \n        false\n    elseif txt[txt.length\
    \ - 1] == '?' \n        false\n    elseif txt[txt.length - 1] == '!' \n      \
    \  false\n    elseif txt[txt.length - 1] == '-' \n        false\n    elseif txt[txt.length\
    \ - 1] == '.' \n        false\n    elseif txt[txt.length - 1] == ',' \n      \
    \  false\n    elseif txt[txt.length - 1] == '?' \n        false\n    elseif txt[txt.length\
    \ - 1] == '!' \n        false\n    elseif txt[txt.length - 1] == '-' \n      \
    \  false\n    elseif txt[txt.length - 1] == '.' \n        false\n    elseif txt[txt.length\
    \ - 1] == ',' \n        false\n    elseif txt[txt.length - 1] == '?' \n      \
    \  false\n    elseif txt[txt.length - 1] == '!' \n\nusing Test\n\n@testset begin\n\
    \ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") ==\
    \ false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\"\
    ) == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie\
    \ \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8v3t4vyp.jl:1\nin expression starting at /tmp/tmp8v3t4vyp.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    if txt.length == 0 \n        false\n    else\n        txt[txt.length\
    \ - 1] == ' ' || txt[txt.length - 1] == '\\t' || txt[txt.length - 1] == '\\n'\
    \ || txt[txt.length - 1] == '\\r' || txt[txt.length - 1] == '\\v' || txt[txt.length\
    \ - 1] == '\\f' || txt[txt.length - 1] == '\\a' || txt[txt.length - 1] == '\\\
    e'\n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    Create a function\
    \ that returns true if the last character\n    of a given string is a digit and\
    \ is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a\
    \ group of characters separated by space.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") == false)\n\t\
    @test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\") == false)\n\
    \t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie \") == false)\n\
    \t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"apple pie\") ==\
    \ false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy79ptz4e.jl:25\nin expression starting at\
    \ /tmp/tmpy79ptz4e.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.strip()\n    if txt.size == 0\n        return false\n    txt\
    \ = txt.split(\" \")\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt = txt.chars\n    txt = txt.last\n\
    \    txt = txt.chars\n    txt = txt.last\n    txt\nusing Test\n\n@testset begin\n\
    \ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") ==\
    \ false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\"\
    ) == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie\
    \ \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz26k3xjr.jl:1\nin expression starting at /tmp/tmpz26k3xjr.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt[txt.length\
    \ - 1] == \" \" \n        false\n    elseif txt[txt.length - 1] == \"\\n\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\r\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\t\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \" \" \n        false\n    elseif txt[txt.length - 1] == \"!\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"#\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"$\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"%\" \n        false\n    elseif txt[txt.length - 1] == \"&\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"'\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"(\"\n        false\n    elseif txt[txt.length - 1] == \")\" \n   \
    \     false\n    elseif txt[txt.length - 1] == \"*\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"+\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \",\" \n        false\n    elseif txt[txt.length - 1] == \"-\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"/\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \":\" \n        false\n    elseif txt[txt.length - 1] == \";\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"<\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"=\"\n        false\n    elseif txt[txt.length - 1]\
    \ == \">\" \n        false\n    elseif txt[txt.length - 1] == \"?\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"@\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"[\" \n        false\n    elseif txt[txt.length - 1] == \"]\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"^\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"_\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"`\" \n        false\n    elseif txt[txt.length - 1] == \"{\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"|\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"~\" \n        false\n    elseif txt[txt.length - 1] == \"\\\"\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"{\" \n        false\n    elseif\
    \ txt[txt.length - 1]\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7bn5o654.jl:35\nin expression starting at\
    \ /tmp/tmp7bn5o654.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.strip()\n    if txt.size == 0\n        false\n    elseif txt[txt.size-1]\
    \ == \" \"\n        false\n    else\n        true\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Create a function that returns true if the\
    \ last character\n    of a given string is a digit and is not\n    a part of a\
    \ word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfo7nugdq.jl:27\nin expression starting at\
    \ /tmp/tmpfo7nugdq.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.strip()\n    if txt.size == 0\n        false\n    elseif txt.size\
    \ == 1\n        txt.head == txt.last\n    else\n        txt.head == txt.last.head\
    \ && txt.last.head == txt.last.last\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfqt_aapg.jl:27\nin expression starting at\
    \ /tmp/tmpfqt_aapg.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    if txt == \"\"\n        false\n    else\n        txt[length(txt)-1] ==\
    \ \" \" || txt[length(txt)-1] == \".\" || txt[length(txt)-1] == \",\"\n    end\n\
    end\n</cell>\n<text>\nExercise 3: Write a function that returns true if the last\
    \ character\n    of a given string is a number and is not\n    a part of a word,\
    \ and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkp_e9bsa.jl:24\nin expression starting at\
    \ /tmp/tmpkp_e9bsa.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip()\n    txt = txt.split(\" \")\n\
    \    txt = txt[end]\n    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip()\n    txt = txt.split(\" \")\n\
    \    txt = txt[end]\n    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip()\n    txt = txt.split(\" \")\n\
    \    txt = txt[end]\n    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip()\n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") == false)\n\t\
    @test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\") == false)\n\
    \t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie \") == false)\n\
    \t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"apple pie\") ==\
    \ false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpblnfv8ed.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpblnfv8ed.jl:1\n\
    in expression starting at /tmp/tmpblnfv8ed.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.size -\
    \ 1]\n    return txt.isalpha()\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Create a function that returns true if the last character\n    of a given\
    \ string is a digit and is not\n    a part of a word, and false otherwise.\n \
    \   Note: \"word\" is a group of characters separated by space.\nusing Test\n\n\
    @testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp3jqxi8if.jl:23\nin expression starting at\
    \ /tmp/tmp3jqxi8if.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.strip()\n    if txt == \"\"\n        return false\n    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    if txt == \"a\"\n        return false\n\
    \    if txt == \"e\"\n        return false\n    if txt == \"i\"\n        return\
    \ false\n    if txt == \"o\"\n        return false\n    if txt == \"u\"\n    \
    \    return false\n    return true\nend\n</cell>\n<text>\nExercise 2: Write a\
    \ function that returns true if the last character\n    of a given string is a\
    \ digit, and false otherwise.\n    Note: \"digit\" is a group of characters separated\
    \ by space.\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpdhzf5hty.jl:35\nin expression starting at\
    \ /tmp/tmpdhzf5hty.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    if txt.length == 0 \n        false\n    elseif txt[txt.length -\
    \ 1] == \" \" \n        false\n    elseif txt[txt.length - 1] == \"-\" \n    \
    \    false\n    elseif txt[txt.length - 1] == \"_\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"/\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \".\" \n        false\n    elseif txt[txt.length - 1] == \",\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"?\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"!\" \n        false\n    elseif txt[txt.length - 1] == \"'\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"\\\"\" \n        false\n   \
    \ elseif txt[txt.length - 1] == \"$\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"%\" \n        false\n    elseif txt[txt.length - 1] == \"&\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"*\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"(\"\n        false\n    elseif txt[txt.length - 1]\
    \ == \")\" \n        false\n    elseif txt[txt.length - 1] == \"-\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"_\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"/\" \n        false\n    elseif txt[txt.length - 1] == \"[\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"]\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"{\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"}\" \n        false\n    elseif txt[txt.length - 1] == \"|\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"~\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"<\" \n        false\n    elseif txt[txt.length - 1] == \">\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"?\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"!\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"'\" \n        false\n    elseif txt[txt.length - 1] == \"\\\"\" \n    \
    \    false\n    elseif txt[txt.length - 1] == \"$\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"%\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"&\" \n        false\n    elseif txt[txt.length - 1] == \"*\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"(\" \n        false\nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn18zg27d.jl:41\nin expression starting at\
    \ /tmp/tmpn18zg27d.jl:41\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    txt = txt.strip()\n    \n    if txt == \"\"\n        return false\n\
    \    \n    txt = txt.split(\" \")\n    \n    txt = txt.last()\n    \n    if txt\
    \ == \"\"\n        return false\n    \n    txt = txt.chars()\n    \n    txt =\
    \ txt.last()\n    \n    if txt == \"\"\n        return false\n    \n    txt =\
    \ txt.chars()\n    \n    txt = txt.last()\n    \n    if txt == \"\"\n        return\
    \ false\n    \n    txt = txt.chars()\n    \n    txt = txt.last()\n    \n    if\
    \ txt == \"\"\n        return false\n    \n    txt = txt.chars()\n    \n    txt\
    \ = txt.last()\n    \n    if txt == \"\"\n        return false\n    \n    txt\
    \ = txt.chars()\n    \n    txt = txt.last()\n    \n    if txt == \"\"\n      \
    \  return false\n    \n    txt = txt.chars()\n    \n    txt = txt.last()\n   \
    \ \n    if txt == \"\"\n        return false\n    \n    txt = txt.chars()\n  \
    \  \n    txt = txt.last()\n    \n    if txt == \"\"\n        return false\n  \
    \  \n    txt = txt.chars()\n    \n    txt = txt.last()\n    \n    if txt == \"\
    \"\n        return false\n    \n    txt = txt.chars()\n    \n    txt = txt.last()\n\
    \    \n    if txt == \"\"\n        return false\n    \n    txt = txt.chars()\n\
    \    \n    txt = txt.last()\n    \n    if txt == \"\"\n        return false\n\
    \    \n    txt = txt.chars()\n    \n    txt = txt.last()\n    \n    if txt ==\
    \ \"\"\n        return false\n    \n    txt = txt.chars()\n    \n    txt = txt.last()\n\
    \    \n    if txt == \"\"\n        return false\n    \n    txt = txt.chars()\n\
    \    \n    txt = txt.last()\n    \n    if txt == \"\"\n        return false\n\
    \    \n    txt = txt.chars()\n    \n    txt = txt.last()\n    \n    if txt ==\
    \ \"\"\n        return false\n    \n    txt = txt.chars()\n    \n    txt = txt.last()\n\
    \    \n    if txt == \"\"\n        return false\n    \n    txt = txt.chars()\n\
    \    \n    txt\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9b6tlvb3.jl:1\nin expression starting at /tmp/tmp9b6tlvb3.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    else\n \
    \       if txt[txt.length-1].isalpha()\n            true\n        else\n     \
    \       false\n        end\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfjlly1ff.jl:29\nin expression starting at\
    \ /tmp/tmpfjlly1ff.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.strip()\n    if txt == \"\"\n        false\n    else\n     \
    \   txt[length(txt)-1] == ' ' || txt[length(txt)-1] == '.' || txt[length(txt)-1]\
    \ == '?' || txt[length(txt)-1] == '!'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit, and false otherwise.\n    Note: \"word\" is a group\
    \ of characters separated by space.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") == false)\n\t\
    @test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\") == false)\n\
    \t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie \") == false)\n\
    \t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"apple pie\") ==\
    \ false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5zzul70_.jl:25\nin expression starting at\
    \ /tmp/tmp5zzul70_.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    txt = txt.split(\" \")\n    \n    for word in txt\n        \n  \
    \      if word[word.length - 1].isalpha()\n            \n            return false\n\
    \        end\n    end\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpukm2uplw.jl:31\nin expression starting at\
    \ /tmp/tmpukm2uplw.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.strip()\n    if txt.ends_with(\"e\")\n        true\n    else\n\
    \        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n   \
    \ Create a function that returns true if the last character\n    of a given string\
    \ is a digit and is not\n    a part of a word, and false otherwise.\n    Note:\
    \ \"word\" is a group of characters separated by space.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\"\
    ) == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp115w5qa4.jl:25\nin expression starting at\
    \ /tmp/tmp115w5qa4.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    if txt.length == 0 \n        false\n    else\n        txt[txt.length-1]\
    \ == ' ' || txt[txt.length-1] == '\\t' || txt[txt.length-1] == '\\n'\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1j5h_lvd.jl:24\nin expression starting at\
    \ /tmp/tmp1j5h_lvd.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    if txt == \"\"\n        false\n    else\n        txt[end-1] == \" \" ||\
    \ txt[end-1] == \"\\n\" || txt[end-1] == \"\\t\" || txt[end-1] == \"\\r\" || txt[end-1]\
    \ == \"\\f\" || txt[end-1] == \"\\v\" || txt[end-1] == \"\\e\" || txt[end-1] ==\
    \ \"\\U\" || txt[end-1] == \"\\L\" || txt[end-1] == \"\\p\" || txt[end-1] == \"\
    \\P\" || txt[end-1] == \"\\p\" || txt[end-1] == \"\\P\" || txt[end-1] == \"\\\
    p\" || txt[end-1] == \"\\P\" || txt[end-1] == \"\\p\" || txt[end-1] == \"\\P\"\
    \ || txt[end-1] == \"\\p\" || txt[end-1] == \"\\P\" || txt[end-1] == \"\\p\" ||\
    \ txt[end-1] == \"\\P\" || txt[end-1] == \"\\p\" || txt[end-1] == \"\\P\" || txt[end-1]\
    \ == \"\\p\" || txt[end-1] == \"\\P\" || txt[end-1] == \"\\p\" || txt[end-1] ==\
    \ \"\\P\" || txt[end-1] == \"\\p\" || txt[end-1] == \"\\P\" || txt[end-1] == \"\
    \\p\" || txt[end-1] == \"\\P\" || txt[end-1] == \"\\p\" || txt[end-1] == \"\\\
    P\" || txt[end-1] == \"\\p\" || txt[end-1] == \"\\P\" || txt[end-1] == \"\\p\"\
    \ || txt[end-1] == \"\\P\" || txt[end-1] == \"\\p\" || txt[end-1] == \"\\P\" ||\
    \ txt[end-1] == \"\\p\" || txt[end-1] == \"\\P\" || txt[end-1] == \"\\p\" || txt[end-1]\
    \ == \"\\P\" || txt[end-1] == \"\\p\" || txt[end-1] == \"\\P\" || txt[end-1] ==\
    \ \"\\p\" || txt[end-1] == \"\\P\" || txt[end-1] == \"\\p\" || txt[end-1] == \"\
    \\P\" || txt[end-1] == \"\\p\" || txt[end-1] == \"\\P\" || txt[end-1] == \"\\\
    p\" || txt[end-1] == \"\\P\" || txt[end-1] == \"\\p\" || txt[end-1] == \"\\P\"\
    \ || txt[end-1] == \"\\p\" || txt[end-1] == \"\\P\" || txt[end-1] == \"\\p\" ||\
    \ txt[end-1] == \"\\P\" || txt[end-1] == \"\\p\" || txt[end-1] == \"\\P\" || txt[end-1]\
    \ == \"\\p\" || txt[end-1] == \"\\P\" || txt[\nusing Test\n\n@testset begin\n\n\
    candidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") == false)\n\
    \t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\") == false)\n\
    \t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie \") == false)\n\
    \t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"apple pie\") ==\
    \ false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzal04x9k.jl:21\nin expression starting at /tmp/tmpzal04x9k.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    if txt.length == 0 \n        false\n    else\n        txt[txt.length-1]\
    \ == \" \" || txt[txt.length-1] == \".\" || txt[txt.length-1] == \",\" || txt[txt.length-1]\
    \ == \";\" || txt[txt.length-1] == \":\" || txt[txt.length-1] == \"-\" || txt[txt.length-1]\
    \ == \"_\" || txt[txt.length-1] == \"/\" || txt[txt.length-1] == \"\\\\\" || txt[txt.length-1]\
    \ == \"?\" || txt[txt.length-1] == \"!\" || txt[txt.length-1] == \"@\" || txt[txt.length-1]\
    \ == \"#\" || txt[txt.length-1] == \"$\" || txt[txt.length-1] == \"%\" || txt[txt.length-1]\
    \ == \"^\" || txt[txt.length-1] == \"&\" || txt[txt.length-1] == \"*\" || txt[txt.length-1]\
    \ == \"(\" || txt[txt.length-1] == \")\" || txt[txt.length-1] == \"=\" || txt[txt.length-1]\
    \ == \"+\" || txt[txt.length-1] == \"-\" || txt[txt.length-1] == \"_\" || txt[txt.length-1]\
    \ == \"|\" || txt[txt.length-1] == \"[\" || txt[txt.length-1] == \"]\" || txt[txt.length-1]\
    \ == \"{\" || txt[txt.length-1] == \"}\" || txt[txt.length-1] == \"~\" || txt[txt.length-1]\
    \ == \"`\" || txt[txt.length-1] == \"'\" || txt[txt.length-1] == \"<\" || txt[txt.length-1]\
    \ == \">\" || txt[txt.length-1] == \"?\" || txt[txt.length-1] == \"!\" || txt[txt.length-1]\
    \ == \"@\" || txt[txt.length-1] == \"#\" || txt[txt.length-1] == \"$\" || txt[txt.length-1]\
    \ == \"%\" || txt[txt.length-1] == \"^\" || txt[txt.length-1] == \"&\" || txt[txt.length-1]\
    \ == \"*\" || txt[txt.length-1] == \"(\" || txt[txt.length-1] == \")\" || txt[txt.length-1]\
    \ == \"=\" || txt[txt.length-1] == \"+\" || txt[txt.length-1] == \"-\" || txt[txt.length-1]\
    \ == \"_\" || txt[txt.length-1] == \"|\" || txt[txt.length-1] == \"[\" || txt[txt.length-1]\
    \ == \"]\" || txt[txt.length-1] == \"{\" || txt[txt.length-1] == \"}\" || txt[txt.length-1]\
    \ == \"~\" || txt[txt.length-1] == \"`\" || txt[txt.length-1] == \"'\" || txt[txt.length-1]\
    \ == \"<\" || txt[txt.length-1] == \">\" || txt[txt.length-1] == \"?\" || txt[txt.length-1]\
    \ == \"!\" || txt[txt.length-1] == \"@\" || txt[txt.length\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\"\
    ) == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpiiecxyum.jl:21\nin expression starting at\
    \ /tmp/tmpiiecxyum.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt[txt.length\
    \ - 1] == \" \" \n        false\n    elseif txt[txt.length - 1] == \"\\n\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\r\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\t\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \" \" \n        false\n    elseif txt[txt.length - 1] == \"-\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"_\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"!\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"#\" \n        false\n    elseif txt[txt.length - 1] == \"$\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"%\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"&\" \n        false\n    elseif txt[txt.length - 1] == \"'\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"(\"\n        false\n    elseif\
    \ txt[txt.length - 1] == \")\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"*\" \n        false\n    elseif txt[txt.length - 1] == \"+\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \",\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"-\" \n        false\n    elseif txt[txt.length - 1] == \"/\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"0\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"1\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"2\" \n        false\n    elseif txt[txt.length - 1] == \"3\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"4\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"5\" \n        false\n    elseif txt[txt.length - 1] == \"6\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"7\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"8\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"9\" \n        false\n    elseif txt[txt.length - 1] == \":\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \";\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"<\" \n        false\n    elseif txt[txt.length - 1] == \"=\"\n   \
    \     false\n    elseif txt[txt.length - 1] == \">\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"?\" \n\nusing Test\n\n@testset begin\n\ncandidate =\
    \ check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") == false)\n\t\
    @test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\") == false)\n\
    \t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie \") == false)\n\
    \t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"apple pie\") ==\
    \ false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpmuq118og.jl:39\nin expression starting at\
    \ /tmp/tmpmuq118og.jl:39\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.strip()\n    if txt == \"\"\n        false\n    else\n     \
    \   txt[length(txt)-1] == ' ' || txt[length(txt)-1] == '.' || txt[length(txt)-1]\
    \ == '!' || txt[length(txt)-1] == '?' || txt[length(txt)-1] == '-' || txt[length(txt)-1]\
    \ == ','\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create\
    \ a function that returns true if the last character\n    of a given string is\
    \ a digit and is not\n    a part of a word, and false otherwise.\n    Note: \"\
    word\" is a group of characters separated by space.\nusing Test\n\n@testset begin\n\
    \ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") ==\
    \ false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\"\
    ) == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie\
    \ \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnqjndjg4.jl:25\nin expression starting at\
    \ /tmp/tmpnqjndjg4.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    if txt == \"\"\n        false\n    else\n        txt[end-1] == \" \" ||\
    \ txt[end-1] == \"\\n\" || txt[end-1] == \"\\t\" || txt[end-1] == \"\\r\" || txt[end-1]\
    \ == \"\\v\" || txt[end-1] == \"\\f\" || txt[end-1] == \"\\a\" || txt[end-1] ==\
    \ \"\\e\" || txt[end-1] == \"\\U\" || txt[end-1] == \"\\L\" || txt[end-1] == \"\
    \\N\" || txt[end-1] == \"\\p\" || txt[end-1] == \"\\P\" || txt[end-1] == \"\\\
    c\" || txt[end-1] == \"\\C\" || txt[end-1] == \"\\e\" || txt[end-1] == \"\\E\"\
    \ || txt[end-1] == \"\\U\" || txt[end-1] == \"\\L\" || txt[end-1] == \"\\N\" ||\
    \ txt[end-1] == \"\\p\" || txt[end-1] == \"\\P\" || txt[end-1] == \"\\c\" || txt[end-1]\
    \ == \"\\C\" || txt[end-1] == \"\\e\" || txt[end-1] == \"\\E\" || txt[end-1] ==\
    \ \"\\U\" || txt[end-1] == \"\\L\" || txt[end-1] == \"\\N\" || txt[end-1] == \"\
    \\p\" || txt[end-1] == \"\\P\" || txt[end-1] == \"\\c\" || txt[end-1] == \"\\\
    C\" || txt[end-1] == \"\\e\" || txt[end-1] == \"\\E\" || txt[end-1] == \"\\U\"\
    \ || txt[end-1] == \"\\L\" || txt[end-1] == \"\\N\" || txt[end-1] == \"\\p\" ||\
    \ txt[end-1] == \"\\P\" || txt[end-1] == \"\\c\" || txt[end-1] == \"\\C\" || txt[end-1]\
    \ == \"\\e\" || txt[end-1] == \"\\E\" || txt[end-1] == \"\\U\" || txt[end-1] ==\
    \ \"\\L\" || txt[end-1] == \"\\N\" || txt[end-1] == \"\\p\" || txt[end-1] == \"\
    \\P\" || txt[end-1] == \"\\c\" || txt[end-1] == \"\\C\" || txt[end-1] == \"\\\
    e\" || txt[end-1] == \"\\E\" || txt[end-1] == \"\\U\" || txt[end-1] == \"\\L\"\
    \ || txt[end-1] == \"\\N\" || txt[end-1] == \"\\p\" || txt[end-1] == \"\\P\" ||\
    \ txt[end-1] == \"\\c\" || txt[end-1] == \"\\C\" || txt[end-1] == \"\\e\" || txt[end-1]\
    \ == \"\\E\" || txt[end-1] == \"\\U\" || txt[\nusing Test\n\n@testset begin\n\n\
    candidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") == false)\n\
    \t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\") == false)\n\
    \t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie \") == false)\n\
    \t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"apple pie\") ==\
    \ false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpt79u6xiz.jl:21\nin expression starting at /tmp/tmpt79u6xiz.jl:21\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    if txt.length == 0 \n        false\n    elseif txt[txt.length-1] == \"\
    \ \" \n        false\n    elseif txt[txt.length-1] in [\"a\", \"e\", \"i\", \"\
    o\", \"u\"] \n        true\n    else\n        false\n    end\nend\n</cell>\n<text>\n\
    Exercise 7: Write a function that returns true if the last character\n    of a\
    \ given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfaz80wfl.jl:28\nin expression starting at\
    \ /tmp/tmpfaz80wfl.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    if txt.length == 0 \n        false\n    elseif txt[txt.length-1]\
    \ == \" \" \n        false\n    elseif txt[txt.length-1] == \"\\n\" \n       \
    \ false\n    elseif txt[txt.length-1] == \"\\t\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\r\" \n        false\n    elseif txt[txt.length-1] == \"\\v\" \n     \
    \   false\n    elseif txt[txt.length-1] == \"\\f\" \n        false\n    elseif\
    \ txt[txt.length-1] == \"\\\"\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\'\" \n        false\n    elseif txt[txt.length-1] == \"\\\\\" \n    \
    \    false\n    elseif txt[txt.length-1] == \"%\" \n        false\n    elseif\
    \ txt[txt.length-1] == \"&\" \n        false\n    elseif txt[txt.length-1] ==\
    \ \"*\" \n        false\n    elseif txt[txt.length-1] == \"+\" \n        false\n\
    \    elseif txt[txt.length-1] == \"-\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"/\" \n        false\n    elseif txt[txt.length-1] == \"0\" \n        false\n\
    \    elseif txt[txt.length-1] == \"1\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"2\" \n        false\n    elseif txt[txt.length-1] == \"3\" \n        false\n\
    \    elseif txt[txt.length-1] == \"4\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"5\" \n        false\n    elseif txt[txt.length-1] == \"6\" \n        false\n\
    \    elseif txt[txt.length-1] == \"7\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"8\" \n        false\n    elseif txt[txt.length-1] == \"9\" \n        false\n\
    \    elseif txt[txt.length-1] == \"a\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"b\" \n        false\n    elseif txt[txt.length-1] == \"c\" \n        false\n\
    \    elseif txt[txt.length-1] == \"d\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"e\" \n        false\n    elseif txt[txt.length-1] == \"f\" \n        false\n\
    \    elseif txt[txt.length-1] == \"g\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"h\" \n        false\n    elseif txt[txt.length-1] == \"i\" \n        false\n\
    \    elseif txt[txt.length-1] == \"j\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"k\" \n        false\n\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpngik89d7.jl:1\nin expression starting at /tmp/tmpngik89d7.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    if txt == \"\"\n        false\n    else\n        txt[length(txt)-1] ==\
    \ ' ' || txt[length(txt)-1] == '.' || txt[length(txt)-1] == '?' || txt[length(txt)-1]\
    \ == '!' || txt[length(txt)-1] == '-' || txt[length(txt)-1] == '_'\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is a digit, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcw5acj7h.jl:24\nin expression starting at\
    \ /tmp/tmpcw5acj7h.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    if txt.length == 0 \n        false\n    elseif txt[txt.length -\
    \ 1] == \" \" \n        false\n    elseif txt[txt.length - 1] == \"\\n\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"\\t\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"\\r\" \n        false\n    elseif txt[txt.length -\
    \ 1] == \"\\v\" \n        false\n    elseif txt[txt.length - 1] == \"\\f\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\e\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\\"\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\'\" \n        false\n    elseif txt[txt.length - 1] == \"\\\\\"\
    \ \n        false\n    elseif txt[txt.length - 1] == \"%\" \n        false\n \
    \   elseif txt[txt.length - 1] == \"&\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"'\" \n        false\n    elseif txt[txt.length - 1] == \"(\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \")\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \",\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \".\" \n        false\n    elseif txt[txt.length - 1] == \"/\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"0\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"1\" \n        false\n    elseif txt[txt.length - 1] == \"2\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"3\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"4\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"5\" \n        false\n    elseif txt[txt.length - 1] == \"6\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"7\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"8\" \n        false\n    elseif txt[txt.length - 1] == \"9\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"a\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"b\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"c\" \n        false\n    elseif txt[txt.length - 1] == \"d\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"e\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"f\" \n        false\n    elseif txt[txt.length - 1] == \"g\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"h\" \n        \nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpec2kvzix.jl:1\nin expression starting at /tmp/tmpec2kvzix.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.strip()\n    if txt.ends_with(\"e\")\n        true\n    else\n\
    \        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n   \
    \ Create a function that returns true if the last character\n    of a given string\
    \ is a digit, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzrr07wmy.jl:25\nin expression starting at\
    \ /tmp/tmpzrr07wmy.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \"\
    )\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    \nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphyv6rdcm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphyv6rdcm.jl:1\n\
    in expression starting at /tmp/tmphyv6rdcm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    if txt.length == 0\n        return false\n    \n    txt = txt.trim()\n\
    \    \n    if txt.length == 1\n        return true\n    \n    if txt.last == \"\
    \ \" || txt.last == \"\\n\"\n        return false\n    \n    if txt.last == \"\
    \ \"\n        return false\n    \n    if txt.last == \"\\n\"\n        return false\n\
    \    \n    if txt.last == \" \" || txt.last == \"\\n\"\n        return false\n\
    \    \n    if txt.last == \" \"\n        return false\n    \n    if txt.last ==\
    \ \"\\n\"\n        return false\n    \n    if txt.last == \" \" || txt.last ==\
    \ \"\\n\"\n        return false\n    \n    if txt.last == \" \"\n        return\
    \ false\n    \n    if txt.last == \"\\n\"\n        return false\n    \n    if\
    \ txt.last == \" \" || txt.last == \"\\n\"\n        return false\n    \n    if\
    \ txt.last == \" \"\n        return false\n    \n    if txt.last == \"\\n\"\n\
    \        return false\n    \n    if txt.last == \" \" || txt.last == \"\\n\"\n\
    \        return false\n    \n    if txt.last == \" \"\n        return false\n\
    \    \n    if txt.last == \"\\n\"\n        return false\n    \n    if txt.last\
    \ == \" \" || txt.last == \"\\n\"\n        return false\n    \n    if txt.last\
    \ == \" \"\n        return false\n    \n    if txt.last == \"\\n\"\n        return\
    \ false\n    \n    if txt.last == \" \" || txt.last == \"\\n\"\n        return\
    \ false\n    \n    if txt.last == \" \"\n        return false\n    \n    if txt.last\
    \ == \"\\n\"\n        return false\n    \n    if txt.last == \" \" || txt.last\
    \ == \"\\n\"\n        return false\n    \n    if txt.last == \" \"\n        return\
    \ false\n    \n    if txt.last == \"\\n\"\n        return false\n    \n    if\
    \ txt.last == \" \" || txt.last == \"\\n\"\n        return false\n    \n    if\
    \ txt.last == \" \"\n        return false\n    \n    if txt.last == \"\\n\"\n\
    \        return false\n    \n    if txt.last == \" \" || txt.last == \"\\n\"\n\
    \        return false\n    \n    if txt.last == \" \"\n        return false\n\
    \    \n    if txt.last == \"\\n\"\n        return false\n    \n    if txt.last\
    \ == \" \" || txt.last == \"\\n\"\n        return false\n    \n    if txt.last\
    \ == \" \"\n        return false\n    \n    if txt.last == \"\\n\"\n        return\
    \ false\n    \n    if txt.last == \" \" || txt.last == \"\\n\"\n        return\
    \ false\n    \n\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz3s36dza.jl:1\nin expression starting at /tmp/tmpz3s36dza.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt.head\
    \ == txt.last\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <text>\nExercise 9: Write a function that returns true if the last character\n\
    \    of a given string is a digit and is not\n    a part of a word, and false\
    \ otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\
    using Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t\
    @test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp1ca78no.jl:27\nin expression starting at\
    \ /tmp/tmpp1ca78no.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    else\n \
    \       txt[txt.length - 1] == \" \" || txt[txt.length - 1] == \"\\n\"\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcdkew3h_.jl:25\nin expression starting at\
    \ /tmp/tmpcdkew3h_.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    if txt.length == 0 \n        false\n    else\n        txt[txt.length-1]\
    \ == ' ' || txt[txt.length-1] == '.' || txt[txt.length-1] == '?' || txt[txt.length-1]\
    \ == '!' || txt[txt.length-1] == '-' || txt[txt.length-1] == '_'\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1wpt1y_4.jl:24\nin expression starting at\
    \ /tmp/tmp1wpt1y_4.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt.length\
    \ == 1\n        txt.head == txt.last\n    else\n        txt.head == txt.last.head\
    \ && txt.last.head != txt.last.last\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmptywf1u6j.jl:27\nin expression starting at\
    \ /tmp/tmptywf1u6j.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0\n        false\n    elseif txt[txt.length\
    \ - 1] in string.ascii_letters\n        true\n    else\n        false\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is an alphabetical character\
    \ and is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is\
    \ a group of characters separated by space.\nusing Test\n\n@testset begin\n\n\
    candidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") == false)\n\
    \t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\") == false)\n\
    \t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie \") == false)\n\
    \t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"apple pie\") ==\
    \ false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpinfj_nld.jl:27\nin expression starting at\
    \ /tmp/tmpinfj_nld.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.strip()\n    if txt.size == 0\n        return false\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    if txt.size\
    \ == 0\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip()\n    if txt.size == 0\n        return false\n    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    if txt.size\
    \ == 0\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip()\n    if txt.size == 0\n        return false\n    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    if txt.size\
    \ == 0\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip()\n    if txt.size == 0\n        return false\n    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    if txt.size\
    \ == 0\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip()\n    if txt.size == 0\n        return false\n    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    if txt.size\
    \ == 0\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip()\n    if txt.size == 0\n        return false\n    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    if txt.size\
    \ == 0\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip()\n    if txt.size == 0\n        return false\n    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    if txt.size\
    \ == 0\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip()\n    if txt.size == 0\n        return false\n    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    if txt.size\
    \ == 0\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip()\n    if txt.size == 0\n        return false\n    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt\nusing Test\n\n@testset begin\n\
    \ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") ==\
    \ false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\"\
    ) == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie\
    \ \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxtggyyln.jl:1\nin expression starting at /tmp/tmpxtggyyln.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    else\n \
    \       if txt[txt.length-1].isalpha()\n            true\n        else\n     \
    \       false\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is an alphabetical character and is not\n    a part of a word,\
    \ and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjonbyukc.jl:29\nin expression starting at\
    \ /tmp/tmpjonbyukc.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt[txt.length\
    \ - 1] == ' ' \n        false\n    elseif txt[txt.length - 1] == '.' \n      \
    \  false\n    elseif txt[txt.length - 1] == '?' \n        false\n    elseif txt[txt.length\
    \ - 1] == '!' \n        false\n    elseif txt[txt.length - 1] == '-' \n      \
    \  false\n    elseif txt[txt.length - 1] == '_' \n        false\n    elseif txt[txt.length\
    \ - 1] == '*' \n        false\n    elseif txt[txt.length - 1] == '+' \n      \
    \  false\n    elseif txt[txt.length - 1] == '%' \n        false\n    elseif txt[txt.length\
    \ - 1] == '&' \n        false\n    elseif txt[txt.length - 1] == '('\n       \
    \ false\n    elseif txt[txt.length - 1] == ')' \n        false\n    elseif txt[txt.length\
    \ - 1] == '[' \n        false\n    elseif txt[txt.length - 1] == ']' \n      \
    \  false\n    elseif txt[txt.length - 1] == '{' \n        false\n    elseif txt[txt.length\
    \ - 1] == '}' \n        false\n    elseif txt[txt.length - 1] == '|' \n      \
    \  false\n    elseif txt[txt.length - 1] == ':' \n        false\n    elseif txt[txt.length\
    \ - 1] == ';' \n        false\n    elseif txt[txt.length - 1] == '<' \n      \
    \  false\n    elseif txt[txt.length - 1] == '>' \n        false\n    elseif txt[txt.length\
    \ - 1] == '/' \n        false\n    elseif txt[txt.length - 1] == '\\\\' \n   \
    \     false\n    elseif txt[txt.length - 1] == '\"' \n        false\n    elseif\
    \ txt[txt.length - 1] == '?' \n        false\n    elseif txt[txt.length - 1] ==\
    \ '!' \n        false\n    elseif txt[txt.length - 1] == '-' \n        false\n\
    \    elseif txt[txt.length - 1] == '_' \n        false\n    elseif txt[txt.length\
    \ - 1] == '*' \n        false\n    elseif txt[txt.length - 1] == '+' \n      \
    \  false\n    elseif txt[txt.length - 1] == '%' \n        false\n    elseif txt[txt.length\
    \ - 1] == '&' \n        false\n    elseif txt[txt.length - 1] == '('\n       \
    \ false\n    elseif txt[txt.length - 1] == ')' \n        false\n    elseif txt[txt.length\
    \ - 1] == '[' \n        false\n    elseif txt[txt.length - 1] == ']' \nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps0nq7k5o.jl:1\nin expression starting at /tmp/tmps0nq7k5o.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    else\n \
    \       txt[txt.length-1] == \" \" || txt[txt.length-1] == \"\\n\" || txt[txt.length-1]\
    \ == \"\\t\" || txt[txt.length-1] == \"\\r\" || txt[txt.length-1] == \"\\f\"\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Create a function\
    \ that returns true if the last character\n    of a given string is a digit, and\
    \ false otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\
    using Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t\
    @test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn9ubjd1t.jl:25\nin expression starting at\
    \ /tmp/tmpn9ubjd1t.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    else\n \
    \       txt[txt.length-1] == \" \" || txt[txt.length-1] == \"\\t\" || txt[txt.length-1]\
    \ == \"\\n\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create\
    \ a function that returns true if the last character\n    of a given string is\
    \ a digit and is not\n    a part of a word, and false otherwise.\n    Note: \"\
    word\" is a group of characters separated by space.\nusing Test\n\n@testset begin\n\
    \ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") ==\
    \ false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\"\
    ) == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie\
    \ \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzi15o7yt.jl:25\nin expression starting at\
    \ /tmp/tmpzi15o7yt.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    else\n \
    \       txt[txt.length-1] == ' ' || txt[txt.length-1] == '.' || txt[txt.length-1]\
    \ == '?' || txt[txt.length-1] == '!' || txt[txt.length-1] == '-' || txt[txt.length-1]\
    \ == '_'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create\
    \ a function that returns true if the last character\n    of a given string is\
    \ a number and is not\n    a part of a word, and false otherwise.\n    Note: \"\
    word\" is a group of characters separated by space.\nusing Test\n\n@testset begin\n\
    \ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") ==\
    \ false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\"\
    ) == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie\
    \ \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2mdqbqj4.jl:25\nin expression starting at\
    \ /tmp/tmp2mdqbqj4.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt.last.isalpha()\
    \ \n        true\n    else\n        false\n    end\nend\n</code>\n<|/ a |>\n<|\
    \ a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsfgtnj1l.jl:27\nin expression starting at\
    \ /tmp/tmpsfgtnj1l.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.strip()\n    if txt.ends_with(' '):\n        txt = txt.strip(\"\
    \ \")\n    return txt[txt.length - 1].isalpha()\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpag3wfdpy.jl:20\nin expression starting at\
    \ /tmp/tmpag3wfdpy.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt.length\
    \ == 1\n        true\n    elseif txt.lastChar.isLetter\n        false\n    else\n\
    \        true\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create\
    \ a function that returns true if the last character\n    of a given string is\
    \ a digit and is not\n    a part of a word, and false otherwise.\n    Note: \"\
    word\" is a group of characters separated by space.\nusing Test\n\n@testset begin\n\
    \ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") ==\
    \ false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\"\
    ) == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie\
    \ \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp110v33kn.jl:29\nin expression starting at\
    \ /tmp/tmp110v33kn.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphymyko65.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphymyko65.jl:1\n\
    in expression starting at /tmp/tmphymyko65.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \"\
    )\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    \nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphyv6rdcm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphyv6rdcm.jl:1\n\
    in expression starting at /tmp/tmphyv6rdcm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.strip()\n    if txt.ends_with(' '):\n        txt = txt.strip(\"\
    \ \")\n    return txt.ends_with(' ') and txt[-1].isalpha()\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of words\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpo0thpztx.jl:20\nin expression starting at\
    \ /tmp/tmpo0thpztx.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    if txt.length == 0 \n        false\n    else\n        txt[txt.length-1]\
    \ == ' ' || txt[txt.length-1] == '\\t' || txt[txt.length-1] == '\\n'\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5l0olimm.jl:24\nin expression starting at\
    \ /tmp/tmp5l0olimm.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    if txt.length == 0 \n        false\n    else\n        if txt[txt.length-1].isalpha()\
    \ \n            true\n        else\n            false\n        end\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprboijj6r.jl:28\nin expression starting at\
    \ /tmp/tmprboijj6r.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    else\n \
    \       txt[txt.length-1] == ' ' || txt[txt.length-1] == '\\t' || txt[txt.length-1]\
    \ == '\\n'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create\
    \ a function that returns true if the last character\n    of a given string is\
    \ a digit and is not\n    a part of a word, and false otherwise.\n    Note: \"\
    word\" is a group of characters separated by space.\nusing Test\n\n@testset begin\n\
    \ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") ==\
    \ false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\"\
    ) == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie\
    \ \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw9j7l0rn.jl:25\nin expression starting at\
    \ /tmp/tmpw9j7l0rn.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    else\n \
    \       txt[txt.length-1].isalpha()\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpxclu24lz.jl:25\nin expression starting at\
    \ /tmp/tmpxclu24lz.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt.length\
    \ == 1\n        txt.head == txt.last\n    else\n        txt.head == txt.last.head\
    \ && txt.last.head != \" \" && txt.last.head != \"-\"\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Create a function that returns true if\
    \ the last character\n    of a given string is a digit and is not\n    a part\
    \ of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjk3f7187.jl:27\nin expression starting at\
    \ /tmp/tmpjk3f7187.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.lower()\n    txt = txt.split(\" \")\n   \
    \ txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \")\n\
    \    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    txt = txt.trim()\n    txt = txt.split(\" \"\
    )\n    txt = txt[txt.length-1]\n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") == false)\n\t\
    @test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\") == false)\n\
    \t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie \") == false)\n\
    \t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"apple pie\") ==\
    \ false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpznz6dlev.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpznz6dlev.jl:1\n\
    in expression starting at /tmp/tmpznz6dlev.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    else\n \
    \       txt.last() in string.ascii_letters\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp21xprpbr.jl:25\nin expression starting at\
    \ /tmp/tmp21xprpbr.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    if txt.length == 0 \n        false\n    elseif txt.head == txt.tail\n\
    \        true\n    else\n        txt.head == txt.tail[txt.head.length-1]\nend\n\
    </cell>\n<text>\nExercise 2: Write a function that checks if a word is palindrome\n\
    Write a function that checks if a word is palindrome. Palindrome is a word that\
    \ reads the same forwards as backwards.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") == false)\n\t\
    @test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\") == false)\n\
    \t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie \") == false)\n\
    \t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"apple pie\") ==\
    \ false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpm7yd6by0.jl:26\nin expression starting at\
    \ /tmp/tmpm7yd6by0.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    if txt.length == 0 \n        false\n    else\n        txt[txt.length-1]\
    \ == \" \" || txt[txt.length-1] == \"\\n\" || txt[txt.length-1] == \"\\t\" ||\
    \ txt[txt.length-1] == \"\\r\" || txt[txt.length-1] == \"\\v\" || txt[txt.length-1]\
    \ == \"\\f\" || txt[txt.length-1] == \"\\e\" || txt[txt.length-1] == \"\\a\" ||\
    \ txt[txt.length-1] == \"\\e\" || txt[txt.length-1] == \"\\a\" || txt[txt.length-1]\
    \ == \"\\e\" || txt[txt.length-1] == \"\\a\" || txt[txt.length-1] == \"\\e\" ||\
    \ txt[txt.length-1] == \"\\a\" || txt[txt.length-1] == \"\\e\" || txt[txt.length-1]\
    \ == \"\\a\" || txt[txt.length-1] == \"\\e\" || txt[txt.length-1] == \"\\a\" ||\
    \ txt[txt.length-1] == \"\\e\" || txt[txt.length-1] == \"\\a\" || txt[txt.length-1]\
    \ == \"\\e\" || txt[txt.length-1] == \"\\a\" || txt[txt.length-1] == \"\\e\" ||\
    \ txt[txt.length-1] == \"\\a\" || txt[txt.length-1] == \"\\e\" || txt[txt.length-1]\
    \ == \"\\a\" || txt[txt.length-1] == \"\\e\" || txt[txt.length-1] == \"\\a\" ||\
    \ txt[txt.length-1] == \"\\e\" || txt[txt.length-1] == \"\\a\" || txt[txt.length-1]\
    \ == \"\\e\" || txt[txt.length-1] == \"\\a\" || txt[txt.length-1] == \"\\e\" ||\
    \ txt[txt.length-1] == \"\\a\" || txt[txt.length-1] == \"\\e\" || txt[txt.length-1]\
    \ == \"\\a\" || txt[txt.length-1] == \"\\e\" || txt[txt.length-1] == \"\\a\" ||\
    \ txt[txt.length-1] == \"\\e\" || txt[txt.length-1] == \"\\a\" || txt[txt.length-1]\
    \ == \"\\e\" || txt[txt.length-1] == \"\\a\" || txt[txt.length-1] == \"\\e\" ||\
    \ txt[txt.length-1] == \"\\a\" || txt[txt.length-1] == \"\\e\" || txt[txt.length-1]\
    \ == \"\\a\" || txt[txt.length-1] == \"\\e\" || txt[txt.length-1] == \"\\a\" ||\
    \ txt[txt.length-1] == \"\\e\" || txt[txt.length-1] == \"\\a\" || txt[txt.length-1]\
    \ == \"\\e\" || txt[txt.length-1] == \"\\a\" || txt[txt.length-1] == \"\\e\" ||\
    \ txt[txt.length-1] == \"\\a\" || txt[txt.length-1] == \"\\e\" || txt[txt.length-1]\
    \ == \"\\a\" || txt\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpubnbira4.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpubnbira4.jl:1\n\
    in expression starting at /tmp/tmpubnbira4.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    txt = txt.trim()\n\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphymyko65.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphymyko65.jl:1\n\
    in expression starting at /tmp/tmphymyko65.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    else\n \
    \       txt[txt.length - 1] == ' ' || txt[txt.length - 1] == '\\t' || txt[txt.length\
    \ - 1] == '\\n' || txt[txt.length - 1] == '\\r' || txt[txt.length - 1] == '\\\
    r'\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis does not provide an\
    \ answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/27815792)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He asked how to check\
    \ if the last character of a string is a letter, and I provided a solution that\
    \ does just that. He also asked how to check if the last character is a space\
    \ or tab or newline or carriage return, and I provided a solution that does just\
    \ that. He also asked how to check if the last character is a space or tab or\
    \ newline or carriage return, and I provided a solution that does just that. He\
    \ also asked how to check if the last character is a space or tab or newline or\
    \ carriage return, and I provided a solution that does just that. He also asked\
    \ how to check if the last character is a space or tab or newline or carriage\
    \ return, and I provided a solution that does just that. He also asked how to\
    \ check if the last character is a space or tab or newline or carriage return,\
    \ and I provided a solution that does just that. He also asked how to check if\
    \ the last character is a space or tab or newline or carriage return, and I provided\
    \ a solution that does just that.\n<|/ c |>\n<| c |>\nThis does not provide an\
    \ answer to the question. To critique or request clarification from an author,\
    \ leave a comment below their post. - [From Review](/review/low-quality-posts/27815792)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He asked how to check\
    \ if the last character of a string is a letter, and I provided a solution that\
    \ does just that. He also asked how to check if the last character is a space\
    \ or tab or newline or carriage return, and I provided a solution that does just\
    \ that. He also asked how to check if the last character is a space or tab or\
    \ newline or carriage return, and I provided a solution that does just that. He\
    \ also asked how to check if the last \nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") == false)\n\t\
    @test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\") == false)\n\
    \t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie \") == false)\n\
    \t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"apple pie\") ==\
    \ false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpy36y4xkd.jl:25\nin expression starting at\
    \ /tmp/tmpy36y4xkd.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    if txt == \"\"\n        return false\n    \n    txt = txt.split(\"\
    \ \")\n    \n    for word in txt\n        if word[word.length - 1] == \" \"\n\
    \            return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6bnwtp6d.jl:30\nin expression starting at\
    \ /tmp/tmp6bnwtp6d.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    if txt.length == 0 \n        false\n    else\n        if txt[txt.length\
    \ - 1] == \" \" \n            false\n        else\n            if txt[txt.length\
    \ - 1].isalpha() \n                false\n            else\n                true\n\
    \        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create\
    \ a function that returns true if the last character\n    of a given string is\
    \ a digit and is not\n    a part of a word, and false otherwise.\n    Note: \"\
    word\" is a group of characters separated by space.\nusing Test\n\n@testset begin\n\
    \ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") ==\
    \ false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\"\
    ) == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie\
    \ \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1hc_74rb.jl:32\nin expression starting at\
    \ /tmp/tmp1hc_74rb.jl:32\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.strip()\n    if txt == \"\"\n        false\n    else\n     \
    \   txt[length(txt)-1] == \" \" || txt[length(txt)-1] == \"\\n\" || txt[length(txt)-1]\
    \ == \"\\t\" || txt[length(txt)-1] == \"\\r\" || txt[length(txt)-1] == \"\\v\"\
    \ || txt[length(txt)-1] == \"\\f\" || txt[length(txt)-1] == \"\\a\" || txt[length(txt)-1]\
    \ == \"\\e\" || txt[length(txt)-1] == \"\\U\" || txt[length(txt)-1] == \"\\N\"\
    \ || txt[length(txt)-1] == \"\\p\" || txt[length(txt)-1] == \"\\P\" || txt[length(txt)-1]\
    \ == \"\\N\" || txt[length(txt)-1] == \"\\o\" || txt[length(txt)-1] == \"\\O\"\
    \ || txt[length(txt)-1] == \"\\c\" || txt[length(txt)-1] == \"\\C\" || txt[length(txt)-1]\
    \ == \"\\e\" || txt[length(txt)-1] == \"\\E\" || txt[length(txt)-1] == \"\\U\"\
    \ || txt[length(txt)-1] == \"\\N\" || txt[length(txt)-1] == \"\\p\" || txt[length(txt)-1]\
    \ == \"\\P\" || txt[length(txt)-1] == \"\\N\" || txt[length(txt)-1] == \"\\o\"\
    \ || txt[length(txt)-1] == \"\\O\" || txt[length(txt)-1] == \"\\c\" || txt[length(txt)-1]\
    \ == \"\\C\" || txt[length(txt)-1] == \"\\e\" || txt[length(txt)-1] == \"\\E\"\
    \ || txt[length(txt)-1] == \"\\U\" || txt[length(txt)-1] == \"\\N\" || txt[length(txt)-1]\
    \ == \"\\p\" || txt[length(txt)-1] == \"\\P\" || txt[length(txt)-1] == \"\\N\"\
    \ || txt[length(txt)-1] == \"\\o\" || txt[length(txt)-1] == \"\\O\" || txt[length(txt)-1]\
    \ == \"\\c\" || txt[length(txt)-1] == \"\\C\" || txt[length(txt)-1] == \"\\e\"\
    \ || txt[length(txt)-1] == \"\\E\" || txt[length(txt)-1] == \"\\U\" || txt[length(txt)-1]\
    \ == \"\\N\" || txt[length(txt)-1] == \"\\p\" || txt[length(txt)-1] == \"\\P\"\
    \ || txt[length(txt)-1] == \"\\N\" || txt[length(txt)-1] == \"\\o\" || txt[length(txt)-1]\
    \ == \"\\O\" || txt[length(txt)-1] == \"\\c\" || txt[length(txt)-1] == \"\\C\n\
    using Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t\
    @test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2ndu62y7.jl:22\nin expression starting at /tmp/tmp2ndu62y7.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    if txt.length == 0 \n        false\n    else\n        txt[txt.length-1]\
    \ == ' ' || txt[txt.length-1] == '.' || txt[txt.length-1] == '?' || txt[txt.length-1]\
    \ == '!' || txt[txt.length-1] == '-' || txt[txt.length-1] == '_'\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is a number and is not\n \
    \   a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp580qn314.jl:24\nin expression starting at\
    \ /tmp/tmp580qn314.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.strip()\n    if txt == \"\"\n        return false\n    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    return txt.isalpha()\nend\n</cell>\n\
    <code language=julia-1.0>\n\"\"\"\n    Create a function that returns true if\
    \ the last character\n    of a given string is a digit and is not\n    a part\
    \ of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqqdg8i7t.jl:25\nin expression starting at\
    \ /tmp/tmpqqdg8i7t.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt[txt.length\
    \ - 1] == \" \" \n        false\n    elseif txt[txt.length - 1] == \"-\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"_\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \".\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \",\" \n        false\n    elseif txt[txt.length - 1] == \"?\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"!\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"'\" \n        false\n    elseif txt[txt.length - 1] == \"\\\"\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"(\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \")\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"-\" \n        false\n    elseif txt[txt.length - 1] == \"/\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \":\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \";\" \n        false\n    elseif txt[txt.length - 1] == \",\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"-\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"_\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"-\" \n        false\n    elseif txt[txt.length - 1] == \"-\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"-\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"-\" \n        false\n    elseif txt[txt.length - 1] == \"-\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"-\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"-\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"-\" \n        false\n    elseif txt[txt.length - 1] == \"-\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"-\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"-\" \n        false\n    elseif txt[txt.length - 1] == \"-\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"-\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"-\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"-\" \n        false\n    elseif txt[txt.length - 1] == \"-\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"-\" \n        false\n    elseif txt[txt\n\
    using Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t\
    @test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpa9a_npa2.jl:1\nin expression starting at /tmp/tmpa9a_npa2.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    if txt.length == 0 \n        false\n    else\n        txt[txt.length-1]\
    \ == \" \" || txt[txt.length-1] == \".\" || txt[txt.length-1] == \",\" || txt[txt.length-1]\
    \ == \";\" || txt[txt.length-1] == \":\" || txt[txt.length-1] == \" \"\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is a digit, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvpnuqeo8.jl:24\nin expression starting at\
    \ /tmp/tmpvpnuqeo8.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.strip()\n    if txt.length == 0 \n        false\n    else\n\
    \        txt[txt.length-1] == \" \" || txt[txt.length-1] == \"\\t\" || txt[txt.length-1]\
    \ == \"\\n\"\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Create\
    \ a function that returns true if the last character\n    of a given string is\
    \ a digit and is not\n    a part of a word, and false otherwise.\n    Note: \"\
    word\" is a group of characters separated by space.\nusing Test\n\n@testset begin\n\
    \ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") ==\
    \ false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\"\
    ) == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie\
    \ \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmps8kungkp.jl:25\nin expression starting at\
    \ /tmp/tmps8kungkp.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt[txt.length\
    \ - 1] == ' ' \n        false\n    else\n        true\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Create a function that returns true if\
    \ the last character\n    of a given string is a digit and is not\n    a part\
    \ of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpp31a0kv0.jl:27\nin expression starting at\
    \ /tmp/tmpp31a0kv0.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \"\
    )\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    \nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphyv6rdcm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphyv6rdcm.jl:1\n\
    in expression starting at /tmp/tmphyv6rdcm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    if txt.length == 0 \n        false\n    else\n        txt[txt.length-1]\
    \ == \" \" || txt[txt.length-1] == \"\\n\" || txt[txt.length-1] == \"\\t\" ||\
    \ txt[txt.length-1] == \"\\r\" || txt[txt.length-1] == \"\\f\" || txt[txt.length-1]\
    \ == \"\\v\" || txt[txt.length-1] == \"\\e\" || txt[txt.length-1] == \"\\U\" ||\
    \ txt[txt.length-1] == \"\\L\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1]\
    \ == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" ||\
    \ txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1]\
    \ == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" ||\
    \ txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1]\
    \ == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" ||\
    \ txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1]\
    \ == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" ||\
    \ txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1]\
    \ == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" ||\
    \ txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1]\
    \ == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" ||\
    \ txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1]\
    \ == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" ||\
    \ txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1]\
    \ == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" ||\
    \ txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1]\
    \ == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" ||\
    \ txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1]\
    \ == \"\\p\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplfsmcdyd.jl:22\nin expression starting at /tmp/tmplfsmcdyd.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \"\
    )\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    \nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphyv6rdcm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphyv6rdcm.jl:1\n\
    in expression starting at /tmp/tmphyv6rdcm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    txt = txt.split(\" \")\n    txt = txt[txt.length-1]\n\
    \    return txt.isalpha()\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n \
    \   Create a function that returns true if the last character\n    of a given\
    \ string is a digit and is not\n    a part of a word, and false otherwise.\n \
    \   Note: \"word\" is a group of characters separated by space.\nusing Test\n\n\
    @testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpjqhc43es.jl:23\nin expression starting at\
    \ /tmp/tmpjqhc43es.jl:23\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.strip()\n    if txt.size == 0\n        return false\n    txt\
    \ = txt.split(\" \")\n    txt = txt[txt.size - 1]\n    txt = txt.strip()\n   \
    \ txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n\
    \    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\"\
    ) == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf6pphg52.jl:1\nin expression starting at /tmp/tmpf6pphg52.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    if txt.length == 0 \n        false\n    else\n        txt[txt.length\
    \ - 1] == \" \" || txt[txt.length - 1] == \"\\n\" || txt[txt.length - 1] == \"\
    \\t\" || txt[txt.length - 1] == \"\\r\" || txt[txt.length - 1] == \"\\v\" || txt[txt.length\
    \ - 1] == \"\\f\" || txt[txt.length - 1] == \"\\a\" || txt[txt.length - 1] ==\
    \ \"\\e\" || txt[txt.length - 1] == \"\\i\" || txt[txt.length - 1] == \"\\o\"\
    \ || txt[txt.length - 1] == \"\\u\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit, and false otherwise.\n    Note: \"word\" is a group\
    \ of characters separated by space.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") == false)\n\t\
    @test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\") == false)\n\
    \t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie \") == false)\n\
    \t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"apple pie\") ==\
    \ false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzmdnw39o.jl:22\nin expression starting at /tmp/tmpzmdnw39o.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    if txt.length == 0 \n        false\n    else if txt[txt.length - 1] ==\
    \ \" \" \n        false\n    else if txt[txt.length - 1] == \".\" \n        false\n\
    \    else if txt[txt.length - 1] == \",\" \n        false\n    else if txt[txt.length\
    \ - 1] == \"?\" \n        false\n    else if txt[txt.length - 1] == \"!\" \n \
    \       false\n    else if txt[txt.length - 1] == \"-\" \n        false\n    else\
    \ if txt[txt.length - 1] == \"_\" \n        false\n    else if txt[txt.length\
    \ - 1] == \"/\" \n        false\n    else if txt[txt.length - 1] == \":\" \n \
    \       false\n    else if txt[txt.length - 1] == \";\" \n        false\n    else\
    \ if txt[txt.length - 1] == \",\" \n        false\n    else if txt[txt.length\
    \ - 1] == \"-\" \n        false\n    else if txt[txt.length - 1] == \"_\" \n \
    \       false\n    else if txt[txt.length - 1] == \"/\" \n        false\n    else\
    \ if txt[txt.length - 1] == \":\" \n        false\n    else if txt[txt.length\
    \ - 1] == \";\" \n        false\n    else if txt[txt.length - 1] == \",\" \n \
    \       false\n    else if txt[txt.length - 1] == \"-\" \n        false\n    else\
    \ if txt[txt.length - 1] == \"_\" \n        false\n    else if txt[txt.length\
    \ - 1] == \"/\" \n        false\n    else if txt[txt.length - 1] == \":\" \n \
    \       false\n    else if txt[txt.length - 1] == \";\" \n        false\n    else\
    \ if txt[txt.length - 1] == \",\" \n        false\n    else if txt[txt.length\
    \ - 1] == \"-\" \n        false\n    else if txt[txt.length - 1] == \"_\" \n \
    \       false\n    else if txt[txt.length - 1] == \"/\" \n        false\n    else\
    \ if txt[txt.length - 1] == \":\" \n        false\n    else if txt[txt.length\
    \ - 1] == \";\" \n        false\n    else if txt[txt.length - 1] == \",\" \n \
    \       false\n    else if txt[txt.length - 1] == \"-\" \n        false\n    else\
    \ if txt[txt.length - 1] == \"_\" \n        false\n    else if txt[txt.length\
    \ - 1] == \"/\" \n        false\n    else if txt[txt.length - 1] == \":\" \n \
    \       false\n    else if txt[txt.length - 1]\nusing Test\n\n@testset begin\n\
    \ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") ==\
    \ false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\"\
    ) == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie\
    \ \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyhkul3ji.jl:20\nin expression starting at\
    \ /tmp/tmpyhkul3ji.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    if txt.length == 0 \n        false\n    elseif txt[txt.length-1]\
    \ == \" \" \n        false\n    elseif txt[txt.length-1] == \"\\n\" \n       \
    \ false\n    elseif txt[txt.length-1] == \"\\t\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\r\" \n        false\n    elseif txt[txt.length-1] == \"\\v\" \n     \
    \   false\n    elseif txt[txt.length-1] == \"\\f\" \n        false\n    elseif\
    \ txt[txt.length-1] == \"\\\"\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\'\" \n        false\n    elseif txt[txt.length-1] == \"\\\\\" \n    \
    \    false\n    elseif txt[txt.length-1] == \"%\" \n        false\n    elseif\
    \ txt[txt.length-1] == \"&\" \n        false\n    elseif txt[txt.length-1] ==\
    \ \"'\" \n        false\n    elseif txt[txt.length-1] == \"(\" \n        false\n\
    \    elseif txt[txt.length-1] == \")\" \n        false\n    elseif txt[txt.length-1]\
    \ == \",\" \n        false\n    elseif txt[txt.length-1] == \".\" \n        false\n\
    \    elseif txt[txt.length-1] == \"/\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"0\" \n        false\n    elseif txt[txt.length-1] == \"1\" \n        false\n\
    \    elseif txt[txt.length-1] == \"2\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"3\" \n        false\n    elseif txt[txt.length-1] == \"4\" \n        false\n\
    \    elseif txt[txt.length-1] == \"5\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"6\" \n        false\n    elseif txt[txt.length-1] == \"7\" \n        false\n\
    \    elseif txt[txt.length-1] == \"8\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"9\" \n        false\n    elseif txt[txt.length-1] == \"a\" \n        false\n\
    \    elseif txt[txt.length-1] == \"b\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"c\" \n        false\n    elseif txt[txt.length-1] == \"d\" \n        false\n\
    \    elseif txt[txt.length-1] == \"e\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"f\" \n        false\n    elseif txt[txt.length-1] == \"g\" \n        false\n\
    \    elseif txt[txt.length-1] == \"h\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"i\" \n        false\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6lhf_irz.jl:1\nin expression starting at /tmp/tmp6lhf_irz.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    if txt.length == 0 \n        false\n    elseif txt[txt.length -\
    \ 1] == \" \" \n        false\n    elseif txt[txt.length - 1] == \"\\n\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"\\t\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"\\r\" \n        false\n    elseif txt[txt.length -\
    \ 1] == \"\\v\" \n        false\n    elseif txt[txt.length - 1] == \"\\f\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\e\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\\"\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\'\" \n        false\n    elseif txt[txt.length - 1] == \"\\\\\"\
    \ \n        false\n    elseif txt[txt.length - 1] == \"%\" \n        false\n \
    \   elseif txt[txt.length - 1] == \"&\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"*\" \n        false\n    elseif txt[txt.length - 1] == \"(\"\n   \
    \     false\n    elseif txt[txt.length - 1] == \")\"\n        false\n    elseif\
    \ txt[txt.length - 1] == \"-\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"_\" \n        false\n    elseif txt[txt.length - 1] == \"+\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"=\"\n        false\n    elseif txt[txt.length\
    \ - 1] == \".\"\n        false\n    elseif txt[txt.length - 1] == \",\"\n    \
    \    false\n    elseif txt[txt.length - 1] == \";\"\n        false\n    elseif\
    \ txt[txt.length - 1] == \":\"\n        false\n    elseif txt[txt.length - 1]\
    \ == \"<\"\n        false\n    elseif txt[txt.length - 1] == \">\"\n        false\n\
    \    elseif txt[txt.length - 1] == \"?\"\n        false\n    elseif txt[txt.length\
    \ - 1] == \"@\"\n        false\n    elseif txt[txt.length - 1] == \"[\"\n    \
    \    false\n    elseif txt[txt.length - 1] == \"]\"\n        false\n    elseif\
    \ txt[txt.length - 1] == \"^\"\n        false\n    elseif txt[txt.length - 1]\
    \ == \"`\"\n        false\n    elseif txt[txt.length - 1] == \"{\"\n        false\n\
    \    elseif txt[txt.length - 1] == \"|\"\n        false\n    elseif txt[txt.length\
    \ - 1] == \"}\"\n        false\n    elseif txt[txt.length - 1] == \"~\"\n    \
    \    false\n    elseif txt[txt.length - 1] == \"\\\"\"\n        false\n    elseif\
    \ txt[txt.length - 1]\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpovvtb1nm.jl:1\nin expression starting at /tmp/tmpovvtb1nm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \"\
    )\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    \nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphyv6rdcm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphyv6rdcm.jl:1\n\
    in expression starting at /tmp/tmphyv6rdcm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt[txt.length-1]\
    \ == \" \" \n        false\n    elseif txt[txt.length-1].isalpha() \n        false\n\
    \    else\n        true\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"\n    Create a function that returns true if the last character\n    of a given\
    \ string is a digit and is not\n    a part of a word, and false otherwise.\n \
    \   Note: \"word\" is a group of characters separated by space.\nusing Test\n\n\
    @testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp84zqbyz9.jl:29\nin expression starting at\
    \ /tmp/tmp84zqbyz9.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \"\
    )\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    \nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphyv6rdcm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphyv6rdcm.jl:1\n\
    in expression starting at /tmp/tmphyv6rdcm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \"\
    )\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    \nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphyv6rdcm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphyv6rdcm.jl:1\n\
    in expression starting at /tmp/tmphyv6rdcm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \"\
    )\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    \nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphyv6rdcm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphyv6rdcm.jl:1\n\
    in expression starting at /tmp/tmphyv6rdcm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    if txt.length == 0 \n        false\n    elseif txt[txt.length - 1] ==\
    \ ' ' \n        false\n    elseif txt[txt.length - 1] == '-' \n        false\n\
    \    elseif txt[txt.length - 1] == '.' \n        false\n    elseif txt[txt.length\
    \ - 1] == '!' \n        false\n    elseif txt[txt.length - 1] == '?' \n      \
    \  false\n    elseif txt[txt.length - 1] == '\\'' \n        false\n    elseif\
    \ txt[txt.length - 1] == '\\\"' \n        false\n    elseif txt[txt.length - 1]\
    \ == '(' \n        false\n    elseif txt[txt.length - 1] == ')' \n        false\n\
    \    elseif txt[txt.length - 1] == '[' \n        false\n    elseif txt[txt.length\
    \ - 1] == ']' \n        false\n    elseif txt[txt.length - 1] == '{' \n      \
    \  false\n    elseif txt[txt.length - 1] == '}' \n        false\n    elseif txt[txt.length\
    \ - 1] == '*' \n        false\n    elseif txt[txt.length - 1] == '+' \n      \
    \  false\n    elseif txt[txt.length - 1] == ',' \n        false\n    elseif txt[txt.length\
    \ - 1] == '-' \n        false\n    elseif txt[txt.length - 1] == '.' \n      \
    \  false\n    elseif txt[txt.length - 1] == '!' \n        false\n    elseif txt[txt.length\
    \ - 1] == '?' \n        false\n    elseif txt[txt.length - 1] == '\\'' \n    \
    \    false\n    elseif txt[txt.length - 1] == '\\\"' \n        false\n    elseif\
    \ txt[txt.length - 1] == '(' \n        false\n    elseif txt[txt.length - 1] ==\
    \ ')' \n        false\n    elseif txt[txt.length - 1] == '[' \n        false\n\
    \    elseif txt[txt.length - 1] == ']' \n        false\n    elseif txt[txt.length\
    \ - 1] == '{' \n        false\n    elseif txt[txt.length - 1] == '}' \n      \
    \  false\n    elseif txt[txt.length - 1] == '*' \n        false\n    elseif txt[txt.length\
    \ - 1] == '+' \n        false\n    elseif txt[txt.length - 1] == ',' \n      \
    \  false\n    elseif txt[txt.length - 1] == '-' \n        false\n    elseif txt[txt.length\
    \ - 1] == '.' \n        false\n    elseif txt[txt.length - 1] == '!' \n      \
    \  false\n    elseif txt[txt.length - 1] == '?' \n        false\n    elseif txt[txt.length\
    \ - 1] == '\\'' \n        false\n    elseif txt[txt\nusing Test\n\n@testset begin\n\
    \ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") ==\
    \ false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\"\
    ) == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie\
    \ \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpvb759agi.jl:1\nin expression starting at /tmp/tmpvb759agi.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    else\n \
    \       txt[txt.length - 1] == \" \" || txt[txt.length - 1] == \"\\n\"\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp7sv2cyvg.jl:25\nin expression starting at\
    \ /tmp/tmp7sv2cyvg.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    if txt.length == 0 \n        false\n    else\n        if txt[txt.length-1]\
    \ == ' ' \n            false\n        else\n            if txt[txt.length-1] >=\
    \ 'a' && txt[txt.length-1] <= 'z' \n                true\n            else\n \
    \               false\n        end\n    end\nend\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nThanks for your answer. I am still trying to understand how this works.\
    \ I understand that `txt[txt.length-1] == ' '` checks if the last character is\
    \ a space. How does this work if the last character is a letter? Also, what does\
    \ `txt[txt.length-1] >= 'a' && txt[txt.length-1] <= 'z'` do?\n<|/ c |>\n<| c |>\n\
    `txt[txt.length-1]` returns the last character of the string. `txt[txt.length-1]\
    \ >= 'a' && txt[txt.length-1] <= 'z'` checks if the last character is between\
    \ `a` and `z`.\n<|/ c |>\n<| c |>\nThanks. I understand that `txt[txt.length-1]`\
    \ returns the last character of the string. `txt[txt.length-1] >= 'a' && txt[txt.length-1]\
    \ <= 'z'` checks if the last character is between `a` and `z`. But how does this\
    \ work if the last character is a letter? Also, what does `txt[txt.length-1] >=\
    \ 'a' && txt[txt.length-1] <= 'z'` do?\n<|/ c |>\n<| c |>\n`txt[txt.length-1]\
    \ >= 'a' && txt[txt.length-1] <= 'z'` checks if the last character is between\
    \ `a` and `z`. `txt[txt.length-1] >= 'a' && txt[txt.length-1] <= 'z'` checks if\
    \ the last character is between `a` and `z`. `txt[txt.length-1] >= 'a' && txt[txt.length-1]\
    \ <= 'z'` checks if the last character is between `a` and `z`.\n<|/ c |>\n<| c\
    \ |>\nThanks. I understand that `txt[txt.length-1]` returns the last character\
    \ of the string. `txt[txt.length-1] >= 'a' && txt[txt.length-1] <= 'z'` checks\
    \ if the last character is between `a` and `z`. But how does this work if the\
    \ last character is a letter? Also, what does `txt[txt.length-1] >= 'a' && txt[txt.length-1]\
    \ <= 'z'` do?\n<|/ c |>\n<| a tags=julia,string |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\"\
    ) == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpspgq76ri.jl:31\nin expression starting at\
    \ /tmp/tmpspgq76ri.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \"\
    )\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    \nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphyv6rdcm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphyv6rdcm.jl:1\n\
    in expression starting at /tmp/tmphyv6rdcm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \"\
    )\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    \nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphyv6rdcm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphyv6rdcm.jl:1\n\
    in expression starting at /tmp/tmphyv6rdcm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.strip()\n    if txt == \"\"\n        false\n    else\n     \
    \   txt[length(txt)-1] == ' ' || txt[length(txt)-1] == '.' || txt[length(txt)-1]\
    \ == '?' || txt[length(txt)-1] == '!'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit, and false otherwise.\n    Note: \"word\" is a group\
    \ of characters separated by space.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") == false)\n\t\
    @test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\") == false)\n\
    \t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie \") == false)\n\
    \t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"apple pie\") ==\
    \ false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5zzul70_.jl:25\nin expression starting at\
    \ /tmp/tmp5zzul70_.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.strip()\n    if txt.size == 0\n        return false\n    else\n\
    \        txt = txt.split(\" \")\n        txt = txt.last()\n        txt = txt.strip()\n\
    \        if txt == \"\"\n            return false\n        else\n            if\
    \ txt.chars().all{|x| x == txt.chars().last}\n                return true\n  \
    \          else\n                return false\n            end\n        end\n\
    \    end\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nI like your answer, but\
    \ I think it would be better to use a regex to check for letters instead of splitting\
    \ and checking the last character. Something like `if txt =~ /^[a-zA-Z]+$/` would\
    \ be more efficient.\n<|/ c |>\n<| c |>\nYes, I agree with you. I just wanted\
    \ to show a way to solve the problem with minimal changes to the original code.\
    \ Of course, your suggestion is much more efficient.\n<|/ c |>\n<| a |>\nThe function\
    \ below will return a boolean indicating whether the last character is a letter:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfy_bjv02.jl:28\nin expression starting at\
    \ /tmp/tmpfy_bjv02.jl:28\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    if txt.size == 0\n        return false\n    \n    txt = txt.split(\"\
    \ \")\n    \n    for word in txt\n        if word[word.length - 1] == \" \"\n\
    \            return false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplon8mxi6.jl:30\nin expression starting at\
    \ /tmp/tmplon8mxi6.jl:30\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    else\n \
    \       txt.last() in string.ascii_letters\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpazoa3h9b.jl:25\nin expression starting at\
    \ /tmp/tmpazoa3h9b.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    if txt.length == 0 \n        false\n    elseif txt[txt.length -\
    \ 1] == \" \" \n        false\n    else\n        true\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Create a function that returns true if\
    \ the last character\n    of a given string is a digit, and false otherwise.\n\
    \    Note: \"digit\" is a group of characters separated by space.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpn394_zsu.jl:27\nin expression starting at\
    \ /tmp/tmpn394_zsu.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.strip()\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\" \")\n\
    \    txt = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n    txt\
    \ = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip(\"\
    \ \")\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\" \"\
    )\n    txt = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n   \
    \ txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n   \
    \ txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt =\
    \ txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n    txt = txt.lower()\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip(\" \")\n\
    \    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.strip(\" \")\n    txt = txt.lower()\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip(\" \")\n    txt\nusing Test\n\n@testset begin\n\
    \ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") ==\
    \ false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\"\
    ) == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie\
    \ \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk8xkbnb_.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpk8xkbnb_.jl:1\n\
    in expression starting at /tmp/tmpk8xkbnb_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt[txt.length\
    \ - 1] == \" \" \n        false\n    elseif txt[txt.length - 1] == \"\\n\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\t\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\r\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \" \" \n        false\n    elseif txt[txt.length - 1] == \"!\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"#\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"$\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"%\" \n        false\n    elseif txt[txt.length - 1] == \"&\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"'\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"(\"\n        false\n    elseif txt[txt.length - 1] == \")\" \n   \
    \     false\n    elseif txt[txt.length - 1] == \"*\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"+\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \",\" \n        false\n    elseif txt[txt.length - 1] == \"-\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"/\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"0\" \n        false\n    elseif txt[txt.length - 1] == \"1\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"2\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"3\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"4\" \n        false\n    elseif txt[txt.length - 1] == \"5\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"6\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"7\" \n        false\n    elseif txt[txt.length - 1] == \"8\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"9\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \":\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \";\" \n        false\n    elseif txt[txt.length - 1] == \"<\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"=\"\n        false\n    elseif txt[txt.length\
    \ - 1] == \">\" \n        false\n    elseif txt[txt.length - 1] == \"?\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"@\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"[\" \nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplg8iwszu.jl:35\nin expression starting at\
    \ /tmp/tmplg8iwszu.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt.lastchar.isalpha()\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2u3yyvjr.jl:27\nin expression starting at\
    \ /tmp/tmp2u3yyvjr.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.chars\n    txt\
    \ = txt.filter(x->!is_alphabetic(x))\n    txt = txt.filter(x->!is_word(x))\n \
    \   txt = txt.filter(x->!is_space(x))\n    txt = txt.filter(x->!is_digit(x))\n\
    \    txt = txt.filter(x->!is_symbol(x))\n    txt = txt.filter(x->!is_punctuation(x))\n\
    \    txt = txt.filter(x->!is_space(x))\n    txt = txt.filter(x->!is_digit(x))\n\
    \    txt = txt.filter(x->!is_symbol(x))\n    txt = txt.filter(x->!is_punctuation(x))\n\
    \    txt = txt.filter(x->!is_space(x))\n    txt = txt.filter(x->!is_digit(x))\n\
    \    txt = txt.filter(x->!is_symbol(x))\n    txt = txt.filter(x->!is_punctuation(x))\n\
    \    txt = txt.filter(x->!is_space(x))\n    txt = txt.filter(x->!is_digit(x))\n\
    \    txt = txt.filter(x->!is_symbol(x))\n    txt = txt.filter(x->!is_punctuation(x))\n\
    \    txt = txt.filter(x->!is_space(x))\n    txt = txt.filter(x->!is_digit(x))\n\
    \    txt = txt.filter(x->!is_symbol(x))\n    txt = txt.filter(x->!is_punctuation(x))\n\
    \    txt = txt.filter(x->!is_space(x))\n    txt = txt.filter(x->!is_digit(x))\n\
    \    txt = txt.filter(x->!is_symbol(x))\n    txt = txt.filter(x->!is_punctuation(x))\n\
    \    txt = txt.filter(x->!is_space(x))\n    txt = txt.filter(x->!is_digit(x))\n\
    \    txt = txt.filter(x->!is_symbol(x))\n    txt = txt.filter(x->!is_punctuation(x))\n\
    \    txt = txt.filter(x->!is_space(x))\n    txt = txt.filter(x->!is_digit(x))\n\
    \    txt = txt.filter(x->!is_symbol(x))\n    txt = txt.filter(x->!is_punctuation(x))\n\
    \    txt = txt.filter(x->!is_space(x))\n    txt = txt.filter(x->!is_digit(x))\n\
    \    txt = txt.filter(x->!is_symbol(x))\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") == false)\n\t\
    @test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\") == false)\n\
    \t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie \") == false)\n\
    \t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"apple pie\") ==\
    \ false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8ma809eq.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp8ma809eq.jl:1\n\
    in expression starting at /tmp/tmp8ma809eq.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    if txt.length == 0 \n        false\n    elseif txt[txt.length - 1] ==\
    \ ' ' \n        false\n    elseif txt[txt.length - 1] == '.' \n        false\n\
    \    elseif txt[txt.length - 1] == '?' \n        false\n    elseif txt[txt.length\
    \ - 1] == '!' \n        false\n    elseif txt[txt.length - 1] == '-' \n      \
    \  false\n    elseif txt[txt.length - 1] == '_' \n        false\n    elseif txt[txt.length\
    \ - 1] == '/' \n        false\n    elseif txt[txt.length - 1] == '\\\\' \n   \
    \     false\n    elseif txt[txt.length - 1] == '$' \n        false\n    elseif\
    \ txt[txt.length - 1] == '%' \n        false\n    elseif txt[txt.length - 1] ==\
    \ '&' \n        false\n    elseif txt[txt.length - 1] == '*' \n        false\n\
    \    elseif txt[txt.length - 1] == '('\n        false\n    elseif txt[txt.length\
    \ - 1] == ')'\n        false\n    elseif txt[txt.length - 1] == '+' \n       \
    \ false\n    elseif txt[txt.length - 1] == '-' \n        false\n    elseif txt[txt.length\
    \ - 1] == '.' \n        false\n    elseif txt[txt.length - 1] == '?' \n      \
    \  false\n    elseif txt[txt.length - 1] == '!' \n        false\n    elseif txt[txt.length\
    \ - 1] == '-' \n        false\n    elseif txt[txt.length - 1] == '_' \n      \
    \  false\n    elseif txt[txt.length - 1] == '/' \n        false\n    elseif txt[txt.length\
    \ - 1] == '\\\\' \n        false\n    elseif txt[txt.length - 1] == '$' \n   \
    \     false\n    elseif txt[txt.length - 1] == '%' \n        false\n    elseif\
    \ txt[txt.length - 1] == '&' \n        false\n    elseif txt[txt.length - 1] ==\
    \ '*' \n        false\n    elseif txt[txt.length - 1] == '('\n        false\n\
    \    elseif txt[txt.length - 1] == ')'\n        false\n    elseif txt[txt.length\
    \ - 1] == '+' \n        false\n    elseif txt[txt.length - 1] == '-' \n      \
    \  false\n    elseif txt[txt.length - 1] == '.' \n        false\n    elseif txt[txt.length\
    \ - 1] == '?' \n        false\n    elseif txt[txt.length - 1] == '!' \n      \
    \  false\n    elseif txt[txt.length - 1] == '-' \n        false\n    elseif txt[txt.length\
    \ - 1] == '_' \n        false\n    elseif txt\nusing Test\n\n@testset begin\n\n\
    candidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") == false)\n\
    \t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\") == false)\n\
    \t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie \") == false)\n\
    \t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"apple pie\") ==\
    \ false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp90jiwpzq.jl:1\nin expression starting at /tmp/tmp90jiwpzq.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    if txt.length == 0 \n        false\n    elseif txt[txt.length-1]\
    \ == \" \" \n        false\n    elseif txt[txt.length-1] == \"-\" \n        false\n\
    \    elseif txt[txt.length-1] == \"_\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"/\" \n        false\n    elseif txt[txt.length-1] == \"\\\\\" \n      \
    \  false\n    elseif txt[txt.length-1] == \"'\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"!\" \n        false\n    elseif txt[txt.length-1] == \"?\" \n        false\n\
    \    elseif txt[txt.length-1] == \"(\" \n        false\n    elseif txt[txt.length-1]\
    \ == \")\" \n        false\n    elseif txt[txt.length-1] == \",\" \n        false\n\
    \    elseif txt[txt.length-1] == \"-\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"/\" \n        false\n    elseif txt[txt.length-1] == \"\\\\\" \n      \
    \  false\n    elseif txt[txt.length-1] == \"'\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"!\" \n        false\n    elseif txt[txt.length-1] == \"?\" \n        false\n\
    \    elseif txt[txt.length-1] == \"(\" \n        false\n    elseif txt[txt.length-1]\
    \ == \")\" \n        false\n    elseif txt[txt.length-1] == \",\" \n        false\n\
    \    elseif txt[txt.length-1] == \"-\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"/\" \n        false\n    elseif txt[txt.length-1] == \"\\\\\" \n      \
    \  false\n    elseif txt[txt.length-1] == \"'\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"!\" \n        false\n    elseif txt[txt.length-1] == \"?\" \n        false\n\
    \    elseif txt[txt.length-1] == \"(\" \n        false\n    elseif txt[txt.length-1]\
    \ == \")\" \n        false\n    elseif txt[txt.length-1] == \",\" \n        false\n\
    \    elseif txt[txt.length-1] == \"-\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"/\" \n        false\n    elseif txt[txt.length-1] == \"\\\\\" \n      \
    \  false\n    elseif txt[txt.length-1] == \"'\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"!\" \n        false\n    elseif txt[txt.length-1] == \"?\" \n        false\n\
    \    elseif txt[txt.length-1] == \"(\" \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") == false)\n\t\
    @test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\") == false)\n\
    \t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie \") == false)\n\
    \t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"apple pie\") ==\
    \ false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpewwgacnn.jl:1\nin expression starting at /tmp/tmpewwgacnn.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    if txt.length == 0 \n        false\n    elseif txt.head == txt.last\n\
    \        true\n    else\n        false\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmprd5pira6.jl:26\nin expression starting at\
    \ /tmp/tmprd5pira6.jl:26\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.strip()\n    if txt.ends_with(\"e\")\n        true\n    else\n\
    \        false\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Create a\
    \ function that returns true if the last character\n    of a given string is a\
    \ digit and is not\n    a part of a word, and false otherwise.\n    Note: \"word\"\
    \ is a group of characters separated by space.\nusing Test\n\n@testset begin\n\
    \ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") ==\
    \ false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\"\
    ) == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie\
    \ \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpyid8en6u.jl:24\nin expression starting at\
    \ /tmp/tmpyid8en6u.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    if txt.length == 0 \n        false\n    else\n        txt[txt.length-1]\
    \ == ' ' || txt[txt.length-1] == '.' || txt[txt.length-1] == ',' || txt[txt.length-1]\
    \ == '?' || txt[txt.length-1] == '!' || txt[txt.length-1] == ';' || txt[txt.length-1]\
    \ == ':' || txt[txt.length-1] == '-' || txt[txt.length-1] == '_' || txt[txt.length-1]\
    \ == '/' || txt[txt.length-1] == '\\\\' || txt[txt.length-1] == '$' || txt[txt.length-1]\
    \ == '%' || txt[txt.length-1] == '&' || txt[txt.length-1] == '*' || txt[txt.length-1]\
    \ == '(' || txt[txt.length-1] == ')' || txt[txt.length-1] == '[' || txt[txt.length-1]\
    \ == ']' || txt[txt.length-1] == '{' || txt[txt.length-1] == '}' || txt[txt.length-1]\
    \ == '|' || txt[txt.length-1] == '<' || txt[txt.length-1] == '>' || txt[txt.length-1]\
    \ == '?' || txt[txt.length-1] == '!' || txt[txt.length-1] == '@' || txt[txt.length-1]\
    \ == '#' || txt[txt.length-1] == '$' || txt[txt.length-1] == '%' || txt[txt.length-1]\
    \ == '^' || txt[txt.length-1] == '&' || txt[txt.length-1] == '*' || txt[txt.length-1]\
    \ == '+' || txt[txt.length-1] == '-' || txt[txt.length-1] == '=' || txt[txt.length-1]\
    \ == '|' || txt[txt.length-1] == '~' || txt[txt.length-1] == '`' || txt[txt.length-1]\
    \ == '{' || txt[txt.length-1] == '}' || txt[txt.length-1] == '|' || txt[txt.length-1]\
    \ == '<' || txt[txt.length-1] == '>' || txt[txt.length-1] == '?' || txt[txt.length-1]\
    \ == '!' || txt[txt.length-1] == '@' || txt[txt.length-1] == '#' || txt[txt.length-1]\
    \ == '$' || txt[txt.length-1] == '%' || txt[txt.length-1] == '^' || txt[txt.length-1]\
    \ == '&' || txt[txt.length-1] == '*' || txt[txt.length-1] == '+' || txt[txt.length-1]\
    \ == '-' || txt[txt.length-1] == '=' || txt[txt.length-1] == '|' || txt[txt.length-1]\
    \ == '~' || txt[txt.length-1] == '`' || txt[txt.length-1] == '{' || txt[txt.length-1]\
    \ == '}' || txt[txt.length-1] == '|' || txt[txt.length\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\"\
    ) == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr5i4cozl.jl:1\nin expression starting at /tmp/tmpr5i4cozl.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    else\n \
    \       txt[txt.length-1] == ' ' || txt[txt.length-1] == '\\t' || txt[txt.length-1]\
    \ == '\\n' || txt[txt.length-1] == '\\r' || txt[txt.length-1] == '\\r'\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpg85_s7y3.jl:25\nin expression starting at\
    \ /tmp/tmpg85_s7y3.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    if txt.length == 0 \n        false\n    elseif txt[txt.length-1]\
    \ == \" \" \n        false\n    elseif txt[txt.length-1] == \"\\n\" \n       \
    \ false\n    elseif txt[txt.length-1] == \"\\t\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\r\" \n        false\n    elseif txt[txt.length-1] == \" \" \n       \
    \ false\n    elseif txt[txt.length-1] == \"!\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"#\" \n        false\n    elseif txt[txt.length-1] == \"$\" \n        false\n\
    \    elseif txt[txt.length-1] == \"%\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"&\" \n        false\n    elseif txt[txt.length-1] == \"'\" \n        false\n\
    \    elseif txt[txt.length-1] == \"(\" \n        false\n    elseif txt[txt.length-1]\
    \ == \")\" \n        false\n    elseif txt[txt.length-1] == \"*\" \n        false\n\
    \    elseif txt[txt.length-1] == \"+\" \n        false\n    elseif txt[txt.length-1]\
    \ == \",\" \n        false\n    elseif txt[txt.length-1] == \"-\" \n        false\n\
    \    elseif txt[txt.length-1] == \"/\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"0\" \n        false\n    elseif txt[txt.length-1] == \"1\" \n        false\n\
    \    elseif txt[txt.length-1] == \"2\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"3\" \n        false\n    elseif txt[txt.length-1] == \"4\" \n        false\n\
    \    elseif txt[txt.length-1] == \"5\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"6\" \n        false\n    elseif txt[txt.length-1] == \"7\" \n        false\n\
    \    elseif txt[txt.length-1] == \"8\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"9\" \n        false\n    elseif txt[txt.length-1] == \":\" \n        false\n\
    \    elseif txt[txt.length-1] == \";\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"<\" \n        false\n    elseif txt[txt.length-1] == \"=\"\n        false\n\
    \    elseif txt[txt.length-1] == \">\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"?\" \n        false\n    elseif txt[txt.length-1] == \"@\" \n        false\n\
    \    elseif txt[txt.length-1] == \"[\" \n        false\n    else\nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgjfsx84k.jl:35\nin expression starting at\
    \ /tmp/tmpgjfsx84k.jl:35\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt[txt.length\
    \ - 1].isalpha()\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\n\"\"\"\n    Create a function that returns true if\
    \ the last character\n    of a given string is an alphabetical character and is\
    \ not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a group\
    \ of characters separated by space.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") == false)\n\t\
    @test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\") == false)\n\
    \t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie \") == false)\n\
    \t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"apple pie\") ==\
    \ false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpi1gko99u.jl:27\nin expression starting at\
    \ /tmp/tmpi1gko99u.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.strip()\n    if txt == \"\"\n        return false\n    txt =\
    \ txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    if txt == \"\
    \"\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n   \
    \ txt = txt.strip()\n    if txt == \"\"\n        return false\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip()\n    if txt == \"\"\n       \
    \ return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n\
    \    if txt == \"\"\n        return false\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip()\n    if txt == \"\"\n        return false\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    if\
    \ txt == \"\"\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip()\n    if txt == \"\"\n        return false\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip()\n    if txt == \"\"\n       \
    \ return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n\
    \    if txt == \"\"\n        return false\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip()\n    if txt == \"\"\n        return false\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    if\
    \ txt == \"\"\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip()\n    if txt == \"\"\n        return false\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.strip()\n    if txt == \"\"\n       \
    \ return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n\
    \    if txt == \"\"\n        return false\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.strip()\n    if txt == \"\"\n        return false\n\
    \    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.strip()\n    if\
    \ txt == \"\"\n        return false\n    txt = txt.split(\" \")\n    txt = txt[end]\n\
    \    txt = txt.strip()\n    if txt == \"\"\n        return false\n    txt = txt\n\
    using Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t\
    @test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpardq9j6c.jl:1\nin expression starting at /tmp/tmpardq9j6c.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.strip()\n    if txt == \"\"\n        false\n    else\n     \
    \   txt[end-1] \u2208 letters || txt[end-1] \u2208 spaces\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Create a function that returns true if\
    \ the last character\n    of a given string is a digit and is not\n    a part\
    \ of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmph7xmanud.jl:25\nin expression starting at\
    \ /tmp/tmph7xmanud.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    if txt.length == 0 \n        false\n    elseif txt[txt.length-1] == \"\
    \ \" \n        false\n    elseif txt[txt.length-1] == \"\\n\" \n        false\n\
    \    elseif txt[txt.length-1] == \"\\r\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\t\" \n        false\n    elseif txt[txt.length-1] == \" \" \n       \
    \ false\n    elseif txt[txt.length-1] == \"\\n\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\r\" \n        false\n    elseif txt[txt.length-1] == \"\\t\" \n     \
    \   false\n    elseif txt[txt.length-1] == \" \" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\n\" \n        false\n    elseif txt[txt.length-1] == \"\\r\" \n     \
    \   false\n    elseif txt[txt.length-1] == \"\\t\" \n        false\n    elseif\
    \ txt[txt.length-1] == \" \" \n        false\n    elseif txt[txt.length-1] ==\
    \ \"\\n\" \n        false\n    elseif txt[txt.length-1] == \"\\r\" \n        false\n\
    \    elseif txt[txt.length-1] == \"\\t\" \n        false\n    elseif txt[txt.length-1]\
    \ == \" \" \n        false\n    elseif txt[txt.length-1] == \"\\n\" \n       \
    \ false\n    elseif txt[txt.length-1] == \"\\r\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\t\" \n        false\n    elseif txt[txt.length-1] == \" \" \n       \
    \ false\n    elseif txt[txt.length-1] == \"\\n\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\r\" \n        false\n    elseif txt[txt.length-1] == \"\\t\" \n     \
    \   false\n    elseif txt[txt.length-1] == \" \" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\n\" \n        false\n    elseif txt[txt.length-1] == \"\\r\" \n     \
    \   false\n    elseif txt[txt.length-1] == \"\\t\" \n        false\n    elseif\
    \ txt[txt.length-1] == \" \" \n        false\n    elseif txt[txt.length-1] ==\
    \ \"\\n\" \n        false\n    elseif txt[txt.length-1] == \"\\r\" \n        false\n\
    \    elseif txt[txt.length-1] == \"\\t\" \n        false\n    elseif txt[txt.length-1]\
    \ == \" \" \n        false\n    elseif txt[txt.length-1] == \"\\n\" \n       \
    \ false\n    elseif txt[txt.length-1] == \"\\r\" \n        false\n    elseif txt[txt.length-1]\
    \ == \"\\t\" \n        false\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5mcz0iq5.jl:1\nin expression starting at /tmp/tmp5mcz0iq5.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt[txt.length\
    \ - 1].isalpha() \n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Create a function that returns true if\
    \ the last character\n    of a given string is a digit and is not\n    a part\
    \ of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6aanq5_5.jl:27\nin expression starting at\
    \ /tmp/tmp6aanq5_5.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    if txt == \"\"\n        return false\n    \n    txt = txt.split(\"\
    \ \")\n    \n    txt = txt[end]\n    \n    if txt == \"a\"\n        return true\n\
    \    \n    return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n   \
    \ Create a function that returns true if the last character\n    of a given string\
    \ is a digit and is not\n    a part of a word, and false otherwise.\n    Note:\
    \ \"word\" is a group of characters separated by space.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\"\
    ) == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1pr4tu2e.jl:31\nin expression starting at\
    \ /tmp/tmp1pr4tu2e.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    txt = txt.split(\" \")\n    \n    if txt[txt.length - 1] == txt[txt.length\
    \ - 1].upcase()\n        \n        return true\n    else\n        return false\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2y17ocw5.jl:27\nin expression starting at\
    \ /tmp/tmp2y17ocw5.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    if txt.size == 0\n        return false\n    \n    if txt.size ==\
    \ 1\n        return true\n    \n    if txt.size == 2\n        return txt[end-1]\
    \ == \" \"\n    \n    if txt.size > 2\n        return txt[end-1] == \" \" && txt[end-2]\
    \ == \" \"\n    \n    return false\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"\n    Create a function that returns true if the last character\n    of a\
    \ given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpzbt3wpva.jl:33\nin expression starting at\
    \ /tmp/tmpzbt3wpva.jl:33\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    txt = txt.strip()\n    if txt.size == 0\n        return false\n\
    \    \n    txt = txt.split(\" \")\n    txt = txt[txt.size - 1]\n    \n    txt\
    \ = txt.strip()\n    \n    if txt.size == 0\n        return false\n    \n    txt\
    \ = txt.split(\" \")\n    \n    txt = txt[txt.size - 1]\n    \n    txt = txt.strip()\n\
    \    \n    if txt.size == 0\n        return false\n    \n    txt = txt.split(\"\
    \ \")\n    \n    txt = txt[txt.size - 1]\n    \n    txt = txt.strip()\n    \n\
    \    if txt.size == 0\n        return false\n    \n    txt = txt.split(\" \")\n\
    \    \n    txt = txt[txt.size - 1]\n    \n    txt = txt.strip()\n    \n    if\
    \ txt.size == 0\n        return false\n    \n    txt = txt.split(\" \")\n    \n\
    \    txt = txt[txt.size - 1]\n    \n    txt = txt.strip()\n    \n    if txt.size\
    \ == 0\n        return false\n    \n    txt = txt.split(\" \")\n    \n    txt\
    \ = txt[txt.size - 1]\n    \n    txt = txt.strip()\n    \n    if txt.size == 0\n\
    \        return false\n    \n    txt = txt.split(\" \")\n    \n    txt = txt[txt.size\
    \ - 1]\n    \n    txt = txt.strip()\n    \n    if txt.size == 0\n        return\
    \ false\n    \n    txt = txt.split(\" \")\n    \n    txt = txt[txt.size - 1]\n\
    \    \n    txt = txt.strip()\n    \n    if txt.size == 0\n        return false\n\
    \    \n    txt = txt.split(\" \")\n    \n    txt = txt[txt.size - 1]\n    \n \
    \   txt = txt.strip()\n    \n    if txt.size == 0\n        return false\n    \n\
    \    txt = txt.split(\" \")\n    \n    txt = txt[txt.size - 1]\n    \n    txt\
    \ = txt.strip()\n    \n    if txt.size == 0\n        return false\n    \n    txt\
    \ = txt.split(\" \")\n    \n    txt = txt[txt.size - 1]\n    \n    txt = txt.strip()\n\
    \    \n    if txt.size == 0\n        return false\n    \n    txt = txt.split(\"\
    \ \")\n    \n    txt = txt[txt.size - 1]\n    \n    txt = txt.strip()\n    \n\
    \    if txt.size == 0\n        return false\n    \n    txt\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\"\
    ) == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqsybh4a1.jl:1\nin expression starting at /tmp/tmpqsybh4a1.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    if txt == \"\"\n        false\n    else\n        txt[length(txt)-1] ==\
    \ ' ' || txt[length(txt)-1] == '.' || txt[length(txt)-1] == '?' || txt[length(txt)-1]\
    \ == '!' || txt[length(txt)-1] == '-' || txt[length(txt)-1] == '_' || txt[length(txt)-1]\
    \ == '&' || txt[length(txt)-1] == '(' || txt[length(txt)-1] == ')' || txt[length(txt)-1]\
    \ == '[' || txt[length(txt)-1] == ']' || txt[length(txt)-1] == '{' || txt[length(txt)-1]\
    \ == '}' || txt[length(txt)-1] == '|' || txt[length(txt)-1] == '\\\\' || txt[length(txt)-1]\
    \ == '^' || txt[length(txt)-1] == '~' || txt[length(txt)-1] == '*' || txt[length(txt)-1]\
    \ == '?' || txt[length(txt)-1] == '!' || txt[length(txt)-1] == '-' || txt[length(txt)-1]\
    \ == '_' || txt[length(txt)-1] == '&' || txt[length(txt)-1] == '(' || txt[length(txt)-1]\
    \ == ')' || txt[length(txt)-1] == '[' || txt[length(txt)-1] == ']' || txt[length(txt)-1]\
    \ == '{' || txt[length(txt)-1] == '}' || txt[length(txt)-1] == '|' || txt[length(txt)-1]\
    \ == '\\\\' || txt[length(txt)-1] == '^' || txt[length(txt)-1] == '~' || txt[length(txt)-1]\
    \ == '*' || txt[length(txt)-1] == '?' || txt[length(txt)-1] == '!' || txt[length(txt)-1]\
    \ == '-' || txt[length(txt)-1] == '_' || txt[length(txt)-1] == '&' || txt[length(txt)-1]\
    \ == '(' || txt[length(txt)-1] == ')' || txt[length(txt)-1] == '[' || txt[length(txt)-1]\
    \ == ']' || txt[length(txt)-1] == '{' || txt[length(txt)-1] == '}' || txt[length(txt)-1]\
    \ == '|' || txt[length(txt)-1] == '\\\\' || txt[length(txt)-1] == '^' || txt[length(txt)-1]\
    \ == '~' || txt[length(txt)-1] == '*' || txt[length(txt)-1] == '?' || txt[length(txt)-1]\
    \ == '!' || txt[length(txt)-1] == '-' || txt[length(txt)-1] == '_' || txt[length(txt)-1]\
    \ == '&' || txt[length(txt)-1]\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmptu4la48a.jl:18\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptu4la48a.jl:1\n\
    in expression starting at /tmp/tmptu4la48a.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \"\
    )\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    \nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphyv6rdcm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphyv6rdcm.jl:1\n\
    in expression starting at /tmp/tmphyv6rdcm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    else\n \
    \       txt[txt.length-1] == \" \" || txt[txt.length-1] == \"\\n\" || txt[txt.length-1]\
    \ == \"\\t\" || txt[txt.length-1] == \"\\r\" || txt[txt.length-1] == \"\\f\" ||\
    \ txt[txt.length-1] == \"\\v\" || txt[txt.length-1] == \"\\e\" || txt[txt.length-1]\
    \ == \"\\U\" || txt[txt.length-1] == \"\\L\" || txt[txt.length-1] == \"\\p\" ||\
    \ txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1]\
    \ == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" ||\
    \ txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1]\
    \ == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" ||\
    \ txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1]\
    \ == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" ||\
    \ txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1]\
    \ == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" ||\
    \ txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1]\
    \ == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" ||\
    \ txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1]\
    \ == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" ||\
    \ txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1]\
    \ == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" ||\
    \ txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1]\
    \ == \"\\p\" || txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" ||\
    \ txt[txt.length-1] == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1]\
    \ == \"\\P\" || txt[txt.length-1] == \"\\p\" || txt[txt.length-1] == \"\\P\" ||\
    \ txt[\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid escape sequence\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvpk9iwsd.jl:22\nin expression starting at /tmp/tmpvpk9iwsd.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \"\
    )\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    \nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphyv6rdcm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphyv6rdcm.jl:1\n\
    in expression starting at /tmp/tmphyv6rdcm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    txt = txt.split(\" \")\n    \n    for i in txt\n        if i[-1].isalpha()\n\
    \            return false\n    return true\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\ndef last_char_is_a_letter(txt):\n    txt = txt.split(\" \")\n  \
    \  for i in txt:\n        if i[-1].isalpha():\n            return False\n    return\
    \ True\n</code>\n<|/ a tags=python,string,python-3.x |>\n<| a tags=python,string,python-3.x\
    \ |>\n<code>\ndef last_char_is_a_letter(txt):\n    txt = txt.split(\" \")\n  \
    \  for i in txt:\n        if i[-1].isalpha():\n            return False\n    return\
    \ True\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef last_char_is_a_letter(txt):\n\
    \    txt = txt.split(\" \")\n    for i in txt:\n        if i[-1].isalpha():\n\
    \            return False\n    return True\n</code>\n<|/ a tags=python,string,python-3.x\
    \ |>\n<| c |>\nPlease don't post only code as answer, but also provide an explanation\
    \ what your code does and how it solves the problem of the question. Answers with\
    \ an explanation are usually more helpful and of better quality, and are more\
    \ likely to attract upvotes.\n<|/ c |>\n<| a tags=python,string,python-3.x |>\n\
    <code>\ndef last_char_is_a_letter(txt):\n    txt = txt.split(\" \")\n    for i\
    \ in txt:\n        if i[-1].isalpha():\n            return False\n    return True\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=python,string,python-3.x |>\n<code>\ndef\
    \ last_char_is_a_letter(txt):\n    txt = txt.split(\" \")\n    for i in txt:\n\
    \        if i[-1].isalpha():\n            return False\n    return True\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=python,string,python-3.x |>\n<code>\ndef last_char_is_a_letter(txt):\n\
    \    txt = txt.split(\" \")\n    for i in txt:\n        if i[-1].isalpha():\n\
    \            return False\n    return True\n</code>\n<|/ a dscore=0 |>\n<| a tags=python,string,python-3.x\
    \ |>\n<code>\ndef last_char_is_a_letter(txt):\n    txt = txt.split(\" \")\n  \
    \  for i in txt:\n        if i[-1].isalpha():\n            return False\n    return\
    \ True\n</code>\n<|/ a dscore=0 |>\n<| a tags=python,string,python-3.x |>\n<code>\n\
    def last_char_is_a_letter(txt\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6wqzbqjk.jl:25\nin expression starting at\
    \ /tmp/tmp6wqzbqjk.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    if txt.length == 0 \n        false\n    else\n        txt[txt.length-1]\
    \ == \" \" || txt[txt.length-1] == \"\\n\" || txt[txt.length-1] == \"\\t\" ||\
    \ txt[txt.length-1] == \"\\r\" || txt[txt.length-1] == \"\\v\" || txt[txt.length-1]\
    \ == \"\\f\" || txt[txt.length-1] == \"\\e\" || txt[txt.length-1] == \"\\\"\"\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function\
    \ that returns true if the last character\n    of a given string is a digit and\
    \ is not\n    a part of a word, and false otherwise.\n    Note: \"word\" is a\
    \ group of characters separated by space.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") == false)\n\t\
    @test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\") == false)\n\
    \t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie \") == false)\n\
    \t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"apple pie\") ==\
    \ false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpquetci3l.jl:24\nin expression starting at\
    \ /tmp/tmpquetci3l.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    if txt.length == 0 \n        false\n    else\n        txt[txt.length-1]\
    \ == ' ' || txt[txt.length-1] == '.' || txt[txt.length-1] == '?' || txt[txt.length-1]\
    \ == '!' || txt[txt.length-1] == '-' || txt[txt.length-1] == '_' || txt[txt.length-1]\
    \ == '/' || txt[txt.length-1] == '\\\\' || txt[txt.length-1] == '(' || txt[txt.length-1]\
    \ == ')' || txt[txt.length-1] == '[' || txt[txt.length-1] == ']' || txt[txt.length-1]\
    \ == '{' || txt[txt.length-1] == '}' || txt[txt.length-1] == '|' || txt[txt.length-1]\
    \ == '\"' || txt[txt.length-1] == '\\'' || txt[txt.length-1] == '<' || txt[txt.length-1]\
    \ == '>' || txt[txt.length-1] == '~' || txt[txt.length-1] == '@' || txt[txt.length-1]\
    \ == '#' || txt[txt.length-1] == '$' || txt[txt.length-1] == '%' || txt[txt.length-1]\
    \ == '^' || txt[txt.length-1] == '&' || txt[txt.length-1] == '*' || txt[txt.length-1]\
    \ == '(' || txt[txt.length-1] == ')' || txt[txt.length-1] == '+' || txt[txt.length-1]\
    \ == '-' || txt[txt.length-1] == '=' || txt[txt.length-1] == '|' || txt[txt.length-1]\
    \ == '\"' || txt[txt.length-1] == '\\'' || txt[txt.length-1] == '<' || txt[txt.length-1]\
    \ == '>' || txt[txt.length-1] == '~' || txt[txt.length-1] == '@' || txt[txt.length-1]\
    \ == '#' || txt[txt.length-1] == '$' || txt[txt.length-1] == '%' || txt[txt.length-1]\
    \ == '^' || txt[txt.length-1] == '&' || txt[txt.length-1] == '*' || txt[txt.length-1]\
    \ == '(' || txt[txt.length-1] == ')' || txt[txt.length-1] == '+' || txt[txt.length-1]\
    \ == '-' || txt[txt.length-1] == '=' || txt[txt.length-1] == '|' || txt[txt.length-1]\
    \ == '\"' || txt[txt.length-1] == '\\'' || txt[txt.length-1] == '<' || txt[txt.length-1]\
    \ == '>' || txt[txt.length-1] == '~' || txt[txt.length-1] == '@' || txt[txt.length-1]\
    \ == '#' || txt[txt.length-1] == '$' || txt[txt.length-1] == '%' || txt[txt.length-1]\
    \ == '^' || txt[txt.length-1] == '&' || txt[txt.length\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\"\
    ) == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpuwmt5vjx.jl:1\nin expression starting at /tmp/tmpuwmt5vjx.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    if txt.length == 0 \n        false\n    else\n        txt[txt.length-1]\
    \ == ' ' || txt[txt.length-1] == '.' || txt[txt.length-1] == '?' || txt[txt.length-1]\
    \ == '!'\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create\
    \ a function that returns true if the last character\n    of a given string is\
    \ a digit, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5eh9z7r5.jl:25\nin expression starting at\
    \ /tmp/tmp5eh9z7r5.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.strip()\n    if txt.empty?\n        false\n    else\n      \
    \  txt.chars().last() in \"abcdefghijklmnopqrstuvwxyz\"\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Create a function that returns true if\
    \ the last character\n    of a given string is a digit and is not\n    a part\
    \ of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space required before \"?\" operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf3j65z4v.jl:19\nin expression starting at\
    \ /tmp/tmpf3j65z4v.jl:19\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt.length\
    \ == 1\n        true\n    elseif txt[txt.length-1] == \" \"\n        false\n \
    \   else\n        true\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsafujczl.jl:29\nin expression starting at\
    \ /tmp/tmpsafujczl.jl:29\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    else\n \
    \       txt[txt.length-1] == \" \" || txt[txt.length-1] == \"\\n\" || txt[txt.length-1]\
    \ == \"\\t\" || txt[txt.length-1] == \"\\r\" || txt[txt.length-1] == \"\\v\" ||\
    \ txt[txt.length-1] == \"\\f\" || txt[txt.length-1] == \"\\e\"\n    end\nend\n\
    </cell>\n<text>\nExercise 5\nWrite a function that takes a string and returns\
    \ the number of words in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") == false)\n\t\
    @test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\") == false)\n\
    \t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie \") == false)\n\
    \t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\") == false)\n\
    \t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"apple pie\") ==\
    \ false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9_brls15.jl:25\nin expression starting at\
    \ /tmp/tmp9_brls15.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.strip()\n    if txt.ends_with(' '):\n        txt = txt.strip(\"\
    \ \")\n    return txt.ends_with(' ') or txt.ends_with('.')\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\"\
    ) == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpfxjlw7w6.jl:20\nin expression starting at\
    \ /tmp/tmpfxjlw7w6.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.strip()\n    if txt == \"\"\n        false\n    else\n     \
    \   txt.last() in string.ascii_letters\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw1mbhmkx.jl:25\nin expression starting at\
    \ /tmp/tmpw1mbhmkx.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt[txt.length\
    \ - 1] == \" \" \n        false\n    elseif txt[txt.length - 1] == \"\\n\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\r\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\t\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \" \" \n        false\n    elseif txt[txt.length - 1] == \"\\n\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\r\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\t\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\n\" \n        false\n    elseif txt[txt.length - 1] == \"\\r\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\t\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\n\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\r\" \n        false\n    elseif txt[txt.length - 1] == \"\\t\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\n\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\r\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\t\" \n        false\n    elseif txt[txt.length - 1] == \"\\n\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\r\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\t\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\n\" \n        false\n    elseif txt[txt.length - 1] == \"\\r\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\t\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\n\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\r\" \n        false\n    elseif txt[txt.length - 1] == \"\\t\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\n\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\r\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\t\" \n        false\n    elseif txt[txt.length - 1] == \"\\n\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\r\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\t\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\n\" \n        false\n    elseif txt[txt.length - 1] == \"\\r\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\t\" \n        false\n  \
    \  elseif txt[txt\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp2eecgrxu.jl:1\nin expression starting at /tmp/tmp2eecgrxu.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    if txt.length == 0 \n        false\n    elseif txt[txt.length-1] == '\
    \ ' \n        false\n    elseif txt[txt.length-1] == '-' \n        false\n   \
    \ elseif txt[txt.length-1] == '.' \n        false\n    elseif txt[txt.length-1]\
    \ == '!' \n        false\n    elseif txt[txt.length-1] == '?' \n        false\n\
    \    elseif txt[txt.length-1] == '\\'' \n        false\n    elseif txt[txt.length-1]\
    \ == '\"' \n        false\n    elseif txt[txt.length-1] == '(' \n        false\n\
    \    elseif txt[txt.length-1] == ')' \n        false\n    elseif txt[txt.length-1]\
    \ == '*' \n        false\n    elseif txt[txt.length-1] == '+' \n        false\n\
    \    elseif txt[txt.length-1] == '-' \n        false\n    elseif txt[txt.length-1]\
    \ == '/' \n        false\n    elseif txt[txt.length-1] == ':' \n        false\n\
    \    elseif txt[txt.length-1] == ';' \n        false\n    elseif txt[txt.length-1]\
    \ == '<' \n        false\n    elseif txt[txt.length-1] == '=' \n        false\n\
    \    elseif txt[txt.length-1] == '>' \n        false\n    elseif txt[txt.length-1]\
    \ == '?' \n        false\n    elseif txt[txt.length-1] == '@' \n        false\n\
    \    elseif txt[txt.length-1] == '[' \n        false\n    elseif txt[txt.length-1]\
    \ == ']' \n        false\n    elseif txt[txt.length-1] == '^' \n        false\n\
    \    elseif txt[txt.length-1] == '_' \n        false\n    elseif txt[txt.length-1]\
    \ == '`' \n        false\n    elseif txt[txt.length-1] == '{' \n        false\n\
    \    elseif txt[txt.length-1] == '|' \n        false\n    elseif txt[txt.length-1]\
    \ == '}' \n        false\n    elseif txt[txt.length-1] == '~' \n        false\n\
    \    elseif txt[txt.length-1] == '%' \n        false\n    elseif txt[txt.length-1]\
    \ == '&' \n        false\n    elseif txt[txt.length-1] == '*' \n        false\n\
    \    elseif txt[txt.length-1] == '+' \n        false\n    elseif txt[txt.length-1]\
    \ == '-' \n        false\n    elseif txt[txt.length-1] == '.' \n        false\n\
    \    elseif txt[txt.length-1] == '/' \n        false\n    elseif txt\nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw3v6t6i9.jl:1\nin expression starting at /tmp/tmpw3v6t6i9.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \"\
    )\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    \nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphyv6rdcm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphyv6rdcm.jl:1\n\
    in expression starting at /tmp/tmphyv6rdcm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.strip()\n    if txt.size == 0\n        false\n    else\n   \
    \     txt[txt.size - 1] == \" \" || txt[txt.size - 1] == \".\" || txt[txt.size\
    \ - 1] == \",\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  Create a function that returns true if the last character\n    of a given string\
    \ is a digit and is not\n    a part of a word, and false otherwise.\n    Note:\
    \ \"word\" is a group of characters separated by space.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\"\
    ) == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgig0og5v.jl:25\nin expression starting at\
    \ /tmp/tmpgig0og5v.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    if txt.length == 0 \n        false\n    else\n        txt[txt.length-1]\
    \ == ' ' || txt[txt.length-1] == '.' || txt[txt.length-1] == '!' || txt[txt.length-1]\
    \ == '?' || txt[txt.length-1] == '-' || txt[txt.length-1] == '_' || txt[txt.length-1]\
    \ == '*' || txt[txt.length-1] == '+' || txt[txt.length-1] == '(' || txt[txt.length-1]\
    \ == ')' || txt[txt.length-1] == '[' || txt[txt.length-1] == ']' || txt[txt.length-1]\
    \ == '{' || txt[txt.length-1] == '}' || txt[txt.length-1] == '\\\\' || txt[txt.length-1]\
    \ == '^' || txt[txt.length-1] == '$' || txt[txt.length-1] == '|' || txt[txt.length-1]\
    \ == '~' || txt[txt.length-1] == '`' || txt[txt.length-1] == '\"' || txt[txt.length-1]\
    \ == '<' || txt[txt.length-1] == '>' || txt[txt.length-1] == '?' || txt[txt.length-1]\
    \ == '!' || txt[txt.length-1] == '.' || txt[txt.length-1] == '?' || txt[txt.length-1]\
    \ == '-' || txt[txt.length-1] == '_' || txt[txt.length-1] == '*' || txt[txt.length-1]\
    \ == '+' || txt[txt.length-1] == '(' || txt[txt.length-1] == ')' || txt[txt.length-1]\
    \ == '[' || txt[txt.length-1] == ']' || txt[txt.length-1] == '{' || txt[txt.length-1]\
    \ == '}' || txt[txt.length-1] == '\\\\' || txt[txt.length-1] == '^' || txt[txt.length-1]\
    \ == '$' || txt[txt.length-1] == '|' || txt[txt.length-1] == '~' || txt[txt.length-1]\
    \ == '`' || txt[txt.length-1] == '\"' || txt[txt.length-1] == '<' || txt[txt.length-1]\
    \ == '>' || txt[txt.length-1] == '?' || txt[txt.length-1] == '!' || txt[txt.length-1]\
    \ == '.' || txt[txt.length-1] == '?' || txt[txt.length-1] == '-' || txt[txt.length-1]\
    \ == '_' || txt[txt.length-1] == '*' || txt[txt.length-1] == '+' || txt[txt.length-1]\
    \ == '(' || txt[txt.length-1] == ')' || txt[txt.length-1] == '[' || txt[txt.length-1]\
    \ == ']' || txt[txt.length-1] == '{' || txt[txt.length-1] == '}' || txt[txt.length-1]\
    \ == '\\\\' || txt[txt.length-1] == '^' || txt[\nusing Test\n\n@testset begin\n\
    \ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") ==\
    \ false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\"\
    ) == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie\
    \ \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp1afbjy0n.jl:1\nin expression starting at /tmp/tmp1afbjy0n.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt[txt.length\
    \ - 1].isalpha()\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Create a function that returns true if\
    \ the last character\n    of a given string is a digit and is not\n    a part\
    \ of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqkomrq4y.jl:27\nin expression starting at\
    \ /tmp/tmpqkomrq4y.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    if txt.length == 0 \n        false\n    else if txt[txt.length-1] == '\
    \ ' \n        false\n    else if txt[txt.length-1] == '-' \n        false\n  \
    \  else if txt[txt.length-1] == '.' \n        false\n    else if txt[txt.length-1]\
    \ == '?' \n        false\n    else if txt[txt.length-1] == '!' \n        false\n\
    \    else if txt[txt.length-1] == '-' \n        false\n    else if txt[txt.length-1]\
    \ == '_' \n        false\n    else if txt[txt.length-1] == '*' \n        false\n\
    \    else if txt[txt.length-1] == '&' \n        false\n    else if txt[txt.length-1]\
    \ == '%' \n        false\n    else if txt[txt.length-1] == '$' \n        false\n\
    \    else if txt[txt.length-1] == '#' \n        false\n    else if txt[txt.length-1]\
    \ == '^' \n        false\n    else if txt[txt.length-1] == '&' \n        false\n\
    \    else if txt[txt.length-1] == '*' \n        false\n    else if txt[txt.length-1]\
    \ == '-' \n        false\n    else if txt[txt.length-1] == '+' \n        false\n\
    \    else if txt[txt.length-1] == '=' \n        false\n    else if txt[txt.length-1]\
    \ == '<' \n        false\n    else if txt[txt.length-1] == '>' \n        false\n\
    \    else if txt[txt.length-1] == '?' \n        false\n    else if txt[txt.length-1]\
    \ == '!' \n        false\n    else if txt[txt.length-1] == '/' \n        false\n\
    \    else if txt[txt.length-1] == '\\\\' \n        false\n    else if txt[txt.length-1]\
    \ == '|' \n        false\n    else if txt[txt.length-1] == '{' \n        false\n\
    \    else if txt[txt.length-1] == '}' \n        false\n    else if txt[txt.length-1]\
    \ == '[' \n        false\n    else if txt[txt.length-1] == ']' \n        false\n\
    \    else if txt[txt.length-1] == '\"' \n        false\n    else if txt[txt.length-1]\
    \ == '\\'' \n        false\n    else if txt[txt.length-1] == ';' \n        false\n\
    \    else if txt[txt.length-1] == '.' \n        false\n    else if txt[txt.length-1]\
    \ == '\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpud8twpn7.jl:20\nin expression starting at\
    \ /tmp/tmpud8twpn7.jl:20\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \"\
    )\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    \nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphyv6rdcm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphyv6rdcm.jl:1\n\
    in expression starting at /tmp/tmphyv6rdcm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.strip()\n    if txt == \"\"\n        false\n    else\n     \
    \   txt.ends_with?(\" \") && txt.ends_with?(\"a\")\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Create a function that returns true if the\
    \ last character\n    of a given string is a digit, and false otherwise.\n   \
    \ Note: \"word\" is a group of characters separated by space.\nusing Test\n\n\
    @testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: space required before \"?\" operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp9v031_fm.jl:22\nin expression starting at\
    \ /tmp/tmp9v031_fm.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    if txt.length == 0 \n        false\n    elseif txt[txt.length - 1] ==\
    \ \" \" \n        false\n    elseif txt[txt.length - 1] == \"\\n\" \n        false\n\
    \    elseif txt[txt.length - 1] == \"\\r\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\t\" \n        false\n    elseif txt[txt.length - 1] == \" \" \n\
    \        false\n    elseif txt[txt.length - 1] == \".\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \",\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"!\" \n        false\n    elseif txt[txt.length - 1] == \"?\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \":\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \";\" \n        false\n    elseif txt[txt.length - 1] == \"-\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"_\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"/\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"[\" \n        false\n    elseif txt[txt.length - 1] == \"]\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"{\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"}\" \n        false\n    elseif txt[txt.length - 1] == \"|\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"\\\\\" \n        false\n   \
    \ elseif txt[txt.length - 1] == \"^\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"~\" \n        false\n    elseif txt[txt.length - 1] == \"*\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"&\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"<\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \">\" \n        false\n    elseif txt[txt.length - 1] == \"=\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"+\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"-\" \n        false\n    elseif txt[txt.length - 1] == \"|\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"{\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"}\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"[\" \n        false\n    elseif txt[txt.length - 1] == \"]\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"/\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"_\" \n        false\n    elseif txt\nusing Test\n\n@testset begin\n\
    \ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") ==\
    \ false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\"\
    ) == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie\
    \ \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqcz4h9ec.jl:1\nin expression starting at /tmp/tmpqcz4h9ec.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    if txt.length == 0 \n        false\n    else\n        if txt[txt.length-1]\
    \ == \" \" \n            false\n        else\n            if txt[txt.length-1]\
    \ in [\"a\", \"e\", \"i\", \"o\", \"u\"]\n                true\n            else\n\
    \                false\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpezel_pn6.jl:31\nin expression starting at\
    \ /tmp/tmpezel_pn6.jl:31\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    if txt.length == 0 \n        false\n    else\n        txt[txt.length-1]\
    \ == \" \" || txt[txt.length-1] == \"\\n\" || txt[txt.length-1] == \"\\t\" ||\
    \ txt[txt.length-1] == \"\\r\" || txt[txt.length-1] == \"\\f\" || txt[txt.length-1]\
    \ == \"\\v\" || txt[txt.length-1] == \"\\u00A0\" || txt[txt.length-1] == \"\\\
    u00AD\" || txt[txt.length-1] == \"\\u00AD\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp50vkp13_.jl:24\nin expression starting at\
    \ /tmp/tmp50vkp13_.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt[txt.length\
    \ - 1] == \" \" \n        false\n    elseif txt[txt.length - 1] == \"\\n\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\t\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\r\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\v\" \n        false\n    elseif txt[txt.length - 1] == \"\\f\" \n\
    \        false\n    elseif txt[txt.length - 1] == \"\\e\" \n        false\n  \
    \  elseif txt[txt.length - 1] == \"\\\"\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"\\'\" \n        false\n    elseif txt[txt.length - 1] == \"\\\\\"\
    \ \n        false\n    elseif txt[txt.length - 1] == \"%\" \n        false\n \
    \   elseif txt[txt.length - 1] == \"&\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"*\" \n        false\n    elseif txt[txt.length - 1] == \"(\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \")\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \",\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \".\" \n        false\n    elseif txt[txt.length - 1] == \"/\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"0\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"1\" \n        false\n    elseif txt[txt.length - 1] == \"2\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"3\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"4\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"5\" \n        false\n    elseif txt[txt.length - 1] == \"6\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"7\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"8\" \n        false\n    elseif txt[txt.length - 1] == \"9\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"-\" \n        false\n    elseif\
    \ txt[txt.length - 1] == \"+\" \n        false\n    elseif txt[txt.length - 1]\
    \ == \"=\" \n        false\n    elseif txt[txt.length - 1] == \"?\" \n       \
    \ false\n    elseif txt[txt.length - 1] == \"!\" \n        false\n    elseif txt[txt.length\
    \ - 1] == \"@\" \n        false\n    elseif txt[txt.length - 1] == \"{\" \n  \
    \      false\n    elseif txt[txt.length - 1] == \"\nusing Test\n\n@testset begin\n\
    \ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") ==\
    \ false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\"\
    ) == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie\
    \ \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpssmdraj_.jl:97\nin expression starting at\
    \ /tmp/tmpssmdraj_.jl:97\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    if txt.length == 0 \n        false\n    elseif txt[txt.length-1]\
    \ == \" \" \n        false\n    else\n        true\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\n    Create a function that returns true if the\
    \ last character\n    of a given string is a digit and is not\n    a part of a\
    \ word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp8_8pyx90.jl:27\nin expression starting at\
    \ /tmp/tmp8_8pyx90.jl:27\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.strip()\n    if txt == \"\"\n        return false\n    else\n\
    \        return txt[txt.length - 1].isalpha()\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpakogvwj5.jl:24\nin expression starting at\
    \ /tmp/tmpakogvwj5.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    if txt.length == 0 \n        false\n    else\n        txt[txt.length-1]\
    \ == ' ' || txt[txt.length-1] == '.' || txt[txt.length-1] == '?' || txt[txt.length-1]\
    \ == '!' || txt[txt.length-1] == '-' || txt[txt.length-1] == '_' || txt[txt.length-1]\
    \ == '/' || txt[txt.length-1] == '\\\\' || txt[txt.length-1] == '^' || txt[txt.length-1]\
    \ == '&' || txt[txt.length-1] == '*' || txt[txt.length-1] == '(' || txt[txt.length-1]\
    \ == ')' || txt[txt.length-1] == '[' || txt[txt.length-1] == ']' || txt[txt.length-1]\
    \ == '{' || txt[txt.length-1] == '}' || txt[txt.length-1] == '|' || txt[txt.length-1]\
    \ == '~' || txt[txt.length-1] == '`' || txt[txt.length-1] == '<' || txt[txt.length-1]\
    \ == '>' || txt[txt.length-1] == '?' || txt[txt.length-1] == '!' || txt[txt.length-1]\
    \ == '-' || txt[txt.length-1] == '_' || txt[txt.length-1] == '/' || txt[txt.length-1]\
    \ == '\\\\' || txt[txt.length-1] == '^' || txt[txt.length-1] == '&' || txt[txt.length-1]\
    \ == '*' || txt[txt.length-1] == '(' || txt[txt.length-1] == ')' || txt[txt.length-1]\
    \ == '[' || txt[txt.length-1] == ']' || txt[txt.length-1] == '{' || txt[txt.length-1]\
    \ == '}' || txt[txt.length-1] == '|' || txt[txt.length-1] == '~' || txt[txt.length-1]\
    \ == '`' || txt[txt.length-1] == '<' || txt[txt.length-1] == '>' || txt[txt.length-1]\
    \ == '?' || txt[txt.length-1] == '!' || txt[txt.length-1] == '-' || txt[txt.length-1]\
    \ == '_' || txt[txt.length-1] == '/' || txt[txt.length-1] == '\\\\' || txt[txt.length-1]\
    \ == '^' || txt[txt.length-1] == '&' || txt[txt.length-1] == '*' || txt[txt.length-1]\
    \ == '(' || txt[txt.length-1] == ')' || txt[txt.length-1] == '[' || txt[txt.length-1]\
    \ == ']' || txt[txt.length-1] == '{' || txt[txt.length-1] == '}' || txt[txt.length-1]\
    \ == '|' || txt[txt.length-1] == '~' || txt[txt.length-1] == '`' || txt[txt.length-1]\
    \ == '<' || txt[txt.length-1] == '>' || txt[txt.length\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\"\
    ) == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpkwaa9t_w.jl:1\nin expression starting at /tmp/tmpkwaa9t_w.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    else\n \
    \       txt[txt.length-1] == \" \" || txt[txt.length-1] == \".\" || txt[txt.length-1]\
    \ == \",\" || txt[txt.length-1] == \"?\" || txt[txt.length-1] == \"!\" || txt[txt.length-1]\
    \ == \"-\" || txt[txt.length-1] == \"_\" || txt[txt.length-1] == \"/\" || txt[txt.length-1]\
    \ == \"\\\\\" || txt[txt.length-1] == \"[\" || txt[txt.length-1] == \"]\" || txt[txt.length-1]\
    \ == \"{\" || txt[txt.length-1] == \"}\" || txt[txt.length-1] == \"|\" || txt[txt.length-1]\
    \ == \"~\" || txt[txt.length-1] == \"@\" || txt[txt.length-1] == \"#\" || txt[txt.length-1]\
    \ == \"$\" || txt[txt.length-1] == \"%\" || txt[txt.length-1] == \"^\" || txt[txt.length-1]\
    \ == \"&\" || txt[txt.length-1] == \"*\" || txt[txt.length-1] == \"(\"\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is a digit, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: invalid interpolation syntax: \"$\"\"\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmposk6v8xw.jl:22\nin expression starting at\
    \ /tmp/tmposk6v8xw.jl:22\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    else\n \
    \       txt[txt.length-1] == txt[txt.length-1].to_lowercase()\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is a number and is not\n \
    \   a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp6ajfjf83.jl:25\nin expression starting at\
    \ /tmp/tmp6ajfjf83.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0\n        false\n    else\n  \
    \      txt[txt.length - 1] == ' ' || txt[txt.length - 1] == '.' || txt[txt.length\
    \ - 1] == ',' || txt[txt.length - 1] == '?' || txt[txt.length - 1] == '!' || txt[txt.length\
    \ - 1] == '-' || txt[txt.length - 1] == '_' || txt[txt.length - 1] == '/' || txt[txt.length\
    \ - 1] == '\\\\' || txt[txt.length - 1] == '(' || txt[txt.length - 1] == ')' ||\
    \ txt[txt.length - 1] == '[' || txt[txt.length - 1] == ']' || txt[txt.length -\
    \ 1] == '{' || txt[txt.length - 1] == '}' || txt[txt.length - 1] == '*' || txt[txt.length\
    \ - 1] == '+' || txt[txt.length - 1] == ','\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsz2rt7ny.jl:25\nin expression starting at\
    \ /tmp/tmpsz2rt7ny.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    else\n \
    \       txt[txt.length-1] == \" \" || txt[txt.length-1] == \".\" || txt[txt.length-1]\
    \ == \",\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Create\
    \ a function that returns true if the last character\n    of a given string is\
    \ a digit and is not\n    a part of a word, and false otherwise.\n    Note: \"\
    word\" is a group of characters separated by space.\nusing Test\n\n@testset begin\n\
    \ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"apple\") ==\
    \ false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"eeeee\"\
    ) == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin pie\
    \ \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplh2enbyq.jl:25\nin expression starting at\
    \ /tmp/tmplh2enbyq.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \"\
    )\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    \nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphyv6rdcm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphyv6rdcm.jl:1\n\
    in expression starting at /tmp/tmphyv6rdcm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \"\
    )\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt\
    \ = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt\
    \ = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n  \
    \  txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\" \")\n  \
    \  txt = txt[end]\n    txt = txt.split(\" \")\n    txt = txt[end]\n    txt = txt.split(\"\
    \ \")\n    \nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphyv6rdcm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmphyv6rdcm.jl:1\n\
    in expression starting at /tmp/tmphyv6rdcm.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    if txt.length == 0 \n        false\n    else\n        txt[txt.length-1]\
    \ == \" \" || txt[txt.length-1] == \".\" || txt[txt.length-1] == \",\"\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Create a function that returns\
    \ true if the last character\n    of a given string is a digit and is not\n  \
    \  a part of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpco6p2cl2.jl:24\nin expression starting at\
    \ /tmp/tmpco6p2cl2.jl:24\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.strip()\n    if txt.size == 0\n        false\n    else\n   \
    \     txt[end-1] \u2208 ['A'..'Z']\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Create a function that returns true if the last character\n    of\
    \ a given string is a digit and is not\n    a part of a word, and false otherwise.\n\
    \    Note: \"word\" is a group of characters separated by space.\nusing Test\n\
    \n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\t@test(candidate(\"\
    apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\t@test(candidate(\"\
    eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t@test(candidate(\"Pumpkin\
    \ pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\") == false)\n\t@test(candidate(\"\
    \") == false)\n\t@test(candidate(\"eeeee e \") == false)\n\t@test(candidate(\"\
    apple pie\") == false)\n\t@test(candidate(\"apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpnbeaz_1r.jl:25\nin expression starting at\
    \ /tmp/tmpnbeaz_1r.jl:25\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    \n    if txt.length == 0 \n        false\n    else\n        txt[txt.length\
    \ - 1] == ' ' || txt[txt.length - 1] == '.' || txt[txt.length - 1] == '?' || txt[txt.length\
    \ - 1] == '!' || txt[txt.length - 1] == '-' || txt[txt.length - 1] == '_' || txt[txt.length\
    \ - 1] == '*' || txt[txt.length - 1] == '+' || txt[txt.length - 1] == '(' || txt[txt.length\
    \ - 1] == ')' || txt[txt.length - 1] == '[' || txt[txt.length - 1] == ']' || txt[txt.length\
    \ - 1] == '{' || txt[txt.length - 1] == '}' || txt[txt.length - 1] == '|' || txt[txt.length\
    \ - 1] == '\\\\' || txt[txt.length - 1] == '^' || txt[txt.length - 1] == '$' ||\
    \ txt[txt.length - 1] == '&' || txt[txt.length - 1] == '*' || txt[txt.length -\
    \ 1] == '+' || txt[txt.length - 1] == '-' || txt[txt.length - 1] == '=' || txt[txt.length\
    \ - 1] == '<' || txt[txt.length - 1] == '>' || txt[txt.length - 1] == '/' || txt[txt.length\
    \ - 1] == '?' || txt[txt.length - 1] == '!' || txt[txt.length - 1] == '.' || txt[txt.length\
    \ - 1] == '-' || txt[txt.length - 1] == '_' || txt[txt.length - 1] == '*' || txt[txt.length\
    \ - 1] == '+' || txt[txt.length - 1] == '(' || txt[txt.length - 1] == ')' || txt[txt.length\
    \ - 1] == '[' || txt[txt.length - 1] == ']' || txt[txt.length - 1] == '{' || txt[txt.length\
    \ - 1] == '}' || txt[txt.length - 1] == '|' || txt[txt.length - 1] == '\\\\' ||\
    \ txt[txt.length - 1] == '^' || txt[txt.length - 1] == '$' || txt[txt.length -\
    \ 1] == '&' || txt[txt.length - 1] == '*' || txt[txt.length - 1] == '+' || txt[txt.length\
    \ - 1] == '-' || txt[txt.length - 1] == '=' || txt[txt.length - 1] == '<' || txt[txt.length\
    \ - 1] == '>' || txt[txt.length - 1] == '/' || txt[txt.length - 1] == '?' || txt[txt.length\
    \ - 1] == '!' || txt[txt.length - 1] == '.' || txt[txt.length - 1] == '-' || txt[txt.length\
    \ - 1] == '_' || txt[txt.length - 1] == '*' || txt[txt.length - 1] == '+' || txt[txt.length\
    \ - 1] == '(' || txt[txt.length - 1] == ')' || txt[txt.length - 1] == '[' || txt[txt.length\
    \ - 1] == ']' || txt[\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp0hrr4ln_.jl:1\nin expression starting at /tmp/tmp0hrr4ln_.jl:1\n"
  stdout: ''
- exit_code: 1
  program: "\"\"\"\n    Create a function that returns true if the last character\n\
    \    of a given string is an alphabetical character and is not\n    a part of\
    \ a word, and false otherwise.\n    Note: \"word\" is a group of characters separated\
    \ by space.\n\n    Examples:\n    >>> check_if_last_char_is_a_letter(\"apple pie\"\
    )\n    false\n    >>> check_if_last_char_is_a_letter(\"apple pi e\")\n    true\n\
    \    >>> check_if_last_char_is_a_letter(\"apple pi e \")\n    false\n    >>> check_if_last_char_is_a_letter(\"\
    \")\n    false\n    \"\"\"\nfunction check_if_last_char_is_a_letter(txt::String)::Bool\
    \ \n    txt = txt.trim()\n    if txt.length == 0 \n        false\n    elseif txt[txt.length\
    \ - 1].isalpha()\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Create a function that returns true if\
    \ the last character\n    of a given string is a digit and is not\n    a part\
    \ of a word, and false otherwise.\n    Note: \"word\" is a group of characters\
    \ separated by space.\nusing Test\n\n@testset begin\n\ncandidate = check_if_last_char_is_a_letter;\n\
    \t@test(candidate(\"apple\") == false)\n\t@test(candidate(\"apple pi e\") == true)\n\
    \t@test(candidate(\"eeeee\") == false)\n\t@test(candidate(\"A\") == true)\n\t\
    @test(candidate(\"Pumpkin pie \") == false)\n\t@test(candidate(\"Pumpkin pie 1\"\
    ) == false)\n\t@test(candidate(\"\") == false)\n\t@test(candidate(\"eeeee e \"\
    ) == false)\n\t@test(candidate(\"apple pie\") == false)\n\t@test(candidate(\"\
    apple pi e \") == false)\nend\n"
  status: SyntaxError
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpqkomrq4y.jl:27\nin expression starting at\
    \ /tmp/tmpqkomrq4y.jl:27\n"
  stdout: ''
