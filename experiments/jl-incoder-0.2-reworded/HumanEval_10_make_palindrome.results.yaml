name: HumanEval_10_make_palindrome
language: jl
results:
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6fezzydc.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp6fezzydc.jl:1\n\
    in expression starting at /tmp/tmp6fezzydc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp84atkqe6.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp84atkqe6.jl:1\n\
    in expression starting at /tmp/tmp84atkqe6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_1c985bi.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp_1c985bi.jl:1\n\
    in expression starting at /tmp/tmp_1c985bi.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    if string == \"\"\n        return \"\"\n    \n    max_length = 0\n   \
    \ max_length_suffix = 0\n    \n    for c in string\n        if c != string[max_length]\n\
    \            max_length = max_length + 1\n            max_length_suffix = max_length_suffix\
    \ + 1\n        else\n            max_length = max_length + 1\n            max_length_suffix\
    \ = max_length_suffix + 1\n    end\n    \n    max_length = max_length + 1\n  \
    \  max_length_suffix = max_length_suffix + 1\n    \n    max_length_postfix = max_length\
    \ - max_length_suffix\n    \n    max_length_postfix = max_length_postfix - 1\n\
    \    \n    max_length_postfix = max_length_postfix + 1\n    \n    max_length_postfix\
    \ = max_length_postfix + 1\n    \n    max_length_postfix = max_length_postfix\
    \ + 1\n    \n    max_length_postfix = max_length_postfix + 1\n    \n    max_length_postfix\
    \ = max_length_postfix + 1\n    \n    max_length_postfix = max_length_postfix\
    \ + 1\n    \n    max_length_postfix = max_length_postfix + 1\n    \n    max_length_postfix\
    \ = max_length_postfix + 1\n    \n    max_length_postfix = max_length_postfix\
    \ + 1\n    \n    max_length_postfix = max_length_postfix + 1\n    \n    max_length_postfix\
    \ = max_length_postfix + 1\n    \n    max_length_postfix = max_length_postfix\
    \ + 1\n    \n    max_length_postfix = max_length_postfix + 1\n    \n    max_length_postfix\
    \ = max_length_postfix + 1\n    \n    max_length_postfix = max_length_postfix\
    \ + 1\n    \n    max_length_postfix = max_length_postfix + 1\n    \n    max_length_postfix\
    \ = max_length_postfix + 1\n    \n    max_length_postfix = max_length_postfix\
    \ + 1\n    \n    max_length_postfix = max_length_postfix + 1\n    \n    max_length_postfix\
    \ = max_length_postfix + 1\n    \n    max_length_postfix = max_length_postfix\
    \ + 1\n    \n    max_length_postfix = max_length_postfix + 1\n    \n    max_length_postfix\
    \ = max_length_postfix + 1\n    \n    max_length_postfix = max_length_postfix\
    \ + 1\n    \n    max_length_postfix = max_length_postfix + 1\n    \n    max_length_postfix\
    \ = max_length_postfix + 1\n    \n    max_length_post\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpv9c7nobb.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpv9c7nobb.jl:1\n\
    in expression starting at /tmp/tmpv9c7nobb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppvvswmzv.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmppvvswmzv.jl:1\n\
    in expression starting at /tmp/tmppvvswmzv.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpctdotj74.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpctdotj74.jl:1\n\
    in expression starting at /tmp/tmpctdotj74.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    if string == \"\"\n        return \"\"\n    \n    max_length = 0\n   \
    \ max_length_postfix_length = 0\n    \n    for c in string\n        if c != string[max_length]\n\
    \            max_length_postfix_length = max_length_postfix_length + 1\n     \
    \       max_length = max_length + 1\n        else\n            max_length_postfix_length\
    \ = max_length_postfix_length + 1\n            max_length = max_length + 1\n \
    \   end\n    \n    max_length_postfix_length = max_length_postfix_length + 1\n\
    \    max_length = max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    max_length = max_length + 1\n    \n    max_length_postfix_length =\
    \ max_length_postfix_length + 1\n    max_length = max_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    max_length = max_length + 1\n    \n   \
    \ max_length_postfix_length = max_length_postfix_length + 1\n    max_length =\
    \ max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    max_length = max_length + 1\n    \n    max_length_postfix_length =\
    \ max_length_postfix_length + 1\n    max_length = max_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    max_length = max_length + 1\n    \n   \
    \ max_length_postfix_length = max_length_postfix_length + 1\n    max_length =\
    \ max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    max_length = max_length + 1\n    \n    max_length_postfix_length =\
    \ max_length_postfix_length + 1\n    max_length = max_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    max_length = max_length + 1\n    \n   \
    \ max_length_postfix_length = max_length_postfix_length + 1\n    max_length =\
    \ max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    max_length = max_length + 1\n    \n    max_length_postfix_length =\
    \ max_length_postfix_length + 1\n    max_length = max_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    max_length = max_length + 1\n    \n   \
    \ max_length_postfix_length = max_length_postfix_length + 1\n    max_length =\
    \ max_length + 1\n    \n    max_length_postfix_length = max_length_postfix_length\
    \ + 1\n    max_length = max_length + 1\n    \n    max_length_postfix_length =\
    \ max_length_postfix_length + 1\n    max_length = max_length + 1\n    \n    max_length_postfix_length\
    \ = max_length_postfix_length + 1\n    max_length = max_length + 1\n    \n   \
    \ max_length_postfix_length = max_length_postfix_length + 1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\")\n\t\
    @test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\")\n\t\
    @test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"jerryrrej\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp2oyynkeu.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp2oyynkeu.jl:1\n\
    in expression starting at /tmp/tmp2oyynkeu.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo9bkb54e.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo9bkb54e.jl:1\n\
    in expression starting at /tmp/tmpo9bkb54e.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    if string == \"\"\n        return \"\"\n    \n    length::Int = string.length\n\
    \    \n    if length == 1\n        return string\n    \n    middle::Int = length\
    \ / 2\n    \n    left::String = string.substring(0, middle)\n    right::String\
    \ = string.substring(middle, length)\n    \n    left::String = reverse(left)\n\
    \    right::String = reverse(right)\n    \n    return left + right\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgvom2v2v.jl:31\nin expression starting at\
    \ /tmp/tmpgvom2v2v.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdw56cuny.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpdw56cuny.jl:1\n\
    in expression starting at /tmp/tmpdw56cuny.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3ck9ppwn.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp3ck9ppwn.jl:1\n\
    in expression starting at /tmp/tmp3ck9ppwn.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj6c7zqbk.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpj6c7zqbk.jl:1\n\
    in expression starting at /tmp/tmpj6c7zqbk.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpo66vf_7f.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpo66vf_7f.jl:1\n\
    in expression starting at /tmp/tmpo66vf_7f.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    if string == \"\"\n        return \"\"\n    \n    length::Int = length(string)\n\
    \    \n    if length < 2\n        return string\n    \n    prefix::String = string[1:length]\n\
    \    suffix::String = string[length::]\n    \n    prefix_reverse::String = reverse(prefix)\n\
    \    suffix_reverse::String = reverse(suffix)\n    \n    string::String = prefix_reverse\
    \ + suffix_reverse\n    \n    return string\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \"]\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjdtqck6q.jl:22\nin expression starting at /tmp/tmpjdtqck6q.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    if string == \"\"\n        return \"\"\n    \n    max_length = 0\n   \
    \ max_length_palindrome = 0\n    \n    for c in string\n        if c != string[max_length_palindrome]\n\
    \            max_length = max_length + 1\n            max_length_palindrome =\
    \ max_length_palindrome + 1\n        else\n            max_length_palindrome =\
    \ max_length_palindrome + 1\n            \n    max_length_palindrome = max_length_palindrome\
    \ - 1\n    \n    max_length_palindrome = max_length_palindrome + 1\n    \n   \
    \ max_length_palindrome = max_length_palindrome - 1\n    \n    max_length_palindrome\
    \ = max_length_palindrome + 1\n    \n    max_length_palindrome = max_length_palindrome\
    \ - 1\n    \n    max_length_palindrome = max_length_palindrome + 1\n    \n   \
    \ max_length_palindrome = max_length_palindrome - 1\n    \n    max_length_palindrome\
    \ = max_length_palindrome + 1\n    \n    max_length_palindrome = max_length_palindrome\
    \ - 1\n    \n    max_length_palindrome = max_length_palindrome + 1\n    \n   \
    \ max_length_palindrome = max_length_palindrome - 1\n    \n    max_length_palindrome\
    \ = max_length_palindrome + 1\n    \n    max_length_palindrome = max_length_palindrome\
    \ - 1\n    \n    max_length_palindrome = max_length_palindrome + 1\n    \n   \
    \ max_length_palindrome = max_length_palindrome - 1\n    \n    max_length_palindrome\
    \ = max_length_palindrome + 1\n    \n    max_length_palindrome = max_length_palindrome\
    \ - 1\n    \n    max_length_palindrome = max_length_palindrome + 1\n    \n   \
    \ max_length_palindrome = max_length_palindrome - 1\n    \n    max_length_palindrome\
    \ = max_length_palindrome + 1\n    \n    max_length_palindrome = max_length_palindrome\
    \ - 1\n    \n    max_length_palindrome = max_length_palindrome + 1\n    \n   \
    \ max_length_palindrome = max_length_palindrome - 1\n    \n    max_length_palindrome\
    \ = max_length_palindrome + 1\n    \n    max_length_palindrome = max_length_palindrome\
    \ - 1\n    \n    max_length_palindrome = max_length_palindrome + 1\n    \n   \
    \ max_length_palindrome = max_length_palindrome - 1\n    \n    max_length\nusing\
    \ Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") ==\
    \ \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\"\
    ) == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpgme7qcq6.jl:20\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpgme7qcq6.jl:1\n\
    in expression starting at /tmp/tmpgme7qcq6.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    if string == \"\"\n        return \"\"\n    \n    max_length = 0\n   \
    \ max_length_palindrome = 0\n    \n    for character in string\n        max_length\
    \ = maximum(max_length, length(character))\n        max_length_palindrome = maximum(max_length_palindrome,\
    \ length(character))\n    \n    max_length = max_length + max_length_palindrome\n\
    \    \n    max_length_palindrome = max_length_palindrome + max_length\n    \n\
    \    max_length = max_length + max_length_palindrome\n    \n    max_length_palindrome\
    \ = max_length_palindrome + max_length\n    \n    max_length = max_length + max_length_palindrome\n\
    \    \n    max_length_palindrome = max_length_palindrome + max_length\n    \n\
    \    max_length = max_length + max_length_palindrome\n    \n    max_length_palindrome\
    \ = max_length_palindrome + max_length\n    \n    max_length = max_length + max_length_palindrome\n\
    \    \n    max_length_palindrome = max_length_palindrome + max_length\n    \n\
    \    max_length = max_length + max_length_palindrome\n    \n    max_length_palindrome\
    \ = max_length_palindrome + max_length\n    \n    max_length = max_length + max_length_palindrome\n\
    \    \n    max_length_palindrome = max_length_palindrome + max_length\n    \n\
    \    max_length = max_length + max_length_palindrome\n    \n    max_length_palindrome\
    \ = max_length_palindrome + max_length\n    \n    max_length = max_length + max_length_palindrome\n\
    \    \n    max_length_palindrome = max_length_palindrome + max_length\n    \n\
    \    max_length = max_length + max_length_palindrome\n    \n    max_length_palindrome\
    \ = max_length_palindrome + max_length\n    \n    max_length = max_length + max_length_palindrome\n\
    \    \n    max_length_palindrome = max_length_palindrome + max_length\n    \n\
    \    max_length = max_length + max_length_palindrome\n    \n    max_length_palindrome\
    \ = max_length_palindrome + max_length\n    \n    max_length = max_length + max_length_palindrome\n\
    \    \n    max_length_palindrome = max_length_palindrome + max_length\n    \n\
    \    max_length = max_length + max_length_palindrome\n    \n    max_length_palindrome\
    \ = max_length_palindrome + max_length\n    \n    max_length = max_length + max_length_palindrome\n\
    \    \n    max_length_palindrome = max_length_palindrome + max_length\n    \n\
    \    max_length = max_length\nusing Test\n\n@testset begin\n\ncandidate = make_palindrome;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"\
    xyz\") == \"xyzyx\")\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"\
    jerry\") == \"jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmpteadpbhd.jl:19\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpteadpbhd.jl:1\n\
    in expression starting at /tmp/tmpteadpbhd.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpypa2hufp.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpypa2hufp.jl:1\n\
    in expression starting at /tmp/tmpypa2hufp.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    if string == \"\"\n        return \"\"\n    \n    length::Int = string.length\n\
    \    \n    longest_postfix_length::Int = length\n    longest_postfix_length::Int\
    \ = length\n    \n    longest_postfix_length::Int = length\n    longest_postfix_length::Int\
    \ = length\n    \n    longest_postfix_length::Int = length\n    longest_postfix_length::Int\
    \ = length\n    \n    longest_postfix_length::Int = length\n    longest_postfix_length::Int\
    \ = length\n    \n    longest_postfix_length::Int = length\n    longest_postfix_length::Int\
    \ = length\n    \n    longest_postfix_length::Int = length\n    longest_postfix_length::Int\
    \ = length\n    \n    longest_postfix_length::Int = length\n    longest_postfix_length::Int\
    \ = length\n    \n    longest_postfix_length::Int = length\n    longest_postfix_length::Int\
    \ = length\n    \n    longest_postfix_length::Int = length\n    longest_postfix_length::Int\
    \ = length\n    \n    longest_postfix_length::Int = length\n    longest_postfix_length::Int\
    \ = length\n    \n    longest_postfix_length::Int = length\n    longest_postfix_length::Int\
    \ = length\n    \n    longest_postfix_length::Int = length\n    longest_postfix_length::Int\
    \ = length\n    \n    longest_postfix_length::Int = length\n    longest_postfix_length::Int\
    \ = length\n    \n    longest_postfix_length::Int = length\n    longest_postfix_length::Int\
    \ = length\n    \n    longest_postfix_length::Int = length\n    longest_postfix_length::Int\
    \ = length\n    \n    longest_postfix_length::Int = length\n    longest_postfix_length::Int\
    \ = length\n    \n    longest_postfix_length::Int = length\n    longest_postfix_length::Int\
    \ = length\n    \n    longest_postfix_length::Int = length\n    longest_postfix_length::Int\
    \ = length\n    \n    longest_postfix_length::Int = length\n    longest_postfix_length::Int\
    \ = length\n    \n    longest_postfix_length::Int = length\n    longest_postfix_length::Int\
    \ = length\n    \n    longest_postfix_length::Int = length\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\
    \")\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpgvllpspl.jl:1\nin expression starting at /tmp/tmpgvllpspl.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5vpnsqae.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5vpnsqae.jl:1\n\
    in expression starting at /tmp/tmp5vpnsqae.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Find the shortest palindrome that begins with a supplied string.\n\
    \    Algorithm idea is simple:\n    - Find the longest postfix of supplied string\
    \ that is a palindrome.\n    - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    >>> make_palindrome(\"\
    \")\n    \"\"\n    >>> make_palindrome(\"cat\")\n    \"catac\"\n    >>> make_palindrome(\"\
    cata\")\n    \"catac\"\n    \"\"\"\nfunction make_palindrome(string::String)::String\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = make_palindrome;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"x\") == \"x\")\n\t@test(candidate(\"xyz\") == \"xyzyx\"\
    )\n\t@test(candidate(\"xyx\") == \"xyx\")\n\t@test(candidate(\"jerry\") == \"\
    jerryrrej\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp32nokzdw.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp32nokzdw.jl:1\n\
    in expression starting at /tmp/tmp32nokzdw.jl:1\n"
  exit_code: 1
  status: SyntaxError
