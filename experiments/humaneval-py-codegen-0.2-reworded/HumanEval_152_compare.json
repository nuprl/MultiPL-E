{
  "name": "HumanEval_152_compare",
  "language": "py",
  "prompt": "from typing import List\n\ndef compare(game: List[int], guess: List[int]) -> List[int]:\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    >>> compare([1,2,3,4,5,1],[1,2,3,4,2,-2])\n    [0,0,0,0,3,3]\n    >>> compare([0,5,0,0,0,4],[4,1,1,0,0,-2])\n    [4,4,1,0,0,6]\n    \"\"\"\n",
  "tests": "def check(candidate):\n    assert candidate([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]) == [0, 0, 0, 0, 3, 3]\n    assert candidate([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0]\n    assert candidate([1, 2, 3], [-1, -2, -3]) == [2, 4, 6]\n    assert candidate([1, 2, 3, 5], [-1, 2, 3, 4]) == [2, 0, 0, 1]\n\ndef test_check():\n    check(compare)\n\ntest_check()\n",
  "completions": [
    "    \n    #",
    "    \n    #",
    "    \n    #",
    "    \n    #",
    "    \n    #",
    "    \n    #",
    "    \n    #",
    "    \n    #",
    "    \n    #",
    "    \n    #",
    "    \n    #",
    "    \n    #",
    "    \n
    "    \n    if len(game) != len(guess):\n        raise ValueError(\"The two arrays must be of equal length.\")\n    \n    diff = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            diff.append(0)\n        else:\n            diff.append(abs(game[i] - guess[i]))\n    return diff\n<|endoftext|><|python|>#",
    "    \n    #",
    "    \n    #",
    "    return [abs(score-guess) for score, guess in zip(game, guess)]\n<|endoftext|><|python|
    "    return [abs(score - guess[i]) for i, score in enumerate(game)]\n",
    "    \n
    "    \n    return [abs(g-s) for g,s in zip(guess,game)]\n<|endoftext|><|python|>#",
    "    \n    return [abs(score - guess[i]) for i, score in enumerate(game)]\n",
    "    \n    # Your code here\n    \n    return game\n",
    "    \n    # Your code here\n    \n    return guess\n",
    "    \n    # Your code here\n    \n    return game\n",
    "    \n    # Your code here\n    \n    return game\n",
    "    \n    # Your code here\n    \n    return game, guess\n",
    "    \n    return [abs(a-b) for a,b in zip(game,guess)]\n",
    "    \n    # Your code here\n    \n    return game\n",
    "    \n    return [abs(g-s) for g,s in zip(guess, game)]\n",
    "    \n    # Your code here\n    \n    return\n",
    "    \n    # Your code here\n    \n    return [0]*len(game)\n",
    "    \n    return [abs(score - guess) for score, guess in zip(game, guess)]\n",
    "    \n    # Your code here\n    \n    return game\n",
    "    \n    if len(game) != len(guess):\n        raise Exception(\"The game and guess lists must be of the same length\")\n    \n    diff = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            diff.append(0)\n        else:\n            diff.append(abs(game[i] - guess[i]))\n    return diff\n",
    "    \n    return [abs(score-guess) for score, guess in zip(game, guess)]\n",
    "    \n    # Your code here\n    \n    return game\n",
    "    \n    # Your code here\n    \n    return score_diff(game, guess)\n",
    "    \n    # Your code here\n    \n    return\n",
    "    \n    if len(game) != len(guess):\n        raise Exception(\"The game and guess lists must be of equal length.\")\n    \n    diff = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            diff.append(0)\n        else:\n            diff.append(abs(game[i] - guess[i]))\n    return diff\n",
    "    \n    # Your code here\n    \n    return game\n",
    "    \n    # Your code here\n    \n    return game\n",
    "    return [abs(g-s) for g,s in zip(guess,game)]\n",
    "    \n    # Your code here\n    \n    return score_diff(game, guess)\n",
    "    \n    # your code goes here\n    \n    return game\n",
    "    \n    # Your code here\n    \n    return score_difference(game, guess)\n",
    "    \n    return [abs(g - s) for g, s in zip(guess, game)]\n",
    "    \n    # Your code here\n    \n    return game\n",
    "    if len(game) != len(guess):\n        raise Exception(\"The two arrays must be of equal length\")\n    \n    diff = []\n    for i in range(len(game)):\n        diff.append(abs(game[i] - guess[i]))\n    return diff\n",
    "    \n    # Your code here\n    \n    return\n",
    "    \n    # Your code here\n    \n    return guess\n",
    "    \n    # Your code here\n    \n    return guess\n",
    "    \n    # Your code here\n    \n    return\n",
    "    \n    return [abs(a-b) for a,b in zip(game,guess)]\n",
    "    \n    # Your code here\n    \n    return game\n",
    "    \n    # Your code here\n    \n    return\n",
    "    \n    # Your code here\n    \n    return\n",
    "    \n    if len(game) != len(guess):\n        raise Exception(\"The game and guess lists must be of equal length\")\n    \n    diff = []\n    for i in range(len(game)):\n        diff.append(abs(game[i] - guess[i]))\n    \n    return diff\n",
    "    \n    if len(game) != len(guess):\n        raise Exception(\"The two arrays should be of equal length\")\n    \n    diff = []\n    for i in range(len(game)):\n        if game[i] == guess[i]:\n            diff.append(0)\n        else:\n            diff.append(abs(game[i] - guess[i]))\n    return diff\n",
    "    \n    # Your code here\n    \n    return game\n",
    "    \n    # Your code here\n    \n    return game\n",
    "    \n    # Your code here\n    \n    return\n",
    "    \n    # your code here\n    \n    return game, guess\n",
    "    \n    # Your code here\n    \n    return game, guess\n",
    "    \n    # Your code here\n    \n    return\n",
    "    \n    # Your code here\n    \n    return guess\n",
    "    \n    # Your code here\n    \n    return [0]*len(game)\n    ",
    "    \n    # Your code here\n    \n    return\n",
    "    \n    # Your code here\n    \n    return game, guess\n",
    "    \n    # your code goes here\n    \n    return game, guess\n",
    "    \n    # Your code here\n    \n    return score_diff(game, guess)\n",
    "    \n    # Your code here\n    \n    return\n",
    "    \n    return [abs(score-guess) for score, guess in zip(game, guess)]\n",
    "    \n    # Your code here\n    \n    return score_difference(game, guess)\n",
    "    \n    # Your code here\n    \n    return\n",
    "    \n    # Your code here\n    \n    return game\n",
    "    \n    # your code goes here\n    \n    return\n",
    "    \n    if len(game) != len(guess):\n        raise ValueError(\"The two arrays must be of equal length\")\n    \n    diff = []\n    for i in range(len(game)):\n        diff.append(abs(game[i] - guess[i]))\n    return diff\n",
    "    \n    # Your code here\n    \n    return guess\n",
    "    \n    # Your code here\n    \n    return game\n",
    "    \n    # Your code here\n    \n    return score_diff(game, guess)\n",
    "    \n    # your code goes here\n    \n    return game\n",
    "    \n    # Your code here\n    \n    return game\n",
    "    \n    # Your code here\n    \n    return score_diff(game, guess)\n",
    "    \n    return [abs(a-b) for a,b in zip(game,guess)]\n",
    "    \n    # your code goes here\n    \n    return game\n",
    "    \n    # Your code here\n    \n    return score_difference(game, guess)\n",
    "    \n    # Your code here\n    \n    return\n",
    "    \n    # your code goes here\n    \n    return game, guess\n",
    "    \n    # your code here\n    \n    return scores - guess\n    ",
    "    \n    # Your code here\n    \n    return game, guess\n",
    "    \n    # Your code here\n    \n    return game\n",
    "    \n    # Your code here\n    \n    return game, guess\n",
    "    \n    # your code goes here\n    \n    return game\n",
    "    return [abs(a-b) for a,b in zip(game,guess)]\n",
    "    return [abs(guess[i] - game[i]) for i in range(len(game))]\n",
    "    \n    # Your code here\n    \n    return guess\n",
    "    \n    return [abs(score-guess) for score, guess in zip(game, guess)]\n",
    "    \n    # Your code here\n    \n    return game\n",
    "    \n    # Your code here\n    \n    return [0]*len(game)\n    ",
    "    \n    # Your code here\n    \n    return [0]*len(game)\n    ",
    "    \n    # your code goes here\n    \n    return game, guess\n",
    "    \n    # Your code here\n    \n    return\n",
    "    \n    # Your code here\n    \n    return\n",
    "    \n    # Your code here\n    \n    return game\n",
    "    \n    # Your code here\n    \n    return\n",
    "    \n    # your code here\n    \n    return score_diff(game, guess)\n",
    "    \n    # Your code here\n    \n    return game, guess\n",
    "    \n    # your code here\n    \n    return game\n",
    "    \n    # your code goes here\n    \n    return game, guess\n",
    "    \n    # Your code here\n    \n    return\n",
    "    \n    # Your code here\n    \n    return game, guess\n",
    "    \n    if len(game) != len(guess):\n        raise Exception(\"The game and guess lists must be of equal length\")\n    \n    diff = []\n    for i in range(len(game)):\n        diff.append(abs(game[i] - guess[i]))\n    \n    return diff\n",
    "    \n    return [abs(score - guess) for score, guess in zip(game, guess)]\n",
    "    \n    # your code goes here\n    \n    return game\n",
    "    \n    # Your code here\n    \n    return game, guess\n",
    "    \n    # Your code here\n    \n    return game\n",
    "    \n    # Your code here\n    \n    return [0]*len(guess)\n",
    "    \n    # Your code here\n    \n    return\n",
    "    \n    return [abs(g-s) for g,s in zip(guess, game)]\n",
    "    \n    return [abs(g - s) for g, s in zip(guess, game)]\n",
    "    \n    # Your code here\n    \n    return\n",
    "    \n    # Your code here\n    \n    return game, guess\n",
    "    \n    return [abs(score - guess) for score, guess in zip(game, guess)]\n",
    "    \n    # Your code here\n    \n    return game\n",
    "    \n    # Your code here\n    \n    return score_difference(game, guess)\n",
    "    \n    # Your code here\n    \n    return game, guess\n",
    "    \n    return [abs(a-b) for a,b in zip(game,guess)]\n",
    "    \n    # Your code here\n    \n    return game\n",
    "    \n    # Your code here\n    \n    return game\n",
    "    if len(game) != len(guess):\n        raise Exception(\"The two arrays must be of equal length.\")\n    \n    return [abs(game[i] - guess[i]) for i in range(len(game))]\n",
    "    \n    # Your code here\n    \n    return game\n",
    "    \n    # Your code here\n    \n    return score_diff(game, guess)\n",
    "    return [abs(score - guess) for score, guess in zip(game, guess)]\n",
    "    \n    return [abs(a - b) for a, b in zip(game, guess)]\n",
    "    \n    # Your code here\n    \n    return\n",
    "    \n    # your code here\n    \n    return game\n",
    "    return [abs(score - guess) for score, guess in zip(game, guess)]\n",
    "    \n    # your code here\n    \n    return game, guess\n    ",
    "    \n    # Your code here\n    \n    return game\n",
    "    \n    # your code goes here\n    \n    return game, guess\n",
    "    \n    # Your code here\n    \n    return score_guess(game, guess)\n",
    "    \n    # your code here\n    \n    return\n",
    "    return [abs(g - s) for g, s in zip(guess, game)]\n",
    "    \n    # your code goes here\n    \n    return\n",
    "    \n    # Your code here\n    \n    return guess\n",
    "    \n    # Your code here\n    \n    return\n",
    "    \n    # Your code here\n    \n    return game\n",
    "    \n    return [abs(score-guess) for score, guess in zip(game, guess)]\n",
    "    \n    # Your code here\n    \n    return game\n",
    "    \n    # Your code here\n    \n    return game, guess\n",
    "    \n    # your code here\n    \n    return guess\n",
    "    \n    # Your code here\n    \n    return\n",
    "    \n    # your code goes here\n    \n    return [0]*len(game)\n    ",
    "    \n    # Your code here\n    \n    return game\n",
    "    \n    return [abs(a-b) for a,b in zip(game,guess)]\n",
    "    \n    # Your code here\n    \n    return\n",
    "    \n    # Your code here\n    \n    return\n",
    "    \n    # Your code here\n    \n    return\n",
    "    \n    # Your code here\n    \n    return game\n",
    "    \n    return [abs(score - guess) for score, guess in zip(game, guess)]\n",
    "    \n    return [abs(score - guess) for score, guess in zip(game, guess)]\n",
    "    \n    # Your code here\n    \n    return\n",
    "    \n    # your code here\n    \n    return game, guess\n",
    "    \n    # Your code here\n    \n    return guess\n",
    "    \n    # your code goes here\n    \n    return [0]*len(game)\n    ",
    "    \n    # Your code here\n    \n    return\n",
    "    \n    if len(game) != len(guess):\n        return [-1] * len(guess)\n    \n    diff = [abs(game[i] - guess[i]) for i in range(len(game))]\n    \n    return diff\n",
    "    \n    # Your code here\n    \n    return score_diff(game, guess)\n",
    "    \n    return [abs(score - guess) for score, guess in zip(game, guess)]\n",
    "    \n    # Your code here\n    \n    return guess\n",
    "    \n    # Your code here\n    \n    return\n",
    "    \n    # your code here\n    \n    return game, guess\n",
    "    return [abs(g - s) for g, s in zip(guess, game)]\n",
    "    \n    # your code goes here\n    \n    return game\n",
    "    \n    # Your code here\n    \n    return\n",
    "    \n    # Your code here\n    \n    return game\n",
    "    \n    # Your code here\n    \n    return guess\n",
    "    \n    # Your code here\n    \n    return\n",
    "    \n    # Your code here\n    \n    return\n",
    "    \n    # Your code here\n    \n    return\n",
    "    \n    # Your code here\n    \n    return game, guess\n",
    "    \n    # Your code here\n    \n    return\n",
    "    \n    # Your code here\n    \n    return\n",
    "    return [abs(score - guess) for score, guess in zip(game, guess)]\n",
    "    \n    return [abs(score - guess) for score, guess in zip(game, guess)]\n",
    "    \n    # your code here\n    \n    return game, guess\n",
    "    \n    # Your code here\n    \n    return game\n",
    "    \n    # Your code here\n    \n    return\n",
    "    \n    # Your code here\n    \n    return game\n",
    "    \n    # Your code here\n    \n    return game\n",
    "    return [abs(g - s) for g, s in zip(guess, game)]\n",
    "    \n    # your code here\n    \n    return game, guess\n",
    "    \n    # Your code here\n    \n    return game\n",
    "    \n    # Your code here\n    \n    return guess\n",
    "    \n    if len(game) != len(guess):\n        raise ValueError(\"The two arrays must be of equal length\")\n    \n    return [abs(game[i] - guess[i]) for i in range(len(game))]\n",
    "    \n    # Your code here\n    \n    return guess\n",
    "    \n    # Your code here\n    \n    return\n",
    "    \n    # your code here\n    \n    return scores, guesses\n",
    "    \n    # Your code here\n    \n    return guess\n",
    "    \n    # Your code here\n    \n    return [0]*len(game)\n    \n    "
  ],
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ]
}