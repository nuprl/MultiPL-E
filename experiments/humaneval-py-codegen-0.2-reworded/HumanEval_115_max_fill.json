{
  "name": "HumanEval_115_max_fill",
  "language": "py",
  "prompt": "from typing import List\n\ndef max_fill(grid: List[List[int]], capacity: int) -> int:\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n    >>> max_fill([[0,0,1,0], [0,1,0,0], [1,1,1,1]], 1)\n    6\n\n    Example 2:\n    >>> max_fill([[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]], 2)\n    5\n    \n    Example 3:\n    >>> max_fill([[0,0,0], [0,0,0]], 5)\n    0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n",
  "tests": "def check(candidate):\n    assert candidate([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1) == 6\n    assert candidate([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2) == 5\n    assert candidate([[0, 0, 0], [0, 0, 0]], 5) == 0\n    assert candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 2) == 4\n    assert candidate([[1, 1, 1, 1], [1, 1, 1, 1]], 9) == 2\n\ndef test_check():\n    check(max_fill)\n\ntest_check()\n",
  "completions": [
    "    \n    #",
    "    \n    #",
    "    \n    #",
    "    \n    #",
    "    \n    #",
    "    \n    #",
    "    \n    #",
    "    \n    #",
    "    \n    #",
    "    \n    #",
    "    \n    #",
    "    \n    #",
    "    \n    #",
    "    \n    #",
    "    \n    #",
    "    \n    #",
    "    \n    #",
    "    \n    #",
    "    \n    #",
    "    \n    #",
    "    \n    # dp[i][j] = max number of times we can lower the bucket i, j\n    # dp[i][j] = 0 if we cannot lower the bucket i, j\n    # dp[i][j] = dp[i-1][j] + dp[i][j-1] if we can lower the bucket i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) if we cannot lower the bucket i, j\n    dp = [[0] * (capacity + 1) for _ in range(capacity + 1)]\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                dp[0][0] += 1\n            for k in range(1, capacity + 1):\n                if grid[i][j] == 1:\n                    dp[k][0] = max(dp[k][0], dp[k - 1][0] + 1)\n                else:\n                    dp[k][0] = max(dp[k][0], dp[k - 1][0])\n                for l in range(1, capacity + 1):\n                    if grid[i][j] == 1:\n                        dp[k][l] = max(dp[k][l], dp[k - 1][l] + dp[k][l - 1])\n                    else:\n                        dp[k][l] = max(dp[k][l], dp[k - 1][l], dp[k][l - 1])\n    return dp[-1][-1]\n",
    "    \n    # dp[i][j] = max number of times you can lower the buckets to empty the well i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # d",
    "    \n    # dp[i][j] = max number of times you can fill the well i with j water\n    dp = [[0] * (capacity + 1) for _ in range(len(grid))]\n    \n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                dp[i][j] = dp[i][j-1] + 1\n            else:\n                dp[i][j] = 0\n    \n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            for k in range(capacity):\n                if grid[i][j] == 1:\n                    dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    \n    return dp[-1][-1]\n",
    "    \n    # dp[i][j] = max number of times you can lower the bucket i to empty the well j\n    dp = [[0] * (capacity + 1) for _ in range(len(grid))]\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = 0\n                for k in range(1, capacity + 1):\n                    if i - k >= 0 and grid[i - k][j] == 1:\n                        dp[i][j] = max(dp[i][j], dp[i - k][j] + 1)\n                    if j - k >= 0 and grid[i][j - k] == 1:\n                        dp[i][j] = max(dp[i][j], dp[i][j - k] + 1)\n    return dp[-1][-1]\n",
    "    \n    # dp[i][j] = max number of times you can lower the bucket to empty the well i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # d",
    "    \n    # dp[i][j] = max number of times you can lower the bucket i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0",
    "    \n    # dp[i][j] = max number of times you can lower the bucket i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j]",
    "    \n    # dp[i][j] = max number of times you can lower the buckets to empty the well i, j\n    # dp[i][j] = 0 if you cannot empty the well i, j\n    # dp[i][j] = dp[i-1][j] + 1 if you can empty the well i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) if you can empty the well i, j\n    # dp[i][j] = 0 if you cannot empty the well i, j\n    # dp[i][j] = 0 if you cannot empty the well i, j\n    # dp[i][j] = 0 if you cannot empty the well i, j\n    # dp[i][j] = 0 if you cannot empty the well i, j\n    # dp[i][j] = 0 if you cannot empty the well i, j\n    # dp[i][j] = 0 if you cannot empty the well i, j\n    # dp[i][j] = 0 if you cannot empty the well i, j\n    # dp[i][j] = 0 if you cannot empty the well i, j\n    # dp[i][j] = 0 if you cannot empty the well i, j\n    # dp[i][j] = 0 if you cannot empty the well i, j\n    # dp[i][j] = 0 if you cannot empty the well i, j\n    # dp[i][j] = 0 if you cannot empty the well i, j\n    # dp[i][j] = 0 if you cannot empty the well i, j\n    # dp[i][j] = 0 if you cannot empty the well i, j\n    # dp[i][j] = 0 if you cannot empty the well i, j\n    # dp[i][j] = 0 if you cannot empty the well i, j\n    # dp[i][j] = 0 if you cannot empty the well i, j\n    # dp[i][j] = 0 if you cannot empty the well i, j\n    # dp[i][j] = 0 if you cannot",
    "    \n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) +",
    "    \n    # dp[i][j] = max number of times you can fill the well at (i, j)\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max",
    "    \n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) +",
    "    # dp[i][j] = max number of times you can lower the bucket at (i, j)\n    # dp[i][j] = max(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n    # dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    # dp[i][j] = dp[i - 1][j]\n    # dp[i][j] = 0\n    dp = [[0] * (capacity + 1) for _ in range(len(grid) + 1)]\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                dp[i + 1][j + 1] = max(dp[i][j], dp[i][j + 1], dp[i + 1][j])\n    return dp[len(grid)][capacity]\n",
    "    \n    # dp[i][j] = max number of times we can lower the bucket i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j]",
    "    \n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) +",
    "    \n    # dp[i][j] = max number of times you can fill the well at (i, j)\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j-2]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j-2], dp[i-2][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j-2], dp[i-2][j-1], dp[i-2][j-2]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j-2], dp[i-2][j-1], dp[i-2][j-2], dp[i-2][j-3]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j-2], dp[i-2][j-1], dp[i-2][j-2], dp[i-2][j-3], dp[i-3][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1],",
    "    \n    # dp[i][j] = max number of times you can lower the bucket at i, j\n    # dp[i][j] = 0 if you cannot lower the bucket at i, j\n    # dp[i][j] = dp[i-1][j] + 1 if you can lower the bucket at i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) if you can lower the bucket at i, j\n    # dp[i][j] = 0 if you cannot lower the bucket at i, j\n    # dp[i][j] = 0 if i < 0 or j < 0 or i >= grid.length or j >= grid[i].length\n    # dp[i][j] = 0 if i == 0 and j == 0\n    # dp[i][j] = 0 if i == 0 and j == grid[i].length - 1\n    # dp[i][j] = 0 if i == grid.length - 1 and j == 0\n    # dp[i][j] = 0 if i == grid.length - 1 and j == grid[i].length - 1\n    # dp[i][j] = 0 if i == grid.length - 1 and j == grid[i].length - 1\n    # dp[i][j] = 0 if i == grid.length - 1 and j == grid[i].length - 1\n    # dp[i][j] = 0 if i == grid.length - 1 and j == grid[i].length - 1\n    # dp[i][j] = 0 if i == grid.length - 1 and j == grid[i].length - 1\n    # dp[i][j] = 0 if i == grid.length - 1 and j == grid[i].length - 1\n    # dp[i][j] = 0 if i == grid.length - 1 and j == grid[i].length - 1\n    # dp[i][j] = 0 if i == grid.length - 1 and j == grid[i].length - 1\n    # dp[i][j] = 0 if i == grid.length - 1 and j == grid[i].",
    "    \n    # dp[i][j] = max number of times you can lower the buckets\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else",
    "    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n",
    "    \n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) +",
    "    \n    # dp[i][j] = max number of times you can lower the bucket i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if dp[i-1][j] > dp[i][j-1] else dp[i][j-1]\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if dp[i-1][j] > dp[i][j-1] else dp[i][j-1]\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if dp[i-1][j] > dp[i][j-1] else dp[i][j-1]\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if dp[i-1][j] > dp[i][j-1] else dp[i][j-1]\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if dp[i-1][j] > dp[i][j-1] else dp[i][j-1]\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if dp[i-1][j] > dp[i][j-1] else dp[i][j-1]\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if dp[i-1][j] > dp[i][j-1] else d",
    "    \n    # dp[i][j] = max number of times we can lower the buckets\n    # if we can lower the bucket at i, j, we can lower it at i+1, j, i+1, j+1, i, j+1, i+1, j\n    # if we cannot lower the bucket at i, j, we can lower it at i, j+1, i+1, j+1, i, j+1, i+1, j\n    # if we cannot lower the bucket at i, j, we can lower it at i, j+1, i+1, j+1, i+1, j+1, i+1, j+1\n    # dp[i][j] = max(dp[i+1][j], dp[i][j+1], dp[i+1][j+1], dp[i+1][j+1], dp[i+1][j+1], dp[i+1][j+1], dp[i+1][j+1])\n    # dp[i][j] = max(dp[i+1][j], dp[i][j+1], dp[i+1][j+1], dp[i+1][j+1], dp[i+1][j+1], dp[i+1][j+1], dp[i+1][j+1])\n    # dp[i][j] = max(dp[i+1][j], dp[i][j+1], dp[i+1][j+1], dp[i+1][j+1], dp[i+1][j+1], dp[i+1][j+1], dp[i+1][j+1])\n    # dp[i][j] = max(dp[i+1][j], dp[i][j+1], dp[i+1][j+1], dp[i+1][j+1], dp[i+1][j+1], dp[i+1][j+1], dp[i+1][j+1])\n    # dp[i][j] = max(dp[",
    "    \n    # dp[i][j] = max number of times we can lower the bucket at i, j\n    # dp[i][j] = 0 if we can't lower the bucket at i, j\n    # dp[i][j] = dp[i-1][j] + 1 if we can lower the bucket at i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) if we can lower the bucket at i, j\n    # dp[i][j] = 0 if we can't lower the bucket at i, j\n    # dp[i][j] = 0 if i < 0 or j < 0\n    # dp[i][j] = 0 if i >= grid.length or j >= grid[i].length\n    # dp[i][j] = 0 if grid[i][j] == 0\n    # dp[i][j] = 0 if i < 0 or j < 0\n    # dp[i][j] = 0 if i >= grid.length or j >= grid[i].length\n    # dp[i][j] = 0 if grid[i][j] == 0\n    # dp[i][j] = 0 if i < 0 or j < 0\n    # dp[i][j] = 0 if i >= grid.length or j >= grid[i].length\n    # dp[i][j] = 0 if grid[i][j] == 0\n    # dp[i][j] = 0 if i < 0 or j < 0\n    # dp[i][j] = 0 if i >= grid.length or j >= grid[i].length\n    # dp[i][j] = 0 if grid[i][j] == 0\n    # dp[i][j] = 0 if i < 0 or j < 0\n    # dp[i][j] = 0 if i >= grid.length or j >= grid[i].length\n    # dp[i][j] = 0 if grid[i][j] == 0\n    # dp[i][j] = 0 if i < 0 or j < 0\n    # dp[i][j] = 0 if i",
    "    \n    # dp[i][j] = max number of times we can lower the bucket at i, j\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max",
    "    \n    # dp[i][j] = max number of times we can empty the well at (i, j)\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0 else 0\n    # dp[i][j] = max(dp[i-1][j], dp",
    "    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n",
    "    \n    # dp[i][j] = max number of times you can lower the bucket i, j\n    # dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1",
    "    # dp[i][j] = max number of times we can fill the well i,j with the bucket\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], d",
    "    \n    # dp[i][j] = max number of times you can lower the bucket i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    dp = [[0] * (capacity + 1) for _ in range(capacity + 1)]\n    for i in range(1, len(grid)):\n        for j in range(1, len(grid[0])):\n            if grid[i][j] == 1:\n                dp[i][j] = dp[i-1][j] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[-1][-1]\n",
    "    \n    # dp[i][j] = max number of times we can fill the well i,j with the capacity\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i",
    "    \n    # dp[i][j] = max number of times we can lower the bucket i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j-2])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j-2], dp[i-2][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j-2], dp[i-1][j-3])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j-2], dp[i-1][j-3], dp[i-2][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j-2], dp[i-1][j-3], dp[i-1][j-4])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j-2], dp[i-1][j-3], dp[i-1][j-4], dp[i-2][j-1])\n    # dp[",
    "    \n    # dp[i][j] = max number of times we can lower the bucket at i, j\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], d",
    "    \n    # dp[i][j] = max number of times we can lower the bucket to empty the well\n    # i: row\n    # j: column\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i",
    "    \n    # dp[i][j] = max number of times we can lower the buckets\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = dp[i-1][j]\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # d",
    "    \n    # dp[i][j] = max number of times you can lower the buckets\n    # dp[i][j] = 0 if you cannot lower the buckets\n    # dp[i][j] = 1 if you can lower the buckets once\n    # dp[i][j] = 2 if you can lower the buckets twice\n    # dp[i][j] = 3 if you can lower the buckets thrice\n    # dp[i][j] = 4 if you can lower the buckets four times\n    # dp[i][j] = 5 if you can lower the buckets five times\n    # dp[i][j] = 6 if you can lower the buckets six times\n    # dp[i][j] = 7 if you can lower the buckets seven times\n    # dp[i][j] = 8 if you can lower the buckets eight times\n    # dp[i][j] = 9 if you can lower the buckets nine times\n    # dp[i][j] = 10 if you can lower the buckets ten times\n    dp = [[0] * (len(grid[0]) + 1) for _ in range(len(grid))]\n    \n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = 0\n    \n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if dp[i][j] == 0:\n                continue\n            \n            for k in range(j, len(grid[0])):\n                if grid[i][k] == 1:\n                    dp[i][j] = max(dp[i][j], dp[i][k] + 1)\n                    \n    return dp[0][0]\n",
    "    \n    # dp[i][j] = max number of times we can lower the bucket at i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1\n    # dp[i][j] = 0 if grid[i][j] == 0\n    \n    dp = [[0 for _ in range(capacity + 1)] for _ in range(capacity + 1)]\n    \n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                dp[0][0] += 1\n            else:\n                dp[0][0] = 0\n            \n            for k in range(1, capacity + 1):\n                dp[k][0] = max(dp[k][0], dp[k - 1][0])\n                \n                if grid[i][j] == 1:\n                    dp[k][0] += 1\n                else:\n                    dp[k][0] = 0\n                \n                for l in range(1, capacity + 1):\n                    dp[k][l] = max(dp[k][l], dp[k][l - 1]) + 1\n                    \n                    if grid[i][j] == 1:\n                        dp[k][l] += 1\n                    else:\n                        dp[k][l] = 0\n    \n    return dp[capacity][capacity]\n",
    "    \n    # dp[i][j] = max number of times we can fill the well at (i, j)\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0 else 0\n    # dp[i][j] = max(dp[i-1][j], dp",
    "    \n    # dp[i][j] = max number of times you can lower the bucket i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 and dp[i-1][j] > dp[i][j-1]\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0 and dp[i-1][j] > dp[i][j-1]\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if dp[i-1][j] > dp[i][j-1] and grid[i][j] == 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if dp[i-1][j] > dp[i][j-1] and grid[i][j] == 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if dp[i-1][j] > dp[i][j-1] and grid[i][j] == 1 and dp[i-1][j] > dp[i][j-1]\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if dp[i-1][j] > dp[i][j-1",
    "    \n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n",
    "    \n    # dp[i][j] = max number of times you can lower the bucket i to empty the well j\n    # dp[i][j] = 0 if you can't lower the bucket i to empty the well j\n    # dp[i][j] = dp[i-1][j] if you can lower the bucket i to empty the well j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) if you can lower the bucket i to empty the well j\n    # dp[i][j] = 0 if you can't lower the bucket i to empty the well j\n    # dp[i][j] = 0 if you can't lower the bucket i to empty the well j\n    # dp[i][j] = 0 if you can't lower the bucket i to empty the well j\n    dp = [[0] * (len(grid[0]) + 1) for _ in range(len(grid) + 1)]\n    for i in range(len(grid) + 1):\n        dp[i][0] = 0\n    for i in range(1, len(grid) + 1):\n        for j in range(1, len(grid[0]) + 1):\n            if grid[i - 1][j - 1] == 1:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n            else:\n                dp[i][j] = 0\n    return dp[len(grid)][len(grid[0])]\n",
    "    \n    # dp[i][j] = max number of times you can lower the bucket i, j\n    # dp[i][j] = 0 if you can't lower the bucket i, j\n    # dp[i][j] = 1 if you can lower the bucket i, j\n    # dp[i][j] = dp[i-1][j] + dp[i][j-1] if you can lower the bucket i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) if you can lower the bucket i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) if you can lower the bucket i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-2][j-2]) if you can lower the bucket i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-2][j-2], dp[i-3][j-3]) if you can lower the bucket i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-2][j-2], dp[i-3][j-3], dp[i-4][j-4]) if you can lower the bucket i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-2][j-2], dp[i-3][j-3], dp[i-4][j-4], dp[i-5][j-5]) if you can lower the bucket i, j\n    # dp[i",
    "    # grid[i][j] -> 0 | 1\n    # 0 -> 0\n    # 1 -> 1\n    # 2 -> 0\n    # 3 -> 0\n    # 4 -> 0\n    # 5 -> 1\n    # 6 -> 0\n    # 7 -> 0\n    # 8 -> 0\n    # 9 -> 0\n    # 10 -> 0\n    # 11 -> 1\n    # 12 -> 0\n    # 13 -> 0\n    # 14 -> 0\n    # 15 -> 0\n    # 16 -> 0\n    # 17 -> 0\n    # 18 -> 0\n    # 19 -> 0\n    # 20 -> 0\n    # 21 -> 0\n    # 22 -> 0\n    # 23 -> 0\n    # 24 -> 0\n    # 25 -> 0\n    # 26 -> 0\n    # 27 -> 0\n    # 28 -> 0\n    # 29 -> 0\n    # 30 -> 0\n    # 31 -> 0\n    # 32 -> 0\n    # 33 -> 0\n    # 34 -> 0\n    # 35 -> 0\n    # 36 -> 0\n    # 37 -> 0\n    # 38 -> 0\n    # 39 -> 0\n    # 40 -> 0\n    # 41 -> 0\n    # 42 -> 0\n    # 43 -> 0\n    # 44 -> 0\n    # 45 -> 0\n    # 46 -> 0\n    # 47 -> 0\n    # 48 -> 0\n    # 49 -> 0\n    # 50 -> 0\n    # 51 -> 0\n    # 52 -> 0\n    # 53 -> 0\n    # 54 -> 0\n    # 55 -> 0\n    # 56 -> 0\n    # 57 -> 0\n    # 58 -> 0\n    # 59 -> 0\n    # 60 -> 0\n    # 61 -> 0\n    # 62 -> 0\n    # 63 -> 0\n    # 64 -> 0\n    # 65 -> 0\n    # 66 -> 0\n    # 67 -> 0\n    # 68 -> 0\n    # 69 -> 0\n    # 70 -> 0\n    # 71 -> 0\n    # 72 -> 0\n    # 73 -> 0\n    # 74 -> 0\n    # 75 -> 0\n    # 76 -> 0\n    # 77 -> 0\n    # 78 -> 0\n    # 79 -> 0\n    # 80 -> 0\n    # 81 -> 0\n    # 82 -> 0\n    ",
    "    # dp[i][j] = max number of times you can use buckets to fill all wells from i to j\n    # dp[i][j] = dp[i-1][j] + dp[i][j-1] if grid[i][j] == 1\n    # dp[i][j] = dp[i-1][j] if grid[i][j] == 0\n    # dp[i][j] = 0 if i < 0 or j < 0\n    # dp[i][j] = 0 if i > j\n    # dp[i][j] = 0 if i == j\n    # dp[i][j] = 0 if i == 0 and j == 0\n    # dp[i][j] = 0 if i == 0 and j == grid.length - 1\n    # dp[i][j] = 0 if i == grid.length - 1 and j == 0\n    # dp[i][j] = 0 if i == grid.length - 1 and j == grid.length - 1\n    # dp[i][j] = 0 if i == grid.length - 1 and j == grid.length - 1 and grid[i][j] == 1\n    # dp[i][j] = 0 if i == grid.length - 1 and j == grid.length - 1 and grid[i][j] == 0\n    # dp[i][j] = 0 if i == grid.length - 1 and j == grid.length - 1 and grid[i][j] == 0 and i == j\n    # dp[i][j] = 0 if i == grid.length - 1 and j == grid.length - 1 and grid[i][j] == 0 and i != j\n    # dp[i][j] = 0 if i == grid.length - 1 and j == grid.length - 1 and grid[i][j] == 0 and i < j\n    # dp[i][j] = 0 if i == grid.length - 1 and j == grid.length - 1 and grid[i][j] == 0 and i > j\n    # dp[i][j] = 0 if i == grid.length - 1 and j == grid.length - 1 and grid[i",
    "    \n    # dp[i][j] = max number of times you can lower the bucket i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j-2])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j-2], dp[i-2][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j-2], dp[i-2][j-1], dp[i-2][j-2])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j-2], dp[i-2][j-1], dp[i-2][j-2], dp[i-2][j-3])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j-2], dp[i-2][j-1], dp[i-2][j-2], dp[i-2][j-3], dp[i-3][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1",
    "    \n    # dp[i][j] = max number of times you can lower the bucket\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] =",
    "    \n    # dp[i][j] = max number of times you can fill the well i,j with the bucket\n    # dp[i][j] = 0 if you cannot fill the well i,j with the bucket\n    # dp[i][j] = dp[i-1][j] + dp[i][j-1] if you can fill the well i,j with the bucket\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) if you can fill the well i,j with the bucket\n    # dp[i][j] = 0 if you cannot fill the well i,j with the bucket\n    # dp[i][j] = 0 if you cannot fill the well i,j with the bucket\n    # dp[i][j] = 0 if you cannot fill the well i,j with the bucket\n    # dp[i][j] = 0 if you cannot fill the well i,j with the bucket\n    # dp[i][j] = 0 if you cannot fill the well i,j with the bucket\n    # dp[i][j] = 0 if you cannot fill the well i,j with the bucket\n    # dp[i][j] = 0 if you cannot fill the well i,j with the bucket\n    # dp[i][j] = 0 if you cannot fill the well i,j with the bucket\n    # dp[i][j] = 0 if you cannot fill the well i,j with the bucket\n    # dp[i][j] = 0 if you cannot fill the well i,j with the bucket\n    # dp[i][j] = 0 if you cannot fill the well i,j with the bucket\n    # dp[i][j] = 0 if you cannot fill the well i,j with the bucket\n    # dp[i][j] = 0 if you cannot fill the well i,j with the bucket\n    # dp[i][j] = 0 if you cannot fill the well i,j with the bucket\n    # dp[i][j] = 0 if you cannot fill the well i,j with the bucket\n    # dp[i][j] = 0 if you cannot fill the",
    "    \n    # dp[i][j] = max number of times you can lower the bucket i, j\n    # dp[i][j] = 0 if you cannot lower the bucket i, j\n    # dp[i][j] = dp[i-1][j] + dp[i][j-1] if you can lower the bucket i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) if you can lower the bucket i, j\n    # dp[i][j] = 0 if you cannot lower the bucket i, j\n    # dp[i][j] = 0 if i == 0 and j == 0\n    # dp[i][j] = 0 if i == 0 and j == 0\n    # dp[i][j] = 0 if i == 0 and j == 0\n    # dp[i][j] = 0 if i == 0 and j == 0\n    # dp[i][j] = 0 if i == 0 and j == 0\n    # dp[i][j] = 0 if i == 0 and j == 0\n    # dp[i][j] = 0 if i == 0 and j == 0\n    # dp[i][j] = 0 if i == 0 and j == 0\n    # dp[i][j] = 0 if i == 0 and j == 0\n    # dp[i][j] = 0 if i == 0 and j == 0\n    # dp[i][j] = 0 if i == 0 and j == 0\n    # dp[i][j] = 0 if i == 0 and j == 0\n    # dp[i][j] = 0 if i == 0 and j == 0\n    # dp[i][j] = 0 if i == 0 and j == 0\n    # dp[i][j] = 0 if i == 0 and j == 0\n    # dp[i][j] = 0 if i == 0 and j == 0\n    # dp[i][j] = 0 if i == 0 and j == 0\n    # dp[i][j] = 0 if i == 0 and j == 0\n    # dp[i][",
    "    \n    # dp[i][j] = max number of times you can lower the bucket to empty the well\n    # i = row, j = column\n    dp = [[0] * (capacity + 1) for _ in range(len(grid))]\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                dp[i][j] = 1\n                for k in range(j, len(grid[i])):\n                    if grid[i][k] == 0:\n                        dp[i][j] = max(dp[i][j], dp[i][k] + 1)\n            else:\n                dp[i][j] = 0\n    return max(dp[i][j] for i in range(len(grid)) for j in range(len(grid[i])))\n",
    "    \n    # dp[i][j] = max number of times you can lower the bucket i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][",
    "    \n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    dp = [[0] * (capacity + 1) for _ in range(len(grid) + 1)]\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                dp[i+1][j+1] = max(dp[i][j], dp[i+1][j], dp[i][j+1]) + 1\n    return dp[len(grid)][len(grid[0])]\n",
    "    \n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) +",
    "    \n    # dp[i][j] = max number of times you can fill the well with i water units\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j",
    "    \n    # dp[i][j] = max number of times we can fill the well at (i, j)\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j-2]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j-2], dp[i-2][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j-2], dp[i-2][j-1], dp[i-2][j-2]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j-2], dp[i-2][j-1], dp[i-2][j-2], dp[i-2][j-3]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j-2], dp[i-2][j-1], dp[i-2][j-2], dp[i-2][j-3], dp[i-3][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1],",
    "    \n    # dp[i][j] = max number of times you can lower the bucket at (i,j)\n    # dp[i][j] = 0 if there is no bucket at (i,j)\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 if there is a bucket at (i,j)\n    # dp[i][j] = 0 if there is no bucket at (i,j)\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 if there is a bucket at (i,j)\n    # dp[i][j] = 0 if there is no bucket at (i,j)\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 if there is a bucket at (i,j)\n    # dp[i][j] = 0 if there is no bucket at (i,j)\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 if there is a bucket at (i,j)\n    # dp[i][j] = 0 if there is no bucket at (i,j)\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 if there is a bucket at (i,j)\n    # dp[i][j] = 0 if there is no bucket at (i,j)\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 if there is a bucket at (i,j)\n    # dp[i][j] = 0 if there is no bucket at (i,j)",
    "    \n    # dp[i][j] = max number of times you can fill the well at (i, j)\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp",
    "    \n    # count the number of times we need to lower the buckets\n    count = 0\n    \n    # for each row\n    for i in range(len(grid)):\n        # for each column\n        for j in range(len(grid[i])):\n            # if the bucket is full, we need to lower it\n            if grid[i][j] == capacity:\n                count += 1\n                \n    return count\n",
    "    \n    # dp[i][j] = max number of times you can lower the buckets to empty the well i, j\n    # dp[i][j] = 0 if you cannot empty the well i, j\n    # dp[i][j] = dp[i-1][j] + 1 if you can empty the well i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) if you can empty the well i, j\n    # dp[i][j] = 0 if you cannot empty the well i, j\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    dp = [[0] * (len(grid) + 1) for _ in range(len(grid[0]) + 1)]\n    for i in range(1, len(grid) + 1):\n        for j in range(1, len(grid[0]) + 1):\n            if grid[i - 1][j - 1] == 1:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + 1\n            else:\n                dp[i][j] = 0\n    return dp[len(grid)][len(grid[0])]\n",
    "    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n",
    "    \n    # dp[i][j] = max number of times we can lower the bucket i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j-2])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j-2], dp[i-2][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j-2], dp[i-1][j-3])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j-2], dp[i-1][j-3], dp[i-2][j-1], dp[i-2][j-2])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j-2], dp[i-1][j-3], dp[i-1][j-4])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j-2], dp[i-1][j-3], dp[i-1][j-4], dp[i-2",
    "    \n    # dp[i][j] = max number of times we can lower the bucket to empty the well\n    # i: row index\n    # j: column index\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] +",
    "    \n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) +",
    "    \n    # dp[i][j] = max number of times we can lower the bucket at i, j\n    # dp[i][j] = 0 if we can't lower the bucket at i, j\n    # dp[i][j] = max(dp[i][j-1], dp[i-1][j]) + 1 if we can lower the bucket at i, j\n    # dp[i][j] = 0 if we can't lower the bucket at i, j\n    # dp[i][j] = 0 if we can't lower the bucket at i, j\n    # dp[i][j] = 0 if we can't lower the bucket at i, j\n    # dp[i][j] = 0 if we can't lower the bucket at i, j\n    # dp[i][j] = 0 if we can't lower the bucket at i, j\n    # dp[i][j] = 0 if we can't lower the bucket at i, j\n    # dp[i][j] = 0 if we can't lower the bucket at i, j\n    # dp[i][j] = 0 if we can't lower the bucket at i, j\n    # dp[i][j] = 0 if we can't lower the bucket at i, j\n    # dp[i][j] = 0 if we can't lower the bucket at i, j\n    # dp[i][j] = 0 if we can't lower the bucket at i, j\n    # dp[i][j] = 0 if we can't lower the bucket at i, j\n    # dp[i][j] = 0 if we can't lower the bucket at i, j\n    # dp[i][j] = 0 if we can't lower the bucket at i, j\n    # dp[i][j] = 0 if we can't lower the bucket at i, j\n    # dp[i][j] = 0 if we can't lower the bucket at i, j\n    # dp[i][j] = 0 if we can't lower the bucket at i, j\n    # dp[i][j] = 0 if we can't lower the bucket at i, j\n    # dp[i][",
    "    \n    # dp[i][j] = max number of times we can lower the buckets to empty the well\n    # i: row\n    # j: column\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j]) + 1\n    # dp[i][j] = max(dp[i-1][j]) + 1\n    # dp[i][j] = max(dp[i-1][j]) + 1\n    # dp[i][j] = max(dp[i-1][j]) + 1\n    # dp[i][j] = max(dp[i-1][j]) + 1\n    # dp[i][j] = max(dp[i-1][j]) + 1\n    # dp[i][j] = max(dp[i-1][j]) + 1\n    # dp[i][j] = max(dp[i-1][j]) + 1\n    # dp[i][j] = max(dp[i-1][j]) + 1\n    # dp[i][j] = max(dp[i-1][j]) + 1\n    # dp[i][j] = max(dp[i-1][j]) + 1\n    # dp[i][j] = max(dp[i-1][j]) + 1\n    # dp[i][j] = max(dp[i-1][j]) + 1\n    # dp[i][j] = max(dp[i-1][j]) + 1\n    # dp[i][j] = max(dp[i-1][j]) + 1\n    # dp[i][j] = max(dp[i-1][j]) + 1\n    # dp[i][j] = max(dp[i-1][j]) + 1\n    # dp[i][j",
    "    \n    # dp[i][j] = max number of times we can fill the well i,j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][",
    "    \n    # dp[i][j] = max number of times you can lower the bucket at (i, j)\n    # dp[i][j] = max(dp[i][j], dp[i][j - 1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i - 1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i - 1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i][j - 1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i - 1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i - 1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i][j - 1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i - 1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i - 1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i][j - 1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i - 1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i - 1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i - 1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i][j - 1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i - 1][j] + 1)\n    # dp[i][j] = max(dp[i][j], d",
    "    \n    # dp[i][j] = max number of times you can lower the bucket at (i, j)\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i",
    "    \n    # dp[i][j] = max number of times we can lower the bucket at i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] - 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] - grid[i][j]\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] - grid[i][j] + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] - grid[i][j] + 1 - 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] - grid[i][j] + 1 - 1 + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] - grid[i][j] + 1 - 1 + 1 - 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] - grid[i][j] + 1 - 1 + 1 - 1 - 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] - grid[i][j] + 1 - 1 + 1 - 1 - 1 -",
    "    \n    # dp[i][j] = max number of times we can lower the buckets to empty the well i,j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] =",
    "    \n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) +",
    "    \n    # dp[i][j] = max number of times you can lower the bucket i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][",
    "    \n    # dp[i][j] = max number of times you can fill the well i with j units of water\n    dp = [[0] * (capacity + 1) for _ in range(len(grid))]\n    \n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                dp[i][j] = 1\n                for k in range(j + 1, len(grid[i])):\n                    dp[i][k] = max(dp[i][k], dp[i][j] + 1)\n                for k in range(j - 1, -1, -1):\n                    dp[i][k] = max(dp[i][k], dp[i][j] + 1)\n    \n    return max(dp[-1])\n",
    "    \n    # dp[i][j] = max number of times you can lower the bucket i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0",
    "    \n    # dp[i][j] = max number of times we can empty the well at (i, j)\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j",
    "    \n    # dp[i][j] = max number of times you can fill the well i,j with the bucket\n    # dp[i][j] = 0 if the well i,j is empty\n    # dp[i][j] = 1 if the well i,j is full\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if the well i,j is not full\n    # dp[i][j] = 0 if the well i,j is full\n    \n    dp = [[0] * (capacity + 1) for _ in range(capacity + 1)]\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                dp[0][0] += 1\n            else:\n                dp[0][0] = 0\n            for k in range(1, capacity + 1):\n                if grid[i][j] == 1:\n                    dp[k][0] = max(dp[k][0], dp[k - 1][0] + 1)\n                else:\n                    dp[k][0] = 0\n                for l in range(1, capacity + 1):\n                    if grid[i][j] == 1:\n                        dp[k][l] = max(dp[k][l], dp[k - 1][l] + 1)\n                    else:\n                        dp[k][l] = 0\n    return dp[capacity][capacity]\n",
    "    \n    # dp[i][j] = max number of times you can lower the bucket to empty the well i, j\n    # dp[i][j] = 0 if the well i, j is empty\n    # dp[i][j] = 1 if the well i, j is full\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1 if the well i, j is not empty\n    # dp[i][j] = 0 if the well i, j is not empty\n    # dp[i][j] = 0 if the well i, j is full\n    # dp[i][j] = 0 if the well i, j is empty\n    # dp[i][j] = 0 if the well i, j is full\n    # dp[i][j] = 0 if the well i, j is empty\n    # dp[i][j] = 0 if the well i, j is full\n    # dp[i][j] = 0 if the well i, j is empty\n    # dp[i][j] = 0 if the well i, j is full\n    # dp[i][j] = 0 if the well i, j is empty\n    # dp[i][j] = 0 if the well i, j is full\n    # dp[i][j] = 0 if the well i, j is empty\n    # dp[i][j] = 0 if the well i, j is full\n    # dp[i][j] = 0 if the well i, j is empty\n    # dp[i][j] = 0 if the well i, j is full\n    # dp[i][j] = 0 if the well i, j is empty\n    # dp[i][j] = 0 if the well i, j is full\n    # dp[i][j] = 0 if the well i, j is empty\n    # dp[i][j] = 0 if the well i, j is full\n    # dp[i][j] = 0 if the well i, j is empty\n    # dp[i][j] =",
    "    \n    # dp[i][j] = max number of times you can fill the well i,j with the bucket\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j-2]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j-2], dp[i-2][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j-2], dp[i-2][j-1], dp[i-2][j-2]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j-2], dp[i-2][j-1], dp[i-2][j-2], dp[i-2][j-3]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j-2], dp[i-2][j-1], dp[i-2][j-2], dp[i-2][j-3], dp[i-3][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1],",
    "    \n    # dp[i][j] = max number of times you can lower the bucket at (i, j)\n    # dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1",
    "    \n    # dp[i][j] = max number of times we can lower the bucket i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if dp[i-1][j] > dp[i][j-1] else dp[i][j-1]\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if dp[i-1][j] > dp[i][j-1] else dp[i][j-1]\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if dp[i-1][j] > dp[i][j-1] else dp[i][j-1]\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if dp[i-1][j] > dp[i][j-1] else dp[i][j-1]\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if dp[i-1][j] > dp[i][j-1] else dp[i][j-1]\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if dp[i-1][j] > dp[i][j-1] else dp[i][j-1]\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if dp[i-1][j] > dp[i][j-1] else d",
    "    \n    # dp[i][j] = max number of times we can fill the well i,j with capacity\n    # dp[i][j] = 0 if we cannot fill the well i,j with capacity\n    # dp[i][j] = dp[i-1][j] + 1 if we can fill the well i,j with capacity\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) if we can fill the well i,j with capacity\n    # dp[i][j] = 0 if we cannot fill the well i,j with capacity\n    # dp[i][j] = 0 if we cannot fill the well i,j with capacity\n    # dp[i][j] = 0 if we cannot fill the well i,j with capacity\n    # dp[i][j] = 0 if we cannot fill the well i,j with capacity\n    # dp[i][j] = 0 if we cannot fill the well i,j with capacity\n    # dp[i][j] = 0 if we cannot fill the well i,j with capacity\n    # dp[i][j] = 0 if we cannot fill the well i,j with capacity\n    # dp[i][j] = 0 if we cannot fill the well i,j with capacity\n    # dp[i][j] = 0 if we cannot fill the well i,j with capacity\n    # dp[i][j] = 0 if we cannot fill the well i,j with capacity\n    # dp[i][j] = 0 if we cannot fill the well i,j with capacity\n    # dp[i][j] = 0 if we cannot fill the well i,j with capacity\n    # dp[i][j] = 0 if we cannot fill the well i,j with capacity\n    # dp[i][j] = 0 if we cannot fill the well i,j with capacity\n    # dp[i][j] = 0 if we cannot fill the well i,j with capacity\n    # dp[i][j] = 0 if we cannot fill the well i,j with capacity\n    # dp[i][j] = 0 if we cannot fill the well i,j",
    "    \n    # dp[i][j] = max number of times you can lower the bucket at (i, j)\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0 else 0\n    # dp[i][j] = max(dp[i-1][j], dp",
    "    \n    # dp[i][j] = max number of times you can lower the bucket i to empty the well j\n    dp = [[0] * (capacity + 1) for _ in range(len(grid))]\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                dp[i][j] = dp[i][j - 1] + 1\n            else:\n                dp[i][j] = 0\n    \n    # dp[i][j] = max number of times you can lower the bucket i to empty the well j\n    # dp[i][j] = max(dp[i][j - 1], dp[i - 1][j])\n    # dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]) + 1\n    # dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]) + max(dp[i][j - 1], dp[i - 1][j])\n    # dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]) + max(dp[i][j - 1], dp[i - 1][j]) + 1\n    # dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]) + max(dp[i][j - 1], dp[i - 1][j]) + max(dp[i][j - 1], dp[i - 1][j]) + 1\n    # dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]) + max(dp[i][j - 1], dp[i - 1][j]) + max(dp[i][j - 1], dp[i - 1][j]) + max(dp[i][j - 1], dp[i - 1][j]) + 1\n    # dp[i][j] = max(dp[i][j - 1], dp[i - 1][j]) + max(dp",
    "    \n    # dp[i][j] = max number of times we can fill the well with i buckets\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    dp = [[0] * (capacity + 1) for _ in range(len(grid) + 1)]\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                dp[i+1][j+1] = max(dp[i][j], dp[i+1][j]) + 1\n            else:\n                dp[i+1][j+1] = max(dp[i][j], dp[i+1][j])\n    return dp[len(grid)][len(grid[0])]\n",
    "    \n    # dp[i][j] = max number of times we can lower the buckets to empty the well\n    # i = row, j = column\n    dp = [[0] * (capacity + 1) for _ in range(len(grid))]\n    \n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                dp[i][j] = 1\n                for k in range(j, len(grid[i])):\n                    if grid[i][k] == 0:\n                        dp[i][j] = max(dp[i][j], dp[i][k] + 1)\n                for k in range(i, len(grid)):\n                    if grid[k][j] == 0:\n                        dp[i][j] = max(dp[i][j], dp[k][j] + 1)\n    \n    return max(dp[i][j] for i in range(len(grid)) for j in range(len(grid[i])))\n",
    "    \n    # dp[i][j] = max number of times you can fill the well at (i, j)\n    # dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + dp[i][j-1] + 1)\n    # dp[i][j] = max(",
    "    \n    # dp[i][j] = max number of times we can fill the well i,j with the given capacity\n    # dp[i][j] = 0 if we cannot fill the well i,j with the given capacity\n    # dp[i][j] = dp[i-1][j] + 1 if we can fill the well i,j with the given capacity\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) if we can fill the well i,j with the given capacity\n    # dp[i][j] = 0 if we cannot fill the well i,j with the given capacity\n    dp = [[0] * (capacity + 1) for _ in range(len(grid))]\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                dp[i][j] = dp[i-1][j] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[-1][-1]\n",
    "    \n    # dp[i][j] = max number of times you can lower the bucket i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] - 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] - grid[i][j]\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] - grid[i][j] + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] - grid[i][j] + 1 - 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] - grid[i][j] + 1 - 1 + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] - grid[i][j] + 1 - 1 + 1 - 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] - grid[i][j] + 1 - 1 + 1 - 1 - 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] - grid[i][j] + 1 - 1 + 1 - 1 - 1 - 1",
    "    \n    # dp[i][j] = max number of times you can lower the bucket i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] - 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] - grid[i][j]\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] - grid[i][j] + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] - grid[i][j] + 1 - 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] - grid[i][j] + 1 - 1 + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] - grid[i][j] + 1 - 1 + 1 - 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] - grid[i][j] + 1 - 1 + 1 - 1 - 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] - grid[i][j] + 1 - 1 + 1 - 1 - 1 - 1",
    "    \n    # dp[i][j] = max number of times you can lower the bucket i to empty the well j\n    # dp[i][j] = 0 if you cannot lower the bucket i to empty the well j\n    # dp[i][j] = dp[i-1][j] + 1 if you can lower the bucket i to empty the well j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) if you can lower the bucket i to empty the well j\n    # dp[i][j] = 0 if you cannot lower the bucket i to empty the well j\n    # dp[i][j] = 0 if you cannot lower the bucket i to empty the well j\n    # dp[i][j] = 0 if you cannot lower the bucket i to empty the well j\n    # dp[i][j] = 0 if you cannot lower the bucket i to empty the well j\n    # dp[i][j] = 0 if you cannot lower the bucket i to empty the well j\n    # dp[i][j] = 0 if you cannot lower the bucket i to empty the well j\n    # dp[i][j] = 0 if you cannot lower the bucket i to empty the well j\n    # dp[i][j] = 0 if you cannot lower the bucket i to empty the well j\n    # dp[i][j] = 0 if you cannot lower the bucket i to empty the well j\n    # dp[i][j] = 0 if you cannot lower the bucket i to empty the well j\n    # dp[i][j] = 0 if you cannot lower the bucket i to empty the well j\n    # dp[i][j] = 0 if you cannot lower the bucket i to empty the well j\n    # dp[i][j] = 0 if you cannot lower the bucket i to empty the well j\n    # dp[i][j] = 0 if you cannot lower the bucket i to empty the well j\n    # dp[i][j] = 0 if you cannot lower the bucket i to empty the well j\n    # dp[i][j] = 0 if you cannot lower the bucket i to empty the well j\n",
    "    \n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) +",
    "    \n    # dp[i][j] = max number of times you can lower the bucket i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0",
    "    \n    # dp[i][j] = max number of times we can lower the bucket at i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j",
    "    \n    # dp[i][j] = max number of times we can lower the bucket at (i, j)\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp",
    "    \n    # dp[i][j] = max number of times you can lower the buckets\n    # dp[i][j] = 0 if you cannot lower the buckets\n    # dp[i][j] = dp[i-1][j] + 1 if you can lower the buckets\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) if you can lower the buckets\n    # dp[i][j] = 0 if you cannot lower the buckets\n    # dp[i][j] = 0 if you cannot lower the buckets\n    dp = [[0] * (capacity + 1) for _ in range(len(grid))]\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                dp[i][j] = dp[i-1][j] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[len(grid)-1][capacity]\n",
    "    \n    # dp[i][j] = max number of times you can lower the buckets\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0 else",
    "    \n    # dp[i][j] = max number of times we can lower the buckets\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] - 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] - grid[i][j]\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] - grid[i][j] + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] - grid[i][j] + 1 - 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] - grid[i][j] + 1 - 1 + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] - grid[i][j] + 1 - 1 + 1 - 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] - grid[i][j] + 1 - 1 + 1 - 1 - 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j] - grid[i][j] + 1 - 1 + 1 - 1 - 1 - 1\n    #",
    "    \n    # dp[i][j] = max number of times you can lower the bucket to empty the well\n    # i is the row, j is the column\n    dp = [[0] * (capacity + 1) for _ in range(len(grid))]\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                dp[i][j] = 1\n                for k in range(1, capacity + 1):\n                    dp[i][j] = max(dp[i][j], dp[i][j - 1] + k)\n    return max(dp[-1])\n",
    "    \n    # dp[i][j] = max number of times you can empty the well at (i, j)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j]",
    "    \n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) +",
    "    \n    # dp[i][j] = max number of times you can lower the bucket i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j]",
    "    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n",
    "    \n    # dp[i][j] = max number of times you can lower the buckets to empty the well i,j\n    # dp[i][j] = max(dp[i][j-1], dp[i-1][j], dp[i-1][j-1])\n    # dp[i][j] = max(dp[i][j-1], dp[i-1][j]) + max(dp[i-1][j-1], dp[i-1][j])\n    # dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n    # dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n    # dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n    # dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n    # dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n    # dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n    # dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n    # dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n    # dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n    # dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n    # dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n    # dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n    # dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n",
    "    \n    # dp[i][j] = max number of times we can lower the bucket at i,j\n    # dp[i][j] = 0 if we cannot lower the bucket at i,j\n    # dp[i][j] = dp[i-1][j] + dp[i][j-1] if we can lower the bucket at i,j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) if we cannot lower the bucket at i,j\n    # dp[i][j] = 0 if i,j is out of bounds\n    # dp[i][j] = 0 if i,j is not a well\n    # dp[i][j] = 0 if i,j is a well but the bucket is empty\n    # dp[i][j] = 0 if i,j is a well but the bucket is full\n    # dp[i][j] = 0 if i,j is a well but the bucket is not empty and not full\n    # dp[i][j] = 0 if i,j is a well but the bucket is not empty and not full\n    # dp[i][j] = 0 if i,j is a well but the bucket is not empty and not full\n    # dp[i][j] = 0 if i,j is a well but the bucket is not empty and not full\n    # dp[i][j] = 0 if i,j is a well but the bucket is not empty and not full\n    # dp[i][j] = 0 if i,j is a well but the bucket is not empty and not full\n    # dp[i][j] = 0 if i,j is a well but the bucket is not empty and not full\n    # dp[i][j] = 0 if i,j is a well but the bucket is not empty and not full\n    # dp[i][j] = 0 if i,j is a well but the bucket is not empty and not full\n    # dp[i][j] = 0 if i,j is a well but the bucket is not empty and not full\n    # dp[i][j] = 0 if i,j is",
    "    \n    # dp[i][j] = max number of times you can fill the well i,j with the bucket\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = dp[i-1][j]\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j]",
    "    \n    # dp[i][j] = max number of times you can lower the bucket to empty the well\n    # i = row\n    # j = column\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    ",
    "    \n    # dp[i][j] = max number of times you can fill the well at (i, j) with the bucket\n    # dp[i][j] = 0 if the well is empty\n    # dp[i][j] = 1 if the well is full\n    dp = [[0] * (capacity + 1) for _ in range(len(grid))]\n    \n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                dp[i][j] = 1\n                \n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 0:\n                dp[i][j] = 0\n                \n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            for k in range(capacity + 1):\n                if grid[i][j] == 1 and k < dp[i][j]:\n                    dp[i][j] = k\n                    \n    return max(dp)\n",
    "    \n    # dp[i][j] = max number of times we can fill the well at (i, j)\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][",
    "    \n    # dp[i][j] = max number of times you can lower the bucket to empty the well\n    # i = row\n    # j = column\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    ",
    "    \n    # dp[i][j] = max number of times we can lower the bucket at i, j\n    # dp[i][j] = 0 if we cannot lower the bucket at i, j\n    # dp[i][j] = dp[i-1][j] + dp[i][j-1] if we can lower the bucket at i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) if we cannot lower the bucket at i, j\n    # dp[i][j] = 0 if i, j are out of bounds\n    # dp[i][j] = 0 if i, j are not valid\n    # dp[i][j] = 0 if i, j are not valid\n    dp = [[0] * (capacity + 1) for _ in range(len(grid) + 1)]\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                dp[i+1][j+1] = max(dp[i][j], dp[i][j+1])\n            else:\n                dp[i+1][j+1] = 0\n    return dp[len(grid)][capacity]\n",
    "    \n    # dp[i][j] = max number of times we can lower the bucket i, j\n    # dp[i][j] = 0 if we cannot lower the bucket i, j\n    # dp[i][j] = dp[i-1][j] + 1 if we can lower the bucket i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) if we can lower the bucket i, j\n    # dp[i][j] = 0 if we cannot lower the bucket i, j\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    dp = [[0] * (capacity + 1) for _ in range(len(grid) + 1)]\n    for i in range(1, len(grid) + 1):\n        for j in range(1, len(grid[0]) + 1):\n            if grid[i - 1][j - 1] == 1:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + 1\n            else:\n                dp[i][j] = 0\n    return dp[len(grid)][len(grid[0])]\n",
    "    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n",
    "    \n    # dp[i][j] = max number of times you can lower the bucket i to make the well j empty\n    dp = [[0] * (capacity + 1) for _ in range(len(grid))]\n    \n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                dp[i][0] = 1\n                \n            for k in range(1, capacity + 1):\n                if grid[i][j] == 1 and k >= dp[i][k - 1]:\n                    dp[i][k] = dp[i][k - 1] + 1\n                else:\n                    dp[i][k] = max(dp[i][k], dp[i][k - 1])\n    \n    return max(dp[i][capacity] for i in range(len(grid)))\n",
    "    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    #",
    "    \n    # dp[i][j] = max number of times you can empty the well at (i, j)\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-",
    "    \n    # dp[i][j] = max number of times we can fill the well i with j units of water\n    dp = [[0] * (capacity + 1) for _ in range(len(grid))]\n    \n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                dp[i][j] = 1\n                for k in range(1, capacity + 1):\n                    if i - 1 >= 0 and grid[i - 1][j] == 1:\n                        dp[i][j] = max(dp[i][j], dp[i - 1][j] + 1)\n                    if i + 1 < len(grid) and grid[i + 1][j] == 1:\n                        dp[i][j] = max(dp[i][j], dp[i + 1][j] + 1)\n                    if j - 1 >= 0 and grid[i][j - 1] == 1:\n                        dp[i][j] = max(dp[i][j], dp[i][j - 1] + 1)\n                    if j + 1 < len(grid[i]) and grid[i][j + 1] == 1:\n                        dp[i][j] = max(dp[i][j], dp[i][j + 1] + 1)\n    \n    return max(dp[-1][-1], dp[-1][-2])\n",
    "    \n    # dp[i][j] = max number of times you can lower the bucket at (i, j)\n    # dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1",
    "    \n    # count the number of times we need to lower the buckets\n    # for each well\n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                count += 1\n                \n    # for each well, we need to lower the buckets\n    # the number of times we need to lower the buckets\n    # is the number of times we need to lower the buckets\n    # for each well\n    return count\n",
    "    \n    # dp[i][j] = max number of times you can lower the bucket at i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i",
    "    \n    # dp[i][j] = max number of times you can lower the bucket i to empty the well j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if",
    "    \n    # dp[i][j] = max number of times you can lower the bucket at (i, j)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j]",
    "    \n    # dp[i][j] = max number of times you can lower the bucket i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j-2])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j-2], dp[i-2][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j-2], dp[i-1][j-3])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j-2], dp[i-1][j-3], dp[i-2][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j-2], dp[i-1][j-3], dp[i-1][j-4])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j-2], dp[i-1][j-3], dp[i-1][j-4], dp[i-2][j-1])\n    # dp[",
    "    \n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) +",
    "    \n    # dp[i][j] = max number of times you can lower the bucket at (i, j)\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp",
    "    \n    # dp[i][j] = max number of times we can fill the well i,j with the given capacity\n    # dp[i][j] = 0 if we cannot fill the well i,j with the given capacity\n    # dp[i][j] = dp[i-1][j] + dp[i][j-1] if we can fill the well i,j with the given capacity\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) if we cannot fill the well i,j with the given capacity\n    # dp[i][j] = 0 if we cannot fill the well i,j with the given capacity\n    # dp[i][j] = 0 if we cannot fill the well i,j with the given capacity\n    # dp[i][j] = 0 if we cannot fill the well i,j with the given capacity\n    # dp[i][j] = 0 if we cannot fill the well i,j with the given capacity\n    # dp[i][j] = 0 if we cannot fill the well i,j with the given capacity\n    # dp[i][j] = 0 if we cannot fill the well i,j with the given capacity\n    # dp[i][j] = 0 if we cannot fill the well i,j with the given capacity\n    # dp[i][j] = 0 if we cannot fill the well i,j with the given capacity\n    # dp[i][j] = 0 if we cannot fill the well i,j with the given capacity\n    # dp[i][j] = 0 if we cannot fill the well i,j with the given capacity\n    # dp[i][j] = 0 if we cannot fill the well i,j with the given capacity\n    # dp[i][j] = 0 if we cannot fill the well i,j with the given capacity\n    # dp[i][j] = 0 if we cannot fill the well i,j with the given capacity\n    # dp[i][j] = 0 if we cannot fill the well i,j with the given capacity\n    # dp[i][j] = 0 if we cannot fill the well i,j with the",
    "    # TODO: Write your code here\n    if len(grid) == 0:\n        return 0\n    \n    if len(grid[0]) == 0:\n        return 0\n    \n    if len(grid[0]) == 1:\n        return 1\n    \n    if len(grid[0]) == 2:\n        return 2\n    \n    if len(grid[0]) == 3:\n        return 3\n    \n    if len(grid[0]) == 4:\n        return 4\n    \n    if len(grid[0]) == 5:\n        return 5\n    \n    if len(grid[0]) == 6:\n        return 6\n    \n    if len(grid[0]) == 7:\n        return 7\n    \n    if len(grid[0]) == 8:\n        return 8\n    \n    if len(grid[0]) == 9:\n        return 9\n    \n    if len(grid[0]) == 10:\n        return 10\n    \n    if len(grid[0]) == 11:\n        return 11\n    \n    if len(grid[0]) == 12:\n        return 12\n    \n    if len(grid[0]) == 13:\n        return 13\n    \n    if len(grid[0]) == 14:\n        return 14\n    \n    if len(grid[0]) == 15:\n        return 15\n    \n    if len(grid[0]) == 16:\n        return 16\n    \n    if len(grid[0]) == 17:\n        return 17\n    \n    if len(grid[0]) == 18:\n        return 18\n    \n    if len(grid[0]) == 19:\n        return 19\n    \n    if len(grid[0]) == 20:\n        return 20\n    \n    if len(grid[0]) == 21:\n        return 21\n    \n    if len(grid[0]) == 22:\n        return 22\n    \n    if len(grid[0]) == 23:\n        return 23\n    \n    if len(grid[0]) == 24:\n        return 24\n    \n    if len(grid[0]) == 25:\n        return 25\n    \n    if len(grid[0]) == 26:\n        return 26\n    \n",
    "    \n    # dp[i][j] = max number of times we can fill the well i,j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp",
    "    \n    # dp[i][j] = max number of times you can lower the bucket to empty the well\n    # i = row, j = column\n    dp = [[0] * (capacity + 1) for _ in range(len(grid))]\n    \n    # initialize the dp table\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = 0\n    \n    # iterate through each row\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            # if the current cell is a well, then we need to check all the cells\n            # in the row\n            if grid[i][j] == 1:\n                for k in range(len(grid[i])):\n                    # if the current cell is a well, then we need to check all the cells\n                    # in the row\n                    if grid[i][k] == 1:\n                        # if the current cell is a well, then we need to check all the cells\n                        # in the row\n                        if k < j:\n                            # if the current cell is a well, then we need to check all the cells\n                            # in the row\n                            dp[i][j] = max(dp[i][j], dp[i][k] + dp[k][j])\n                        else:\n                            # if the current cell is a well, then we need to check all the cells\n                            # in the row\n                            dp[i][j] = max(dp[i][j], dp[i][k] + dp[k][j])\n    \n    # return the max number of times you can lower the bucket to empty the well\n    return max(dp[i][j] for i in range(len(grid)) for j in range(len(grid[i])))\n",
    "    \n    # dp[i][j] = max number of times you can empty the well i,j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][",
    "    \n    # dp[i][j] = max number of times you can empty the well at (i, j)\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j",
    "    \n    # dp[i][j] = max number of times you can lower the bucket at i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i",
    "    \n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) +",
    "    \n    # dp[i][j] = max number of times you can lower the bucket at (i, j)\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0 else 0\n    # dp[i][j] = max(dp[i-1][j], dp",
    "    \n    # dp[i][j] = max number of times we can lower the bucket at i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i",
    "    \n    # dp[i][j] = max number of times we can lower the bucket i, j\n    # dp[i][j] = 0 if we can't lower the bucket i, j\n    # dp[i][j] = dp[i-1][j] + 1 if we can lower the bucket i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) if we can lower the bucket i, j\n    # dp[i][j] = 0 if we can't lower the bucket i, j\n    \n    dp = [[0] * (capacity + 1) for _ in range(capacity + 1)]\n    \n    for i in range(1, len(grid)):\n        for j in range(1, len(grid[0])):\n            if grid[i][j] == 1:\n                dp[0][0] += 1\n            else:\n                dp[0][0] = max(dp[0][0], dp[i-1][j] + 1)\n                dp[0][1] = max(dp[0][1], dp[i][j-1])\n                dp[0][2] = max(dp[0][2], dp[i-1][j-1])\n                dp[0][3] = max(dp[0][3], dp[i][j-1])\n                dp[0][4] = max(dp[0][4], dp[i-1][j-1])\n                dp[0][5] = max(dp[0][5], dp[i][j-1])\n                dp[0][6] = max(dp[0][6], dp[i-1][j-1])\n                dp[0][7] = max(dp[0][7], dp[i][j-1])\n                dp[0][8] = max(dp[0][8], dp[i-1][j-1])\n                dp[0][9] = max(dp[0][9], dp[i][j-1])\n                dp[0][10] = max(dp[0][10], dp[i",
    "    \n    # dp[i][j] = max number of times you can fill the well i,j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][",
    "    \n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j],",
    "    \n    # dp[i][j] = max number of times you can fill the well i,j with the given capacity\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0 else 0\n    \n    dp = [[0] * (capacity + 1) for _ in range(len(grid) + 1)]\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                dp[i+1][j+1] = max(dp[i][j], dp[i+1][j]) + 1\n            else:\n                dp[i+1][j+1] = max(dp[i][j], dp[i+1][j])\n    return dp[len(grid)][len(grid[0])]\n",
    "    \n    # dp[i][j] = max number of times you can lower the bucket at (i, j)\n    # dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1",
    "    \n    # dp[i][j] = max number of times you can lower the bucket to empty the well\n    # i: row\n    # j: column\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][",
    "    \n    # dp[i][j] = max number of times you can lower the bucket to empty the well\n    # i = row, j = column\n    dp = [[0] * (capacity + 1) for _ in range(len(grid))]\n    \n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                dp[i][j] = dp[i][j-1] + 1\n            else:\n                dp[i][j] = 0\n    \n    # dp[i][j] = max number of times you can lower the bucket to empty the well\n    # i = row, j = column\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n            else:\n                dp[i][j] = 0\n    \n    return dp[-1][-1]\n",
    "    \n    # dp[i][j] = max number of times you can lower the bucket at i,j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i",
    "    \n    # dp[i][j] = max number of times we can lower the buckets\n    # dp[i][j] = 0 if we can't lower the buckets\n    # dp[i][j] = 1 if we can lower the buckets\n    dp = [[0] * (capacity + 1) for _ in range(len(grid))]\n    \n    # dp[i][j] = max number of times we can lower the buckets\n    # dp[i][j] = 0 if we can't lower the buckets\n    # dp[i][j] = 1 if we can lower the buckets\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                dp[i][j] = 1\n                for k in range(j + 1, len(grid[i])):\n                    dp[i][j] = max(dp[i][j], dp[i][k] + 1)\n                for k in range(i + 1, len(grid)):\n                    dp[i][j] = max(dp[i][j], dp[k][j] + 1)\n    \n    return dp[0][0]\n",
    "    \n    # dp[i][j] = max number of times you can lower the bucket at (i, j)\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0 else 0\n    # dp[i][j] = max(dp[i-1][j], dp",
    "    \n    # dp[i][j] = max number of times you can lower the buckets\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = dp[i-1][j]\n    # dp[i][j] = dp[i][j-1]\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n    # dp[i][j] = 0\n",
    "    \n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) +",
    "    \n    # dp[i][j] = max number of times we can lower the bucket i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][",
    "    \n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) +",
    "    \n    # dp[i][j] = max number of times you can lower the buckets\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = dp[i-1][j]\n    # dp[i][j] = 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-",
    "    \n    # dp[i][j] = max number of times you can fill the well at (i, j)\n    # dp[i][j] = 0 if you cannot fill the well at (i, j)\n    # dp[i][j] = dp[i-1][j] + 1 if you can fill the well at (i, j)\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) if you can fill the well at (i, j)\n    # dp[i][j] = 0 if you cannot fill the well at (i, j)\n    dp = [[0] * (len(grid[0]) + 1) for _ in range(len(grid) + 1)]\n    for i in range(len(grid) + 1):\n        dp[i][0] = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                dp[i+1][j+1] = max(dp[i][j], dp[i+1][j]) + 1\n            else:\n                dp[i+1][j+1] = 0\n    return dp[len(grid)][len(grid[0])]\n",
    "    \n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n",
    "    \n    # dp[i][j] = max number of times you can lower the bucket at (i,j)\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp",
    "    \n    # dp[i][j] = max number of times you can lower the bucket i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == 0",
    "    \n    # dp[i][j] = max number of times you can fill the well at (i, j)\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp",
    "    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n",
    "    \n    # dp[i][j] = max number of times you can fill the well i,j with the bucket\n    # dp[i][j] = 0 if you cannot fill the well i,j with the bucket\n    # dp[i][j] = dp[i-1][j] + 1 if you can fill the well i,j with the bucket\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) if you can fill the well i,j with the bucket\n    # dp[i][j] = 0 if you cannot fill the well i,j with the bucket\n    # dp[i][j] = 0 if you cannot fill the well i,j with the bucket\n    # dp[i][j] = 0 if you cannot fill the well i,j with the bucket\n    # dp[i][j] = 0 if you cannot fill the well i,j with the bucket\n    # dp[i][j] = 0 if you cannot fill the well i,j with the bucket\n    # dp[i][j] = 0 if you cannot fill the well i,j with the bucket\n    # dp[i][j] = 0 if you cannot fill the well i,j with the bucket\n    # dp[i][j] = 0 if you cannot fill the well i,j with the bucket\n    # dp[i][j] = 0 if you cannot fill the well i,j with the bucket\n    # dp[i][j] = 0 if you cannot fill the well i,j with the bucket\n    # dp[i][j] = 0 if you cannot fill the well i,j with the bucket\n    # dp[i][j] = 0 if you cannot fill the well i,j with the bucket\n    # dp[i][j] = 0 if you cannot fill the well i,j with the bucket\n    # dp[i][j] = 0 if you cannot fill the well i,j with the bucket\n    # dp[i][j] = 0 if you cannot fill the well i,j with the bucket\n    # dp[i][j] = 0 if you cannot fill the well i,j with the bucket\n",
    "    \n    # dp[i][j] = max number of times we can lower the bucket i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    dp = [[0] * (capacity + 1) for _ in range(capacity + 1)]\n    for i in range(1, len(grid)):\n        for j in range(1, len(grid[i])):\n            if grid[i][j] == 1:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[-1][-1]\n",
    "    \n    # dp[i][j] = max number of times you can fill the well at (i, j)\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp",
    "    # grid[i][j] -> 0 | 1\n    # 0 means empty, 1 means full\n    # for each row, we need to find the max number of times we can fill the well\n    # with the max number of buckets we can put in the well\n    # we can fill the well with the max number of buckets we can put in the well\n    # we can fill the well with the max number of buckets we can put in the well\n    # we can fill the well with the max number of buckets we can put in the well\n    # we can fill the well with the max number of buckets we can put in the well\n    # we can fill the well with the max number of buckets we can put in the well\n    # we can fill the well with the max number of buckets we can put in the well\n    # we can fill the well with the max number of buckets we can put in the well\n    # we can fill the well with the max number of buckets we can put in the well\n    # we can fill the well with the max number of buckets we can put in the well\n    # we can fill the well with the max number of buckets we can put in the well\n    # we can fill the well with the max number of buckets we can put in the well\n    # we can fill the well with the max number of buckets we can put in the well\n    # we can fill the well with the max number of buckets we can put in the well\n    # we can fill the well with the max number of buckets we can put in the well\n    # we can fill the well with the max number of buckets we can put in the well\n    # we can fill the well with the max number of buckets we can put in the well\n    # we can fill the well with the max number of buckets we can put in the well\n    # we can fill the well with the max number of buckets we can put in the well\n    # we can fill the well with the max number of buckets we can put in the well\n    # we can fill the well with the max number of buckets we can put in the well\n    # we can fill the well with the max number of buckets we can put in the well\n    # we can fill the well with the max number of buckets we can put in the well\n    # we can fill the well with the max number of buckets",
    "    \n    # dp[i][j] = max number of times you can lower the bucket i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][",
    "    \n    # dp[i][j] = max number of times you can lower the bucket at (i, j)\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 and grid[i-1][j] == 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 and grid[i][j-1] == 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 and grid[i-1][j] == 0 and grid[i][j-1] == 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 and grid[i-1][j] == 0 and grid[i][j-1] == 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 and grid[i-1][j] == 0 and grid[i][j-1] == 0 and grid[i][j-1] == 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 and grid[i-1][j] == 0 and grid[i][j-1] == 0 and grid[i][j",
    "    \n    # dp[i][j] = max number of times you can fill the well i,j with the bucket\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp",
    "    \n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j",
    "    \n    # dp[i][j] = max number of times you can fill the well at (i, j)\n    # dp[i][j] = 0 if the well is empty\n    # dp[i][j] = 1 if the well is full\n    # dp[i][j] = max(dp[i][j-1], dp[i-1][j]) + 1 if the well is not empty\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if the well is not empty\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if the well is not empty\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if the well is not empty\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if the well is not empty\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if the well is not empty\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if the well is not empty\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if the well is not empty\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if the well is not empty\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if the well is not empty\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if the well is not empty\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if",
    "    # dp[i][j] = max number of times you can empty the well at (i, j)\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], d",
    "    \n    # dp[i][j] = max number of times you can lower the buckets\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else",
    "    \n    # dp[i][j] = max number of times you can lower the buckets\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else",
    "    \n    # count the number of times we need to lower the buckets\n    # for each well\n    count = 0\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                count += 1\n                \n    # for each well, we need to lower the bucket\n    # as many times as the number of times we need to lower the bucket\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                count += 1\n                \n    return count\n",
    "    \n    # dp[i][j] = max number of times you can lower the bucket to empty the well\n    # dp[i][j] = 0 if you cannot empty the well\n    # dp[i][j] = dp[i-1][j] + 1 if you can empty the well\n    dp = [[0 for _ in range(capacity + 1)] for _ in range(len(grid) + 1)]\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                dp[i+1][j+1] = dp[i][j] + 1\n            else:\n                dp[i+1][j+1] = 0\n    return dp[len(grid)][len(grid[0])]\n",
    "    \n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) +",
    "    \n    # dp[i][j] = max number of times we can lower the bucket i, j\n    # dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1",
    "    \n    # dp[i][j] = max number of times you can lower the bucket i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1\n    # dp[i][j] = 0 if grid[i][j] == 0\n    \n    dp = [[0] * (capacity + 1) for _ in range(len(grid))]\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                dp[i][j] = dp[i-1][j] + 1\n            else:\n                dp[i][j] = 0\n    \n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1\n    # dp[i][j] = 0 if grid[i][j] == 0\n    \n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1\n    # dp[i][j] = 0 if grid[i][j] == 0\n    \n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1\n    # dp[i][j] = 0 if grid[i][j] == 0\n    \n    # dp[i][j] = max(dp[",
    "    \n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) +",
    "    \n    # dp[i][j] = max number of times you can empty the well at (i, j)\n    # dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], d",
    "    # dp[i][j] = max number of times you can lower the buckets to empty the well i,j\n    # dp[i][j] = dp[i-1][j] + dp[i][j-1] if grid[i][j] == 1\n    # dp[i][j] = 0 otherwise\n    dp = [[0] * (capacity + 1) for _ in range(len(grid) + 1)]\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                dp[i+1][j] = dp[i][j] + dp[i][j-1]\n    return dp[len(grid)][len(grid[0])]\n",
    "    \n    # dp[i][j] = max number of times you can lower the bucket i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1 else 0\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0 else 0\n    dp = [[0] * (capacity + 1) for _ in range(len(grid) + 1)]\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                dp[i+1][j+1] = max(dp[i][j], dp[i+1][j]) + 1\n            else:\n                dp[i+1][j+1] = 0\n    return dp[len(grid)][len(grid[0])]\n",
    "    \n    # dp[i][j] = max number of times you can lower the bucket at (i, j)\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1 if grid[i][j] == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == grid.length or j == grid[i].length\n    # dp[i][j] = 0 if grid[i][j] == 0\n    # dp[i][j] = 0 if grid[i][j] == 1\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == grid.length or j == grid[i].length\n    # dp[i][j] = 0 if grid[i][j] == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == grid.length or j == grid[i].length\n    # dp[i][j] = 0 if grid[i][j] == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == grid.length or j == grid[i].length\n    # dp[i][j] = 0 if grid[i][j] == 0\n    # dp[i][j] = 0 if i == 0 or j == 0\n    # dp[i][j] = 0 if i == grid.length or j == grid[i].length\n    # dp[i][j] = 0 if grid[i][j] == 0\n    # dp[i][j] = 0 if i == 0 or",
    "    \n    # dp[i][j] = max number of times you can fill the well i,j with capacity\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[",
    "    \n    # dp[i][j] = max number of times you can lower the buckets\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] =",
    "    \n    # dp[i][j] = max number of times we can lower the bucket i, j\n    # dp[i][j] = 0 if we cannot lower the bucket i, j\n    # dp[i][j] = dp[i-1][j] + 1 if we can lower the bucket i, j\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) if we can lower the bucket i, j\n    # dp[i][j] = 0 if we cannot lower the bucket i, j\n    \n    # dp[i][j] = 0 if we cannot lower the bucket i, j\n    dp = [[0] * (capacity + 1) for _ in range(len(grid))]\n    \n    # dp[i][j] = 0 if we cannot lower the bucket i, j\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                dp[i][j] = 1\n                \n    # dp[i][j] = dp[i-1][j] + 1 if we can lower the bucket i, j\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n                \n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) if we can lower the bucket i, j\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n                \n    # dp[i][j] = 0 if we cannot lower the bucket i, j\n    return max(dp[-1][-1], dp[-1][-2])\n    \n",
    "    \n    # dp[i][j] = max number of times we can lower the bucket at (i, j)\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1], dp[i-1][j], dp[i][j-1], dp[i-1][j-",
    "    \n    # dp[i][j] = max number of times you can empty the well at (i, j)\n    # dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i][j-1] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j] + 1)\n    # dp[i][j] = max(dp[i][j], dp[i-1][j-1] + 1)\n    # dp[i][j] = max",
    "    \n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + 1\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    # dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n    dp = [[0] * (capacity + 1) for _ in range(len(grid) + 1)]\n    for i in range(len(grid)):\n        for j in range(len(grid[i])):\n            if grid[i][j] == 1:\n                dp[i+1][j+1] = max(dp[i+1][j], dp[i][j+1], dp[i+1][j+1]) + 1\n                dp[i+1][j+1] = max(dp[i+1][j], dp[i][j+1]) + 1\n                dp[i+1][j+1] = max(dp[i+1][j], dp[i][j+1], dp[i+1][j+1])\n    return dp[len(grid)][len(grid[0])]\n"
  ],
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ]
}