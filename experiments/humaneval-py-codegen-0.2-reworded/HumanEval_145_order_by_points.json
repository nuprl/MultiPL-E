{
  "name": "HumanEval_145_order_by_points",
  "language": "py",
  "prompt": "from typing import List\n\ndef order_by_points(nums: List[int]) -> List[int]:\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12])\n    [-1, -11, 1, -12, 11]\n    >>> order_by_points([])\n    []\n    \"\"\"\n",
  "tests": "def check(candidate):\n    assert candidate([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    assert candidate([1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457]\n    assert candidate([]) == []\n    assert candidate([1, -11, -32, 43, 54, -98, 2, -3]) == [-3, -32, -98, -11, 1, 2, 43, 54]\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9]\n    assert candidate([0, 6, 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6]\n\ndef test_check():\n    check(order_by_points)\n\ntest_check()\n",
  "completions": [
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)), reverse=True)\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)), reverse=True)\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(c) for c in str(x)), reverse=True)\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)), reverse=True)\n    return nums\n",
    "    return sorted(nums, key=lambda x: sum(int(y) for y in str(x)))\n",
    "    nums.sort(key=lambda x: sum(int(n) for n in str(x)), reverse=True)\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    nums.sort(key=lambda num: sum(int(x) for x in str(num)))\n    return nums\n",
    "    nums.sort(key=lambda num: sum(int(digit) for digit in str(num)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    return sorted(nums, key=lambda num: sum(int(i) for i in str(num)))\n",
    "    return sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)), reverse=True)\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)), reverse=True)\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(y) for y in str(x)), reverse=True)\n    return nums\n",
    "    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(c) for c in str(x)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    return sorted(nums, key=lambda x: sum(int(c) for c in str(x)))\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(c) for c in str(x)), reverse=True)\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)), reverse=True)\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(c) for c in str(x)))\n    return nums\n",
    "    return sorted(nums, key=lambda num: sum(int(num) for num in str(num)))\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(c) for c in str(x)), reverse=True)\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)), reverse=True)\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)), reverse=True)\n    return nums\n",
    "    def get_digit_sum(num: int) -> int:\n        return sum(int(c) for c in str(num))\n\n    return sorted(nums, key=get_digit_sum)\n",
    "    nums.sort(key=lambda x: sum(int(n) for n in str(x)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(n) for n in str(x)), reverse=True)\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(n) for n in str(x)))\n    return nums\n",
    "    def get_sum_of_digits(n: int) -> int:\n        return sum(int(d) for d in str(n))\n\n    def get_index(n: int) -> int:\n        return nums.index(n)\n\n    return sorted(nums, key=get_sum_of_digits, reverse=True)\n",
    "    return sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    return sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    return sorted(nums, key=lambda num: sum(int(num) for num in str(num)))\n",
    "    nums.sort(key=lambda num: sum(int(x) for x in str(num)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(c) for c in str(x)), reverse=True)\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    return sorted(nums, key=lambda num: sum(int(i) for i in str(num)))\n",
    "    nums.sort(key=lambda x: sum(int(y) for y in str(x)))\n    return nums\n",
    "    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n",
    "    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    return sorted(nums, key=lambda num: sum(int(num) for num in str(num)))\n",
    "    nums.sort(key=lambda num: sum(int(digit) for digit in str(num)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)), reverse=True)\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    nums.sort(key=lambda num: sum(int(x) for x in str(num)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(n) for n in str(x)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)), reverse=True)\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)), reverse=True)\n    return nums\n",
    "    return sorted(nums, key=lambda num: sum(int(i) for i in str(num)))\n",
    "    return sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    return sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    return sorted(nums, key=lambda num: sum(int(x) for x in str(num)))\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n",
    "    def get_sum_of_digits(n: int) -> int:\n        return sum(int(d) for d in str(n))\n\n    return sorted(nums, key=get_sum_of_digits)\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    return sorted(nums, key=lambda num: sum(int(i) for i in str(num)))\n",
    "    nums.sort(key=lambda x: sum(int(c) for c in str(x)), reverse=True)\n    return nums\n",
    "    return sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n",
    "    nums.sort(key=lambda x: sum(int(c) for c in str(x)), reverse=True)\n    return nums\n",
    "    return sorted(nums, key=lambda x: sum(int(c) for c in str(x)))\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    return sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(y) for y in str(x)), reverse=True)\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    return sorted(nums, key=lambda x: sum(int(c) for c in str(x)))\n",
    "    return sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n",
    "    def get_digit_sum(n: int) -> int:\n        return sum(int(c) for c in str(n))\n\n    return sorted(nums, key=get_digit_sum)\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    return sorted(nums, key=lambda num: sum(int(i) for i in str(num)))\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n",
    "    nums.sort(key=lambda x: sum(int(y) for y in str(x)), reverse=True)\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)), reverse=True)\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)), reverse=True)\n    return nums\n",
    "    return sorted(nums, key=lambda num: sum(int(x) for x in str(num)))\n",
    "    return sorted(nums, key=lambda num: sum(int(i) for i in str(num)))\n",
    "    return sorted(nums, key=lambda num: sum(int(x) for x in str(num)))\n",
    "    return sorted(nums, key=lambda num: sum(int(i) for i in str(num)))\n",
    "    nums.sort(key=lambda x: sum(int(n) for n in str(x)), reverse=True)\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(y) for y in str(x)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    return sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)), reverse=True)\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(y) for y in str(x)), reverse=True)\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    return sorted(nums, key=lambda x: sum(int(n) for n in str(x)))\n",
    "    nums.sort(key=lambda x: sum(int(y) for y in str(x)), reverse=True)\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)), reverse=True)\n    return nums\n",
    "    return sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)), reverse=True)\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)), reverse=True)\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(n) for n in str(x)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n",
    "    return sorted(nums, key=lambda num: sum(int(num) for num in str(num)))\n",
    "    return sorted(nums, key=lambda num: sum(int(num) for num in str(num)))\n",
    "    def get_digit_sum(n: int) -> int:\n        return sum(int(d) for d in str(n))\n\n    return sorted(nums, key=get_digit_sum)\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    return sorted(nums, key=lambda num: sum(int(x) for x in str(num)))\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)), reverse=True)\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(c) for c in str(x)), reverse=True)\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    return sorted(nums, key=lambda num: sum(int(num) for num in str(num)))\n",
    "    nums.sort(key=lambda x: sum(int(n) for n in str(x)), reverse=True)\n    return nums\n",
    "    return sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    return sorted(nums, key=lambda num: sum(int(num) for num in str(num)))\n",
    "    nums.sort(key=lambda x: sum(int(c) for c in str(x)), reverse=True)\n    return nums\n",
    "    return sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n",
    "    nums.sort(key=lambda x: sum(int(n) for n in str(x)), reverse=True)\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(y) for y in str(x)))\n    return nums\n",
    "    return sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n",
    "    nums.sort(key=lambda num: sum(int(num) for num in str(num)))\n    return nums\n",
    "    return sorted(nums, key=lambda x: sum(int(c) for c in str(x)))\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)), reverse=True)\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    return sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n",
    "    return sorted(nums, key=lambda num: sum(int(num) for num in str(num)))\n",
    "    def get_digit_sum(n: int) -> int:\n        return sum(int(x) for x in str(n))\n\n    return sorted(nums, key=get_digit_sum)\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    return sorted(nums, key=lambda x: sum(int(n) for n in str(x)))\n",
    "    nums.sort(key=lambda num: sum(int(digit) for digit in str(num)))\n    return nums\n",
    "    return sorted(nums, key=lambda num: sum(int(i) for i in str(num)))\n",
    "    nums.sort(key=lambda x: sum(int(n) for n in str(x)))\n    return nums\n",
    "    return sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n",
    "    return sorted(nums, key=lambda x: sum(int(n) for n in str(x)))\n",
    "    return sorted(nums, key=lambda num: sum(int(num) for num in str(num)))\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)), reverse=True)\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)), reverse=True)\n    return nums\n",
    "    return sorted(nums, key=lambda num: sum(int(x) for x in str(num)))\n",
    "    nums.sort(key=lambda x: sum(int(y) for y in str(x)), reverse=True)\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)), reverse=True)\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)), reverse=True)\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(c) for c in str(x)), reverse=True)\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(y) for y in str(x)))\n    return nums\n",
    "    return sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n",
    "    return sorted(nums, key=lambda num: sum(int(i) for i in str(num)))\n",
    "    nums.sort(key=lambda x: sum(int(n) for n in str(x)), reverse=True)\n    return nums\n",
    "    return sorted(nums, key=lambda num: sum(int(num) for num in str(num)))\n",
    "    return sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)), reverse=True)\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)), reverse=True)\n    return nums\n",
    "    return sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    nums.sort(key=lambda num: sum(int(digit) for digit in str(num)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n",
    "    nums.sort(key=lambda x: sum(int(y) for y in str(x)), reverse=True)\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(y) for y in str(x)))\n    return nums\n",
    "    def get_digit(num: int) -> int:\n        return int(num % 10)\n\n    def get_sum_of_digits(num: int) -> int:\n        return sum(get_digit(num) for num in nums)\n\n    def get_index(num: int) -> int:\n        return nums.index(num)\n\n    return sorted(nums, key=get_sum_of_digits, reverse=True)\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    return sorted(nums, key=lambda x: sum(int(i) for i in str(x)))\n",
    "    return sorted(nums, key=lambda x: sum(int(c) for c in str(x)))\n",
    "    return sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n",
    "    return sorted(nums, key=lambda num: sum(int(digit) for digit in str(num)))\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)), reverse=True)\n    return nums\n",
    "    return sorted(nums, key=lambda num: sum(int(x) for x in str(num)))\n",
    "    nums.sort(key=lambda x: sum(int(i) for i in str(x)))\n    return nums\n",
    "    return sorted(nums, key=lambda num: sum(int(i) for i in str(num)))\n",
    "    return sorted(nums, key=lambda num: sum(int(x) for x in str(num)))\n"
  ],
  "stop_tokens": [
    "\ndef",
    "\n#",
    "\nif",
    "\nclass"
  ]
}