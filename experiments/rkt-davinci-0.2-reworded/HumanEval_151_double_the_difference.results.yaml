name: HumanEval_151_double_the_difference
language: rkt
results:
- program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ 5 4)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10 -20 -30)) 0)\n    (check-equal? (candidate (list -1 -2\
    \ 8)) 0)\n    (check-equal? (candidate (list 0.2 3 5)) 34)\n    (check-equal?\
    \ (candidate (list -9 -7 -5 -3 -1 1 3 5 7 9)) 165)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpp4he2qr3.rkt:18:11: square: unbound identifier\n  in: square\n\
    \  location...:\n   /tmp/tmpp4he2qr3.rkt:18:11\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (positive?\
    \ (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate double_the_difference))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list 5 4)) 25)\n    (check-equal? (candidate\
    \ (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10 -20 -30)) 0)\n\
    \    (check-equal? (candidate (list -1 -2 8)) 0)\n    (check-equal? (candidate\
    \ (list 0.2 3 5)) 34)\n    (check-equal? (candidate (list -9 -7 -5 -3 -1 1 3 5\
    \ 7 9)) 165)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp7zaglyfb.rkt:18:11: square: unbound identifier\n  in: square\n\
    \  location...:\n   /tmp/tmp7zaglyfb.rkt:18:11\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(and (odd? (first lst))\n          (positive? (first\
    \ lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest\
    \ lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ double_the_difference))\n    (check-equal? (candidate (list )) 0)\n    (check-equal?\
    \ (candidate (list 5 4)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3))\
    \ 0)\n    (check-equal? (candidate (list -10 -20 -30)) 0)\n    (check-equal? (candidate\
    \ (list -1 -2 8)) 0)\n    (check-equal? (candidate (list 0.2 3 5)) 34)\n    (check-equal?\
    \ (candidate (list -9 -7 -5 -3 -1 1 3 5 7 9)) 165)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp1krgkj7z.rkt:19:11: square: unbound identifier\n  in: square\n\
    \  location...:\n   /tmp/tmp1krgkj7z.rkt:19:11\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (+ (square (first lst)) (double_the_difference (rest lst)))]\n    [else\
    \ (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate\
    \ (list )) 0)\n    (check-equal? (candidate (list 5 4)) 25)\n    (check-equal?\
    \ (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10 -20\
    \ -30)) 0)\n    (check-equal? (candidate (list -1 -2 8)) 0)\n    (check-equal?\
    \ (candidate (list 0.2 3 5)) 34)\n    (check-equal? (candidate (list -9 -7 -5\
    \ -3 -1 1 3 5 7 9)) 165)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpyfpv6km_.rkt:18:9: square: unbound identifier\n  in: square\n \
    \ location...:\n   /tmp/tmpyfpv6km_.rkt:18:9\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(and (odd? (first lst)) (positive? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ 5 4)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10 -20 -30)) 0)\n    (check-equal? (candidate (list -1 -2\
    \ 8)) 0)\n    (check-equal? (candidate (list 0.2 3 5)) 34)\n    (check-equal?\
    \ (candidate (list -9 -7 -5 -3 -1 1 3 5 7 9)) 165)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp9ywk4u5s.rkt:18:11: square: unbound identifier\n  in: square\n\
    \  location...:\n   /tmp/tmp9ywk4u5s.rkt:18:11\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (positive?\
    \ (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate double_the_difference))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list 5 4)) 25)\n    (check-equal? (candidate\
    \ (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10 -20 -30)) 0)\n\
    \    (check-equal? (candidate (list -1 -2 8)) 0)\n    (check-equal? (candidate\
    \ (list 0.2 3 5)) 34)\n    (check-equal? (candidate (list -9 -7 -5 -3 -1 1 3 5\
    \ 7 9)) 165)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp8773ywi7.rkt:18:11: square: unbound identifier\n  in: square\n\
    \  location...:\n   /tmp/tmp8773ywi7.rkt:18:11\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (+ (square (first lst)) (double_the_difference (rest lst)))]\n    [else\
    \ (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate\
    \ (list )) 0)\n    (check-equal? (candidate (list 5 4)) 25)\n    (check-equal?\
    \ (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10 -20\
    \ -30)) 0)\n    (check-equal? (candidate (list -1 -2 8)) 0)\n    (check-equal?\
    \ (candidate (list 0.2 3 5)) 34)\n    (check-equal? (candidate (list -9 -7 -5\
    \ -3 -1 1 3 5 7 9)) 165)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp80iv426m.rkt:18:9: square: unbound identifier\n  in: square\n \
    \ location...:\n   /tmp/tmp80iv426m.rkt:18:9\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(and (odd? (first lst)) (positive? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ 5 4)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10 -20 -30)) 0)\n    (check-equal? (candidate (list -1 -2\
    \ 8)) 0)\n    (check-equal? (candidate (list 0.2 3 5)) 34)\n    (check-equal?\
    \ (candidate (list -9 -7 -5 -3 -1 1 3 5 7 9)) 165)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpyaxbem5h.rkt:18:11: square: unbound identifier\n  in: square\n\
    \  location...:\n   /tmp/tmpyaxbem5h.rkt:18:11\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ 5 4)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10 -20 -30)) 0)\n    (check-equal? (candidate (list -1 -2\
    \ 8)) 0)\n    (check-equal? (candidate (list 0.2 3 5)) 34)\n    (check-equal?\
    \ (candidate (list -9 -7 -5 -3 -1 1 3 5 7 9)) 165)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpscbyc1ee.rkt:18:11: square: unbound identifier\n  in: square\n\
    \  location...:\n   /tmp/tmpscbyc1ee.rkt:18:11\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ 5 4)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10 -20 -30)) 0)\n    (check-equal? (candidate (list -1 -2\
    \ 8)) 0)\n    (check-equal? (candidate (list 0.2 3 5)) 34)\n    (check-equal?\
    \ (candidate (list -9 -7 -5 -3 -1 1 3 5 7 9)) 165)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp3zj0o0qj.rkt:18:11: square: unbound identifier\n  in: square\n\
    \  location...:\n   /tmp/tmp3zj0o0qj.rkt:18:11\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ 5 4)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10 -20 -30)) 0)\n    (check-equal? (candidate (list -1 -2\
    \ 8)) 0)\n    (check-equal? (candidate (list 0.2 3 5)) 34)\n    (check-equal?\
    \ (candidate (list -9 -7 -5 -3 -1 1 3 5 7 9)) 165)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpvkozfncr.rkt:18:11: square: unbound identifier\n  in: square\n\
    \  location...:\n   /tmp/tmpvkozfncr.rkt:18:11\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (positive?\
    \ (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate double_the_difference))\n    (check-equal? (candidate (list ))\
    \ 0)\n    (check-equal? (candidate (list 5 4)) 25)\n    (check-equal? (candidate\
    \ (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10 -20 -30)) 0)\n\
    \    (check-equal? (candidate (list -1 -2 8)) 0)\n    (check-equal? (candidate\
    \ (list 0.2 3 5)) 34)\n    (check-equal? (candidate (list -9 -7 -5 -3 -1 1 3 5\
    \ 7 9)) 165)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpgje7ctl4.rkt:18:11: square: unbound identifier\n  in: square\n\
    \  location...:\n   /tmp/tmpgje7ctl4.rkt:18:11\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ 5 4)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10 -20 -30)) 0)\n    (check-equal? (candidate (list -1 -2\
    \ 8)) 0)\n    (check-equal? (candidate (list 0.2 3 5)) 34)\n    (check-equal?\
    \ (candidate (list -9 -7 -5 -3 -1 1 3 5 7 9)) 165)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpz82lv1cy.rkt:18:11: square: unbound identifier\n  in: square\n\
    \  location...:\n   /tmp/tmpz82lv1cy.rkt:18:11\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ 5 4)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10 -20 -30)) 0)\n    (check-equal? (candidate (list -1 -2\
    \ 8)) 0)\n    (check-equal? (candidate (list 0.2 3 5)) 34)\n    (check-equal?\
    \ (candidate (list -9 -7 -5 -3 -1 1 3 5 7 9)) 165)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp6yq9y2t1.rkt:18:11: square: unbound identifier\n  in: square\n\
    \  location...:\n   /tmp/tmp6yq9y2t1.rkt:18:11\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(and (odd? (first lst)) (positive? (first lst)))\n\
    \     (+ (square (first lst)) (double_the_difference (rest lst)))]\n    [else\
    \ (double_the_difference (rest lst))]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate double_the_difference))\n    (check-equal? (candidate\
    \ (list )) 0)\n    (check-equal? (candidate (list 5 4)) 25)\n    (check-equal?\
    \ (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal? (candidate (list -10 -20\
    \ -30)) 0)\n    (check-equal? (candidate (list -1 -2 8)) 0)\n    (check-equal?\
    \ (candidate (list 0.2 3 5)) 34)\n    (check-equal? (candidate (list -9 -7 -5\
    \ -3 -1 1 3 5 7 9)) 165)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp1mwb9ia1.rkt:18:9: square: unbound identifier\n  in: square\n \
    \ location...:\n   /tmp/tmp1mwb9ia1.rkt:18:9\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ 5 4)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10 -20 -30)) 0)\n    (check-equal? (candidate (list -1 -2\
    \ 8)) 0)\n    (check-equal? (candidate (list 0.2 3 5)) 34)\n    (check-equal?\
    \ (candidate (list -9 -7 -5 -3 -1 1 3 5 7 9)) 165)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpb0nbvmes.rkt:18:11: square: unbound identifier\n  in: square\n\
    \  location...:\n   /tmp/tmpb0nbvmes.rkt:18:11\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ 5 4)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10 -20 -30)) 0)\n    (check-equal? (candidate (list -1 -2\
    \ 8)) 0)\n    (check-equal? (candidate (list 0.2 3 5)) 34)\n    (check-equal?\
    \ (candidate (list -9 -7 -5 -3 -1 1 3 5 7 9)) 165)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp2g1u80l3.rkt:18:11: square: unbound identifier\n  in: square\n\
    \  location...:\n   /tmp/tmp2g1u80l3.rkt:18:11\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ 5 4)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10 -20 -30)) 0)\n    (check-equal? (candidate (list -1 -2\
    \ 8)) 0)\n    (check-equal? (candidate (list 0.2 3 5)) 34)\n    (check-equal?\
    \ (candidate (list -9 -7 -5 -3 -1 1 3 5 7 9)) 165)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp8hxkbhhq.rkt:18:11: square: unbound identifier\n  in: square\n\
    \  location...:\n   /tmp/tmp8hxkbhhq.rkt:18:11\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ 5 4)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10 -20 -30)) 0)\n    (check-equal? (candidate (list -1 -2\
    \ 8)) 0)\n    (check-equal? (candidate (list 0.2 3 5)) 34)\n    (check-equal?\
    \ (candidate (list -9 -7 -5 -3 -1 1 3 5 7 9)) 165)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpult89gwm.rkt:18:11: square: unbound identifier\n  in: square\n\
    \  location...:\n   /tmp/tmpult89gwm.rkt:18:11\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; Given a list of numbers, return the sum of squares\
    \ of the numbers\n;; in the list that are odd. Ignore numbers that are negative\
    \ or not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>>\
    \ (double_the_difference (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference\
    \ (list 9 -2))\n;; 81\n;; >>> (double_the_difference (list 0))\n;; 0\n;; If the\
    \ input list is empty, return 0.\n(define (double_the_difference lst)\n  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n\
    \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list\
    \ 5 4)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
    \ (candidate (list -10 -20 -30)) 0)\n    (check-equal? (candidate (list -1 -2\
    \ 8)) 0)\n    (check-equal? (candidate (list 0.2 3 5)) 34)\n    (check-equal?\
    \ (candidate (list -9 -7 -5 -3 -1 1 3 5 7 9)) 165)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpgofdv940.rkt:18:11: square: unbound identifier\n  in: square\n\
    \  location...:\n   /tmp/tmpgofdv940.rkt:18:11\n"
  exit_code: 1
  status: Exception
