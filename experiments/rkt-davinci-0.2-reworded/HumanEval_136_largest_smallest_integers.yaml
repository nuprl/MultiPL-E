name: HumanEval_136_largest_smallest_integers
language: rkt
prompt: "#lang racket\n\n;; Create a function that returns a list (a, b), where 'a'\
  \ is\n;; the largest of negative integers, and 'b' is the smallest\n;; of positive\
  \ integers in a list.\n;; If there is no negative or positive integers, return them\
  \ as #f.\n;; Examples:\n;; >>> (largest_smallest_integers (list 2 4 1 3 5 7))\n\
  ;; (list #f 1)\n;; >>> (largest_smallest_integers (list ))\n;; (list #f #f)\n;;\
  \ >>> (largest_smallest_integers (list 0))\n;; (list #f #f)\n(define (largest_smallest_integers\
  \ lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_smallest_integers))\n\
  \    (check-equal? (candidate (list 2 4 1 3 5 7)) (list #f 1))\n    (check-equal?\
  \ (candidate (list 2 4 1 3 5 7 0)) (list #f 1))\n    (check-equal? (candidate (list\
  \ 1 3 2 4 5 6 -2)) (list -2 1))\n    (check-equal? (candidate (list 4 5 3 6 2 7\
  \ -7)) (list -7 2))\n    (check-equal? (candidate (list 7 3 8 4 9 2 5 -9)) (list\
  \ -9 2))\n    (check-equal? (candidate (list )) (list #f #f))\n    (check-equal?\
  \ (candidate (list 0)) (list #f #f))\n    (check-equal? (candidate (list -1 -3 -5\
  \ -6)) (list -1 #f))\n    (check-equal? (candidate (list -1 -3 -5 -6 0)) (list -1\
  \ #f))\n    (check-equal? (candidate (list -6 -4 -4 -3 1)) (list -3 1))\n    (check-equal?\
  \ (candidate (list -6 -4 -4 -3 -100 1)) (list -3 1))\n))\n\n(test-humaneval)"
completions: ["  (define (largest_negative lst)\n    (cond\n      [(empty? lst) #f]\n\
    \      [(and (negative? (first lst))\n            (or (not (negative? (second\
    \ lst)))\n                (empty? (rest lst))))\n       (first lst)]\n      [else\
    \ (largest_negative (rest lst))]))\n  (define (smallest_positive lst)\n    (cond\n\
    \      [(empty? lst) #f]\n      [(and (positive? (first lst))\n            (or\
    \ (not (positive? (second lst)))\n                (empty? (rest lst))))\n    \
    \   (first lst)]\n      [else (smallest_positive (rest lst))]))\n  (list (largest_negative\
    \ lst) (smallest_positive lst)))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n\
    \    [(and (positive? (first lst)) (negative? (first lst))) (list #f #f)]\n  \
    \  [(positive? (first lst)) (list (largest_smallest_integers (rest lst)) (first\
    \ lst))]\n    [(negative? (first lst)) (list (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n    [else (list #f #f)]))\n", "  (define (largest_negative lst)\n\
    \    (cond\n      [(null? lst) #f]\n      [(< (car lst) 0) (max (car lst) (largest_negative\
    \ (cdr lst)))]\n      [else (largest_negative (cdr lst))]))\n  (define (smallest_positive\
    \ lst)\n    (cond\n      [(null? lst) #f]\n      [(> (car lst) 0) (min (car lst)\
    \ (smallest_positive (cdr lst)))]\n      [else (smallest_positive (cdr lst))]))\n\
    \  (list (largest_negative lst) (smallest_positive lst)))\n", "  (define (largest_smallest_integers_helper\
    \ lst largest smallest)\n    (cond\n      [(empty? lst) (list largest smallest)]\n\
    \      [(and (negative? (first lst)) (or (not largest) (&gt; (first lst) largest)))\n\
    \       (largest_smallest_integers_helper (rest lst) (first lst) smallest)]\n\
    \      [(and (positive? (first lst)) (or (not smallest) (&lt; (first lst) smallest)))\n\
    \       (largest_smallest_integers_helper (rest lst) largest (first lst))]\n \
    \     [else (largest_smallest_integers_helper (rest lst) largest smallest)]))\n\
    \  (largest_smallest_integers_helper lst #f #f))\n", "  (cond\n    [(empty? lst)\
    \ (list #f #f)]\n    [(and (positive? (first lst)) (negative? (first lst))) (list\
    \ #f #f)]\n    [(positive? (first lst)) (list (first lst) (first lst))]\n    [(negative?\
    \ (first lst)) (list (first lst) (first lst))]\n    [else (list #f #f)]))\n",
  "  (define (largest_negative_integer lst)\n    (cond ((null? lst) #f)\n        \
    \  ((and (integer? (car lst)) (< (car lst) 0))\n           (max (car lst) (largest_negative_integer\
    \ (cdr lst))))\n          (else (largest_negative_integer (cdr lst)))))\n  (define\
    \ (smallest_positive_integer lst)\n    (cond ((null? lst) #f)\n          ((and\
    \ (integer? (car lst)) (> (car lst) 0))\n           (min (car lst) (smallest_positive_integer\
    \ (cdr lst))))\n          (else (smallest_positive_integer (cdr lst)))))\n  (list\
    \ (largest_negative_integer lst) (smallest_positive_integer lst)))\n", "  (define\
    \ (largest_smallest_integers_iter lst largest smallest)\n    (cond\n      [(null?\
    \ lst) (list largest smallest)]\n      [(and (positive? (car lst)) (or (not (positive?\
    \ smallest)) (< (car lst) smallest)))\n       (largest_smallest_integers_iter\
    \ (cdr lst) largest (car lst))]\n      [(and (negative? (car lst)) (or (not (negative?\
    \ largest)) (> (car lst) largest)))\n       (largest_smallest_integers_iter (cdr\
    \ lst) (car lst) smallest)]\n      [else (largest_smallest_integers_iter (cdr\
    \ lst) largest smallest)]))\n  (largest_smallest_integers_iter lst #f #f))\n",
  "  (define (largest_negative lst)\n    (cond ((null? lst) #f)\n          ((and (integer?\
    \ (car lst)) (< (car lst) 0))\n           (max (car lst) (largest_negative (cdr\
    \ lst))))\n          (else (largest_negative (cdr lst)))))\n  (define (smallest_positive\
    \ lst)\n    (cond ((null? lst) #f)\n          ((and (integer? (car lst)) (> (car\
    \ lst) 0))\n           (min (car lst) (smallest_positive (cdr lst))))\n      \
    \    (else (smallest_positive (cdr lst)))))\n  (list (largest_negative lst) (smallest_positive\
    \ lst)))\n", "  (let ([negs (filter (lambda (x) (negative? x)) lst)]\n       \
    \ [pos (filter (lambda (x) (positive? x)) lst)])\n    (if (empty? negs)\n    \
    \    (list #f (min pos))\n        (list (max negs) (if (empty? pos) #f (min pos))))))\n",
  "  (define (largest_negative lst)\n    (cond ((null? lst) #f)\n          ((and (negative?\
    \ (car lst)) (not (null? (cdr lst))))\n           (if (negative? (car (cdr lst)))\n\
    \               (largest_negative (cdr lst))\n               (car lst)))\n   \
    \       ((negative? (car lst)) (car lst))\n          (else (largest_negative (cdr\
    \ lst)))))\n  (define (smallest_positive lst)\n    (cond ((null? lst) #f)\n  \
    \        ((and (positive? (car lst)) (not (null? (cdr lst))))\n           (if\
    \ (positive? (car (cdr lst)))\n               (smallest_positive (cdr lst))\n\
    \               (car lst)))\n          ((positive? (car lst)) (car lst))\n   \
    \       (else (smallest_positive (cdr lst)))))\n  (list (largest_negative lst)\
    \ (smallest_positive lst)))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n  \
    \  [(and (negative? (first lst)) (positive? (first lst))) (list #f #f)]\n    [(negative?\
    \ (first lst)) (list (first lst) (largest_smallest_integers (rest lst)))]\n  \
    \  [(positive? (first lst)) (list (largest_smallest_integers (rest lst)) (first\
    \ lst))]\n    [else (list #f #f)]))\n", "  (define (largest_smallest_integers_helper\
    \ lst largest smallest)\n    (cond\n      [(empty? lst) (list largest smallest)]\n\
    \      [(and (positive? (first lst)) (or (not smallest) (&lt; (first lst) smallest)))\n\
    \       (largest_smallest_integers_helper (rest lst) largest (first lst))]\n \
    \     [(and (negative? (first lst)) (or (not largest) (&gt; (first lst) largest)))\n\
    \       (largest_smallest_integers_helper (rest lst) (first lst) smallest)]\n\
    \      [else (largest_smallest_integers_helper (rest lst) largest smallest)]))\n\
    \  (largest_smallest_integers_helper lst #f #f))\n</code>\n", "  (define (largest_negative\
    \ lst)\n    (cond\n      [(null? lst) #f]\n      [(and (negative? (car lst)) (not\
    \ (negative? (cadr lst)))) (car lst)]\n      [else (largest_negative (cdr lst))]))\n\
    \  (define (smallest_positive lst)\n    (cond\n      [(null? lst) #f]\n      [(and\
    \ (positive? (car lst)) (not (positive? (cadr lst)))) (car lst)]\n      [else\
    \ (smallest_positive (cdr lst))]))\n  (list (largest_negative lst) (smallest_positive\
    \ lst)))\n", "  (define (largest_negative lst)\n    (cond\n      [(empty? lst)\
    \ #f]\n      [(and (negative? (first lst))\n            (or (not (negative? (second\
    \ lst)))\n                (empty? (rest lst))))\n       (first lst)]\n      [else\
    \ (largest_negative (rest lst))]))\n  (define (smallest_positive lst)\n    (cond\n\
    \      [(empty? lst) #f]\n      [(and (positive? (first lst))\n            (or\
    \ (not (positive? (second lst)))\n                (empty? (rest lst))))\n    \
    \   (first lst)]\n      [else (smallest_positive (rest lst))]))\n  (list (largest_negative\
    \ lst) (smallest_positive lst)))\n", "  (define (largest_negative lst)\n    (cond\
    \ ((null? lst) #f)\n          ((and (negative? (car lst))\n                (or\
    \ (not (negative? (cadr lst)))\n                    (and (negative? (cadr lst))\n\
    \                         (> (car lst) (cadr lst)))))\n           (car lst))\n\
    \          (else (largest_negative (cdr lst)))))\n  (define (smallest_positive\
    \ lst)\n    (cond ((null? lst) #f)\n          ((and (positive? (car lst))\n  \
    \              (or (not (positive? (cadr lst)))\n                    (and (positive?\
    \ (cadr lst))\n                         (< (car lst) (cadr lst)))))\n        \
    \   (car lst))\n          (else (smallest_positive (cdr lst)))))\n  (list (largest_negative\
    \ lst) (smallest_positive lst)))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n\
    \    [(and (positive? (first lst)) (negative? (first lst))) (list #f #f)]\n  \
    \  [(positive? (first lst)) (cons (first lst) (largest_smallest_integers (rest\
    \ lst)))]\n    [(negative? (first lst)) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (define\
    \ (largest_negative lst)\n    (cond\n      [(empty? lst) #f]\n      [(and (negative?\
    \ (first lst)) (not (negative? (first (rest lst))))) (first lst)]\n      [else\
    \ (largest_negative (rest lst))]))\n  (define (smallest_positive lst)\n    (cond\n\
    \      [(empty? lst) #f]\n      [(and (positive? (first lst)) (not (positive?\
    \ (first (rest lst))))) (first lst)]\n      [else (smallest_positive (rest lst))]))\n\
    \  (list (largest_negative lst) (smallest_positive lst)))\n", "  (define (largest_negative\
    \ lst)\n    (cond\n      [(empty? lst) #f]\n      [(> (first lst) 0) (largest_negative\
    \ (rest lst))]\n      [(< (first lst) 0) (max (first lst) (largest_negative (rest\
    \ lst)))]\n      [else (largest_negative (rest lst))]))\n  (define (smallest_positive\
    \ lst)\n    (cond\n      [(empty? lst) #f]\n      [(< (first lst) 0) (smallest_positive\
    \ (rest lst))]\n      [(> (first lst) 0) (min (first lst) (smallest_positive (rest\
    \ lst)))]\n      [else (smallest_positive (rest lst))]))\n  (list (largest_negative\
    \ lst) (smallest_positive lst)))\n", "  (define (largest_negative lst)\n    (cond\
    \ ((null? lst) #f)\n          ((and (negative? (car lst))\n                (or\
    \ (not (negative? (cadr lst)))\n                    (negative? (car lst))\n  \
    \                  (not (negative? (cadr lst)))))\n           (car lst))\n   \
    \       (else (largest_negative (cdr lst)))))\n  (define (smallest_positive lst)\n\
    \    (cond ((null? lst) #f)\n          ((and (positive? (car lst))\n         \
    \       (or (not (positive? (cadr lst)))\n                    (positive? (car\
    \ lst))\n                    (not (positive? (cadr lst)))))\n           (car lst))\n\
    \          (else (smallest_positive (cdr lst)))))\n  (list (largest_negative lst)\
    \ (smallest_positive lst)))\n", "  (define (largest_negative lst)\n    (cond\n\
    \      [(empty? lst) #f]\n      [(and (negative? (first lst))\n            (or\
    \ (not (negative? (second lst)))\n                (and (negative? (second lst))\n\
    \                     (> (first lst) (second lst)))))\n       (first lst)]\n \
    \     [else (largest_negative (rest lst))]))\n  (define (smallest_positive lst)\n\
    \    (cond\n      [(empty? lst) #f]\n      [(and (positive? (first lst))\n   \
    \         (or (not (positive? (second lst)))\n                (and (positive?\
    \ (second lst))\n                     (< (first lst) (second lst)))))\n      \
    \ (first lst)]\n      [else (smallest_positive (rest lst))]))\n  (list (largest_negative\
    \ lst) (smallest_positive lst)))\n", "  (define (largest_smallest_integers_helper\
    \ lst largest smallest)\n    (cond ((null? lst) (list largest smallest))\n   \
    \       ((and (integer? (car lst)) (positive? (car lst)))\n           (if (or\
    \ (not (integer? smallest))\n                   (< (car lst) smallest))\n    \
    \           (largest_smallest_integers_helper (cdr lst) largest (car lst))\n \
    \              (largest_smallest_integers_helper (cdr lst) largest smallest)))\n\
    \          ((and (integer? (car lst)) (negative? (car lst)))\n           (if (or\
    \ (not (integer? largest))\n                   (> (car lst) largest))\n      \
    \         (largest_smallest_integers_helper (cdr lst) (car lst) smallest)\n  \
    \             (largest_smallest_integers_helper (cdr lst) largest smallest)))\n\
    \          (else (largest_smallest_integers_helper (cdr lst) largest smallest))))\n\
    \  (largest_smallest_integers_helper lst #f #f))\n", "  (define (largest_negative\
    \ lst)\n    (cond ((null? lst) #f)\n          ((and (negative? (car lst))\n  \
    \              (or (not (negative? (cadr lst)))\n                    (and (negative?\
    \ (cadr lst))\n                         (> (car lst) (cadr lst)))))\n        \
    \   (car lst))\n          (else (largest_negative (cdr lst)))))\n  (define (smallest_positive\
    \ lst)\n    (cond ((null? lst) #f)\n          ((and (positive? (car lst))\n  \
    \              (or (not (positive? (cadr lst)))\n                    (and (positive?\
    \ (cadr lst))\n                         (< (car lst) (cadr lst)))))\n        \
    \   (car lst))\n          (else (smallest_positive (cdr lst)))))\n  (list (largest_negative\
    \ lst) (smallest_positive lst)))\n", "  (define (largest_smallest_integers_helper\
    \ lst largest smallest)\n    (cond\n      [(empty? lst) (list largest smallest)]\n\
    \      [(and (positive? (first lst)) (or (not (positive? smallest)) (< (first\
    \ lst) smallest)))\n       (largest_smallest_integers_helper (rest lst) largest\
    \ (first lst))]\n      [(and (negative? (first lst)) (or (not (negative? largest))\
    \ (> (first lst) largest)))\n       (largest_smallest_integers_helper (rest lst)\
    \ (first lst) smallest)]\n      [else (largest_smallest_integers_helper (rest\
    \ lst) largest smallest)]))\n  (largest_smallest_integers_helper lst #f #f))\n",
  "  (cond\n    [(empty? lst) (list #f #f)]\n    [(empty? (rest lst)) (list #f #f)]\n\
    \    [else\n     (let ([max-neg (apply max (filter negative? lst))]\n        \
    \   [min-pos (apply min (filter positive? lst))])\n       (list max-neg min-pos))]))\n",
  "  (define (largest_negative lst)\n    (cond\n      [(null? lst) #f]\n      [(and\
    \ (number? (car lst)) (< (car lst) 0))\n       (max (car lst) (largest_negative\
    \ (cdr lst)))]\n      [else (largest_negative (cdr lst))]))\n  (define (smallest_positive\
    \ lst)\n    (cond\n      [(null? lst) #f]\n      [(and (number? (car lst)) (>\
    \ (car lst) 0))\n       (min (car lst) (smallest_positive (cdr lst)))]\n     \
    \ [else (smallest_positive (cdr lst))]))\n  (list (largest_negative lst) (smallest_positive\
    \ lst)))\n", "  (define (largest_smallest_integers_helper lst largest smallest)\n\
    \    (cond\n      [(empty? lst) (list largest smallest)]\n      [(and (negative?\
    \ (first lst)) (or (not largest) (&gt; (first lst) largest)))\n       (largest_smallest_integers_helper\
    \ (rest lst) (first lst) smallest)]\n      [(and (positive? (first lst)) (or (not\
    \ smallest) (&lt; (first lst) smallest)))\n       (largest_smallest_integers_helper\
    \ (rest lst) largest (first lst))]\n      [else (largest_smallest_integers_helper\
    \ (rest lst) largest smallest)]))\n  (largest_smallest_integers_helper lst #f\
    \ #f))\n</code>\nI'm not sure if I'm doing this right, but I'm trying to use the\
    \ <code>cond</code> statement to check if the list is empty, if it's negative,\
    \ or if it's positive. If it's negative, I check if it's larger than the largest\
    \ number, and if it is, I set it as the largest number. If it's positive, I check\
    \ if it's smaller than the smallest number, and if it is, I set it as the smallest\
    \ number.\nI'm not sure if I'm doing this right, but I'm trying to use the <code>cond</code>\
    \ statement to check if the list is empty, if it's negative, or if it's positive.\
    \ If it's negative, I check if it's larger than the largest number, and if it\
    \ is, I set it as the largest number. If it's positive, I check if it's smaller\
    \ than the smallest number, and if it is, I set it as the smallest number.\nI'm\
    \ not sure if I'm doing this right, but I'm trying to use the <code>cond</code>\
    \ statement to check if the list is empty, if it's negative, or if it's positive.\
    \ If it's negative, I check if it's larger than the largest number, and if it\
    \ is, I set it as the largest number. If it's positive, I check if it's smaller\
    \ than the smallest number, and if it is, I set it as the smallest number.\nI'm\
    \ not sure if I'm doing", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(and\
    \ (positive? (first lst)) (negative? (first lst))) (list #f #f)]\n    [(positive?\
    \ (first lst)) (list (first lst) (first lst))]\n    [(negative? (first lst)) (list\
    \ (first lst) (first lst))]\n    [else (list #f #f)]))\n", "  (cond\n    [(empty?\
    \ lst) (list #f #f)]\n    [(empty? (filter negative? lst)) (list #f (apply min\
    \ (filter positive? lst)))]\n    [(empty? (filter positive? lst)) (list (apply\
    \ max (filter negative? lst)) #f)]\n    [else (list (apply max (filter negative?\
    \ lst)) (apply min (filter positive? lst)))]))\n", "  (cond\n    [(empty? lst)\
    \ (list #f #f)]\n    [(empty? (filter (lambda (x) (and (integer? x) (negative?\
    \ x))) lst))\n     (list #f (apply min (filter (lambda (x) (and (integer? x) (positive?\
    \ x))) lst)))]\n    [(empty? (filter (lambda (x) (and (integer? x) (positive?\
    \ x))) lst))\n     (list (apply max (filter (lambda (x) (and (integer? x) (negative?\
    \ x))) lst)) #f)]\n    [else (list (apply max (filter (lambda (x) (and (integer?\
    \ x) (negative? x))) lst))\n                (apply min (filter (lambda (x) (and\
    \ (integer? x) (positive? x))) lst)))]))\n", "  (cond\n    [(empty? lst) (list\
    \ #f #f)]\n    [(empty? (filter negative? lst)) (list #f (min (filter positive?\
    \ lst)))]\n    [(empty? (filter positive? lst)) (list (max (filter negative? lst))\
    \ #f)]\n    [else (list (max (filter negative? lst)) (min (filter positive? lst)))]))\n",
  "  (define (find-largest-negative lst largest)\n    (cond ((null? lst) largest)\n\
    \          ((and (negative? (car lst))\n                (or (not (number? largest))\n\
    \                    (< (car lst) largest)))\n           (find-largest-negative\
    \ (cdr lst) (car lst)))\n          (else (find-largest-negative (cdr lst) largest))))\n\
    \  (define (find-smallest-positive lst smallest)\n    (cond ((null? lst) smallest)\n\
    \          ((and (positive? (car lst))\n                (or (not (number? smallest))\n\
    \                    (> (car lst) smallest)))\n           (find-smallest-positive\
    \ (cdr lst) (car lst)))\n          (else (find-smallest-positive (cdr lst) smallest))))\n\
    \  (list (find-largest-negative lst #f)\n        (find-smallest-positive lst #f)))\n",
  "  (define (is_positive? n)\n    (and (number? n) (> n 0)))\n  (define (is_negative?\
    \ n)\n    (and (number? n) (< n 0)))\n  (define (is_zero? n)\n    (and (number?\
    \ n) (= n 0)))\n  (define (is_integer? n)\n    (and (number? n) (integer? n)))\n\
    \  (define (is_non_zero_integer? n)\n    (and (is_integer? n) (not (is_zero? n))))\n\
    \  (define (is_non_zero_positive_integer? n)\n    (and (is_non_zero_integer? n)\
    \ (is_positive? n)))\n  (define (is_non_zero_negative_integer? n)\n    (and (is_non_zero_integer?\
    \ n) (is_negative? n)))\n  (define (find_largest_negative_integer lst)\n    (cond\n\
    \      [(empty? lst) #f]\n      [(is_non_zero_negative_integer? (first lst))\n\
    \       (max (first lst) (find_largest_negative_integer (rest lst)))]\n      [else\
    \ (find_largest_negative_integer (rest lst))]))\n  (define (find_smallest_positive_integer\
    \ lst)\n    (cond\n      [(empty? lst) #f]\n      [(is_non_zero_positive_integer?\
    \ (first lst))\n       (min (first lst) (find_smallest_positive_integer (rest\
    \ lst)))]\n      [else (find_smallest_positive_integer (rest lst))]))\n  (list\
    \ (find_largest_negative_integer lst)\n        (find_smallest_positive_integer\
    \ lst)))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(and (negative? (first\
    \ lst)) (positive? (first lst))) (list #f #f)]\n    [(negative? (first lst)) (list\
    \ (first lst) (first lst))]\n    [(positive? (first lst)) (list #f (first lst))]\n\
    \    [else (largest_smallest_integers (rest lst))]))\n", "  (define (largest_negative_integer\
    \ lst)\n    (cond\n      [(empty? lst) #f]\n      [(and (negative? (first lst))\n\
    \            (or (not (negative? (second lst)))\n                (empty? (rest\
    \ lst)))) (first lst)]\n      [else (largest_negative_integer (rest lst))]))\n\
    \  (define (smallest_positive_integer lst)\n    (cond\n      [(empty? lst) #f]\n\
    \      [(and (positive? (first lst))\n            (or (not (positive? (second\
    \ lst)))\n                (empty? (rest lst)))) (first lst)]\n      [else (smallest_positive_integer\
    \ (rest lst))]))\n  (list (largest_negative_integer lst)\n        (smallest_positive_integer\
    \ lst)))\n", "  (define (largest_negative_integer lst)\n    (cond\n      [(empty?\
    \ lst) #f]\n      [(< (first lst) 0) (max (first lst) (largest_negative_integer\
    \ (rest lst)))]\n      [else (largest_negative_integer (rest lst))]))\n  (define\
    \ (smallest_positive_integer lst)\n    (cond\n      [(empty? lst) #f]\n      [(>\
    \ (first lst) 0) (min (first lst) (smallest_positive_integer (rest lst)))]\n \
    \     [else (smallest_positive_integer (rest lst))]))\n  (list (largest_negative_integer\
    \ lst) (smallest_positive_integer lst)))\n", "  (define (largest_negative lst)\n\
    \    (cond ((null? lst) #f)\n          ((and (negative? (car lst)) (not (negative?\
    \ (cadr lst)))) (car lst))\n          (else (largest_negative (cdr lst)))))\n\
    \  (define (smallest_positive lst)\n    (cond ((null? lst) #f)\n          ((and\
    \ (positive? (car lst)) (not (positive? (cadr lst)))) (car lst))\n          (else\
    \ (smallest_positive (cdr lst)))))\n  (list (largest_negative lst) (smallest_positive\
    \ lst)))\n", "  (define (largest_smallest_integers_helper lst largest smallest)\n\
    \    (cond\n      [(empty? lst) (list largest smallest)]\n      [(and (negative?\
    \ (first lst)) (or (not largest) (&gt; (first lst) largest)))\n       (largest_smallest_integers_helper\
    \ (rest lst) (first lst) smallest)]\n      [(and (positive? (first lst)) (or (not\
    \ smallest) (&lt; (first lst) smallest)))\n       (largest_smallest_integers_helper\
    \ (rest lst) largest (first lst))]\n      [else (largest_smallest_integers_helper\
    \ (rest lst) largest smallest)]))\n  (largest_smallest_integers_helper lst #f\
    \ #f))\n</code>\nI'm not sure if this is the best way to do it, but it works.\n",
  "  (define (largest_negative lst)\n    (cond\n      [(empty? lst) #f]\n      [(and\
    \ (negative? (first lst)) (not (negative? (first (rest lst))))) (first lst)]\n\
    \      [else (largest_negative (rest lst))]))\n  (define (smallest_positive lst)\n\
    \    (cond\n      [(empty? lst) #f]\n      [(and (positive? (first lst)) (not\
    \ (positive? (first (rest lst))))) (first lst)]\n      [else (smallest_positive\
    \ (rest lst))]))\n  (list (largest_negative lst) (smallest_positive lst)))\n",
  "  (define (largest_smallest_integers_helper lst largest smallest)\n    (cond\n\
    \      [(null? lst) (list largest smallest)]\n      [(and (positive? (car lst))\
    \ (or (not (positive? smallest)) (< (car lst) smallest)))\n       (largest_smallest_integers_helper\
    \ (cdr lst) largest (car lst))]\n      [(and (negative? (car lst)) (or (not (negative?\
    \ largest)) (> (car lst) largest)))\n       (largest_smallest_integers_helper\
    \ (cdr lst) (car lst) smallest)]\n      [else (largest_smallest_integers_helper\
    \ (cdr lst) largest smallest)]))\n  (largest_smallest_integers_helper lst #f #f))\n",
  "  (cond\n    [(empty? lst) (list #f #f)]\n    [(and (positive? (first lst)) (negative?\
    \ (first lst))) (list #f #f)]\n    [(positive? (first lst)) (list (first lst)\
    \ (first lst))]\n    [(negative? (first lst)) (list (first lst) (first lst))]\n\
    \    [else (largest_smallest_integers (rest lst))]))\n", "  (let ([negs (filter\
    \ (lambda (x) (< x 0)) lst)]\n        [pos (filter (lambda (x) (> x 0)) lst)])\n\
    \    (if (empty? negs)\n        (list #f (if (empty? pos) #f (min pos)))\n   \
    \     (list (max negs) (if (empty? pos) #f (min pos))))))\n", "  (cond\n    [(empty?\
    \ lst) (list #f #f)]\n    [(and (positive? (first lst)) (negative? (first lst)))\
    \ (list #f #f)]\n    [(positive? (first lst)) (list (first lst) (first lst))]\n\
    \    [(negative? (first lst)) (list (first lst) (first lst))]\n    [else (list\
    \ #f #f)]))\n", "  (define (largest_negative_integer lst)\n    (cond\n      [(null?\
    \ lst) #f]\n      [(and (integer? (car lst)) (< (car lst) 0))\n       (max (car\
    \ lst) (largest_negative_integer (cdr lst)))]\n      [else (largest_negative_integer\
    \ (cdr lst))]))\n  (define (smallest_positive_integer lst)\n    (cond\n      [(null?\
    \ lst) #f]\n      [(and (integer? (car lst)) (> (car lst) 0))\n       (min (car\
    \ lst) (smallest_positive_integer (cdr lst)))]\n      [else (smallest_positive_integer\
    \ (cdr lst))]))\n  (list (largest_negative_integer lst) (smallest_positive_integer\
    \ lst)))\n", "  (define (is-positive? n)\n    (and (number? n)\n         (> n\
    \ 0)))\n  (define (is-negative? n)\n    (and (number? n)\n         (< n 0)))\n\
    \  (define (largest-negative lst)\n    (cond\n      [(null? lst) #f]\n      [(is-negative?\
    \ (car lst))\n       (max (car lst) (largest-negative (cdr lst)))]\n      [else\
    \ (largest-negative (cdr lst))]))\n  (define (smallest-positive lst)\n    (cond\n\
    \      [(null? lst) #f]\n      [(is-positive? (car lst))\n       (min (car lst)\
    \ (smallest-positive (cdr lst)))]\n      [else (smallest-positive (cdr lst))]))\n\
    \  (list (largest-negative lst) (smallest-positive lst)))\n", "  (define (largest_negative\
    \ lst)\n    (cond\n      [(empty? lst) #f]\n      [(and (negative? (first lst))\
    \ (not (negative? (first (rest lst))))) (first lst)]\n      [else (largest_negative\
    \ (rest lst))]))\n  (define (smallest_positive lst)\n    (cond\n      [(empty?\
    \ lst) #f]\n      [(and (positive? (first lst)) (not (positive? (first (rest lst)))))\
    \ (first lst)]\n      [else (smallest_positive (rest lst))]))\n  (list (largest_negative\
    \ lst) (smallest_positive lst)))\n", "  (define (largest-negative lst)\n    (cond\n\
    \      [(empty? lst) #f]\n      [(negative? (first lst)) (max (first lst) (largest-negative\
    \ (rest lst)))]\n      [else (largest-negative (rest lst))]))\n  (define (smallest-positive\
    \ lst)\n    (cond\n      [(empty? lst) #f]\n      [(positive? (first lst)) (min\
    \ (first lst) (smallest-positive (rest lst)))]\n      [else (smallest-positive\
    \ (rest lst))]))\n  (list (largest-negative lst) (smallest-positive lst)))\n",
  "  (define (largest_negative lst)\n    (cond\n      [(empty? lst) #f]\n      [(and\
    \ (negative? (first lst)) (not (negative? (second lst)))) (first lst)]\n     \
    \ [else (largest_negative (rest lst))]))\n  (define (smallest_positive lst)\n\
    \    (cond\n      [(empty? lst) #f]\n      [(and (positive? (first lst)) (not\
    \ (positive? (second lst)))) (first lst)]\n      [else (smallest_positive (rest\
    \ lst))]))\n  (list (largest_negative lst) (smallest_positive lst)))\n", "  (cond\
    \ [(empty? lst) (list #f #f)]\n        [(and (positive? (first lst)) (negative?\
    \ (first lst))) (list #f #f)]\n        [(positive? (first lst)) (list (first lst)\
    \ (first lst))]\n        [(negative? (first lst)) (list (first lst) (first lst))]\n\
    \        [else (largest_smallest_integers (rest lst))]))\n", "  (let ([negatives\
    \ (filter (lambda (x) (negative? x)) lst)]\n        [positives (filter (lambda\
    \ (x) (positive? x)) lst)])\n    (if (empty? negatives)\n        (list #f (min\
    \ positives))\n        (list (max negatives) (if (empty? positives) #f (min positives))))))\n",
  "  (let ([negs (filter negative? lst)]\n        [pos (filter positive? lst)])\n\
    \    (list (if (empty? negs) #f (apply max negs))\n          (if (empty? pos)\
    \ #f (apply min pos)))))\n", "  (define (helper lst)\n    (cond\n      [(empty?\
    \ lst) (list #f #f)]\n      [(and (positive? (first lst)) (negative? (first lst)))\
    \ (list #f #f)]\n      [(positive? (first lst)) (list #f (first lst))]\n     \
    \ [(negative? (first lst)) (list (first lst) #f)]\n      [else (helper (rest lst))]))\n\
    \  (helper lst))\n", "  (define (largest_negative lst)\n    (cond\n      [(null?\
    \ lst) #f]\n      [(and (integer? (car lst)) (< (car lst) 0))\n       (max (car\
    \ lst) (largest_negative (cdr lst)))]\n      [else (largest_negative (cdr lst))]))\n\
    \  (define (smallest_positive lst)\n    (cond\n      [(null? lst) #f]\n      [(and\
    \ (integer? (car lst)) (> (car lst) 0))\n       (min (car lst) (smallest_positive\
    \ (cdr lst)))]\n      [else (smallest_positive (cdr lst))]))\n  (list (largest_negative\
    \ lst) (smallest_positive lst)))\n", "  (define (largest_negative lst)\n    (cond\n\
    \      [(empty? lst) #f]\n      [(negative? (first lst)) (max (first lst) (largest_negative\
    \ (rest lst)))]\n      [else (largest_negative (rest lst))]))\n  (define (smallest_positive\
    \ lst)\n    (cond\n      [(empty? lst) #f]\n      [(positive? (first lst)) (min\
    \ (first lst) (smallest_positive (rest lst)))]\n      [else (smallest_positive\
    \ (rest lst))]))\n  (list (largest_negative lst) (smallest_positive lst)))\n",
  "  (define (largest_negative lst)\n    (cond\n      [(empty? lst) #f]\n      [(and\
    \ (negative? (first lst))\n            (or (not (negative? (second lst)))\n  \
    \              (empty? (rest lst))))\n       (first lst)]\n      [else (largest_negative\
    \ (rest lst))]))\n  (define (smallest_positive lst)\n    (cond\n      [(empty?\
    \ lst) #f]\n      [(and (positive? (first lst))\n            (or (not (positive?\
    \ (second lst)))\n                (empty? (rest lst))))\n       (first lst)]\n\
    \      [else (smallest_positive (rest lst))]))\n  (list (largest_negative lst)\
    \ (smallest_positive lst)))\n", "  (let ([negs (filter (lambda (x) (< x 0)) lst)]\n\
    \        [pos (filter (lambda (x) (> x 0)) lst)])\n    (list (if (empty? negs)\
    \ #f (apply max negs))\n          (if (empty? pos) #f (apply min pos)))))\n",
  "  (define (largest_negative lst)\n    (cond\n      [(empty? lst) #f]\n      [(and\
    \ (negative? (first lst))\n            (or (not (negative? (second lst)))\n  \
    \              (empty? (rest lst))))\n       (first lst)]\n      [else (largest_negative\
    \ (rest lst))]))\n  (define (smallest_positive lst)\n    (cond\n      [(empty?\
    \ lst) #f]\n      [(and (positive? (first lst))\n            (or (not (positive?\
    \ (second lst)))\n                (empty? (rest lst))))\n       (first lst)]\n\
    \      [else (smallest_positive (rest lst))]))\n  (list (largest_negative lst)\
    \ (smallest_positive lst)))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n  \
    \  [(and (negative? (first lst)) (positive? (first lst))) (list #f #f)]\n    [(negative?\
    \ (first lst)) (list (first lst) (first lst))]\n    [(positive? (first lst)) (list\
    \ #f (first lst))]\n    [else (largest_smallest_integers (rest lst))]))\n", " \
    \ (cond\n    [(empty? lst) (list #f #f)]\n    [(and (positive? (first lst)) (negative?\
    \ (first lst))) (list #f #f)]\n    [(positive? (first lst)) (cons (largest_smallest_integers\
    \ (rest lst)) (list (first lst)))]\n    [(negative? (first lst)) (cons (first\
    \ lst) (largest_smallest_integers (rest lst)))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (define (helper lst largest smallest)\n    (cond\n   \
    \   [(empty? lst) (list largest smallest)]\n      [(and (negative? (first lst))\
    \ (or (not largest) (&gt; (first lst) largest)))\n       (helper (rest lst) (first\
    \ lst) smallest)]\n      [(and (positive? (first lst)) (or (not smallest) (&lt;\
    \ (first lst) smallest)))\n       (helper (rest lst) largest (first lst))]\n \
    \     [else (helper (rest lst) largest smallest)]))\n  (helper lst #f #f))\n</code>\n",
  "  (define (largest-negative lst)\n    (cond\n      [(null? lst) #f]\n      [(and\
    \ (negative? (car lst))\n            (or (not (negative? (cadr lst)))\n      \
    \          (negative? (car lst))))\n       (cons (car lst) (largest-negative (cdr\
    \ lst)))]\n      [else (largest-negative (cdr lst))]))\n  (define (smallest-positive\
    \ lst)\n    (cond\n      [(null? lst) #f]\n      [(and (positive? (car lst))\n\
    \            (or (not (positive? (cadr lst)))\n                (positive? (car\
    \ lst))))\n       (cons (car lst) (smallest-positive (cdr lst)))]\n      [else\
    \ (smallest-positive (cdr lst))]))\n  (list (largest-negative lst) (smallest-positive\
    \ lst)))\n", "  (define (largest_negative lst)\n    (cond\n      [(empty? lst)\
    \ #f]\n      [(and (negative? (first lst))\n            (or (not (negative? (second\
    \ lst)))\n                (empty? (rest lst))))\n       (first lst)]\n      [else\
    \ (largest_negative (rest lst))]))\n  (define (smallest_positive lst)\n    (cond\n\
    \      [(empty? lst) #f]\n      [(and (positive? (first lst))\n            (or\
    \ (not (positive? (second lst)))\n                (empty? (rest lst))))\n    \
    \   (first lst)]\n      [else (smallest_positive (rest lst))]))\n  (list (largest_negative\
    \ lst) (smallest_positive lst)))\n", "  (define (largest_negative lst)\n    (cond\
    \ ((null? lst) #f)\n          ((and (negative? (car lst)) (not (null? (cdr lst))))\n\
    \           (if (> (car lst) (largest_negative (cdr lst)))\n               (car\
    \ lst)\n               (largest_negative (cdr lst))))\n          ((negative? (car\
    \ lst)) (car lst))\n          (else (largest_negative (cdr lst)))))\n  (define\
    \ (smallest_positive lst)\n    (cond ((null? lst) #f)\n          ((and (positive?\
    \ (car lst)) (not (null? (cdr lst))))\n           (if (< (car lst) (smallest_positive\
    \ (cdr lst)))\n               (car lst)\n               (smallest_positive (cdr\
    \ lst))))\n          ((positive? (car lst)) (car lst))\n          (else (smallest_positive\
    \ (cdr lst)))))\n  (list (largest_negative lst) (smallest_positive lst)))\n",
  "  (define (largest_negative lst)\n    (cond ((null? lst) #f)\n          ((and (integer?\
    \ (car lst)) (< (car lst) 0))\n           (max (car lst) (largest_negative (cdr\
    \ lst))))\n          (else (largest_negative (cdr lst)))))\n  (define (smallest_positive\
    \ lst)\n    (cond ((null? lst) #f)\n          ((and (integer? (car lst)) (> (car\
    \ lst) 0))\n           (min (car lst) (smallest_positive (cdr lst))))\n      \
    \    (else (smallest_positive (cdr lst)))))\n  (list (largest_negative lst) (smallest_positive\
    \ lst)))\n", "  (define (helper lst acc)\n    (cond\n      [(empty? lst) acc]\n\
    \      [(and (positive? (first lst)) (not (positive? (second lst))))\n       (helper\
    \ (rest lst) (cons (first lst) acc))]\n      [(and (negative? (first lst)) (not\
    \ (negative? (second lst))))\n       (helper (rest lst) (cons (first lst) acc))]\n\
    \      [else (helper (rest lst) acc)]))\n  (let ([negatives (helper lst '())]\n\
    \        [positives (helper lst '())])\n    (if (empty? negatives)\n        (cons\
    \ #f (first positives))\n        (cons (first negatives) (first positives)))))\n",
  "  (define (largest_negative lst)\n    (cond\n      [(empty? lst) #f]\n      [(negative?\
    \ (first lst)) (max (first lst) (largest_negative (rest lst)))]\n      [else (largest_negative\
    \ (rest lst))]))\n  (define (smallest_positive lst)\n    (cond\n      [(empty?\
    \ lst) #f]\n      [(positive? (first lst)) (min (first lst) (smallest_positive\
    \ (rest lst)))]\n      [else (smallest_positive (rest lst))]))\n  (list (largest_negative\
    \ lst) (smallest_positive lst)))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n\
    \    [(and (positive? (first lst)) (negative? (first lst))) (list #f #f)]\n  \
    \  [(positive? (first lst)) (list (first lst) (first lst))]\n    [(negative? (first\
    \ lst)) (list (first lst) (first lst))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (define (largest-negative lst)\n    (cond ((null? lst)\
    \ #f)\n          ((and (negative? (car lst))\n                (or (not (negative?\
    \ (cadr lst)))\n                    (and (negative? (cadr lst))\n            \
    \             (> (car lst) (cadr lst)))))\n           (car lst))\n          (else\
    \ (largest-negative (cdr lst)))))\n  (define (smallest-positive lst)\n    (cond\
    \ ((null? lst) #f)\n          ((and (positive? (car lst))\n                (or\
    \ (not (positive? (cadr lst)))\n                    (and (positive? (cadr lst))\n\
    \                         (< (car lst) (cadr lst)))))\n           (car lst))\n\
    \          (else (smallest-positive (cdr lst)))))\n  (list (largest-negative lst)\
    \ (smallest-positive lst)))\n", "  (define (largest_negative lst)\n    (cond [(empty?\
    \ lst) #f]\n          [(and (negative? (first lst)) (not (negative? (second lst))))\
    \ (first lst)]\n          [else (largest_negative (rest lst))]))\n  (define (smallest_positive\
    \ lst)\n    (cond [(empty? lst) #f]\n          [(and (positive? (first lst)) (not\
    \ (positive? (second lst)))) (first lst)]\n          [else (smallest_positive\
    \ (rest lst))]))\n  (list (largest_negative lst) (smallest_positive lst)))\n",
  "  (let ([negs (filter negative? lst)]\n        [pos (filter positive? lst)])\n\
    \    (if (empty? negs)\n        (list #f (min pos))\n        (list (max negs)\
    \ (if (empty? pos) #f (min pos))))))\n", "  (define (largest_negative lst)\n \
    \   (cond\n      [(empty? lst) #f]\n      [(negative? (first lst)) (max (first\
    \ lst) (largest_negative (rest lst)))]\n      [else (largest_negative (rest lst))]))\n\
    \  (define (smallest_positive lst)\n    (cond\n      [(empty? lst) #f]\n     \
    \ [(positive? (first lst)) (min (first lst) (smallest_positive (rest lst)))]\n\
    \      [else (smallest_positive (rest lst))]))\n  (list (largest_negative lst)\
    \ (smallest_positive lst)))\n", "  (define (helper lst largest smallest)\n   \
    \ (cond\n      [(empty? lst) (list largest smallest)]\n      [(and (negative?\
    \ (first lst)) (or (not largest) (&gt; (first lst) largest)))\n       (helper\
    \ (rest lst) (first lst) smallest)]\n      [(and (positive? (first lst)) (or (not\
    \ smallest) (&lt; (first lst) smallest)))\n       (helper (rest lst) largest (first\
    \ lst))]\n      [else (helper (rest lst) largest smallest)]))\n  (helper lst #f\
    \ #f))\n</code>\n", "  (define (is-positive? n)\n    (and (number? n) (> n 0)))\n\
    \  (define (is-negative? n)\n    (and (number? n) (< n 0)))\n  (define (largest-negative\
    \ lst)\n    (cond\n      [(null? lst) #f]\n      [(is-negative? (car lst)) (max\
    \ (car lst) (largest-negative (cdr lst)))]\n      [else (largest-negative (cdr\
    \ lst))]))\n  (define (smallest-positive lst)\n    (cond\n      [(null? lst) #f]\n\
    \      [(is-positive? (car lst)) (min (car lst) (smallest-positive (cdr lst)))]\n\
    \      [else (smallest-positive (cdr lst))]))\n  (list (largest-negative lst)\
    \ (smallest-positive lst)))\n", "  (define (largest_smallest_integers_helper lst\
    \ largest smallest)\n    (if (null? lst)\n        (list largest smallest)\n  \
    \      (let ((curr (car lst)))\n          (if (and (integer? curr)\n         \
    \          (not (zero? curr)))\n              (if (and (not (integer? largest))\n\
    \                       (not (integer? smallest)))\n                  (largest_smallest_integers_helper\
    \ (cdr lst curr curr)\n                                                    curr\
    \ curr)\n                  (if (and (integer? largest)\n                     \
    \      (integer? smallest))\n                      (if (positive? curr)\n    \
    \                      (if (< curr smallest)\n                              (largest_smallest_integers_helper\
    \ (cdr lst)\n                                                                largest\
    \ curr)\n                              (largest_smallest_integers_helper (cdr\
    \ lst)\n                                                                largest\
    \ smallest))\n                          (if (> curr largest)\n               \
    \               (largest_smallest_integers_helper (cdr lst)\n                \
    \                                                curr smallest)\n            \
    \                  (largest_smallest_integers_helper (cdr lst)\n             \
    \                                                   largest smallest)))\n    \
    \                  (if (integer? largest)\n                          (if (> curr\
    \ largest)\n                              (largest_smallest_integers_helper (cdr\
    \ lst)\n                                                                curr smallest)\n\
    \                              (largest_smallest_integers_helper (cdr lst)\n \
    \                                                               largest smallest))\n\
    \                          (if (< curr smallest)\n                           \
    \   (largest_smallest_integers_helper (cdr lst)\n                            \
    \                                    largest curr)\n                         \
    \     (largest_smallest_integers_helper (cdr lst)\n                          \
    \                                      largest smallest)))))\n              (largest_smallest_integers_helper\
    \ (cdr lst)\n                                                largest smallest)))))\n\
    \  (largest_smallest_integers_helper lst #f #f))\n", "  (define (largest_negative\
    \ lst)\n    (cond\n      [(empty? lst) #f]\n      [(and (negative? (first lst))\
    \ (not (negative? (first (rest lst))))) (first lst)]\n      [else (largest_negative\
    \ (rest lst))]))\n  (define (smallest_positive lst)\n    (cond\n      [(empty?\
    \ lst) #f]\n      [(and (positive? (first lst)) (not (positive? (first (rest lst)))))\
    \ (first lst)]\n      [else (smallest_positive (rest lst))]))\n  (list (largest_negative\
    \ lst) (smallest_positive lst)))\n", "  (let ([neg (filter (lambda (x) (< x 0))\
    \ lst)]\n        [pos (filter (lambda (x) (> x 0)) lst)])\n    (list (if (null?\
    \ neg) #f (apply max neg))\n          (if (null? pos) #f (apply min pos)))))\n",
  "  (define (largest_negative lst)\n    (cond ((null? lst) #f)\n          ((and (number?\
    \ (car lst)) (< (car lst) 0))\n           (if (null? (cdr lst))\n            \
    \   (car lst)\n               (max (car lst) (largest_negative (cdr lst)))))\n\
    \          (else (largest_negative (cdr lst)))))\n  (define (smallest_positive\
    \ lst)\n    (cond ((null? lst) #f)\n          ((and (number? (car lst)) (> (car\
    \ lst) 0))\n           (if (null? (cdr lst))\n               (car lst)\n     \
    \          (min (car lst) (smallest_positive (cdr lst)))))\n          (else (smallest_positive\
    \ (cdr lst)))))\n  (list (largest_negative lst) (smallest_positive lst)))\n",
  "  (let ([negatives (filter (lambda (x) (< x 0)) lst)]\n        [positives (filter\
    \ (lambda (x) (> x 0)) lst)])\n    (list (if (empty? negatives) #f (apply max\
    \ negatives))\n          (if (empty? positives) #f (apply min positives)))))\n",
  "  (let ([negs (filter (lambda (x) (negative? x)) lst)]\n        [pos (filter (lambda\
    \ (x) (positive? x)) lst)])\n    (if (empty? negs)\n        (list #f (if (empty?\
    \ pos) #f (apply min pos)))\n        (list (apply max negs) (if (empty? pos) #f\
    \ (apply min pos))))))\n", "  (define (helper lst largest smallest)\n    (cond\n\
    \      [(null? lst) (list largest smallest)]\n      [(and (integer? (car lst))\
    \ (positive? (car lst)))\n       (helper (cdr lst) largest (min (car lst) smallest))]\n\
    \      [(and (integer? (car lst)) (negative? (car lst)))\n       (helper (cdr\
    \ lst) (max (car lst) largest) smallest)]\n      [else (helper (cdr lst) largest\
    \ smallest)]))\n  (helper lst #f #f))\n", "  (let* ([negs (filter (lambda (x)\
    \ (and (number? x) (< x 0))) lst)]\n         [pos (filter (lambda (x) (and (number?\
    \ x) (> x 0))) lst)])\n    (list (if (empty? negs) #f (apply max negs))\n    \
    \      (if (empty? pos) #f (apply min pos)))))\n", "  (define (largest_smallest_integers_iter\
    \ lst largest smallest)\n    (cond\n      [(null? lst) (list largest smallest)]\n\
    \      [(and (integer? (car lst)) (positive? (car lst)))\n       (largest_smallest_integers_iter\
    \ (cdr lst) largest (min (car lst) smallest))]\n      [(and (integer? (car lst))\
    \ (negative? (car lst)))\n       (largest_smallest_integers_iter (cdr lst) (max\
    \ (car lst) largest) smallest)]\n      [else (largest_smallest_integers_iter (cdr\
    \ lst) largest smallest)]))\n  (largest_smallest_integers_iter lst #f #f))\n",
  "  (define (largest_negative lst)\n    (cond ((null? lst) #f)\n          ((and (integer?\
    \ (car lst)) (< (car lst) 0))\n           (max (car lst) (largest_negative (cdr\
    \ lst))))\n          (else (largest_negative (cdr lst)))))\n  (define (smallest_positive\
    \ lst)\n    (cond ((null? lst) #f)\n          ((and (integer? (car lst)) (> (car\
    \ lst) 0))\n           (min (car lst) (smallest_positive (cdr lst))))\n      \
    \    (else (smallest_positive (cdr lst)))))\n  (list (largest_negative lst) (smallest_positive\
    \ lst)))\n", "  (define (helper lst largest smallest)\n    (cond\n      [(empty?\
    \ lst) (list largest smallest)]\n      [(and (negative? (first lst)) (or (not\
    \ largest) (&gt; (first lst) largest)))\n       (helper (rest lst) (first lst)\
    \ smallest)]\n      [(and (positive? (first lst)) (or (not smallest) (&lt; (first\
    \ lst) smallest)))\n       (helper (rest lst) largest (first lst))]\n      [else\
    \ (helper (rest lst) largest smallest)]))\n  (helper lst #f #f))\n</code>\n",
  "  (define (largest_negative lst)\n    (cond ((null? lst) #f)\n          ((< (car\
    \ lst) 0) (max (car lst) (largest_negative (cdr lst))))\n          (else (largest_negative\
    \ (cdr lst)))))\n  (define (smallest_positive lst)\n    (cond ((null? lst) #f)\n\
    \          ((> (car lst) 0) (min (car lst) (smallest_positive (cdr lst))))\n \
    \         (else (smallest_positive (cdr lst)))))\n  (list (largest_negative lst)\
    \ (smallest_positive lst)))\n", "  (define (largest_smallest_integers_helper lst\
    \ largest smallest)\n    (cond\n      [(empty? lst) (list largest smallest)]\n\
    \      [(and (negative? (first lst))\n            (or (not (number? largest))\n\
    \                (> (first lst) largest)))\n       (largest_smallest_integers_helper\
    \ (rest lst) (first lst) smallest)]\n      [(and (positive? (first lst))\n   \
    \         (or (not (number? smallest))\n                (< (first lst) smallest)))\n\
    \       (largest_smallest_integers_helper (rest lst) largest (first lst))]\n \
    \     [else (largest_smallest_integers_helper (rest lst) largest smallest)]))\n\
    \  (largest_smallest_integers_helper lst #f #f))\n", "  (if (null? lst)\n    \
    \  (list #f #f)\n      (let* ((negative-integers (filter (lambda (x) (and (integer?\
    \ x) (< x 0))) lst))\n             (positive-integers (filter (lambda (x) (and\
    \ (integer? x) (> x 0))) lst))\n             (largest-negative-integer (if (null?\
    \ negative-integers) #f (apply max negative-integers)))\n             (smallest-positive-integer\
    \ (if (null? positive-integers) #f (apply min positive-integers))))\n        (list\
    \ largest-negative-integer smallest-positive-integer))))\n", "  (let ([negs (filter\
    \ negative? lst)]\n        [pos (filter positive? lst)])\n    (if (empty? negs)\n\
    \        (list #f (min pos))\n        (list (max negs) (if (empty? pos) #f (min\
    \ pos))))))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(and (positive?\
    \ (first lst)) (negative? (first lst))) (list #f #f)]\n    [(positive? (first\
    \ lst)) (cons (first lst) (largest_smallest_integers (rest lst)))]\n    [(negative?\
    \ (first lst)) (cons (first lst) (largest_smallest_integers (rest lst)))]\n  \
    \  [else (largest_smallest_integers (rest lst))]))\n", "  (define (largest_smallest_integers_helper\
    \ lst largest smallest)\n    (cond\n      [(empty? lst) (list largest smallest)]\n\
    \      [(and (positive? (first lst)) (or (not (positive? smallest)) (< (first\
    \ lst) smallest)))\n       (largest_smallest_integers_helper (rest lst) largest\
    \ (first lst))]\n      [(and (negative? (first lst)) (or (not (negative? largest))\
    \ (> (first lst) largest)))\n       (largest_smallest_integers_helper (rest lst)\
    \ (first lst) smallest)]\n      [else (largest_smallest_integers_helper (rest\
    \ lst) largest smallest)]))\n  (largest_smallest_integers_helper lst #f #f))\n",
  "  (define (largest_negative lst)\n    (cond\n      [(null? lst) #f]\n      [(and\
    \ (integer? (car lst)) (< (car lst) 0))\n       (max (car lst) (largest_negative\
    \ (cdr lst)))]\n      [else (largest_negative (cdr lst))]))\n  (define (smallest_positive\
    \ lst)\n    (cond\n      [(null? lst) #f]\n      [(and (integer? (car lst)) (>\
    \ (car lst) 0))\n       (min (car lst) (smallest_positive (cdr lst)))]\n     \
    \ [else (smallest_positive (cdr lst))]))\n  (list (largest_negative lst) (smallest_positive\
    \ lst)))\n", "  (define (helper lst max min)\n    (cond\n      [(empty? lst) (list\
    \ max min)]\n      [(and (positive? (first lst)) (or (not (positive? min)) (<\
    \ (first lst) min)))\n       (helper (rest lst) max (first lst))]\n      [(and\
    \ (negative? (first lst)) (or (not (negative? max)) (> (first lst) max)))\n  \
    \     (helper (rest lst) (first lst) min)]\n      [else (helper (rest lst) max\
    \ min)]))\n  (helper lst #f #f))\n", "  (define (is-positive? n)\n    (> n 0))\n\
    \  (define (is-negative? n)\n    (< n 0))\n  (define (is-zero? n)\n    (= n 0))\n\
    \  (define (is-integer? n)\n    (integer? n))\n  (define (is-not-integer? n)\n\
    \    (not (is-integer? n)))\n  (define (is-not-zero? n)\n    (not (is-zero? n)))\n\
    \  (define (is-not-positive? n)\n    (not (is-positive? n)))\n  (define (is-not-negative?\
    \ n)\n    (not (is-negative? n)))\n  (define (largest-negative-integer lst)\n\
    \    (cond\n      [(empty? lst) #f]\n      [(is-not-integer? (first lst)) (largest-negative-integer\
    \ (rest lst))]\n      [(is-not-negative? (first lst)) (largest-negative-integer\
    \ (rest lst))]\n      [else (max (first lst) (largest-negative-integer (rest lst)))]))\n\
    \  (define (smallest-positive-integer lst)\n    (cond\n      [(empty? lst) #f]\n\
    \      [(is-not-integer? (first lst)) (smallest-positive-integer (rest lst))]\n\
    \      [(is-not-positive? (first lst)) (smallest-positive-integer (rest lst))]\n\
    \      [else (min (first lst) (smallest-positive-integer (rest lst)))]))\n  (list\
    \ (largest-negative-integer lst) (smallest-positive-integer lst)))\n", "  (define\
    \ (largest_negative lst)\n    (cond\n      [(empty? lst) #f]\n      [(and (negative?\
    \ (first lst))\n            (or (not (negative? (second lst)))\n             \
    \   (and (negative? (second lst))\n                     (> (first lst) (second\
    \ lst)))))\n       (first lst)]\n      [else (largest_negative (rest lst))]))\n\
    \  (define (smallest_positive lst)\n    (cond\n      [(empty? lst) #f]\n     \
    \ [(and (positive? (first lst))\n            (or (not (positive? (second lst)))\n\
    \                (and (positive? (second lst))\n                     (< (first\
    \ lst) (second lst)))))\n       (first lst)]\n      [else (smallest_positive (rest\
    \ lst))]))\n  (list (largest_negative lst) (smallest_positive lst)))\n", "  (define\
    \ (helper lst)\n    (cond\n      [(empty? lst) (list #f #f)]\n      [(and (positive?\
    \ (first lst)) (negative? (first lst))) (list (first lst) (first lst))]\n    \
    \  [(positive? (first lst)) (list (first lst) (first lst))]\n      [(negative?\
    \ (first lst)) (list (first lst) (first lst))]\n      [else (helper (rest lst))]))\n\
    \  (let ([res (helper lst)])\n    (cond\n      [(and (not (first res)) (not (second\
    \ res))) (list #f #f)]\n      [(not (first res)) (list #f (second res))]\n   \
    \   [(not (second res)) (list (first res) #f)]\n      [else (list (first res)\
    \ (second res))])))\n", "  (define (helper lst largest smallest)\n    (cond\n\
    \      [(empty? lst) (list largest smallest)]\n      [(and (positive? (first lst))\
    \ (or (not (positive? smallest)) (< (first lst) smallest)))\n       (helper (rest\
    \ lst) largest (first lst))]\n      [(and (negative? (first lst)) (or (not (negative?\
    \ largest)) (> (first lst) largest)))\n       (helper (rest lst) (first lst) smallest)]\n\
    \      [else (helper (rest lst) largest smallest)]))\n  (helper lst #f #f))\n",
  "  (define (largest_negative lst)\n    (cond\n      [(empty? lst) #f]\n      [(and\
    \ (negative? (first lst)) (not (negative? (first (rest lst))))) (first lst)]\n\
    \      [else (largest_negative (rest lst))]))\n  (define (smallest_positive lst)\n\
    \    (cond\n      [(empty? lst) #f]\n      [(and (positive? (first lst)) (not\
    \ (positive? (first (rest lst))))) (first lst)]\n      [else (smallest_positive\
    \ (rest lst))]))\n  (list (largest_negative lst) (smallest_positive lst)))\n",
  "  (define (largest_negative lst)\n    (cond\n      [(empty? lst) #f]\n      [(and\
    \ (negative? (first lst)) (not (negative? (first (rest lst))))) (first lst)]\n\
    \      [else (largest_negative (rest lst))]))\n  (define (smallest_positive lst)\n\
    \    (cond\n      [(empty? lst) #f]\n      [(and (positive? (first lst)) (not\
    \ (positive? (first (rest lst))))) (first lst)]\n      [else (smallest_positive\
    \ (rest lst))]))\n  (list (largest_negative lst) (smallest_positive lst)))\n",
  "  (let ([negatives (filter (lambda (x) (and (integer? x) (< x 0))) lst)]\n    \
    \    [positives (filter (lambda (x) (and (integer? x) (> x 0))) lst)])\n    (if\
    \ (or (null? negatives) (null? positives))\n        (list #f #f)\n        (list\
    \ (apply max negatives) (apply min positives)))))\n", "  (cond\n    [(empty? lst)\
    \ (list #f #f)]\n    [(and (positive? (first lst)) (negative? (first lst))) (list\
    \ #f #f)]\n    [(positive? (first lst)) (cons (largest_smallest_integers (rest\
    \ lst)) (first lst))]\n    [(negative? (first lst)) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (let\
    \ ([negatives (filter (lambda (x) (< x 0)) lst)]\n        [positives (filter (lambda\
    \ (x) (> x 0)) lst)])\n    (list (if (empty? negatives) #f (apply max negatives))\n\
    \          (if (empty? positives) #f (apply min positives)))))\n", "  (define\
    \ (largest-negative lst)\n    (cond\n      [(empty? lst) #f]\n      [(and (negative?\
    \ (first lst))\n            (or (not (negative? (second lst)))\n             \
    \   (not (number? (second lst)))))\n       (first lst)]\n      [else (largest-negative\
    \ (rest lst))]))\n  (define (smallest-positive lst)\n    (cond\n      [(empty?\
    \ lst) #f]\n      [(and (positive? (first lst))\n            (or (not (positive?\
    \ (second lst)))\n                (not (number? (second lst)))))\n       (first\
    \ lst)]\n      [else (smallest-positive (rest lst))]))\n  (list (largest-negative\
    \ lst) (smallest-positive lst)))\n", "  (let ([negs (filter (lambda (x) (and (integer?\
    \ x) (< x 0))) lst)]\n        [pos (filter (lambda (x) (and (integer? x) (> x\
    \ 0))) lst)])\n    (if (null? negs)\n        (list #f (if (null? pos) #f (apply\
    \ min pos)))\n        (list (apply max negs) (if (null? pos) #f (apply min pos))))))\n",
  "  (let ([negs (filter negative? lst)]\n        [pos (filter positive? lst)])\n\
    \    (if (empty? negs)\n        (list #f (if (empty? pos) #f (min pos)))\n   \
    \     (list (max negs) (if (empty? pos) #f (min pos))))))\n", "  (define (largest_negative\
    \ lst)\n    (cond ((null? lst) #f)\n          ((and (negative? (car lst)) (not\
    \ (positive? (car lst))))\n           (max (car lst) (largest_negative (cdr lst))))\n\
    \          (else (largest_negative (cdr lst)))))\n  (define (smallest_positive\
    \ lst)\n    (cond ((null? lst) #f)\n          ((and (positive? (car lst)) (not\
    \ (negative? (car lst))))\n           (min (car lst) (smallest_positive (cdr lst))))\n\
    \          (else (smallest_positive (cdr lst)))))\n  (list (largest_negative lst)\
    \ (smallest_positive lst)))\n", "  (define (largest_smallest_integers_helper lst\
    \ largest smallest)\n    (cond\n      [(empty? lst) (list largest smallest)]\n\
    \      [(and (positive? (first lst)) (not smallest)) (largest_smallest_integers_helper\
    \ (rest lst) largest (first lst))]\n      [(and (negative? (first lst)) (not largest))\
    \ (largest_smallest_integers_helper (rest lst) (first lst) smallest)]\n      [(and\
    \ (positive? (first lst)) (< (first lst) smallest)) (largest_smallest_integers_helper\
    \ (rest lst) largest (first lst))]\n      [(and (negative? (first lst)) (> (first\
    \ lst) largest)) (largest_smallest_integers_helper (rest lst) (first lst) smallest)]\n\
    \      [else (largest_smallest_integers_helper (rest lst) largest smallest)]))\n\
    \  (largest_smallest_integers_helper lst #f #f))\n", "  (define (is-positive?\
    \ n)\n    (and (integer? n) (> n 0)))\n  (define (is-negative? n)\n    (and (integer?\
    \ n) (< n 0)))\n  (define (largest-negative lst)\n    (cond\n      [(null? lst)\
    \ #f]\n      [(is-negative? (car lst)) (max (car lst) (largest-negative (cdr lst)))]\n\
    \      [else (largest-negative (cdr lst))]))\n  (define (smallest-positive lst)\n\
    \    (cond\n      [(null? lst) #f]\n      [(is-positive? (car lst)) (min (car\
    \ lst) (smallest-positive (cdr lst)))]\n      [else (smallest-positive (cdr lst))]))\n\
    \  (list (largest-negative lst) (smallest-positive lst)))\n", "  (define (largest_smallest_integers_helper\
    \ lst largest smallest)\n    (cond\n      [(empty? lst) (list largest smallest)]\n\
    \      [(and (positive? (first lst)) (or (not (positive? smallest)) (< (first\
    \ lst) smallest)))\n       (largest_smallest_integers_helper (rest lst) largest\
    \ (first lst))]\n      [(and (negative? (first lst)) (or (not (negative? largest))\
    \ (> (first lst) largest)))\n       (largest_smallest_integers_helper (rest lst)\
    \ (first lst) smallest)]\n      [else (largest_smallest_integers_helper (rest\
    \ lst) largest smallest)]))\n  (largest_smallest_integers_helper lst #f #f))\n",
  "  (define (largest_negative_integer lst)\n    (cond\n      [(null? lst) #f]\n \
    \     [(and (negative? (car lst))\n            (or (not (negative? (cadr lst)))\n\
    \                (null? (cadr lst))))\n       (car lst)]\n      [else (largest_negative_integer\
    \ (cdr lst))]))\n  (define (smallest_positive_integer lst)\n    (cond\n      [(null?\
    \ lst) #f]\n      [(and (positive? (car lst))\n            (or (not (positive?\
    \ (cadr lst)))\n                (null? (cadr lst))))\n       (car lst)]\n    \
    \  [else (smallest_positive_integer (cdr lst))]))\n  (list (largest_negative_integer\
    \ lst)\n        (smallest_positive_integer lst)))\n", "  (define (largest_negative\
    \ lst)\n    (cond ((null? lst) #f)\n          ((and (negative? (car lst)) (not\
    \ (null? (cdr lst))))\n           (if (> (car lst) (largest_negative (cdr lst)))\n\
    \               (car lst)\n               (largest_negative (cdr lst))))\n   \
    \       ((negative? (car lst)) (car lst))\n          (else (largest_negative (cdr\
    \ lst)))))\n  (define (smallest_positive lst)\n    (cond ((null? lst) #f)\n  \
    \        ((and (positive? (car lst)) (not (null? (cdr lst))))\n           (if\
    \ (< (car lst) (smallest_positive (cdr lst)))\n               (car lst)\n    \
    \           (smallest_positive (cdr lst))))\n          ((positive? (car lst))\
    \ (car lst))\n          (else (smallest_positive (cdr lst)))))\n  (list (largest_negative\
    \ lst) (smallest_positive lst)))\n", "  (define (largest_smallest_integers_helper\
    \ lst largest smallest)\n    (if (null? lst)\n        (list largest smallest)\n\
    \        (let ((x (car lst)))\n          (if (and (integer? x) (positive? x))\n\
    \              (if (or (not (integer? smallest)) (&lt; x smallest))\n        \
    \          (largest_smallest_integers_helper (cdr lst) largest x)\n          \
    \        (largest_smallest_integers_helper (cdr lst) largest smallest))\n    \
    \          (if (and (integer? x) (negative? x))\n                  (if (or (not\
    \ (integer? largest)) (&gt; x largest))\n                      (largest_smallest_integers_helper\
    \ (cdr lst) x smallest)\n                      (largest_smallest_integers_helper\
    \ (cdr lst) largest smallest))\n                  (largest_smallest_integers_helper\
    \ (cdr lst) largest smallest))))))\n  (largest_smallest_integers_helper lst #f\
    \ #f))\n", "  (define (largest_negative lst)\n    (cond\n      [(empty? lst) #f]\n\
    \      [(and (negative? (first lst)) (not (negative? (first (rest lst))))) (first\
    \ lst)]\n      [else (largest_negative (rest lst))]))\n  (define (smallest_positive\
    \ lst)\n    (cond\n      [(empty? lst) #f]\n      [(and (positive? (first lst))\
    \ (not (positive? (first (rest lst))))) (first lst)]\n      [else (smallest_positive\
    \ (rest lst))]))\n  (list (largest_negative lst) (smallest_positive lst)))\n",
  "  (define (largest_smallest_integers_helper lst largest smallest)\n    (cond\n\
    \      [(empty? lst) (list largest smallest)]\n      [(and (positive? (first lst))\
    \ (or (not smallest) (&lt; (first lst) smallest)))\n       (largest_smallest_integers_helper\
    \ (rest lst) largest (first lst))]\n      [(and (negative? (first lst)) (or (not\
    \ largest) (&gt; (first lst) largest)))\n       (largest_smallest_integers_helper\
    \ (rest lst) (first lst) smallest)]\n      [else (largest_smallest_integers_helper\
    \ (rest lst) largest smallest)]))\n  (largest_smallest_integers_helper lst #f\
    \ #f))\n</code>\n", "  (define (is_positive? n)\n    (and (number? n) (> n 0)))\n\
    \  (define (is_negative? n)\n    (and (number? n) (< n 0)))\n  (define (largest_negative\
    \ lst)\n    (cond\n      [(null? lst) #f]\n      [(is_negative? (car lst)) (max\
    \ (car lst) (largest_negative (cdr lst)))]\n      [else (largest_negative (cdr\
    \ lst))]))\n  (define (smallest_positive lst)\n    (cond\n      [(null? lst) #f]\n\
    \      [(is_positive? (car lst)) (min (car lst) (smallest_positive (cdr lst)))]\n\
    \      [else (smallest_positive (cdr lst))]))\n  (list (largest_negative lst)\
    \ (smallest_positive lst)))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n  \
    \  [(and (positive? (first lst)) (negative? (first lst)))\n     (list (first lst)\
    \ (first lst))]\n    [(positive? (first lst))\n     (let* ([result (largest_smallest_integers\
    \ (rest lst))]\n            [smallest (second result)])\n       (if (and (not\
    \ (positive? smallest)) (not (negative? smallest)))\n           (list (first result)\
    \ (first lst))\n           (list (first result) (min (first lst) smallest))))]\n\
    \    [(negative? (first lst))\n     (let* ([result (largest_smallest_integers\
    \ (rest lst))]\n            [largest (first result)])\n       (if (and (not (positive?\
    \ largest)) (not (negative? largest)))\n           (list (first lst) (second result))\n\
    \           (list (max (first lst) largest) (second result))))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (define (largest_negative lst)\n    (cond\n      [(null?\
    \ lst) #f]\n      [(and (negative? (car lst)) (not (null? (cdr lst))))\n     \
    \  (if (negative? (car (cdr lst)))\n           (largest_negative (cdr lst))\n\
    \           (car lst))]\n      [(negative? (car lst)) (car lst)]\n      [else\
    \ (largest_negative (cdr lst))]))\n  (define (smallest_positive lst)\n    (cond\n\
    \      [(null? lst) #f]\n      [(and (positive? (car lst)) (not (null? (cdr lst))))\n\
    \       (if (positive? (car (cdr lst)))\n           (smallest_positive (cdr lst))\n\
    \           (car lst))]\n      [(positive? (car lst)) (car lst)]\n      [else\
    \ (smallest_positive (cdr lst))]))\n  (list (largest_negative lst) (smallest_positive\
    \ lst)))\n", "  (define (largest-neg lst)\n    (cond\n      [(empty? lst) #f]\n\
    \      [(and (negative? (first lst))\n            (or (not (negative? (second\
    \ lst)))\n                (empty? (rest lst))))\n       (first lst)]\n      [else\
    \ (largest-neg (rest lst))]))\n  (define (smallest-pos lst)\n    (cond\n     \
    \ [(empty? lst) #f]\n      [(and (positive? (first lst))\n            (or (not\
    \ (positive? (second lst)))\n                (empty? (rest lst))))\n       (first\
    \ lst)]\n      [else (smallest-pos (rest lst))]))\n  (list (largest-neg lst) (smallest-pos\
    \ lst)))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(and (negative? (first\
    \ lst)) (positive? (first lst))) (list #f #f)]\n    [(negative? (first lst)) (cons\
    \ (first lst) (largest_smallest_integers (rest lst)))]\n    [(positive? (first\
    \ lst)) (cons #f (largest_smallest_integers (rest lst)))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (define (largest_neg lst)\n    (cond\n      [(empty? lst)\
    \ #f]\n      [(and (negative? (first lst))\n            (or (not (negative? (second\
    \ lst)))\n                (empty? (rest lst)))) (first lst)]\n      [else (largest_neg\
    \ (rest lst))]))\n  (define (smallest_pos lst)\n    (cond\n      [(empty? lst)\
    \ #f]\n      [(and (positive? (first lst))\n            (or (not (positive? (second\
    \ lst)))\n                (empty? (rest lst)))) (first lst)]\n      [else (smallest_pos\
    \ (rest lst))]))\n  (list (largest_neg lst) (smallest_pos lst)))\n", "  (define\
    \ (helper lst largest smallest)\n    (cond\n      [(empty? lst) (list largest\
    \ smallest)]\n      [(positive? (first lst))\n       (if (or (not smallest) (<\
    \ (first lst) smallest))\n           (helper (rest lst) largest (first lst))\n\
    \           (helper (rest lst) largest smallest))]\n      [(negative? (first lst))\n\
    \       (if (or (not largest) (> (first lst) largest))\n           (helper (rest\
    \ lst) (first lst) smallest)\n           (helper (rest lst) largest smallest))]\n\
    \      [else (helper (rest lst) largest smallest)]))\n  (helper lst #f #f))\n",
  "  (cond\n    [(null? lst) (list #f #f)]\n    [(not (integer? (car lst))) (largest_smallest_integers\
    \ (cdr lst))]\n    [(and (integer? (car lst)) (positive? (car lst)))\n     (let\
    \ ([a (car lst)]\n           [b (car lst)])\n       (for ([i (cdr lst)])\n   \
    \      (cond\n           [(integer? i)\n            (cond\n              [(positive?\
    \ i)\n               (if (< i b)\n                   (set! b i))]\n          \
    \    [(negative? i)\n               (if (> i a)\n                   (set! a i))])]))\n\
    \       (list a b))]\n    [(and (integer? (car lst)) (negative? (car lst)))\n\
    \     (let ([a (car lst)]\n           [b (car lst)])\n       (for ([i (cdr lst)])\n\
    \         (cond\n           [(integer? i)\n            (cond\n              [(positive?\
    \ i)\n               (if (< i b)\n                   (set! b i))]\n          \
    \    [(negative? i)\n               (if (> i a)\n                   (set! a i))])]))\n\
    \       (list a b))]))\n", "  (define (largest_smallest_integers_helper lst largest\
    \ smallest)\n    (cond\n      [(null? lst) (list largest smallest)]\n      [(and\
    \ (integer? (car lst)) (negative? (car lst)))\n       (largest_smallest_integers_helper\
    \ (cdr lst) (car lst) smallest)]\n      [(and (integer? (car lst)) (positive?\
    \ (car lst)))\n       (largest_smallest_integers_helper (cdr lst) largest (car\
    \ lst))]\n      [else (largest_smallest_integers_helper (cdr lst) largest smallest)]))\n\
    \  (largest_smallest_integers_helper lst #f #f))\n", "  (cond\n    [(empty? lst)\
    \ (list #f #f)]\n    [(and (positive? (first lst)) (negative? (first lst))) (list\
    \ #f #f)]\n    [(positive? (first lst)) (list (first lst) (first lst))]\n    [(negative?\
    \ (first lst)) (list (first lst) (first lst))]\n    [else (list #f #f)]))\n",
  "  (let ([negs (filter (lambda (x) (and (integer? x) (< x 0))) lst)]\n        [pos\
    \ (filter (lambda (x) (and (integer? x) (> x 0))) lst)])\n    (if (empty? negs)\n\
    \        (if (empty? pos)\n            (list #f #f)\n            (list #f (min\
    \ pos)))\n        (if (empty? pos)\n            (list (max negs) #f)\n       \
    \     (list (max negs) (min pos))))))\n", "  (define (largest_negative lst)\n\
    \    (cond ((null? lst) #f)\n          ((and (number? (car lst)) (< (car lst)\
    \ 0))\n           (max (car lst) (largest_negative (cdr lst))))\n          (else\
    \ (largest_negative (cdr lst)))))\n  (define (smallest_positive lst)\n    (cond\
    \ ((null? lst) #f)\n          ((and (number? (car lst)) (> (car lst) 0))\n   \
    \        (min (car lst) (smallest_positive (cdr lst))))\n          (else (smallest_positive\
    \ (cdr lst)))))\n  (list (largest_negative lst) (smallest_positive lst)))\n",
  "  (define (largest_smallest_integers_helper lst largest smallest)\n    (cond\n\
    \      [(empty? lst) (list largest smallest)]\n      [(and (positive? (first lst))\
    \ (or (not (positive? smallest)) (< (first lst) smallest)))\n       (largest_smallest_integers_helper\
    \ (rest lst) largest (first lst))]\n      [(and (negative? (first lst)) (or (not\
    \ (negative? largest)) (> (first lst) largest)))\n       (largest_smallest_integers_helper\
    \ (rest lst) (first lst) smallest)]\n      [else (largest_smallest_integers_helper\
    \ (rest lst) largest smallest)]))\n  (largest_smallest_integers_helper lst #f\
    \ #f))\n", "  (define (largest_negative lst)\n    (cond\n      [(empty? lst) #f]\n\
    \      [(negative? (first lst)) (max (first lst) (largest_negative (rest lst)))]\n\
    \      [else (largest_negative (rest lst))]))\n  (define (smallest_positive lst)\n\
    \    (cond\n      [(empty? lst) #f]\n      [(positive? (first lst)) (min (first\
    \ lst) (smallest_positive (rest lst)))]\n      [else (smallest_positive (rest\
    \ lst))]))\n  (list (largest_negative lst) (smallest_positive lst)))\n", "  (let*\
    \ ([negatives (filter (lambda (x) (< x 0)) lst)]\n         [positives (filter\
    \ (lambda (x) (> x 0)) lst)])\n    (if (empty? negatives)\n        (list #f (min\
    \ positives))\n        (list (max negatives) (if (empty? positives) #f (min positives))))))\n",
  "  (define (largest_smallest_integers_iter lst largest smallest)\n    (cond\n  \
    \    [(empty? lst) (list largest smallest)]\n      [(and (positive? (first lst))\
    \ (or (not (positive? smallest)) (< (first lst) smallest)))\n       (largest_smallest_integers_iter\
    \ (rest lst) largest (first lst))]\n      [(and (negative? (first lst)) (or (not\
    \ (negative? largest)) (> (first lst) largest)))\n       (largest_smallest_integers_iter\
    \ (rest lst) (first lst) smallest)]\n      [else (largest_smallest_integers_iter\
    \ (rest lst) largest smallest)]))\n  (largest_smallest_integers_iter lst #f #f))\n",
  "  (define (helper lst largest smallest)\n    (if (null? lst)\n        (list largest\
    \ smallest)\n        (if (and (integer? (car lst))\n                 (not (zero?\
    \ (car lst))))\n            (if (positive? (car lst))\n                (if (or\
    \ (not (integer? smallest))\n                        (< (car lst) smallest))\n\
    \                    (helper (cdr lst) largest (car lst))\n                  \
    \  (helper (cdr lst) largest smallest))\n                (if (or (not (integer?\
    \ largest))\n                        (> (car lst) largest))\n                \
    \    (helper (cdr lst) (car lst) smallest)\n                    (helper (cdr lst)\
    \ largest smallest)))\n            (helper (cdr lst) largest smallest))))\n  (helper\
    \ lst #f #f))\n", "  (let ([neg (filter (lambda (x) (< x 0)) lst)]\n        [pos\
    \ (filter (lambda (x) (> x 0)) lst)])\n    (list (if (empty? neg) #f (apply max\
    \ neg))\n          (if (empty? pos) #f (apply min pos)))))\n", "  (define (largest_negative\
    \ lst)\n    (cond\n      [(empty? lst) #f]\n      [(negative? (first lst)) (max\
    \ (first lst) (largest_negative (rest lst)))]\n      [else (largest_negative (rest\
    \ lst))]))\n  (define (smallest_positive lst)\n    (cond\n      [(empty? lst)\
    \ #f]\n      [(positive? (first lst)) (min (first lst) (smallest_positive (rest\
    \ lst)))]\n      [else (smallest_positive (rest lst))]))\n  (list (largest_negative\
    \ lst) (smallest_positive lst)))\n", "  (define (largest_negative lst)\n    (cond\n\
    \      [(null? lst) #f]\n      [(and (number? (car lst)) (< (car lst) 0))\n  \
    \     (max (car lst) (largest_negative (cdr lst)))]\n      [else (largest_negative\
    \ (cdr lst))]))\n  (define (smallest_positive lst)\n    (cond\n      [(null? lst)\
    \ #f]\n      [(and (number? (car lst)) (> (car lst) 0))\n       (min (car lst)\
    \ (smallest_positive (cdr lst)))]\n      [else (smallest_positive (cdr lst))]))\n\
    \  (list (largest_negative lst) (smallest_positive lst)))\n", "  (cond\n    [(empty?\
    \ lst) (list #f #f)]\n    [(and (positive? (first lst)) (negative? (first lst)))\
    \ (list #f #f)]\n    [(positive? (first lst)) (list (first lst) (first lst))]\n\
    \    [(negative? (first lst)) (list (first lst) (first lst))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (let ([negs (filter (lambda (x) (< x 0)) lst)]\n     \
    \   [pos (filter (lambda (x) (> x 0)) lst)])\n    (if (empty? negs)\n        (list\
    \ #f (if (empty? pos) #f (min pos)))\n        (list (max negs) (if (empty? pos)\
    \ #f (min pos))))))\n", "  (let ([negs (filter (lambda (x) (< x 0)) lst)]\n  \
    \      [pos (filter (lambda (x) (> x 0)) lst)])\n    (list (if (null? negs) #f\
    \ (apply max negs))\n          (if (null? pos) #f (apply min pos)))))\n", "  (define\
    \ (largest_negative lst)\n    (cond\n      [(empty? lst) #f]\n      [(and (negative?\
    \ (first lst)) (not (negative? (first (rest lst))))) (first lst)]\n      [else\
    \ (largest_negative (rest lst))]))\n  (define (smallest_positive lst)\n    (cond\n\
    \      [(empty? lst) #f]\n      [(and (positive? (first lst)) (not (positive?\
    \ (first (rest lst))))) (first lst)]\n      [else (smallest_positive (rest lst))]))\n\
    \  (list (largest_negative lst) (smallest_positive lst)))\n", "  (define (largest_negative\
    \ lst)\n    (cond ((null? lst) #f)\n          ((and (negative? (car lst))\n  \
    \              (or (not (negative? (cadr lst)))\n                    (negative?\
    \ (car lst))\n                    (negative? (cadr lst))))\n           (largest_negative\
    \ (cdr lst)))\n          (else (car lst))))\n  (define (smallest_positive lst)\n\
    \    (cond ((null? lst) #f)\n          ((and (positive? (car lst))\n         \
    \       (or (not (positive? (cadr lst)))\n                    (positive? (car\
    \ lst))\n                    (positive? (cadr lst))))\n           (smallest_positive\
    \ (cdr lst)))\n          (else (car lst))))\n  (list (largest_negative lst) (smallest_positive\
    \ lst)))\n", "  (define (largest_smallest_integers_helper lst largest smallest)\n\
    \    (cond\n      [(empty? lst) (list largest smallest)]\n      [(and (negative?\
    \ (first lst)) (or (not largest) (&gt; (first lst) largest)))\n       (largest_smallest_integers_helper\
    \ (rest lst) (first lst) smallest)]\n      [(and (positive? (first lst)) (or (not\
    \ smallest) (&lt; (first lst) smallest)))\n       (largest_smallest_integers_helper\
    \ (rest lst) largest (first lst))]\n      [else (largest_smallest_integers_helper\
    \ (rest lst) largest smallest)]))\n  (largest_smallest_integers_helper lst #f\
    \ #f))\n</code>\n", "  (define (largest_smallest_integers_iter lst largest smallest)\n\
    \    (cond\n      [(empty? lst) (list largest smallest)]\n      [(and (positive?\
    \ (first lst)) (or (not (positive? smallest)) (< (first lst) smallest)))\n   \
    \    (largest_smallest_integers_iter (rest lst) largest (first lst))]\n      [(and\
    \ (negative? (first lst)) (or (not (negative? largest)) (> (first lst) largest)))\n\
    \       (largest_smallest_integers_iter (rest lst) (first lst) smallest)]\n  \
    \    [else (largest_smallest_integers_iter (rest lst) largest smallest)]))\n \
    \ (largest_smallest_integers_iter lst #f #f))\n", "  (cond\n    [(empty? lst)\
    \ (list #f #f)]\n    [(and (positive? (first lst)) (negative? (first lst))) (list\
    \ #f #f)]\n    [(positive? (first lst)) (list (largest_smallest_integers (rest\
    \ lst)) (first lst))]\n    [(negative? (first lst)) (list (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n    [else (list #f #f)]))\n", "  (define (largest_smallest_integers_helper\
    \ lst largest smallest)\n    (cond\n      [(null? lst) (list largest smallest)]\n\
    \      [(and (not (null? lst)) (not (integer? (car lst))))\n       (largest_smallest_integers_helper\
    \ (cdr lst) largest smallest)]\n      [(and (not (null? lst)) (integer? (car lst))\
    \ (positive? (car lst)))\n       (cond\n         [(not (integer? smallest))\n\
    \          (largest_smallest_integers_helper (cdr lst) largest (car lst))]\n \
    \        [(integer? smallest)\n          (cond\n            [(< (car lst) smallest)\n\
    \             (largest_smallest_integers_helper (cdr lst) largest (car lst))]\n\
    \            [else\n             (largest_smallest_integers_helper (cdr lst) largest\
    \ smallest)])])]\n      [(and (not (null? lst)) (integer? (car lst)) (negative?\
    \ (car lst)))\n       (cond\n         [(not (integer? largest))\n          (largest_smallest_integers_helper\
    \ (cdr lst) (car lst) smallest)]\n         [(integer? largest)\n          (cond\n\
    \            [(> (car lst) largest)\n             (largest_smallest_integers_helper\
    \ (cdr lst) (car lst) smallest)]\n            [else\n             (largest_smallest_integers_helper\
    \ (cdr lst) largest smallest)])])]))\n  (largest_smallest_integers_helper lst\
    \ #f #f))\n", "  (define (largest_negative lst)\n    (cond\n      [(null? lst)\
    \ #f]\n      [(and (negative? (car lst))\n            (or (not (negative? (cadr\
    \ lst)))\n                (negative? (car lst))\n                (and (negative?\
    \ (cadr lst))\n                     (> (car lst) (cadr lst)))))\n       (car lst)]\n\
    \      [else (largest_negative (cdr lst))]))\n  (define (smallest_positive lst)\n\
    \    (cond\n      [(null? lst) #f]\n      [(and (positive? (car lst))\n      \
    \      (or (not (positive? (cadr lst)))\n                (positive? (car lst))\n\
    \                (and (positive? (cadr lst))\n                     (< (car lst)\
    \ (cadr lst)))))\n       (car lst)]\n      [else (smallest_positive (cdr lst))]))\n\
    \  (list (largest_negative lst) (smallest_positive lst)))\n", "  (define (largest-negative\
    \ lst)\n    (cond\n      [(null? lst) #f]\n      [(and (negative? (car lst))\n\
    \            (or (not (negative? (cadr lst)))\n                (null? (cadr lst))))\n\
    \       (car lst)]\n      [else (largest-negative (cdr lst))]))\n  (define (smallest-positive\
    \ lst)\n    (cond\n      [(null? lst) #f]\n      [(and (positive? (car lst))\n\
    \            (or (not (positive? (cadr lst)))\n                (null? (cadr lst))))\n\
    \       (car lst)]\n      [else (smallest-positive (cdr lst))]))\n  (list (largest-negative\
    \ lst) (smallest-positive lst)))\n", "  (define (largest_negative lst)\n    (cond\
    \ ((null? lst) #f)\n          ((< (car lst) 0) (max (car lst) (largest_negative\
    \ (cdr lst))))\n          (else (largest_negative (cdr lst)))))\n  (define (smallest_positive\
    \ lst)\n    (cond ((null? lst) #f)\n          ((> (car lst) 0) (min (car lst)\
    \ (smallest_positive (cdr lst))))\n          (else (smallest_positive (cdr lst)))))\n\
    \  (list (largest_negative lst) (smallest_positive lst)))\n", "  (define (largest_negative\
    \ lst)\n    (cond\n      [(empty? lst) #f]\n      [(and (negative? (first lst))\n\
    \            (or (not (negative? (second lst)))\n                (negative? (first\
    \ lst))\n                (negative? (first lst))))\n       (largest_negative (rest\
    \ lst))]\n      [else (first lst)]))\n  (define (smallest_positive lst)\n    (cond\n\
    \      [(empty? lst) #f]\n      [(and (positive? (first lst))\n            (or\
    \ (not (positive? (second lst)))\n                (positive? (first lst))\n  \
    \              (positive? (first lst))))\n       (smallest_positive (rest lst))]\n\
    \      [else (first lst)]))\n  (list (largest_negative lst) (smallest_positive\
    \ lst)))\n", "  (define (largest_negative lst)\n    (cond\n      [(empty? lst)\
    \ #f]\n      [(and (negative? (first lst))\n            (or (not (negative? (second\
    \ lst)))\n                (empty? (rest lst))))\n       (first lst)]\n      [else\
    \ (largest_negative (rest lst))]))\n  (define (smallest_positive lst)\n    (cond\n\
    \      [(empty? lst) #f]\n      [(and (positive? (first lst))\n            (or\
    \ (not (positive? (second lst)))\n                (empty? (rest lst))))\n    \
    \   (first lst)]\n      [else (smallest_positive (rest lst))]))\n  (list (largest_negative\
    \ lst) (smallest_positive lst)))\n", "  (let ([negs (filter (lambda (x) (and (number?\
    \ x) (< x 0))) lst)]\n        [pos (filter (lambda (x) (and (number? x) (> x 0)))\
    \ lst)])\n    (list (if (empty? negs) #f (apply max negs))\n          (if (empty?\
    \ pos) #f (apply min pos)))))\n", "  (let ([negs (filter negative? lst)]\n   \
    \     [pos (filter positive? lst)])\n    (list (if (empty? negs) #f (apply max\
    \ negs))\n          (if (empty? pos) #f (apply min pos)))))\n", "  (define (largest_negative\
    \ lst)\n    (cond ((null? lst) #f)\n          ((and (number? (car lst)) (< (car\
    \ lst) 0))\n           (max (car lst) (largest_negative (cdr lst))))\n       \
    \   (else (largest_negative (cdr lst)))))\n  (define (smallest_positive lst)\n\
    \    (cond ((null? lst) #f)\n          ((and (number? (car lst)) (> (car lst)\
    \ 0))\n           (min (car lst) (smallest_positive (cdr lst))))\n          (else\
    \ (smallest_positive (cdr lst)))))\n  (list (largest_negative lst) (smallest_positive\
    \ lst)))\n", "  (define (largest_negative lst largest)\n    (cond\n      [(empty?\
    \ lst) largest]\n      [(and (negative? (first lst))\n            (or (not (number?\
    \ largest))\n                (< (first lst) largest)))\n       (largest_negative\
    \ (rest lst) (first lst))]\n      [else (largest_negative (rest lst) largest)]))\n\
    \  (define (smallest_positive lst smallest)\n    (cond\n      [(empty? lst) smallest]\n\
    \      [(and (positive? (first lst))\n            (or (not (number? smallest))\n\
    \                (> (first lst) smallest)))\n       (smallest_positive (rest lst)\
    \ (first lst))]\n      [else (smallest_positive (rest lst) smallest)]))\n  (list\
    \ (largest_negative lst #f)\n        (smallest_positive lst #f)))\n", "  (let*\
    \ ([negatives (filter (lambda (x) (< x 0)) lst)]\n         [positives (filter\
    \ (lambda (x) (> x 0)) lst)])\n    (list (if (empty? negatives) #f (apply max\
    \ negatives))\n          (if (empty? positives) #f (apply min positives)))))\n",
  "  (define (largest_negative lst)\n    (cond\n      [(empty? lst) #f]\n      [(and\
    \ (negative? (first lst))\n            (or (not (negative? (second lst)))\n  \
    \              (empty? (rest lst))))\n       (first lst)]\n      [else (largest_negative\
    \ (rest lst))]))\n  (define (smallest_positive lst)\n    (cond\n      [(empty?\
    \ lst) #f]\n      [(and (positive? (first lst))\n            (or (not (positive?\
    \ (second lst)))\n                (empty? (rest lst))))\n       (first lst)]\n\
    \      [else (smallest_positive (rest lst))]))\n  (list (largest_negative lst)\
    \ (smallest_positive lst)))\n", "  (define (largest_negative lst)\n    (cond\n\
    \      [(empty? lst) #f]\n      [(and (negative? (first lst)) (not (negative?\
    \ (first (rest lst))))) (first lst)]\n      [else (largest_negative (rest lst))]))\n\
    \  (define (smallest_positive lst)\n    (cond\n      [(empty? lst) #f]\n     \
    \ [(and (positive? (first lst)) (not (positive? (first (rest lst))))) (first lst)]\n\
    \      [else (smallest_positive (rest lst))]))\n  (list (largest_negative lst)\
    \ (smallest_positive lst)))\n", "  (let ([negs (filter (lambda (x) (negative?\
    \ x)) lst)]\n        [pos (filter (lambda (x) (positive? x)) lst)])\n    (if (empty?\
    \ negs)\n        (list #f (min pos))\n        (list (max negs) (if (empty? pos)\
    \ #f (min pos))))))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n    [(and (positive?\
    \ (first lst)) (negative? (first lst))) (list #f #f)]\n    [(positive? (first\
    \ lst)) (cons (largest_smallest_integers (rest lst)) (first lst))]\n    [(negative?\
    \ (first lst)) (cons (first lst) (largest_smallest_integers (rest lst)))]\n  \
    \  [else (largest_smallest_integers (rest lst))]))\n", "  (define (largest_negative\
    \ lst)\n    (cond\n      [(empty? lst) #f]\n      [(and (negative? (first lst))\n\
    \            (or (not (negative? (second lst)))\n                (empty? (rest\
    \ lst))))\n       (first lst)]\n      [else (largest_negative (rest lst))]))\n\
    \  (define (smallest_positive lst)\n    (cond\n      [(empty? lst) #f]\n     \
    \ [(and (positive? (first lst))\n            (or (not (positive? (second lst)))\n\
    \                (empty? (rest lst))))\n       (first lst)]\n      [else (smallest_positive\
    \ (rest lst))]))\n  (list (largest_negative lst) (smallest_positive lst)))\n",
  "  (cond\n    [(empty? lst) (list #f #f)]\n    [(empty? (filter (lambda (x) (and\
    \ (integer? x) (positive? x))) lst)) (list #f #f)]\n    [(empty? (filter (lambda\
    \ (x) (and (integer? x) (negative? x))) lst)) (list #f (apply min (filter (lambda\
    \ (x) (and (integer? x) (positive? x))) lst)))]\n    [else (list (apply max (filter\
    \ (lambda (x) (and (integer? x) (negative? x))) lst)) (apply min (filter (lambda\
    \ (x) (and (integer? x) (positive? x))) lst)))]))\n", "  (define (largest_negative\
    \ lst)\n    (cond\n      [(empty? lst) #f]\n      [(and (negative? (first lst))\n\
    \            (or (not (negative? (second lst)))\n                (empty? (rest\
    \ lst))))\n       (first lst)]\n      [else (largest_negative (rest lst))]))\n\
    \  (define (smallest_positive lst)\n    (cond\n      [(empty? lst) #f]\n     \
    \ [(and (positive? (first lst))\n            (or (not (positive? (second lst)))\n\
    \                (empty? (rest lst))))\n       (first lst)]\n      [else (smallest_positive\
    \ (rest lst))]))\n  (list (largest_negative lst) (smallest_positive lst)))\n",
  "  (define (largest_negative_integer lst)\n    (cond\n      [(empty? lst) #f]\n\
    \      [(and (negative? (first lst)) (not (empty? (rest lst))))\n       (max (first\
    \ lst) (largest_negative_integer (rest lst)))]\n      [(negative? (first lst))\
    \ (first lst)]\n      [else (largest_negative_integer (rest lst))]))\n  (define\
    \ (smallest_positive_integer lst)\n    (cond\n      [(empty? lst) #f]\n      [(and\
    \ (positive? (first lst)) (not (empty? (rest lst))))\n       (min (first lst)\
    \ (smallest_positive_integer (rest lst)))]\n      [(positive? (first lst)) (first\
    \ lst)]\n      [else (smallest_positive_integer (rest lst))]))\n  (list (largest_negative_integer\
    \ lst) (smallest_positive_integer lst)))\n", "  (define (largest_negative lst)\n\
    \    (cond\n      [(empty? lst) #f]\n      [(and (negative? (first lst)) (or (not\
    \ (negative? (second lst))) (empty? (rest lst)))) (first lst)]\n      [else (largest_negative\
    \ (rest lst))]))\n  (define (smallest_positive lst)\n    (cond\n      [(empty?\
    \ lst) #f]\n      [(and (positive? (first lst)) (or (not (positive? (second lst)))\
    \ (empty? (rest lst)))) (first lst)]\n      [else (smallest_positive (rest lst))]))\n\
    \  (list (largest_negative lst) (smallest_positive lst)))\n", "  (define (largest-negative\
    \ lst)\n    (cond\n      [(empty? lst) #f]\n      [(and (negative? (first lst))\n\
    \            (or (not (negative? (second lst)))\n                (and (negative?\
    \ (second lst))\n                     (< (first lst) (second lst)))))\n      \
    \ (first lst)]\n      [else (largest-negative (rest lst))]))\n  (define (smallest-positive\
    \ lst)\n    (cond\n      [(empty? lst) #f]\n      [(and (positive? (first lst))\n\
    \            (or (not (positive? (second lst)))\n                (and (positive?\
    \ (second lst))\n                     (> (first lst) (second lst)))))\n      \
    \ (first lst)]\n      [else (smallest-positive (rest lst))]))\n  (list (largest-negative\
    \ lst) (smallest-positive lst)))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n\
    \    [(and (positive? (first lst)) (negative? (first lst))) (list #f #f)]\n  \
    \  [(positive? (first lst)) (list (first lst) (first lst))]\n    [(negative? (first\
    \ lst)) (list (first lst) (first lst))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (define (largest_negative lst)\n    (cond\n      [(null?\
    \ lst) #f]\n      [(and (negative? (car lst))\n            (or (not (negative?\
    \ (cadr lst)))\n                (null? (cadr lst))))\n       (car lst)]\n    \
    \  [else (largest_negative (cdr lst))]))\n  (define (smallest_positive lst)\n\
    \    (cond\n      [(null? lst) #f]\n      [(and (positive? (car lst))\n      \
    \      (or (not (positive? (cadr lst)))\n                (null? (cadr lst))))\n\
    \       (car lst)]\n      [else (smallest_positive (cdr lst))]))\n  (list (largest_negative\
    \ lst) (smallest_positive lst)))\n", "  (define (largest_negative lst)\n    (cond\n\
    \      [(null? lst) #f]\n      [(and (number? (car lst)) (< (car lst) 0))\n  \
    \     (max (car lst) (largest_negative (cdr lst)))]\n      [else (largest_negative\
    \ (cdr lst))]))\n  (define (smallest_positive lst)\n    (cond\n      [(null? lst)\
    \ #f]\n      [(and (number? (car lst)) (> (car lst) 0))\n       (min (car lst)\
    \ (smallest_positive (cdr lst)))]\n      [else (smallest_positive (cdr lst))]))\n\
    \  (list (largest_negative lst) (smallest_positive lst)))\n", "  (cond\n    [(empty?\
    \ lst) (list #f #f)]\n    [(empty? (filter (lambda (x) (positive? x)) lst)) (list\
    \ (apply max (filter (lambda (x) (negative? x)) lst)) #f)]\n    [(empty? (filter\
    \ (lambda (x) (negative? x)) lst)) (list #f (apply min (filter (lambda (x) (positive?\
    \ x)) lst)))]\n    [else (list (apply max (filter (lambda (x) (negative? x)) lst))\
    \ (apply min (filter (lambda (x) (positive? x)) lst)))]))\n", "  (cond\n    [(empty?\
    \ lst) (list #f #f)]\n    [(and (positive? (first lst)) (negative? (first lst)))\n\
    \     (let* ([lst (rest lst)]\n            [a (largest_smallest_integers lst)]\n\
    \            [b (largest_smallest_integers lst)])\n       (list (first a) (second\
    \ b)))]\n    [(positive? (first lst))\n     (let* ([lst (rest lst)]\n        \
    \    [a (largest_smallest_integers lst)])\n       (list (first a) (first lst)))]\n\
    \    [(negative? (first lst))\n     (let* ([lst (rest lst)]\n            [a (largest_smallest_integers\
    \ lst)])\n       (list (first lst) (second a)))]\n    [else (list #f #f)]))\n",
  "  (define (largest_smallest_integers_helper lst largest smallest)\n    (cond\n\
    \      [(empty? lst) (list largest smallest)]\n      [(and (positive? (first lst))\
    \ (or (not (positive? smallest)) (< (first lst) smallest)))\n       (largest_smallest_integers_helper\
    \ (rest lst) largest (first lst))]\n      [(and (negative? (first lst)) (or (not\
    \ (negative? largest)) (> (first lst) largest)))\n       (largest_smallest_integers_helper\
    \ (rest lst) (first lst) smallest)]\n      [else (largest_smallest_integers_helper\
    \ (rest lst) largest smallest)]))\n  (largest_smallest_integers_helper lst #f\
    \ #f))\n", "  (define (largest_smallest_integers_iter lst largest smallest)\n\
    \    (cond\n      [(empty? lst) (list largest smallest)]\n      [(and (positive?\
    \ (first lst)) (not smallest))\n       (largest_smallest_integers_iter (rest lst)\
    \ largest (first lst))]\n      [(and (negative? (first lst)) (not largest))\n\
    \       (largest_smallest_integers_iter (rest lst) (first lst) smallest)]\n  \
    \    [(and (positive? (first lst)) (< (first lst) smallest))\n       (largest_smallest_integers_iter\
    \ (rest lst) largest (first lst))]\n      [(and (negative? (first lst)) (> (first\
    \ lst) largest))\n       (largest_smallest_integers_iter (rest lst) (first lst)\
    \ smallest)]\n      [else (largest_smallest_integers_iter (rest lst) largest smallest)]))\n\
    \  (largest_smallest_integers_iter lst #f #f))\n", "  (define (largest_smallest_integers_helper\
    \ lst largest smallest)\n    (cond\n      [(empty? lst) (list largest smallest)]\n\
    \      [(and (positive? (first lst)) (or (not (positive? smallest)) (< (first\
    \ lst) smallest)))\n       (largest_smallest_integers_helper (rest lst) largest\
    \ (first lst))]\n      [(and (negative? (first lst)) (or (not (negative? largest))\
    \ (> (first lst) largest)))\n       (largest_smallest_integers_helper (rest lst)\
    \ (first lst) smallest)]\n      [else (largest_smallest_integers_helper (rest\
    \ lst) largest smallest)]))\n  (largest_smallest_integers_helper lst #f #f))\n",
  "  (define (largest_smallest_integers_helper lst largest smallest)\n    (cond\n\
    \      [(empty? lst) (list largest smallest)]\n      [(and (positive? (first lst))\
    \ (or (not (positive? smallest)) (< (first lst) smallest)))\n       (largest_smallest_integers_helper\
    \ (rest lst) largest (first lst))]\n      [(and (negative? (first lst)) (or (not\
    \ (negative? largest)) (> (first lst) largest)))\n       (largest_smallest_integers_helper\
    \ (rest lst) (first lst) smallest)]\n      [else (largest_smallest_integers_helper\
    \ (rest lst) largest smallest)]))\n  (largest_smallest_integers_helper lst #f\
    \ #f))\n", "  (define (largest_negative lst)\n    (cond\n      [(empty? lst) #f]\n\
    \      [(and (negative? (first lst))\n            (or (not (negative? (second\
    \ lst)))\n                (negative? (second lst))))\n       (largest_negative\
    \ (rest lst))]\n      [else (first lst)]))\n  (define (smallest_positive lst)\n\
    \    (cond\n      [(empty? lst) #f]\n      [(and (positive? (first lst))\n   \
    \         (or (not (positive? (second lst)))\n                (positive? (second\
    \ lst))))\n       (smallest_positive (rest lst))]\n      [else (first lst)]))\n\
    \  (list (largest_negative lst) (smallest_positive lst)))\n", "  (cond\n    [(empty?\
    \ lst) (list #f #f)]\n    [(and (positive? (first lst)) (negative? (first lst)))\
    \ (list #f #f)]\n    [(positive? (first lst)) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n    [(negative? (first lst)) (cons (first lst) (largest_smallest_integers\
    \ (rest lst)))]\n    [else (largest_smallest_integers (rest lst))]))\n", "  (define\
    \ (largest_smallest_integers_iter lst largest smallest)\n    (cond\n      [(empty?\
    \ lst) (list largest smallest)]\n      [(and (positive? (first lst)) (or (not\
    \ (positive? smallest)) (< (first lst) smallest)))\n       (largest_smallest_integers_iter\
    \ (rest lst) largest (first lst))]\n      [(and (negative? (first lst)) (or (not\
    \ (negative? largest)) (> (first lst) largest)))\n       (largest_smallest_integers_iter\
    \ (rest lst) (first lst) smallest)]\n      [else (largest_smallest_integers_iter\
    \ (rest lst) largest smallest)]))\n  (largest_smallest_integers_iter lst #f #f))\n",
  "  (define (helper lst largest smallest)\n    (cond\n      [(null? lst) (list largest\
    \ smallest)]\n      [(and (negative? (car lst)) (or (not (number? largest)) (<\
    \ (car lst) largest)))\n       (helper (cdr lst) (car lst) smallest)]\n      [(and\
    \ (positive? (car lst)) (or (not (number? smallest)) (> (car lst) smallest)))\n\
    \       (helper (cdr lst) largest (car lst))]\n      [else (helper (cdr lst) largest\
    \ smallest)]))\n  (helper lst #f #f))\n", "  (define (largest_negative lst)\n\
    \    (cond ((null? lst) #f)\n          ((and (negative? (car lst))\n         \
    \       (or (not (negative? (cadr lst)))\n                    (and (negative?\
    \ (cadr lst))\n                         (> (car lst) (cadr lst)))))\n        \
    \   (car lst))\n          (else (largest_negative (cdr lst)))))\n  (define (smallest_positive\
    \ lst)\n    (cond ((null? lst) #f)\n          ((and (positive? (car lst))\n  \
    \              (or (not (positive? (cadr lst)))\n                    (and (positive?\
    \ (cadr lst))\n                         (< (car lst) (cadr lst)))))\n        \
    \   (car lst))\n          (else (smallest_positive (cdr lst)))))\n  (list (largest_negative\
    \ lst) (smallest_positive lst)))\n", "  (define (largest_smallest_integers_iter\
    \ lst largest smallest)\n    (if (null? lst)\n        (list largest smallest)\n\
    \        (let ([x (car lst)])\n          (if (and (integer? x) (not (zero? x)))\n\
    \              (if (and (not (integer? largest)) (not (integer? smallest)))\n\
    \                  (largest_smallest_integers_iter (cdr lst) x x)\n          \
    \        (if (integer? largest)\n                      (if (integer? smallest)\n\
    \                          (if (positive? x)\n                              (if\
    \ (< x smallest)\n                                  (largest_smallest_integers_iter\
    \ (cdr lst) largest x)\n                                  (largest_smallest_integers_iter\
    \ (cdr lst) largest smallest))\n                              (if (> x largest)\n\
    \                                  (largest_smallest_integers_iter (cdr lst) x\
    \ smallest)\n                                  (largest_smallest_integers_iter\
    \ (cdr lst) largest smallest)))\n                          (if (positive? x)\n\
    \                              (largest_smallest_integers_iter (cdr lst) largest\
    \ x)\n                              (largest_smallest_integers_iter (cdr lst)\
    \ x smallest)))\n                      (if (integer? smallest)\n             \
    \             (if (positive? x)\n                              (largest_smallest_integers_iter\
    \ (cdr lst) x smallest)\n                              (largest_smallest_integers_iter\
    \ (cdr lst) x x))\n                          (if (positive? x)\n             \
    \                 (largest_smallest_integers_iter (cdr lst) x x)\n           \
    \                   (largest_smallest_integers_iter (cdr lst) x x)))))\n     \
    \         (largest_smallest_integers_iter (cdr lst) largest smallest)))))\n  (largest_smallest_integers_iter\
    \ lst #f #f))\n", "  (define (largest_neg lst)\n    (cond\n      [(empty? lst)\
    \ #f]\n      [(and (negative? (first lst)) (or (not (negative? (second lst)))\
    \ (empty? (rest lst)))) (first lst)]\n      [else (largest_neg (rest lst))]))\n\
    \  (define (smallest_pos lst)\n    (cond\n      [(empty? lst) #f]\n      [(and\
    \ (positive? (first lst)) (or (not (positive? (second lst))) (empty? (rest lst))))\
    \ (first lst)]\n      [else (smallest_pos (rest lst))]))\n  (list (largest_neg\
    \ lst) (smallest_pos lst)))\n", "  (define (largest_negative lst)\n    (cond ((null?\
    \ lst) #f)\n          ((and (number? (car lst)) (< (car lst) 0))\n           (max\
    \ (car lst) (largest_negative (cdr lst))))\n          (else (largest_negative\
    \ (cdr lst)))))\n  (define (smallest_positive lst)\n    (cond ((null? lst) #f)\n\
    \          ((and (number? (car lst)) (> (car lst) 0))\n           (min (car lst)\
    \ (smallest_positive (cdr lst))))\n          (else (smallest_positive (cdr lst)))))\n\
    \  (list (largest_negative lst) (smallest_positive lst)))\n", "  (define (largest_negative\
    \ lst)\n    (cond\n      [(null? lst) #f]\n      [(and (number? (car lst)) (<\
    \ (car lst) 0))\n       (max (car lst) (largest_negative (cdr lst)))]\n      [else\
    \ (largest_negative (cdr lst))]))\n  (define (smallest_positive lst)\n    (cond\n\
    \      [(null? lst) #f]\n      [(and (number? (car lst)) (> (car lst) 0))\n  \
    \     (min (car lst) (smallest_positive (cdr lst)))]\n      [else (smallest_positive\
    \ (cdr lst))]))\n  (list (largest_negative lst) (smallest_positive lst)))\n",
  "  (cond\n    [(empty? lst) (list #f #f)]\n    [(and (positive? (first lst)) (negative?\
    \ (first lst))) (list #f #f)]\n    [(positive? (first lst)) (list (first lst)\
    \ (first lst))]\n    [(negative? (first lst)) (list (first lst) (first lst))]\n\
    \    [else (list #f #f)]))\n", "  (cond\n    [(empty? lst) (list #f #f)]\n   \
    \ [(and (positive? (first lst)) (negative? (first lst))) (list #f #f)]\n    [(positive?\
    \ (first lst)) (list (first lst) (first lst))]\n    [(negative? (first lst)) (list\
    \ (first lst) (first lst))]\n    [else (list #f #f)]))\n", "  (define (find-largest-negative\
    \ lst largest)\n    (cond\n      [(null? lst) largest]\n      [(and (number? (car\
    \ lst)) (< (car lst) 0))\n       (find-largest-negative (cdr lst) (max (car lst)\
    \ largest))]\n      [else (find-largest-negative (cdr lst) largest)]))\n  (define\
    \ (find-smallest-positive lst smallest)\n    (cond\n      [(null? lst) smallest]\n\
    \      [(and (number? (car lst)) (> (car lst) 0))\n       (find-smallest-positive\
    \ (cdr lst) (min (car lst) smallest))]\n      [else (find-smallest-positive (cdr\
    \ lst) smallest)]))\n  (list (find-largest-negative lst -1000000)\n        (find-smallest-positive\
    \ lst 1000000)))\n", "  (define (largest_smallest_integers_helper lst largest\
    \ smallest)\n    (cond\n      [(empty? lst) (list largest smallest)]\n      [(and\
    \ (positive? (first lst)) (or (not (positive? smallest)) (< (first lst) smallest)))\n\
    \       (largest_smallest_integers_helper (rest lst) largest (first lst))]\n \
    \     [(and (negative? (first lst)) (or (not (negative? largest)) (> (first lst)\
    \ largest)))\n       (largest_smallest_integers_helper (rest lst) (first lst)\
    \ smallest)]\n      [else (largest_smallest_integers_helper (rest lst) largest\
    \ smallest)]))\n  (largest_smallest_integers_helper lst #f #f))\n", "  (define\
    \ (largest_smallest_integers_helper lst largest smallest)\n    (cond\n      [(empty?\
    \ lst) (list largest smallest)]\n      [(and (integer? (first lst))\n        \
    \    (positive? (first lst))\n            (or (not (integer? smallest))\n    \
    \            (< (first lst) smallest)))\n       (largest_smallest_integers_helper\
    \ (rest lst) largest (first lst))]\n      [(and (integer? (first lst))\n     \
    \       (negative? (first lst))\n            (or (not (integer? largest))\n  \
    \              (> (first lst) largest)))\n       (largest_smallest_integers_helper\
    \ (rest lst) (first lst) smallest)]\n      [else (largest_smallest_integers_helper\
    \ (rest lst) largest smallest)]))\n  (largest_smallest_integers_helper lst #f\
    \ #f))\n", "  (define (largest-negative lst)\n    (cond\n      [(null? lst) #f]\n\
    \      [(and (number? (car lst)) (< (car lst) 0))\n       (max (car lst) (largest-negative\
    \ (cdr lst)))]\n      [else (largest-negative (cdr lst))]))\n  (define (smallest-positive\
    \ lst)\n    (cond\n      [(null? lst) #f]\n      [(and (number? (car lst)) (>\
    \ (car lst) 0))\n       (min (car lst) (smallest-positive (cdr lst)))]\n     \
    \ [else (smallest-positive (cdr lst))]))\n  (list (largest-negative lst) (smallest-positive\
    \ lst)))\n", "  (define (largest_negative lst)\n    (cond\n      [(empty? lst)\
    \ #f]\n      [(and (negative? (first lst))\n            (or (not (negative? (second\
    \ lst)))\n                (empty? (rest lst))))\n       (first lst)]\n      [else\
    \ (largest_negative (rest lst))]))\n  (define (smallest_positive lst)\n    (cond\n\
    \      [(empty? lst) #f]\n      [(and (positive? (first lst))\n            (or\
    \ (not (positive? (second lst)))\n                (empty? (rest lst))))\n    \
    \   (first lst)]\n      [else (smallest_positive (rest lst))]))\n  (list (largest_negative\
    \ lst) (smallest_positive lst)))\n", "  (define (largest_smallest_integers_iter\
    \ lst largest smallest)\n    (cond\n      [(empty? lst) (list largest smallest)]\n\
    \      [(and (positive? (first lst)) (not smallest))\n       (largest_smallest_integers_iter\
    \ (rest lst) largest (first lst))]\n      [(and (negative? (first lst)) (not largest))\n\
    \       (largest_smallest_integers_iter (rest lst) (first lst) smallest)]\n  \
    \    [(and (positive? (first lst)) (< (first lst) smallest))\n       (largest_smallest_integers_iter\
    \ (rest lst) largest (first lst))]\n      [(and (negative? (first lst)) (> (first\
    \ lst) largest))\n       (largest_smallest_integers_iter (rest lst) (first lst)\
    \ smallest)]\n      [else (largest_smallest_integers_iter (rest lst) largest smallest)]))\n\
    \  (largest_smallest_integers_iter lst #f #f))\n", "  (define (largest_negative\
    \ lst)\n    (cond\n      [(empty? lst) #f]\n      [(< (first lst) 0) (max (first\
    \ lst) (largest_negative (rest lst)))]\n      [else (largest_negative (rest lst))]))\n\
    \  (define (smallest_positive lst)\n    (cond\n      [(empty? lst) #f]\n     \
    \ [(> (first lst) 0) (min (first lst) (smallest_positive (rest lst)))]\n     \
    \ [else (smallest_positive (rest lst))]))\n  (list (largest_negative lst) (smallest_positive\
    \ lst)))\n", "  (define (largest_smallest_integers_helper lst largest smallest)\n\
    \    (cond\n      [(empty? lst) (list largest smallest)]\n      [(and (positive?\
    \ (first lst)) (or (not (positive? smallest)) (< (first lst) smallest)))\n   \
    \    (largest_smallest_integers_helper (rest lst) largest (first lst))]\n    \
    \  [(and (negative? (first lst)) (or (not (negative? largest)) (> (first lst)\
    \ largest)))\n       (largest_smallest_integers_helper (rest lst) (first lst)\
    \ smallest)]\n      [else (largest_smallest_integers_helper (rest lst) largest\
    \ smallest)]))\n  (largest_smallest_integers_helper lst #f #f))\n", "  (cond\n\
    \    [(empty? lst) (list #f #f)]\n    [(and (positive? (first lst)) (negative?\
    \ (first lst))) (list #f #f)]\n    [(positive? (first lst)) (cons (largest_smallest_integers\
    \ (rest lst)) (list (first lst)))]\n    [(negative? (first lst)) (cons (first\
    \ lst) (largest_smallest_integers (rest lst)))]\n    [else (largest_smallest_integers\
    \ (rest lst))]))\n", "  (define (largest-negative lst)\n    (cond\n      [(empty?\
    \ lst) #f]\n      [(and (negative? (first lst)) (not (negative? (first (rest lst)))))\
    \ (first lst)]\n      [else (largest-negative (rest lst))]))\n  (define (smallest-positive\
    \ lst)\n    (cond\n      [(empty? lst) #f]\n      [(and (positive? (first lst))\
    \ (not (positive? (first (rest lst))))) (first lst)]\n      [else (smallest-positive\
    \ (rest lst))]))\n  (list (largest-negative lst) (smallest-positive lst)))\n",
  "  (define (largest_negative lst)\n    (cond ((null? lst) #f)\n          ((< (car\
    \ lst) 0) (max (car lst) (largest_negative (cdr lst))))\n          (else (largest_negative\
    \ (cdr lst)))))\n  (define (smallest_positive lst)\n    (cond ((null? lst) #f)\n\
    \          ((> (car lst) 0) (min (car lst) (smallest_positive (cdr lst))))\n \
    \         (else (smallest_positive (cdr lst)))))\n  (list (largest_negative lst)\
    \ (smallest_positive lst)))\n", "  (define (largest_smallest_integers_helper lst\
    \ largest smallest)\n    (cond\n      [(empty? lst) (list largest smallest)]\n\
    \      [(negative? (first lst))\n       (largest_smallest_integers_helper (rest\
    \ lst) (first lst) smallest)]\n      [(positive? (first lst))\n       (largest_smallest_integers_helper\
    \ (rest lst) largest (first lst))]\n      [else (largest_smallest_integers_helper\
    \ (rest lst) largest smallest)]))\n  (largest_smallest_integers_helper lst #f\
    \ #f))\n", "  (define (largest_negative lst)\n    (cond\n      [(empty? lst) #f]\n\
    \      [(and (negative? (first lst))\n            (or (not (negative? (second\
    \ lst)))\n                (negative? (first lst))))\n       (first lst)]\n   \
    \   [else (largest_negative (rest lst))]))\n  (define (smallest_positive lst)\n\
    \    (cond\n      [(empty? lst) #f]\n      [(and (positive? (first lst))\n   \
    \         (or (not (positive? (second lst)))\n                (positive? (first\
    \ lst))))\n       (first lst)]\n      [else (smallest_positive (rest lst))]))\n\
    \  (list (largest_negative lst) (smallest_positive lst)))\n", "  (define (helper\
    \ lst largest smallest)\n    (cond ((null? lst) (list largest smallest))\n   \
    \       ((< (car lst) 0) (helper (cdr lst) (car lst) smallest))\n          ((>\
    \ (car lst) 0) (helper (cdr lst) largest (car lst)))\n          (else (helper\
    \ (cdr lst) largest smallest))))\n  (helper lst #f #f))\n", "  (let ([negs (filter\
    \ (lambda (x) (< x 0)) lst)]\n        [pos (filter (lambda (x) (> x 0)) lst)])\n\
    \    (if (null? negs)\n        (list #f (car pos))\n        (list (apply max negs)\
    \ (car pos)))))\n", "  (define (largest_negative lst)\n    (cond\n      [(empty?\
    \ lst) #f]\n      [(< (first lst) 0) (max (first lst) (largest_negative (rest\
    \ lst)))]\n      [else (largest_negative (rest lst))]))\n  (define (smallest_positive\
    \ lst)\n    (cond\n      [(empty? lst) #f]\n      [(> (first lst) 0) (min (first\
    \ lst) (smallest_positive (rest lst)))]\n      [else (smallest_positive (rest\
    \ lst))]))\n  (list (largest_negative lst) (smallest_positive lst)))\n", "  (define\
    \ (largest_negative_integer lst)\n    (cond\n      [(empty? lst) #f]\n      [(and\
    \ (negative? (first lst)) (not (negative? (first (rest lst))))) (first lst)]\n\
    \      [else (largest_negative_integer (rest lst))]))\n  (define (smallest_positive_integer\
    \ lst)\n    (cond\n      [(empty? lst) #f]\n      [(and (positive? (first lst))\
    \ (not (positive? (first (rest lst))))) (first lst)]\n      [else (smallest_positive_integer\
    \ (rest lst))]))\n  (list (largest_negative_integer lst) (smallest_positive_integer\
    \ lst)))\n", "  (define (largest_negative lst)\n    (cond\n      [(null? lst)\
    \ #f]\n      [(and (negative? (car lst)) (not (null? (cdr lst))))\n       (if\
    \ (negative? (car (cdr lst)))\n           (largest_negative (cdr lst))\n     \
    \      (car lst))]\n      [(negative? (car lst)) (car lst)]\n      [else (largest_negative\
    \ (cdr lst))]))\n  (define (smallest_positive lst)\n    (cond\n      [(null? lst)\
    \ #f]\n      [(and (positive? (car lst)) (not (null? (cdr lst))))\n       (if\
    \ (positive? (car (cdr lst)))\n           (smallest_positive (cdr lst))\n    \
    \       (car lst))]\n      [(positive? (car lst)) (car lst)]\n      [else (smallest_positive\
    \ (cdr lst))]))\n  (list (largest_negative lst) (smallest_positive lst)))\n",
  "  (define (largest_smallest_integers_helper lst largest smallest)\n    (cond\n\
    \      [(empty? lst) (list largest smallest)]\n      [(and (positive? (first lst))\
    \ (not smallest)) (largest_smallest_integers_helper (rest lst) largest (first\
    \ lst))]\n      [(and (negative? (first lst)) (not largest)) (largest_smallest_integers_helper\
    \ (rest lst) (first lst) smallest)]\n      [(and (positive? (first lst)) (< (first\
    \ lst) smallest)) (largest_smallest_integers_helper (rest lst) largest (first\
    \ lst))]\n      [(and (negative? (first lst)) (> (first lst) largest)) (largest_smallest_integers_helper\
    \ (rest lst) (first lst) smallest)]\n      [else (largest_smallest_integers_helper\
    \ (rest lst) largest smallest)]))\n  (largest_smallest_integers_helper lst #f\
    \ #f))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
