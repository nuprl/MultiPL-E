name: HumanEval_151_double_the_difference
language: rkt
prompt: "#lang racket\n\n;; Given a list of numbers, return the sum of squares of\
  \ the numbers\n;; in the list that are odd. Ignore numbers that are negative or\
  \ not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference\
  \ (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>>\
  \ (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return\
  \ 0.\n(define (double_the_difference lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n\
  \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5\
  \ 4)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
  \ (candidate (list -10 -20 -30)) 0)\n    (check-equal? (candidate (list -1 -2 8))\
  \ 0)\n    (check-equal? (candidate (list 0.2 3 5)) 34)\n    (check-equal? (candidate\
  \ (list -9 -7 -5 -3 -1 1 3 5 7 9)) 165)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd?\
    \ (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)) (positive? (first lst)))\n     (* 2 (square (first\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (odd? (first lst))\n          (positive? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (+ (square (first lst)) (double_the_difference (rest lst)))]\n    [else\
    \ (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n \
    \   [(and (odd? (first lst)) (positive? (first lst)))\n     (* 2 (square (first\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (positive? (first\
    \ lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\
    \ (odd? (first lst)))\n     (+ (square (first lst)) (double_the_difference (rest\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (odd? (first lst)) (positive? (first lst)))\n     (* 2 (square\
    \ (first lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst))\
    \ (positive? (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (odd? (first lst))\
    \ (positive? (first lst)))\n     (+ (square (first lst)) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst))\
    \ (positive? (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst))\n          (odd? (first lst))\n          (positive? (first lst)))\n  \
    \   (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (if (null? lst)\n      0\n      (let ((x (car lst))\n            (xs (cdr lst)))\n\
    \        (if (and (integer? x)\n                 (not (negative? x))\n       \
    \          (odd? x))\n            (* 2 (square x))\n            0))))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst))\n          (odd? (first\
    \ lst))\n          (positive? (first lst)))\n     (* 2 (square (first lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (positive? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst))\
    \ (positive? (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)) (positive? (first lst)))\n     (* 2 (square (first\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (positive? (first\
    \ lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\
    \ (odd? (first lst)) (positive? (first lst)))\n     (* 2 (square (first lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond [(empty? lst) 0]\n\
    \        [else\n         (let ([x (first lst)])\n           (cond [(and (integer?\
    \ x) (odd? x))\n                  (+ (square x) (double_the_difference (rest lst)))]\n\
    \                 [else (double_the_difference (rest lst))]))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (positive?\
    \ (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (if (null? lst)\n      0\n      (let ((x (car lst))\n\
    \            (xs (cdr lst)))\n        (if (and (integer? x) (> x 0))\n       \
    \     (+ (* x x) (double_the_difference xs))\n            (double_the_difference\
    \ xs)))))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\
    \ (odd? (first lst)) (positive? (first lst)))\n     (* 2 (square (first lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (odd? (car lst)) (positive? (car lst)))\n     (* 2 (square (car\
    \ lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond [(empty?\
    \ lst) 0]\n        [else (+ (* (car lst) (car lst))\n                 (double_the_difference\
    \ (cdr lst)))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)) (positive? (first lst)))\n     (* 2 (square (first\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(not (integer? (car lst))) (double_the_difference (cdr lst))]\n\
    \    [(< (car lst) 0) (double_the_difference (cdr lst))]\n    [(odd? (car lst))\
    \ (* 2 (square (car lst)))]\n    [else (double_the_difference (cdr lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst))\
    \ (positive? (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)) (positive? (first lst)))\n     (* (square (first lst))\
    \ 2)]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (positive? (first\
    \ lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\
    \ (odd? (first lst)) (> (first lst) 0))\n     (* 2 (square (first lst)))]\n  \
    \  [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (positive? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst))\
    \ (positive? (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)) (positive? (first lst)))\n     (* 2 (square (first\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(not (integer? (car lst)))\n     (double_the_difference (cdr lst))]\n\
    \    [(< (car lst) 0)\n     (double_the_difference (cdr lst))]\n    [(odd? (car\
    \ lst))\n     (* 2 (square (car lst)))]\n    [else\n     (double_the_difference\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)) (positive? (first lst)))\n     (* 2 (square (first\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (positive? (first\
    \ lst)))\n     (* 2 (square (first lst)))]\n    [else\n     (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)) (positive? (first lst)))\n     (* 2 (square (first\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (odd? (car lst)) (positive? (car lst)))\n     (+ (square\
    \ (car lst)) (double_the_difference (cdr lst)))]\n    [else (double_the_difference\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)) (positive? (first lst)))\n     (* 2 (square (first\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (positive? (first\
    \ lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\n\
    \          (odd? (first lst))\n          (positive? (first lst)))\n     (* 2 (square\
    \ (first lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (positive?\
    \ (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond [(empty? lst) 0]\n        [else\n         (let ([first\
    \ (first lst)])\n           (cond [(and (integer? first) (odd? first))\n     \
    \             (* (square first) 2)]\n                 [else\n                \
    \  (double_the_difference (rest lst))]))]))\n", "  (cond [(empty? lst) 0]\n  \
    \      [else\n         (let ([x (first lst)])\n           (cond [(and (integer?\
    \ x) (odd? x))\n                  (+ (square x) (double_the_difference (rest lst)))]\n\
    \                 [else (double_the_difference (rest lst))]))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (positive?\
    \ (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)) (positive? (first lst)))\n     (* 2 (square (first\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (odd? (car lst)) (positive? (car lst)))\n     (+ (square\
    \ (car lst)) (double_the_difference (cdr lst)))]\n    [else (double_the_difference\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)) (> (first lst) 0))\n     (* 2 (square (first lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst))\n          (odd? (first lst))\n       \
    \   (positive? (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)) (positive? (first lst)))\n     (* 2 (square (first\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (integer? (first lst))\n          (odd? (first lst))\n  \
    \        (positive? (first lst)))\n     (* 2 (square (first lst)))]\n    [else\
    \ (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n \
    \   [(and (integer? (first lst)) (odd? (first lst)) (positive? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else\n     (double_the_difference (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\
    \ (odd? (first lst)) (positive? (first lst)))\n     (* 2 (square (first lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (odd? (car lst)) (integer? (car lst)) (> (car lst) 0))\n     (+\
    \ (* (car lst) (car lst)) (double_the_difference (cdr lst)))]\n    [else (double_the_difference\
    \ (cdr lst))]))\n", "  (if (null? lst)\n      0\n      (let ((first (car lst))\n\
    \            (rest (cdr lst)))\n        (if (and (integer? first)\n          \
    \       (not (negative? first)))\n            (+ (* first first)\n           \
    \    (double_the_difference rest))\n            (double_the_difference rest)))))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst))\
    \ (positive? (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)) (positive? (first lst)))\n     (* 2 (square (first\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (odd? (car lst)) (positive? (car lst)))\n     (* 2 (square\
    \ (car lst)))]\n    [else\n     (double_the_difference (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(not (integer? (car lst))) (double_the_difference\
    \ (cdr lst))]\n    [(< (car lst) 0) (double_the_difference (cdr lst))]\n    [(odd?\
    \ (car lst)) (* 2 (square (car lst)))]\n    [else (double_the_difference (cdr\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst))\n     (square\
    \ (first lst))\n     (double_the_difference (rest lst))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)) (positive? (first lst)))\n     (* 2 (square (first\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (positive? (first\
    \ lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\
    \ (odd? (first lst)) (positive? (first lst)))\n     (* 2 (square (first lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (odd? (car lst)) (integer? (car lst)) (> (car lst) 0))\n     (*\
    \ 2 (square (car lst)))]\n    [else (double_the_difference (cdr lst))]))\n", " \
    \ (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst))\
    \ (positive? (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)) (positive? (first lst)))\n     (* 2 (expt (first lst)\
    \ 2))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond [(empty?\
    \ lst) 0]\n        [else\n         (let ([first (first lst)])\n           (cond\
    \ [(and (integer? first) (odd? first))\n                  (+ (square first) (double_the_difference\
    \ (rest lst)))]\n                 [else (double_the_difference (rest lst))]))]))\n",
  "  (if (null? lst)\n      0\n      (let ((first (car lst))\n            (rest (cdr\
    \ lst)))\n        (if (and (integer? first)\n                 (not (negative?\
    \ first)))\n            (+ (* first first)\n               (double_the_difference\
    \ rest))\n            (double_the_difference rest)))))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (positive? (first\
    \ lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\n\
    \          (odd? (first lst))\n          (positive? (first lst)))\n     (* 2 (square\
    \ (first lst)))]\n    [else\n     (double_the_difference (rest lst))]))\n", " \
    \ (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst))\
    \ (positive? (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)) (positive? (first lst)))\n     (* 2 (square (first\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (positive? (first\
    \ lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\
    \ (odd? (first lst)) (positive? (first lst)))\n     (* 2 (square (first lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (if (null? lst)\n    \
    \  0\n      (let ((x (car lst))\n            (xs (cdr lst)))\n        (if (and\
    \ (integer? x)\n                 (not (negative? x))\n                 (odd? x))\n\
    \            (+ (square x)\n               (double_the_difference xs))\n     \
    \       (double_the_difference xs)))))\n", "  (cond\n    [(empty? lst) 0]\n  \
    \  [(and (integer? (first lst)) (odd? (first lst)) (positive? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (if (empty? lst)\n      0\n      (let ([x (first lst)])\n        (+ (* x x)\n\
    \           (double_the_difference (rest lst))))))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (positive? (first\
    \ lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\
    \ (odd? (first lst)) (positive? (first lst)))\n     (+ (* (first lst) (first lst))\
    \ (double_the_difference (rest lst)))]\n    [else (double_the_difference (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\
    \ (odd? (first lst)) (positive? (first lst)))\n     (* 2 (square (first lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (positive? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst))\
    \ (positive? (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)) (positive? (first lst)))\n     (* 2 (square (first\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond [(empty?\
    \ lst) 0]\n        [else (cond [(and (integer? (first lst))\n                \
    \         (not (negative? (first lst))))\n                     (+ (square (first\
    \ lst))\n                        (double_the_difference (rest lst)))]\n      \
    \              [else (double_the_difference (rest lst))])]))\n", "  (cond\n  \
    \  [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (positive?\
    \ (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (even? (first lst))\
    \ (odd? (second lst)))\n     (* 2 (- (square (second lst)) (square (first lst))))]\n\
    \    [(and (odd? (first lst)) (even? (second lst)))\n     (* 2 (- (square (first\
    \ lst)) (square (second lst))))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\n          (odd?\
    \ (first lst))\n          (positive? (first lst)))\n     (* 2 (square (first lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (odd? (car lst)) (integer? (car lst)) (> (car lst) 0))\n     (+\
    \ (* (car lst) (car lst)) (double_the_difference (cdr lst)))]\n    [else (double_the_difference\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (odd? (car lst))\
    \ (integer? (car lst)) (> (car lst) 0))\n     (+ (* (car lst) (car lst)) (double_the_difference\
    \ (cdr lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (>\
    \ (first lst) 0))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (if (null? lst)\n      0\n      (let* ([x (car lst)]\n\
    \             [xs (cdr lst)]\n             [x-squared (* x x)])\n        (if (and\
    \ (integer? x)\n                 (not (negative? x)))\n            (+ x-squared\
    \ (double_the_difference xs))\n            (double_the_difference xs)))))\n",
  "  (if (null? lst)\n      0\n      (let ([x (car lst)]\n            [xs (cdr lst)])\n\
    \        (if (and (integer? x)\n                 (not (negative? x))\n       \
    \          (odd? x))\n            (+ (* x x) (double_the_difference xs))\n   \
    \         (double_the_difference xs)))))\n", "  (cond\n    [(empty? lst) 0]\n\
    \    [(and (integer? (first lst)) (odd? (first lst)) (positive? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond [(empty? lst) 0]\n        [else (if (odd? (car lst))\n                \
    \  (* 2 (square (car lst)))\n                  0)]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (integer? (first lst))\n          (odd? (first lst))\n  \
    \        (positive? (first lst)))\n     (* 2 (square (first lst)))]\n    [else\
    \ (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n \
    \   [(and (integer? (first lst)) (odd? (first lst)) (positive? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst))\
    \ (positive? (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)) (positive? (first lst)))\n     (* 2 (square (first\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (positive? (first\
    \ lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest\
    \ lst))]))\n", "  (if (null? lst)\n      0\n      (let ((x (car lst))\n      \
    \      (xs (cdr lst)))\n        (if (and (integer? x)\n                 (not (negative?\
    \ x))\n                 (odd? x))\n            (* 2 (square x))\n            0))))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (odd? (car lst)) (positive? (car lst)))\n\
    \     (+ (square (car lst)) (double_the_difference (cdr lst)))]\n    [else (double_the_difference\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)) (positive? (first lst)))\n     (* 2 (square (first\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (positive? (first\
    \ lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\
    \ (odd? (first lst)) (positive? (first lst)))\n     (* 2 (square (first lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (odd? (car lst)) (positive? (car lst)))\n     (* 2 (square (car\
    \ lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (positive? (first\
    \ lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (odd? (car lst)) (positive?\
    \ (car lst)))\n     (* 2 (square (car lst)))]\n    [else (double_the_difference\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)) (positive? (first lst)))\n     (* 2 (square (first\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (odd? (car lst)) (positive? (car lst)))\n     (* 2 (square\
    \ (car lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst))\n          (odd? (first\
    \ lst))\n          (positive? (first lst)))\n     (* 2 (square (first lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (positive? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst))\
    \ (positive? (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)) (positive? (first lst)))\n     (* 2 (square (first\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (positive? (first\
    \ lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\
    \ (odd? (first lst)) (> (first lst) 0))\n     (+ (* (first lst) (first lst)) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (positive?\
    \ (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)) (> (first lst) 0))\n     (* 2 (square (first lst)))]\n\
    \    [else\n     (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (positive? (first\
    \ lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\n\
    \          (odd? (first lst))\n          (positive? (first lst)))\n     (* 2 (square\
    \ (first lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (positive?\
    \ (first lst)))\n     (* 2 (expt (first lst) 2))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (odd? (first lst))\
    \ (positive? (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (odd? (first lst))\
    \ (positive? (first lst)))\n     (+ (square (first lst)) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (if (empty?\
    \ lst)\n      0\n      (let ([n (first lst)])\n        (if (and (integer? n) (positive?\
    \ n))\n            (+ (* n n) (double_the_difference (rest lst)))\n          \
    \  (double_the_difference (rest lst))))))\n", "  (cond\n    [(empty? lst) 0]\n\
    \    [(and (integer? (first lst)) (odd? (first lst)))\n     (+ (square (first\
    \ lst)) (double_the_difference (rest lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond [(empty? lst) 0]\n        [else\n         (let ([x\
    \ (first lst)])\n           (cond [(and (integer? x) (positive? x))\n        \
    \          (+ (square x) (double_the_difference (rest lst)))]\n              \
    \   [else (double_the_difference (rest lst))]))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(not (integer? (car lst))) (double_the_difference (cdr lst))]\n\
    \    [(< (car lst) 0) (double_the_difference (cdr lst))]\n    [(odd? (car lst))\
    \ (+ (* (car lst) (car lst)) (double_the_difference (cdr lst)))]\n    [else (double_the_difference\
    \ (cdr lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (+ (square (first lst)) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst))\n          (odd? (first\
    \ lst))\n          (positive? (first lst)))\n     (* 2 (square (first lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n     (* 2 (square\
    \ (first lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond [(empty? lst) 0]\n        [else\n         (let ([x (first lst)])\n    \
    \       (cond [(and (integer? x) (positive? x))\n                  (+ (square\
    \ x) (double_the_difference (rest lst)))]\n                 [else (double_the_difference\
    \ (rest lst))]))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (+ (square (first lst)) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\n          (odd?\
    \ (first lst))\n          (positive? (first lst)))\n     (* 2 (square (first lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (if (empty? lst)\n   \
    \   0\n      (let ((first (first lst))\n            (rest (rest lst)))\n     \
    \   (if (and (integer? first)\n                 (not (negative? first))\n    \
    \             (odd? first))\n            (* 2 (square first))\n            0))))\n",
  "  (cond [(empty? lst) 0]\n        [else\n         (cond [(and (odd? (first lst))\
    \ (positive? (first lst)))\n                (+ (square (first lst)) (double_the_difference\
    \ (rest lst)))]\n               [else (double_the_difference (rest lst))])]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\n          (odd?\
    \ (first lst))\n          (positive? (first lst)))\n     (* 2 (square (first lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n     (* 2 (square\
    \ (first lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (positive?\
    \ (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (+ (square (first lst)) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (if (empty? lst)\n      0\n      (let ((first (first lst))\n            (rest\
    \ (rest lst)))\n        (if (and (integer? first)\n                 (positive?\
    \ first)\n                 (odd? first))\n            (+ (* first first)\n   \
    \            (double_the_difference rest))\n            (double_the_difference\
    \ rest)))))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\
    \ (odd? (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst))\n          (odd? (first lst))\n          (positive? (first lst)))\n  \
    \   (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (if (null? lst)\n      0\n      (+ (* (car lst) (car lst))\n         (double_the_difference\
    \ (cdr lst)))))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst))\n          (odd? (first lst))\n          (positive? (first lst)))\n  \
    \   (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst))\
    \ (positive? (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst))\n          (odd? (first lst))\n          (positive? (first lst)))\n  \
    \   (* 2 (expt (first lst) 2))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst))\
    \ (positive? (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)) (positive? (first lst)))\n     (* 2 (square (first\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (positive? (first\
    \ lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\
    \ (odd? (first lst)) (positive? (first lst)))\n     (* 2 (square (first lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (positive? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst))\
    \ (positive? (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)) (positive? (first lst)))\n     (* (square (first lst))\
    \ 2)]\n    [else (double_the_difference (rest lst))]))\n", "  (if (null? lst)\n\
    \      0\n      (+ (* (car lst) (car lst))\n         (double_the_difference (cdr\
    \ lst)))))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\
    \ (odd? (first lst)) (positive? (first lst)))\n     (* (square (first lst)) 2)]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (positive? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\n          (odd?\
    \ (first lst))\n          (positive? (first lst)))\n     (* 2 (square (first lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (if (null? lst)\n    \
    \  0\n      (let ([x (car lst)]\n            [xs (cdr lst)])\n        (if (and\
    \ (integer? x) (odd? x) (positive? x))\n            (* 2 (square x))\n       \
    \     0))))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\
    \ (odd? (first lst)) (positive? (first lst)))\n     (* 2 (square (first lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond [(empty? lst) 0]\n\
    \        [else (if (and (integer? (first lst))\n                       (odd? (first\
    \ lst)))\n                  (+ (square (first lst))\n                     (double_the_difference\
    \ (rest lst)))\n                  (double_the_difference (rest lst)))]))\n", " \
    \ (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst))\
    \ (positive? (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)) (positive? (first lst)))\n     (* 2 (square (first\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (positive? (first\
    \ lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\
    \ (odd? (first lst)) (positive? (first lst)))\n     (* 2 (square (first lst)))]\n\
    \    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst)\
    \ 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (positive? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst))\
    \ (positive? (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)) (positive? (first lst)))\n     (* 2 (square (first\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (if (null? lst)\n\
    \      0\n      (let ([x (car lst)]\n            [xs (cdr lst)])\n        (if\
    \ (and (integer? x) (not (negative? x)))\n            (+ (* x x) (double_the_difference\
    \ xs))\n            (double_the_difference xs)))))\n", "  (if (null? lst)\n  \
    \    0\n      (let ([n (car lst)])\n        (if (and (integer? n) (positive? n))\n\
    \            (+ (* n n) (double_the_difference (cdr lst)))\n            (double_the_difference\
    \ (cdr lst))))))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)) (positive? (first lst)))\n     (* 2 (square (first\
    \ lst)))]\n    [else\n     (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (positive?\
    \ (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (odd? (car lst))\
    \ (positive? (car lst)))\n     (+ (square (car lst)) (double_the_difference (cdr\
    \ lst)))]\n    [else (double_the_difference (cdr lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(odd? (first lst))\n     (* 2 (square (first lst)))]\n    [else\n\
    \     (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n\
    \    [(and (integer? (first lst)) (odd? (first lst)) (positive? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (if (null? lst)\n      0\n      (+ (* (car lst) (car lst))\n         (double_the_difference\
    \ (cdr lst)))))\n", "  (cond\n    [(empty? lst) 0]\n    [(odd? (first lst))\n\
    \     (* 2 (square (first lst)))]\n    [else\n     (double_the_difference (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\
    \ (odd? (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (odd? (car lst))\
    \ (integer? (car lst)) (> (car lst) 0))\n     (+ (* (car lst) (car lst)) (double_the_difference\
    \ (cdr lst)))]\n    [else (double_the_difference (cdr lst))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
