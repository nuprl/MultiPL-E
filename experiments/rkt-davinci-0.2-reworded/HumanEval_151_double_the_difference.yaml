name: HumanEval_151_double_the_difference
language: rkt
prompt: "#lang racket\n\n;; Given a list of numbers, return the sum of squares of\
  \ the numbers\n;; in the list that are odd. Ignore numbers that are negative or\
  \ not integers.\n;; >>> (double_the_difference (list 1 3 2 0))\n;; 10\n;; >>> (double_the_difference\
  \ (list -1 -2 0))\n;; 0\n;; >>> (double_the_difference (list 9 -2))\n;; 81\n;; >>>\
  \ (double_the_difference (list 0))\n;; 0\n;; If the input list is empty, return\
  \ 0.\n(define (double_the_difference lst)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate double_the_difference))\n\
  \    (check-equal? (candidate (list )) 0)\n    (check-equal? (candidate (list 5\
  \ 4)) 25)\n    (check-equal? (candidate (list 0.1 0.2 0.3)) 0)\n    (check-equal?\
  \ (candidate (list -10 -20 -30)) 0)\n    (check-equal? (candidate (list -1 -2 8))\
  \ 0)\n    (check-equal? (candidate (list 0.2 3 5)) 34)\n    (check-equal? (candidate\
  \ (list -9 -7 -5 -3 -1 1 3 5 7 9)) 165)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd?\
    \ (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)) (positive? (first lst)))\n     (* 2 (square (first\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (odd? (first lst))\n          (positive? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (+ (square (first lst)) (double_the_difference (rest lst)))]\n    [else\
    \ (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n \
    \   [(and (odd? (first lst)) (positive? (first lst)))\n     (* 2 (square (first\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)) (positive? (first\
    \ lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest\
    \ lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst))\
    \ (odd? (first lst)))\n     (+ (square (first lst)) (double_the_difference (rest\
    \ lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n    [(empty?\
    \ lst) 0]\n    [(and (odd? (first lst)) (positive? (first lst)))\n     (* 2 (square\
    \ (first lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst))\
    \ (positive? (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first\
    \ lst)) (odd? (first lst)))\n     (* 2 (square (first lst)))]\n    [else (double_the_difference\
    \ (rest lst))]))\n", "  (cond\n    [(empty? lst) 0]\n    [(and (odd? (first lst))\
    \ (positive? (first lst)))\n     (+ (square (first lst)) (double_the_difference\
    \ (rest lst)))]\n    [else (double_the_difference (rest lst))]))\n", "  (cond\n\
    \    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n",
  "  (cond\n    [(empty? lst) 0]\n    [(and (integer? (first lst)) (odd? (first lst)))\n\
    \     (* 2 (square (first lst)))]\n    [else (double_the_difference (rest lst))]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
