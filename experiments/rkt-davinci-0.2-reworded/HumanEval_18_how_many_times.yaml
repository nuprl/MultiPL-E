name: HumanEval_18_how_many_times
language: rkt
prompt: "#lang racket\n\n;; Find how many times a given substring can be found in\
  \ the original string. Count overlaping cases.\n;; >>> (how_many_times \"\" \"a\"\
  )\n;; 0\n;; >>> (how_many_times \"aaa\" \"a\")\n;; 3\n;; >>> (how_many_times \"\
  aaaa\" \"aa\")\n;; 3\n(define (how_many_times string substring)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate how_many_times))\n\
  \    (check-equal? (candidate \"\" \"x\") 0)\n    (check-equal? (candidate \"xyxyxyx\"\
  \ \"x\") 4)\n    (check-equal? (candidate \"cacacacac\" \"cac\") 4)\n    (check-equal?\
  \ (candidate \"john doe\" \"john\") 1)\n))\n\n(test-humaneval)"
completions: ["  (if (string-contains string substring)\n      (+ 1 (how_many_times\
    \ (substring string 1) substring))\n      0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-drop string 1) substring (+ count 1))\n      \
    \  count))\n  (how_many_times-iter string substring 0))\n", "  (cond\n    [(empty?\
    \ string) 0]\n    [(empty? substring) 0]\n    [(string=? (substring string 0 (string-length\
    \ substring)) substring)\n     (+ 1 (how_many_times (substring string 1) substring))]\n\
    \    [else (how_many_times (substring string 1) substring)]))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(string=?\
    \ (substring string 0 (string-length substring)) substring) (how_many_times-iter\
    \ (substring string 1) substring (+ count 1))]\n      [else (how_many_times-iter\
    \ (substring string 1) substring count)]))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (cond\n\
    \      [(empty? string) count]\n      [(string=? (substring string 0 (string-length\
    \ substring)) substring)\n       (how_many_times-iter (substring string 1) substring\
    \ (+ count 1))]\n      [else (how_many_times-iter (substring string 1) substring\
    \ count)]))\n  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(equal? (first string) (first substring))\n      \
    \ (how_many_times-iter (rest string) (rest substring) (+ count 1))]\n      [else\
    \ (how_many_times-iter (rest string) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (count-substring string substring)\n   \
    \ (if (string-contains string substring)\n        (+ 1 (count-substring (substring\
    \ string (string-index string substring) (string-length string)) substring))\n\
    \        0))\n  (count-substring string substring))\n", "  (if (string-contains\
    \ string substring)\n      (+ 1 (how_many_times (substring string 1) substring))\n\
    \      0))\n", "  (define (how_many_times-iter string substring count)\n    (if\
    \ (string-contains string substring)\n        (how_many_times-iter (substring\
    \ string (+ 1 (string-index string substring))) substring (+ 1 count))\n     \
    \   count))\n  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-drop string 1) substring (+ count 1))\n      \
    \  count))\n  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-drop string 1) substring (+ count 1))\n      \
    \  count))\n  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-drop string 1) substring (+ count 1))\n      \
    \  count))\n  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (first string) (first substring))\n    \
    \   (how_many_times-iter (rest string) (rest substring) (+ count 1))]\n      [else\
    \ (how_many_times-iter (rest string) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (how_many_times_iter string substring count)\n\
    \    (cond\n      [(empty? string) count]\n      [(string=? (substring string\
    \ 0 (string-length substring)) substring)\n       (how_many_times_iter (substring\
    \ string 1) substring (+ count 1))]\n      [else (how_many_times_iter (substring\
    \ string 1) substring count)]))\n  (how_many_times_iter string substring 0))\n",
  "  (define (helper string substring count)\n    (if (string-contains string substring)\n\
    \        (helper (substring string (+ 1 (string-index string substring))) substring\
    \ (+ 1 count))\n        count))\n  (helper string substring 0))\n", "  (define\
    \ (how_many_times-iter string substring count)\n    (if (string-contains string\
    \ substring)\n        (how_many_times-iter (string-drop string 1) substring (+\
    \ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (string-drop string 1) substring\
    \ (+ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (cond\n      [(empty?\
    \ string) count]\n      [(string=? (substring string 0 (string-length substring))\
    \ substring)\n       (how_many_times-iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-drop string 1) substring (+ count 1))\n      \
    \  count))\n  (how_many_times-iter string substring 0))\n", "  (cond\n    [(empty?\
    \ string) 0]\n    [(empty? substring) 0]\n    [(string=? (substring string 0 (string-length\
    \ substring)) substring)\n     (+ 1 (how_many_times (substring string 1) substring))]\n\
    \    [else (how_many_times (substring string 1) substring)]))\n", "  (if (string-contains\
    \ string substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ string substring))) substring))\n      0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond ((string-length string) 0)\n          ((string-contains\
    \ string substring) (how_many_times-iter (substring string 1) substring (+ count\
    \ 1)))\n          (else count)))\n  (how_many_times-iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (cond\n      [(empty?\
    \ string) count]\n      [(string=? (substring string 0 (string-length substring))\
    \ substring)\n       (how_many_times-iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond ((string-contains string substring)\n   \
    \        (how_many_times-iter (substring string 1) substring (+ count 1)))\n \
    \         (else count)))\n  (how_many_times-iter string substring 0))\n", "  (define\
    \ (how_many_times-iter string substring count)\n    (if (string-contains string\
    \ substring)\n        (how_many_times-iter (substring string (+ 1 (string-index\
    \ string substring))) substring (+ 1 count))\n        count))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond ((string-length string) 0)\n          ((string-contains string substring)\
    \ (how_many_times-iter (substring string 1) substring (+ count 1)))\n        \
    \  (else count)))\n  (how_many_times-iter string substring 0))\n", "  (define\
    \ (how_many_times-iter string substring count)\n    (cond ((string-length string)\
    \ count)\n          ((string-contains string substring)\n           (how_many_times-iter\
    \ (string-drop string 1) substring (+ count 1)))\n          (else count)))\n \
    \ (how_many_times-iter string substring 0))\n", "  (let loop ([string string]\
    \ [substring substring] [count 0])\n    (cond [(string=? string \"\") count]\n\
    \          [(string=? substring \"\") count]\n          [(string-contains string\
    \ substring)\n           (loop (substring string (+ 1 (string-index string substring)))\
    \ substring (+ 1 count))]\n          [else count])))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-drop string 1) substring (+ count 1))\n      \
    \  count))\n  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-drop string 1) substring (+ count 1))\n      \
    \  count))\n  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-drop string 1) substring (+ count 1))\n      \
    \  count))\n  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-drop-right string 1) substring (+ count 1))\n\
    \        count))\n  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(string=?\
    \ (substring string 0 (string-length substring)) substring)\n       (how_many_times-iter\
    \ (substring string 1) substring (+ count 1))]\n      [else (how_many_times-iter\
    \ (substring string 1) substring count)]))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (how_many_times_iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times_iter (substring string 1) substring\
    \ (+ count 1))\n        count))\n  (how_many_times_iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (cond\n      [(empty?\
    \ string) count]\n      [(empty? substring) count]\n      [(equal? (first string)\
    \ (first substring)) (how_many_times-iter (rest string) (rest substring) (+ count\
    \ 1))]\n      [else (how_many_times-iter (rest string) substring count)]))\n \
    \ (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond ((string-length string) 0)\n          ((string-contains\
    \ string substring) (how_many_times-iter (substring string 1) substring (+ count\
    \ 1)))\n          (else count)))\n  (how_many_times-iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (string-drop string 1) substring\
    \ (+ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (cond\n      [(empty?\
    \ string) count]\n      [(string=? (substring string 0 (string-length substring))\
    \ substring)\n       (how_many_times-iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n", "  (define (count-substring string\
    \ substring)\n    (define (count-substring-iter string substring count)\n    \
    \  (cond ((string-length string) count)\n            ((string-contains string\
    \ substring)\n             (count-substring-iter (substring string 1) substring\
    \ (+ count 1)))\n            (else count)))\n    (count-substring-iter string\
    \ substring 0))\n  (count-substring string substring))\n", "  (if (string-contains\
    \ string substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ string substring))) substring))\n      0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (first string) (first substring))\n    \
    \   (how_many_times-iter (rest string) (rest substring) (+ count 1))]\n      [else\
    \ (how_many_times-iter (rest string) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (if (string-contains string substring)\n      (+\
    \ 1 (how_many_times (substring string (+ 1 (string-index string substring))) substring))\n\
    \      0))\n", "  (let loop ([string string] [substring substring] [count 0])\n\
    \    (cond [(empty? string) count]\n          [(empty? substring) count]\n   \
    \       [(string=? (substring string 0 (string-length substring)) substring)\n\
    \           (loop (substring string 1) substring (+ count 1))]\n          [else\
    \ (loop (substring string 1) substring count)])))\n", "  (define (how_many_times_iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times_iter (substring string 1) substring (+ count 1))\n        count))\n\
    \  (how_many_times_iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (substring string 0 (string-length substring))\
    \ substring)\n       (how_many_times-iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n", "  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ string substring))) substring))\n      0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(string=?\
    \ substring (substring string 0 (string-length substring)))\n       (how_many_times-iter\
    \ (substring string 1) substring (+ count 1))]\n      [else (how_many_times-iter\
    \ (substring string 1) substring count)]))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (how_many_times_iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times_iter (substring string 1) substring\
    \ (+ count 1))\n        count))\n  (how_many_times_iter string substring 0))\n",
  "  (if (string-contains string substring)\n      (+ 1 (how_many_times (substring\
    \ string (+ 1 (string-index string substring))) substring))\n      0))\n", " \
    \ (define (how_many_times-inner string substring count)\n    (cond\n      [(empty?\
    \ string) count]\n      [(empty? substring) count]\n      [(equal? (first string)\
    \ (first substring))\n       (how_many_times-inner (rest string) (rest substring)\
    \ (+ count 1))]\n      [else (how_many_times-inner (rest string) substring count)]))\n\
    \  (how_many_times-inner string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond [(empty? string) count]\n          [(empty?\
    \ substring) count]\n          [(equal? (first string) (first substring))\n  \
    \         (how_many_times-iter (rest string) (rest substring) (+ count 1))]\n\
    \          [else (how_many_times-iter (rest string) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (if (string-contains string substring)\n        (how_many_times-iter (string-drop\
    \ string 1) substring (+ count 1))\n        count))\n  (how_many_times-iter string\
    \ substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond\n      [(empty? string) count]\n      [(empty? substring) count]\n\
    \      [(equal? (first string) (first substring)) (how_many_times-iter (rest string)\
    \ (rest substring) (+ count 1))]\n      [else (how_many_times-iter (rest string)\
    \ substring count)]))\n  (how_many_times-iter string substring 0))\n", "  (define\
    \ (how_many_times-iter string substring count)\n    (if (string-contains string\
    \ substring)\n        (how_many_times-iter (substring string (+ 1 (string-index\
    \ string substring))) substring (+ 1 count))\n        count))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (if (string-contains string substring)\n      (+\
    \ 1 (how_many_times (substring string (+ 1 (string-index string substring))) substring))\n\
    \      0))\n", "  (define (count-substring string substring)\n    (cond ((string=?\
    \ substring \"\") 1)\n          ((string=? string \"\") 0)\n          ((string-prefix?\
    \ substring string) (+ (count-substring (substring string 1) substring)\n    \
    \                                            (count-substring (substring string\
    \ 1) (substring substring 1))))\n          (else (count-substring (substring string\
    \ 1) substring))))\n  (count-substring string substring))\n", "  (define (helper\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (helper (substring string (+ 1 (string-index string substring))) substring\
    \ (+ 1 count))\n        count))\n  (helper string substring 0))\n", "  (define\
    \ (how_many_times-iter string substring count)\n    (cond [(empty? string) count]\n\
    \          [(empty? substring) count]\n          [(equal? (first string) (first\
    \ substring)) (how_many_times-iter (rest string) (rest substring) (+ count 1))]\n\
    \          [else (how_many_times-iter (rest string) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond\n      [(empty? string) count]\n      [(string=? substring (substring\
    \ string 0 (string-length substring)))\n       (how_many_times-iter (substring\
    \ string 1) substring (+ count 1))]\n      [else (how_many_times-iter (substring\
    \ string 1) substring count)]))\n  (how_many_times-iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (string-drop string 1) substring\
    \ (+ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n",
  "  (define (count-substring string substring)\n    (if (string-contains string substring)\n\
    \        (+ 1 (count-substring (substring string (add1 (string-index string substring)))\
    \ substring))\n        0))\n  (count-substring string substring))\n", "  (define\
    \ (count-substring string substring)\n    (define (count-substring-helper string\
    \ substring count)\n      (cond\n        [(empty? string) count]\n        [(equal?\
    \ (substring string 0 (string-length substring)) substring)\n         (count-substring-helper\
    \ (substring string 1) substring (+ count 1))]\n        [else (count-substring-helper\
    \ (substring string 1) substring count)]))\n    (count-substring-helper string\
    \ substring 0))\n  (count-substring string substring))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(equal? (first string) (first substring)) (how_many_times-iter\
    \ (rest string) (rest substring) (+ count 1))]\n      [else (how_many_times-iter\
    \ (rest string) substring count)]))\n  (how_many_times-iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (substring string 1) substring\
    \ (+ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n",
  "  (if (string-contains string substring)\n      (+ 1 (how_many_times (substring\
    \ string 1) substring))\n      0))\n", "  (let loop ([string string] [substring\
    \ substring] [count 0])\n    (cond [(empty? string) count]\n          [(empty?\
    \ substring) count]\n          [(string=? (substring string 0 (string-length substring))\
    \ substring)\n           (loop (substring string 1) substring (+ count 1))]\n\
    \          [else (loop (substring string 1) substring count)])))\n", "  (let loop\
    \ ([string string] [substring substring] [count 0])\n    (cond [(empty? string)\
    \ count]\n          [(empty? substring) count]\n          [(equal? (first string)\
    \ (first substring))\n           (loop (rest string) (rest substring) (+ count\
    \ 1))]\n          [else (loop (rest string) substring count)])))\n", "  (define\
    \ (how_many_times-iter string substring count)\n    (cond [(empty? string) count]\n\
    \          [(empty? substring) count]\n          [(string=? (substring string\
    \ 0 (string-length substring)) substring)\n           (how_many_times-iter (substring\
    \ string 1) substring (+ count 1))]\n          [else (how_many_times-iter (substring\
    \ string 1) substring count)]))\n  (how_many_times-iter string substring 0))\n",
  "  (define (count-substring string substring)\n    (cond\n      [(empty? string)\
    \ 0]\n      [(empty? substring) 0]\n      [(equal? (first string) (first substring))\n\
    \       (+ 1 (count-substring (rest string) (rest substring)))]\n      [else (count-substring\
    \ (rest string) substring)]))\n  (define (count-substrings string substring)\n\
    \    (cond\n      [(empty? string) 0]\n      [else (+ (count-substring string\
    \ substring)\n               (count-substrings (rest string) substring))]))\n\
    \  (count-substrings string substring))\n", "  (define (helper string substring\
    \ count)\n    (cond ((string-length string) 0)\n          ((string-prefix? substring\
    \ string) (helper (substring string 1) substring (+ count 1)))\n          (else\
    \ (helper (substring string 1) substring count))))\n  (helper string substring\
    \ 0))\n", "  (cond\n    [(empty? string) 0]\n    [(empty? substring) 0]\n    [(equal?\
    \ (first string) (first substring))\n     (+ 1 (how_many_times (rest string) (rest\
    \ substring)))]\n    [else (how_many_times (rest string) substring)]))\n", " \
    \ (if (string-contains string substring)\n      (+ 1 (how_many_times (substring\
    \ string (+ 1 (string-index substring string))) substring))\n      0))\n", " \
    \ (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (string-drop-right string 1)\
    \ substring (+ count 1))\n        count))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (cond\n\
    \      [(empty? string) count]\n      [(string=? (substring string 0 (string-length\
    \ substring)) substring)\n       (how_many_times-iter (substring string 1) substring\
    \ (+ count 1))]\n      [else (how_many_times-iter (substring string 1) substring\
    \ count)]))\n  (how_many_times-iter string substring 0))\n", "  (if (string-contains\
    \ string substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ string substring))) substring))\n      0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond ((string-contains string substring)\n   \
    \        (how_many_times-iter (string-drop string 1) substring (+ count 1)))\n\
    \          (else count)))\n  (how_many_times-iter string substring 0))\n", " \
    \ (define (how_many_times_helper string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times_helper (substring string 1) substring\
    \ (+ count 1))\n        count))\n  (how_many_times_helper string substring 0))\n",
  "  (cond\n    [(empty? string) 0]\n    [(empty? substring) 0]\n    [(equal? (first\
    \ string) (first substring))\n     (+ 1 (how_many_times (rest string) (rest substring)))]\n\
    \    [else (how_many_times (rest string) substring)]))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-drop string 1) substring (+ count 1))\n      \
    \  count))\n  (how_many_times-iter string substring 0))\n", "  (define (helper\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (helper (substring string (+ 1 (string-index string substring))) substring\
    \ (+ 1 count))\n        count))\n  (helper string substring 0))\n", "  (define\
    \ (how_many_times-iter string substring count)\n    (if (string-contains string\
    \ substring)\n        (how_many_times-iter (string-drop string 1) substring (+\
    \ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (cond [(empty? string)\
    \ count]\n          [(empty? substring) count]\n          [(string=? (substring\
    \ string 0 (string-length substring)) substring)\n           (how_many_times-iter\
    \ (substring string 1) substring (+ count 1))]\n          [else (how_many_times-iter\
    \ (substring string 1) substring count)]))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (if (string-contains string substring)\n      (+ 1 (how_many_times\
    \ (substring string (+ 1 (string-index string substring))) substring))\n     \
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (string-drop string 1) substring\
    \ (+ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (string-drop string 1) substring\
    \ (+ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n",
  "  (define (helper string substring count)\n    (if (string-contains string substring)\n\
    \        (helper (substring string (+ 1 (string-index string substring))) substring\
    \ (+ 1 count))\n        count))\n  (helper string substring 0))\n", "  (define\
    \ (how_many_times-iter string substring count)\n    (if (string-contains string\
    \ substring)\n        (how_many_times-iter (string-drop string 1) substring (+\
    \ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (string-drop-right string 1)\
    \ substring (+ count 1))\n        count))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (string-drop string 1) substring\
    \ (+ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n",
  "  (if (string-contains string substring)\n      (+ 1 (how_many_times (substring\
    \ string (+ 1 (string-index string substring))) substring))\n      0))\n", " \
    \ (let loop ([string string] [substring substring] [count 0])\n    (cond [(empty?\
    \ string) count]\n          [(empty? substring) count]\n          [(eq? (first\
    \ string) (first substring))\n           (loop (rest string) (rest substring)\
    \ (+ count 1))]\n          [else (loop (rest string) substring count)])))\n",
  "  (cond\n    [(empty? string) 0]\n    [(empty? substring) 0]\n    [(string=? (substring\
    \ string 0 (string-length substring)) substring)\n     (+ 1 (how_many_times (substring\
    \ string 1) substring))]\n    [else (how_many_times (substring string 1) substring)]))\n",
  "  (if (string-contains string substring)\n      (+ 1 (how_many_times (substring\
    \ string (+ 1 (string-index string substring))) substring))\n      0))\n", " \
    \ (define (how_many_times-iter string substring count)\n    (cond\n      [(empty?\
    \ string) count]\n      [(empty? substring) count]\n      [(equal? (first string)\
    \ (first substring))\n       (how_many_times-iter (rest string) (rest substring)\
    \ (+ count 1))]\n      [else (how_many_times-iter (rest string) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond ((string-length string) 0)\n          ((string-prefix?\
    \ substring string) (how_many_times-iter (substring string 1) substring (+ count\
    \ 1)))\n          (else (how_many_times-iter (substring string 1) substring count))))\n\
    \  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-drop string 1) substring (+ count 1))\n      \
    \  count))\n  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-drop string 1) substring (+ count 1))\n      \
    \  count))\n  (how_many_times-iter string substring 0))\n", "  (define (helper\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (helper (substring string (+ 1 (string-index string substring))) substring\
    \ (+ 1 count))\n        count))\n  (helper string substring 0))\n", "  (define\
    \ (count-substring string substring)\n    (if (string-contains string substring)\n\
    \        (+ 1 (count-substring (substring string (+ 1 (string-index substring\
    \ string))) substring))\n        0))\n  (count-substring string substring))\n",
  "  (define (count-substring string substring)\n    (if (string-contains string substring)\n\
    \        (+ 1 (count-substring (substring string (string-index string substring)\
    \ (string-length string)) substring))\n        0))\n  (count-substring string\
    \ substring))\n", "  (define (how_many_times-iter string substring count)\n  \
    \  (if (string-contains string substring)\n        (how_many_times-iter (string-drop\
    \ string 1) substring (+ count 1))\n        count))\n  (how_many_times-iter string\
    \ substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond\n      [(empty? string) count]\n      [(substring=? string substring)\
    \ (how_many_times-iter (substring string 1) substring (+ count 1))]\n      [else\
    \ (how_many_times-iter (substring string 1) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (helper string substring count)\n    (if\
    \ (string-contains string substring)\n        (helper (substring string 1) substring\
    \ (+ count 1))\n        count))\n  (helper string substring 0))\n", "  (define\
    \ (how_many_times-iter string substring count)\n    (cond\n      [(empty? string)\
    \ count]\n      [(string=? (substring string 0 (string-length substring)) substring)\n\
    \       (how_many_times-iter (substring string 1) substring (+ count 1))]\n  \
    \    [else (how_many_times-iter (substring string 1) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (let loop ([string string] [substring substring]\
    \ [count 0])\n    (cond [(empty? string) count]\n          [(empty? substring)\
    \ count]\n          [(equal? (first string) (first substring))\n           (loop\
    \ (rest string) (rest substring) (+ count 1))]\n          [else (loop (rest string)\
    \ substring count)])))\n", "  (let loop ([i 0] [count 0])\n    (cond\n      [(=\
    \ i (string-length string)) count]\n      [(string=? (substring string i (+ i\
    \ (string-length substring))) substring)\n       (loop (+ i 1) (+ count 1))]\n\
    \      [else (loop (+ i 1) count)])))\n", "  (define (how_many_times-iter string\
    \ substring count)\n    (if (string-contains string substring)\n        (how_many_times-iter\
    \ (string-drop string 1) substring (+ count 1))\n        count))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond\n      [(empty? string) count]\n      [(string=? substring (substring\
    \ string 0 (string-length substring)))\n       (how_many_times-iter (substring\
    \ string 1) substring (+ count 1))]\n      [else (how_many_times-iter (substring\
    \ string 1) substring count)]))\n  (how_many_times-iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (cond\n      [(empty?\
    \ string) count]\n      [(string=? substring (substring string 0 (string-length\
    \ substring)))\n       (how_many_times-iter (substring string 1) substring (+\
    \ count 1))]\n      [else (how_many_times-iter (substring string 1) substring\
    \ count)]))\n  (how_many_times-iter string substring 0))\n", "  (define (count-substring\
    \ string substring)\n    (if (string-contains string substring)\n        (+ 1\
    \ (count-substring (string-drop string 1) substring))\n        0))\n  (count-substring\
    \ string substring))\n", "  (define (helper string substring count)\n    (if (string-contains\
    \ string substring)\n        (helper (substring string 1) substring (+ count 1))\n\
    \        count))\n  (helper string substring 0))\n", "  (define (how_many_times_iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(string=?\
    \ (substring string 0 (string-length substring)) substring) (how_many_times_iter\
    \ (substring string 1) substring (+ count 1))]\n      [else (how_many_times_iter\
    \ (substring string 1) substring count)]))\n  (how_many_times_iter string substring\
    \ 0))\n", "  (if (string-contains string substring)\n      (+ 1 (how_many_times\
    \ (substring string (+ 1 (string-index string substring))) substring))\n     \
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (string-drop string 1) substring\
    \ (+ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (cond\n      [(empty?\
    \ string) count]\n      [(empty? substring) count]\n      [(string=? (substring\
    \ string 0 (string-length substring)) substring)\n       (how_many_times-iter\
    \ (substring string 1) substring (+ count 1))]\n      [else (how_many_times-iter\
    \ (substring string 1) substring count)]))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (string-drop string 1) substring\
    \ (+ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (cond ((string-contains\
    \ string substring)\n           (how_many_times-iter (string-drop string 1) substring\
    \ (+ count 1)))\n          (else count)))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (cond\n\
    \      [(empty? string) count]\n      [(string=? (substring string 0 (string-length\
    \ substring)) substring)\n       (how_many_times-iter (substring string 1) substring\
    \ (+ count 1))]\n      [else (how_many_times-iter (substring string 1) substring\
    \ count)]))\n  (how_many_times-iter string substring 0))\n", "  (if (string-contains\
    \ string substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ string substring))) substring))\n      0))\n", "  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string 1) substring))\n  \
    \    0))\n", "  (define (how_many_times-iter string substring count)\n    (cond\n\
    \      [(string=? string \"\") count]\n      [(string=? substring \"\") count]\n\
    \      [(string=? (substring string 0 (string-length substring)) substring)\n\
    \       (how_many_times-iter (substring string 1) substring (+ count 1))]\n  \
    \    [else (how_many_times-iter (substring string 1) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (if (string-contains string substring)\n        (how_many_times-iter (substring\
    \ string 1) substring (+ count 1))\n        count))\n  (how_many_times-iter string\
    \ substring 0))\n", "  (define (count-substring string substring)\n    (define\
    \ (count-substring-helper string substring count)\n      (cond\n        [(empty?\
    \ string) count]\n        [(empty? substring) count]\n        [(equal? (first\
    \ string) (first substring))\n         (count-substring-helper (rest string) (rest\
    \ substring) (+ count 1))]\n        [else (count-substring-helper (rest string)\
    \ substring count)]))\n    (count-substring-helper string substring 0))\n  (define\
    \ (how-many-times-helper string substring count)\n    (cond\n      [(empty? string)\
    \ count]\n      [(empty? substring) count]\n      [else (how-many-times-helper\
    \ (rest string) substring (+ count (count-substring string substring)))]))\n \
    \ (how-many-times-helper string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-drop string 1) substring (+ count 1))\n      \
    \  count))\n  (how_many_times-iter string substring 0))\n", "  (define (count-substring\
    \ string substring)\n    (if (string-contains string substring)\n        (+ 1\
    \ (count-substring (substring string (+ 1 (string-index substring string))) substring))\n\
    \        0))\n  (count-substring string substring))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(string=?\
    \ (substring string 0 (string-length substring)) substring)\n       (how_many_times-iter\
    \ (substring string 1) substring (+ count 1))]\n      [else (how_many_times-iter\
    \ (substring string 1) substring count)]))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (string-drop string 1) substring\
    \ (+ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (string-drop string 1) substring\
    \ (+ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (cond ((string-contains\
    \ string substring)\n           (how_many_times-iter (string-drop string (string-length\
    \ substring)) substring (+ count 1)))\n          (else count)))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (cond\n    [(empty? string) 0]\n    [(empty? substring)\
    \ 0]\n    [(string=? string substring) 1]\n    [else\n     (+ (if (string-contains\
    \ string (substring substring 0 1))\n            (how_many_times (substring string\
    \ 1) substring)\n            0)\n        (how_many_times (substring string 1)\
    \ substring))]))\n", "  (define (helper string substring count)\n    (if (string-contains\
    \ string substring)\n        (helper (substring string (+ 1 (string-index string\
    \ substring))) substring (+ 1 count))\n        count))\n  (helper string substring\
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (cond\n\
    \      [(empty? string) count]\n      [(string=? (substring string 0 (string-length\
    \ substring)) substring)\n       (how_many_times-iter (substring string 1) substring\
    \ (+ count 1))]\n      [else (how_many_times-iter (substring string 1) substring\
    \ count)]))\n  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond ((string-length string) 0)\n          ((string-contains\
    \ string substring)\n           (how_many_times-iter (substring string 1) substring\
    \ (+ count 1)))\n          (else count)))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (string-drop string 1) substring\
    \ (+ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (string-drop string 1) substring\
    \ (+ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (cond ((string-contains\
    \ string substring)\n           (how_many_times-iter (string-drop string 1) substring\
    \ (+ count 1)))\n          (else count)))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (substring string (+ 1 (string-index\
    \ string substring))) substring (+ 1 count))\n        count))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (if (string-contains string substring)\n      (+\
    \ 1 (how_many_times (substring string (+ 1 (string-index string substring))) substring))\n\
    \      0))\n", "  (define (how_many_times-iter string substring count)\n    (cond\n\
    \      [(empty? string) count]\n      [(string=? (substring string 0 (string-length\
    \ substring)) substring)\n       (how_many_times-iter (substring string 1) substring\
    \ (+ count 1))]\n      [else (how_many_times-iter (substring string 1) substring\
    \ count)]))\n  (how_many_times-iter string substring 0))\n", "  (let loop ([string\
    \ string] [substring substring] [count 0])\n    (cond [(empty? string) count]\n\
    \          [(empty? substring) count]\n          [(string=? (substring string\
    \ 0 (string-length substring)) substring)\n           (loop (substring string\
    \ 1) substring (+ count 1))]\n          [else (loop (substring string 1) substring\
    \ count)])))\n", "  (define (helper string substring count)\n    (cond\n     \
    \ [(empty? string) count]\n      [(empty? substring) count]\n      [(string-prefix?\
    \ substring string) (helper (substring string (add1 (string-length substring)))\
    \ substring (add1 count))]\n      [else (helper (substring string 1) substring\
    \ count)]))\n  (helper string substring 0))\n", "  (cond\n    [(empty? string)\
    \ 0]\n    [(empty? substring) 0]\n    [(and (string=? (substring string 0 (string-length\
    \ substring)) substring)\n          (string=? (substring string (string-length\
    \ substring) (string-length string)) \"\")) 1]\n    [(string=? (substring string\
    \ 0 (string-length substring)) substring)\n     (+ 1 (how_many_times (substring\
    \ string 1 (string-length string)) substring))]\n    [else (how_many_times (substring\
    \ string 1 (string-length string)) substring)]))\n```\n\n```racket\n#lang racket\n",
  "  (define (how_many_times_iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times_iter (substring string 1) substring\
    \ (+ count 1))\n        count))\n  (how_many_times_iter string substring 0))\n",
  "  (define (helper string substring count)\n    (cond\n      [(empty? string) count]\n\
    \      [(empty? substring) count]\n      [(and (string=? (first string) (first\
    \ substring))\n            (string=? string substring)) (+ count 1)]\n      [(string=?\
    \ (first string) (first substring)) (helper (rest string) (rest substring) (+\
    \ count 1))]\n      [else (helper (rest string) substring count)]))\n  (helper\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (if (string-contains string substring)\n        (how_many_times-iter (string-drop\
    \ string 1) substring (+ count 1))\n        count))\n  (how_many_times-iter string\
    \ substring 0))\n", "  (if (string-contains string substring)\n      (+ 1 (how_many_times\
    \ (substring string (+ 1 (string-index string substring))) substring))\n     \
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (cond\n\
    \      [(empty? string) count]\n      [(string=? (substring string 0 (string-length\
    \ substring)) substring)\n       (how_many_times-iter (substring string 1) substring\
    \ (+ count 1))]\n      [else (how_many_times-iter (substring string 1) substring\
    \ count)]))\n  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-drop string 1) substring (+ count 1))\n      \
    \  count))\n  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-drop string 1) substring (+ count 1))\n      \
    \  count))\n  (how_many_times-iter string substring 0))\n", "  (define (count-substring\
    \ string substring)\n    (if (string-contains string substring)\n        (+ 1\
    \ (count-substring (substring string (string-index string substring) (string-length\
    \ string)) substring))\n        0))\n  (count-substring string substring))\n",
  "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (string-drop string 1) substring\
    \ (+ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n",
  "  (define (count-substring string substring)\n    (define (count-substring-iter\
    \ string substring count)\n      (cond ((string-length string) count)\n      \
    \      ((string-prefix? substring string)\n             (count-substring-iter\
    \ (substring string 1) substring (+ count 1)))\n            (else (count-substring-iter\
    \ (substring string 1) substring count))))\n    (count-substring-iter string substring\
    \ 0))\n  (count-substring string substring))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-drop string 1) substring (+ count 1))\n      \
    \  count))\n  (how_many_times-iter string substring 0))\n", "  (define (how_many_times_iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times_iter (substring string (+ 1 (string-index string substring)))\
    \ substring (+ 1 count))\n        count))\n  (how_many_times_iter string substring\
    \ 0))\n", "  (if (string-contains string substring)\n      (+ 1 (how_many_times\
    \ (substring string 1) substring))\n      0))\n", "  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ string substring))) substring))\n      0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (substring string (+ 1 (string-index string substring)))\
    \ substring (+ 1 count))\n        count))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (cond ((string-contains\
    \ string substring)\n           (how_many_times-iter (string-drop string (string-length\
    \ substring)) substring (+ count 1)))\n          (else count)))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond ((string-index string substring)\n           (how_many_times-iter (substring\
    \ string (+ (string-index string substring) 1)) substring (+ count 1)))\n    \
    \      (else count)))\n  (how_many_times-iter string substring 0))\n", "  (cond\n\
    \    [(empty? string) 0]\n    [(empty? substring) 0]\n    [(string=? string substring)\
    \ 1]\n    [else\n     (+ (if (string-contains string (substring substring 0 1))\n\
    \            (how_many_times (substring string 1) substring)\n            0)\n\
    \        (how_many_times (substring string 1) substring))]))\n", "  (if (string-contains\
    \ string substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ string substring))) substring))\n      0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(string=?\
    \ (substring string 0 (string-length substring)) substring)\n       (how_many_times-iter\
    \ (substring string 1) substring (+ count 1))]\n      [else (how_many_times-iter\
    \ (substring string 1) substring count)]))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (string-drop string 1) substring\
    \ (+ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n",
  "  (if (string-contains string substring)\n      (+ 1 (how_many_times (substring\
    \ string (+ 1 (string-index string substring))) substring))\n      0))\n", " \
    \ (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (string-drop string 1) substring\
    \ (+ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (string-drop string 1) substring\
    \ (+ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (string-drop string 1) substring\
    \ (+ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (string-drop string 1) substring\
    \ (+ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (cond\n      [(empty?\
    \ string) count]\n      [(string=? substring (substring string 0 (string-length\
    \ substring)))\n       (how_many_times-iter (substring string 1) substring (+\
    \ count 1))]\n      [else (how_many_times-iter (substring string 1) substring\
    \ count)]))\n  (how_many_times-iter string substring 0))\n", "  (let loop ([string\
    \ string] [substring substring] [count 0])\n    (cond\n      [(empty? string)\
    \ count]\n      [(empty? substring) count]\n      [(equal? (first string) (first\
    \ substring))\n       (loop (rest string) (rest substring) (+ count 1))]\n   \
    \   [else (loop (rest string) substring count)])))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(string=?\
    \ (substring string 0 (string-length substring)) substring)\n       (how_many_times-iter\
    \ (substring string 1) substring (+ count 1))]\n      [else (how_many_times-iter\
    \ (substring string 1) substring count)]))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (substring string 1) substring\
    \ (+ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (substring string (+ 1 (string-index\
    \ string substring))) substring (+ 1 count))\n        count))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (count-substring string substring)\n   \
    \ (if (string-contains string substring)\n        (+ 1 (count-substring (substring\
    \ string (+ 1 (string-index substring string))) substring))\n        0))\n  (count-substring\
    \ string substring))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond\n      [(empty? string) count]\n      [(empty? substring) count]\n\
    \      [(string=? (substring string 0 (string-length substring)) substring)\n\
    \       (how_many_times-iter (substring string 1) substring (+ count 1))]\n  \
    \    [else (how_many_times-iter (substring string 1) substring count)]))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (helper string substring count)\n    (if\
    \ (string-contains string substring)\n        (helper (substring string 1) substring\
    \ (+ count 1))\n        count))\n  (helper string substring 0))\n", "  (cond [(empty?\
    \ string) 0]\n        [(empty? substring) 0]\n        [(string=? (substring string\
    \ 0 (string-length substring)) substring)\n         (+ 1 (how_many_times (substring\
    \ string 1) substring))]\n        [else (how_many_times (substring string 1) substring)]))\n",
  "  (define (how_many_times_iter string substring count)\n    (cond\n      [(empty?\
    \ string) count]\n      [(string=? (substring string 0 (string-length substring))\
    \ substring)\n       (how_many_times_iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times_iter (substring string 1) substring count)]))\n\
    \  (how_many_times_iter string substring 0))\n", "  (if (string-contains string\
    \ substring)\n      (+ 1 (how_many_times (substring string (+ 1 (string-index\
    \ string substring))) substring))\n      0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (if (string-contains string substring)\n      \
    \  (how_many_times-iter (string-drop string 1) substring (+ count 1))\n      \
    \  count))\n  (how_many_times-iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(string=?\
    \ (substring string 0 (string-length substring)) substring) (how_many_times-iter\
    \ (substring string 1) substring (+ count 1))]\n      [else (how_many_times-iter\
    \ (substring string 1) substring count)]))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (string-drop-right string 1)\
    \ substring (+ count 1))\n        count))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (substring string (+ 1 (string-index\
    \ string substring))) substring (+ 1 count))\n        count))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (let loop ([string string] [substring substring]\
    \ [count 0])\n    (cond [(empty? string) count]\n          [(empty? substring)\
    \ count]\n          [(equal? (first string) (first substring))\n           (loop\
    \ (rest string) (rest substring) (+ count 1))]\n          [else (loop (rest string)\
    \ substring count)])))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (if (string-contains string substring)\n        (how_many_times-iter (string-drop\
    \ string 1) substring (+ count 1))\n        count))\n  (how_many_times-iter string\
    \ substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (if (string-contains string substring)\n        (how_many_times-iter (string-drop\
    \ string 1) substring (+ count 1))\n        count))\n  (how_many_times-iter string\
    \ substring 0))\n", "  (if (string-contains string substring)\n      (+ 1 (how_many_times\
    \ (substring string (+ 1 (string-index string substring))) substring))\n     \
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (string-drop string 1) substring\
    \ (+ count 1))\n        count))\n  (how_many_times-iter string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (string-drop-right string 1)\
    \ substring (+ count 1))\n        count))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (define (how_many_times-iter string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-iter (substring string (+ 1 (string-index\
    \ string substring))) substring (+ 1 count))\n        count))\n  (how_many_times-iter\
    \ string substring 0))\n", "  (define (how_many_times-iter string substring count)\n\
    \    (cond ((string-contains string substring)\n           (how_many_times-iter\
    \ (string-drop-right string (string-length substring)) substring (+ count 1)))\n\
    \          (else count)))\n  (how_many_times-iter string substring 0))\n", " \
    \ (define (how_many_times-iter string substring count)\n    (cond\n      [(empty?\
    \ string) count]\n      [(string=? (substring string 0 (string-length substring))\
    \ substring)\n       (how_many_times-iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n", "  (define (how_many_times_iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(string-contains\
    \ string substring) (how_many_times_iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times_iter (substring string 1) substring count)]))\n\
    \  (how_many_times_iter string substring 0))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(empty?\
    \ substring) count]\n      [(string=? (substring string 0 (string-length substring))\
    \ substring)\n       (how_many_times-iter (substring string 1) substring (+ count\
    \ 1))]\n      [else (how_many_times-iter (substring string 1) substring count)]))\n\
    \  (how_many_times-iter string substring 0))\n", "  (define (count-substring string\
    \ substring)\n    (if (string-contains string substring)\n        (+ 1 (count-substring\
    \ (substring string (+ 1 (string-index substring string))) substring))\n     \
    \   0))\n  (count-substring string substring))\n", "  (define (how_many_times-iter\
    \ string substring count)\n    (cond\n      [(empty? string) count]\n      [(string=?\
    \ (substring string 0 (string-length substring)) substring)\n       (how_many_times-iter\
    \ (substring string 1) substring (+ count 1))]\n      [else (how_many_times-iter\
    \ (substring string 1) substring count)]))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (if (string-contains string substring)\n      (+ 1 (how_many_times\
    \ (substring string (+ 1 (string-index string substring))) substring))\n     \
    \ 0))\n", "  (define (how_many_times-helper string substring count)\n    (if (string-contains\
    \ string substring)\n        (how_many_times-helper (substring string 1) substring\
    \ (+ count 1))\n        count))\n  (how_many_times-helper string substring 0))\n",
  "  (define (how_many_times-iter string substring count)\n    (cond\n      [(empty?\
    \ string) count]\n      [(empty? substring) count]\n      [(string=? (substring\
    \ string 0 (string-length substring)) substring)\n       (how_many_times-iter\
    \ (substring string 1) substring (+ count 1))]\n      [else (how_many_times-iter\
    \ (substring string 1) substring count)]))\n  (how_many_times-iter string substring\
    \ 0))\n", "  (if (string-contains string substring)\n      (+ 1 (how_many_times\
    \ (substring string (+ 1 (string-index string substring))) substring))\n     \
    \ 0))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
