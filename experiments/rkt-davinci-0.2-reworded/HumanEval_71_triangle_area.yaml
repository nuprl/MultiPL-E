name: HumanEval_71_triangle_area
language: rkt
prompt: "#lang racket\n\n;; Given the lengths of the three sides of a triangle. Return\
  \ the area of\n;; the triangle rounded to 2 decimal points if the three sides form\
  \ a valid triangle. \n;; Otherwise return -1\n;; Three sides make a valid triangle\
  \ when the sum of any two sides is greater \n;; than the third side.\n;; Example:\n\
  ;; >>> (triangle_area 3 4 5)\n;; 6.0\n;; >>> (triangle_area 1 2 10)\n;; -1\n(define\
  \ (triangle_area a b c)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate triangle_area))\n\
  \    (check-equal? (candidate 3 4 5) 6.0)\n    (check-equal? (candidate 1 2 10)\
  \ -1)\n    (check-equal? (candidate 4 8 5) 8.18)\n    (check-equal? (candidate 2\
  \ 2 2) 1.73)\n    (check-equal? (candidate 1 2 3) -1)\n    (check-equal? (candidate\
  \ 10 5 7) 16.25)\n    (check-equal? (candidate 2 6 3) -1)\n    (check-equal? (candidate\
  \ 1 1 1) 0.43)\n    (check-equal? (candidate 2 2 10) -1)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n   \
    \  (round (* 0.5 (* a b (sin (acos (/ (- (* a a) (* b b) (* c c)) (* 2 a b))))))\
    \ 2)]\n    [else -1]))\n", "  (if (and (> (+ a b) c)\n           (> (+ a c) b)\n\
    \           (> (+ b c) a))\n      (round (* 0.5 (* a b c)) 2)\n      -1))\n",
  "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let ([s (/ (+ a b c) 2)])\n\
    \       (sqrt (* s (- s a) (- s b) (- s c))))]\n    [else -1]))\n", "  (cond\n\
    \    [(and (>= a b) (>= a c)) (sqrt (+ (* (- a b) (- a b)) (* (- a c) (- a c))))]\n\
    \    [(and (>= b a) (>= b c)) (sqrt (+ (* (- b a) (- b a)) (* (- b c) (- b c))))]\n\
    \    [(and (>= c a) (>= c b)) (sqrt (+ (* (- c a) (- c a)) (* (- c b) (- c b))))]\n\
    \    [else -1]))\n", "  (if (and (>= a b c)\n           (>= b c a)\n         \
    \  (>= c a b))\n      (round (* 0.5 (- a b c) (+ a b c)) 2)\n      -1))\n", " \
    \ (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n\
    \            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n       (if (and (>\
    \ area 0) (not (infinite? area)))\n           (round (* area 100))\n         \
    \  -1))]\n    [else -1]))\n", "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n \
    \    (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s (- s a) (- s b)\
    \ (- s c)))])\n       (if (and (number? area) (not (nan? area)))\n           (round\
    \ (* area 100))\n           -1))]\n    [else -1]))\n", "  (define (is-valid-triangle\
    \ a b c)\n    (and (&gt; (+ a b) c)\n         (&gt; (+ a c) b)\n         (&gt;\
    \ (+ b c) a)))\n  (define (heron-area a b c)\n    (define (s a b c) (/ (+ a b\
    \ c) 2))\n    (define (area a b c)\n      (sqrt (* (s a b c) (- (s a b c) a) (-\
    \ (s a b c) b) (- (s a b c) c))))\n    (area a b c))\n  (if (is-valid-triangle\
    \ a b c)\n      (heron-area a b c)\n      -1))\n</code>\n", "  (cond\n    [(and\
    \ (>= a b) (>= a c))\n     (cond\n       [(>= (+ b c) a)\n        (* (/ (+ a b\
    \ c) 2)\n           (sqrt (- (* (/ (+ a b c) 2)\n                       (/ (+\
    \ a b c) 2))\n                    (* a a)\n                    (* b b)\n     \
    \               (* c c))))]\n       [else -1])]\n    [(and (>= b a) (>= b c))\n\
    \     (cond\n       [(>= (+ a c) b)\n        (* (/ (+ a b c) 2)\n           (sqrt\
    \ (- (* (/ (+ a b c) 2)\n                       (/ (+ a b c) 2))\n           \
    \         (* a a)\n                    (* b b)\n                    (* c c))))]\n\
    \       [else -1])]\n    [(and (>= c a) (>= c b))\n     (cond\n       [(>= (+\
    \ a b) c)\n        (* (/ (+ a b c) 2)\n           (sqrt (- (* (/ (+ a b c) 2)\n\
    \                       (/ (+ a b c) 2))\n                    (* a a)\n      \
    \              (* b b)\n                    (* c c))))]\n       [else -1])]))\n",
  "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (define s (/ (+ a b c) 2))\n\
    \     (define area (sqrt (* s (- s a) (- s b) (- s c))))\n     (if (and (number?\
    \ area) (not (nan? area)))\n         (round (* area 100))\n         -1)]\n   \
    \ [else -1]))\n", "  (if (and (> (+ a b) c)\n           (> (+ a c) b)\n      \
    \     (> (+ b c) a))\n      (round (* 0.5 (- (+ a b c) a b c)) 2)\n      -1))\n",
  "  (if (and (> (+ a b) c)\n           (> (+ a c) b)\n           (> (+ b c) a))\n\
    \      (round (* 0.5 (* a b c)) 2)\n      -1))\n", "  (cond\n    [(and (>= a b)\
    \ (>= a c)) (cond\n                              [(>= (+ b c) a) (/ (* a (sqrt\
    \ (- (* a a) (/ (+ (* b b) (* c c)) 2)))) 2) ]\n                             \
    \ [else -1])]\n    [(and (>= b a) (>= b c)) (cond\n                          \
    \    [(>= (+ a c) b) (/ (* b (sqrt (- (* b b) (/ (+ (* a a) (* c c)) 2)))) 2)\
    \ ]\n                              [else -1])]\n    [(and (>= c a) (>= c b)) (cond\n\
    \                              [(>= (+ a b) c) (/ (* c (sqrt (- (* c c) (/ (+\
    \ (* a a) (* b b)) 2)))) 2) ]\n                              [else -1])]\n   \
    \ [else -1]))\n", "  (if (and (> (+ a b) c) (> (+ a c) b) (> (+ b c) a))\n   \
    \   (round (* 0.5 (* a b c)) 2)\n      -1))\n", "  (cond\n    [(and (> a 0) (>\
    \ b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n            [area (sqrt (* s\
    \ (- s a) (- s b) (- s c)))])\n       (if (and (number? area) (not (nan? area)))\n\
    \           (round (* area 100))\n           -1))]\n    [else -1]))\n", "  (cond\n\
    \    [(and (>= a 0) (>= b 0) (>= c 0))\n     (cond\n       [(and (>= (+ a b) c)\
    \ (>= (+ a c) b) (>= (+ b c) a))\n        (* (/ (+ a b) 2) (sqrt (- (* c c) (/\
    \ (+ (* a a) (* b b)) 4))))]\n       [else -1])]\n    [else -1]))\n", "  (cond\n\
    \    [(and (> a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n       \
    \     [area (sqrt (* s (- s a) (- s b) (- s c)))])\n       (if (and (number? area)\
    \ (not (nan? area)))\n           (round (* area 100))\n           -1))]\n    [else\
    \ -1]))\n", "  (if (and (> a 0) (> b 0) (> c 0))\n      (if (and (> (+ a b) c)\
    \ (> (+ a c) b) (> (+ b c) a))\n          (round (* 0.5 (- (+ a b c) (- a b c))))\n\
    \          -1)\n      -1))\n", "  (cond\n    [(and (>= a b) (>= a c))\n     (define\
    \ s (/ (+ a b c) 2))\n     (sqrt (* s (- s a) (- s b) (- s c)))]\n    [else -1]))\n",
  "  (cond\n    [(and (> a 0) (> b 0) (> c 0))\n     (let* ([s (/ (+ a b c) 2)]\n\
    \            [area (sqrt (* s (- s a) (- s b) (- s c)))])\n       (if (and (number?\
    \ area) (not (nan? area)))\n           (round (* area 100))\n           -1))]\n\
    \    [else -1]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
