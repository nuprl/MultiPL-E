name: HumanEval_158_find_max
language: rkt
prompt: "#lang racket\n\n;; Write a function that accepts a list of strings.\n;; The\
  \ list contains different words. Return the word with maximum number\n;; of unique\
  \ characters. If multiple strings have maximum number of unique\n;; characters,\
  \ return the one which comes first in lexicographical order.\n;; >>> (find_max (list\
  \ \"name\" \"of\" \"string\"))\n;; \"string\"\n;; >>> (find_max (list \"name\" \"\
  enam\" \"game\"))\n;; \"enam\"\n;; >>> (find_max (list \"aaaaaaa\" \"bb\" \"cc\"\
  ))\n;; \"aaaaaaa\"\n(define (find_max words)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate find_max))\n\
  \    (check-equal? (candidate (list \"name\" \"of\" \"string\")) \"string\")\n \
  \   (check-equal? (candidate (list \"name\" \"enam\" \"game\")) \"enam\")\n    (check-equal?\
  \ (candidate (list \"aaaaaaa\" \"bb\" \"cc\")) \"aaaaaaa\")\n    (check-equal? (candidate\
  \ (list \"abc\" \"cba\")) \"abc\")\n    (check-equal? (candidate (list \"play\"\
  \ \"this\" \"game\" \"of\" \"footbott\")) \"footbott\")\n    (check-equal? (candidate\
  \ (list \"we\" \"are\" \"gonna\" \"rock\")) \"gonna\")\n    (check-equal? (candidate\
  \ (list \"we\" \"are\" \"a\" \"mad\" \"nation\")) \"nation\")\n    (check-equal?\
  \ (candidate (list \"this\" \"is\" \"a\" \"prrk\")) \"this\")\n    (check-equal?\
  \ (candidate (list \"b\")) \"b\")\n    (check-equal? (candidate (list \"play\" \"\
  play\" \"play\")) \"play\")\n))\n\n(test-humaneval)"
completions: ["  (let loop ((words words)\n             (max-word (car words))\n \
    \            (max-count (count-unique-chars (car words))))\n    (cond ((null?\
    \ words) max-word)\n          ((> (count-unique-chars (car words)) max-count)\n\
    \           (loop (cdr words) (car words) (count-unique-chars (car words))))\n\
    \          (else (loop (cdr words) max-word max-count)))))\n", "  (define (count-unique\
    \ word)\n    (length (remove-duplicates (string->list word))))\n  (define (max-word\
    \ words)\n    (cond ((null? words) '())\n          ((null? (cdr words)) (car words))\n\
    \          (else (if (> (count-unique (car words))\n                      (count-unique\
    \ (cadr words)))\n                   (car words)\n                   (cadr words)))))\n\
    \  (max-word words))\n", "  (define (count_unique word)\n    (length (remove-duplicates\
    \ (string->list word))))\n  (define (max-unique-word word1 word2)\n    (if (&gt;\
    \ (count_unique word1) (count_unique word2))\n        word1\n        word2))\n\
    \  (foldl max-unique-word (car words) (cdr words)))\n", "  (define (count-chars\
    \ word)\n    (length (remove-duplicates (string->list word))))\n  (define (find-max-helper\
    \ words max-word max-count)\n    (cond [(empty? words) max-word]\n          [else\
    \ (let* ([word (first words)]\n                       [count (count-chars word)])\n\
    \                  (if (> count max-count)\n                      (find-max-helper\
    \ (rest words) word count)\n                      (if (= count max-count)\n  \
    \                        (if (string<? word max-word)\n                      \
    \        (find-max-helper (rest words) word count)\n                         \
    \     (find-max-helper (rest words) max-word count))\n                       \
    \   (find-max-helper (rest words) max-word max-count))))]))\n  (find-max-helper\
    \ words \"\" 0))\n", "  (define (find_max-helper words max-word max-count)\n \
    \   (cond\n      [(empty? words) max-word]\n      [(> (length (unique-chars (first\
    \ words))) max-count)\n       (find_max-helper (rest words) (first words) (length\
    \ (unique-chars (first words))))]\n      [else (find_max-helper (rest words) max-word\
    \ max-count)]))\n  (find_max-helper words \"\" 0))\n", "  (define (count-unique\
    \ word)\n    (length (remove-duplicates (string->list word))))\n  (define (max-unique-word\
    \ words)\n    (cond ((null? words) '())\n          ((null? (cdr words)) (car words))\n\
    \          (else\n           (let ((first (car words))\n                 (second\
    \ (cadr words)))\n             (if (&gt; (count-unique first) (count-unique second))\n\
    \                 (max-unique-word (cons first (cddr words)))\n              \
    \   (max-unique-word (cons second (cddr words))))))))\n  (max-unique-word words))\n\
    </code>\n", "  (define (unique-chars word)\n    (remove-duplicates (string->list\
    \ word)))\n  (define (max-unique-chars words)\n    (apply max (map unique-chars\
    \ words)))\n  (define (max-unique-words words)\n    (filter (lambda (word) (=\
    \ (unique-chars word) (max-unique-chars words))) words))\n  (apply min (max-unique-words\
    \ words)))\n", "  (let loop ((words words)\n             (max-word \"\")\n   \
    \          (max-count 0))\n    (cond ((null? words) max-word)\n          ((> (length\
    \ (unique-chars (car words))) max-count)\n           (loop (cdr words) (car words)\
    \ (length (unique-chars (car words)))))\n          (else (loop (cdr words) max-word\
    \ max-count)))))\n", "  (define (count-unique word)\n    (length (remove-duplicates\
    \ (string->list word))))\n  (define (max-word words)\n    (if (null? (cdr words))\n\
    \        (car words)\n        (let ((first (car words))\n              (rest (cdr\
    \ words)))\n          (if (> (count-unique first) (count-unique (max-word rest)))\n\
    \              first\n              (max-word rest)))))\n  (max-word words))\n",
  "  (define (unique-chars word)\n    (length (remove-duplicates (string->list word))))\n\
    \  (define (max-unique-chars words)\n    (apply max (map unique-chars words)))\n\
    \  (define (max-unique-words words)\n    (filter (lambda (word) (= (unique-chars\
    \ word) (max-unique-chars words)))\n            words))\n  (apply min (max-unique-words\
    \ words)))\n", "  (let loop ((words words)\n             (max-word (car words))\n\
    \             (max-count (count-unique-chars (car words))))\n    (cond ((null?\
    \ words) max-word)\n          ((> (count-unique-chars (car words)) max-count)\n\
    \           (loop (cdr words) (car words) (count-unique-chars (car words))))\n\
    \          (else (loop (cdr words) max-word max-count)))))\n", "  (define (count-unique-chars\
    \ word)\n    (length (remove-duplicates (string->list word))))\n  (define (find-max-helper\
    \ words max-word max-count)\n    (cond ((null? words) max-word)\n          ((>\
    \ (count-unique-chars (car words)) max-count)\n           (find-max-helper (cdr\
    \ words) (car words) (count-unique-chars (car words))))\n          ((= (count-unique-chars\
    \ (car words)) max-count)\n           (if (< (car words) max-word)\n         \
    \      (find-max-helper (cdr words) (car words) (count-unique-chars (car words)))\n\
    \               (find-max-helper (cdr words) max-word max-count)))\n         \
    \ (else (find-max-helper (cdr words) max-word max-count))))\n  (find-max-helper\
    \ words \"\" 0))\n", "  (apply max (map (lambda (word)\n                    (cons\
    \ (length (remove-duplicates (string->list word)))\n                         \
    \ word))\n                  words)))\n", "  (define (count-unique word)\n    (length\
    \ (remove-duplicates (string->list word))))\n  (define (max-unique-word word1\
    \ word2)\n    (cond ((> (count-unique word1) (count-unique word2)) word1)\n  \
    \        ((< (count-unique word1) (count-unique word2)) word2)\n          (else\
    \ (if (string<? word1 word2) word1 word2))))\n  (foldl max-unique-word \"\" words))\n",
  "  (apply max (map (lambda (word)\n                    (cons (length (remove-duplicates\
    \ (string->list word)))\n                          word))\n                  words)))\n",
  "  (define (unique-chars word)\n    (define (unique-chars-helper word seen)\n  \
    \    (cond\n        [(empty? word) seen]\n        [(member (first word) seen)\
    \ (unique-chars-helper (rest word) seen)]\n        [else (unique-chars-helper\
    \ (rest word) (cons (first word) seen))]))\n    (unique-chars-helper word '()))\n\
    \  (define (find-max-helper words max-word max-count)\n    (cond\n      [(empty?\
    \ words) max-word]\n      [(> (length (unique-chars (first words))) max-count)\n\
    \       (find-max-helper (rest words) (first words) (length (unique-chars (first\
    \ words))))]\n      [(= (length (unique-chars (first words))) max-count)\n   \
    \    (cond\n         [(string<? (first words) max-word)\n          (find-max-helper\
    \ (rest words) (first words) (length (unique-chars (first words))))]\n       \
    \  [else (find-max-helper (rest words) max-word max-count)])]\n      [else (find-max-helper\
    \ (rest words) max-word max-count)]))\n  (find-max-helper words (first words)\
    \ (length (unique-chars (first words)))))\n", "  (let ([max-word (first words)]\n\
    \        [max-count (count-unique-chars (first words))])\n    (for ([word (rest\
    \ words)])\n      (let ([count (count-unique-chars word)])\n        (when (> count\
    \ max-count)\n          (set! max-word word)\n          (set! max-count count))))\n\
    \    max-word))\n", "  (define (unique-chars word)\n    (remove-duplicates (string->list\
    \ word)))\n  (define (max-unique-chars word1 word2)\n    (if (> (length (unique-chars\
    \ word1))\n           (length (unique-chars word2)))\n        word1\n        word2))\n\
    \  (foldl max-unique-chars (car words) (cdr words)))\n", "  (define (unique-chars\
    \ word)\n    (set! word (string->list word))\n    (set! word (remove-duplicates\
    \ word))\n    (list->string word))\n  (define (max-unique-chars words)\n    (apply\
    \ max (map unique-chars words)))\n  (define (max-unique-chars-words words)\n \
    \   (filter (lambda (word)\n              (= (unique-chars word) (max-unique-chars\
    \ words)))\n            words))\n  (define (first-lex words)\n    (apply min words))\n\
    \  (first-lex (max-unique-chars-words words)))\n", "  (define (count-unique word)\n\
    \    (length (remove-duplicates (string->list word))))\n  (define (max-unique-word\
    \ word1 word2)\n    (cond ((> (count-unique word1) (count-unique word2)) word1)\n\
    \          ((< (count-unique word1) (count-unique word2)) word2)\n          (else\
    \ (if (string<? word1 word2) word1 word2))))\n  (foldl max-unique-word (car words)\
    \ (cdr words)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
