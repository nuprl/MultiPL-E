name: HumanEval_24_largest_divisor
language: rkt
prompt: "#lang racket\n\n;; For a given number n, find the largest number that divides\
  \ n evenly, smaller than n\n;; >>> (largest_divisor 15)\n;; 5\n(define (largest_divisor\
  \ n)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate largest_divisor))\n\
  \    (check-equal? (candidate 3) 1)\n    (check-equal? (candidate 7) 1)\n    (check-equal?\
  \ (candidate 10) 5)\n    (check-equal? (candidate 100) 50)\n    (check-equal? (candidate\
  \ 49) 7)\n))\n\n(test-humaneval)"
completions: ["  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        i\n        (largest_divisor-iter n (- i 1))))\n  (largest_divisor-iter\
    \ n (- n 1)))\n", "  (define (largest_divisor-iter n i)\n    (if (= (modulo n\
    \ i) 0)\n        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter\
    \ n 2))\n", "  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        i\n        (largest_divisor-iter n (- i 1))))\n  (largest_divisor-iter\
    \ n (- n 1)))\n", "  (define (largest_divisor-iter n i)\n    (if (= (modulo n\
    \ i) 0)\n        i\n        (largest_divisor-iter n (- i 1))))\n  (largest_divisor-iter\
    \ n (- n 1)))\n", "  (define (largest_divisor-iter n i)\n    (if (= (modulo n\
    \ i) 0)\n        i\n        (largest_divisor-iter n (- i 1))))\n  (largest_divisor-iter\
    \ n (- n 1)))\n", "  (define (largest_divisor-iter n i)\n    (if (= (modulo n\
    \ i) 0)\n        i\n        (largest_divisor-iter n (- i 1))))\n  (largest_divisor-iter\
    \ n (- n 1)))\n", "  (define (largest_divisor_iter n i)\n    (if (= (modulo n\
    \ i) 0)\n        (largest_divisor_iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor_iter\
    \ n 2))\n", "  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        i\n        (largest_divisor-iter n (- i 1))))\n  (largest_divisor-iter\
    \ n (- n 1)))\n", "  (define (largest_divisor-iter i)\n    (if (= (remainder n\
    \ i) 0)\n        i\n        (largest_divisor-iter (- i 1))))\n  (largest_divisor-iter\
    \ (- n 1)))\n", "  (define (largest_divisor_iter i)\n    (if (&lt; i n)\n    \
    \    (if (zero? (modulo n i))\n            (largest_divisor_iter (+ i 1))\n  \
    \          (largest_divisor_iter (- i 1)))\n        i))\n  (largest_divisor_iter\
    \ 2))\n", "  (define (largest_divisor_iter n i)\n    (if (= (modulo n i) 0)\n\
    \        i\n        (largest_divisor_iter n (- i 1))))\n  (largest_divisor_iter\
    \ n (/ n 2)))\n", "  (define (largest_divisor-iter n i)\n    (if (= (modulo n\
    \ i) 0)\n        i\n        (largest_divisor-iter n (- i 1))))\n  (largest_divisor-iter\
    \ n (- n 1)))\n", "  (define (largest_divisor_iter i)\n    (if (= (modulo n i)\
    \ 0)\n        (largest_divisor_iter (+ i 1))\n        (- i 1)))\n  (largest_divisor_iter\
    \ 2))\n", "  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter\
    \ n 2))\n", "  (define (largest_divisor-iter n i)\n    (if (= (modulo n i) 0)\n\
    \        (largest_divisor-iter n (+ i 1))\n        (- i 1)))\n  (largest_divisor-iter\
    \ n 2))\n", "  (define (largest_divisor-iter n divisor)\n    (if (= (modulo n\
    \ divisor) 0)\n        (largest_divisor-iter n (+ divisor 1))\n        (- divisor\
    \ 1)))\n  (largest_divisor-iter n 2))\n", "  (define (largest_divisor_iter i)\n\
    \    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (- i 1))))\n\
    \  (largest_divisor_iter (- n 1)))\n", "  (define (largest_divisor_iter i)\n \
    \   (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (- i 1))))\n\
    \  (largest_divisor_iter (/ n 2)))\n", "  (define (largest_divisor-iter n i)\n\
    \    (if (= (modulo n i) 0)\n        i\n        (largest_divisor-iter n (- i 1))))\n\
    \  (largest_divisor-iter n (- n 1)))\n", "  (define (largest_divisor_iter i)\n\
    \    (if (= (modulo n i) 0)\n        i\n        (largest_divisor_iter (- i 1))))\n\
    \  (largest_divisor_iter (/ n 2)))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
