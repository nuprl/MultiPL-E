language: rkt
name: HumanEval_21_rescale_to_unit
results:
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (\u03BB (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039857
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit-helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit-helper (cdr numbers) min max))))\n  (rescale_to_unit-helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [delta (- max min)])\n    (map (lambda (x) (/ (- x min) delta)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (\u03BB (n) (/ (- n min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let ([min (apply min numbers)]\n        [max (apply max numbers)])\n    (map\
    \ (lambda (n) (/ (- n min) (- max min))) numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039857
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [delta (- max min)])\n    (map (lambda (x) (/ (- x min) delta)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit-helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit-helper (cdr numbers) min max))))\n  (rescale_to_unit-helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit-helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit-helper (cdr numbers) min max))))\n  (rescale_to_unit-helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min-number (apply min numbers)]\n         [max-number (apply max numbers)]\n\
    \         [range (- max-number min-number)])\n    (map (lambda (x) (/ (- x min-number)\
    \ range)) numbers)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate rescale_to_unit))\n    (check-equal? (candidate (list 2.0 49.9))\
    \ (list 0.0 1.0))\n    (check-equal? (candidate (list 100.0 49.9)) (list 1.0 0.0))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75\
    \ 1.0))\n    (check-equal? (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0\
    \ 1.0 0.5 0.75))\n    (check-equal? (candidate (list 12.0 11.0 15.0 13.0 14.0))\
    \ (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [delta (- max min)])\n    (map (lambda (x) (/ (- x min) delta)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [delta (- max min)])\n    (map (lambda (n) (/ (- n min) delta)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (\u03BB (n) (/ (- n min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let ([min (apply min numbers)]\n        [max (apply max numbers)])\n    (map\
    \ (lambda (x) (/ (- x min) (- max min))) numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (min-max numbers)\n    (let loop ((numbers numbers) (min (car numbers))\
    \ (max (car numbers)))\n      (if (null? numbers)\n          (values min max)\n\
    \          (let ((n (car numbers)))\n            (loop (cdr numbers) (if (< n\
    \ min) n min) (if (> n max) n max))))))\n  (let-values (((min max) (min-max numbers)))\n\
    \    (map (lambda (n) (/ (- n min) (- max min))) numbers)))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039857
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (n) (/ (- n min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039857
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let ([min (apply min numbers)]\n        [max (apply max numbers)])\n    (map\
    \ (lambda (x) (/ (- x min) (- max min))) numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (empty? numbers)\n\
    \        empty\n        (cons (/ (- (first numbers) min) (- max min))\n      \
    \        (rescale_to_unit_helper (rest numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [delta (- max min)])\n    (map (lambda (x) (/ (- x min) delta)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [delta (- max min)])\n    (map (lambda (x) (/ (- x min) delta)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [delta (- max min)])\n    (map (lambda (n) (/ (- n min) delta)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min-number (apply min numbers)]\n         [max-number (apply max numbers)]\n\
    \         [range (- max-number min-number)])\n    (map (lambda (x) (/ (- x min-number)\
    \ range)) numbers)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate rescale_to_unit))\n    (check-equal? (candidate (list 2.0 49.9))\
    \ (list 0.0 1.0))\n    (check-equal? (candidate (list 100.0 49.9)) (list 1.0 0.0))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75\
    \ 1.0))\n    (check-equal? (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0\
    \ 1.0 0.5 0.75))\n    (check-equal? (candidate (list 12.0 11.0 15.0 13.0 14.0))\
    \ (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [delta (- max min)])\n    (map (lambda (x) (/ (- x min) delta)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let ([min (apply min numbers)]\n        [max (apply max numbers)])\n    (map\
    \ (lambda (x) (/ (- x min) (- max min))) numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let ([min (apply min numbers)]\n        [max (apply max numbers)])\n    (map\
    \ (lambda (x) (/ (- x min) (- max min))) numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (n) (/ (- n min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039857
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min-num (apply min numbers)]\n         [max-num (apply max numbers)]\n\
    \         [range (- max-num min-num)])\n    (map (lambda (x) (/ (- x min-num)\
    \ range)) numbers)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate rescale_to_unit))\n    (check-equal? (candidate (list 2.0 49.9))\
    \ (list 0.0 1.0))\n    (check-equal? (candidate (list 100.0 49.9)) (list 1.0 0.0))\n\
    \    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75\
    \ 1.0))\n    (check-equal? (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0\
    \ 1.0 0.5 0.75))\n    (check-equal? (candidate (list 12.0 11.0 15.0 13.0 14.0))\
    \ (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let ([min (apply min numbers)]\n        [max (apply max numbers)])\n    (map\
    \ (lambda (x) (/ (- x min) (- max min))) numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (n) (/ (- n min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039857
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let ([min (apply min numbers)]\n        [max (apply max numbers)])\n    (map\
    \ (lambda (x) (/ (- x min) (- max min))) numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (n) (/ (- n min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039857
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [scale (/ (- max min) 1.0)])\n    (map (lambda (x) (/ (- x min) scale))\
    \ numbers)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ rescale_to_unit))\n    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n\
    \    (check-equal? (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal?\
    \ (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let ([min (apply min numbers)]\n        [max (apply max numbers)])\n    (map\
    \ (lambda (x) (/ (- x min) (- max min))) numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [delta (- max min)])\n    (map (lambda (x) (/ (- x min) delta)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit-helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit-helper (cdr numbers) min max))))\n  (rescale_to_unit-helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [delta (- max min)])\n    (map (lambda (x) (/ (- x min) delta)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let ([min (apply min numbers)]\n        [max (apply max numbers)])\n    (map\
    \ (lambda (x) (/ (- x min) (- max min))) numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (\u03BB (n) (/ (- n min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (n) (/ (- n min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (n) (/ (- n min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit-helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit-helper (cdr numbers) min max))))\n  (rescale_to_unit-helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_iter numbers min max result)\n    (if (null? numbers)\n\
    \        result\n        (rescale_to_unit_iter (cdr numbers)\n               \
    \               (min min (car numbers))\n                              (max max\
    \ (car numbers))\n                              (append result (list (/ (- (car\
    \ numbers) min) (- max min)))))))\n  (rescale_to_unit_iter numbers (car numbers)\
    \ (car numbers) '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate rescale_to_unit))\n    (check-equal? (candidate (list 2.0\
    \ 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list 100.0 49.9)) (list\
    \ 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0\
    \ 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list 2.0 1.0 5.0 3.0 4.0))\
    \ (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate (list 12.0 11.0\
    \ 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_sxtehom.rkt:22:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 2.0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp_sxtehom.rkt:23:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: 100.0\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmp_sxtehom.rkt:24:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: 1.0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_sxtehom.rkt:25:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 2.0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp_sxtehom.rkt:26:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: 12.0\n--------------------\n"
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_iter numbers min max result)\n    (cond\n      [(empty?\
    \ numbers) result]\n      [(empty? result) (rescale_to_unit_iter (rest numbers)\
    \ (first numbers) (first numbers) (list (first numbers)))]\n      [else (rescale_to_unit_iter\
    \ (rest numbers) (min min (first numbers)) (max max (first numbers)) (append result\
    \ (list (/ (- (first numbers) min) (- max min)))))]))\n  (rescale_to_unit_iter\
    \ numbers (first numbers) (first numbers) (list (first numbers))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmilbk_2t.rkt:20:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 2.0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpmilbk_2t.rkt:21:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: 100.0\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmpmilbk_2t.rkt:22:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: 1.0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpmilbk_2t.rkt:23:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 2.0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmpmilbk_2t.rkt:24:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: 12.0\n--------------------\n"
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale-to-unit-helper numbers smallest largest)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) smallest) (- largest smallest))\n\
    \              (rescale-to-unit-helper (cdr numbers) smallest largest))))\n  (rescale-to-unit-helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039857
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (n) (/ (- n min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_iter numbers min max result)\n    (if (null? numbers)\n\
    \        result\n        (rescale_to_unit_iter (cdr numbers)\n               \
    \               (min min (car numbers))\n                              (max max\
    \ (car numbers))\n                              (append result (list (/ (- (car\
    \ numbers) min) (- max min)))))))\n  (rescale_to_unit_iter numbers (car numbers)\
    \ (car numbers) '()))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate rescale_to_unit))\n    (check-equal? (candidate (list 2.0\
    \ 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list 100.0 49.9)) (list\
    \ 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0\
    \ 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list 2.0 1.0 5.0 3.0 4.0))\
    \ (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate (list 12.0 11.0\
    \ 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_sxtehom.rkt:22:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 2.0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp_sxtehom.rkt:23:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: 100.0\n--------------------\n--------------------\nERROR\nname:     \
    \  check-equal?\nlocation:   /tmp/tmp_sxtehom.rkt:24:4\n\napplication: not a procedure;\n\
    \ expected a procedure that can be applied to arguments\n  given: 1.0\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_sxtehom.rkt:25:4\n\
    \napplication: not a procedure;\n expected a procedure that can be applied to\
    \ arguments\n  given: 2.0\n--------------------\n--------------------\nERROR\n\
    name:       check-equal?\nlocation:   /tmp/tmp_sxtehom.rkt:26:4\n\napplication:\
    \ not a procedure;\n expected a procedure that can be applied to arguments\n \
    \ given: 12.0\n--------------------\n"
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let ([min (apply min numbers)]\n        [max (apply max numbers)])\n    (map\
    \ (lambda (x) (/ (- x min) (- max min))) numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (n) (/ (- n min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039857
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit-helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit-helper (cdr numbers) min max))))\n  (rescale_to_unit-helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [delta (- max min)])\n    (map (lambda (x) (/ (- x min) delta)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [delta (- max min)])\n    (map (lambda (x) (/ (- x min) delta)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (cond\n      [(null?\
    \ numbers) '()]\n      [else (cons (/ (- (car numbers) min) (- max min)) (rescale_to_unit_helper\
    \ (cdr numbers) min max))]))\n  (rescale_to_unit_helper numbers (apply min numbers)\
    \ (apply max numbers)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate rescale_to_unit))\n    (check-equal? (candidate (list 2.0\
    \ 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list 100.0 49.9)) (list\
    \ 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0\
    \ 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list 2.0 1.0 5.0 3.0 4.0))\
    \ (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate (list 12.0 11.0\
    \ 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let ([min (apply min numbers)]\n        [max (apply max numbers)])\n    (map\
    \ (lambda (x) (/ (- x min) (- max min))) numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale-to-unit-helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale-to-unit-helper (cdr numbers) min max))))\n  (rescale-to-unit-helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (n) (/ (- n min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039857
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define min (apply min numbers))\n  (define max (apply max numbers))\n  (define\
    \ range (- max min))\n  (map (lambda (x) (/ (- x min) range)) numbers))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: Exception
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmpd34l7f4r.rkt:18:4\n\
    \nmin: undefined;\n cannot use before initialization\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpd34l7f4r.rkt:19:4\n\nmin:\
    \ undefined;\n cannot use before initialization\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpd34l7f4r.rkt:20:4\n\nmin:\
    \ undefined;\n cannot use before initialization\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpd34l7f4r.rkt:21:4\n\nmin:\
    \ undefined;\n cannot use before initialization\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmpd34l7f4r.rkt:22:4\n\nmin:\
    \ undefined;\n cannot use before initialization\n--------------------\n"
  stdout: ''
  timestamp: 1660039857
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (n) (/ (- n min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (n) (/ (- n min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039857
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (n) (/ (- n min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039857
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let ([min (apply min numbers)]\n        [max (apply max numbers)])\n    (map\
    \ (lambda (x) (/ (- x min) (- max min))) numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit-helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit-helper (cdr numbers) min max))))\n  (rescale_to_unit-helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let ([min (apply min numbers)]\n        [max (apply max numbers)])\n    (map\
    \ (lambda (x) (/ (- x min) (- max min))) numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [delta (- max min)])\n    (map (lambda (x) (/ (- x min) delta)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (cond\n      [(empty?\
    \ numbers) empty]\n      [else (cons (/ (- (first numbers) min) (- max min)) (rescale_to_unit_helper\
    \ (rest numbers) min max))]))\n  (rescale_to_unit_helper numbers (apply min numbers)\
    \ (apply max numbers)))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n\
    \  (let (( candidate rescale_to_unit))\n    (check-equal? (candidate (list 2.0\
    \ 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list 100.0 49.9)) (list\
    \ 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0\
    \ 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list 2.0 1.0 5.0 3.0 4.0))\
    \ (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate (list 12.0 11.0\
    \ 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039857
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (n) (/ (- n min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (define (rescale_to_unit_helper numbers min max)\n    (if (null? numbers)\n\
    \        '()\n        (cons (/ (- (car numbers) min) (- max min))\n          \
    \    (rescale_to_unit_helper (cdr numbers) min max))))\n  (rescale_to_unit_helper\
    \ numbers (apply min numbers) (apply max numbers)))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n    (check-equal?\
    \ (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal? (candidate (list\
    \ 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate (list 1.0 2.0 3.0\
    \ 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal? (candidate (list\
    \ 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal? (candidate\
    \ (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (n) (/ (- n min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039857
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [diff (- max min)])\n    (map (lambda (x) (/ (- x min) diff)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
- exit_code: 0
  program: "#lang racket\n\n;; Given list of numbers (of at least two elements), apply\
    \ a linear transform to that list,\n;; such that the smallest number will become\
    \ 0 and the largest will become 1\n;; >>> (rescale_to_unit (list 1.0 2.0 3.0 4.0\
    \ 5.0))\n;; (list 0.0 0.25 0.5 0.75 1.0)\n(define (rescale_to_unit numbers)\n\
    \  (let* ([min (apply min numbers)]\n         [max (apply max numbers)]\n    \
    \     [range (- max min)])\n    (map (lambda (x) (/ (- x min) range)) numbers)))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate rescale_to_unit))\n\
    \    (check-equal? (candidate (list 2.0 49.9)) (list 0.0 1.0))\n    (check-equal?\
    \ (candidate (list 100.0 49.9)) (list 1.0 0.0))\n    (check-equal? (candidate\
    \ (list 1.0 2.0 3.0 4.0 5.0)) (list 0.0 0.25 0.5 0.75 1.0))\n    (check-equal?\
    \ (candidate (list 2.0 1.0 5.0 3.0 4.0)) (list 0.25 0.0 1.0 0.5 0.75))\n    (check-equal?\
    \ (candidate (list 12.0 11.0 15.0 13.0 14.0)) (list 0.25 0.0 1.0 0.5 0.75))\n\
    ))\n\n(test-humaneval)"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660039856
