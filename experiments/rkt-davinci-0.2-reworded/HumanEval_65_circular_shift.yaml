name: HumanEval_65_circular_shift
language: rkt
prompt: "#lang racket\n\n;; Circular shift the digits of the integer x, shift the\
  \ digits right by shift\n;; and return the result as a string.\n;; If shift > number\
  \ of digits, return digits reversed.\n;; >>> (circular_shift 12 1)\n;; \"21\"\n\
  ;; >>> (circular_shift 12 2)\n;; \"12\"\n(define (circular_shift x shift)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate circular_shift))\n\
  \    (check-equal? (candidate 100 2) \"001\")\n    (check-equal? (candidate 12 2)\
  \ \"12\")\n    (check-equal? (candidate 97 8) \"79\")\n    (check-equal? (candidate\
  \ 12 1) \"21\")\n    (check-equal? (candidate 11 101) \"11\")\n))\n\n(test-humaneval)"
completions: ["  (define (shift-helper x shift result)\n    (if (zero? x)\n      \
    \  result\n        (shift-helper (quotient x 10)\n                      (if (zero?\
    \ shift)\n                          (length (number->string x))\n            \
    \              (- shift 1))\n                      (string-append (number->string\
    \ (remainder x 10))\n                                     result))))\n  (shift-helper\
    \ x shift \"\"))\n", "  (define (reverse-string str)\n    (string-append (substring\
    \ str 1) (substring str 0 1)))\n  (define (shift-string str)\n    (string-append\
    \ (substring str 1) (substring str 0 1)))\n  (define (shift-string-n str n)\n\
    \    (if (= n 0)\n        str\n        (shift-string-n (shift-string str) (- n\
    \ 1))))\n  (define (reverse-string-n str n)\n    (if (= n 0)\n        str\n  \
    \      (reverse-string-n (reverse-string str) (- n 1))))\n  (define (shift-or-reverse\
    \ str shift)\n    (if (> shift (string-length str))\n        (reverse-string-n\
    \ str shift)\n        (shift-string-n str shift)))\n  (shift-or-reverse (number->string\
    \ x) shift))\n", "  (define (shift-helper x shift)\n    (if (zero? shift)\n  \
    \      x\n        (shift-helper (string-append (substring x 1) (substring x 0\
    \ 1)) (- shift 1))))\n  (shift-helper (number->string x) shift))\n", "  (define\
    \ (shift-digits x shift)\n    (if (zero? x)\n        '()\n        (cons (modulo\
    \ x 10) (shift-digits (quotient x 10) shift))))\n  (define (shift-digits-right\
    \ digits shift)\n    (if (zero? shift)\n        digits\n        (shift-digits-right\
    \ (append (cdr digits) (list (car digits))) (- shift 1))))\n  (define (digits->string\
    \ digits)\n    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (shift-digits x shift)\n    (if\
    \ (zero? x)\n        '()\n        (cons (modulo x 10) (shift-digits (quotient\
    \ x 10) shift))))\n  (define (shift-digits-right digits shift)\n    (if (zero?\
    \ shift)\n        digits\n        (shift-digits-right (append (cdr digits) (list\
    \ (car digits))) (- shift 1))))\n  (define (digits->string digits)\n    (if (null?\
    \ digits)\n        \"\"\n        (string-append (number->string (car digits))\
    \ (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right (shift-digits\
    \ x shift) shift)))\n", "  (define (circular_shift-helper x shift result)\n  \
    \  (if (zero? x)\n        result\n        (circular_shift-helper (quotient x 10)\n\
    \                               (modulo shift 1)\n                           \
    \    (string-append (number->string (modulo x 10))\n                         \
    \                     result))))\n  (circular_shift-helper x shift \"\"))\n",
  "  (string-join (reverse (list->string (reverse (string->list (number->string x)))))))\n",
  "  (define (circular_shift_helper x shift)\n    (if (zero? shift)\n        x\n \
    \       (circular_shift_helper (string-append (substring x 1) (substring x 0 1))\
    \ (- shift 1))))\n  (if (<= shift (string-length x))\n      (circular_shift_helper\
    \ x shift)\n      (string-reverse x)))\n", "  (define (shift-digits x shift)\n\
    \    (if (zero? x)\n        '()\n        (cons (modulo x 10) (shift-digits (quotient\
    \ x 10) shift))))\n  (define (shift-digits-right digits shift)\n    (if (zero?\
    \ shift)\n        digits\n        (shift-digits-right (append (cdr digits) (list\
    \ (car digits))) (- shift 1))))\n  (define (digits->string digits)\n    (if (null?\
    \ digits)\n        \"\"\n        (string-append (number->string (car digits))\
    \ (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right (shift-digits\
    \ x shift) shift)))\n", "  (define (shift-digits x shift)\n    (if (zero? x)\n\
    \        '()\n        (cons (modulo x 10) (shift-digits (quotient x 10) shift))))\n\
    \  (define (reverse-digits x)\n    (if (zero? x)\n        '()\n        (cons (modulo\
    \ x 10) (reverse-digits (quotient x 10)))))\n  (define (digits-to-string digits)\n\
    \    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits-to-string (cdr digits)))))\n  (if (> shift (length (shift-digits\
    \ x shift)))\n      (digits-to-string (reverse-digits x))\n      (digits-to-string\
    \ (append (cdr (shift-digits x shift)) (list (car (shift-digits x shift)))))))\n",
  "  (define (shift-digits x shift)\n    (if (zero? x)\n        '()\n        (cons\
    \ (modulo x 10) (shift-digits (quotient x 10) shift))))\n  (define (shift-digits-right\
    \ x shift)\n    (if (zero? shift)\n        x\n        (shift-digits-right (append\
    \ (cdr x) (list (car x))) (- shift 1))))\n  (define (digits->string digits)\n\
    \    (if (null? digits)\n        \"\"\n        (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits)))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (number->string (string->number (reverse\
    \ (string-append (substring (number->string x) shift) (substring (number->string\
    \ x) 0 shift))))))\n", "  (define (shift-digits x shift)\n    (if (zero? x)\n\
    \        '()\n        (cons (modulo x 10) (shift-digits (quotient x 10) shift))))\n\
    \  (define (digits->string digits)\n    (if (null? digits)\n        \"\"\n   \
    \     (string-append (number->string (car digits)) (digits->string (cdr digits)))))\n\
    \  (define (reverse-digits digits)\n    (if (null? digits)\n        '()\n    \
    \    (append (reverse-digits (cdr digits)) (list (car digits)))))\n  (define (shift-digits-right\
    \ digits shift)\n    (if (zero? shift)\n        digits\n        (shift-digits-right\
    \ (reverse-digits digits) (- shift 1))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (shift-digit digit)\n    (if\
    \ (= digit 0)\n        9\n        (- digit 1)))\n  (define (shift-digits digits\
    \ shift)\n    (if (= shift 0)\n        digits\n        (shift-digits (map shift-digit\
    \ digits) (- shift 1))))\n  (define (reverse-digits digits)\n    (if (null? digits)\n\
    \        '()\n        (append (reverse-digits (cdr digits)) (list (car digits)))))\n\
    \  (define (digits x)\n    (if (= x 0)\n        '()\n        (append (digits (quotient\
    \ x 10)) (list (remainder x 10)))))\n  (define (stringify digits)\n    (if (null?\
    \ digits)\n        \"\"\n        (string-append (stringify (cdr digits)) (number->string\
    \ (car digits)))))\n  (stringify (if (> shift (length (digits x)))\n         \
    \        (reverse-digits (digits x))\n                 (shift-digits (digits x)\
    \ shift))))\n", "  (define (shift-digits x shift)\n    (if (zero? x)\n       \
    \ '()\n        (cons (modulo x 10) (shift-digits (quotient x 10) shift))))\n \
    \ (define (shift-digits-right digits shift)\n    (if (zero? shift)\n        digits\n\
    \        (shift-digits-right (append (cdr digits) (list (car digits))) (- shift\
    \ 1))))\n  (define (digits->string digits)\n    (if (null? digits)\n        \"\
    \"\n        (string-append (number->string (car digits)) (digits->string (cdr\
    \ digits)))))\n  (digits->string (shift-digits-right (shift-digits x shift) shift)))\n",
  "  (define (shift-digits x shift)\n    (cond ((zero? x) '())\n          (else (cons\
    \ (modulo x 10) (shift-digits (quotient x 10) shift)))))\n  (define (shift-digits-right\
    \ digits shift)\n    (cond ((zero? shift) digits)\n          (else (shift-digits-right\
    \ (append (cdr digits) (list (car digits))) (- shift 1)))))\n  (define (digits->string\
    \ digits)\n    (cond ((null? digits) \"\")\n          (else (string-append (number->string\
    \ (car digits)) (digits->string (cdr digits))))))\n  (digits->string (shift-digits-right\
    \ (shift-digits x shift) shift)))\n", "  (define (shift-right x shift)\n    (if\
    \ (= shift 0)\n        x\n        (shift-right (quotient x 10) (- shift 1))))\n\
    \  (define (shift-left x shift)\n    (if (= shift 0)\n        x\n        (shift-left\
    \ (* x 10) (- shift 1))))\n  (define (reverse-digits x)\n    (define (reverse-digits-iter\
    \ x acc)\n      (if (= x 0)\n          acc\n          (reverse-digits-iter (quotient\
    \ x 10) (+ (* acc 10) (remainder x 10)))))\n    (reverse-digits-iter x 0))\n \
    \ (define (number-of-digits x)\n    (define (number-of-digits-iter x acc)\n  \
    \    (if (= x 0)\n          acc\n          (number-of-digits-iter (quotient x\
    \ 10) (+ acc 1))))\n    (number-of-digits-iter x 0))\n  (define (digits-to-string\
    \ x)\n    (define (digits-to-string-iter x acc)\n      (if (= x 0)\n         \
    \ acc\n          (digits-to-string-iter (quotient x 10) (string-append (number->string\
    \ (remainder x 10)) acc))))\n    (digits-to-string-iter x \"\"))\n  (digits-to-string\
    \ (shift-left (shift-right x shift) (- (number-of-digits x) shift))))\n", "  (define\
    \ (shift-digits x shift)\n    (cond\n      [(zero? shift) x]\n      [else (shift-digits\
    \ (quotient x 10) (- shift 1))]))\n  (define (shift-digits-right x shift)\n  \
    \  (cond\n      [(zero? shift) x]\n      [else (shift-digits-right (modulo x 10)\
    \ (- shift 1))]))\n  (define (shift-digits-left x shift)\n    (cond\n      [(zero?\
    \ shift) x]\n      [else (shift-digits-left (quotient x 10) (- shift 1))]))\n\
    \  (define (shift-digits-left-right x shift)\n    (cond\n      [(zero? shift)\
    \ x]\n      [else (shift-digits-left-right (modulo x 10) (- shift 1))]))\n  (define\
    \ (shift-digits-right-left x shift)\n    (cond\n      [(zero? shift) x]\n    \
    \  [else (shift-digits-right-left (quotient x 10) (- shift 1))]))\n  (define (shift-digits-left-right-left\
    \ x shift)\n    (cond\n      [(zero? shift) x]\n      [else (shift-digits-left-right-left\
    \ (quotient x 10) (- shift 1))]))\n  (define (shift-digits-right-left-right x\
    \ shift)\n    (cond\n      [(zero? shift) x]\n      [else (shift-digits-right-left-right\
    \ (modulo x 10) (- shift 1))]))\n  (define (shift-digits-left-right-left-right\
    \ x shift)\n    (cond\n      [(zero? shift) x]\n      [else (shift-digits-left-right-left-right\
    \ (modulo x 10) (- shift 1))]))\n  (define (shift-digits-right-left-right-left\
    \ x shift)\n    (cond\n      [(zero? shift) x]\n      [else (shift-digits-right-left-right-left\
    \ (quotient x 10) (- shift 1))]))\n  (define (shift-digits-left-right", "  (define\
    \ (circular_shift_helper x shift result)\n    (if (zero? x)\n        result\n\
    \        (circular_shift_helper (quotient x 10)\n                            \
    \   (if (zero? shift)\n                                   (length (number->string\
    \ x))\n                                   (sub1 shift))\n                    \
    \           (string-append (number->string (remainder x 10))\n               \
    \                               result))))\n  (circular_shift_helper x shift \"\
    \"))\n", "  (define (shift-helper x shift)\n    (if (zero? shift)\n        (number->string\
    \ x)\n        (shift-helper (modulo x 10) (sub1 shift))))\n  (define (reverse-helper\
    \ x)\n    (if (zero? x)\n        \"\"\n        (string-append (reverse-helper\
    \ (quotient x 10)) (number->string (modulo x 10)))))\n  (define (num-digits x)\n\
    \    (if (zero? x)\n        0\n        (add1 (num-digits (quotient x 10)))))\n\
    \  (if (> shift (num-digits x))\n      (reverse-helper x)\n      (string-append\
    \ (shift-helper x shift) (shift-helper x 0))))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
