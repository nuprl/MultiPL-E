name: HumanEval_105_by_length
language: rkt
results:
- program: "#lang racket\n\n;; Given a list of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n;; reverse the resulting list, and then replace\
    \ each digit by its corresponding name from\n;; \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n;; For example:\n\
    ;; >>> (by_length (list 2 1 1 4 5 8 2 3))\n;; (list \"Eight\" \"Five\" \"Four\"\
    \ \"Three\" \"Two\" \"Two\" \"One\" \"One\")\n;; If the list is empty, return\
    \ an empty list:\n;; >>> (by_length (list ))\n;; (list )\n;; If the list has any\
    \ strange number ignore it:\n;; >>> (by_length (list 1 -1 55))\n;; (list \"One\"\
    )\n(define (by_length arr)\n  (cond\n    [(empty? arr) empty]\n    [(< (first\
    \ arr) 1) (by_length (rest arr))]\n    [(> (first arr) 9) (by_length (rest arr))]\n\
    \    [else (append (by_length (rest arr)) (list (first arr)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate by_length))\n    (check-equal?\
    \ (candidate (list 2 1 1 4 5 8 2 3)) (list \"Eight\" \"Five\" \"Four\" \"Three\"\
    \ \"Two\" \"Two\" \"One\" \"One\"))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -1 55)) (list \"One\"))\n    (check-equal?\
    \ (candidate (list 1 -1 3 2)) (list \"Three\" \"Two\" \"One\"))\n    (check-equal?\
    \ (candidate (list 9 4 8)) (list \"Nine\" \"Eight\" \"Four\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpipqdjgj6.rkt:27:4\n\
    actual:     '(3 2 8 5 4 1 1 2)\nexpected:   '(\"Eight\" \"Five\" \"Four\" \"Three\"\
    \ \"Two\" \"Two\" \"One\" \"One\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpipqdjgj6.rkt:29:4\nactual:\
    \     '(1)\nexpected:   '(\"One\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpipqdjgj6.rkt:30:4\nactual:\
    \     '(2 3 1)\nexpected:   '(\"Three\" \"Two\" \"One\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpipqdjgj6.rkt:31:4\n\
    actual:     '(8 4 9)\nexpected:   '(\"Nine\" \"Eight\" \"Four\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a list of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n;; reverse the resulting list, and then replace\
    \ each digit by its corresponding name from\n;; \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n;; For example:\n\
    ;; >>> (by_length (list 2 1 1 4 5 8 2 3))\n;; (list \"Eight\" \"Five\" \"Four\"\
    \ \"Three\" \"Two\" \"Two\" \"One\" \"One\")\n;; If the list is empty, return\
    \ an empty list:\n;; >>> (by_length (list ))\n;; (list )\n;; If the list has any\
    \ strange number ignore it:\n;; >>> (by_length (list 1 -1 55))\n;; (list \"One\"\
    )\n(define (by_length arr)\n  (cond\n    [(empty? arr) (list)]\n    [(and (<=\
    \ 1 (first arr)) (<= (first arr) 9))\n     (append (by_length (rest arr)) (list\
    \ (first arr)))]\n    [else (by_length (rest arr))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate by_length))\n    (check-equal?\
    \ (candidate (list 2 1 1 4 5 8 2 3)) (list \"Eight\" \"Five\" \"Four\" \"Three\"\
    \ \"Two\" \"Two\" \"One\" \"One\"))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -1 55)) (list \"One\"))\n    (check-equal?\
    \ (candidate (list 1 -1 3 2)) (list \"Three\" \"Two\" \"One\"))\n    (check-equal?\
    \ (candidate (list 9 4 8)) (list \"Nine\" \"Eight\" \"Four\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8l87ypzm.rkt:27:4\n\
    actual:     '(3 2 8 5 4 1 1 2)\nexpected:   '(\"Eight\" \"Five\" \"Four\" \"Three\"\
    \ \"Two\" \"Two\" \"One\" \"One\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8l87ypzm.rkt:29:4\nactual:\
    \     '(1)\nexpected:   '(\"One\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8l87ypzm.rkt:30:4\nactual:\
    \     '(2 3 1)\nexpected:   '(\"Three\" \"Two\" \"One\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8l87ypzm.rkt:31:4\n\
    actual:     '(8 4 9)\nexpected:   '(\"Nine\" \"Eight\" \"Four\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a list of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n;; reverse the resulting list, and then replace\
    \ each digit by its corresponding name from\n;; \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n;; For example:\n\
    ;; >>> (by_length (list 2 1 1 4 5 8 2 3))\n;; (list \"Eight\" \"Five\" \"Four\"\
    \ \"Three\" \"Two\" \"Two\" \"One\" \"One\")\n;; If the list is empty, return\
    \ an empty list:\n;; >>> (by_length (list ))\n;; (list )\n;; If the list has any\
    \ strange number ignore it:\n;; >>> (by_length (list 1 -1 55))\n;; (list \"One\"\
    )\n(define (by_length arr)\n  (if (empty? arr)\n      (list)\n      (let* ([sorted\
    \ (sort arr <)]\n             [filtered (filter (lambda (x) (and (>= x 1) (<=\
    \ x 9))) sorted)]\n             [reversed (reverse filtered)])\n        (map (lambda\
    \ (x) (cond\n                          [(= x 1) \"One\"]\n                   \
    \       [(= x 2) \"Two\"]\n                          [(= x 3) \"Three\"]\n   \
    \                       [(= x 4) \"Four\"]\n                          [(= x 5)\
    \ \"Five\"]\n                          [(= x 6) \"Six\"]\n                   \
    \       [(= x 7) \"Seven\"]\n                          [(= x 8) \"Eight\"]\n \
    \                         [(= x 9) \"Nine\"])) reversed))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate by_length))\n    (check-equal?\
    \ (candidate (list 2 1 1 4 5 8 2 3)) (list \"Eight\" \"Five\" \"Four\" \"Three\"\
    \ \"Two\" \"Two\" \"One\" \"One\"))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -1 55)) (list \"One\"))\n    (check-equal?\
    \ (candidate (list 1 -1 3 2)) (list \"Three\" \"Two\" \"One\"))\n    (check-equal?\
    \ (candidate (list 9 4 8)) (list \"Nine\" \"Eight\" \"Four\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Given a list of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n;; reverse the resulting list, and then replace\
    \ each digit by its corresponding name from\n;; \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n;; For example:\n\
    ;; >>> (by_length (list 2 1 1 4 5 8 2 3))\n;; (list \"Eight\" \"Five\" \"Four\"\
    \ \"Three\" \"Two\" \"Two\" \"One\" \"One\")\n;; If the list is empty, return\
    \ an empty list:\n;; >>> (by_length (list ))\n;; (list )\n;; If the list has any\
    \ strange number ignore it:\n;; >>> (by_length (list 1 -1 55))\n;; (list \"One\"\
    )\n(define (by_length arr)\n  (if (empty? arr)\n      (list)\n      (let* ([sorted\
    \ (sort arr <)]\n             [reversed (reverse sorted)]\n             [filtered\
    \ (filter (lambda (x) (and (<= 1 x) (<= x 9))) reversed)])\n        (map (lambda\
    \ (x) (cond [(= x 1) \"One\"]\n                               [(= x 2) \"Two\"\
    ]\n                               [(= x 3) \"Three\"]\n                      \
    \         [(= x 4) \"Four\"]\n                               [(= x 5) \"Five\"\
    ]\n                               [(= x 6) \"Six\"]\n                        \
    \       [(= x 7) \"Seven\"]\n                               [(= x 8) \"Eight\"\
    ]\n                               [(= x 9) \"Nine\"])) filtered))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate by_length))\n\
    \    (check-equal? (candidate (list 2 1 1 4 5 8 2 3)) (list \"Eight\" \"Five\"\
    \ \"Four\" \"Three\" \"Two\" \"Two\" \"One\" \"One\"))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -1 55)) (list \"One\"\
    ))\n    (check-equal? (candidate (list 1 -1 3 2)) (list \"Three\" \"Two\" \"One\"\
    ))\n    (check-equal? (candidate (list 9 4 8)) (list \"Nine\" \"Eight\" \"Four\"\
    ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Given a list of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n;; reverse the resulting list, and then replace\
    \ each digit by its corresponding name from\n;; \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n;; For example:\n\
    ;; >>> (by_length (list 2 1 1 4 5 8 2 3))\n;; (list \"Eight\" \"Five\" \"Four\"\
    \ \"Three\" \"Two\" \"Two\" \"One\" \"One\")\n;; If the list is empty, return\
    \ an empty list:\n;; >>> (by_length (list ))\n;; (list )\n;; If the list has any\
    \ strange number ignore it:\n;; >>> (by_length (list 1 -1 55))\n;; (list \"One\"\
    )\n(define (by_length arr)\n  (cond\n    [(empty? arr) empty]\n    [(< (first\
    \ arr) 1) (by_length (rest arr))]\n    [(> (first arr) 9) (by_length (rest arr))]\n\
    \    [else (append (by_length (rest arr)) (list (first arr)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate by_length))\n    (check-equal?\
    \ (candidate (list 2 1 1 4 5 8 2 3)) (list \"Eight\" \"Five\" \"Four\" \"Three\"\
    \ \"Two\" \"Two\" \"One\" \"One\"))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -1 55)) (list \"One\"))\n    (check-equal?\
    \ (candidate (list 1 -1 3 2)) (list \"Three\" \"Two\" \"One\"))\n    (check-equal?\
    \ (candidate (list 9 4 8)) (list \"Nine\" \"Eight\" \"Four\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp7v10yjx.rkt:27:4\n\
    actual:     '(3 2 8 5 4 1 1 2)\nexpected:   '(\"Eight\" \"Five\" \"Four\" \"Three\"\
    \ \"Two\" \"Two\" \"One\" \"One\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp7v10yjx.rkt:29:4\nactual:\
    \     '(1)\nexpected:   '(\"One\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp7v10yjx.rkt:30:4\nactual:\
    \     '(2 3 1)\nexpected:   '(\"Three\" \"Two\" \"One\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpp7v10yjx.rkt:31:4\n\
    actual:     '(8 4 9)\nexpected:   '(\"Nine\" \"Eight\" \"Four\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a list of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n;; reverse the resulting list, and then replace\
    \ each digit by its corresponding name from\n;; \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n;; For example:\n\
    ;; >>> (by_length (list 2 1 1 4 5 8 2 3))\n;; (list \"Eight\" \"Five\" \"Four\"\
    \ \"Three\" \"Two\" \"Two\" \"One\" \"One\")\n;; If the list is empty, return\
    \ an empty list:\n;; >>> (by_length (list ))\n;; (list )\n;; If the list has any\
    \ strange number ignore it:\n;; >>> (by_length (list 1 -1 55))\n;; (list \"One\"\
    )\n(define (by_length arr)\n  (cond\n    [(empty? arr) empty]\n    [(< (first\
    \ arr) 1) (by_length (rest arr))]\n    [(> (first arr) 9) (by_length (rest arr))]\n\
    \    [else (cons (number->string (first arr)) (by_length (rest arr)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate by_length))\n\
    \    (check-equal? (candidate (list 2 1 1 4 5 8 2 3)) (list \"Eight\" \"Five\"\
    \ \"Four\" \"Three\" \"Two\" \"Two\" \"One\" \"One\"))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -1 55)) (list \"One\"\
    ))\n    (check-equal? (candidate (list 1 -1 3 2)) (list \"Three\" \"Two\" \"One\"\
    ))\n    (check-equal? (candidate (list 9 4 8)) (list \"Nine\" \"Eight\" \"Four\"\
    ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6vvg0o0b.rkt:27:4\n\
    actual:     '(\"2\" \"1\" \"1\" \"4\" \"5\" \"8\" \"2\" \"3\")\nexpected:   '(\"\
    Eight\" \"Five\" \"Four\" \"Three\" \"Two\" \"Two\" \"One\" \"One\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6vvg0o0b.rkt:29:4\n\
    actual:     '(\"1\")\nexpected:   '(\"One\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6vvg0o0b.rkt:30:4\nactual:\
    \     '(\"1\" \"3\" \"2\")\nexpected:   '(\"Three\" \"Two\" \"One\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp6vvg0o0b.rkt:31:4\n\
    actual:     '(\"9\" \"4\" \"8\")\nexpected:   '(\"Nine\" \"Eight\" \"Four\")\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a list of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n;; reverse the resulting list, and then replace\
    \ each digit by its corresponding name from\n;; \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n;; For example:\n\
    ;; >>> (by_length (list 2 1 1 4 5 8 2 3))\n;; (list \"Eight\" \"Five\" \"Four\"\
    \ \"Three\" \"Two\" \"Two\" \"One\" \"One\")\n;; If the list is empty, return\
    \ an empty list:\n;; >>> (by_length (list ))\n;; (list )\n;; If the list has any\
    \ strange number ignore it:\n;; >>> (by_length (list 1 -1 55))\n;; (list \"One\"\
    )\n(define (by_length arr)\n  (cond\n    [(empty? arr) (list)]\n    [(and (integer?\
    \ (first arr))\n          (or (= (first arr) 1) (= (first arr) 2) (= (first arr)\
    \ 3) (= (first arr) 4) (= (first arr) 5) (= (first arr) 6) (= (first arr) 7) (=\
    \ (first arr) 8) (= (first arr) 9)))\n     (append (by_length (rest arr)) (list\
    \ (first arr)))]\n    [else (by_length (rest arr))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate by_length))\n    (check-equal?\
    \ (candidate (list 2 1 1 4 5 8 2 3)) (list \"Eight\" \"Five\" \"Four\" \"Three\"\
    \ \"Two\" \"Two\" \"One\" \"One\"))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -1 55)) (list \"One\"))\n    (check-equal?\
    \ (candidate (list 1 -1 3 2)) (list \"Three\" \"Two\" \"One\"))\n    (check-equal?\
    \ (candidate (list 9 4 8)) (list \"Nine\" \"Eight\" \"Four\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2zqzxtvf.rkt:28:4\n\
    actual:     '(3 2 8 5 4 1 1 2)\nexpected:   '(\"Eight\" \"Five\" \"Four\" \"Three\"\
    \ \"Two\" \"Two\" \"One\" \"One\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2zqzxtvf.rkt:30:4\nactual:\
    \     '(1)\nexpected:   '(\"One\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2zqzxtvf.rkt:31:4\nactual:\
    \     '(2 3 1)\nexpected:   '(\"Three\" \"Two\" \"One\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp2zqzxtvf.rkt:32:4\n\
    actual:     '(8 4 9)\nexpected:   '(\"Nine\" \"Eight\" \"Four\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a list of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n;; reverse the resulting list, and then replace\
    \ each digit by its corresponding name from\n;; \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n;; For example:\n\
    ;; >>> (by_length (list 2 1 1 4 5 8 2 3))\n;; (list \"Eight\" \"Five\" \"Four\"\
    \ \"Three\" \"Two\" \"Two\" \"One\" \"One\")\n;; If the list is empty, return\
    \ an empty list:\n;; >>> (by_length (list ))\n;; (list )\n;; If the list has any\
    \ strange number ignore it:\n;; >>> (by_length (list 1 -1 55))\n;; (list \"One\"\
    )\n(define (by_length arr)\n  (cond\n    [(empty? arr) empty]\n    [(< (first\
    \ arr) 1) (by_length (rest arr))]\n    [(> (first arr) 9) (by_length (rest arr))]\n\
    \    [else (append (by_length (rest arr)) (list (first arr)))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate by_length))\n    (check-equal?\
    \ (candidate (list 2 1 1 4 5 8 2 3)) (list \"Eight\" \"Five\" \"Four\" \"Three\"\
    \ \"Two\" \"Two\" \"One\" \"One\"))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -1 55)) (list \"One\"))\n    (check-equal?\
    \ (candidate (list 1 -1 3 2)) (list \"Three\" \"Two\" \"One\"))\n    (check-equal?\
    \ (candidate (list 9 4 8)) (list \"Nine\" \"Eight\" \"Four\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuar_6cpg.rkt:27:4\n\
    actual:     '(3 2 8 5 4 1 1 2)\nexpected:   '(\"Eight\" \"Five\" \"Four\" \"Three\"\
    \ \"Two\" \"Two\" \"One\" \"One\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuar_6cpg.rkt:29:4\nactual:\
    \     '(1)\nexpected:   '(\"One\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuar_6cpg.rkt:30:4\nactual:\
    \     '(2 3 1)\nexpected:   '(\"Three\" \"Two\" \"One\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpuar_6cpg.rkt:31:4\n\
    actual:     '(8 4 9)\nexpected:   '(\"Nine\" \"Eight\" \"Four\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a list of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n;; reverse the resulting list, and then replace\
    \ each digit by its corresponding name from\n;; \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n;; For example:\n\
    ;; >>> (by_length (list 2 1 1 4 5 8 2 3))\n;; (list \"Eight\" \"Five\" \"Four\"\
    \ \"Three\" \"Two\" \"Two\" \"One\" \"One\")\n;; If the list is empty, return\
    \ an empty list:\n;; >>> (by_length (list ))\n;; (list )\n;; If the list has any\
    \ strange number ignore it:\n;; >>> (by_length (list 1 -1 55))\n;; (list \"One\"\
    )\n(define (by_length arr)\n  (let ([sorted (sort arr <)])\n    (for/list ([i\
    \ sorted]\n               #:when (and (>= i 1) (<= i 9)))\n      (cond\n     \
    \   [(= i 1) \"One\"]\n        [(= i 2) \"Two\"]\n        [(= i 3) \"Three\"]\n\
    \        [(= i 4) \"Four\"]\n        [(= i 5) \"Five\"]\n        [(= i 6) \"Six\"\
    ]\n        [(= i 7) \"Seven\"]\n        [(= i 8) \"Eight\"]\n        [(= i 9)\
    \ \"Nine\"]))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate by_length))\n    (check-equal? (candidate (list 2 1 1 4 5 8 2 3))\
    \ (list \"Eight\" \"Five\" \"Four\" \"Three\" \"Two\" \"Two\" \"One\" \"One\"\
    ))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 1 -1 55)) (list \"One\"))\n    (check-equal? (candidate (list 1 -1 3 2))\
    \ (list \"Three\" \"Two\" \"One\"))\n    (check-equal? (candidate (list 9 4 8))\
    \ (list \"Nine\" \"Eight\" \"Four\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpclqpypow.rkt:35:4\n\
    actual:     '(\"One\" \"One\" \"Two\" \"Two\" \"Three\" \"Four\" \"Five\" \"Eight\"\
    )\nexpected:   '(\"Eight\" \"Five\" \"Four\" \"Three\" \"Two\" \"Two\" \"One\"\
    \ \"One\")\n--------------------\n--------------------\nFAILURE\nname:       check-equal?\n\
    location:   /tmp/tmpclqpypow.rkt:38:4\nactual:     '(\"One\" \"Two\" \"Three\"\
    )\nexpected:   '(\"Three\" \"Two\" \"One\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpclqpypow.rkt:39:4\nactual:\
    \     '(\"Four\" \"Eight\" \"Nine\")\nexpected:   '(\"Nine\" \"Eight\" \"Four\"\
    )\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a list of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n;; reverse the resulting list, and then replace\
    \ each digit by its corresponding name from\n;; \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n;; For example:\n\
    ;; >>> (by_length (list 2 1 1 4 5 8 2 3))\n;; (list \"Eight\" \"Five\" \"Four\"\
    \ \"Three\" \"Two\" \"Two\" \"One\" \"One\")\n;; If the list is empty, return\
    \ an empty list:\n;; >>> (by_length (list ))\n;; (list )\n;; If the list has any\
    \ strange number ignore it:\n;; >>> (by_length (list 1 -1 55))\n;; (list \"One\"\
    )\n(define (by_length arr)\n  (define (sort-arr arr)\n    (sort arr <))\n  (define\
    \ (reverse-arr arr)\n    (reverse arr))\n  (define (replace-arr arr)\n    (map\
    \ (lambda (x)\n           (cond ((= x 1) \"One\")\n                 ((= x 2) \"\
    Two\")\n                 ((= x 3) \"Three\")\n                 ((= x 4) \"Four\"\
    )\n                 ((= x 5) \"Five\")\n                 ((= x 6) \"Six\")\n \
    \                ((= x 7) \"Seven\")\n                 ((= x 8) \"Eight\")\n \
    \                ((= x 9) \"Nine\")))\n         arr))\n  (replace-arr (reverse-arr\
    \ (sort-arr arr))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate by_length))\n    (check-equal? (candidate (list 2 1 1 4 5 8 2 3))\
    \ (list \"Eight\" \"Five\" \"Four\" \"Three\" \"Two\" \"Two\" \"One\" \"One\"\
    ))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal? (candidate\
    \ (list 1 -1 55)) (list \"One\"))\n    (check-equal? (candidate (list 1 -1 3 2))\
    \ (list \"Three\" \"Two\" \"One\"))\n    (check-equal? (candidate (list 9 4 8))\
    \ (list \"Nine\" \"Eight\" \"Four\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu3m196ga.rkt:41:4\n\
    actual:     '(#<void> \"One\" #<void>)\nexpected:   '(\"One\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpu3m196ga.rkt:42:4\n\
    actual:     '(\"Three\" \"Two\" \"One\" #<void>)\nexpected:   '(\"Three\" \"Two\"\
    \ \"One\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a list of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n;; reverse the resulting list, and then replace\
    \ each digit by its corresponding name from\n;; \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n;; For example:\n\
    ;; >>> (by_length (list 2 1 1 4 5 8 2 3))\n;; (list \"Eight\" \"Five\" \"Four\"\
    \ \"Three\" \"Two\" \"Two\" \"One\" \"One\")\n;; If the list is empty, return\
    \ an empty list:\n;; >>> (by_length (list ))\n;; (list )\n;; If the list has any\
    \ strange number ignore it:\n;; >>> (by_length (list 1 -1 55))\n;; (list \"One\"\
    )\n(define (by_length arr)\n  (cond\n    [(empty? arr) (list)]\n    [(and (integer?\
    \ (first arr))\n          (or (= (first arr) 1) (= (first arr) 2) (= (first arr)\
    \ 3) (= (first arr) 4) (= (first arr) 5) (= (first arr) 6) (= (first arr) 7) (=\
    \ (first arr) 8) (= (first arr) 9)))\n     (append (by_length (rest arr)) (list\
    \ (first arr)))]\n    [else (by_length (rest arr))]))\n\n(require rackunit)\n\n\
    (define (test-humaneval) \n\n  (let (( candidate by_length))\n    (check-equal?\
    \ (candidate (list 2 1 1 4 5 8 2 3)) (list \"Eight\" \"Five\" \"Four\" \"Three\"\
    \ \"Two\" \"Two\" \"One\" \"One\"))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -1 55)) (list \"One\"))\n    (check-equal?\
    \ (candidate (list 1 -1 3 2)) (list \"Three\" \"Two\" \"One\"))\n    (check-equal?\
    \ (candidate (list 9 4 8)) (list \"Nine\" \"Eight\" \"Four\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr3awlff2.rkt:28:4\n\
    actual:     '(3 2 8 5 4 1 1 2)\nexpected:   '(\"Eight\" \"Five\" \"Four\" \"Three\"\
    \ \"Two\" \"Two\" \"One\" \"One\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr3awlff2.rkt:30:4\nactual:\
    \     '(1)\nexpected:   '(\"One\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr3awlff2.rkt:31:4\nactual:\
    \     '(2 3 1)\nexpected:   '(\"Three\" \"Two\" \"One\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpr3awlff2.rkt:32:4\n\
    actual:     '(8 4 9)\nexpected:   '(\"Nine\" \"Eight\" \"Four\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a list of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n;; reverse the resulting list, and then replace\
    \ each digit by its corresponding name from\n;; \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n;; For example:\n\
    ;; >>> (by_length (list 2 1 1 4 5 8 2 3))\n;; (list \"Eight\" \"Five\" \"Four\"\
    \ \"Three\" \"Two\" \"Two\" \"One\" \"One\")\n;; If the list is empty, return\
    \ an empty list:\n;; >>> (by_length (list ))\n;; (list )\n;; If the list has any\
    \ strange number ignore it:\n;; >>> (by_length (list 1 -1 55))\n;; (list \"One\"\
    )\n(define (by_length arr)\n  (define (sort-arr arr)\n    (cond [(empty? arr)\
    \ empty]\n          [else (cons (min arr) (sort-arr (remove (min arr) arr)))]))\n\
    \  (define (reverse-arr arr)\n    (cond [(empty? arr) empty]\n          [else\
    \ (append (reverse-arr (rest arr)) (list (first arr)))]))\n  (define (replace-arr\
    \ arr)\n    (cond [(empty? arr) empty]\n          [(= (first arr) 1) (cons \"\
    One\" (replace-arr (rest arr)))]\n          [(= (first arr) 2) (cons \"Two\" (replace-arr\
    \ (rest arr)))]\n          [(= (first arr) 3) (cons \"Three\" (replace-arr (rest\
    \ arr)))]\n          [(= (first arr) 4) (cons \"Four\" (replace-arr (rest arr)))]\n\
    \          [(= (first arr) 5) (cons \"Five\" (replace-arr (rest arr)))]\n    \
    \      [(= (first arr) 6) (cons \"Six\" (replace-arr (rest arr)))]\n         \
    \ [(= (first arr) 7) (cons \"Seven\" (replace-arr (rest arr)))]\n          [(=\
    \ (first arr) 8) (cons \"Eight\" (replace-arr (rest arr)))]\n          [(= (first\
    \ arr) 9) (cons \"Nine\" (replace-arr (rest arr)))]\n          [else (replace-arr\
    \ (rest arr))]))\n  (replace-arr (reverse-arr (sort-arr arr))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate by_length))\n    (check-equal?\
    \ (candidate (list 2 1 1 4 5 8 2 3)) (list \"Eight\" \"Five\" \"Four\" \"Three\"\
    \ \"Two\" \"Two\" \"One\" \"One\"))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -1 55)) (list \"One\"))\n    (check-equal?\
    \ (candidate (list 1 -1 3 2)) (list \"Three\" \"Two\" \"One\"))\n    (check-equal?\
    \ (candidate (list 9 4 8)) (list \"Nine\" \"Eight\" \"Four\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphqy5p2q5.rkt:41:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(2 1 1 4 5 8 2 3)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphqy5p2q5.rkt:43:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 -1 55)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphqy5p2q5.rkt:44:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(1 -1 3 2)\n--------------------\n\
    --------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmphqy5p2q5.rkt:45:4\n\
    \nmin: contract violation\n  expected: real?\n  given: '(9 4 8)\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a list of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n;; reverse the resulting list, and then replace\
    \ each digit by its corresponding name from\n;; \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n;; For example:\n\
    ;; >>> (by_length (list 2 1 1 4 5 8 2 3))\n;; (list \"Eight\" \"Five\" \"Four\"\
    \ \"Three\" \"Two\" \"Two\" \"One\" \"One\")\n;; If the list is empty, return\
    \ an empty list:\n;; >>> (by_length (list ))\n;; (list )\n;; If the list has any\
    \ strange number ignore it:\n;; >>> (by_length (list 1 -1 55))\n;; (list \"One\"\
    )\n(define (by_length arr)\n  (cond [(empty? arr) empty]\n        [(< (first arr)\
    \ 1) (by_length (rest arr))]\n        [(> (first arr) 9) (by_length (rest arr))]\n\
    \        [else (append (by_length (rest arr)) (list (first arr)))]))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate by_length))\n\
    \    (check-equal? (candidate (list 2 1 1 4 5 8 2 3)) (list \"Eight\" \"Five\"\
    \ \"Four\" \"Three\" \"Two\" \"Two\" \"One\" \"One\"))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -1 55)) (list \"One\"\
    ))\n    (check-equal? (candidate (list 1 -1 3 2)) (list \"Three\" \"Two\" \"One\"\
    ))\n    (check-equal? (candidate (list 9 4 8)) (list \"Nine\" \"Eight\" \"Four\"\
    ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphphpj3b4.rkt:26:4\n\
    actual:     '(3 2 8 5 4 1 1 2)\nexpected:   '(\"Eight\" \"Five\" \"Four\" \"Three\"\
    \ \"Two\" \"Two\" \"One\" \"One\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmphphpj3b4.rkt:28:4\nactual:\
    \     '(1)\nexpected:   '(\"One\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmphphpj3b4.rkt:29:4\nactual:\
    \     '(2 3 1)\nexpected:   '(\"Three\" \"Two\" \"One\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmphphpj3b4.rkt:30:4\n\
    actual:     '(8 4 9)\nexpected:   '(\"Nine\" \"Eight\" \"Four\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a list of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n;; reverse the resulting list, and then replace\
    \ each digit by its corresponding name from\n;; \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n;; For example:\n\
    ;; >>> (by_length (list 2 1 1 4 5 8 2 3))\n;; (list \"Eight\" \"Five\" \"Four\"\
    \ \"Three\" \"Two\" \"Two\" \"One\" \"One\")\n;; If the list is empty, return\
    \ an empty list:\n;; >>> (by_length (list ))\n;; (list )\n;; If the list has any\
    \ strange number ignore it:\n;; >>> (by_length (list 1 -1 55))\n;; (list \"One\"\
    )\n(define (by_length arr)\n  (if (empty? arr)\n      (list)\n      (let* ([sorted\
    \ (sort arr <)]\n             [reversed (reverse sorted)]\n             [filtered\
    \ (filter (lambda (x) (and (>= x 1) (<= x 9))) reversed)])\n        (map (lambda\
    \ (x) (cond\n                          [(= x 1) \"One\"]\n                   \
    \       [(= x 2) \"Two\"]\n                          [(= x 3) \"Three\"]\n   \
    \                       [(= x 4) \"Four\"]\n                          [(= x 5)\
    \ \"Five\"]\n                          [(= x 6) \"Six\"]\n                   \
    \       [(= x 7) \"Seven\"]\n                          [(= x 8) \"Eight\"]\n \
    \                         [(= x 9) \"Nine\"])) filtered))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate by_length))\n    (check-equal?\
    \ (candidate (list 2 1 1 4 5 8 2 3)) (list \"Eight\" \"Five\" \"Four\" \"Three\"\
    \ \"Two\" \"Two\" \"One\" \"One\"))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -1 55)) (list \"One\"))\n    (check-equal?\
    \ (candidate (list 1 -1 3 2)) (list \"Three\" \"Two\" \"One\"))\n    (check-equal?\
    \ (candidate (list 9 4 8)) (list \"Nine\" \"Eight\" \"Four\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Given a list of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n;; reverse the resulting list, and then replace\
    \ each digit by its corresponding name from\n;; \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n;; For example:\n\
    ;; >>> (by_length (list 2 1 1 4 5 8 2 3))\n;; (list \"Eight\" \"Five\" \"Four\"\
    \ \"Three\" \"Two\" \"Two\" \"One\" \"One\")\n;; If the list is empty, return\
    \ an empty list:\n;; >>> (by_length (list ))\n;; (list )\n;; If the list has any\
    \ strange number ignore it:\n;; >>> (by_length (list 1 -1 55))\n;; (list \"One\"\
    )\n(define (by_length arr)\n  (define (sort-arr arr)\n    (cond [(empty? arr)\
    \ empty]\n          [else (append (sort-arr (filter (lambda (x) (< x (first arr)))\
    \ (rest arr)))\n                        (cons (first arr) (sort-arr (filter (lambda\
    \ (x) (>= x (first arr))) (rest arr)))))]))\n  (define (replace-num arr)\n   \
    \ (cond [(empty? arr) empty]\n          [(= (first arr) 1) (cons \"One\" (replace-num\
    \ (rest arr)))]\n          [(= (first arr) 2) (cons \"Two\" (replace-num (rest\
    \ arr)))]\n          [(= (first arr) 3) (cons \"Three\" (replace-num (rest arr)))]\n\
    \          [(= (first arr) 4) (cons \"Four\" (replace-num (rest arr)))]\n    \
    \      [(= (first arr) 5) (cons \"Five\" (replace-num (rest arr)))]\n        \
    \  [(= (first arr) 6) (cons \"Six\" (replace-num (rest arr)))]\n          [(=\
    \ (first arr) 7) (cons \"Seven\" (replace-num (rest arr)))]\n          [(= (first\
    \ arr) 8) (cons \"Eight\" (replace-num (rest arr)))]\n          [(= (first arr)\
    \ 9) (cons \"Nine\" (replace-num (rest arr)))]\n          [else (replace-num (rest\
    \ arr))]))\n  (replace-num (reverse (sort-arr (filter (lambda (x) (and (>= x 1)\
    \ (<= x 9))) arr)))))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n \
    \ (let (( candidate by_length))\n    (check-equal? (candidate (list 2 1 1 4 5\
    \ 8 2 3)) (list \"Eight\" \"Five\" \"Four\" \"Three\" \"Two\" \"Two\" \"One\"\
    \ \"One\"))\n    (check-equal? (candidate (list )) (list ))\n    (check-equal?\
    \ (candidate (list 1 -1 55)) (list \"One\"))\n    (check-equal? (candidate (list\
    \ 1 -1 3 2)) (list \"Three\" \"Two\" \"One\"))\n    (check-equal? (candidate (list\
    \ 9 4 8)) (list \"Nine\" \"Eight\" \"Four\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Given a list of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n;; reverse the resulting list, and then replace\
    \ each digit by its corresponding name from\n;; \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n;; For example:\n\
    ;; >>> (by_length (list 2 1 1 4 5 8 2 3))\n;; (list \"Eight\" \"Five\" \"Four\"\
    \ \"Three\" \"Two\" \"Two\" \"One\" \"One\")\n;; If the list is empty, return\
    \ an empty list:\n;; >>> (by_length (list ))\n;; (list )\n;; If the list has any\
    \ strange number ignore it:\n;; >>> (by_length (list 1 -1 55))\n;; (list \"One\"\
    )\n(define (by_length arr)\n  (cond\n    [(empty? arr) (list)]\n    [(and (<=\
    \ 1 (first arr)) (<= (first arr) 9))\n     (cons (number->string (first arr))\
    \ (by_length (rest arr)))]\n    [else (by_length (rest arr))]))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate by_length))\n    (check-equal?\
    \ (candidate (list 2 1 1 4 5 8 2 3)) (list \"Eight\" \"Five\" \"Four\" \"Three\"\
    \ \"Two\" \"Two\" \"One\" \"One\"))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -1 55)) (list \"One\"))\n    (check-equal?\
    \ (candidate (list 1 -1 3 2)) (list \"Three\" \"Two\" \"One\"))\n    (check-equal?\
    \ (candidate (list 9 4 8)) (list \"Nine\" \"Eight\" \"Four\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8b11as6a.rkt:27:4\n\
    actual:     '(\"2\" \"1\" \"1\" \"4\" \"5\" \"8\" \"2\" \"3\")\nexpected:   '(\"\
    Eight\" \"Five\" \"Four\" \"Three\" \"Two\" \"Two\" \"One\" \"One\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8b11as6a.rkt:29:4\n\
    actual:     '(\"1\")\nexpected:   '(\"One\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8b11as6a.rkt:30:4\nactual:\
    \     '(\"1\" \"3\" \"2\")\nexpected:   '(\"Three\" \"Two\" \"One\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp8b11as6a.rkt:31:4\n\
    actual:     '(\"9\" \"4\" \"8\")\nexpected:   '(\"Nine\" \"Eight\" \"Four\")\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a list of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n;; reverse the resulting list, and then replace\
    \ each digit by its corresponding name from\n;; \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n;; For example:\n\
    ;; >>> (by_length (list 2 1 1 4 5 8 2 3))\n;; (list \"Eight\" \"Five\" \"Four\"\
    \ \"Three\" \"Two\" \"Two\" \"One\" \"One\")\n;; If the list is empty, return\
    \ an empty list:\n;; >>> (by_length (list ))\n;; (list )\n;; If the list has any\
    \ strange number ignore it:\n;; >>> (by_length (list 1 -1 55))\n;; (list \"One\"\
    )\n(define (by_length arr)\n  (cond\n    [(empty? arr) '()]\n    [(< (first arr)\
    \ 1) (by_length (rest arr))]\n    [(> (first arr) 9) (by_length (rest arr))]\n\
    \    [else (append (list (number->string (first arr))) (by_length (rest arr)))]))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate by_length))\n\
    \    (check-equal? (candidate (list 2 1 1 4 5 8 2 3)) (list \"Eight\" \"Five\"\
    \ \"Four\" \"Three\" \"Two\" \"Two\" \"One\" \"One\"))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -1 55)) (list \"One\"\
    ))\n    (check-equal? (candidate (list 1 -1 3 2)) (list \"Three\" \"Two\" \"One\"\
    ))\n    (check-equal? (candidate (list 9 4 8)) (list \"Nine\" \"Eight\" \"Four\"\
    ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqpnu_frl.rkt:27:4\n\
    actual:     '(\"2\" \"1\" \"1\" \"4\" \"5\" \"8\" \"2\" \"3\")\nexpected:   '(\"\
    Eight\" \"Five\" \"Four\" \"Three\" \"Two\" \"Two\" \"One\" \"One\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqpnu_frl.rkt:29:4\n\
    actual:     '(\"1\")\nexpected:   '(\"One\")\n--------------------\n--------------------\n\
    FAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqpnu_frl.rkt:30:4\nactual:\
    \     '(\"1\" \"3\" \"2\")\nexpected:   '(\"Three\" \"Two\" \"One\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpqpnu_frl.rkt:31:4\n\
    actual:     '(\"9\" \"4\" \"8\")\nexpected:   '(\"Nine\" \"Eight\" \"Four\")\n\
    --------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a list of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n;; reverse the resulting list, and then replace\
    \ each digit by its corresponding name from\n;; \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n;; For example:\n\
    ;; >>> (by_length (list 2 1 1 4 5 8 2 3))\n;; (list \"Eight\" \"Five\" \"Four\"\
    \ \"Three\" \"Two\" \"Two\" \"One\" \"One\")\n;; If the list is empty, return\
    \ an empty list:\n;; >>> (by_length (list ))\n;; (list )\n;; If the list has any\
    \ strange number ignore it:\n;; >>> (by_length (list 1 -1 55))\n;; (list \"One\"\
    )\n(define (by_length arr)\n  (define (is-valid-number? n)\n    (and (integer?\
    \ n)\n         (>= n 1)\n         (<= n 9)))\n  (define (number->name n)\n   \
    \ (cond\n      [(= n 1) \"One\"]\n      [(= n 2) \"Two\"]\n      [(= n 3) \"Three\"\
    ]\n      [(= n 4) \"Four\"]\n      [(= n 5) \"Five\"]\n      [(= n 6) \"Six\"\
    ]\n      [(= n 7) \"Seven\"]\n      [(= n 8) \"Eight\"]\n      [(= n 9) \"Nine\"\
    ]))\n  (reverse (map number->name (filter is-valid-number? arr))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate by_length))\n\
    \    (check-equal? (candidate (list 2 1 1 4 5 8 2 3)) (list \"Eight\" \"Five\"\
    \ \"Four\" \"Three\" \"Two\" \"Two\" \"One\" \"One\"))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -1 55)) (list \"One\"\
    ))\n    (check-equal? (candidate (list 1 -1 3 2)) (list \"Three\" \"Two\" \"One\"\
    ))\n    (check-equal? (candidate (list 9 4 8)) (list \"Nine\" \"Eight\" \"Four\"\
    ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwzk8p0k.rkt:38:4\n\
    actual:     '(\"Three\" \"Two\" \"Eight\" \"Five\" \"Four\" \"One\" \"One\" \"\
    Two\")\nexpected:   '(\"Eight\" \"Five\" \"Four\" \"Three\" \"Two\" \"Two\" \"\
    One\" \"One\")\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpgwzk8p0k.rkt:41:4\nactual:     '(\"Two\"\
    \ \"Three\" \"One\")\nexpected:   '(\"Three\" \"Two\" \"One\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpgwzk8p0k.rkt:42:4\n\
    actual:     '(\"Eight\" \"Four\" \"Nine\")\nexpected:   '(\"Nine\" \"Eight\" \"\
    Four\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a list of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n;; reverse the resulting list, and then replace\
    \ each digit by its corresponding name from\n;; \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n;; For example:\n\
    ;; >>> (by_length (list 2 1 1 4 5 8 2 3))\n;; (list \"Eight\" \"Five\" \"Four\"\
    \ \"Three\" \"Two\" \"Two\" \"One\" \"One\")\n;; If the list is empty, return\
    \ an empty list:\n;; >>> (by_length (list ))\n;; (list )\n;; If the list has any\
    \ strange number ignore it:\n;; >>> (by_length (list 1 -1 55))\n;; (list \"One\"\
    )\n(define (by_length arr)\n  (define (sort-arr arr)\n    (cond ((null? arr) '())\n\
    \          ((< (car arr) 1) (sort-arr (cdr arr)))\n          ((> (car arr) 9)\
    \ (sort-arr (cdr arr)))\n          (else (cons (car arr) (sort-arr (cdr arr))))))\n\
    \  (define (reverse-arr arr)\n    (cond ((null? arr) '())\n          (else (append\
    \ (reverse-arr (cdr arr)) (list (car arr))))))\n  (define (replace-arr arr)\n\
    \    (cond ((null? arr) '())\n          ((= (car arr) 1) (cons \"One\" (replace-arr\
    \ (cdr arr))))\n          ((= (car arr) 2) (cons \"Two\" (replace-arr (cdr arr))))\n\
    \          ((= (car arr) 3) (cons \"Three\" (replace-arr (cdr arr))))\n      \
    \    ((= (car arr) 4) (cons \"Four\" (replace-arr (cdr arr))))\n          ((=\
    \ (car arr) 5) (cons \"Five\" (replace-arr (cdr arr))))\n          ((= (car arr)\
    \ 6) (cons \"Six\" (replace-arr (cdr arr))))\n          ((= (car arr) 7) (cons\
    \ \"Seven\" (replace-arr (cdr arr))))\n          ((= (car arr) 8) (cons \"Eight\"\
    \ (replace-arr (cdr arr))))\n          ((= (car arr) 9) (cons \"Nine\" (replace-arr\
    \ (cdr arr))))))\n  (replace-arr (reverse-arr (sort-arr arr))))\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate by_length))\n    (check-equal?\
    \ (candidate (list 2 1 1 4 5 8 2 3)) (list \"Eight\" \"Five\" \"Four\" \"Three\"\
    \ \"Two\" \"Two\" \"One\" \"One\"))\n    (check-equal? (candidate (list )) (list\
    \ ))\n    (check-equal? (candidate (list 1 -1 55)) (list \"One\"))\n    (check-equal?\
    \ (candidate (list 1 -1 3 2)) (list \"Three\" \"Two\" \"One\"))\n    (check-equal?\
    \ (candidate (list 9 4 8)) (list \"Nine\" \"Eight\" \"Four\"))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdtglvfp0.rkt:42:4\n\
    actual:     '(\"Three\" \"Two\" \"Eight\" \"Five\" \"Four\" \"One\" \"One\" \"\
    Two\")\nexpected:   '(\"Eight\" \"Five\" \"Four\" \"Three\" \"Two\" \"Two\" \"\
    One\" \"One\")\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpdtglvfp0.rkt:45:4\nactual:     '(\"Two\"\
    \ \"Three\" \"One\")\nexpected:   '(\"Three\" \"Two\" \"One\")\n--------------------\n\
    --------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdtglvfp0.rkt:46:4\n\
    actual:     '(\"Eight\" \"Four\" \"Nine\")\nexpected:   '(\"Nine\" \"Eight\" \"\
    Four\")\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; Given a list of integers, sort the integers that are\
    \ between 1 and 9 inclusive,\n;; reverse the resulting list, and then replace\
    \ each digit by its corresponding name from\n;; \"One\", \"Two\", \"Three\", \"\
    Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n;; For example:\n\
    ;; >>> (by_length (list 2 1 1 4 5 8 2 3))\n;; (list \"Eight\" \"Five\" \"Four\"\
    \ \"Three\" \"Two\" \"Two\" \"One\" \"One\")\n;; If the list is empty, return\
    \ an empty list:\n;; >>> (by_length (list ))\n;; (list )\n;; If the list has any\
    \ strange number ignore it:\n;; >>> (by_length (list 1 -1 55))\n;; (list \"One\"\
    )\n(define (by_length arr)\n  (define (sort-and-reverse arr)\n    (reverse (sort\
    \ arr <)))\n  (define (replace-by-name arr)\n    (map (lambda (x)\n          \
    \ (cond\n             [(= x 1) \"One\"]\n             [(= x 2) \"Two\"]\n    \
    \         [(= x 3) \"Three\"]\n             [(= x 4) \"Four\"]\n             [(=\
    \ x 5) \"Five\"]\n             [(= x 6) \"Six\"]\n             [(= x 7) \"Seven\"\
    ]\n             [(= x 8) \"Eight\"]\n             [(= x 9) \"Nine\"]\n       \
    \      [else \"\"]))\n         arr))\n  (define (filter-valid-numbers arr)\n \
    \   (filter (lambda (x)\n              (and (>= x 1) (<= x 9)))\n            arr))\n\
    \  (replace-by-name (sort-and-reverse (filter-valid-numbers arr))))\n\n(require\
    \ rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate by_length))\n\
    \    (check-equal? (candidate (list 2 1 1 4 5 8 2 3)) (list \"Eight\" \"Five\"\
    \ \"Four\" \"Three\" \"Two\" \"Two\" \"One\" \"One\"))\n    (check-equal? (candidate\
    \ (list )) (list ))\n    (check-equal? (candidate (list 1 -1 55)) (list \"One\"\
    ))\n    (check-equal? (candidate (list 1 -1 3 2)) (list \"Three\" \"Two\" \"One\"\
    ))\n    (check-equal? (candidate (list 9 4 8)) (list \"Nine\" \"Eight\" \"Four\"\
    ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
