name: HumanEval_80_is_happy
language: rkt
results:
- program: "#lang racket\n\n;; You are given a string s.\n;; Your task is to check\
    \ if the string is haprkt or not.\n;; A string is haprkt if its length is at least\
    \ 3 and every 3 consecutive letters are distinct\n;; For example:\n;; >>> (is_happy\
    \ a)\n;; #f\n;; >>> (is_happy aa)\n;; #f\n;; >>> (is_happy abcd)\n;; #t\n;; >>>\
    \ (is_happy aabb)\n;; #f\n;; >>> (is_happy adb)\n;; #t\n;; >>> (is_happy xyy)\n\
    ;; #f\n(define (is_happy s)\n  (if (&lt; (string-length s) 3)\n      #f\n    \
    \  (let ([s (string-&gt;list s)])\n        (cond\n          [(equal? (list-ref\
    \ s 0) (list-ref s 1)) #f]\n          [(equal? (list-ref s 0) (list-ref s 2))\
    \ #f]\n          [(equal? (list-ref s 1) (list-ref s 2)) #f]\n          [else\
    \ #t]))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let\
    \ (( candidate is_happy))\n    (check-equal? (candidate \"a\") #f)\n    (check-equal?\
    \ (candidate \"aa\") #f)\n    (check-equal? (candidate \"abcd\") #t)\n    (check-equal?\
    \ (candidate \"aabb\") #f)\n    (check-equal? (candidate \"adb\") #t)\n    (check-equal?\
    \ (candidate \"xyy\") #f)\n    (check-equal? (candidate \"iopaxpoi\") #t)\n  \
    \  (check-equal? (candidate \"iopaxioi\") #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpwvyw42v2.rkt:27:21: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; You are given a string s.\n;; Your task is to check\
    \ if the string is haprkt or not.\n;; A string is haprkt if its length is at least\
    \ 3 and every 3 consecutive letters are distinct\n;; For example:\n;; >>> (is_happy\
    \ a)\n;; #f\n;; >>> (is_happy aa)\n;; #f\n;; >>> (is_happy abcd)\n;; #t\n;; >>>\
    \ (is_happy aabb)\n;; #f\n;; >>> (is_happy adb)\n;; #t\n;; >>> (is_happy xyy)\n\
    ;; #f\n(define (is_happy s)\n  (and (not (empty? s))\n       (not (empty? (rest\
    \ s)))\n       (not (empty? (rest (rest s))))\n       (and (not (equal? (first\
    \ s) (second s)))\n            (and (not (equal? (first s) (third s)))\n     \
    \            (and (not (equal? (second s) (third s)))\n                      (is_happy\
    \ (rest (rest (rest s)))))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_happy))\n    (check-equal? (candidate \"a\") #f)\n\
    \    (check-equal? (candidate \"aa\") #f)\n    (check-equal? (candidate \"abcd\"\
    ) #t)\n    (check-equal? (candidate \"aabb\") #f)\n    (check-equal? (candidate\
    \ \"adb\") #t)\n    (check-equal? (candidate \"xyy\") #f)\n    (check-equal? (candidate\
    \ \"iopaxpoi\") #t)\n    (check-equal? (candidate \"iopaxioi\") #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nERROR\nname:       check-equal?\nlocation:   /tmp/tmp_lwu0nre.rkt:33:4\n\
    \nrest: contract violation\n  expected: (and/c list? (not/c empty?))\n  given:\
    \ \"a\"\n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_lwu0nre.rkt:34:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aa\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_lwu0nre.rkt:35:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"abcd\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_lwu0nre.rkt:36:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"aabb\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_lwu0nre.rkt:37:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"adb\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_lwu0nre.rkt:38:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"xyy\"\n--------------------\n--------------------\n\
    ERROR\nname:       check-equal?\nlocation:   /tmp/tmp_lwu0nre.rkt:39:4\n\nrest:\
    \ contract violation\n  expected: (and/c list? (not/c empty?))\n  given: \"iopaxpoi\"\
    \n--------------------\n--------------------\nERROR\nname:       check-equal?\n\
    location:   /tmp/tmp_lwu0nre.rkt:40:4\n\nrest: contract violation\n  expected:\
    \ (and/c list? (not/c empty?))\n  given: \"iopaxioi\"\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a string s.\n;; Your task is to check\
    \ if the string is haprkt or not.\n;; A string is haprkt if its length is at least\
    \ 3 and every 3 consecutive letters are distinct\n;; For example:\n;; >>> (is_happy\
    \ a)\n;; #f\n;; >>> (is_happy aa)\n;; #f\n;; >>> (is_happy abcd)\n;; #t\n;; >>>\
    \ (is_happy aabb)\n;; #f\n;; >>> (is_happy adb)\n;; #t\n;; >>> (is_happy xyy)\n\
    ;; #f\n(define (is_happy s)\n  (and (&gt;= (string-length s) 3)\n       (for/and\
    \ ([i (in-range 0 (- (string-length s) 2))])\n         (not (equal? (string-ref\
    \ s i) (string-ref s (+ i 2)))))))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_happy))\n    (check-equal? (candidate \"a\") #f)\n\
    \    (check-equal? (candidate \"aa\") #f)\n    (check-equal? (candidate \"abcd\"\
    ) #t)\n    (check-equal? (candidate \"aabb\") #f)\n    (check-equal? (candidate\
    \ \"adb\") #t)\n    (check-equal? (candidate \"xyy\") #f)\n    (check-equal? (candidate\
    \ \"iopaxpoi\") #t)\n    (check-equal? (candidate \"iopaxioi\") #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmprjbp96sh.rkt:19:0: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 24\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; You are given a string s.\n;; Your task is to check\
    \ if the string is haprkt or not.\n;; A string is haprkt if its length is at least\
    \ 3 and every 3 consecutive letters are distinct\n;; For example:\n;; >>> (is_happy\
    \ a)\n;; #f\n;; >>> (is_happy aa)\n;; #f\n;; >>> (is_happy abcd)\n;; #t\n;; >>>\
    \ (is_happy aabb)\n;; #f\n;; >>> (is_happy adb)\n;; #t\n;; >>> (is_happy xyy)\n\
    ;; #f\n(define (is_happy s)\n  (cond\n    [(string=? s \"\") #f]\n    [(string=?\
    \ s \"a\") #f]\n    [(string=? s \"aa\") #f]\n    [(string=? s \"aaa\") #t]\n\
    \    [(string=? s \"aaaa\") #f]\n    [(string=? s \"aaaaa\") #t]\n    [(string=?\
    \ s \"aaaaaa\") #f]\n    [(string=? s \"aaaaaaa\") #t]\n    [(string=? s \"aaaaaaaa\"\
    ) #f]\n    [(string=? s \"aaaaaaaaa\") #t]\n    [(string=? s \"aaaaaaaaaa\") #f]\n\
    \    [(string=? s \"aaaaaaaaaaa\") #t]\n    [(string=? s \"aaaaaaaaaaaa\") #f]\n\
    \    [(string=? s \"aaaaaaaaaaaaa\") #t]\n    [(string=? s \"aaaaaaaaaaaaaa\"\
    ) #f]\n    [(string=? s \"aaaaaaaaaaaaaaa\") #t]\n    [(string=? s \"aaaaaaaaaaaaaaaa\"\
    ) #f]\n    [(string=? s \"aaaaaaaaaaaaaaaaa\") #t]\n    [(string=? s \"aaaaaaaaaaaaaaaaaa\"\
    ) #f]\n    [(string=? s \"aaaaaaaaaaaaaaaaaaa\") #t]\n    [(string=? s \"aaaaaaaaaaaaaaaaaaaa\"\
    ) #f]\n    [(string=? s \"aaaaaaaaaaaaaaaaaaaaa\") #t]\n    [(string=? s \"aaaaaaaaaaaaaaaaaaaaaa\"\
    ) #f]\n    [(string=? s \"aaaaaaaaaaaaaaaaaaaaaaa\") #t]\n    [(string=? s \"\
    aaaaaaaaaaaaaaaaaaaaaaaa\") #f]\n    [(string=? s \"aaaaaaaaaaaaaaaaaaaaaaaaa\"\
    ) #t]\n    [(string=? s \"aaaaaaaaaaaaaaaaaaaaaaaaaa\") #f]\n    [(string=? s\
    \ \"aaaaaaaaaaaaaaaaaaaaaaaaaaa\") #t]\n    [(string=? s \"aaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\
    ) #f]\n    [(string=? s \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") #t]\n    [(string=?\
    \ s \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") #f]\n    [(string=? s \"\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_happy))\n    (check-equal?\
    \ (candidate \"a\") #f)\n    (check-equal? (candidate \"aa\") #f)\n    (check-equal?\
    \ (candidate \"abcd\") #t)\n    (check-equal? (candidate \"aabb\") #f)\n    (check-equal?\
    \ (candidate \"adb\") #t)\n    (check-equal? (candidate \"xyy\") #f)\n    (check-equal?\
    \ (candidate \"iopaxpoi\") #t)\n    (check-equal? (candidate \"iopaxioi\") #f)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmpaj_8wgrz.rkt:65:38: read-syntax: expected a closing `\"`\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; You are given a string s.\n;; Your task is to check\
    \ if the string is haprkt or not.\n;; A string is haprkt if its length is at least\
    \ 3 and every 3 consecutive letters are distinct\n;; For example:\n;; >>> (is_happy\
    \ a)\n;; #f\n;; >>> (is_happy aa)\n;; #f\n;; >>> (is_happy abcd)\n;; #t\n;; >>>\
    \ (is_happy aabb)\n;; #f\n;; >>> (is_happy adb)\n;; #t\n;; >>> (is_happy xyy)\n\
    ;; #f\n(define (is_happy s)\n  (if (&lt; (string-length s) 3)\n      #f\n    \
    \  (let ((s (string-&gt;list s)))\n        (define (is_happy-helper s)\n     \
    \     (if (null? s)\n              #t\n              (if (equal? (car s) (cadr\
    \ s))\n                  #f\n                  (is_happy-helper (cdr s)))))\n\
    \        (is_happy-helper s))))\n</code>\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_happy))\n    (check-equal? (candidate \"a\") #f)\n\
    \    (check-equal? (candidate \"aa\") #f)\n    (check-equal? (candidate \"abcd\"\
    ) #t)\n    (check-equal? (candidate \"aabb\") #f)\n    (check-equal? (candidate\
    \ \"adb\") #t)\n    (check-equal? (candidate \"xyy\") #f)\n    (check-equal? (candidate\
    \ \"iopaxpoi\") #t)\n    (check-equal? (candidate \"iopaxioi\") #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp4w8ns6oi.rkt:22:6: read-syntax: expected a `)` to close `(`\n \
    \ possible cause: indentation suggests a missing `)` before line 30\n  context...:\n\
    \   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; You are given a string s.\n;; Your task is to check\
    \ if the string is haprkt or not.\n;; A string is haprkt if its length is at least\
    \ 3 and every 3 consecutive letters are distinct\n;; For example:\n;; >>> (is_happy\
    \ a)\n;; #f\n;; >>> (is_happy aa)\n;; #f\n;; >>> (is_happy abcd)\n;; #t\n;; >>>\
    \ (is_happy aabb)\n;; #f\n;; >>> (is_happy adb)\n;; #t\n;; >>> (is_happy xyy)\n\
    ;; #f\n(define (is_happy s)\n  (cond\n    [(< (string-length s) 3) #f]\n    [(equal?\
    \ (string-ref s 0) (string-ref s 1)) #f]\n    [(equal? (string-ref s 1) (string-ref\
    \ s 2)) #f]\n    [else #t]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_happy))\n    (check-equal? (candidate \"a\") #f)\n\
    \    (check-equal? (candidate \"aa\") #f)\n    (check-equal? (candidate \"abcd\"\
    ) #t)\n    (check-equal? (candidate \"aabb\") #f)\n    (check-equal? (candidate\
    \ \"adb\") #t)\n    (check-equal? (candidate \"xyy\") #f)\n    (check-equal? (candidate\
    \ \"iopaxpoi\") #t)\n    (check-equal? (candidate \"iopaxioi\") #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmplkpaovdi.rkt:38:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a string s.\n;; Your task is to check\
    \ if the string is haprkt or not.\n;; A string is haprkt if its length is at least\
    \ 3 and every 3 consecutive letters are distinct\n;; For example:\n;; >>> (is_happy\
    \ a)\n;; #f\n;; >>> (is_happy aa)\n;; #f\n;; >>> (is_happy abcd)\n;; #t\n;; >>>\
    \ (is_happy aabb)\n;; #f\n;; >>> (is_happy adb)\n;; #t\n;; >>> (is_happy xyy)\n\
    ;; #f\n(define (is_happy s)\n  (cond\n    [(< (string-length s) 3) #f]\n    [(equal?\
    \ (string-ref s 0) (string-ref s 1)) #f]\n    [(equal? (string-ref s 1) (string-ref\
    \ s 2)) #f]\n    [else #t]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_happy))\n    (check-equal? (candidate \"a\") #f)\n\
    \    (check-equal? (candidate \"aa\") #f)\n    (check-equal? (candidate \"abcd\"\
    ) #t)\n    (check-equal? (candidate \"aabb\") #f)\n    (check-equal? (candidate\
    \ \"adb\") #t)\n    (check-equal? (candidate \"xyy\") #f)\n    (check-equal? (candidate\
    \ \"iopaxpoi\") #t)\n    (check-equal? (candidate \"iopaxioi\") #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpslnemsdq.rkt:38:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a string s.\n;; Your task is to check\
    \ if the string is haprkt or not.\n;; A string is haprkt if its length is at least\
    \ 3 and every 3 consecutive letters are distinct\n;; For example:\n;; >>> (is_happy\
    \ a)\n;; #f\n;; >>> (is_happy aa)\n;; #f\n;; >>> (is_happy abcd)\n;; #t\n;; >>>\
    \ (is_happy aabb)\n;; #f\n;; >>> (is_happy adb)\n;; #t\n;; >>> (is_happy xyy)\n\
    ;; #f\n(define (is_happy s)\n  (cond\n    [(< (string-length s) 3) #f]\n    [(equal?\
    \ (string-ref s 0) (string-ref s 1)) #f]\n    [(equal? (string-ref s 1) (string-ref\
    \ s 2)) #f]\n    [else #t]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_happy))\n    (check-equal? (candidate \"a\") #f)\n\
    \    (check-equal? (candidate \"aa\") #f)\n    (check-equal? (candidate \"abcd\"\
    ) #t)\n    (check-equal? (candidate \"aabb\") #f)\n    (check-equal? (candidate\
    \ \"adb\") #t)\n    (check-equal? (candidate \"xyy\") #f)\n    (check-equal? (candidate\
    \ \"iopaxpoi\") #t)\n    (check-equal? (candidate \"iopaxioi\") #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpiw4rwkcz.rkt:38:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a string s.\n;; Your task is to check\
    \ if the string is haprkt or not.\n;; A string is haprkt if its length is at least\
    \ 3 and every 3 consecutive letters are distinct\n;; For example:\n;; >>> (is_happy\
    \ a)\n;; #f\n;; >>> (is_happy aa)\n;; #f\n;; >>> (is_happy abcd)\n;; #t\n;; >>>\
    \ (is_happy aabb)\n;; #f\n;; >>> (is_happy adb)\n;; #t\n;; >>> (is_happy xyy)\n\
    ;; #f\n(define (is_happy s)\n  (cond\n    [(< (string-length s) 3) #f]\n    [(equal?\
    \ (string-ref s 0) (string-ref s 1)) #f]\n    [(equal? (string-ref s 1) (string-ref\
    \ s 2)) #f]\n    [else #t]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_happy))\n    (check-equal? (candidate \"a\") #f)\n\
    \    (check-equal? (candidate \"aa\") #f)\n    (check-equal? (candidate \"abcd\"\
    ) #t)\n    (check-equal? (candidate \"aabb\") #f)\n    (check-equal? (candidate\
    \ \"adb\") #t)\n    (check-equal? (candidate \"xyy\") #f)\n    (check-equal? (candidate\
    \ \"iopaxpoi\") #t)\n    (check-equal? (candidate \"iopaxioi\") #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpoxhg_x2_.rkt:38:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a string s.\n;; Your task is to check\
    \ if the string is haprkt or not.\n;; A string is haprkt if its length is at least\
    \ 3 and every 3 consecutive letters are distinct\n;; For example:\n;; >>> (is_happy\
    \ a)\n;; #f\n;; >>> (is_happy aa)\n;; #f\n;; >>> (is_happy abcd)\n;; #t\n;; >>>\
    \ (is_happy aabb)\n;; #f\n;; >>> (is_happy adb)\n;; #t\n;; >>> (is_happy xyy)\n\
    ;; #f\n(define (is_happy s)\n  (cond\n    [(< (string-length s) 3) #f]\n    [(equal?\
    \ (string-ref s 0) (string-ref s 1)) #f]\n    [(equal? (string-ref s 1) (string-ref\
    \ s 2)) #f]\n    [else #t]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_happy))\n    (check-equal? (candidate \"a\") #f)\n\
    \    (check-equal? (candidate \"aa\") #f)\n    (check-equal? (candidate \"abcd\"\
    ) #t)\n    (check-equal? (candidate \"aabb\") #f)\n    (check-equal? (candidate\
    \ \"adb\") #t)\n    (check-equal? (candidate \"xyy\") #f)\n    (check-equal? (candidate\
    \ \"iopaxpoi\") #t)\n    (check-equal? (candidate \"iopaxioi\") #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp5ycuv604.rkt:38:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a string s.\n;; Your task is to check\
    \ if the string is haprkt or not.\n;; A string is haprkt if its length is at least\
    \ 3 and every 3 consecutive letters are distinct\n;; For example:\n;; >>> (is_happy\
    \ a)\n;; #f\n;; >>> (is_happy aa)\n;; #f\n;; >>> (is_happy abcd)\n;; #t\n;; >>>\
    \ (is_happy aabb)\n;; #f\n;; >>> (is_happy adb)\n;; #t\n;; >>> (is_happy xyy)\n\
    ;; #f\n(define (is_happy s)\n  (if (&lt; (string-length s) 3)\n      #f\n    \
    \  (let ([s (string-&gt;list s)])\n        (for/and ([i (in-range 0 (- (length\
    \ s) 2))])\n          (not (equal? (list-ref s i) (list-ref s (+ i 1))))))))\n\
    \n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate is_happy))\n\
    \    (check-equal? (candidate \"a\") #f)\n    (check-equal? (candidate \"aa\"\
    ) #f)\n    (check-equal? (candidate \"abcd\") #t)\n    (check-equal? (candidate\
    \ \"aabb\") #f)\n    (check-equal? (candidate \"adb\") #t)\n    (check-equal?\
    \ (candidate \"xyy\") #f)\n    (check-equal? (candidate \"iopaxpoi\") #t)\n  \
    \  (check-equal? (candidate \"iopaxioi\") #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp21jh17hl.rkt:24:62: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; You are given a string s.\n;; Your task is to check\
    \ if the string is haprkt or not.\n;; A string is haprkt if its length is at least\
    \ 3 and every 3 consecutive letters are distinct\n;; For example:\n;; >>> (is_happy\
    \ a)\n;; #f\n;; >>> (is_happy aa)\n;; #f\n;; >>> (is_happy abcd)\n;; #t\n;; >>>\
    \ (is_happy aabb)\n;; #f\n;; >>> (is_happy adb)\n;; #t\n;; >>> (is_happy xyy)\n\
    ;; #f\n(define (is_happy s)\n  (cond\n    [(< (string-length s) 3) #f]\n    [(equal?\
    \ (string-ref s 0) (string-ref s 1)) #f]\n    [(equal? (string-ref s 1) (string-ref\
    \ s 2)) #f]\n    [else #t]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_happy))\n    (check-equal? (candidate \"a\") #f)\n\
    \    (check-equal? (candidate \"aa\") #f)\n    (check-equal? (candidate \"abcd\"\
    ) #t)\n    (check-equal? (candidate \"aabb\") #f)\n    (check-equal? (candidate\
    \ \"adb\") #t)\n    (check-equal? (candidate \"xyy\") #f)\n    (check-equal? (candidate\
    \ \"iopaxpoi\") #t)\n    (check-equal? (candidate \"iopaxioi\") #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpnyfo17gs.rkt:38:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a string s.\n;; Your task is to check\
    \ if the string is haprkt or not.\n;; A string is haprkt if its length is at least\
    \ 3 and every 3 consecutive letters are distinct\n;; For example:\n;; >>> (is_happy\
    \ a)\n;; #f\n;; >>> (is_happy aa)\n;; #f\n;; >>> (is_happy abcd)\n;; #t\n;; >>>\
    \ (is_happy aabb)\n;; #f\n;; >>> (is_happy adb)\n;; #t\n;; >>> (is_happy xyy)\n\
    ;; #f\n(define (is_happy s)\n  (cond\n    [(< (string-length s) 3) #f]\n    [(not\
    \ (equal? (string-ref s 0) (string-ref s 1)))\n     (is_happy (substring s 1))]\n\
    \    [(not (equal? (string-ref s 0) (string-ref s 2)))\n     (is_happy (substring\
    \ s 1))]\n    [else #f]))\n\n(require rackunit)\n\n(define (test-humaneval) \n\
    \n  (let (( candidate is_happy))\n    (check-equal? (candidate \"a\") #f)\n  \
    \  (check-equal? (candidate \"aa\") #f)\n    (check-equal? (candidate \"abcd\"\
    ) #t)\n    (check-equal? (candidate \"aabb\") #f)\n    (check-equal? (candidate\
    \ \"adb\") #t)\n    (check-equal? (candidate \"xyy\") #f)\n    (check-equal? (candidate\
    \ \"iopaxpoi\") #t)\n    (check-equal? (candidate \"iopaxioi\") #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv8ylrcqk.rkt:35:4\n\
    actual:     #f\nexpected:   #t\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpv8ylrcqk.rkt:37:4\nactual:     #f\n\
    expected:   #t\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpv8ylrcqk.rkt:39:4\nactual:     #f\nexpected:\
    \   #t\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a string s.\n;; Your task is to check\
    \ if the string is haprkt or not.\n;; A string is haprkt if its length is at least\
    \ 3 and every 3 consecutive letters are distinct\n;; For example:\n;; >>> (is_happy\
    \ a)\n;; #f\n;; >>> (is_happy aa)\n;; #f\n;; >>> (is_happy abcd)\n;; #t\n;; >>>\
    \ (is_happy aabb)\n;; #f\n;; >>> (is_happy adb)\n;; #t\n;; >>> (is_happy xyy)\n\
    ;; #f\n(define (is_happy s)\n  (if (&lt; (string-length s) 3)\n      #f\n    \
    \  (let ([s (string-&gt;list s)])\n        (let loop ([s s])\n          (if (null?\
    \ s)\n              #t\n              (if (equal? (car s) (cadr s))\n        \
    \          #f\n                  (loop (cdr s))))))))\n</code>\n\n(require rackunit)\n\
    \n(define (test-humaneval) \n\n  (let (( candidate is_happy))\n    (check-equal?\
    \ (candidate \"a\") #f)\n    (check-equal? (candidate \"aa\") #f)\n    (check-equal?\
    \ (candidate \"abcd\") #t)\n    (check-equal? (candidate \"aabb\") #f)\n    (check-equal?\
    \ (candidate \"adb\") #t)\n    (check-equal? (candidate \"xyy\") #f)\n    (check-equal?\
    \ (candidate \"iopaxpoi\") #t)\n    (check-equal? (candidate \"iopaxioi\") #f)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmphnn5euj5.rkt:28:36: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: Exception
- program: "#lang racket\n\n;; You are given a string s.\n;; Your task is to check\
    \ if the string is haprkt or not.\n;; A string is haprkt if its length is at least\
    \ 3 and every 3 consecutive letters are distinct\n;; For example:\n;; >>> (is_happy\
    \ a)\n;; #f\n;; >>> (is_happy aa)\n;; #f\n;; >>> (is_happy abcd)\n;; #t\n;; >>>\
    \ (is_happy aabb)\n;; #f\n;; >>> (is_happy adb)\n;; #t\n;; >>> (is_happy xyy)\n\
    ;; #f\n(define (is_happy s)\n  (cond\n    [(< (string-length s) 3) #f]\n    [(equal?\
    \ (string-ref s 0) (string-ref s 1)) #f]\n    [(equal? (string-ref s 1) (string-ref\
    \ s 2)) #f]\n    [else #t]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_happy))\n    (check-equal? (candidate \"a\") #f)\n\
    \    (check-equal? (candidate \"aa\") #f)\n    (check-equal? (candidate \"abcd\"\
    ) #t)\n    (check-equal? (candidate \"aabb\") #f)\n    (check-equal? (candidate\
    \ \"adb\") #t)\n    (check-equal? (candidate \"xyy\") #f)\n    (check-equal? (candidate\
    \ \"iopaxpoi\") #t)\n    (check-equal? (candidate \"iopaxioi\") #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpe56gxpp0.rkt:38:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a string s.\n;; Your task is to check\
    \ if the string is haprkt or not.\n;; A string is haprkt if its length is at least\
    \ 3 and every 3 consecutive letters are distinct\n;; For example:\n;; >>> (is_happy\
    \ a)\n;; #f\n;; >>> (is_happy aa)\n;; #f\n;; >>> (is_happy abcd)\n;; #t\n;; >>>\
    \ (is_happy aabb)\n;; #f\n;; >>> (is_happy adb)\n;; #t\n;; >>> (is_happy xyy)\n\
    ;; #f\n(define (is_happy s)\n  (cond\n    [(< (string-length s) 3) #f]\n    [(equal?\
    \ (string-ref s 0) (string-ref s 1)) #f]\n    [(equal? (string-ref s 1) (string-ref\
    \ s 2)) #f]\n    [else #t]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_happy))\n    (check-equal? (candidate \"a\") #f)\n\
    \    (check-equal? (candidate \"aa\") #f)\n    (check-equal? (candidate \"abcd\"\
    ) #t)\n    (check-equal? (candidate \"aabb\") #f)\n    (check-equal? (candidate\
    \ \"adb\") #t)\n    (check-equal? (candidate \"xyy\") #f)\n    (check-equal? (candidate\
    \ \"iopaxpoi\") #t)\n    (check-equal? (candidate \"iopaxioi\") #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpv6bc5cky.rkt:38:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a string s.\n;; Your task is to check\
    \ if the string is haprkt or not.\n;; A string is haprkt if its length is at least\
    \ 3 and every 3 consecutive letters are distinct\n;; For example:\n;; >>> (is_happy\
    \ a)\n;; #f\n;; >>> (is_happy aa)\n;; #f\n;; >>> (is_happy abcd)\n;; #t\n;; >>>\
    \ (is_happy aabb)\n;; #f\n;; >>> (is_happy adb)\n;; #t\n;; >>> (is_happy xyy)\n\
    ;; #f\n(define (is_happy s)\n  (cond\n    [(< (string-length s) 3) #f]\n    [(equal?\
    \ (string-ref s 0) (string-ref s 1)) #f]\n    [(equal? (string-ref s 1) (string-ref\
    \ s 2)) #f]\n    [else #t]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_happy))\n    (check-equal? (candidate \"a\") #f)\n\
    \    (check-equal? (candidate \"aa\") #f)\n    (check-equal? (candidate \"abcd\"\
    ) #t)\n    (check-equal? (candidate \"aabb\") #f)\n    (check-equal? (candidate\
    \ \"adb\") #t)\n    (check-equal? (candidate \"xyy\") #f)\n    (check-equal? (candidate\
    \ \"iopaxpoi\") #t)\n    (check-equal? (candidate \"iopaxioi\") #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp55mcxv3l.rkt:38:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a string s.\n;; Your task is to check\
    \ if the string is haprkt or not.\n;; A string is haprkt if its length is at least\
    \ 3 and every 3 consecutive letters are distinct\n;; For example:\n;; >>> (is_happy\
    \ a)\n;; #f\n;; >>> (is_happy aa)\n;; #f\n;; >>> (is_happy abcd)\n;; #t\n;; >>>\
    \ (is_happy aabb)\n;; #f\n;; >>> (is_happy adb)\n;; #t\n;; >>> (is_happy xyy)\n\
    ;; #f\n(define (is_happy s)\n  (cond\n    [(< (string-length s) 3) #f]\n    [(equal?\
    \ (string-ref s 0) (string-ref s 1)) #f]\n    [(equal? (string-ref s 1) (string-ref\
    \ s 2)) #f]\n    [else #t]))\n\n(require rackunit)\n\n(define (test-humaneval)\
    \ \n\n  (let (( candidate is_happy))\n    (check-equal? (candidate \"a\") #f)\n\
    \    (check-equal? (candidate \"aa\") #f)\n    (check-equal? (candidate \"abcd\"\
    ) #t)\n    (check-equal? (candidate \"aabb\") #f)\n    (check-equal? (candidate\
    \ \"adb\") #t)\n    (check-equal? (candidate \"xyy\") #f)\n    (check-equal? (candidate\
    \ \"iopaxpoi\") #t)\n    (check-equal? (candidate \"iopaxioi\") #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmp0t0zplqm.rkt:38:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a string s.\n;; Your task is to check\
    \ if the string is haprkt or not.\n;; A string is haprkt if its length is at least\
    \ 3 and every 3 consecutive letters are distinct\n;; For example:\n;; >>> (is_happy\
    \ a)\n;; #f\n;; >>> (is_happy aa)\n;; #f\n;; >>> (is_happy abcd)\n;; #t\n;; >>>\
    \ (is_happy aabb)\n;; #f\n;; >>> (is_happy adb)\n;; #t\n;; >>> (is_happy xyy)\n\
    ;; #f\n(define (is_happy s)\n  (cond\n    [(< (string-length s) 3) #f]\n    [(and\
    \ (equal? (substring s 0 1) (substring s 1 2))\n          (equal? (substring s\
    \ 1 2) (substring s 2 3))) #f]\n    [else #t]))\n\n(require rackunit)\n\n(define\
    \ (test-humaneval) \n\n  (let (( candidate is_happy))\n    (check-equal? (candidate\
    \ \"a\") #f)\n    (check-equal? (candidate \"aa\") #f)\n    (check-equal? (candidate\
    \ \"abcd\") #t)\n    (check-equal? (candidate \"aabb\") #f)\n    (check-equal?\
    \ (candidate \"adb\") #t)\n    (check-equal? (candidate \"xyy\") #f)\n    (check-equal?\
    \ (candidate \"iopaxpoi\") #t)\n    (check-equal? (candidate \"iopaxioi\") #f)\n\
    ))\n\n(test-humaneval)"
  stdout: ''
  stderr: "--------------------\nFAILURE\nname:       check-equal?\nlocation:   /tmp/tmpdq0yw482.rkt:34:4\n\
    actual:     #t\nexpected:   #f\n--------------------\n--------------------\nFAILURE\n\
    name:       check-equal?\nlocation:   /tmp/tmpdq0yw482.rkt:36:4\nactual:     #t\n\
    expected:   #f\n--------------------\n--------------------\nFAILURE\nname:   \
    \    check-equal?\nlocation:   /tmp/tmpdq0yw482.rkt:38:4\nactual:     #t\nexpected:\
    \   #f\n--------------------\n"
  exit_code: 0
  status: Exception
- program: "#lang racket\n\n;; You are given a string s.\n;; Your task is to check\
    \ if the string is haprkt or not.\n;; A string is haprkt if its length is at least\
    \ 3 and every 3 consecutive letters are distinct\n;; For example:\n;; >>> (is_happy\
    \ a)\n;; #f\n;; >>> (is_happy aa)\n;; #f\n;; >>> (is_happy abcd)\n;; #t\n;; >>>\
    \ (is_happy aabb)\n;; #f\n;; >>> (is_happy adb)\n;; #t\n;; >>> (is_happy xyy)\n\
    ;; #f\n(define (is_happy s)\n  (if (&lt; (string-length s) 3)\n      #f\n    \
    \  (let ([s (string-&gt;list s)])\n        (for/and ([i (in-range 0 (- (length\
    \ s) 2))])\n          (not (equal? (list-ref s i) (list-ref s (+ i 1))))))))\n\
    </code>\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate\
    \ is_happy))\n    (check-equal? (candidate \"a\") #f)\n    (check-equal? (candidate\
    \ \"aa\") #f)\n    (check-equal? (candidate \"abcd\") #t)\n    (check-equal? (candidate\
    \ \"aabb\") #f)\n    (check-equal? (candidate \"adb\") #t)\n    (check-equal?\
    \ (candidate \"xyy\") #f)\n    (check-equal? (candidate \"iopaxpoi\") #t)\n  \
    \  (check-equal? (candidate \"iopaxioi\") #f)\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: "/tmp/tmp598keg59.rkt:24:62: read-syntax: missing `]` to close preceding\
    \ `[`, found instead `)`\n  context...:\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:186:17:\
    \ body\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/syntax/module-reader.rkt:183:2:\
    \ wrap-internal\n   /home/a.guha/repos/spack/opt/spack/linux-centos7-haswell/gcc-9.2.0/racket-8.3.0-k63hxj46zvzf4h4gps46prefkjkbgnmp/share/racket/collects/racket/../syntax/module-reader.rkt:67:9:\
    \ wrap-internal/wrapper\n"
  exit_code: 1
  status: Exception
