name: HumanEval_30_get_positive
language: rkt
results:
- program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ positive? l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list\
    \ 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list\
    \ 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n \
    \   (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ positive? l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list\
    \ 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list\
    \ 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n \
    \   (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ positive? l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list\
    \ 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list\
    \ 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n \
    \   (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ positive? l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list\
    \ 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list\
    \ 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n \
    \   (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ positive? l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list\
    \ 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list\
    \ 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n \
    \   (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ positive? l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list\
    \ 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list\
    \ 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n \
    \   (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ positive? l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list\
    \ 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list\
    \ 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n \
    \   (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ positive? l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list\
    \ 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list\
    \ 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n \
    \   (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ positive? l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list\
    \ 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list\
    \ 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n \
    \   (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ positive? l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list\
    \ 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list\
    \ 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n \
    \   (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ positive? l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list\
    \ 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list\
    \ 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n \
    \   (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ positive? l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list\
    \ 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list\
    \ 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n \
    \   (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ positive? l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list\
    \ 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list\
    \ 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n \
    \   (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ positive? l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list\
    \ 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list\
    \ 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n \
    \   (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ positive? l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list\
    \ 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list\
    \ 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n \
    \   (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ positive? l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list\
    \ 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list\
    \ 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n \
    \   (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ positive? l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list\
    \ 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list\
    \ 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n \
    \   (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ positive? l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list\
    \ 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list\
    \ 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n \
    \   (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ positive? l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list\
    \ 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list\
    \ 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n \
    \   (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
- program: "#lang racket\n\n;; Return only positive numbers in the list.\n;; >>> (get_positive\
    \ (list -1 2 -4 5 6))\n;; (list 2 5 6)\n;; >>> (get_positive (list 5 3 -5 2 -3\
    \ 3 9 0 123 1 -10))\n;; (list 5 3 2 3 9 123 1)\n(define (get_positive l)\n  (filter\
    \ positive? l))\n\n(require rackunit)\n\n(define (test-humaneval) \n\n  (let ((\
    \ candidate get_positive))\n    (check-equal? (candidate (list -1 -2 4 5 6)) (list\
    \ 4 5 6))\n    (check-equal? (candidate (list 5 3 -5 2 3 3 9 0 123 1 -10)) (list\
    \ 5 3 2 3 3 9 123 1))\n    (check-equal? (candidate (list -1 -2)) (list ))\n \
    \   (check-equal? (candidate (list )) (list ))\n))\n\n(test-humaneval)"
  stdout: ''
  stderr: ''
  exit_code: 0
  status: OK
