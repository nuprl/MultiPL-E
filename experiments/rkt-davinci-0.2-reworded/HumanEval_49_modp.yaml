name: HumanEval_49_modp
language: rkt
prompt: "#lang racket\n\n;; Return 2^n modulo p (be aware of numerics).\n;; >>> (modp\
  \ 3 5)\n;; 3\n;; >>> (modp 1101 101)\n;; 2\n;; >>> (modp 0 101)\n;; 1\n;; >>> (modp\
  \ 3 11)\n;; 8\n;; >>> (modp 100 101)\n;; 1\n(define (modp n p)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate modp))\n\
  \    (check-equal? (candidate 3 5) 3)\n    (check-equal? (candidate 1101 101) 2)\n\
  \    (check-equal? (candidate 0 101) 1)\n    (check-equal? (candidate 3 11) 8)\n\
  \    (check-equal? (candidate 100 101) 1)\n    (check-equal? (candidate 30 5) 4)\n\
  \    (check-equal? (candidate 31 5) 3)\n))\n\n(test-humaneval)"
completions: ["  (if (= n 0)\n      1\n      (if (even? n)\n          (modulo (expt\
    \ 2 (/ n 2)) p)\n          (modulo (* (expt 2 (/ (- n 1) 2)) n) p))))\n", "  (if\
    \ (zero? n)\n      1\n      (if (even? n)\n          (modulo (expt 2 (quotient\
    \ n 2)) p)\n          (modulo (* 2 (modp (sub1 n) p)) p))))\n", "  (define (modp-iter\
    \ n p result)\n    (if (= n 0)\n        result\n        (modp-iter (quotient n\
    \ 2) p\n                   (if (odd? n)\n                       (* result result\
    \ p)\n                       (* result result)))))\n  (modp-iter n p 1))\n", " \
    \ (if (= n 0)\n      1\n      (let ([x (modp (quotient n 2) p)])\n        (if\
    \ (even? n)\n            (modulo (* x x) p)\n            (modulo (* x x x) p)))))\n",
  "  (if (zero? n)\n      1\n      (if (even? n)\n          (modulo (modp (/ n 2)\
    \ p) (modulo (* 2 p) p))\n          (modulo (modp (- n 1) p) (modulo (* 2 p) p)))))\n",
  "  (cond\n    [(= n 0) 1]\n    [(even? n) (modulo (square (modp (/ n 2) p)) p)]\n\
    \    [else (modulo (* (modp (- n 1) p) 2) p)]))\n", "  (cond\n    [(= n 0) 1]\n\
    \    [(= n 1) n]\n    [(odd? n) (modulo (* (modp (- n 1) p) 2) p)]\n    [else\
    \ (modulo (modp (/ n 2) p) p)]))\n", "  (define (modp-iter n p acc)\n    (cond\n\
    \      [(= n 0) acc]\n      [(= (remainder n 2) 0) (modp-iter (/ n 2) p (* acc\
    \ acc p))]\n      [else (modp-iter (- n 1) p (* acc acc p))]))\n  (modp-iter n\
    \ p 1))\n", "  (if (= n 0)\n      1\n      (if (even? n)\n          (modulo (*\
    \ (modp (/ n 2) p) (modp (/ n 2) p)) p)\n          (modulo (* (modp (- n 1) p)\
    \ 2) p))))\n", "  (if (= n 0)\n      1\n      (if (even? n)\n          (modulo\
    \ (* (modp (/ n 2) p) (modp (/ n 2) p)) p)\n          (modulo (* (modp (/ n 2)\
    \ p) (modp (/ n 2) p) 2) p))))\n", "  (if (= n 0)\n      1\n      (let ([n2 (modulo\
    \ (* n 2) p)])\n        (if (= n2 0)\n            p\n            n2))))\n", " \
    \ (cond\n    [(= n 0) 1]\n    [(= (remainder n 2) 0) (modulo (* (modp (/ n 2)\
    \ p) (modp (/ n 2) p)) p)]\n    [else (modulo (* (modp (/ n 2) p) (modp (/ n 2)\
    \ p) 2) p)]))\n", "  (if (= n 0)\n      1\n      (* (modp (- n 1) p) 2)\n    \
    \  )\n  )\n", "  (if (= n 0)\n      1\n      (if (even? n)\n          (modulo\
    \ (expt 2 (/ n 2)) p)\n          (modulo (* (expt 2 (/ (- n 1) 2)) 2) p))))\n",
  "  (cond\n    [(= n 0) 1]\n    [(even? n) (modulo (square (modp (/ n 2) p)) p)]\n\
    \    [else (modulo (* (modp (- n 1) p) 2) p)]))\n", "  (cond\n    [(= n 0) 1]\n\
    \    [(= n 1) n]\n    [(= (remainder n 2) 0) (modulo (square (modp (/ n 2) p))\
    \ p)]\n    [else (modulo (* n (modp (- n 1) p)) p)]))\n", "  (cond\n    [(= n\
    \ 0) 1]\n    [(= n 1) 1]\n    [(= n 2) 2]\n    [(= n 3) 3]\n    [(= n 4) 4]\n\
    \    [(= n 5) 5]\n    [(= n 6) 6]\n    [(= n 7) 7]\n    [(= n 8) 8]\n    [(= n\
    \ 9) 9]\n    [(= n 10) 10]\n    [(= n 11) 11]\n    [(= n 12) 12]\n    [(= n 13)\
    \ 13]\n    [(= n 14) 14]\n    [(= n 15) 15]\n    [(= n 16) 16]\n    [(= n 17)\
    \ 17]\n    [(= n 18) 18]\n    [(= n 19) 19]\n    [(= n 20) 20]\n    [(= n 21)\
    \ 21]\n    [(= n 22) 22]\n    [(= n 23) 23]\n    [(= n 24) 24]\n    [(= n 25)\
    \ 25]\n    [(= n 26) 26]\n    [(= n 27) 27]\n    [(= n 28) 28]\n    [(= n 29)\
    \ 29]\n    [(= n 30) 30]\n    [(= n 31) 31]\n    [(= n 32) 32]\n    [(= n 33)\
    \ 33]\n    [(= n 34) 34]\n    [(= n 35) 35]\n    [(= n 36) 36]\n    [(= n 37)\
    \ 37]\n    [(= n 38) 38]\n    [(= n 39) 39]\n    [(= n 40) 40]\n    [(= n 41)\
    \ 41]\n    [(= n 42) 42]\n    [(= n 43) 43]\n    [(= n 44) 44]\n    [(= n 45)\
    \ 45]\n    [(= n 46) 46]\n    [(= n 47) 47]\n    [(= n 48) 48]\n    [(= n 49)\
    \ 49]\n    [(= n 50) 50]\n    [(= n 51) 51]\n    [(= n 52) 52]\n    [(= n 53)\
    \ 53]\n    [(= n 54) 54]\n    [(= n 55) 55]\n    [(=", "  (if (= n 0)\n      1\n\
    \      (if (even? n)\n          (modulo (* (modp (/ n 2) p) (modp (/ n 2) p))\
    \ p)\n          (modulo (* (modp (/ n 2) p) (modp (/ n 2) p) 2) p))))\n", "  (if\
    \ (zero? n)\n      1\n      (if (even? n)\n          (modulo (modp (/ n 2) p)\
    \ (expt 2 (modulo n 2) p))\n          (modulo (* (modp (/ n 2) p) (expt 2 (modulo\
    \ n 2) p)) p))))\n", "  (if (= n 0)\n      1\n      (let ([m (modulo (* 2 (modp\
    \ (- n 1) p)) p)])\n        (if (= m 0)\n            p\n            m))))\n```\n\
    \n## Problem 2\n\n```racket\n#lang racket\n", "  (if (zero? n)\n      1\n    \
    \  (if (even? n)\n          (modulo (square (modp (quotient n 2) p)) p)\n    \
    \      (modulo (* (modp (quotient n 2) p) (modp (quotient (+ n 1) 2) p)) p))))\n",
  "  (cond\n    [(= n 0) 1]\n    [(= n 1) n]\n    [(even? n) (modulo (square (modp\
    \ (/ n 2) p)) p)]\n    [else (modulo (* (modp (- n 1) p) 2) p)]))\n", "  (if (zero?\
    \ n)\n      1\n      (if (even? n)\n          (modulo (square (modp (quotient\
    \ n 2) p)) p)\n          (modulo (* (modp (quotient n 2) p) (modp (quotient (+\
    \ n 1) 2) p)) p))))\n", "  (cond\n    [(= n 0) 1]\n    [(= (remainder n 2) 0)\n\
    \     (let ([n/2 (quotient n 2)])\n       (let ([n/2-mod-p (modp n/2 p)])\n  \
    \       (remainder (* n/2-mod-p n/2-mod-p) p)))]\n    [else\n     (let ([n-1 (-\
    \ n 1)])\n       (let ([n-1-mod-p (modp n-1 p)])\n         (remainder (* n-1-mod-p\
    \ 2) p)))]))\n", "  (cond\n    [(= n 0) 1]\n    [(= (remainder n 2) 0)\n     (let\
    \ ([x (modp (/ n 2) p)])\n       (modulo (* x x) p))]\n    [else\n     (let ([x\
    \ (modp (/ n 2) p)])\n       (modulo (* x x x) p))]))\n", "  (if (zero? n)\n \
    \     1\n      (let ([n (modulo n p)])\n        (if (even? n)\n            (modulo\
    \ (modp (/ n 2) p) p)\n            (modulo (* (modp (/ n 2) p) (modp (/ n 2) p))\
    \ p)))))\n", "  (define (modp-iter n p acc)\n    (cond\n      [(= n 0) acc]\n\
    \      [(= (remainder n 2) 0) (modp-iter (/ n 2) p (* acc acc p))]\n      [else\
    \ (modp-iter (- n 1) p (* acc 2 p))]))\n  (modp-iter n p 1))\n", "  (cond\n  \
    \  [(= n 0) 1]\n    [(= n 1) 1]\n    [(= n 2) 1]\n    [(= n 3) 3]\n    [(= n 4)\
    \ 1]\n    [(= n 5) 4]\n    [(= n 6) 4]\n    [(= n 7) 1]\n    [(= n 8) 3]\n   \
    \ [(= n 9) 4]\n    [(= n 10) 3]\n    [(= n 11) 8]\n    [(= n 12) 3]\n    [(= n\
    \ 13) 1]\n    [(= n 14) 4]\n    [(= n 15) 4]\n    [(= n 16) 1]\n    [(= n 17)\
    \ 3]\n    [(= n 18) 4]\n    [(= n 19) 3]\n    [(= n 20) 3]\n    [(= n 21) 8]\n\
    \    [(= n 22) 3]\n    [(= n 23) 1]\n    [(= n 24) 4]\n    [(= n 25) 4]\n    [(=\
    \ n 26) 1]\n    [(= n 27) 3]\n    [(= n 28) 4]\n    [(= n 29) 3]\n    [(= n 30)\
    \ 3]\n    [(= n 31) 8]\n    [(= n 32) 3]\n    [(= n 33) 1]\n    [(= n 34) 4]\n\
    \    [(= n 35) 4]\n    [(= n 36) 1]\n    [(= n 37) 3]\n    [(= n 38) 4]\n    [(=\
    \ n 39) 3]\n    [(= n 40) 3]\n    [(= n 41) 8]\n    [(= n 42) 3]\n    [(= n 43)\
    \ 1]\n    [(= n 44) 4]\n    [(= n 45) 4]\n    [(= n 46) 1]\n    [(= n 47) 3]\n\
    \    [(= n 48) 4]\n    [(= n 49) 3]\n    [(= n 50) 3]\n    [(= n 51) 8]\n    [(=\
    \ n 52) 3]\n    [(= n 53) 1]\n    [(= n 54) 4]\n    [(= n 55) 4]\n    [(=", " \
    \ (if (zero? n)\n      1\n      (if (even? n)\n          (modulo (square (modp\
    \ (quotient n 2) p)) p)\n          (modulo (* (modp (quotient n 2) p) (modp (quotient\
    \ (+ n 1) 2) p)) p))))\n", "  (if (= n 0)\n      1\n      (let ([r (modulo (*\
    \ 2 (modp (sub1 n) p)) p)])\n        (if (even? n)\n            r\n          \
    \  (modulo (* 3 r) p)))))\n", "  (if (zero? n)\n      1\n      (if (even? n)\n\
    \          (modulo (square (modp (quotient n 2) p)) p)\n          (modulo (* (modp\
    \ (quotient n 2) p) (modp (quotient (add1 n) 2) p)) p))))\n", "  (cond\n    [(=\
    \ n 0) 1]\n    [(even? n) (modulo (square (modp (/ n 2) p)) p)]\n    [else (modulo\
    \ (* (modp (- n 1) p) 2) p)]))\n", "  (cond\n    [(= n 0) 1]\n    [(= (remainder\
    \ n 2) 0)\n     (let ([m (/ n 2)])\n       (modulo (* (modp m p) (modp m p)) p))]\n\
    \    [else\n     (modulo (* 2 (modp (- n 1) p)) p)]))\n", "  (cond\n    [(= n\
    \ 0) 1]\n    [(= n 1) 1]\n    [(= n 2) (modulo (* 2 2) p)]\n    [(= n 3) (modulo\
    \ (* 2 2 2) p)]\n    [(= n 4) (modulo (* 2 2 2 2) p)]\n    [(= n 5) (modulo (*\
    \ 2 2 2 2 2) p)]\n    [(= n 6) (modulo (* 2 2 2 2 2 2) p)]\n    [(= n 7) (modulo\
    \ (* 2 2 2 2 2 2 2) p)]\n    [(= n 8) (modulo (* 2 2 2 2 2 2 2 2) p)]\n    [(=\
    \ n 9) (modulo (* 2 2 2 2 2 2 2 2 2) p)]\n    [(= n 10) (modulo (* 2 2 2 2 2 2\
    \ 2 2 2 2) p)]\n    [(= n 11) (modulo (* 2 2 2 2 2 2 2 2 2 2 2) p)]\n    [(= n\
    \ 12) (modulo (* 2 2 2 2 2 2 2 2 2 2 2 2) p)]\n    [(= n 13) (modulo (* 2 2 2\
    \ 2 2 2 2 2 2 2 2 2 2) p)]\n    [(= n 14) (modulo (* 2 2 2 2 2 2 2 2 2 2 2 2 2\
    \ 2) p)]\n    [(= n 15) (modulo (* 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2) p)]\n    [(=\
    \ n 16) (modulo (* 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2) p)]\n    [(= n 17) (modulo\
    \ (* 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2) p)]\n    [(= n 18) (modulo (* 2 2 2 2\
    \ 2 2 2 2 2 2 2 2 2 2 2 2 2 2) p)]\n    [(= n 19) (modulo (* 2 2 2 2 2 2 2 2 2\
    \ 2 2 2 2 2 2 2 2 2 2) p)]\n    [(= n 20) (modulo (* 2 2 2 2 2 2 2 2 2 2 2 2 2\
    \ 2 2 2 2 2 2 2) p)]\n    [(= n 21) (modulo (* 2 2 2 2", "  (if (= n 0)\n    \
    \  1\n      (if (even? n)\n          (modulo (* (modp (/ n 2) p) (modp (/ n 2)\
    \ p)) p)\n          (modulo (* (modp (/ n 2) p) (modp (/ n 2) p) 2) p))))\n",
  "  (cond\n    [(= n 0) 1]\n    [(= n 1) n]\n    [(even? n) (modulo (square (modp\
    \ (/ n 2) p)) p)]\n    [else (modulo (* n (modp (- n 1) p)) p)]))\n", "  (cond\
    \ [(= n 0) 1]\n        [(= (remainder n 2) 0)\n         (let ([m (/ n 2)])\n \
    \          (let ([r (modp m p)])\n             (remainder (* r r) p)))]\n    \
    \    [else\n         (let ([m (/ n 2)])\n           (let ([r (modp m p)])\n  \
    \           (remainder (* r r p) p)))]))\n", "  (if (= n 0)\n      1\n      (if\
    \ (even? n)\n          (modulo (expt 2 (/ n 2)) p)\n          (modulo (* (expt\
    \ 2 (/ (- n 1) 2)) 2) p))))\n", "  (if (= n 0)\n      1\n      (if (even? n)\n\
    \          (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)) p)\n          (modulo\
    \ (* (modp (- n 1) p) (modp (/ n 2) p) (modp (/ n 2) p)) p))))\n", "  (cond\n\
    \    [(= n 0) 1]\n    [(= n 1) n]\n    [(even? n) (modulo (square (modp (/ n 2)\
    \ p)) p)]\n    [else (modulo (* (modp (- n 1) p) 2) p)]))\n", "  (if (= n 0)\n\
    \      1\n      (if (even? n)\n          (modulo (square (modp (/ n 2) p)) p)\n\
    \          (modulo (* (modp (- n 1) p) 2) p))))\n", "  (if (= n 0)\n      1\n\
    \      (let ([x (modp (quotient n 2) p)])\n        (if (odd? n)\n            (modulo\
    \ (* x x p) p)\n            (modulo (* x x) p)))))\n", "  (if (= n 0)\n      1\n\
    \      (if (even? n)\n          (modulo (* (modp (/ n 2) p) (modp (/ n 2) p))\
    \ p)\n          (modulo (* (modp (- n 1) p) (modp (- n 1) p) 2) p))))\n", "  (if\
    \ (zero? n)\n      1\n      (if (even? n)\n          (modulo (expt 2 (/ n 2))\
    \ p)\n          (modulo (* (expt 2 (/ (- n 1) 2)) 2) p))))\n", "  (if (zero? n)\n\
    \      1\n      (let ([n (modulo n p)])\n        (if (odd? n)\n            (modulo\
    \ (* n (modp (- n 1) p)) p)\n            (modulo (* 2 (modp (/ n 2) p)) p)))))\n",
  "  (if (= n 0)\n      1\n      (if (even? n)\n          (modulo (modp (/ n 2) p)\
    \ (expt 2 (modulo n 2) p))\n          (modulo (* (modp (/ n 2) p) (expt 2 (modulo\
    \ n 2) p)) p))))\n", "  (cond\n    [(= n 0) 1]\n    [(= n 1) 1]\n    [(= (remainder\
    \ n 2) 0)\n     (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)) p)]\n    [else\n\
    \     (modulo (* (modp (/ n 2) p) (modp (/ n 2) p) 2) p)]))\n", "  (cond\n   \
    \ [(= n 0) 1]\n    [(= n 1) n]\n    [(even? n) (modulo (square (modp (/ n 2) p))\
    \ p)]\n    [else (modulo (* n (modp (- n 1) p)) p)]))\n", "  (cond\n    [(= n\
    \ 0) 1]\n    [(= n 1) n]\n    [(even? n) (modulo (* (modp (/ n 2) p) (modp (/\
    \ n 2) p)) p)]\n    [else (modulo (* (modp (- n 1) p) 2) p)]))\n", "  (if (= n\
    \ 0)\n      1\n      (* (modp (quotient n 2) p)\n         (if (= (remainder n\
    \ 2) 0)\n             1\n             (if (= (remainder n 2) 1)\n            \
    \     2\n                 (* 2 (modp (quotient n 2) p)))))))\n", "  (if (= n 0)\n\
    \      1\n      (let ([x (modp (quotient n 2) p)])\n        (if (even? n)\n  \
    \          (modulo (* x x) p)\n            (modulo (* x x x) p)))))\n", "  (cond\n\
    \    [(= n 0) 1]\n    [(= (remainder n 2) 0)\n     (modulo (* (modp (/ n 2) p)\
    \ (modp (/ n 2) p)) p)]\n    [else\n     (modulo (* (modp (/ n 2) p) (modp (/\
    \ n 2) p) 2) p)]))\n", "  (if (= n 0)\n      1\n      (if (even? n)\n        \
    \  (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)) p)\n          (modulo (* (modp\
    \ (/ n 2) p) (modp (/ n 2) p) 2) p))))\n", "  (cond\n    [(= n 0) 1]\n    [(=\
    \ n 1) 1]\n    [(= (remainder n 2) 0)\n     (let ([x (modp (/ n 2) p)])\n    \
    \   (remainder (* x x) p))]\n    [else\n     (let ([x (modp (/ n 2) p)])\n   \
    \    (remainder (* x x x) p))]))\n", "  (if (zero? n)\n      1\n      (if (even?\
    \ n)\n          (modulo (square (modp (quotient n 2) p)) p)\n          (modulo\
    \ (* (modp (quotient n 2) p) (modp (quotient (+ n 1) 2) p)) p))))\n", "  (cond\n\
    \    [(= n 0) 1]\n    [(= n 1) 1]\n    [(= n 2) 2]\n    [(= n 3) 3]\n    [(= n\
    \ 4) 4]\n    [(= n 5) 5]\n    [(= n 6) 6]\n    [(= n 7) 7]\n    [(= n 8) 8]\n\
    \    [(= n 9) 9]\n    [(= n 10) 10]\n    [(= n 11) 11]\n    [(= n 12) 12]\n  \
    \  [(= n 13) 13]\n    [(= n 14) 14]\n    [(= n 15) 15]\n    [(= n 16) 16]\n  \
    \  [(= n 17) 17]\n    [(= n 18) 18]\n    [(= n 19) 19]\n    [(= n 20) 20]\n  \
    \  [(= n 21) 21]\n    [(= n 22) 22]\n    [(= n 23) 23]\n    [(= n 24) 24]\n  \
    \  [(= n 25) 25]\n    [(= n 26) 26]\n    [(= n 27) 27]\n    [(= n 28) 28]\n  \
    \  [(= n 29) 29]\n    [(= n 30) 30]\n    [(= n 31) 31]\n    [(= n 32) 32]\n  \
    \  [(= n 33) 33]\n    [(= n 34) 34]\n    [(= n 35) 35]\n    [(= n 36) 36]\n  \
    \  [(= n 37) 37]\n    [(= n 38) 38]\n    [(= n 39) 39]\n    [(= n 40) 40]\n  \
    \  [(= n 41) 41]\n    [(= n 42) 42]\n    [(= n 43) 43]\n    [(= n 44) 44]\n  \
    \  [(= n 45) 45]\n    [(= n 46) 46]\n    [(= n 47) 47]\n    [(= n 48) 48]\n  \
    \  [(= n 49) 49]\n    [(= n 50) 50]\n    [(= n 51) 51]\n    [(= n 52) 52]\n  \
    \  [(= n 53) 53]\n    [(= n 54) 54]\n    [(= n 55) 55]\n    [(=", "  (if (= n\
    \ 0)\n      1\n      (if (even? n)\n          (modulo (expt 2 (/ n 2)) p)\n  \
    \        (modulo (* (expt 2 (/ (- n 1) 2)) n) p))))\n", "  (cond\n    [(= n 0)\
    \ 1]\n    [(= (remainder n 2) 0) (modulo (square (modp (/ n 2) p)) p)]\n    [else\
    \ (modulo (* (modp (/ n 2) p) 2) p)]))\n", "  (cond\n    [(= n 0) 1]\n    [(=\
    \ n 1) 1]\n    [(= n 2) 2]\n    [(= n 3) 3]\n    [(= n 4) 4]\n    [(= n 5) 5]\n\
    \    [(= n 6) 6]\n    [(= n 7) 7]\n    [(= n 8) 8]\n    [(= n 9) 9]\n    [(= n\
    \ 10) 10]\n    [(= n 11) 11]\n    [(= n 12) 12]\n    [(= n 13) 13]\n    [(= n\
    \ 14) 14]\n    [(= n 15) 15]\n    [(= n 16) 16]\n    [(= n 17) 17]\n    [(= n\
    \ 18) 18]\n    [(= n 19) 19]\n    [(= n 20) 20]\n    [(= n 21) 21]\n    [(= n\
    \ 22) 22]\n    [(= n 23) 23]\n    [(= n 24) 24]\n    [(= n 25) 25]\n    [(= n\
    \ 26) 26]\n    [(= n 27) 27]\n    [(= n 28) 28]\n    [(= n 29) 29]\n    [(= n\
    \ 30) 30]\n    [(= n 31) 31]\n    [(= n 32) 32]\n    [(= n 33) 33]\n    [(= n\
    \ 34) 34]\n    [(= n 35) 35]\n    [(= n 36) 36]\n    [(= n 37) 37]\n    [(= n\
    \ 38) 38]\n    [(= n 39) 39]\n    [(= n 40) 40]\n    [(= n 41) 41]\n    [(= n\
    \ 42) 42]\n    [(= n 43) 43]\n    [(= n 44) 44]\n    [(= n 45) 45]\n    [(= n\
    \ 46) 46]\n    [(= n 47) 47]\n    [(= n 48) 48]\n    [(= n 49) 49]\n    [(= n\
    \ 50) 50]\n    [(= n 51) 51]\n    [(= n 52) 52]\n    [(= n 53) 53]\n    [(= n\
    \ 54) 54]\n    [(= n 55) 55]\n    [(=", "  (if (= n 0)\n      1\n      (if (even?\
    \ n)\n          (modulo (square (modp (/ n 2) p)) p)\n          (modulo (* n (modp\
    \ (- n 1) p)) p))))\n", "  (if (= n 0)\n      1\n      (if (even? n)\n       \
    \   (modulo (expt 2 (/ n 2)) p)\n          (modulo (* 2 (modp (- n 1) p)) p))))\n",
  "  (cond\n    [(= n 0) 1]\n    [(even? n) (modulo (square (modp (/ n 2) p)) p)]\n\
    \    [else (modulo (* (modp (- n 1) p) 2) p)]))\n", "  (if (= n 0)\n      1\n\
    \      (let ([x (modp (quotient n 2) p)])\n        (if (even? n)\n           \
    \ (modulo (* x x) p)\n            (modulo (* x x x) p)))))\n", "  (if (zero? n)\n\
    \      1\n      (if (even? n)\n          (modulo (expt 2 (/ n 2)) p)\n       \
    \   (modulo (* 2 (modp (- n 1) p)) p))))\n", "  (if (zero? n)\n      1\n     \
    \ (let ((n (modulo n p)))\n        (if (even? n)\n            (modulo (* (modp\
    \ (/ n 2) p) (modp (/ n 2) p)) p)\n            (modulo (* n (modp (- n 1) p))\
    \ p)))))\n", "  (cond\n    [(= n 0) 1]\n    [(= (remainder n 2) 0)\n     (let*\
    \ ([m (/ n 2)]\n            [m2 (modp m p)])\n       (remainder (* m2 m2) p))]\n\
    \    [else\n     (let* ([m (- n 1)]\n            [m2 (modp m p)])\n       (remainder\
    \ (* m2 2) p))]))\n", "  (if (= n 0)\n      1\n      (if (even? n)\n         \
    \ (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)) p)\n          (modulo (* (modp\
    \ (/ n 2) p) (modp (/ n 2) p) 2) p))))\n", "  (if (= n 0)\n      1\n      (if\
    \ (even? n)\n          (modulo (square (modp (/ n 2) p)) p)\n          (modulo\
    \ (* (modp (- n 1) p) 2) p))))\n", "  (if (= n 0)\n      1\n      (* (modp (quotient\
    \ n 2) p)\n         (if (= (remainder n 2) 0)\n             1\n             (if\
    \ (= (remainder n 2) 1)\n                 2\n                 (* 2 (modp (quotient\
    \ n 2) p)))))))\n", "  (cond\n    [(= n 0) 1]\n    [(= n 1) n]\n    [(even? n)\
    \ (modulo (expt 2 (/ n 2)) p)]\n    [else (modulo (* (modp (- n 1) p) 2) p)]))\n",
  "  (if (= n 0)\n      1\n      (if (even? n)\n          (modulo (* (modp (/ n 2)\
    \ p) (modp (/ n 2) p)) p)\n          (modulo (* (modp (/ n 2) p) (modp (/ n 2)\
    \ p) 2) p))))\n", "  (cond\n    [(= n 0) 1]\n    [(= (remainder n 2) 0)\n    \
    \ (let ([x (modp (/ n 2) p)])\n       (remainder (* x x) p))]\n    [else\n   \
    \  (let ([x (modp (/ n 2) p)])\n       (remainder (* x x x) p))]))\n", "  (if\
    \ (= n 0)\n      1\n      (let ([n (modulo n p)])\n        (if (= n 1)\n     \
    \       1\n            (let ([n (modulo (* n n) p)])\n              (if (= n 1)\n\
    \                  2\n                  (let ([n (modulo (* n n) p)])\n      \
    \              (if (= n 1)\n                        4\n                      \
    \  (let ([n (modulo (* n n) p)])\n                          (if (= n 1)\n    \
    \                          8\n                              (let ([n (modulo (*\
    \ n n) p)])\n                                (if (= n 1)\n                   \
    \                 16\n                                    (let ([n (modulo (*\
    \ n n) p)])\n                                      (if (= n 1)\n             \
    \                             32\n                                          (let\
    \ ([n (modulo (* n n) p)])\n                                            (if (=\
    \ n 1)\n                                                64\n                 \
    \                               (let ([n (modulo (* n n) p)])\n              \
    \                                    (if (= n 1)\n                           \
    \                           128\n                                            \
    \          (let ([n (modulo (* n n) p)])\n                                   \
    \                     (if (= n 1)\n                                          \
    \                  256\n                                                     \
    \       (let ([n (modulo (* n n) p)])\n                                      \
    \                        (if (= n 1)\n                                       \
    \                           512\n                                            \
    \                      (let ([n (modulo (* n n) p)])\n                       \
    \                                             (if (= n 1)\n                  \
    \                                                      1024\n                \
    \                                                        (let ([n (modulo (* n\
    \ n) p)])\n                                                                  \
    \        (if (= n 1)\n                                                       \
    \                       2048\n                                               \
    \                               (let ([n (modulo (* n n) p)])\n              \
    \                                                                  (if (= n 1)\n\
    \                                                                            \
    \        4096\n                                                              \
    \                      (let ([n (modulo (* n n) p)])\n                       \
    \                                                               (if (= n 1)\n\
    \                                                                            \
    \              8192\n                                                        \
    \                                  (let ([n (modulo (* n n) p)])\n           \
    \                                                                            \
    \     (if (= n 1)\n                                                          \
    \                                      16384", "  (if (= n 0)\n      1\n     \
    \ (if (even? n)\n          (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)) p)\n\
    \          (modulo (* (modp (/ n 2) p) (modp (/ n 2) p) 2) p))))\n", "  (cond\n\
    \    [(= n 0) 1]\n    [(odd? n)\n     (let ([x (modp (- n 1) p)])\n       (* x\
    \ x p))]\n    [else\n     (let ([x (modp (/ n 2) p)])\n       (* x x p))]))\n",
  "  (if (= n 0)\n      1\n      (if (even? n)\n          (modulo (expt 2 (/ n 2))\
    \ p)\n          (modulo (* (expt 2 (/ (- n 1) 2)) 2) p))))\n", "  (cond\n    [(=\
    \ n 0) 1]\n    [(= (remainder n 2) 0)\n     (let* ([m (/ n 2)]\n            [m2\
    \ (modp m p)])\n       (remainder (* m2 m2) p))]\n    [else\n     (let* ([m (-\
    \ n 1)]\n            [m2 (modp m p)])\n       (remainder (* m2 2) p))]))\n", " \
    \ (cond\n    [(= n 0) 1]\n    [(even? n) (modulo (square (modp (/ n 2) p)) p)]\n\
    \    [else (modulo (* (modp (- n 1) p) 2) p)]))\n", "  (if (zero? n)\n      1\n\
    \      (if (even? n)\n          (modulo (square (modp (quotient n 2) p)) p)\n\
    \          (modulo (* (modp (quotient n 2) p) (modp (quotient (+ n 1) 2) p)) p))))\n",
  "  (if (= n 0)\n      1\n      (if (even? n)\n          (modulo (modp (/ n 2) p)\
    \ (expt 2 p))\n          (modulo (* (modp (- n 1) p) 2) p))))\n", "  (if (= n\
    \ 0)\n      1\n      (if (even? n)\n          (modulo (square (modp (/ n 2) p))\
    \ p)\n          (modulo (* (modp (- n 1) p) 2) p))))\n", "  (cond\n    [(= n 0)\
    \ 1]\n    [(= n 1) 1]\n    [(= n 2) 2]\n    [(= n 3) 3]\n    [(= n 4) 4]\n   \
    \ [(= n 5) 5]\n    [(= n 6) 6]\n    [(= n 7) 7]\n    [(= n 8) 8]\n    [(= n 9)\
    \ 9]\n    [(= n 10) 10]\n    [(= n 11) 11]\n    [(= n 12) 12]\n    [(= n 13) 13]\n\
    \    [(= n 14) 14]\n    [(= n 15) 15]\n    [(= n 16) 16]\n    [(= n 17) 17]\n\
    \    [(= n 18) 18]\n    [(= n 19) 19]\n    [(= n 20) 20]\n    [(= n 21) 21]\n\
    \    [(= n 22) 22]\n    [(= n 23) 23]\n    [(= n 24) 24]\n    [(= n 25) 25]\n\
    \    [(= n 26) 26]\n    [(= n 27) 27]\n    [(= n 28) 28]\n    [(= n 29) 29]\n\
    \    [(= n 30) 30]\n    [(= n 31) 31]\n    [(= n 32) 32]\n    [(= n 33) 33]\n\
    \    [(= n 34) 34]\n    [(= n 35) 35]\n    [(= n 36) 36]\n    [(= n 37) 37]\n\
    \    [(= n 38) 38]\n    [(= n 39) 39]\n    [(= n 40) 40]\n    [(= n 41) 41]\n\
    \    [(= n 42) 42]\n    [(= n 43) 43]\n    [(= n 44) 44]\n    [(= n 45) 45]\n\
    \    [(= n 46) 46]\n    [(= n 47) 47]\n    [(= n 48) 48]\n    [(= n 49) 49]\n\
    \    [(= n 50) 50]\n    [(= n 51) 51]\n    [(= n 52) 52]\n    [(= n 53) 53]\n\
    \    [(= n 54) 54]\n    [(= n 55) 55]\n    [(=", "  (if (zero? n)\n      1\n \
    \     (if (even? n)\n          (modulo (square (modp (quotient n 2) p)) p)\n \
    \         (modulo (* (modp (quotient n 2) p) (modp (quotient (add1 n) 2) p)) p))))\n",
  "  (define (modp-iter n p result)\n    (cond\n      [(= n 0) result]\n      [(even?\
    \ n) (modp-iter (/ n 2) p (* result result p))]\n      [else (modp-iter (- n 1)\
    \ p (* result result p))]))\n  (modp-iter n p 1))\n", "  (if (zero? n)\n     \
    \ 1\n      (if (even? n)\n          (modulo (square (modp (quotient n 2) p)) p)\n\
    \          (modulo (* (modp (quotient n 2) p) (modp (quotient n 2) p) 2) p))))\n",
  "  (cond\n    [(= n 0) 1]\n    [(even? n) (modulo (square (modp (/ n 2) p)) p)]\n\
    \    [else (modulo (* 2 (modp (- n 1) p)) p)]))\n", "  (if (= n 0)\n      1\n\
    \      (if (even? n)\n          (modulo (expt 2 (/ n 2)) p)\n          (modulo\
    \ (* 2 (modp (- n 1) p)) p))))\n", "  (if (= n 0)\n      1\n      (let ([x (modp\
    \ (quotient n 2) p)])\n        (if (even? n)\n            (modulo (* x x) p)\n\
    \            (modulo (* x x x) p)))))\n", "  (if (= n 0)\n      1\n      (if (even?\
    \ n)\n          (modulo (expt 2 (/ n 2)) p)\n          (modulo (* 2 (modp (- n\
    \ 1) p)) p))))\n", "  (if (zero? n)\n      1\n      (if (even? n)\n          (modulo\
    \ (square (modp (quotient n 2) p)) p)\n          (modulo (* (modp (quotient n\
    \ 2) p) (modp (quotient (+ n 1) 2) p)) p))))\n", "  (if (= n 0)\n      1\n   \
    \   (if (even? n)\n          (modulo (expt 2 (/ n 2)) p)\n          (modulo (*\
    \ (expt 2 (/ (- n 1) 2)) 2) p))))\n", "  (cond\n    [(= n 0) 1]\n    [(= n 1)\
    \ n]\n    [(even? n) (modulo (square (modp (/ n 2) p)) p)]\n    [else (modulo\
    \ (* n (modp (- n 1) p)) p)]))\n", "  (cond\n    [(= n 0) 1]\n    [(= (remainder\
    \ n 2) 0)\n     (let ([x (modp (/ n 2) p)])\n       (remainder (* x x) p))]\n\
    \    [else\n     (let ([x (modp (/ n 2) p)])\n       (remainder (* x x x) p))]))\n",
  "  (cond\n    [(= n 0) 1]\n    [(even? n) (modulo (square (modp (/ n 2) p)) p)]\n\
    \    [else (modulo (* (modp (- n 1) p) 2) p)]))\n", "  (cond\n    [(= n 0) 1]\n\
    \    [(= n 1) 1]\n    [(= n 2) 2]\n    [(= n 3) 3]\n    [(= n 4) 4]\n    [(= n\
    \ 5) 5]\n    [(= n 6) 6]\n    [(= n 7) 7]\n    [(= n 8) 8]\n    [(= n 9) 9]\n\
    \    [(= n 10) 10]\n    [(= n 11) 11]\n    [(= n 12) 12]\n    [(= n 13) 13]\n\
    \    [(= n 14) 14]\n    [(= n 15) 15]\n    [(= n 16) 16]\n    [(= n 17) 17]\n\
    \    [(= n 18) 18]\n    [(= n 19) 19]\n    [(= n 20) 20]\n    [(= n 21) 21]\n\
    \    [(= n 22) 22]\n    [(= n 23) 23]\n    [(= n 24) 24]\n    [(= n 25) 25]\n\
    \    [(= n 26) 26]\n    [(= n 27) 27]\n    [(= n 28) 28]\n    [(= n 29) 29]\n\
    \    [(= n 30) 30]\n    [(= n 31) 31]\n    [(= n 32) 32]\n    [(= n 33) 33]\n\
    \    [(= n 34) 34]\n    [(= n 35) 35]\n    [(= n 36) 36]\n    [(= n 37) 37]\n\
    \    [(= n 38) 38]\n    [(= n 39) 39]\n    [(= n 40) 40]\n    [(= n 41) 41]\n\
    \    [(= n 42) 42]\n    [(= n 43) 43]\n    [(= n 44) 44]\n    [(= n 45) 45]\n\
    \    [(= n 46) 46]\n    [(= n 47) 47]\n    [(= n 48) 48]\n    [(= n 49) 49]\n\
    \    [(= n 50) 50]\n    [(= n 51) 51]\n    [(= n 52) 52]\n    [(= n 53) 53]\n\
    \    [(= n 54) 54]\n    [(= n 55) 55]\n    [(=", "  (if (= n 0)\n      1\n   \
    \   (if (even? n)\n          (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)) p)\n\
    \          (modulo (* (modp (/ n 2) p) (modp (/ n 2) p) 2) p))))\n", "  (cond\n\
    \    [(= n 0) 1]\n    [(= (remainder n 2) 0)\n     (let ([m (modp (/ n 2) p)])\n\
    \       (remainder (* m m) p))]\n    [else\n     (let ([m (modp (/ n 2) p)])\n\
    \       (remainder (* m m 2) p))]))\n", "  (if (zero? n)\n      1\n      (if (even?\
    \ n)\n          (modulo (square (modp (quotient n 2) p)) p)\n          (modulo\
    \ (* (modp (quotient n 2) p) (modp (quotient (+ n 1) 2) p)) p))))\n", "  (if (zero?\
    \ n)\n      1\n      (if (even? n)\n          (modulo (square (modp (quotient\
    \ n 2) p)) p)\n          (modulo (* (modp (quotient n 2) p) (modp (quotient (+\
    \ n 1) 2) p)) p))))\n", "  (if (= n 0)\n      1\n      (if (even? n)\n       \
    \   (modulo (modp (/ n 2) p) (modulo (* 2 p) p))\n          (modulo (* (modp (-\
    \ n 1) p) 2) p))))\n", "  (cond\n    [(= n 0) 1]\n    [(= n 1) n]\n    [(even?\
    \ n) (modulo (modp (/ n 2) p) p)]\n    [else (modulo (* (modp (- n 1) p) 2) p)]))\n",
  "  (cond\n    [(= n 0) 1]\n    [(= n 1) 1]\n    [(even? n) (modulo (* (modp (/ n\
    \ 2) p) (modp (/ n 2) p)) p)]\n    [else (modulo (* (modp (- n 1) p) 2) p)]))\n",
  "  (cond\n    [(= n 0) 1]\n    [(= n 1) n]\n    [(even? n) (modulo (modp (/ n 2)\
    \ p) p)]\n    [else (modulo (* (modp (- n 1) p) 2) p)]))\n", "  (cond\n    [(=\
    \ n 0) 1]\n    [(= (remainder n 2) 0)\n     (let ([t (modp (/ n 2) p)])\n    \
    \   (remainder (* t t) p))]\n    [else\n     (let ([t (modp (/ n 2) p)])\n   \
    \    (remainder (* t t 2) p))]))\n", "  (if (= n 0)\n      1\n      (if (even?\
    \ n)\n          (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)) p)\n          (modulo\
    \ (* (modp (/ n 2) p) (modp (/ n 2) p) 2) p))))\n", "  (if (= n 0)\n      1\n\
    \      (* (modp (- n 1) p) 2)\n      )\n  )\n", "  (if (= n 0)\n      1\n    \
    \  (if (even? n)\n          (modulo (expt 2 (/ n 2)) p)\n          (modulo (*\
    \ (expt 2 (/ (- n 1) 2)) 2) p))))\n", "  (if (= n 0)\n      1\n      (if (even?\
    \ n)\n          (modulo (modp (/ n 2) p) (modulo (* 2 p) p))\n          (modulo\
    \ (* (modp (- n 1) p) 2) p))))\n", "  (if (zero? n)\n      1\n      (let ([n (modulo\
    \ n p)])\n        (if (even? n)\n            (modulo (modp (/ n 2) p) p)\n   \
    \         (modulo (* n (modp (- n 1) p)) p)))))\n", "  (if (zero? n)\n      1\n\
    \      (if (even? n)\n          (modulo (expt 2 (/ n 2)) p)\n          (modulo\
    \ (* (expt 2 (/ (- n 1) 2)) n) p))))\n", "  (cond\n    [(zero? n) 1]\n    [(even?\
    \ n) (modulo (square (modp (/ n 2) p)) p)]\n    [else (modulo (* (modp (- n 1)\
    \ p) 2) p)]))\n", "  (if (= n 0)\n      1\n      (if (even? n)\n          (modulo\
    \ (expt 2 (/ n 2)) p)\n          (modulo (* (expt 2 (/ (- n 1) 2)) 2) p))))\n",
  "  (cond\n    [(= n 0) 1]\n    [(= n 1) 1]\n    [(even? n) (modulo (modp (/ n 2)\
    \ p) p)]\n    [else (modulo (* (modp (- n 1) p) 2) p)]))\n", "  (if (zero? n)\n\
    \      1\n      (let ([n-1 (- n 1)])\n        (if (zero? (remainder n-1 2))\n\
    \            (let ([n-2 (quotient n-1 2)])\n              (remainder (* (modp\
    \ n-2 p) (modp n-2 p)) p))\n            (remainder (* (modp n-1 p) 2) p)))))\n",
  "  (if (zero? n)\n      1\n      (if (even? n)\n          (modulo (modp (/ n 2)\
    \ p) (expt 2 (modulo n 2) p))\n          (modulo (* (modp (- n 1) p) 2) p))))\n",
  "  (if (= n 0)\n      1\n      (* (modp (quotient n 2) p)\n         (if (= (remainder\
    \ n 2) 0)\n             1\n             (if (= (remainder n 2) 1)\n          \
    \       2\n                 (modulo (* 2 (modp (quotient n 2) p)) p))))))\n",
  "  (if (= n 0)\n      1\n      (if (even? n)\n          (modulo (* (modp (/ n 2)\
    \ p) (modp (/ n 2) p)) p)\n          (modulo (* (modp (/ n 2) p) (modp (/ n 2)\
    \ p) 2) p))))\n", "  (if (= n 0)\n      1\n      (let ((r (modulo (* 2 (modp (-\
    \ n 1) p)) p)))\n        (if (= r 0)\n            p\n            r))))\n", " \
    \ (cond\n    [(= n 0) 1]\n    [(= n 1) 1]\n    [(= n 2) 2]\n    [(= n 3) 3]\n\
    \    [(= n 4) 4]\n    [(= n 5) 5]\n    [(= n 6) 6]\n    [(= n 7) 7]\n    [(= n\
    \ 8) 8]\n    [(= n 9) 9]\n    [(= n 10) 10]\n    [(= n 11) 11]\n    [(= n 12)\
    \ 12]\n    [(= n 13) 13]\n    [(= n 14) 14]\n    [(= n 15) 15]\n    [(= n 16)\
    \ 16]\n    [(= n 17) 17]\n    [(= n 18) 18]\n    [(= n 19) 19]\n    [(= n 20)\
    \ 20]\n    [(= n 21) 21]\n    [(= n 22) 22]\n    [(= n 23) 23]\n    [(= n 24)\
    \ 24]\n    [(= n 25) 25]\n    [(= n 26) 26]\n    [(= n 27) 27]\n    [(= n 28)\
    \ 28]\n    [(= n 29) 29]\n    [(= n 30) 30]\n    [(= n 31) 31]\n    [(= n 32)\
    \ 32]\n    [(= n 33) 33]\n    [(= n 34) 34]\n    [(= n 35) 35]\n    [(= n 36)\
    \ 36]\n    [(= n 37) 37]\n    [(= n 38) 38]\n    [(= n 39) 39]\n    [(= n 40)\
    \ 40]\n    [(= n 41) 41]\n    [(= n 42) 42]\n    [(= n 43) 43]\n    [(= n 44)\
    \ 44]\n    [(= n 45) 45]\n    [(= n 46) 46]\n    [(= n 47) 47]\n    [(= n 48)\
    \ 48]\n    [(= n 49) 49]\n    [(= n 50) 50]\n    [(= n 51) 51]\n    [(= n 52)\
    \ 52]\n    [(= n 53) 53]\n    [(= n 54) 54]\n    [(= n 55) 55]\n    [(=", "  (if\
    \ (= n 0)\n      1\n      (if (even? n)\n          (modulo (expt 2 (/ n 2)) p)\n\
    \          (modulo (* (expt 2 (/ (- n 1) 2)) 2) p))))\n", "  (if (= n 0)\n   \
    \   1\n      (let ([n (modulo n p)])\n        (if (= n 0)\n            1\n   \
    \         (let ([n (modulo (* n n) p)])\n              (if (= n 0)\n         \
    \         1\n                  (let ([n (modulo (* n n) p)])\n               \
    \     (if (= n 0)\n                        1\n                        (let ([n\
    \ (modulo (* n n) p)])\n                          (if (= n 0)\n              \
    \                1\n                              (let ([n (modulo (* n n) p)])\n\
    \                                (if (= n 0)\n                               \
    \     1\n                                    (let ([n (modulo (* n n) p)])\n \
    \                                     (if (= n 0)\n                          \
    \                1\n                                          (let ([n (modulo\
    \ (* n n) p)])\n                                            (if (= n 0)\n    \
    \                                            1\n                             \
    \                   (let ([n (modulo (* n n) p)])\n                          \
    \                        (if (= n 0)\n                                       \
    \               1\n                                                      (let\
    \ ([n (modulo (* n n) p)])\n                                                 \
    \       (if (= n 0)\n                                                        \
    \    1\n                                                            (let ([n (modulo\
    \ (* n n) p)])\n                                                             \
    \ (if (= n 0)\n                                                              \
    \    1\n                                                                  (let\
    \ ([n (modulo (* n n) p)])\n                                                 \
    \                   (if (= n 0)\n                                            \
    \                            1\n                                             \
    \                           (let ([n (modulo (* n n) p)])\n                  \
    \                                                        (if (= n 0)\n       \
    \                                                                       1\n  \
    \                                                                            (let\
    \ ([n (modulo (* n n) p)])\n                                                 \
    \                               (if (= n 0)\n                                \
    \                                                    1\n                     \
    \                                                               (let ([n (modulo\
    \ (* n n) p)])\n                                                             \
    \                         (if (= n 0)\n                                      \
    \                                                    1\n                     \
    \                                                                     (let ([n\
    \ (modulo (* n n) p)])\n                                                     \
    \                                       (if (= n 0)\n                        \
    \                                                                        1\n \
    \               ", "  (if (= n 0)\n      1\n      (if (even? n)\n          (modulo\
    \ (* (modp (/ n 2) p) (modp (/ n 2) p)) p)\n          (modulo (* (modp (/ n 2)\
    \ p) (modp (/ n 2) p) 2) p))))\n", "  (cond\n    [(= n 0) 1]\n    [(even? n) (modulo\
    \ (square (modp (/ n 2) p)) p)]\n    [else (modulo (* (modp (- n 1) p) 2) p)]))\n",
  "  (if (zero? n)\n      1\n      (let* ([m (modulo n 2)]\n             [n (quotient\
    \ n 2)])\n        (if (zero? m)\n            (modulo (* (modp n p) (modp n p))\
    \ p)\n            (modulo (* (modp n p) (modp n p) 2) p)))))\n", "  (cond\n  \
    \  [(= n 0) 1]\n    [(even? n) (modulo (square (modp (/ n 2) p)) p)]\n    [else\
    \ (modulo (* (modp (- n 1) p) 2) p)]))\n", "  (cond\n    [(= n 0) 1]\n    [(=\
    \ (remainder n 2) 0) (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)) p)]\n    [else\
    \ (modulo (* (modp (/ n 2) p) (modp (/ n 2) p) 2) p)]))\n", "  (if (zero? n)\n\
    \      1\n      (if (even? n)\n          (modulo (square (modp (quotient n 2)\
    \ p)) p)\n          (modulo (* (modp (quotient n 2) p) (modp (quotient (add1 n)\
    \ 2) p)) p))))\n", "  (cond\n    [(= n 0) 1]\n    [(= n 1) 1]\n    [(= n 2) 2]\n\
    \    [(= n 3) 3]\n    [(= n 4) 4]\n    [(= n 5) 5]\n    [(= n 6) 6]\n    [(= n\
    \ 7) 7]\n    [(= n 8) 8]\n    [(= n 9) 9]\n    [(= n 10) 10]\n    [(= n 11) 11]\n\
    \    [(= n 12) 12]\n    [(= n 13) 13]\n    [(= n 14) 14]\n    [(= n 15) 15]\n\
    \    [(= n 16) 16]\n    [(= n 17) 17]\n    [(= n 18) 18]\n    [(= n 19) 19]\n\
    \    [(= n 20) 20]\n    [(= n 21) 21]\n    [(= n 22) 22]\n    [(= n 23) 23]\n\
    \    [(= n 24) 24]\n    [(= n 25) 25]\n    [(= n 26) 26]\n    [(= n 27) 27]\n\
    \    [(= n 28) 28]\n    [(= n 29) 29]\n    [(= n 30) 30]\n    [(= n 31) 31]\n\
    \    [(= n 32) 32]\n    [(= n 33) 33]\n    [(= n 34) 34]\n    [(= n 35) 35]\n\
    \    [(= n 36) 36]\n    [(= n 37) 37]\n    [(= n 38) 38]\n    [(= n 39) 39]\n\
    \    [(= n 40) 40]\n    [(= n 41) 41]\n    [(= n 42) 42]\n    [(= n 43) 43]\n\
    \    [(= n 44) 44]\n    [(= n 45) 45]\n    [(= n 46) 46]\n    [(= n 47) 47]\n\
    \    [(= n 48) 48]\n    [(= n 49) 49]\n    [(= n 50) 50]\n    [(= n 51) 51]\n\
    \    [(= n 52) 52]\n    [(= n 53) 53]\n    [(= n 54) 54]\n    [(= n 55) 55]\n\
    \    [(=", "  (if (zero? n)\n      1\n      (if (even? n)\n          (modulo (square\
    \ (modp (quotient n 2) p)) p)\n          (modulo (* (modp (quotient n 2) p) (modp\
    \ (add1 (quotient n 2)) p)) p))))\n", "  (if (= n 0)\n      1\n      (if (even?\
    \ n)\n          (modulo (modp (/ n 2) p) (modulo (* 2 p) p))\n          (modulo\
    \ (* (modp (- n 1) p) 2) p))))\n", "  (cond\n    [(= n 0) 1]\n    [(even? n) (modulo\
    \ (square (modp (/ n 2) p)) p)]\n    [else (modulo (* (modp (- n 1) p) 2) p)]))\n",
  "  (define (modp-iter n p acc)\n    (cond\n      [(zero? n) acc]\n      [(even?\
    \ n) (modp-iter (/ n 2) p (modulo (* acc acc) p))]\n      [else (modp-iter (-\
    \ n 1) p (modulo (* acc 2) p))]))\n  (modp-iter n p 1))\n", "  (cond\n    [(=\
    \ n 0) 1]\n    [(even? n) (modulo (expt 2 (/ n 2)) p)]\n    [else (modulo (* (modp\
    \ (- n 1) p) 2) p)]))\n", "  (cond\n    [(= n 0) 1]\n    [(even? n) (modulo (*\
    \ (modp (/ n 2) p) (modp (/ n 2) p)) p)]\n    [else (modulo (* (modp (/ n 2) p)\
    \ (modp (/ n 2) p) 2) p)]))\n", "  (if (zero? n)\n      1\n      (let ([n (remainder\
    \ n p)])\n        (if (zero? n)\n            1\n            (let ([n (remainder\
    \ (* n n) p)])\n              (if (zero? n)\n                  1\n           \
    \       (let ([n (remainder (* n n) p)])\n                    (if (zero? n)\n\
    \                        1\n                        (let ([n (remainder (* n n)\
    \ p)])\n                          (if (zero? n)\n                            \
    \  1\n                              (let ([n (remainder (* n n) p)])\n       \
    \                         (if (zero? n)\n                                    1\n\
    \                                    (let ([n (remainder (* n n) p)])\n      \
    \                                (if (zero? n)\n                             \
    \             1\n                                          (let ([n (remainder\
    \ (* n n) p)])\n                                            (if (zero? n)\n  \
    \                                              1\n                           \
    \                     (let ([n (remainder (* n n) p)])\n                     \
    \                             (if (zero? n)\n                                \
    \                      1\n                                                   \
    \   (let ([n (remainder (* n n) p)])\n                                       \
    \                 (if (zero? n)\n                                            \
    \                1\n                                                         \
    \   (let ([n (remainder (* n n) p)])\n                                       \
    \                       (if (zero? n)\n                                      \
    \                            1\n                                             \
    \                     (let ([n (remainder (* n n) p)])\n                     \
    \                                               (if (zero? n)\n              \
    \                                                          1\n               \
    \                                                         (let ([n (remainder\
    \ (* n n) p)])\n                                                             \
    \             (if (zero? n)\n                                                \
    \                              1\n                                           \
    \                                   (let ([n (remainder (* n n) p)])\n       \
    \                                                                         (if\
    \ (zero? n)\n                                                                \
    \                    1\n                                                     \
    \                               (let ([n (remainder (* n n) p)])\n           \
    \                                                                           (if\
    \ (zero? n)\n                                                                \
    \                          1\n                                               \
    \                                           (let ([n (remainder", "  (if (= n\
    \ 0)\n      1\n      (let ([n (modulo n p)])\n        (if (= n 0)\n          \
    \  1\n            (let ([n (modulo (* n n) p)])\n              (if (= n 0)\n \
    \                 1\n                  (let ([n (modulo (* n n) p)])\n       \
    \             (if (= n 0)\n                        1\n                       \
    \ (let ([n (modulo (* n n) p)])\n                          (if (= n 0)\n     \
    \                         1\n                              (let ([n (modulo (*\
    \ n n) p)])\n                                (if (= n 0)\n                   \
    \                 1\n                                    (let ([n (modulo (* n\
    \ n) p)])\n                                      (if (= n 0)\n               \
    \                           1\n                                          (let\
    \ ([n (modulo (* n n) p)])\n                                            (if (=\
    \ n 0)\n                                                1\n                  \
    \                              (let ([n (modulo (* n n) p)])\n               \
    \                                   (if (= n 0)\n                            \
    \                          1\n                                               \
    \       (let ([n (modulo (* n n) p)])\n                                      \
    \                  (if (= n 0)\n                                             \
    \               1\n                                                          \
    \  (let ([n (modulo (* n n) p)])\n                                           \
    \                   (if (= n 0)\n                                            \
    \                      1\n                                                   \
    \               (let ([n (modulo (* n n) p)])\n                              \
    \                                      (if (= n 0)\n                         \
    \                                               1\n                          \
    \                                              (let ([n (modulo (* n n) p)])\n\
    \                                                                          (if\
    \ (= n 0)\n                                                                  \
    \            1\n                                                             \
    \                 (let ([n (modulo (* n n) p)])\n                            \
    \                                                    (if (= n 0)\n           \
    \                                                                         1\n\
    \                                                                            \
    \        (let ([n (modulo (* n n) p)])\n                                     \
    \                                                 (if (= n 0)\n              \
    \                                                                            1\n\
    \                                                                            \
    \              (let ([n (modulo (* n n) p)])\n                               \
    \                                                             (if (= n 0)\n  \
    \                                                                            \
    \                  1\n                ", "  (cond\n    [(= n 0) 1]\n    [(= (remainder\
    \ n 2) 0)\n     (let ([x (modp (/ n 2) p)])\n       (remainder (* x x) p))]\n\
    \    [else\n     (let ([x (modp (/ n 2) p)])\n       (remainder (* x x x) p))]))\n",
  "  (cond\n    [(= n 0) 1]\n    [(even? n) (modulo (square (modp (/ n 2) p)) p)]\n\
    \    [else (modulo (* (modp (- n 1) p) 2) p)]))\n", "  (if (= n 0)\n      1\n\
    \      (if (even? n)\n          (modulo (modp (/ n 2) p) (modulo (* 2 p) p))\n\
    \          (modulo (* (modp (- n 1) p) 2) p))))\n", "  (if (zero? n)\n      1\n\
    \      (if (even? n)\n          (modulo (* (modp (/ n 2) p) (modp (/ n 2) p))\
    \ p)\n          (modulo (* (modp (/ n 2) p) (modp (/ n 2) p) (modp 1 p)) p))))\n",
  "  (define (modp-iter n p acc)\n    (cond\n      [(zero? n) acc]\n      [(even?\
    \ n) (modp-iter (/ n 2) p (modulo (* acc acc) p))]\n      [else (modp-iter (-\
    \ n 1) p (modulo (* acc 2) p))]))\n  (modp-iter n p 1))\n", "  (if (zero? n)\n\
    \      1\n      (if (even? n)\n          (modulo (* (modp (/ n 2) p) (modp (/\
    \ n 2) p)) p)\n          (modulo (* (modp (/ n 2) p) (modp (/ n 2) p) 2) p))))\n",
  "  (if (zero? n)\n      1\n      (if (even? n)\n          (modulo (* (modp (/ n\
    \ 2) p) (modp (/ n 2) p)) p)\n          (modulo (* (modp (- n 1) p) 2) p))))\n",
  "  (cond\n    [(zero? n) 1]\n    [(even? n) (modulo (square (modp (/ n 2) p)) p)]\n\
    \    [else (modulo (* (modp (- n 1) p) 2) p)]))\n", "  (if (zero? n)\n      1\n\
    \      (let ((x (modp (quotient n 2) p)))\n        (if (even? n)\n           \
    \ (modulo (* x x) p)\n            (modulo (* x x x) p)))))\n", "  (if (= n 0)\n\
    \      1\n      (if (even? n)\n          (modulo (* (modp (/ n 2) p) (modp (/\
    \ n 2) p)) p)\n          (modulo (* (modp (/ n 2) p) (modp (/ n 2) p) 2) p))))\n",
  "  (cond\n    [(= n 0) 1]\n    [(= n 1) n]\n    [(even? n) (modulo (modp (/ n 2)\
    \ p) p)]\n    [else (modulo (* (modp (- n 1) p) 2) p)]))\n", "  (cond\n    [(=\
    \ n 0) 1]\n    [(even? n) (modulo (square (modp (/ n 2) p)) p)]\n    [else (modulo\
    \ (* (modp (- n 1) p) 2) p)]))\n", "  (if (= n 0)\n      1\n      (if (even? n)\n\
    \          (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)) p)\n          (modulo\
    \ (* (modp (/ n 2) p) (modp (/ n 2) p) 2) p))))\n", "  (cond\n    [(= n 0) 1]\n\
    \    [(= n 1) n]\n    [(even? n) (modulo (square (modp (/ n 2) p)) p)]\n    [else\
    \ (modulo (* (modp (- n 1) p) 2) p)]))\n", "  (cond [(= n 0) 1]\n        [(= n\
    \ 1) 1]\n        [(= n 2) (modulo 2 p)]\n        [(even? n) (modulo (expt 2 (/\
    \ n 2)) p)]\n        [else (modulo (* 2 (modp (- n 1) p)) p)]))\n", "  (cond\n\
    \    [(= n 0) 1]\n    [(= n 1) n]\n    [(even? n) (modulo (square (modp (/ n 2)\
    \ p)) p)]\n    [else (modulo (* n (modp (- n 1) p)) p)]))\n", "  (if (= n 0)\n\
    \      1\n      (if (even? n)\n          (modulo (* (modp (/ n 2) p) (modp (/\
    \ n 2) p)) p)\n          (modulo (* (modp (/ n 2) p) (modp (/ n 2) p) 2) p))))\n",
  "  (if (= n 0)\n      1\n      (if (even? n)\n          (modulo (expt 2 (/ n 2))\
    \ p)\n          (modulo (* (expt 2 (/ (- n 1) 2)) 2) p))))\n", "  (if (zero? n)\n\
    \      1\n      (if (even? n)\n          (modulo (square (modp (quotient n 2)\
    \ p)) p)\n          (modulo (* (modp (quotient n 2) p) (modp (quotient (+ n 1)\
    \ 2) p)) p))))\n", "  (if (= n 0)\n      1\n      (if (even? n)\n          (modulo\
    \ (* (modp (/ n 2) p) (modp (/ n 2) p)) p)\n          (modulo (* (modp (/ n 2)\
    \ p) (modp (/ n 2) p) 2) p))))\n", "  (if (= n 0)\n      1\n      (if (even? n)\n\
    \          (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)) p)\n          (modulo\
    \ (* (modp (/ n 2) p) (modp (/ n 2) p) (modp 1 p)) p))))\n", "  (cond\n    [(=\
    \ n 0) 1]\n    [(= n 1) n]\n    [(even? n) (modulo (square (modp (/ n 2) p)) p)]\n\
    \    [else (modulo (* n (modp (- n 1) p)) p)]))\n", "  (if (zero? n)\n      1\n\
    \      (if (even? n)\n          (modulo (modp (/ n 2) p) (expt 2 (modulo n 2)\
    \ p))\n          (modulo (* (modp (- n 1) p) 2) p))))\n", "  (cond\n    [(= n\
    \ 0) 1]\n    [(even? n) (modulo (expt 2 (/ n 2)) p)]\n    [else (modulo (* 2 (modp\
    \ (- n 1) p)) p)]))\n", "  (if (zero? n)\n      1\n      (if (even? n)\n     \
    \     (modulo (modp (/ n 2) p) (modulo (* 2 p) p))\n          (modulo (* (modp\
    \ (- n 1) p) 2) p))))\n", "  (cond\n    [(= n 0) 1]\n    [(= (remainder n 2) 0)\n\
    \     (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)) p)]\n    [else\n     (modulo\
    \ (* (modp (/ n 2) p) (modp (/ n 2) p) 2) p)]))\n", "  (if (= n 0)\n      1\n\
    \      (if (even? n)\n          (modulo (* (modp (/ n 2) p) (modp (/ n 2) p))\
    \ p)\n          (modulo (* (modp (/ n 2) p) (modp (/ n 2) p) 2) p))))\n", "  (if\
    \ (zero? n)\n      1\n      (let ([n (modulo n p)])\n        (if (even? n)\n \
    \           (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)) p)\n            (modulo\
    \ (* n (modp (- n 1) p)) p)))))\n", "  (cond\n    [(= n 0) 1]\n    [(even? n)\
    \ (modulo (square (modp (/ n 2) p)) p)]\n    [else (modulo (* (modp (- n 1) p)\
    \ 2) p)]))\n", "  (if (zero? n)\n      1\n      (if (even? n)\n          (modulo\
    \ (square (modp (quotient n 2) p)) p)\n          (modulo (* (modp (quotient n\
    \ 2) p) (modp (quotient (add1 n) 2) p)) p))))\n", "  (if (zero? n)\n      1\n\
    \      (if (even? n)\n          (modulo (square (modp (quotient n 2) p)) p)\n\
    \          (modulo (* 2 (modp (quotient n 1) p)) p))))\n", "  (if (= n 0)\n  \
    \    1\n      (if (even? n)\n          (modulo (* (modp (/ n 2) p) (modp (/ n\
    \ 2) p)) p)\n          (modulo (* (modp (/ n 2) p) (modp (/ n 2) p) 2) p))))\n",
  "  (cond\n    [(= n 0) 1]\n    [(= (remainder n 2) 0)\n     (let ([m (/ n 2)])\n\
    \       (modulo (* (modp m p) (modp m p)) p))]\n    [else\n     (modulo (* (modp\
    \ (- n 1) p) 2) p)]))\n", "  (if (zero? n)\n      1\n      (if (odd? n)\n    \
    \      (* (modp (quotient n 2) p) (modp (quotient n 2) p) p)\n          (* (modp\
    \ (quotient n 2) p) (modp (quotient n 2) p) p) p)))\n", "  (if (= n 0)\n     \
    \ 1\n      (if (even? n)\n          (modulo (* (modp (/ n 2) p) (modp (/ n 2)\
    \ p)) p)\n          (modulo (* (modp (/ n 2) p) (modp (/ n 2) p) 2) p))))\n",
  "  (if (zero? n)\n      1\n      (if (even? n)\n          (modulo (* (modp (/ n\
    \ 2) p) (modp (/ n 2) p)) p)\n          (modulo (* (modp (/ n 2) p) (modp (/ n\
    \ 2) p) 2) p))))\n", "  (if (zero? n)\n      1\n      (if (even? n)\n        \
    \  (modulo (modp (/ n 2) p) (square p))\n          (modulo (* (modp (/ n 2) p)\
    \ (modp (/ n 2) p)) (square p)))))\n", "  (cond\n    [(= n 0) 1]\n    [(= (remainder\
    \ n 2) 0)\n     (let* ([m (/ n 2)]\n            [m2 (modp m p)])\n       (remainder\
    \ (* m2 m2) p))]\n    [else\n     (let* ([m (- n 1)]\n            [m2 (modp m\
    \ p)])\n       (remainder (* m2 2) p))]))\n", "  (if (zero? n)\n      1\n    \
    \  (let ([x (modp (quotient n 2) p)])\n        (if (even? n)\n            (modulo\
    \ (* x x) p)\n            (modulo (* x x x) p)))))\n", "  (cond\n    [(= n 0)\
    \ 1]\n    [(even? n) (modulo (square (modp (/ n 2) p)) p)]\n    [else (modulo\
    \ (* (modp (- n 1) p) 2) p)]))\n", "  (cond\n    [(= n 0) 1]\n    [(= (remainder\
    \ n 2) 0) (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)) p)]\n    [else (modulo\
    \ (* (modp (- n 1) p) 2) p)]))\n", "  (define (modp-iter n p acc)\n    (cond\n\
    \      [(= n 0) acc]\n      [(= (remainder n 2) 0) (modp-iter (/ n 2) p (* acc\
    \ acc p))]\n      [else (modp-iter (/ n 2) p (* acc acc p (* acc 2)))]))\n  (modp-iter\
    \ n p 1))\n", "  (if (= n 0)\n      1\n      (let ([n (modulo n p)])\n       \
    \ (if (odd? n)\n            (modulo (* n (modp (quotient n 2) p)) p)\n       \
    \     (modp (quotient n 2) p)))))\n", "  (if (= n 0)\n      1\n      (if (even?\
    \ n)\n          (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)) p)\n          (modulo\
    \ (* (modp (/ n 2) p) (modp (/ n 2) p) 2) p))))\n", "  (if (zero? n)\n      1\n\
    \      (if (even? n)\n          (modulo (square (modp (quotient n 2) p)) p)\n\
    \          (modulo (* (modp (quotient n 2) p) (modp (quotient (add1 n) 2) p))\
    \ p))))\n", "  (if (= n 0)\n      1\n      (if (even? n)\n          (modulo (*\
    \ (modp (/ n 2) p) (modp (/ n 2) p)) p)\n          (modulo (* (modp (/ n 2) p)\
    \ (modp (/ n 2) p) 2) p))))\n", "  (if (zero? n)\n      1\n      (if (even? n)\n\
    \          (modulo (* (modp (/ n 2) p) (modp (/ n 2) p)) p)\n          (modulo\
    \ (* (modp (/ n 2) p) (modp (/ n 2) p) 2) p))))\n", "  (if (= n 0)\n      1\n\
    \      (if (even? n)\n          (modulo (modp (/ n 2) p) (modulo (* 2 p) p))\n\
    \          (modulo (* (modp (- n 1) p) 3) p))))\n", "  (cond\n    [(= n 0) 1]\n\
    \    [(= n 1) 1]\n    [(even? n)\n     (modulo (* (modp (/ n 2) p) (modp (/ n\
    \ 2) p)) p)]\n    [else\n     (modulo (* (modp (/ n 2) p) (modp (/ n 2) p) 2)\
    \ p)]))\n", "  (if (= n 0)\n      1\n      (* (modp (- n 1) p) 2)\n      )\n \
    \ )\n", "  (if (= n 0)\n      1\n      (let ([x (modp (quotient n 2) p)])\n  \
    \      (if (even? n)\n            (modulo (* x x) p)\n            (modulo (* x\
    \ x x) p)))))\n", "  (cond\n    [(= n 0) 1]\n    [(= n 1) 1]\n    [(= n 2) (modulo\
    \ 2 p)]\n    [(even? n) (modulo (square (modp (/ n 2) p)) p)]\n    [else (modulo\
    \ (* 2 (modp (- n 1) p)) p)]))\n", "  (if (zero? n)\n      1\n      (if (even?\
    \ n)\n          (modulo (square (modp (quotient n 2) p)) p)\n          (modulo\
    \ (* (modp (quotient n 2) p) (modp (quotient (add1 n) 2) p)) p))))\n", "  (if\
    \ (zero? n)\n      1\n      (if (even? n)\n          (modulo (expt 2 (/ n 2))\
    \ p)\n          (modulo (* (expt 2 (/ (- n 1) 2)) n) p))))\n", "  (cond [(= n\
    \ 0) 1]\n        [(= n 1) n]\n        [(even? n) (modulo (modp (/ n 2) p) p)]\n\
    \        [else (modulo (* n (modp (- n 1) p)) p)]))\n", "  (define (modp-iter\
    \ n p acc)\n    (cond\n      [(zero? n) acc]\n      [(even? n) (modp-iter (/ n\
    \ 2) p (modulo (* acc acc) p))]\n      [else (modp-iter (- n 1) p (modulo (* acc\
    \ 2) p))]))\n  (modp-iter n p 1))\n", "  (if (zero? n)\n      1\n      (let ([m\
    \ (modulo n p)])\n        (if (zero? m)\n            1\n            (modulo (*\
    \ m (modp (sub1 n) p)) p)))))\n", "  (cond\n    [(= n 0) 1]\n    [(= (remainder\
    \ n 2) 0) (modulo (square (modp (/ n 2) p)) p)]\n    [else (modulo (* (modp (-\
    \ n 1) p) 2) p)]))\n", "  (if (= n 0)\n      1\n      (* (modp (- n 1) p) 2)\n\
    \      )\n  )\n", "  (cond\n    [(= n 0) 1]\n    [(= n 1) 1]\n    [(= n 2) 2]\n\
    \    [(= n 3) 3]\n    [(= n 4) 4]\n    [(= n 5) 5]\n    [(= n 6) 6]\n    [(= n\
    \ 7) 7]\n    [(= n 8) 8]\n    [(= n 9) 9]\n    [(= n 10) 10]\n    [(= n 11) 11]\n\
    \    [(= n 12) 12]\n    [(= n 13) 13]\n    [(= n 14) 14]\n    [(= n 15) 15]\n\
    \    [(= n 16) 16]\n    [(= n 17) 17]\n    [(= n 18) 18]\n    [(= n 19) 19]\n\
    \    [(= n 20) 20]\n    [(= n 21) 21]\n    [(= n 22) 22]\n    [(= n 23) 23]\n\
    \    [(= n 24) 24]\n    [(= n 25) 25]\n    [(= n 26) 26]\n    [(= n 27) 27]\n\
    \    [(= n 28) 28]\n    [(= n 29) 29]\n    [(= n 30) 30]\n    [(= n 31) 31]\n\
    \    [(= n 32) 32]\n    [(= n 33) 33]\n    [(= n 34) 34]\n    [(= n 35) 35]\n\
    \    [(= n 36) 36]\n    [(= n 37) 37]\n    [(= n 38) 38]\n    [(= n 39) 39]\n\
    \    [(= n 40) 40]\n    [(= n 41) 41]\n    [(= n 42) 42]\n    [(= n 43) 43]\n\
    \    [(= n 44) 44]\n    [(= n 45) 45]\n    [(= n 46) 46]\n    [(= n 47) 47]\n\
    \    [(= n 48) 48]\n    [(= n 49) 49]\n    [(= n 50) 50]\n    [(= n 51) 51]\n\
    \    [(= n 52) 52]\n    [(= n 53) 53]\n    [(= n 54) 54]\n    [(= n 55) 55]\n\
    \    [(=", "  (cond\n    [(= n 0) 1]\n    [(even? n) (modulo (expt 2 (/ n 2))\
    \ p)]\n    [else (modulo (* 2 (modp (- n 1) p)) p)]))\n", "  (if (= n 0)\n   \
    \   1\n      (if (even? n)\n          (modulo (* (modp (/ n 2) p) (modp (/ n 2)\
    \ p)) p)\n          (modulo (* (modp (/ n 2) p) (modp (/ n 2) p) 2) p))))\n",
  "  (let loop ([n n] [p p] [r 1])\n    (cond [(zero? n) r]\n          [(zero? (remainder\
    \ n 2)) (loop (quotient n 2) p (remainder (* r r) p))]\n          [else (loop\
    \ (quotient n 2) p (remainder (* r r r) p))])))\n", "  (define (modp-iter n p\
    \ acc)\n    (cond [(= n 0) acc]\n          [(even? n) (modp-iter (/ n 2) p (*\
    \ acc acc p))]\n          [else (modp-iter (- n 1) p (* acc acc p))]))\n  (modp-iter\
    \ n p 1))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
