name: HumanEval_95_check_dict_case
language: rkt
prompt: "#lang racket\n\n;; Given a hash, return #t if all keys are strings in lower\
  \ \n;; case or all keys are strings in upper case, else return #f.\n;; The function\
  \ should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case\
  \ #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case\
  \ #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n\
  ;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"\
  apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\"\
  \ .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"\
  STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t\n(define (check_dict_case dict)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_dict_case))\n\
  \    (check-equal? (candidate #hash((\"p\" .  \"pineapple\") (\"b\" .  \"banana\"\
  ))) #t)\n    (check-equal? (candidate #hash((\"p\" .  \"pineapple\") (\"A\" .  \"\
  banana\") (\"B\" .  \"banana\"))) #f)\n    (check-equal? (candidate #hash((\"p\"\
  \ .  \"pineapple\") (5 .  \"banana\") (\"a\" .  \"apple\"))) #f)\n    (check-equal?\
  \ (candidate #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\"\
  ))) #f)\n    (check-equal? (candidate #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"\
  12345\"))) #t)\n    (check-equal? (candidate #hash((\"fruit\" .  \"Orange\") (\"\
  taste\" .  \"Sweet\"))) #t)\n    (check-equal? (candidate #hash()) #f)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref\
    \ dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [else #f]))\n", "  (if (empty? dict)\n      #f\n      (let ([keys (hash-keys\
    \ dict)])\n        (if (andmap string? keys)\n            (let ([first-key (first\
    \ keys)])\n              (andmap (lambda (key)\n                        (if (string-ci=?\
    \ first-key key)\n                            #t\n                           \
    \ #f))\n                      keys))\n            #f))))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                       (string-upcase (hash-ref\
    \ dict (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                       (string-downcase (hash-ref\
    \ dict (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (if (hash-empty?\
    \ dict)\n      #f\n      (let ([keys (hash-keys dict)])\n        (if (andmap string?\
    \ keys)\n            (let ([first-key (car keys)])\n              (andmap (lambda\
    \ (key)\n                        (if (string-ci=? first-key key)\n           \
    \                 #t\n                            #f))\n                     \
    \ keys))\n            #f))))\n", "  (if (hash-empty? dict)\n      #f\n      (let\
    \ ([keys (hash-keys dict)])\n        (if (andmap string? keys)\n            (let\
    \ ([first-key (car keys)])\n              (andmap (lambda (key)\n            \
    \            (if (string-ci=? first-key key)\n                            #t\n\
    \                            #f))\n                      keys))\n            #f))))\n",
  "  (define (check-keys dict)\n    (cond ((empty? dict) #t)\n          ((and (string?\
    \ (key dict)) (string-ci=? (key dict) (key dict))) (check-keys (rest dict)))\n\
    \          (else #f)))\n  (check-keys dict))\n", "  (cond\n    [(empty? dict)\
    \ #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (define (check-key\
    \ key)\n    (string-ci=? (string-upcase key) key))\n  (define (check-keys keys)\n\
    \    (cond [(empty? keys) #t]\n          [(check-key (first keys)) (check-keys\
    \ (rest keys))]\n          [else #f]))\n  (check-keys (hash-keys dict)))\n", " \
    \ (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict))\n                    \
    \   (string-upcase (hash-ref dict (hash-key dict)))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict))\n                    \
    \   (string-downcase (hash-ref dict (hash-key dict)))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (define (check-key\
    \ key)\n    (cond\n      [(string? key)\n       (string-ci=? key (string-downcase\
    \ key))]\n      [(symbol? key)\n       (string-ci=? (symbol->string key) (string-downcase\
    \ (symbol->string key)))]\n      [else\n       #f]))\n  (define (check-keys keys)\n\
    \    (cond\n      [(empty? keys)\n       #t]\n      [(check-key (first keys))\n\
    \       (check-keys (rest keys))]\n      [else\n       #f]))\n  (check-keys (hash-keys\
    \ dict)))\n", "  (define (check-key key)\n    (and (string? key)\n         (or\
    \ (string-ci=? key (string-downcase key))\n             (string-ci=? key (string-upcase\
    \ key)))))\n  (define (check-keys dict)\n    (cond ((hash-empty? dict) #t)\n \
    \         ((check-key (hash-key dict))\n           (check-keys (hash-rest dict)))\n\
    \          (else #f)))\n  (check-keys dict))\n", "  (if (hash-empty? dict)\n \
    \     #f\n      (let ([keys (hash-keys dict)])\n        (if (andmap string? keys)\n\
    \            (let ([lower (map string-downcase keys)]\n                  [upper\
    \ (map string-upcase keys)])\n              (if (equal? keys lower)\n        \
    \          #t\n                  (if (equal? keys upper)\n                   \
    \   #t\n                      #f)))\n            #f))))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                       (string-upcase (hash-ref\
    \ dict (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                       (string-downcase (hash-ref\
    \ dict (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(andmap\
    \ string? (hash-keys dict)) #t]\n    [(andmap string-upcase? (hash-keys dict))\
    \ #t]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (define (is-upper? str)\n  \
    \  (and (string? str)\n         (not (string-contains str #\\a))\n         (not\
    \ (string-contains str #\\b))\n         (not (string-contains str #\\c))\n   \
    \      (not (string-contains str #\\d))\n         (not (string-contains str #\\\
    e))\n         (not (string-contains str #\\f))\n         (not (string-contains\
    \ str #\\g))\n         (not (string-contains str #\\h))\n         (not (string-contains\
    \ str #\\i))\n         (not (string-contains str #\\j))\n         (not (string-contains\
    \ str #\\k))\n         (not (string-contains str #\\l))\n         (not (string-contains\
    \ str #\\m))\n         (not (string-contains str #\\n))\n         (not (string-contains\
    \ str #\\o))\n         (not (string-contains str #\\p))\n         (not (string-contains\
    \ str #\\q))\n         (not (string-contains str #\\r))\n         (not (string-contains\
    \ str #\\s))\n         (not (string-contains str #\\t))\n         (not (string-contains\
    \ str #\\u))\n         (not (string-contains str #\\v))\n         (not (string-contains\
    \ str #\\w))\n         (not (string-contains str #\\x))\n         (not (string-contains\
    \ str #\\y))\n         (not (string-contains str #\\z))))\n  (define (is-lower?\
    \ str)\n    (and (string? str)\n         (not (string-contains str #\\A))\n  \
    \       (not (string-contains str #\\B))\n         (not (string-contains str #\\\
    C))\n         (not (string-contains str #\\D))\n         (not (string-contains\
    \ str #\\E))\n         (not (string-contains str #\\F))\n         (not (string-contains\
    \ str #\\G))\n         (not (string-contains str", "  (cond\n    [(empty? dict)\
    \ #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) \"a\"))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) \"A\"))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) \"a\"))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) \"A\"))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                       (string-upcase (hash-ref\
    \ dict (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                       (string-downcase (hash-ref\
    \ dict (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (if (empty? dict)\n      #f\n\
    \      (let ([keys (hash-keys dict)])\n        (if (andmap string? keys)\n   \
    \         (let ([lower-keys (map string-downcase keys)])\n              (if (equal?\
    \ keys lower-keys)\n                  #t\n                  (let ([upper-keys\
    \ (map string-upcase keys)])\n                    (if (equal? keys upper-keys)\n\
    \                        #t\n                        #f))))\n            #f))))\n",
  "  (if (empty? dict)\n      #f\n      (let ([keys (hash-keys dict)])\n        (if\
    \ (andmap string? keys)\n            (if (andmap (lambda (x) (char-upcase? (string-ref\
    \ x 0))) keys)\n                #t\n                (andmap (lambda (x) (char-lower-case?\
    \ (string-ref x 0))) keys))\n            #f))))\n", "  (cond ((empty? dict) #f)\n\
    \        ((equal? (hash-ref dict (hash-keys dict 0)) (string-upcase (hash-ref\
    \ dict (hash-keys dict 0)))) #t)\n        ((equal? (hash-ref dict (hash-keys dict\
    \ 0)) (string-downcase (hash-ref dict (hash-keys dict 0)))) #t)\n        (else\
    \ #f)))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref\
    \ dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\n\
    \                       (string-upcase (hash-ref dict (hash-key dict)))))\n  \
    \   (check_dict_case (hash-remove dict (hash-key dict)))]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict))\n                       (string-downcase (hash-ref dict (hash-key dict)))))\n\
    \     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else #f]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref\
    \ dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\
    \ (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict))\n                       (string-downcase (hash-ref dict\
    \ (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict))\n                       (string-upcase (hash-ref dict\
    \ (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\
    \ (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) \"a\"))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) \"A\"))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) \"a\"))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) \"A\"))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                       (string-upcase (hash-ref\
    \ dict (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                       (string-downcase (hash-ref\
    \ dict (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-keys dict 0)))\n          (string-ci=? (hash-ref dict (hash-keys\
    \ dict 0))\n                       (string-upcase (hash-ref dict (hash-keys dict\
    \ 0)))))\n     (check_dict_case (hash-remove dict (hash-keys dict 0)))]\n    [(and\
    \ (string? (hash-ref dict (hash-keys dict 0)))\n          (string-ci=? (hash-ref\
    \ dict (hash-keys dict 0))\n                       (string-downcase (hash-ref\
    \ dict (hash-keys dict 0)))))\n     (check_dict_case (hash-remove dict (hash-keys\
    \ dict 0)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and\
    \ (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) \"a\"))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) \"A\"))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (define (check-dict-case-helper\
    \ dict)\n    (cond ((empty? dict) #t)\n          ((and (string? (hash-ref dict\
    \ (hash-key dict)))\n                (string-ci=? (hash-ref dict (hash-key dict))\
    \ (hash-key dict)))\n           (check-dict-case-helper (hash-remove dict (hash-key\
    \ dict))))\n          (else #f)))\n  (check-dict-case-helper dict))\n", "  (cond\n\
    \    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\n\
    \                       (string-downcase (hash-ref dict (hash-key dict)))))\n\
    \     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict))\n                       (string-upcase (hash-ref dict (hash-key dict)))))\n\
    \     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else #f]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else\
    \ #f]))\n", "  (define (check-keys dict)\n    (cond\n      [(empty? dict) #t]\n\
    \      [(and (string? (key dict)) (string-ci=? (key dict) (key dict)))\n     \
    \  (check-keys (rest dict))]\n      [else #f]))\n  (check-keys dict))\n", "  (cond\n\
    \    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\n\
    \                       (string-downcase (hash-ref dict (hash-key dict)))))\n\
    \     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict))\n                       (string-upcase (hash-ref dict (hash-key dict)))))\n\
    \     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else #f]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else\
    \ #f]))\n", "  (define (check-keys dict)\n    (cond ((empty? dict) #t)\n     \
    \     ((and (string? (key dict))\n                (string-ci=? (key dict) (string-downcase\
    \ (key dict))))\n           (check-keys (rest dict)))\n          ((and (string?\
    \ (key dict))\n                (string-ci=? (key dict) (string-upcase (key dict))))\n\
    \           (check-keys (rest dict)))\n          (else #f)))\n  (check-keys dict))\n",
  "  (if (hash-empty? dict)\n      #f\n      (let ([keys (hash-keys dict)])\n    \
    \    (if (andmap string? keys)\n            (let ([first-key (car keys)])\n  \
    \            (andmap (lambda (key)\n                        (equal? (string-upcase\
    \ key) first-key))\n                      keys))\n            #f))))\n", "  (cond\n\
    \    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict))\n                    \
    \   (string-downcase (hash-ref dict (hash-key dict)))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [(and (string? (hash-ref dict (hash-key\
    \ dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\n          \
    \             (string-upcase (hash-ref dict (hash-key dict)))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond [(empty?\
    \ dict) #f]\n        [(and (string? (hash-ref dict (hash-key dict)))\n       \
    \       (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n         (check_dict_case (hash-remove dict (hash-key dict)))]\n \
    \       [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\
    \ (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (if (hash-empty?\
    \ dict)\n      #f\n      (let ([keys (hash-keys dict)])\n        (if (andmap string?\
    \ keys)\n            (let ([lower (map string-downcase keys)]\n              \
    \    [upper (map string-upcase keys)])\n              (equal? keys lower)\n  \
    \            (equal? keys upper))\n            #f))))\n", "  (if (hash-empty?\
    \ dict)\n      #f\n      (let ([keys (hash-keys dict)])\n        (if (andmap string?\
    \ keys)\n            (let ([lower (map string-downcase keys)]\n              \
    \    [upper (map string-upcase keys)])\n              (if (equal? keys lower)\n\
    \                  #t\n                  (if (equal? keys upper)\n           \
    \           #t\n                      #f)))\n            #f))))\n", "  (cond\n\
    \    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict))\n                    \
    \   (hash-ref dict (hash-key (hash-rest dict)))))\n     (check_dict_case (hash-rest\
    \ dict))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict))\n                       (string-upcase (hash-ref dict\
    \ (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict))\n                       (string-downcase (hash-ref dict\
    \ (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\
    \ (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (if (hash-empty? dict)\n      #f\n      (let\
    \ ([keys (hash-keys dict)])\n        (if (andmap string? keys)\n            (let\
    \ ([lower-keys (map string-downcase keys)])\n              (if (equal? keys lower-keys)\n\
    \                  #t\n                  #f))\n            #f))))\n", "  (if (hash-empty?\
    \ dict)\n      #f\n      (let ([keys (hash-keys dict)])\n        (if (andmap string?\
    \ keys)\n            (let ([lower (map string-downcase keys)]\n              \
    \    [upper (map string-upcase keys)])\n              (if (equal? keys lower)\n\
    \                  #t\n                  (if (equal? keys upper)\n           \
    \           #t\n                      #f)))\n            #f))))\n", "  (cond\n\
    \    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else\
    \ #f]))\n", "  (define (check-dict-case-helper dict lower upper)\n    (cond\n\
    \      [(empty? dict) #t]\n      [(and (string? (hash-ref dict (hash-key dict)))\n\
    \            (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n       (check-dict-case-helper (hash-remove dict (hash-key dict))\
    \ lower upper)]\n      [(and (string? (hash-ref dict (hash-key dict)))\n     \
    \       (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict)))\n            (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref\
    \ dict (hash-key dict))))\n       (check-dict-case-helper (hash-remove dict (hash-key\
    \ dict)) lower upper)]\n      [(and (string? (hash-ref dict (hash-key dict)))\n\
    \            (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n       (check-dict-case-helper (hash-remove dict (hash-key dict))\
    \ lower upper)]\n      [(and (string? (hash-ref dict (hash-key dict)))\n     \
    \       (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n       (check-dict-case-helper (hash-remove dict (hash-key dict))\
    \ lower upper)]\n      [else #f]))\n  (check-dict-case-helper dict #t #t))\n</code>\n\
    I'm not sure what I'm doing wrong. I'm trying to check if the first key is a string\
    \ and if it is, check if it's lower case. If it is, then I want to check the next\
    \ key and if it's a string, check if it's lower case. If it is, then I want to\
    \ check the next key and if it's a string, check if it's lower case. If it is,\
    \ then I want to check the next key and if it's a string, check if it's lower\
    \ case. If it is, then I want to check the next key and if it's a", "  (let ([keys\
    \ (hash-keys dict)])\n    (cond [(empty? keys) #f]\n          [(andmap string?\
    \ keys)\n           (let ([first-key (first keys)])\n             (andmap (lambda\
    \ (key)\n                       (string-ci=? first-key key))\n               \
    \      keys))]\n          [else #f])))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict)))\
    \ #t]\n    [else #f]))\n", "  (if (hash-empty? dict)\n      #f\n      (let ([keys\
    \ (hash-keys dict)])\n        (if (andmap string? keys)\n            (let ([first-key\
    \ (car keys)])\n              (andmap (lambda (key)\n                        (if\
    \ (string-ci=? first-key key)\n                            #t\n              \
    \              #f))\n                      keys))\n            #f))))\n", "  (cond\n\
    \    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref\
    \ dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\n\
    \                       (string-upcase (hash-ref dict (hash-key dict)))))\n  \
    \   (check_dict_case (hash-remove dict (hash-key dict)))]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict))\n                       (string-downcase (hash-ref dict (hash-key dict)))))\n\
    \     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else #f]))\n",
  "  (if (empty? dict)\n      #f\n      (let ([keys (hash-keys dict)])\n        (if\
    \ (andmap string? keys)\n            (if (andmap string-ci=? keys)\n         \
    \       #t\n                #f)\n            #f))))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict\
    \ (hash-key dict))) #t]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict))\n                       (hash-ref dict (hash-key (hash-rest\
    \ dict)))))\n     (check_dict_case (hash-rest dict))]\n    [else #f]))\n", " \
    \ (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref\
    \ dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\
    \ (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                       (string-upcase (hash-ref\
    \ dict (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                       (string-downcase (hash-ref\
    \ dict (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (if (hash-empty? dict)\n   \
    \   #f\n      (let ([keys (hash-keys dict)])\n        (if (andmap string? keys)\n\
    \            (let ([first-key (car keys)])\n              (andmap (lambda (key)\n\
    \                        (equal? (string-upcase key) first-key))\n           \
    \           keys))\n            #f))))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) \"a\"))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) \"A\"))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (if (empty? dict)\n\
    \      #f\n      (let ([keys (hash-keys dict)])\n        (if (andmap string? keys)\n\
    \            (let ([lower-keys (map string-downcase keys)])\n              (if\
    \ (equal? keys lower-keys)\n                  #t\n                  (if (equal?\
    \ keys (map string-upcase keys))\n                      #t\n                 \
    \     #f)))\n            #f))))\n", "  (cond\n    [(empty? dict) #f]\n    [(and\
    \ (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (if (hash-empty?\
    \ dict)\n      #f\n      (let ([keys (hash-keys dict)])\n        (if (andmap string?\
    \ keys)\n            (let ([first-key (car keys)])\n              (if (string-ci=?\
    \ first-key (string-upcase first-key))\n                  (andmap (lambda (key)\
    \ (string-ci=? key (string-upcase key))) keys)\n                  (andmap (lambda\
    \ (key) (string-ci=? key (string-downcase key))) keys)))\n            #f))))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict))\n                    \
    \   (string-upcase (hash-ref dict (hash-key dict)))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict))\n                    \
    \   (string-downcase (hash-ref dict (hash-key dict)))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (if (empty? dict)\n\
    \      #f\n      (let ([keys (hash-keys dict)])\n        (if (andmap string? keys)\n\
    \            (let ([lower-keys (map string-downcase keys)])\n              (if\
    \ (equal? keys lower-keys)\n                  #t\n                  (let ([upper-keys\
    \ (map string-upcase keys)])\n                    (if (equal? keys upper-keys)\n\
    \                        #t\n                        #f))))\n            #f))))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref\
    \ dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\
    \ (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (if (hash-empty? dict)\n      #f\n      (let\
    \ ([keys (hash-keys dict)])\n        (if (andmap string? keys)\n            (let\
    \ ([first-key (car keys)])\n              (andmap (lambda (key)\n            \
    \            (string-ci=? first-key key))\n                      keys))\n    \
    \        #f))))\n", "  (cond\n    [(empty? dict) #f]\n    [(string? (hash-ref\
    \ dict (hash-key dict)))\n     (cond\n       [(string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))) #t]\n       [else #f])]\n    [else #f]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref\
    \ dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\
    \ (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (define (check-key key)\n    (if (string? key)\n\
    \        (if (string-ci=? key (string-upcase key))\n            'upper\n     \
    \       'lower)\n        'not-string))\n  (define (check-keys keys)\n    (if (null?\
    \ keys)\n        #t\n        (if (eq? (check-key (car keys)) (check-key (cadr\
    \ keys)))\n            (check-keys (cdr keys))\n            #f)))\n  (if (hash-empty?\
    \ dict)\n      #f\n      (check-keys (hash-keys dict))))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) \"a\"))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) \"A\"))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) \"a\"))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) \"A\"))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (if (empty? dict)\n\
    \      #f\n      (let* ([keys (hash-keys dict)]\n             [first-key (first\
    \ keys)]\n             [first-key-is-string? (string? first-key)]\n          \
    \   [first-key-is-lower-case? (string-ci=? first-key (string-downcase first-key))])\n\
    \        (if (not first-key-is-string?)\n            #f\n            (for/and\
    \ ([key keys])\n              (if first-key-is-lower-case?\n                 \
    \ (string-ci=? key (string-downcase key))\n                  (string-ci=? key\
    \ (string-upcase key))))))))\n", "  (if (empty? dict)\n      #f\n      (let ([keys\
    \ (hash-keys dict)])\n        (if (andmap string? keys)\n            (if (andmap\
    \ string-lower-case? keys)\n                #t\n                (andmap string-upper-case?\
    \ keys))\n            #f))))\n", "  (define (check-keys dict)\n    (cond\n   \
    \   [(empty? dict) #t]\n      [(string? (key dict))\n       (if (or (char-upper-case?\
    \ (string-ref (key dict) 0))\n               (char-lower-case? (string-ref (key\
    \ dict) 0)))\n           (check-keys (rest dict))\n           #f)]\n      [else\
    \ #f]))\n  (define (check-all-upper dict)\n    (cond\n      [(empty? dict) #t]\n\
    \      [(string? (key dict))\n       (if (char-upper-case? (string-ref (key dict)\
    \ 0))\n           (check-all-upper (rest dict))\n           #f)]\n      [else\
    \ #f]))\n  (define (check-all-lower dict)\n    (cond\n      [(empty? dict) #t]\n\
    \      [(string? (key dict))\n       (if (char-lower-case? (string-ref (key dict)\
    \ 0))\n           (check-all-lower (rest dict))\n           #f)]\n      [else\
    \ #f]))\n  (cond\n    [(empty? dict) #f]\n    [(check-keys dict)\n     (if (and\
    \ (check-all-upper dict) (check-all-lower dict))\n         #f\n         #t)]\n\
    \    [else #f]))\n", "  (define (check_dict_case-helper dict)\n    (if (hash-empty?\
    \ dict)\n        #t\n        (let ([key (hash-key (hash-first dict))])\n     \
    \     (if (and (string? key) (string-ci=? key (string-upcase key)))\n        \
    \      (check_dict_case-helper (hash-remove (hash-first dict) dict))\n       \
    \       #f))))\n  (if (hash-empty? dict)\n      #f\n      (check_dict_case-helper\
    \ dict)))\n", "  (if (hash-empty? dict)\n      #f\n      (let ([keys (hash-keys\
    \ dict)])\n        (if (andmap string? keys)\n            (let ([lower-keys (map\
    \ string-downcase keys)])\n              (if (equal? keys lower-keys)\n      \
    \            #t\n                  #f))\n            #f))))\n", "  (define (check-keys\
    \ dict)\n    (cond ((null? dict) #t)\n          ((and (string? (car (car dict)))\n\
    \                (or (string-ci=? (car (car dict)) (car (car dict)))\n       \
    \             (string-ci=? (car (car dict)) (string-upcase (car (car dict))))))\n\
    \           (check-keys (cdr dict)))\n          (else #f)))\n  (check-keys (hash-keys\
    \ dict)))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref\
    \ dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\
    \ (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) \"a\"))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) \"A\"))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (if (hash-empty? dict)\n   \
    \   #f\n      (let ([keys (hash-keys dict)])\n        (if (andmap string? keys)\n\
    \            (let ([first-key (car keys)])\n              (andmap (lambda (key)\n\
    \                        (if (string-ci=? first-key key)\n                   \
    \         #t\n                            #f))\n                      keys))\n\
    \            #f))))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\
    \ (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (let ((keys (hash-keys dict)))\n\
    \    (cond\n      [(empty? keys) #f]\n      [(string-ci=? (car keys) (string-downcase\
    \ (car keys)))\n       (andmap (lambda (key) (string-ci=? key (string-downcase\
    \ key))) keys)]\n      [(string-ci=? (car keys) (string-upcase (car keys)))\n\
    \       (andmap (lambda (key) (string-ci=? key (string-upcase key))) keys)]\n\
    \      [else #f])))\n", "  (if (empty? dict)\n      #f\n      (let ([keys (hash-keys\
    \ dict)])\n        (if (andmap string? keys)\n            (let ([lower-keys (map\
    \ string-downcase keys)])\n              (if (equal? keys lower-keys)\n      \
    \            #t\n                  (let ([upper-keys (map string-upcase keys)])\n\
    \                    (if (equal? keys upper-keys)\n                        #t\n\
    \                        #f))))\n            #f))))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                       (string-upcase (hash-ref\
    \ dict (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                       (string-downcase (hash-ref\
    \ dict (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (let ([keys (hash-keys\
    \ dict)])\n    (cond [(empty? keys) #f]\n          [(string-ci=? (first keys)\
    \ (first keys)) #t]\n          [else #f])))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-keys dict 0)))\n          (string-ci=?\
    \ (hash-ref dict (hash-keys dict 0))\n                       (string-upcase (hash-ref\
    \ dict (hash-keys dict 0)))))\n     (check_dict_case (hash-remove dict (hash-keys\
    \ dict 0)))]\n    [(and (string? (hash-ref dict (hash-keys dict 0)))\n       \
    \   (string-ci=? (hash-ref dict (hash-keys dict 0))\n                       (string-downcase\
    \ (hash-ref dict (hash-keys dict 0)))))\n     (check_dict_case (hash-remove dict\
    \ (hash-keys dict 0)))]\n    [else #f]))\n", "  (cond [(empty? dict) #f]\n   \
    \     [(string-ci=? (hash-ref dict (hash-key dict))\n                      (hash-ref\
    \ dict (hash-next dict)))\n         (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n        [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and\
    \ (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                       (string-upcase (hash-ref\
    \ dict (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                       (string-downcase (hash-ref\
    \ dict (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (define (check-keys dict)\n    (cond ((empty?\
    \ dict) #t)\n          ((and (string? (key dict))\n                (or (string-ci=?\
    \ (key dict) (key dict))\n                    (string-ci=? (key dict) (key dict))))\n\
    \           (check-keys (rest dict)))\n          (else #f)))\n  (check-keys dict))\n",
  "  (let ([keys (hash-keys dict)])\n    (cond [(empty? keys) #f]\n          [(andmap\
    \ string? keys)\n           (let ([lower-keys (map string-downcase keys)])\n \
    \            (andmap (lambda (k) (equal? k (string-downcase k))) keys))]\n   \
    \       [(andmap symbol? keys)\n           (let ([upper-keys (map symbol->string\
    \ keys)])\n             (andmap (lambda (k) (equal? k (string-upcase k))) upper-keys))]\n\
    \          [else #f])))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) \"apple\")) #t]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                       (string-upcase (hash-ref\
    \ dict (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                       (string-downcase (hash-ref\
    \ dict (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (if (hash-empty? dict)\n      #f\n      (let\
    \ ([keys (hash-keys dict)])\n        (if (andmap string? keys)\n            (let\
    \ ([first-key (car keys)])\n              (andmap (lambda (key)\n            \
    \            (or (string-ci=? key first-key)\n                            (string-ci=?\
    \ key (string-upcase first-key))))\n                      keys))\n           \
    \ #f))))\n", "  (if (hash-empty? dict)\n      #f\n      (let ([keys (hash-keys\
    \ dict)])\n        (if (andmap string? keys)\n            (let ([lower-keys (map\
    \ string-downcase keys)])\n              (if (equal? keys lower-keys)\n      \
    \            #t\n                  #f))\n            #f))))\n", "  (cond\n   \
    \ [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n  \
    \        (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else\
    \ #f]))\n", "  (if (empty? dict)\n      #f\n      (let ((keys (hash-keys dict)))\n\
    \        (if (andmap string? keys)\n            (if (andmap string-ci=? keys)\n\
    \                #t\n                #f)\n            #f))))\n", "  (cond\n  \
    \  [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n \
    \         (string-ci=? (hash-ref dict (hash-key dict)) \"a\"))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [(and (string? (hash-ref dict (hash-key\
    \ dict)))\n          (string-ci=? (hash-ref dict (hash-key dict)) \"A\"))\n  \
    \   (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else #f]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else\
    \ #f]))\n", "  (cond [(empty? dict) #f]\n        [(andmap string? (hash-keys dict))\
    \ #t]\n        [(andmap symbol? (hash-keys dict)) #t]\n        [else #f]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref\
    \ dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\
    \ (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict))\n                       (string-upcase (hash-ref dict (hash-key dict)))))\n\
    \     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict))\n                       (string-downcase (hash-ref dict (hash-key dict)))))\n\
    \     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else #f]))\n\
    </code>\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref\
    \ dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\
    \ (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) \"a\"))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) \"A\"))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict))\n                       (string-upcase (hash-ref dict\
    \ (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict))\n                       (string-downcase (hash-ref dict\
    \ (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [else #f]))\n", "  (define (check-keys dict)\n    (cond ((empty? dict) #t)\n\
    \          ((and (string? (car (car dict)))\n                (string-ci=? (car\
    \ (car dict)) (car (car dict))))\n           (check-keys (cdr dict)))\n      \
    \    (else #f)))\n  (if (empty? dict)\n      #f\n      (check-keys (hash-keys\
    \ dict))))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\
    \ \"a\"))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [(and\
    \ (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) \"A\"))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (define (check-key key)\n  \
    \  (cond\n      [(string? key)\n       (string-ci=? key (string-upcase key))]\n\
    \      [else #f]))\n  (cond\n    [(empty? dict) #f]\n    [(check-key (hash-ref\
    \ dict (hash-keys dict 0)))\n     (for/and ([key (in-hash dict)])\n       (check-key\
    \ key))]\n    [else\n     (for/and ([key (in-hash dict)])\n       (not (check-key\
    \ key)))]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\
    \ (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (if (hash-empty? dict)\n      #f\n      (let\
    \ ([keys (hash-keys dict)])\n        (if (andmap string? keys)\n            (let\
    \ ([lower (map string-downcase keys)]\n                  [upper (map string-upcase\
    \ keys)])\n              (if (equal? keys lower)\n                  #t\n     \
    \             (if (equal? keys upper)\n                      #t\n            \
    \          #f)))\n            #f))))\n", "  (cond\n    [(empty? dict) #f]\n  \
    \  [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-keys dict 0)))\n        \
    \  (string? (hash-ref dict (hash-keys dict 1)))\n          (string-ci=? (hash-ref\
    \ dict (hash-keys dict 0)) (hash-ref dict (hash-keys dict 1))))\n     #t]\n  \
    \  [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\
    \ \"a\"))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [(and\
    \ (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) \"A\"))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict))) (string-ci=? (hash-ref dict\
    \ (hash-key dict)) (hash-ref dict (hash-key dict)))) #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict))\n                    \
    \   (hash-ref dict (hash-key (hash-rest dict)))))\n     (check_dict_case (hash-rest\
    \ dict))]\n    [else #f]))\n", "  (let ([keys (hash-keys dict)])\n    (cond [(empty?\
    \ keys) #f]\n          [(andmap string? keys)\n           (let ([first-key (first\
    \ keys)])\n             (andmap (lambda (key)\n                       (equal?\
    \ (string-downcase key)\n                               (string-downcase first-key)))\n\
    \                     keys))]\n          [else #f])))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) \"a\"))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) \"A\"))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (if (empty? dict)\n\
    \      #f\n      (let ([keys (hash-keys dict)])\n        (if (andmap string? keys)\n\
    \            (let ([lower-keys (map string-downcase keys)])\n              (if\
    \ (equal? keys lower-keys)\n                  #t\n                  (let ([upper-keys\
    \ (map string-upcase keys)])\n                    (if (equal? keys upper-keys)\n\
    \                        #t\n                        #f))))\n            #f))))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\n\
    \                       (string-upcase (hash-ref dict (hash-key dict)))))\n  \
    \   (check_dict_case (hash-remove dict (hash-key dict)))]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict))\n                       (string-downcase (hash-ref dict (hash-key dict)))))\n\
    \     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else #f]))\n",
  "  (let ([keys (hash-keys dict)])\n    (cond [(empty? keys) #f]\n          [(string-ci=?\
    \ (car keys) (string-upcase (car keys)))\n           (andmap (lambda (key) (string-ci=?\
    \ key (string-upcase key))) keys)]\n          [(string-ci=? (car keys) (string-downcase\
    \ (car keys)))\n           (andmap (lambda (key) (string-ci=? key (string-downcase\
    \ key))) keys)]\n          [else #f])))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (define (check-case\
    \ key)\n    (if (string? key)\n        (if (string-ci=? key (string-upcase key))\n\
    \            'upper\n            'lower)\n        #f))\n  (define (check-dict-case\
    \ dict)\n    (if (empty? dict)\n        #t\n        (let ((key (hash-key (first\
    \ dict)))\n              (rest (hash-rest dict)))\n          (if (not (check-case\
    \ key))\n              #f\n              (if (eq? (check-case key) (check-case\
    \ (hash-key (first rest))))\n                  (check-dict-case rest)\n      \
    \            #f)))))\n  (check-dict-case dict))\n", "  (cond\n    [(empty? dict)\
    \ #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) \"a\"))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) \"A\"))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-lower-case?\
    \ (hash-ref dict (hash-key dict))))\n     (check-dict-case-helper dict #t)]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-upper-case?\
    \ (hash-ref dict (hash-key dict))))\n     (check-dict-case-helper dict #f)]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\
    \ (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict))\n                       (string-upcase (hash-ref dict\
    \ (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict))\n                       (string-downcase (hash-ref dict\
    \ (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [else #f]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
