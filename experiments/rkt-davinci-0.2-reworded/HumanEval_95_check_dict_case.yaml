name: HumanEval_95_check_dict_case
language: rkt
prompt: "#lang racket\n\n;; Given a hash, return #t if all keys are strings in lower\
  \ \n;; case or all keys are strings in upper case, else return #f.\n;; The function\
  \ should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case\
  \ #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case\
  \ #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n\
  ;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"\
  apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\"\
  \ .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"\
  STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t\n(define (check_dict_case dict)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_dict_case))\n\
  \    (check-equal? (candidate #hash((\"p\" .  \"pineapple\") (\"b\" .  \"banana\"\
  ))) #t)\n    (check-equal? (candidate #hash((\"p\" .  \"pineapple\") (\"A\" .  \"\
  banana\") (\"B\" .  \"banana\"))) #f)\n    (check-equal? (candidate #hash((\"p\"\
  \ .  \"pineapple\") (5 .  \"banana\") (\"a\" .  \"apple\"))) #f)\n    (check-equal?\
  \ (candidate #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\"\
  ))) #f)\n    (check-equal? (candidate #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"\
  12345\"))) #t)\n    (check-equal? (candidate #hash((\"fruit\" .  \"Orange\") (\"\
  taste\" .  \"Sweet\"))) #t)\n    (check-equal? (candidate #hash()) #f)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref\
    \ dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [else #f]))\n", "  (if (empty? dict)\n      #f\n      (let ([keys (hash-keys\
    \ dict)])\n        (if (andmap string? keys)\n            (let ([first-key (first\
    \ keys)])\n              (andmap (lambda (key)\n                        (if (string-ci=?\
    \ first-key key)\n                            #t\n                           \
    \ #f))\n                      keys))\n            #f))))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                       (string-upcase (hash-ref\
    \ dict (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                       (string-downcase (hash-ref\
    \ dict (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (if (hash-empty?\
    \ dict)\n      #f\n      (let ([keys (hash-keys dict)])\n        (if (andmap string?\
    \ keys)\n            (let ([first-key (car keys)])\n              (andmap (lambda\
    \ (key)\n                        (if (string-ci=? first-key key)\n           \
    \                 #t\n                            #f))\n                     \
    \ keys))\n            #f))))\n", "  (if (hash-empty? dict)\n      #f\n      (let\
    \ ([keys (hash-keys dict)])\n        (if (andmap string? keys)\n            (let\
    \ ([first-key (car keys)])\n              (andmap (lambda (key)\n            \
    \            (if (string-ci=? first-key key)\n                            #t\n\
    \                            #f))\n                      keys))\n            #f))))\n",
  "  (define (check-keys dict)\n    (cond ((empty? dict) #t)\n          ((and (string?\
    \ (key dict)) (string-ci=? (key dict) (key dict))) (check-keys (rest dict)))\n\
    \          (else #f)))\n  (check-keys dict))\n", "  (cond\n    [(empty? dict)\
    \ #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (define (check-key\
    \ key)\n    (string-ci=? (string-upcase key) key))\n  (define (check-keys keys)\n\
    \    (cond [(empty? keys) #t]\n          [(check-key (first keys)) (check-keys\
    \ (rest keys))]\n          [else #f]))\n  (check-keys (hash-keys dict)))\n", " \
    \ (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict))\n                    \
    \   (string-upcase (hash-ref dict (hash-key dict)))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict))\n                    \
    \   (string-downcase (hash-ref dict (hash-key dict)))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (define (check-key\
    \ key)\n    (cond\n      [(string? key)\n       (string-ci=? key (string-downcase\
    \ key))]\n      [(symbol? key)\n       (string-ci=? (symbol->string key) (string-downcase\
    \ (symbol->string key)))]\n      [else\n       #f]))\n  (define (check-keys keys)\n\
    \    (cond\n      [(empty? keys)\n       #t]\n      [(check-key (first keys))\n\
    \       (check-keys (rest keys))]\n      [else\n       #f]))\n  (check-keys (hash-keys\
    \ dict)))\n", "  (define (check-key key)\n    (and (string? key)\n         (or\
    \ (string-ci=? key (string-downcase key))\n             (string-ci=? key (string-upcase\
    \ key)))))\n  (define (check-keys dict)\n    (cond ((hash-empty? dict) #t)\n \
    \         ((check-key (hash-key dict))\n           (check-keys (hash-rest dict)))\n\
    \          (else #f)))\n  (check-keys dict))\n", "  (if (hash-empty? dict)\n \
    \     #f\n      (let ([keys (hash-keys dict)])\n        (if (andmap string? keys)\n\
    \            (let ([lower (map string-downcase keys)]\n                  [upper\
    \ (map string-upcase keys)])\n              (if (equal? keys lower)\n        \
    \          #t\n                  (if (equal? keys upper)\n                   \
    \   #t\n                      #f)))\n            #f))))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                       (string-upcase (hash-ref\
    \ dict (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                       (string-downcase (hash-ref\
    \ dict (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(andmap\
    \ string? (hash-keys dict)) #t]\n    [(andmap string-upcase? (hash-keys dict))\
    \ #t]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (define (is-upper? str)\n  \
    \  (and (string? str)\n         (not (string-contains str #\\a))\n         (not\
    \ (string-contains str #\\b))\n         (not (string-contains str #\\c))\n   \
    \      (not (string-contains str #\\d))\n         (not (string-contains str #\\\
    e))\n         (not (string-contains str #\\f))\n         (not (string-contains\
    \ str #\\g))\n         (not (string-contains str #\\h))\n         (not (string-contains\
    \ str #\\i))\n         (not (string-contains str #\\j))\n         (not (string-contains\
    \ str #\\k))\n         (not (string-contains str #\\l))\n         (not (string-contains\
    \ str #\\m))\n         (not (string-contains str #\\n))\n         (not (string-contains\
    \ str #\\o))\n         (not (string-contains str #\\p))\n         (not (string-contains\
    \ str #\\q))\n         (not (string-contains str #\\r))\n         (not (string-contains\
    \ str #\\s))\n         (not (string-contains str #\\t))\n         (not (string-contains\
    \ str #\\u))\n         (not (string-contains str #\\v))\n         (not (string-contains\
    \ str #\\w))\n         (not (string-contains str #\\x))\n         (not (string-contains\
    \ str #\\y))\n         (not (string-contains str #\\z))))\n  (define (is-lower?\
    \ str)\n    (and (string? str)\n         (not (string-contains str #\\A))\n  \
    \       (not (string-contains str #\\B))\n         (not (string-contains str #\\\
    C))\n         (not (string-contains str #\\D))\n         (not (string-contains\
    \ str #\\E))\n         (not (string-contains str #\\F))\n         (not (string-contains\
    \ str #\\G))\n         (not (string-contains str"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
