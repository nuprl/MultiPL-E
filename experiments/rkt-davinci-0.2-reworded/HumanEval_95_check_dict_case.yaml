name: HumanEval_95_check_dict_case
language: rkt
prompt: "#lang racket\n\n;; Given a hash, return #t if all keys are strings in lower\
  \ \n;; case or all keys are strings in upper case, else return #f.\n;; The function\
  \ should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case\
  \ #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case\
  \ #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n\
  ;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"\
  apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\"\
  \ .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"\
  STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t\n(define (check_dict_case dict)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_dict_case))\n\
  \    (check-equal? (candidate #hash((\"p\" .  \"pineapple\") (\"b\" .  \"banana\"\
  ))) #t)\n    (check-equal? (candidate #hash((\"p\" .  \"pineapple\") (\"A\" .  \"\
  banana\") (\"B\" .  \"banana\"))) #f)\n    (check-equal? (candidate #hash((\"p\"\
  \ .  \"pineapple\") (\"5\" .  \"banana\") (\"a\" .  \"apple\"))) #f)\n    (check-equal?\
  \ (candidate #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\"\
  ))) #f)\n    (check-equal? (candidate #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"\
  12345\"))) #t)\n    (check-equal? (candidate #hash((\"fruit\" .  \"Orange\") (\"\
  taste\" .  \"Sweet\"))) #t)\n    (check-equal? (candidate #hash()) #f)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\n\
    \                       (string-upcase (hash-ref dict (hash-key dict)))))\n  \
    \   (check_dict_case (hash-remove dict (hash-key dict)))]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict))\n                       (string-downcase (hash-ref dict (hash-key dict)))))\n\
    \     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else #f]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict))\n                    \
    \   (hash-ref dict (hash-key (hash-rest dict)))))\n     (check_dict_case (hash-rest\
    \ dict))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (if (hash-empty? dict)\n   \
    \   #f\n      (let ([keys (hash-keys dict)])\n        (if (andmap string? keys)\n\
    \            (let ([first-key (car keys)])\n              (andmap (lambda (key)\n\
    \                        (if (string-ci=? first-key key)\n                   \
    \         #t\n                            #f))\n                      keys))\n\
    \            #f))))\n", "  (define (check-dict-case-helper dict)\n    (cond\n\
    \      [(empty? dict) #t]\n      [(and (string? (key dict)) (string-ci=? (key\
    \ dict) (key dict))) (check-dict-case-helper (rest dict))]\n      [else #f]))\n\
    \  (check-dict-case-helper dict))\n", "  (cond\n    [(empty? dict) #f]\n    [(and\
    \ (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                       (string-downcase (hash-ref\
    \ dict (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                       (string-upcase (hash-ref\
    \ dict (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-keys dict 0)))\n        \
    \  (string-ci=? (string-upcase (hash-ref dict (hash-keys dict 0)))\n         \
    \              (hash-ref dict (hash-keys dict 0))))\n     (check_dict_case (hash-remove\
    \ dict (hash-keys dict 0)))]\n    [(and (string? (hash-ref dict (hash-keys dict\
    \ 0)))\n          (string-ci=? (string-downcase (hash-ref dict (hash-keys dict\
    \ 0)))\n                       (hash-ref dict (hash-keys dict 0))))\n     (check_dict_case\
    \ (hash-remove dict (hash-keys dict 0)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(andmap string? (hash-keys dict)) #t]\n    [(andmap symbol?\
    \ (hash-keys dict)) #t]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) \"a\"))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) \"A\"))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) \"a\"))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) \"A\"))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (let ([keys (hash-keys\
    \ dict)])\n    (cond\n      [(empty? keys) #f]\n      [(andmap string? keys)\n\
    \       (let ([first-key (first keys)])\n         (andmap (lambda (key)\n    \
    \               (string-ci=? first-key key))\n                 keys))]\n     \
    \ [else #f])))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\n\
    \                       (string-upcase (hash-ref dict (hash-key dict)))))\n  \
    \   (check_dict_case (hash-remove dict (hash-key dict)))]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict))\n                       (string-downcase (hash-ref dict (hash-key dict)))))\n\
    \     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else #f]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict)) \"\
    a\"))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) \"A\"))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\
    \ (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict))\n                       (string-upcase (hash-ref dict (hash-key dict)))))\n\
    \     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict))\n                       (string-downcase (hash-ref dict (hash-key dict)))))\n\
    \     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else #f]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else\
    \ #f]))\n", "  (define (check-keys dict)\n    (cond ((empty? dict) #t)\n     \
    \     ((and (string? (key dict))\n                (or (string-ci=? (key dict)\
    \ (key dict))\n                    (string-ci=? (key dict) (key dict))))\n   \
    \        (check-keys (rest dict)))\n          (else #f)))\n  (check-keys dict))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else\
    \ #f]))\n", "  (let ([keys (hash-keys dict)])\n    (if (empty? keys)\n       \
    \ #f\n        (let ([key (first keys)])\n          (if (string? key)\n       \
    \       (if (string-ci=? key (string-upcase key))\n                  (check-dict-case-helper\
    \ dict keys #t)\n                  (check-dict-case-helper dict keys #f))\n  \
    \            #f)))))\n", "  (cond\n    [(empty? dict) #f]\n    [(string? (hash-ref\
    \ dict (hash-key dict)))\n     (andmap string? (hash-keys dict))]\n    [(symbol?\
    \ (hash-ref dict (hash-key dict)))\n     (andmap symbol? (hash-keys dict))]\n\
    \    [else #f]))\n", "  (let ([keys (hash-keys dict)])\n    (cond\n      [(empty?\
    \ keys) #f]\n      [(andmap string? keys)\n       (let ([first-key (first keys)])\n\
    \         (andmap (lambda (key)\n                   (string-ci=? first-key key))\n\
    \                 keys))]\n      [else #f])))\n", "  (cond\n    [(empty? dict)\
    \ #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(hash-has-key? dict (hash-keys dict)) #t]\n    [else #f]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(string? (hash-ref dict (hash-key dict)))\n\
    \     (cond\n       [(string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict\
    \ (hash-key dict)))\n        (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \       [else #f])]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n  \
    \  [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                       (string-upcase (hash-ref\
    \ dict (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                       (string-downcase (hash-ref\
    \ dict (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (if (hash-empty? dict)\n   \
    \   #f\n      (let ([keys (hash-keys dict)])\n        (if (andmap string? keys)\n\
    \            (let ([first-key (car keys)])\n              (andmap (lambda (key)\n\
    \                        (if (string-ci=? first-key key)\n                   \
    \         #t\n                            #f))\n                      keys))\n\
    \            #f))))\n", "  (cond\n    [(empty? dict) #f]\n    [(string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key (hash-rest dict))))\n     (check_dict_case\
    \ (hash-rest dict))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n \
    \   [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (define (check-keys\
    \ dict)\n    (cond ((empty? dict) #t)\n          ((and (string? (key dict))\n\
    \                (or (string-ci=? (key dict) (key dict))\n                   \
    \ (string-ci=? (key dict) (key dict))))\n           (check-keys (rest dict)))\n\
    \          (else #f)))\n  (check-keys dict))\n", "  (let ([keys (hash-keys dict)])\n\
    \    (cond [(empty? keys) #f]\n          [(string-ci=? (car keys) (car keys))\
    \ #t]\n          [else #f])))\n", "  (cond\n    [(empty? dict) #f]\n    [(and\
    \ (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (or\
    \ (string-ci=? (hash-ref dict (hash-key dict)) \"apple\")\n              (string-ci=?\
    \ (hash-ref dict (hash-key dict)) \"banana\")))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(string-ci=? (hash-ref dict (hash-keys dict 0))\n          \
    \        (hash-ref dict (hash-keys dict 1)))\n     (check_dict_case (hash-remove\
    \ dict (hash-keys dict 0)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict)\
    \ #f]\n    [(and (string? (hash-ref dict (hash-keys dict 0)))\n          (string-ci=?\
    \ (hash-ref dict (hash-keys dict 0))\n                        (string-upcase (hash-ref\
    \ dict (hash-keys dict 0)))))\n     (check_dict_case (hash-remove dict (hash-keys\
    \ dict 0)))]\n    [(and (string? (hash-ref dict (hash-keys dict 0)))\n       \
    \   (string-ci=? (hash-ref dict (hash-keys dict 0))\n                        (string-downcase\
    \ (hash-ref dict (hash-keys dict 0)))))\n     (check_dict_case (hash-remove dict\
    \ (hash-keys dict 0)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-keys dict 0)))\n          (string-ci=?\
    \ (hash-ref dict (hash-keys dict 0)) (hash-ref dict (hash-keys dict 0)))) #t]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\
    \ (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (if (hash-empty? dict)\n   \
    \   #f\n      (let ([keys (hash-keys dict)])\n        (if (andmap string? keys)\n\
    \            (let ([lower-case-keys (map string-downcase keys)])\n           \
    \   (if (equal? keys lower-case-keys)\n                  #t\n                \
    \  #f))\n            #f))))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(andmap string? (hash-keys dict)) #t]\n    [(andmap symbol?\
    \ (hash-keys dict)) #t]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond [(empty?\
    \ dict) #f]\n        [(andmap string? (hash-keys dict)) #t]\n        [(andmap\
    \ symbol? (hash-keys dict)) #t]\n        [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (or\
    \ (string-ci=? (hash-ref dict (hash-key dict)) \"apple\")\n              (string-ci=?\
    \ (hash-ref dict (hash-key dict)) \"banana\")))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (if (hash-empty?\
    \ dict)\n      #f\n      (let ([keys (hash-keys dict)])\n        (if (every string?\
    \ keys)\n            (if (every (lambda (x) (string-ci=? x (string-upcase x)))\
    \ keys)\n                #t\n                (if (every (lambda (x) (string-ci=?\
    \ x (string-downcase x))) keys)\n                    #t\n                    #f))\n\
    \            #f))))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\n\
    \                       (hash-ref dict (hash-key (hash-rest dict)))))\n     (check_dict_case\
    \ (hash-rest dict))]\n    [else #f]))\n", "  (if (empty? dict)\n      #f\n   \
    \   (let ([keys (hash-keys dict)])\n        (if (andmap string? keys)\n      \
    \      (if (andmap string-ci=? keys)\n                #t\n                #f)\n\
    \            #f))))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\
    \ (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (if (hash-empty? dict)\n      #f\n      (let\
    \ ([keys (hash-keys dict)])\n        (if (andmap string? keys)\n            (let\
    \ ([lower-keys (map string-downcase keys)])\n              (if (equal? keys lower-keys)\n\
    \                  #t\n                  #f))\n            #f))))\n", "  (cond\n\
    \    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref\
    \ dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\n\
    \                       (string-upcase (hash-ref dict (hash-key dict)))))\n  \
    \   (check_dict_case (hash-remove dict (hash-key dict)))]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict))\n                       (string-downcase (hash-ref dict (hash-key dict)))))\n\
    \     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else #f]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref\
    \ dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\
    \ (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict))\n                       (hash-ref dict (hash-key (hash-rest dict)))))\n\
    \     (check_dict_case (hash-rest dict))]\n    [else #f]))\n", "  (define (check-dict-case-helper\
    \ dict)\n    (cond ((empty? dict) #t)\n          ((and (string? (hash-ref dict\
    \ (hash-key dict)))\n                (string-ci=? (hash-ref dict (hash-key dict))\
    \ (hash-ref dict (hash-key dict))))\n           (check-dict-case-helper (hash-remove\
    \ dict (hash-key dict))))\n          (else #f)))\n  (check-dict-case-helper dict))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref\
    \ dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [else #f]))\n", "  (if (hash-empty? dict)\n      #f\n      (let ((keys (hash-keys\
    \ dict)))\n        (if (string? (car keys))\n            (if (string-ci=? (car\
    \ keys) (car keys))\n                (check_dict_case (hash-remove dict (car keys)))\n\
    \                #f)\n            #f))))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (string-upcase (hash-ref dict (hash-key dict)))))\n\
    \     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (string-downcase (hash-ref dict (hash-key dict)))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (define (check-key\
    \ key)\n    (cond\n      [(string? key) (string-ci=? key (string-downcase key))]\n\
    \      [(symbol? key) (symbol-ci=? key (string->symbol (string-downcase (symbol->string\
    \ key)) ))]\n      [else #f]))\n  (define (check-keys keys)\n    (cond\n     \
    \ [(empty? keys) #t]\n      [(check-key (first keys)) (check-keys (rest keys))]\n\
    \      [else #f]))\n  (check-keys (hash-keys dict)))\n", "  (define (check_dict_case_helper\
    \ dict)\n    (cond\n      [(empty? dict) #t]\n      [(and (string? (key dict))\
    \ (string? (key (rest dict))))\n       (if (or (and (string-ci=? (key dict) (key\
    \ (rest dict)))\n                    (check_dict_case_helper (rest dict)))\n \
    \              (and (string-ci=? (key dict) (key (rest dict)))\n             \
    \       (check_dict_case_helper (rest dict))))\n           #t\n           #f)]\n\
    \      [else #f]))\n  (if (empty? dict)\n      #f\n      (check_dict_case_helper\
    \ dict)))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\n\
    \                       (hash-ref dict (hash-key (hash-rest dict)))))\n     (check_dict_case\
    \ (hash-rest dict))]\n    [else #f]))\n", "  (if (hash-empty? dict)\n      #f\n\
    \      (let ([keys (hash-keys dict)])\n        (if (andmap string? keys)\n   \
    \         (let ([lower-keys (map string-downcase keys)])\n              (if (equal?\
    \ keys lower-keys)\n                  #t\n                  #f))\n           \
    \ #f))))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref\
    \ dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\
    \ (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (if (hash-empty? dict)\n   \
    \   #f\n      (let ([keys (hash-keys dict)])\n        (if (andmap string? keys)\n\
    \            (let ([first-key (car keys)])\n              (andmap (lambda (key)\n\
    \                        (if (string-ci=? first-key key)\n                   \
    \         #t\n                            #f))\n                      keys))\n\
    \            #f))))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\
    \ (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string?\
    \ (hash-ref dict (hash-key (hash-rest dict))))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict))\n                       (hash-ref dict (hash-key (hash-rest\
    \ dict)))))\n     (check_dict_case (hash-rest dict))]\n    [else #f]))\n", " \
    \ (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref\
    \ dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\n\
    \                       (hash-ref dict (hash-key (hash-rest dict)))))\n     (check_dict_case\
    \ (hash-rest dict))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n \
    \   [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (define (check-dict-case-helper\
    \ dict)\n    (cond\n      [(empty? dict) #t]\n      [(and (string? (key dict))\
    \ (string? (key (rest dict))))\n       (and (check-dict-case-helper (rest dict))\n\
    \            (or (string-ci=? (key dict) (key (rest dict)))\n                (string-ci=?\
    \ (key dict) (key (rest dict)))))\n      ]\n      [else #f]))\n  (check-dict-case-helper\
    \ dict))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref\
    \ dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\
    \ (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (if (empty? dict)\n      #f\n      (let ([keys\
    \ (hash-keys dict)])\n        (if (all-lower-case? keys)\n            #t\n   \
    \         (if (all-upper-case? keys)\n                #t\n                #f)))))\n",
  "  (if (hash-empty? dict)\n      #f\n      (let ([keys (hash-keys dict)])\n    \
    \    (if (andmap string? keys)\n            (let ([lower? (andmap string-ci=?\
    \ keys)])\n              (if (or lower? (andmap string-ci=? (map string-upcase\
    \ keys)))\n                  #t\n                  #f))\n            #f))))\n",
  "  (if (hash-empty? dict)\n      #f\n      (let ([keys (hash-keys dict)])\n    \
    \    (if (andmap string? keys)\n            (let ([lower-keys (map string-downcase\
    \ keys)])\n              (if (equal? keys lower-keys)\n                  #t\n\
    \                  #f))\n            #f))))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict))\n                       (hash-ref dict (hash-key (hash-rest\
    \ dict)))))\n     (check_dict_case (hash-rest dict))]\n    [else #f]))\n", " \
    \ (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (key dict)) (string?\
    \ (key (rest dict))))\n     (if (and (string-ci=? (key dict) (key (rest dict)))\n\
    \              (check_dict_case (rest dict)))\n         #t\n         #f)]\n  \
    \  [else #f]))\n", "  (if (empty? dict)\n      #f\n      (let ([keys (hash-keys\
    \ dict)])\n        (if (andmap string? keys)\n            (if (andmap string-ci=?\
    \ keys)\n                #t\n                #f)\n            #f))))\n", "  (cond\n\
    \    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) \"a\"))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [(and (string? (hash-ref dict (hash-key\
    \ dict)))\n          (string-ci=? (hash-ref dict (hash-key dict)) \"A\"))\n  \
    \   (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else #f]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict)) \"\
    a\"))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) \"A\"))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [else #f]))\n", "  (cond ((empty? dict) #f)\n        ((and (string? (hash-ref\
    \ dict (hash-key dict)))\n              (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n         (check_dict_case (hash-remove\
    \ dict (hash-key dict))))\n        (else #f)))\n", "  (cond\n    [(empty? dict)\
    \ #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) \"apple\")) #t]\n    [else #f]))\n", "  (if\
    \ (hash-empty? dict)\n      #f\n      (let ([keys (hash-keys dict)])\n       \
    \ (if (andmap string? keys)\n            (let ([first-key (car keys)])\n     \
    \         (andmap (lambda (key) (string-ci=? first-key key)) keys))\n        \
    \    #f))))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\
    \ \"a\"))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [(and\
    \ (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) \"A\"))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string? (hash-ref\
    \ dict (hash-key (hash-rest dict))))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict))\n                       (hash-ref dict (hash-key (hash-rest dict)))))\n\
    \     (check_dict_case (hash-rest dict))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-lower-case?\
    \ (hash-ref dict (hash-key dict))))\n     (check-dict-case-helper dict)]\n   \
    \ [(and (string? (hash-ref dict (hash-key dict)))\n          (string-upper-case?\
    \ (hash-ref dict (hash-key dict))))\n     (check-dict-case-helper dict)]\n   \
    \ [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\n\
    \                       (string-upcase (hash-ref dict (hash-key dict)))))\n  \
    \   (check_dict_case (hash-remove dict (hash-key dict)))]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict))\n                       (string-downcase (hash-ref dict (hash-key dict)))))\n\
    \     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else #f]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref\
    \ dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\
    \ (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) \"a\"))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) \"A\"))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                       (string-downcase (hash-ref\
    \ dict (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                       (string-upcase (hash-ref\
    \ dict (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (if (hash-empty?\
    \ dict)\n      #f\n      (let ([keys (hash-keys dict)])\n        (if (andmap string?\
    \ keys)\n            (let ([first-key (car keys)])\n              (andmap (lambda\
    \ (key)\n                        (equal? (string-upcase key) first-key))\n   \
    \                   keys))\n            #f))))\n", "  (cond\n    [(empty? dict)\
    \ #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                       (string-upcase (hash-ref\
    \ dict (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                       (string-downcase (hash-ref\
    \ dict (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(string?\
    \ (hash-ref dict (hash-key dict))) #t]\n    [else #f]))\n", "  (if (empty? dict)\n\
    \      #f\n      (let ([keys (hash-keys dict)])\n        (if (andmap string? keys)\n\
    \            (let ([first-key (car keys)])\n              (andmap (lambda (key)\n\
    \                        (string-ci=? first-key key))\n                      keys))\n\
    \            #f))))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\
    \ (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (if (hash-empty? dict)\n      #f\n      (let\
    \ ([keys (hash-keys dict)])\n        (if (andmap string? keys)\n            (if\
    \ (andmap string-ci=? keys)\n                #t\n                #f)\n       \
    \     #f))))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\n\
    \                       (string-upcase (hash-ref dict (hash-key dict)))))\n  \
    \   (check_dict_case (hash-remove dict (hash-key dict)))]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict))\n                       (string-downcase (hash-ref dict (hash-key dict)))))\n\
    \     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else #f]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict))\n                    \
    \   (string-upcase (hash-ref dict (hash-key dict)))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict))\n                    \
    \   (string-downcase (hash-ref dict (hash-key dict)))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                       (string-downcase (hash-ref\
    \ dict (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                       (string-upcase (hash-ref\
    \ dict (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (if (empty? dict)\n      #f\n\
    \      (let ([keys (hash-keys dict)])\n        (if (andmap string? keys)\n   \
    \         (if (andmap (lambda (x) (string-ci=? x (string-upcase x))) keys)\n \
    \               #t\n                (andmap (lambda (x) (string-ci=? x (string-downcase\
    \ x))) keys))\n            #f))))\n", "  (define (check-keys dict)\n    (cond\n\
    \      [(empty? dict) #t]\n      [(and (string? (key dict))\n            (string-ci=?\
    \ (key dict) (key dict)))\n       (check-keys (rest dict))]\n      [else #f]))\n\
    \  (if (empty? dict)\n      #f\n      (check-keys dict)))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                       (string-downcase (hash-ref\
    \ dict (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                       (string-upcase (hash-ref\
    \ dict (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict))\n                       (string-downcase (hash-ref dict\
    \ (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict))\n                       (string-upcase (hash-ref dict\
    \ (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\n\
    \                       (hash-ref dict (hash-key (hash-rest dict)))))\n     (check_dict_case\
    \ (hash-rest dict))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n \
    \   [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (if (hash-empty?\
    \ dict)\n      #f\n      (let ([keys (hash-keys dict)])\n        (if (andmap string?\
    \ keys)\n            (if (andmap string-ci=? keys)\n                #t\n     \
    \           #f)\n            #f))))\n", "  (cond\n    [(empty? dict) #f]\n   \
    \ [(string-ci=? (hash-ref dict (hash-key dict 0)) (hash-ref dict (hash-key dict\
    \ 0))) #t]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (if (empty? dict)\n      #f\n\
    \      (let ([keys (hash-keys dict)])\n        (if (andmap string? keys)\n   \
    \         (let ([lower (map string-downcase keys)]\n                  [upper (map\
    \ string-upcase keys)])\n              (if (equal? keys lower)\n             \
    \     #t\n                  (if (equal? keys upper)\n                      #t\n\
    \                      #f)))\n            #f))))\n", "  (cond\n    [(empty? dict)\
    \ #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond [(empty?\
    \ dict) #f]\n        [(andmap string? (hash-keys dict)) #t]\n        [(andmap\
    \ symbol? (hash-keys dict)) #t]\n        [else #f]))\n", "  (if (hash-empty? dict)\n\
    \      #f\n      (let ([key-list (hash-keys dict)])\n        (if (andmap string?\
    \ key-list)\n            (if (andmap string-ci=? key-list)\n                #t\n\
    \                #f)\n            #f))))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict))\n                       (string-upcase (hash-ref dict\
    \ (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict))\n                       (string-downcase (hash-ref dict\
    \ (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\
    \ (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (define (check-dict-case-helper\
    \ dict)\n    (cond\n      [(empty? dict) #t]\n      [(and (string? (key dict))\
    \ (string? (key (rest dict))))\n       (if (or (and (string-ci=? (key dict) (key\
    \ (rest dict)))\n                    (check-dict-case-helper (rest dict)))\n \
    \              (and (string-ci=? (key dict) (key (rest dict)))\n             \
    \       (check-dict-case-helper (rest dict))))\n           #t\n           #f)]\n\
    \      [else #f]))\n  (if (empty? dict)\n      #f\n      (check-dict-case-helper\
    \ dict)))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict)) \"\
    a\"))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) \"A\"))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\
    \ (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict))\n                       (string-upcase (hash-ref dict\
    \ (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict))\n                       (string-downcase (hash-ref dict\
    \ (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\
    \ (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (if (hash-empty? dict)\n   \
    \   #f\n      (let ([keys (hash-keys dict)])\n        (if (andmap (lambda (x)\
    \ (string? x)) keys)\n            (let ([upper? (andmap (lambda (x) (string-upper-case?\
    \ x)) keys)])\n              (if (or upper? (andmap (lambda (x) (string-lower-case?\
    \ x)) keys))\n                  #t\n                  #f))\n            #f))))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict))\n                    \
    \   (string-upcase (hash-ref dict (hash-key dict)))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict))\n                    \
    \   (string-downcase (hash-ref dict (hash-key dict)))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (if (hash-empty?\
    \ dict)\n      #f\n      (let ([keys (hash-keys dict)])\n        (if (andmap string?\
    \ keys)\n            (let ([lower-keys (map string-downcase keys)])\n        \
    \      (if (equal? keys lower-keys)\n                  #t\n                  #f))\n\
    \            #f))))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\
    \ (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict))\n                       (string-upcase (hash-ref dict\
    \ (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict))\n                       (string-downcase (hash-ref dict\
    \ (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\
    \ (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                       (string-upcase (hash-ref\
    \ dict (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                       (string-downcase (hash-ref\
    \ dict (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) \"a\"))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) \"A\"))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                       (string-upcase (hash-ref\
    \ dict (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                       (string-downcase (hash-ref\
    \ dict (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (if (hash-empty? dict)\n      #f\n      (let\
    \ ([keys (hash-keys dict)])\n        (if (andmap string? keys)\n            (if\
    \ (andmap char-lower-case? (string->list (car keys)))\n                (andmap\
    \ char-lower-case? (map string->list keys))\n                (andmap char-upper-case?\
    \ (map string->list keys)))\n            #f))))\n", "  (cond\n    [(empty? dict)\
    \ #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string?\
    \ (hash-ref dict (hash-key (hash-rest dict))))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict))\n                       (hash-ref dict (hash-key (hash-rest\
    \ dict)))))\n     (check_dict_case (hash-rest dict))]\n    [else #f]))\n", " \
    \ (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref\
    \ dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (string-upcase (hash-ref dict\
    \ (hash-key dict)))\n                        (hash-ref dict (hash-key dict))))\n\
    \     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (string-downcase (hash-ref\
    \ dict (hash-key dict)))\n                        (hash-ref dict (hash-key dict))))\n\
    \     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else #f]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else\
    \ #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref\
    \ dict (hash-key dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [else #f]))\n", "  (let ([keys (hash-keys dict)])\n    (cond [(empty? keys)\
    \ #f]\n          [(andmap string? keys) #t]\n          [(andmap symbol? keys)\
    \ #t]\n          [else #f])))\n", "  (cond\n    [(empty? dict) #f]\n    [(and\
    \ (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict))\n                       (string-upcase (hash-ref dict\
    \ (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict))\n                       (string-downcase (hash-ref dict\
    \ (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n\
    \    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))) #t]\n    [else #f]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
