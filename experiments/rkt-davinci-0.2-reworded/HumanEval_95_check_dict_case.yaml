name: HumanEval_95_check_dict_case
language: rkt
prompt: "#lang racket\n\n;; Given a hash, return #t if all keys are strings in lower\
  \ \n;; case or all keys are strings in upper case, else return #f.\n;; The function\
  \ should return #f is the given hash is empty.\n;; Examples:\n;; >>> (check_dict_case\
  \ #hash((\"a\" .  \"apple\") (\"b\" .  \"banana\")))\n;; #t\n;; >>> (check_dict_case\
  \ #hash((\"a\" .  \"apple\") (\"A\" .  \"banana\") (\"B\" .  \"banana\")))\n;; #f\n\
  ;; >>> (check_dict_case #hash((\"a\" .  \"apple\") (8 .  \"banana\") (\"a\" .  \"\
  apple\")))\n;; #f\n;; >>> (check_dict_case #hash((\"Name\" .  \"John\") (\"Age\"\
  \ .  \"36\") (\"City\" .  \"Houston\")))\n;; #f\n;; >>> (check_dict_case #hash((\"\
  STATE\" .  \"NC\") (\"ZIP\" .  \"12345\")))\n;; #t\n(define (check_dict_case dict)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate check_dict_case))\n\
  \    (check-equal? (candidate #hash((\"p\" .  \"pineapple\") (\"b\" .  \"banana\"\
  ))) #t)\n    (check-equal? (candidate #hash((\"p\" .  \"pineapple\") (\"A\" .  \"\
  banana\") (\"B\" .  \"banana\"))) #f)\n    (check-equal? (candidate #hash((\"p\"\
  \ .  \"pineapple\") (\"5\" .  \"banana\") (\"a\" .  \"apple\"))) #f)\n    (check-equal?\
  \ (candidate #hash((\"Name\" .  \"John\") (\"Age\" .  \"36\") (\"City\" .  \"Houston\"\
  ))) #f)\n    (check-equal? (candidate #hash((\"STATE\" .  \"NC\") (\"ZIP\" .  \"\
  12345\"))) #t)\n    (check-equal? (candidate #hash((\"fruit\" .  \"Orange\") (\"\
  taste\" .  \"Sweet\"))) #t)\n    (check-equal? (candidate #hash()) #f)\n))\n\n(test-humaneval)"
completions: ["  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict\
    \ (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\n\
    \                       (string-upcase (hash-ref dict (hash-key dict)))))\n  \
    \   (check_dict_case (hash-remove dict (hash-key dict)))]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict))\n                       (string-downcase (hash-ref dict (hash-key dict)))))\n\
    \     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else #f]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict))\n                    \
    \   (hash-ref dict (hash-key (hash-rest dict)))))\n     (check_dict_case (hash-rest\
    \ dict))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (if (hash-empty? dict)\n   \
    \   #f\n      (let ([keys (hash-keys dict)])\n        (if (andmap string? keys)\n\
    \            (let ([first-key (car keys)])\n              (andmap (lambda (key)\n\
    \                        (if (string-ci=? first-key key)\n                   \
    \         #t\n                            #f))\n                      keys))\n\
    \            #f))))\n", "  (define (check-dict-case-helper dict)\n    (cond\n\
    \      [(empty? dict) #t]\n      [(and (string? (key dict)) (string-ci=? (key\
    \ dict) (key dict))) (check-dict-case-helper (rest dict))]\n      [else #f]))\n\
    \  (check-dict-case-helper dict))\n", "  (cond\n    [(empty? dict) #f]\n    [(and\
    \ (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                       (string-downcase (hash-ref\
    \ dict (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict))\n                       (string-upcase (hash-ref\
    \ dict (hash-key dict)))))\n     (check_dict_case (hash-remove dict (hash-key\
    \ dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-keys dict 0)))\n        \
    \  (string-ci=? (string-upcase (hash-ref dict (hash-keys dict 0)))\n         \
    \              (hash-ref dict (hash-keys dict 0))))\n     (check_dict_case (hash-remove\
    \ dict (hash-keys dict 0)))]\n    [(and (string? (hash-ref dict (hash-keys dict\
    \ 0)))\n          (string-ci=? (string-downcase (hash-ref dict (hash-keys dict\
    \ 0)))\n                       (hash-ref dict (hash-keys dict 0))))\n     (check_dict_case\
    \ (hash-remove dict (hash-keys dict 0)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(andmap string? (hash-keys dict)) #t]\n    [(andmap symbol?\
    \ (hash-keys dict)) #t]\n    [else #f]))\n", "  (cond\n    [(empty? dict) #f]\n\
    \    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref\
    \ dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) \"a\"))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) \"A\"))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) \"a\"))\n     (check_dict_case (hash-remove\
    \ dict (hash-key dict)))]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) \"A\"))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (cond\n    [(empty?\
    \ dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n          (string-ci=?\
    \ (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key dict))))\n     (check_dict_case\
    \ (hash-remove dict (hash-key dict)))]\n    [else #f]))\n", "  (let ([keys (hash-keys\
    \ dict)])\n    (cond\n      [(empty? keys) #f]\n      [(andmap string? keys)\n\
    \       (let ([first-key (first keys)])\n         (andmap (lambda (key)\n    \
    \               (string-ci=? first-key key))\n                 keys))]\n     \
    \ [else #f])))\n", "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref\
    \ dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key dict))\n\
    \                       (string-upcase (hash-ref dict (hash-key dict)))))\n  \
    \   (check_dict_case (hash-remove dict (hash-key dict)))]\n    [(and (string?\
    \ (hash-ref dict (hash-key dict)))\n          (string-ci=? (hash-ref dict (hash-key\
    \ dict))\n                       (string-downcase (hash-ref dict (hash-key dict)))))\n\
    \     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else #f]))\n",
  "  (cond\n    [(empty? dict) #f]\n    [(and (string? (hash-ref dict (hash-key dict)))\n\
    \          (string-ci=? (hash-ref dict (hash-key dict)) (hash-ref dict (hash-key\
    \ dict))))\n     (check_dict_case (hash-remove dict (hash-key dict)))]\n    [else\
    \ #f]))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
