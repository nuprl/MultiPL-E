name: HumanEval_118_get_closest_vowel
language: rkt
prompt: "#lang racket\n\n;; You are given a word. Your task is to find the closest\
  \ vowel that stands between \n;; two consonants from the right side of the word\
  \ (case sensitive).\n;; Vowels in the beginning and ending doesn't count. Return\
  \ empty string if you didn't\n;; find any vowel met the above condition. \n;; You\
  \ may assume that the given string contains English letter only.\n;; Example:\n\
  ;; >>> (get_closest_vowel \"yogurt\")\n;; \"u\"\n;; >>> (get_closest_vowel \"FULL\"\
  )\n;; \"U\"\n;; >>> (get_closest_vowel \"quick\")\n;; \"\"\n;; >>> (get_closest_vowel\
  \ \"ab\")\n;; \"\"\n(define (get_closest_vowel word)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_closest_vowel))\n\
  \    (check-equal? (candidate \"yogurt\") \"u\")\n    (check-equal? (candidate \"\
  full\") \"u\")\n    (check-equal? (candidate \"easy\") \"\")\n    (check-equal?\
  \ (candidate \"eAsy\") \"\")\n    (check-equal? (candidate \"ali\") \"\")\n    (check-equal?\
  \ (candidate \"bad\") \"a\")\n    (check-equal? (candidate \"most\") \"o\")\n  \
  \  (check-equal? (candidate \"ab\") \"\")\n    (check-equal? (candidate \"ba\")\
  \ \"\")\n    (check-equal? (candidate \"quick\") \"\")\n    (check-equal? (candidate\
  \ \"anime\") \"i\")\n    (check-equal? (candidate \"Asia\") \"\")\n    (check-equal?\
  \ (candidate \"Above\") \"o\")\n))\n\n(test-humaneval)"
completions: ["  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c\
    \ #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\\
    u)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (if (empty? word)\n        \"\"\n        (if (is-vowel? (first word))\n\
    \            (if (is-consonant? (second word))\n                (string (first\
    \ word))\n                (get-closest-vowel-helper (rest word)))\n          \
    \  (get-closest-vowel-helper (rest word)))))\n  (get-closest-vowel-helper (reverse\
    \ word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (get-closest-vowel-from-right word)\n    (let loop ([word (string-reverse\
    \ word)]\n               [prev-c #\\])\n               [prev-vowel #\\])\n   \
    \   (if (string-empty? word)\n          (string-reverse (string prev-vowel))\n\
    \          (let ([c (string-ref word 0)])\n            (if (and (is-consonant?\
    \ prev-c)\n                     (is-vowel? c))\n                (loop (substring\
    \ word 1) c c)\n                (loop (substring word 1) c prev-vowel))))))\n\
    \  (get-closest-vowel-from-right word))\n", "  (define (get-closest-vowel-iter\
    \ word closest-vowel)\n    (cond\n      [(empty? word) closest-vowel]\n      [(member\
    \ (first word) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n       (get-closest-vowel-iter\
    \ (rest word) (first word))]\n      [else (get-closest-vowel-iter (rest word)\
    \ closest-vowel)]))\n  (get-closest-vowel-iter (reverse word) \"\"))\n", "  (define\
    \ (get-closest-vowel-iter word i)\n    (cond\n      [(= i (string-length word))\
    \ \"\"]\n      [(and (char-vowel? (string-ref word i)) (char-consonant? (string-ref\
    \ word (- i 1)))) (string-ref word i)]\n      [else (get-closest-vowel-iter word\
    \ (+ i 1))]))\n  (get-closest-vowel-iter word 0))\n", "  (define (is-vowel? c)\n\
    \    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n \
    \       (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is-consonant? c)\n\
    \    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper word)\n    (if\
    \ (or (null? word)\n            (null? (cdr word)))\n        \"\"\n        (if\
    \ (and (is-consonant? (car word))\n                 (is-vowel? (cadr word)))\n\
    \            (string (cadr word))\n            (get-closest-vowel-helper (cdr\
    \ word)))))\n  (get-closest-vowel-helper (string-&gt;list word)))\n</code>\n",
  "  (define (is-vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\\
    i) (char=? c #\\o) (char=? c #\\u)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (get-closest-vowel-helper word)\n    (cond [(empty? word) empty]\n\
    \          [(is-vowel? (first word)) (first word)]\n          [(is-consonant?\
    \ (first word)) (get-closest-vowel-helper (rest word))]))\n  (get-closest-vowel-helper\
    \ (reverse word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(is-vowel? (first word)) (first word)]\n      [(is-consonant?\
    \ (first word)) (find-closest-vowel (rest word))]))\n  (find-closest-vowel (reverse\
    \ word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-closest-vowel word)\n    (let loop ([word (string-reverse\
    \ word)]\n               [prev-is-consonant? #f]\n               [prev-is-vowel?\
    \ #f])\n      (cond [(empty? word) \"\"]\n            [(is-vowel? (first word))\n\
    \             (if prev-is-consonant?\n                 (string (first word))\n\
    \                 (loop (rest word) #f #t))]\n            [(is-consonant? (first\
    \ word))\n             (if prev-is-vowel?\n                 (string (first word))\n\
    \                 (loop (rest word) #t #f))])))\n  (find-closest-vowel word))\n",
  "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n   \
    \     (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n\
    \    (if (or (empty? word)\n            (empty? (rest word)))\n        \"\"\n\
    \        (if (and (is-consonant? (first word))\n                 (is-vowel? (second\
    \ word)))\n            (string (second word))\n            (find-closest-vowel\
    \ (rest word)))))\n  (find-closest-vowel (reverse (string->list word))))\n", " \
    \ (let ([vowels (regexp-match* #rx\"[aeiou]\" word)])\n    (if (empty? vowels)\n\
    \        \"\"\n        (let ([consonants (regexp-match* #rx\"[^aeiou]\" word)])\n\
    \          (if (empty? consonants)\n              \"\"\n              (let ([last-consonant\
    \ (last consonants)])\n                (let ([last-vowel (last vowels)])\n   \
    \               (if (&gt; (string-length last-vowel) (string-length last-consonant))\n\
    \                      \"\"\n                      (string-ref last-vowel 0)))))))))\n\
    </code>\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-closest-vowel word)\n    (if (or (null? word) (null? (cdr\
    \ word)))\n        \"\"\n        (if (and (is-consonant? (car word)) (is-vowel?\
    \ (cadr word)))\n            (string (cadr word))\n            (find-closest-vowel\
    \ (cdr word)))))\n  (find-closest-vowel word))\n", "  (define (is-vowel? c)\n\
    \    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n \
    \       (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is-consonant? c)\n\
    \    (not (is-vowel? c)))\n  (define (get-closest-vowel-from-right word)\n   \
    \ (if (or (null? word) (null? (cdr word)))\n        \"\"\n        (if (and (is-consonant?\
    \ (car word)) (is-vowel? (cadr word)))\n            (string (cadr word))\n   \
    \         (get-closest-vowel-from-right (cdr word)))))\n  (get-closest-vowel-from-right\
    \ (reverse (string->list word))))\n", "  (define (is-vowel? c)\n    (or (char=?\
    \ c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c\
    \ #\\o)\n        (char=? c #\\u)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-closest-vowel word)\n    (if (or (null? word) (null? (cdr\
    \ word)))\n        \"\"\n        (if (and (is-consonant? (car word))\n       \
    \          (is-vowel? (cadr word)))\n            (string (cadr word))\n      \
    \      (find-closest-vowel (cdr word)))))\n  (find-closest-vowel (string-reverse\
    \ word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (get-closest-vowel-helper word)\n    (cond\n      [(empty? word)\
    \ empty]\n      [(is-vowel? (first word)) (first word)]\n      [(is-consonant?\
    \ (first word)) (get-closest-vowel-helper (rest word))]))\n  (get-closest-vowel-helper\
    \ (reverse word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (get-closest-vowel-helper word)\n    (cond\n    \
    \  [(empty? word) empty]\n      [(is-vowel? (first word)) (first word)]\n    \
    \  [(is-consonant? (first word)) (get-closest-vowel-helper (rest word))]))\n \
    \ (get-closest-vowel-helper (reverse word)))\n", "  (define (is-vowel? c)\n  \
    \  (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n\
    \    (cond ((null? word) \"\")\n          ((and (is-vowel? (car word))\n     \
    \           (is-consonant? (cadr word)))\n           (car word))\n          (else\
    \ (find-closest-vowel (cdr word)))))\n  (find-closest-vowel word))\n", "  (define\
    \ (is_vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\\
    O #\\U)))\n  (define (is_consonant? ch)\n    (not (is_vowel? ch)))\n  (define\
    \ (find-closest-vowel word)\n    (cond\n      [(empty? word) empty]\n      [(and\
    \ (is_vowel? (first word)) (is_consonant? (second word))) (first word)]\n    \
    \  [else (find-closest-vowel (rest word))]))\n  (find-closest-vowel word))\n",
  "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is_consonant? c)\n    (not (is_vowel? c)))\n  (define\
    \ (get-closest-vowel-helper word)\n    (cond\n      [(empty? word) empty]\n  \
    \    [(is_vowel? (first word)) (first word)]\n      [(is_consonant? (first word))\
    \ (get-closest-vowel-helper (rest word))]))\n  (get-closest-vowel-helper (reverse\
    \ word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-closest-vowel word)\n    (cond\n      [(empty? word) empty]\n\
    \      [(is-vowel? (first word)) (first word)]\n      [(is-consonant? (first word))\
    \ (find-closest-vowel (rest word))]))\n  (define (find-closest-consonant word)\n\
    \    (cond\n      [(empty? word) empty]\n      [(is-consonant? (first word)) (first\
    \ word)]\n      [(is-vowel? (first word)) (find-closest-consonant (rest word))]))\n\
    \  (cond\n    [(empty? word) empty]\n    [(is-vowel? (first word)) empty]\n  \
    \  [(is-consonant? (first word))\n     (cond\n       [(empty? (rest word)) empty]\n\
    \       [(is-vowel? (second word)) (second word)]\n       [(is-consonant? (second\
    \ word))\n        (cond\n          [(empty? (rest (rest word))) empty]\n     \
    \     [(is-vowel? (third word)) (third word)]\n          [(is-consonant? (third\
    \ word))\n           (cond\n             [(empty? (rest (rest (rest word)))) empty]\n\
    \             [(is-vowel? (fourth word)) (fourth word)]\n             [(is-consonant?\
    \ (fourth word))\n              (cond\n                [(empty? (rest (rest (rest\
    \ (rest word))))) empty]\n                [(is-vowel? (fifth word)) (fifth word)]\n\
    \                [(is-consonant? (fifth word))\n                 (cond\n     \
    \              [(empty? (rest (rest (rest (rest (rest word)))))) empty]\n    \
    \               [(is-vowel? (sixth word)) (sixth word)]\n                   [(is-consonant?",
  "  (define vowels '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U))\n  (define\
    \ (is-vowel? c)\n    (member c vowels))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (is-consonant-vowel-consonant? word)\n    (and (is-consonant?\
    \ (string-ref word 0))\n         (is-vowel? (string-ref word 1))\n         (is-consonant?\
    \ (string-ref word 2))))\n  (define (is-consonant-vowel? word)\n    (and (is-consonant?\
    \ (string-ref word 0))\n         (is-vowel? (string-ref word 1))))\n  (define\
    \ (is-vowel-consonant? word)\n    (and (is-vowel? (string-ref word 0))\n     \
    \    (is-consonant? (string-ref word 1))))\n  (define (is-consonant-vowel-consonant-vowel?\
    \ word)\n    (and (is-consonant? (string-ref word 0))\n         (is-vowel? (string-ref\
    \ word 1))\n         (is-consonant? (string-ref word 2))\n         (is-vowel?\
    \ (string-ref word 3))))\n  (define (is-consonant-vowel-consonant-vowel-consonant?\
    \ word)\n    (and (is-consonant? (string-ref word 0))\n         (is-vowel? (string-ref\
    \ word 1))\n         (is-consonant? (string-ref word 2))\n         (is-vowel?\
    \ (string-ref word 3))\n         (is-consonant? (string-ref word 4))))\n  (cond\n\
    \    [(is-consonant-vowel-consonant? word) (string-ref word 1)]\n    [(is-vowel-consonant?\
    \ word) (string-ref word 0)]", "  (define (is-vowel? c)\n    (member c '(#\\a\
    \ #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n\
    \    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(is-vowel? (first word)) (first word)]\n\
    \      [(is-consonant? (first word)) (get-closest-vowel-helper (rest word))]))\n\
    \  (get-closest-vowel-helper (reverse word)))\n", "  (define (is_vowel? c)\n \
    \   (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n  \
    \      (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is_consonant? c)\n\
    \    (not (is_vowel? c)))\n  (define (find-closest-vowel word)\n    (cond\n  \
    \    [(empty? word) empty]\n      [(and (is_vowel? (first word))\n           \
    \ (is_consonant? (second word)))\n       (first word)]\n      [else (find-closest-vowel\
    \ (rest word))]))\n  (find-closest-vowel (reverse word)))\n", "  (define (is_vowel?\
    \ c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"\
    U\")))\n  (define (is_consonant? c)\n    (not (is_vowel? c)))\n  (define (find-closest-vowel\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is_vowel? (first word))\
    \ (first word)]\n      [else (find-closest-vowel (rest word))]))\n  (define (find-closest-consonant\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is_consonant? (first\
    \ word)) (first word)]\n      [else (find-closest-consonant (rest word))]))\n\
    \  (define (find-closest-vowel-between-consonants word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(and (is_vowel? (first word))\n            (is_consonant?\
    \ (second word))\n            (is_consonant? (third word)))\n       (first word)]\n\
    \      [else (find-closest-vowel-between-consonants (rest word))]))\n  (cond\n\
    \    [(empty? word) empty]\n    [(is_vowel? (first word)) empty]\n    [(is_consonant?\
    \ (first word))\n     (cond\n       [(empty? (rest word)) empty]\n       [(is_vowel?\
    \ (second word)) empty]\n       [(is_consonant? (second word))\n        (cond\n\
    \          [(empty? (rest (rest word))) empty]\n          [(is_vowel? (third word))\
    \ empty]\n          [(is_consonant? (third word))\n           (find-closest-vowel-between-consonants\
    \ (rest (rest (rest word))))])])]))\n", "  (define (is_vowel? c)\n    (or (char=?\
    \ c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c\
    \ #\\o)\n        (char=? c #\\u)))\n  (define (is_consonant? c)\n    (not (is_vowel?\
    \ c)))\n  (define (get-closest-vowel-helper word)\n    (if (or (null? word)\n\
    \            (null? (cdr word)))\n        \"\"\n        (if (and (is_consonant?\
    \ (car word))\n                 (is_vowel? (cadr word)))\n            (string\
    \ (cadr word))\n            (get-closest-vowel-helper (cdr word)))))\n  (get-closest-vowel-helper\
    \ (string->list word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\\
    e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n  \
    \  (not (is-vowel? c)))\n  (define (get-closest-vowel-helper word)\n    (if (or\
    \ (empty? word) (empty? (rest word)))\n        \"\"\n        (if (and (is-consonant?\
    \ (first word))\n                 (is-vowel? (second word)))\n            (string\
    \ (second word))\n            (get-closest-vowel-helper (rest word)))))\n  (get-closest-vowel-helper\
    \ (reverse (string->list word))))\n", "  (define (is-vowel? c)\n    (or (char=?\
    \ c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c\
    \ #\\o)\n        (char=? c #\\u)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (get-vowel-index word)\n    (let loop ((i (sub1 (string-length\
    \ word))))\n      (cond ((< i 0) #f)\n            ((and (is-vowel? (string-ref\
    \ word i))\n                  (is-consonant? (string-ref word (sub1 i)))\n   \
    \               (is-consonant? (string-ref word (add1 i))))\n             i)\n\
    \            (else (loop (sub1 i))))))\n  (define (get-vowel word)\n    (let ((i\
    \ (get-vowel-index word)))\n      (if i (string (string-ref word i)) \"\")))\n\
    \  (get-vowel word))\n", "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is_consonant? c)\n    (not\
    \ (is_vowel? c)))\n  (define (find-closest-vowel word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(is_vowel? (first word)) (first word)]\n      [else (find-closest-vowel\
    \ (rest word))]))\n  (define (find-closest-consonant word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(is_consonant? (first word)) (first word)]\n      [else\
    \ (find-closest-consonant (rest word))]))\n  (define (find-closest-vowel-between-consonants\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(and (is_vowel? (first\
    \ word))\n            (is_consonant? (second word))\n            (is_consonant?\
    \ (third word)))\n       (first word)]\n      [else (find-closest-vowel-between-consonants\
    \ (rest word))]))\n  (cond\n    [(empty? word) empty]\n    [(is_vowel? (first\
    \ word)) empty]\n    [(is_consonant? (first word))\n     (cond\n       [(empty?\
    \ (rest word)) empty]\n       [(is_vowel? (second word)) empty]\n       [(is_consonant?\
    \ (second word))\n        (cond\n          [(empty? (rest (rest word))) empty]\n\
    \          [(is_vowel? (third word)) empty]\n          [(is_consonant? (third\
    \ word))\n           (find-closest-vowel-between-consonants (rest (rest (rest\
    \ word))))])])])\n    [else empty]))\n", "  (define (is_vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is_consonant?\
    \ c)\n    (not (is_vowel? c)))\n  (define (find-vowel-from-right word)\n    (let\
    \ loop ([word (string-&gt;list word)]\n               [prev-consonant #f]\n  \
    \             [prev-vowel #f])\n      (cond [(null? word) prev-vowel]\n      \
    \      [(is_vowel? (car word)) (loop (cdr word) prev-consonant (car word))]\n\
    \            [(is_consonant? (car word)) (loop (cdr word) (car word) prev-vowel)]\n\
    \            [else (error \"invalid input\")])))\n  (let ([vowel (find-vowel-from-right\
    \ word)])\n    (if vowel\n        (list-&gt;string (list vowel))\n        \"\"\
    )))\n</code>\n", "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\\
    o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is_consonant? c)\n    (not (is_vowel?\
    \ c)))\n  (define (is_consonant_vowel_consonant? c1 c2 c3)\n    (and (is_consonant?\
    \ c1) (is_vowel? c2) (is_consonant? c3)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (if (is_consonant_vowel_consonant? (string-ref word 0) (string-ref\
    \ word 1) (string-ref word 2))\n        (string-ref word 1)\n        (get-closest-vowel-helper\
    \ (substring word 1))))\n  (if (or (= (string-length word) 0) (= (string-length\
    \ word) 1))\n      \"\"\n      (get-closest-vowel-helper word)))\n", "  (cond\n\
    \    [(empty? word) \"\"]\n    [(empty? (rest word)) \"\"]\n    [(and (consonant?\
    \ (first word)) (consonant? (second word)))\n     (get_closest_vowel (rest word))]\n\
    \    [(and (consonant? (first word)) (vowel? (second word)))\n     (second word)]\n\
    \    [(and (vowel? (first word)) (consonant? (second word)))\n     (first word)]\n\
    \    [else (get_closest_vowel (rest word))]))\n", "  (define (is_vowel? c)\n \
    \   (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define\
    \ (is_consonant? c)\n    (not (is_vowel? c)))\n  (define (get-closest-vowel-from-right\
    \ word)\n    (if (or (null? word) (null? (cdr word)))\n        \"\"\n        (let\
    \ ((first (car word))\n              (second (cadr word)))\n          (if (and\
    \ (is_consonant? first) (is_vowel? second))\n              (string second)\n \
    \             (get-closest-vowel-from-right (cdr word))))))\n  (get-closest-vowel-from-right\
    \ (reverse (string->list word))))\n", "  (define (is-vowel? c)\n    (member c\
    \ '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper word)\n  \
    \  (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word)) (first\
    \ word)]\n      [(is-consonant? (first word)) (get-closest-vowel-helper (rest\
    \ word))]))\n  (get-closest-vowel-helper (reverse word)))\n", "  (define (is-vowel?\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper word)\n  \
    \  (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word)) (first\
    \ word)]\n      [(is-consonant? (first word)) (get-closest-vowel-helper (rest\
    \ word))]))\n  (get-closest-vowel-helper (reverse word)))\n", "  (define (is_vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (is_consonant? c)\n    (not (is_vowel? c)))\n  (define (get-vowel-from-right\
    \ word)\n    (cond\n      [(null? word) #f]\n      [(is_vowel? (car word)) (car\
    \ word)]\n      [else (get-vowel-from-right (cdr word))]))\n  (define (get-consonant-from-left\
    \ word)\n    (cond\n      [(null? word) #f]\n      [(is_consonant? (car word))\
    \ (car word)]\n      [else (get-consonant-from-left (cdr word))]))\n  (define\
    \ (get-closest-vowel-from-right word)\n    (cond\n      [(null? word) #f]\n  \
    \    [(is_vowel? (car word)) (car word)]\n      [(is_consonant? (car word)) (get-vowel-from-right\
    \ (cdr word))]\n      [else (get-closest-vowel-from-right (cdr word))]))\n  (define\
    \ (get-closest-vowel-from-left word)\n    (cond\n      [(null? word) #f]\n   \
    \   [(is_vowel? (car word)) (car word)]\n      [(is_consonant? (car word)) (get-vowel-from-left\
    \ (cdr word))]\n      [else (get-closest-vowel-from-left (cdr word))]))\n  (define\
    \ (get-vowel-from-left word)\n    (cond\n      [(null? word) #f]\n      [(is_vowel?\
    \ (car word)) (car word)]\n      [else (get-vowel-from-left (cdr word))]))\n \
    \ (define (get-consonant-from-right word)\n    (cond\n     ", "  (let loop ([word\
    \ (string->list word)]\n             [index (length word)])\n    (cond\n     \
    \ [(empty? word) \"\"]\n      [(and (char-vowel? (first word))\n            (char-consonant?\
    \ (second word)))\n       (list->string (take word index))]\n      [else (loop\
    \ (rest word) (- index 1))])))\n", "  (define (is-vowel? c)\n    (or (char=? c\
    \ #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\\
    o)\n        (char=? c #\\u)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-closest-vowel word)\n    (cond ((empty? word) \"\")\n\
    \          ((is-vowel? (first word)) (first word))\n          ((is-consonant?\
    \ (first word)) (find-closest-vowel (rest word)))))\n  (define (find-closest-consonant\
    \ word)\n    (cond ((empty? word) \"\")\n          ((is-consonant? (first word))\
    \ (first word))\n          ((is-vowel? (first word)) (find-closest-consonant (rest\
    \ word)))))\n  (define (find-closest-vowel-between-consonants word)\n    (cond\
    \ ((empty? word) \"\")\n          ((is-consonant? (first word))\n           (let\
    \ ((vowel (find-closest-vowel (rest word))))\n             (if (is-consonant?\
    \ (second (rest word))) vowel \"\")))\n          ((is-vowel? (first word)) (find-closest-vowel-between-consonants\
    \ (rest word)))))\n  (find-closest-vowel-between-consonants word))\n", "  (define\
    \ (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O\
    \ #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel\
    \ word)\n    (let loop ([word (string-&gt;list word)]\n               [prev-consonant\
    \ #f]\n               [closest-vowel #f])\n      (cond\n        [(empty? word)\n\
    \         (if closest-vowel\n             (list-&gt;string (reverse closest-vowel))\n\
    \             \"\")]\n        [(is-vowel? (first word))\n         (if prev-consonant\n\
    \             (list-&gt;string (reverse closest-vowel))\n             (loop (rest\
    \ word) prev-consonant (cons (first word) closest-vowel)))]\n        [else\n \
    \        (loop (rest word) (first word) closest-vowel)])))\n  (find-closest-vowel\
    \ word))\n</code>\n", "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u #\\A #\\\
    E #\\I #\\O #\\U)])\n    (cond\n      [(empty? word) empty]\n      [(empty? (rest\
    \ word)) empty]\n      [(member (first word) vowels) empty]\n      [(member (second\
    \ word) vowels) empty]\n      [(member (first (rest word)) vowels) (first (rest\
    \ word))]\n      [else (get_closest_vowel (rest word))])))\n", "  (define (get-vowel-index\
    \ word)\n    (let loop ([i (sub1 (string-length word))])\n      (cond\n      \
    \  [(< i 0) #f]\n        [(char-vowel? (string-ref word i)) i]\n        [else\
    \ (loop (sub1 i))])))\n  (define (get-consonant-index word)\n    (let loop ([i\
    \ (sub1 (string-length word))])\n      (cond\n        [(< i 0) #f]\n        [(char-consonant?\
    \ (string-ref word i)) i]\n        [else (loop (sub1 i))])))\n  (define (get-closest-vowel-index\
    \ word)\n    (let loop ([i (get-vowel-index word)])\n      (cond\n        [(not\
    \ i) #f]\n        [(not (get-consonant-index (substring word 0 i))) (loop (get-vowel-index\
    \ (substring word 0 i)))]\n        [else i])))\n  (define (char-vowel? c)\n  \
    \  (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define\
    \ (char-consonant? c)\n    (and (char-alphabetic? c) (not (char-vowel? c))))\n\
    \  (let ([i (get-closest-vowel-index word)])\n    (if i (string (string-ref word\
    \ i)) \"\")))\n", "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\"\
    \ \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n\
    \    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (cond\n  \
    \    [(empty? word) empty]\n      [(is-vowel? (first word)) (first word)]\n  \
    \    [else (find-closest-vowel (rest word))]))\n  (define (find-closest-consonant\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-consonant? (first\
    \ word)) (first word)]\n      [else (find-closest-consonant (rest word))]))\n\
    \  (define (find-closest-vowel-from-right word)\n    (cond\n      [(empty? word)\
    \ empty]\n      [(is-vowel? (first word)) (first word)]\n      [else (find-closest-vowel-from-right\
    \ (rest word))]))\n  (define (find-closest-consonant-from-right word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(is-consonant? (first word)) (first word)]\n\
    \      [else (find-closest-consonant-from-right (rest word))]))\n  (define (find-closest-vowel-between-consonants\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(and (is-consonant? (first\
    \ word))\n            (is-vowel? (second word))\n            (is-consonant? (third\
    \ word)))\n       (second word)]\n      [else (find-closest-vowel-between-consonants\
    \ (rest word))]))\n  (cond\n    [(empty? word) empty]\n    [(is-vowel? (first\
    \ word)) empty]\n    [(is-consonant? (first word))\n     (cond\n       [(", " \
    \ (let loop ([word (string->list word)]\n             [vowels '()])\n    (cond\
    \ [(empty? word) (list->string (reverse vowels))]\n          [(char-vowel? (car\
    \ word)) (loop (cdr word) (cons (car word) vowels))]\n          [(and (char-vowel?\
    \ (car (cdr word)))\n                (char-consonant? (car word)))\n         \
    \  (list->string (reverse vowels))]\n          [else (loop (cdr word) vowels)])))\n",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (find-closest-vowel word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel?\
    \ (first word)) (first word)]\n      [(is-consonant? (first word)) (find-closest-vowel\
    \ (rest word))]))\n  (define (find-closest-consonant word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(is-consonant? (first word)) (first word)]\n      [(is-vowel?\
    \ (first word)) (find-closest-consonant (rest word))]))\n  (define (find-closest-vowel-from-right\
    \ word)\n    (find-closest-vowel (reverse word)))\n  (define (find-closest-consonant-from-right\
    \ word)\n    (find-closest-consonant (reverse word)))\n  (define (find-closest-vowel-between-consonants\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(and (is-consonant? (first\
    \ word)) (is-consonant? (second word)))\n       (find-closest-vowel-from-right\
    \ word)]\n      [else (find-closest-vowel-between-consonants (rest word))]))\n\
    \  (find-closest-vowel-between-consonants word))\n", "  (define (is_vowel? c)\n\
    \    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define\
    \ (is_consonant? c)\n    (not (is_vowel? c)))\n  (define (find-closest-vowel word)\n\
    \    (cond\n      [(empty? word) empty]\n      [(is_vowel? (first word)) (first\
    \ word)]\n      [else (find-closest-vowel (rest word))]))\n  (define (find-closest-consonant\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is_consonant? (first\
    \ word)) (first word)]\n      [else (find-closest-consonant (rest word))]))\n\
    \  (define (find-closest-vowel-between-consonants word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(is_vowel? (first word))\n       (if (is_consonant? (second\
    \ word))\n           (first word)\n           (find-closest-vowel-between-consonants\
    \ (rest word)))]\n      [else (find-closest-vowel-between-consonants (rest word))]))\n\
    \  (find-closest-vowel-between-consonants (reverse word)))\n", "  (define (is_vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (is_consonant? c)\n    (not (is_vowel? c)))\n  (define (find-vowel-from-right\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is_vowel? (first word))\
    \ (first word)]\n      [else (find-vowel-from-right (rest word))]))\n  (define\
    \ (find-consonant-from-right word)\n    (cond\n      [(empty? word) empty]\n \
    \     [(is_consonant? (first word)) (first word)]\n      [else (find-consonant-from-right\
    \ (rest word))]))\n  (define (find-vowel-between-consonants word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(and (is_vowel? (first word))\n         \
    \   (is_consonant? (second word))\n            (is_consonant? (third word)))\n\
    \       (first word)]\n      [else (find-vowel-between-consonants (rest word))]))\n\
    \  (cond\n    [(empty? word) empty]\n    [(is_vowel? (first word)) empty]\n  \
    \  [(is_consonant? (first word))\n     (cond\n       [(empty? (rest word)) empty]\n\
    \       [(is_vowel? (second word)) empty]\n       [(is_consonant? (second word))\n\
    \        (cond\n          [(empty? (rest (rest word))) empty]\n          [(is_vowel?\
    \ (third word)) empty]\n          [(is_consonant? (third word))\n           (find-vowel-between-consonants\
    \ (rest (rest (rest word))))])])]))\n", "  (define (is-vowel? c)\n    (or (char=?\
    \ c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c\
    \ #\\o)\n        (char=? c #\\u)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-closest-vowel word)\n    (cond ((empty? word) \"\")\n\
    \          ((is-vowel? (first word)) (first word))\n          (else (find-closest-vowel\
    \ (rest word)))))\n  (define (find-closest-consonant word)\n    (cond ((empty?\
    \ word) \"\")\n          ((is-consonant? (first word)) (first word))\n       \
    \   (else (find-closest-consonant (rest word)))))\n  (define (find-closest-vowel-between-consonants\
    \ word)\n    (cond ((empty? word) \"\")\n          ((and (is-consonant? (first\
    \ word))\n                (is-vowel? (second word))\n                (is-consonant?\
    \ (third word)))\n           (second word))\n          (else (find-closest-vowel-between-consonants\
    \ (rest word)))))\n  (find-closest-vowel-between-consonants word))\n", "  (define\
    \ (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O\
    \ #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (if (empty? word)\n        \"\"\n        (if (and (is-consonant?\
    \ (first word))\n                 (is-vowel? (second word)))\n            (first\
    \ word)\n            (get-closest-vowel-helper (rest word)))))\n  (get-closest-vowel-helper\
    \ (reverse word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (get-closest-vowel-helper word)\n    (if (empty?\
    \ word)\n        \"\"\n        (if (and (is-consonant? (first word))\n       \
    \          (is-vowel? (second word)))\n            (string (second word))\n  \
    \          (get-closest-vowel-helper (rest word)))))\n  (get-closest-vowel-helper\
    \ (reverse word)))\n", "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n   \
    \     (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n    \
    \    (char=? c #\\u)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n\
    \  (define (get-closest-vowel-from-right word)\n    (if (or (null? word)\n   \
    \         (null? (cdr word)))\n        \"\"\n        (if (and (is-consonant? (car\
    \ word))\n                 (is-vowel? (cadr word)))\n            (list-ref word\
    \ 1)\n            (get-closest-vowel-from-right (cdr word)))))\n  (get-closest-vowel-from-right\
    \ (reverse word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (get-closest-vowel-helper word)\n    (cond\n    \
    \  [(empty? word) empty]\n      [(is-vowel? (first word)) empty]\n      [(is-consonant?\
    \ (first word))\n       (cond\n         [(empty? (rest word)) empty]\n       \
    \  [(is-vowel? (second word)) (first word)]\n         [else (get-closest-vowel-helper\
    \ (rest word))])]))\n  (get-closest-vowel-helper (reverse word)))\n", "  (define\
    \ (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"\
    I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (is-consonant-vowel-consonant? w)\n    (and (is-consonant? (string-ref w 0))\n\
    \         (is-vowel? (string-ref w 1))\n         (is-consonant? (string-ref w\
    \ 2))))\n  (define (find-closest-vowel word)\n    (cond ((is-consonant-vowel-consonant?\
    \ word)\n           (string-ref word 1))\n          ((&gt; (string-length word)\
    \ 3)\n           (find-closest-vowel (substring word 1)))\n          (else \"\"\
    )))\n  (find-closest-vowel word))\n</code>\n", "  (define (is-vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (get-closest-vowel-helper word)\n    (cond\n      [(empty? word)\
    \ empty]\n      [(is-vowel? (first word)) (first word)]\n      [(is-consonant?\
    \ (first word)) (get-closest-vowel-helper (rest word))]))\n  (get-closest-vowel-helper\
    \ (reverse word)))\n", "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n   \
    \     (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n    \
    \    (char=? c #\\u)))\n  (define (is-consonant? c)\n    (and (not (is-vowel?\
    \ c))\n         (not (char=? c #\\y))))\n  (define (get-closest-vowel-from-right\
    \ word)\n    (let loop ([word (string-&gt;list word)]\n               [prev-char\
    \ #\\])\n               [prev-prev-char #\\])\n      (cond [(null? word) \"\"\
    ]\n            [(and (is-vowel? (car word))\n                  (is-consonant?\
    \ prev-char)\n                  (is-consonant? prev-prev-char))\n            \
    \ (list-&gt;string (reverse word))]\n            [else (loop (cdr word) (car word)\
    \ prev-char)])))\n  (get-closest-vowel-from-right word))\n</code>\n", "  (define\
    \ (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O\
    \ #\\U)))\n  (define (is_consonant? c)\n    (not (is_vowel? c)))\n  (define (find-vowel\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is_vowel? (first word))\
    \ (first word)]\n      [else (find-vowel (rest word))]))\n  (define (find-consonant\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is_consonant? (first\
    \ word)) (first word)]\n      [else (find-consonant (rest word))]))\n  (define\
    \ (find-vowel-between-consonants word)\n    (cond\n      [(empty? word) empty]\n\
    \      [(and (is_vowel? (first word))\n            (is_consonant? (second word))\n\
    \            (is_consonant? (third word)))\n       (first word)]\n      [else\
    \ (find-vowel-between-consonants (rest word))]))\n  (cond\n    [(empty? word)\
    \ empty]\n    [(is_vowel? (first word)) empty]\n    [(is_consonant? (first word))\n\
    \     (cond\n       [(empty? (rest word)) empty]\n       [(is_vowel? (second word))\
    \ empty]\n       [(is_consonant? (second word))\n        (cond\n          [(empty?\
    \ (rest (rest word))) empty]\n          [(is_vowel? (third word)) empty]\n   \
    \       [(is_consonant? (third word))\n           (find-vowel-between-consonants\
    \ (rest (rest (rest word))))])])]))\n", "  (define (get-closest-vowel-iter word\
    \ i)\n    (if (or (= i -1) (= i (string-length word)))\n        \"\"\n       \
    \ (let ((c (string-ref word i)))\n          (if (or (char=? c #\\a) (char=? c\
    \ #\\e) (char=? c #\\i) (char=? c #\\o) (char=? c #\\u))\n              (if (or\
    \ (and (not (char=? (string-ref word (+ i 1)) #\\a))\n                       \
    \    (not (char=? (string-ref word (+ i 1)) #\\e))\n                         \
    \  (not (char=? (string-ref word (+ i 1)) #\\i))\n                           (not\
    \ (char=? (string-ref word (+ i 1)) #\\o))\n                           (not (char=?\
    \ (string-ref word (+ i 1)) #\\u)))\n                      (and (not (char=? (string-ref\
    \ word (- i 1)) #\\a))\n                           (not (char=? (string-ref word\
    \ (- i 1)) #\\e))\n                           (not (char=? (string-ref word (-\
    \ i 1)) #\\i))\n                           (not (char=? (string-ref word (- i\
    \ 1)) #\\o))\n                           (not (char=? (string-ref word (- i 1))\
    \ #\\u))))\n                  (string c)\n                  (get-closest-vowel-iter\
    \ word (- i 1)))\n              (get-closest-vowel-iter word (- i 1))))))\n  (get-closest-vowel-iter\
    \ word (- (string-length word) 1)))\n", "  (define (get-closest-vowel-iter word\
    \ i)\n    (cond\n      [(= i 0) \"\"]\n      [(and (char-vowel? (string-ref word\
    \ (- i 1)))\n            (char-consonant? (string-ref word (- i 2))))\n      \
    \ (string-ref word (- i 1))]\n      [else (get-closest-vowel-iter word (- i 1))]))\n\
    \  (get-closest-vowel-iter word (string-length word)))\n", "  (let ([vowels (list\
    \ #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)])\n    (let loop ([word word]\
    \ [i (sub1 (string-length word))])\n      (cond [(< i 1) \"\"]\n            [(member\
    \ (string-ref word i) vowels) (string-ref word i)]\n            [else (loop word\
    \ (sub1 i))]))))\n", "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u #\\A #\\\
    E #\\I #\\O #\\U)])\n    (for/first ([i (in-range (sub1 (string-length word))\
    \ -1 -1)]\n                [c (in-list (string->list word))])\n      (cond\n \
    \       [(and (member c vowels)\n              (not (member (string-ref word (sub1\
    \ i)) vowels))\n              (not (member (string-ref word (add1 i)) vowels)))\n\
    \         (string c)]\n        [else #f]))))\n", "  (define (is-vowel? c)\n  \
    \  (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (if (or (empty? word) (empty? (rest word)))\n        \"\"\n     \
    \   (if (and (is-consonant? (first word))\n                 (is-vowel? (second\
    \ word)))\n            (second word)\n            (get-closest-vowel-helper (rest\
    \ word)))))\n  (get-closest-vowel-helper (reverse word)))\n", "  (define (is-vowel?\
    \ c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"\
    U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel\
    \ word)\n    (if (null? word)\n        \"\"\n        (if (and (is-consonant? (car\
    \ word))\n                 (is-vowel? (cadr word)))\n            (cadr word)\n\
    \            (find-closest-vowel (cdr word)))))\n  (if (or (is-vowel? (car word))\n\
    \          (is-vowel? (last word)))\n      \"\"\n      (find-closest-vowel (reverse\
    \ word))))\n", "  (define (is-vowel? c)\n    (or (equal? c #\\a)\n        (equal?\
    \ c #\\e)\n        (equal? c #\\i)\n        (equal? c #\\o)\n        (equal? c\
    \ #\\u)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (is-consonant-vowel-consonant?\
    \ w)\n    (and (is-consonant? (string-ref w 0))\n         (is-vowel? (string-ref\
    \ w 1))\n         (is-consonant? (string-ref w 2))))\n  (define (get-closest-vowel-from-right\
    \ w)\n    (if (is-consonant-vowel-consonant? w)\n        (string-ref w 1)\n  \
    \      (get-closest-vowel-from-right (substring w 1))))\n  (if (is-consonant-vowel-consonant?\
    \ word)\n      (string-ref word 1)\n      (get-closest-vowel-from-right (substring\
    \ word 1))))\n", "  (define (get-closest-vowel-iter word)\n    (if (or (empty?\
    \ word) (empty? (rest word)))\n        \"\"\n        (if (and (char-consonant?\
    \ (first word)) (char-consonant? (second word)))\n            (if (char-vowel?\
    \ (second word))\n                (string (second word))\n                (get-closest-vowel-iter\
    \ (rest word)))\n            (get-closest-vowel-iter (rest word)))))\n  (get-closest-vowel-iter\
    \ (reverse word)))\n", "  (cond\n    [(empty? word) empty]\n    [(empty? (rest\
    \ word)) empty]\n    [(consonant? (first word)) (get_closest_vowel (rest word))]\n\
    \    [(consonant? (second word)) (first word)]\n    [else (get_closest_vowel (rest\
    \ word))]))\n", "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=?\
    \ c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c\
    \ #\\u)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel\
    \ word)\n    (let loop ([word (string->list word)]\n               [closest-vowel\
    \ #\\])\n               [closest-vowel-index -1])\n      (cond [(empty? word)\n\
    \             (if (char=? closest-vowel #\\])\n                 \"\"\n       \
    \          (list->string (list closest-vowel)))]\n            [(is-vowel? (first\
    \ word))\n             (if (and (is-consonant? (second word))\n              \
    \        (&gt; (add1 (length word)) closest-vowel-index))\n                 (loop\
    \ (rest word)\n                       (first word)\n                       (add1\
    \ (length word)))\n                 (loop (rest word)\n                      \
    \ closest-vowel\n                       closest-vowel-index))]\n            [else\n\
    \             (loop (rest word)\n                   closest-vowel\n          \
    \         closest-vowel-index)])))\n  (find-closest-vowel word))\n</code>\n",
  "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)])\n  \
    \  (let loop ([word word] [i (sub1 (string-length word))])\n      (cond\n    \
    \    [(= i 0) \"\"]\n        [(member (string-ref word i) vowels) (string-ref\
    \ word i)]\n        [else (loop word (sub1 i))]))))\n", "  (define (is-vowel?\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (is-consonant-vowel-consonant? w)\n\
    \    (and (is-consonant? (string-ref w 0))\n         (is-vowel? (string-ref w\
    \ 1))\n         (is-consonant? (string-ref w 2))))\n  (define (get-closest-vowel-from-right\
    \ w)\n    (cond ((is-consonant-vowel-consonant? w)\n           (string-ref w 1))\n\
    \          ((string&gt;? w \"\")\n           (get-closest-vowel-from-right (substring\
    \ w 1)))))\n  (get-closest-vowel-from-right word))\n</code>\n", "  (define (is-vowel?\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (find-vowel word)\n    (cond ((null?\
    \ word) \"\")\n          ((is-vowel? (car word)) (car word))\n          (else\
    \ (find-vowel (cdr word)))))\n  (define (find-consonant word)\n    (cond ((null?\
    \ word) \"\")\n          ((is-consonant? (car word)) (car word))\n          (else\
    \ (find-consonant (cdr word)))))\n  (define (find-vowel-between-consonants word)\n\
    \    (cond ((null? word) \"\")\n          ((and (is-consonant? (car word))\n \
    \               (is-vowel? (cadr word))\n                (is-consonant? (caddr\
    \ word)))\n           (cadr word))\n          (else (find-vowel-between-consonants\
    \ (cdr word)))))\n  (cond ((null? word) \"\")\n        ((is-vowel? (car word))\
    \ \"\")\n        ((is-consonant? (car word)) (find-vowel-between-consonants word))\n\
    \        (else (get_closest_vowel (cdr word)))))\n", "  (define (is_vowel? c)\n\
    \    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n \
    \       (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is_consonant? c)\n\
    \    (not (is_vowel? c)))\n  (define (get-closest-vowel-helper word)\n    (if\
    \ (is_vowel? (string-ref word 0))\n        (string-ref word 0)\n        (if (is_consonant?\
    \ (string-ref word 0))\n            (if (is_consonant? (string-ref word 1))\n\
    \                (get-closest-vowel-helper (substring word 1))\n             \
    \   (string-ref word 1))\n            \"\")))\n  (get-closest-vowel-helper (string-reverse\
    \ word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (get-closest-vowel-helper word)\n    (if (empty? word)\n   \
    \     \"\"\n        (if (and (is-consonant? (first word))\n                 (is-vowel?\
    \ (second word)))\n            (string (second word))\n            (get-closest-vowel-helper\
    \ (rest word)))))\n  (get-closest-vowel-helper (reverse word)))\n", "  (define\
    \ (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O\
    \ #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (cond [(empty? word) empty]\n          [(is-vowel? (first word))\
    \ (first word)]\n          [(is-consonant? (first word)) (get-closest-vowel-helper\
    \ (rest word))]))\n  (get-closest-vowel-helper (reverse word)))\n", "  (define\
    \ (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O\
    \ #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word))\
    \ (first word)]\n      [(and (is-consonant? (first word)) (is-consonant? (second\
    \ word))) (find-closest-vowel (rest word))]\n      [else empty]))\n  (find-closest-vowel\
    \ (reverse word)))\n", "  (define (get-closest-vowel-helper word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(or (equal? (first word) #\\a) (equal? (first\
    \ word) #\\e) (equal? (first word) #\\i)\n           (equal? (first word) #\\\
    o) (equal? (first word) #\\u))\n       (first word)]\n      [else (get-closest-vowel-helper\
    \ (rest word))]))\n  (get-closest-vowel-helper (reverse word)))\n", "  (define\
    \ (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O\
    \ #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (if (null? word)\n        \"\"\n        (if (and (is-consonant? (car\
    \ word))\n                 (is-vowel? (cadr word)))\n            (string (cadr\
    \ word))\n            (get-closest-vowel-helper (cdr word)))))\n  (get-closest-vowel-helper\
    \ (reverse (string->list word))))\n", "  (define (is-vowel? c)\n    (member c\
    \ '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (if (or\
    \ (empty? word) (is-vowel? (first word)))\n        \"\"\n        (if (is-vowel?\
    \ (second word))\n            (string (second word))\n            (find-closest-vowel\
    \ (rest word)))))\n  (find-closest-vowel (reverse word)))\n", "  (define (is-vowel?\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper word)\n  \
    \  (if (or (null? word) (null? (cdr word)))\n        \"\"\n        (if (and (is-consonant?\
    \ (car word))\n                 (is-vowel? (cadr word)))\n            (string\
    \ (cadr word))\n            (get-closest-vowel-helper (cdr word)))))\n  (get-closest-vowel-helper\
    \ (reverse (string->list word))))\n", "  (define (is-vowel? c)\n    (member c\
    \ '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (is-consonant-vowel?\
    \ c1 c2)\n    (and (is-consonant? c1) (is-vowel? c2)))\n  (define (is-vowel-consonant?\
    \ c1 c2)\n    (and (is-vowel? c1) (is-consonant? c2)))\n  (define (get-closest-vowel-from-right\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-consonant-vowel? (first\
    \ word) (second word)) (first word)]\n      [else (get-closest-vowel-from-right\
    \ (rest word))]))\n  (get-closest-vowel-from-right (reverse word)))\n", "  (define\
    \ (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O\
    \ #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel\
    \ word)\n    (let loop ([word (string-&gt;list word)]\n               [prev-consonant\
    \ #f]\n               [closest-vowel #f])\n      (cond [(empty? word) closest-vowel]\n\
    \            [(is-vowel? (first word))\n             (loop (rest word) prev-consonant\
    \ (first word))]\n            [(is-consonant? (first word))\n             (if\
    \ prev-consonant\n                 closest-vowel\n                 (loop (rest\
    \ word) (first word) closest-vowel))])))\n  (if (is-vowel? (string-ref word 0))\n\
    \      \"\"\n      (list-&gt;string (get-closest-vowel word))))\n</code>\n", " \
    \ (let loop ([word (string->list word)]\n             [vowels '()])\n    (cond\
    \ [(empty? word) (list->string (reverse vowels))]\n          [(member (car word)\
    \ '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n           (loop (cdr word) (cons (car word)\
    \ vowels))]\n          [else (loop (cdr word) vowels)])))\n", "  (define (is_vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (is_consonant? c)\n    (not (is_vowel? c)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (if (empty? word)\n        \"\"\n        (if (and (is_consonant?\
    \ (first word))\n                 (is_vowel? (second word)))\n            (second\
    \ word)\n            (get-closest-vowel-helper (rest word)))))\n  (get-closest-vowel-helper\
    \ (reverse word)))\n", "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is_consonant? c)\n    (not\
    \ (is_vowel? c)))\n  (define (find-closest-vowel word)\n    (if (or (null? word)\
    \ (null? (cdr word)))\n        \"\"\n        (if (and (is_consonant? (car word))\n\
    \                 (is_vowel? (cadr word)))\n            (list-ref word 1)\n  \
    \          (find-closest-vowel (cdr word)))))\n  (find-closest-vowel word))\n",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (find-closest-vowel word)\n    (cond ((null? word) \"\")\n          ((and (is-vowel?\
    \ (car word)) (is-consonant? (cadr word))) (car word))\n          (else (find-closest-vowel\
    \ (cdr word)))))\n  (find-closest-vowel word))\n", "  (define (get-closest-vowel-helper\
    \ word)\n    (if (null? word)\n        \"\"\n        (if (member (string-ref word\
    \ 0) \"aeiouAEIOU\")\n            (string-ref word 0)\n            (get-closest-vowel-helper\
    \ (substring word 1)))))\n  (get-closest-vowel-helper (reverse word)))\n", " \
    \ (define (is_vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"\
    E\" \"I\" \"O\" \"U\")))\n  (define (is_consonant? c)\n    (not (is_vowel? c)))\n\
    \  (define (get-closest-vowel-helper word)\n    (if (is_vowel? (string-ref word\
    \ 0))\n        (get-closest-vowel-helper (substring word 1))\n        (if (is_consonant?\
    \ (string-ref word 0))\n            (if (is_vowel? (string-ref word 1))\n    \
    \            (string-ref word 1)\n                (get-closest-vowel-helper (substring\
    \ word 1)))\n            \"\")))\n  (get-closest-vowel-helper word))\n", "  (define\
    \ (get-closest-vowel-helper word index)\n    (cond [(empty? word) \"\"]\n    \
    \      [(and (char-vowel? (first word)) (char-consonant? (second word))) (first\
    \ word)]\n          [else (get-closest-vowel-helper (rest word) (add1 index))]))\n\
    \  (get-closest-vowel-helper word 0))\n", "  (define (is-vowel? c)\n    (member\
    \ c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word))\
    \ (first word)]\n      [(is-consonant? (first word)) (get-closest-vowel-helper\
    \ (rest word))]))\n  (get-closest-vowel-helper (reverse word)))\n", "  (define\
    \ (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"\
    I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (find-closest-vowel lst)\n    (cond ((null? lst) \"\")\n          ((and (is-vowel?\
    \ (car lst))\n                (is-consonant? (cadr lst)))\n           (car lst))\n\
    \          (else (find-closest-vowel (cdr lst)))))\n  (find-closest-vowel (reverse\
    \ (string->list word))))\n", "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n\
    \        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n \
    \       (char=? c #\\u)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n\
    \  (define (is-vowel-between-consonants? c)\n    (and (is-vowel? c)\n        \
    \ (is-consonant? (string-ref word (- (string-length word) 2)))\n         (is-consonant?\
    \ (string-ref word (- (string-length word) 3)))))\n  (define (find-closest-vowel\
    \ word)\n    (cond ((is-vowel-between-consonants? (string-ref word (- (string-length\
    \ word) 1)))\n           (string-ref word (- (string-length word) 1)))\n     \
    \     ((&gt; (string-length word) 2)\n           (find-closest-vowel (substring\
    \ word 0 (- (string-length word) 1))))\n          (else \"\")))\n  (find-closest-vowel\
    \ word))\n</code>\n", "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is_consonant? c)\n    (not\
    \ (is_vowel? c)))\n  (define (find-closest-vowel word)\n    (if (is_vowel? (string-ref\
    \ word 0))\n        (string-ref word 0)\n        (if (is_consonant? (string-ref\
    \ word 0))\n            (if (is_consonant? (string-ref word 1))\n            \
    \    (find-closest-vowel (substring word 1))\n                (string-ref word\
    \ 0))\n            \"\")))\n  (find-closest-vowel word))\n", "  (define (is-vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel\
    \ word)\n    (let loop ([word (string-reverse word)]\n               [prev-vowel\
    \ #\\_]\n               [prev-consonant #\\_])\n      (cond [(empty? word) \"\"\
    ]\n            [(is-vowel? (first word)) (loop (rest word) (first word) prev-consonant)]\n\
    \            [(is-consonant? (first word)) (loop (rest word) prev-vowel (first\
    \ word))]\n            [else prev-vowel])))\n  (find-closest-vowel word))\n",
  "  (define (is_vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"\
    E\" \"I\" \"O\" \"U\")))\n  (define (is_consonant? c)\n    (not (is_vowel? c)))\n\
    \  (define (get-closest-vowel-helper word)\n    (cond\n      [(empty? word) empty]\n\
    \      [(is_vowel? (first word)) (first word)]\n      [(is_consonant? (first word))\
    \ (get-closest-vowel-helper (rest word))]))\n  (get-closest-vowel-helper (reverse\
    \ word)))\n", "  (cond\n    [(empty? word) \"\"]\n    [(or (equal? (first word)\
    \ \"a\")\n         (equal? (first word) \"e\")\n         (equal? (first word)\
    \ \"i\")\n         (equal? (first word) \"o\")\n         (equal? (first word)\
    \ \"u\"))\n     (first word)]\n    [else (get_closest_vowel (rest word))]))\n",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (find-vowel word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel?\
    \ (first word)) (first word)]\n      [else (find-vowel (rest word))]))\n  (define\
    \ (find-consonant word)\n    (cond\n      [(empty? word) empty]\n      [(is-consonant?\
    \ (first word)) (first word)]\n      [else (find-consonant (rest word))]))\n \
    \ (define (find-vowel-between-consonants word)\n    (cond\n      [(empty? word)\
    \ empty]\n      [(and (is-vowel? (first word))\n            (is-consonant? (second\
    \ word))\n            (is-consonant? (third word)))\n       (first word)]\n  \
    \    [else (find-vowel-between-consonants (rest word))]))\n  (cond\n    [(empty?\
    \ word) empty]\n    [(and (is-vowel? (first word))\n          (is-consonant? (second\
    \ word)))\n     (first word)]\n    [(and (is-consonant? (first word))\n      \
    \    (is-vowel? (second word))\n          (is-consonant? (third word)))\n    \
    \ (second word)]\n    [else (find-vowel-between-consonants (rest word))]))\n",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (find-vowel-from-right word)\n    (cond\n      [(empty? word) empty]\n     \
    \ [(is-vowel? (first word)) (first word)]\n      [else (find-vowel-from-right\
    \ (rest word))]))\n  (define (find-consonant-from-right word)\n    (cond\n   \
    \   [(empty? word) empty]\n      [(is-consonant? (first word)) (first word)]\n\
    \      [else (find-consonant-from-right (rest word))]))\n  (define (find-vowel-between-consonants\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word))\
    \ (first word)]\n      [(is-consonant? (first word)) (find-vowel-between-consonants\
    \ (rest word))]\n      [else (find-vowel-between-consonants (rest word))]))\n\
    \  (define (find-closest-vowel word)\n    (cond\n      [(empty? word) empty]\n\
    \      [(is-vowel? (first word)) (first word)]\n      [(is-consonant? (first word))\
    \ (find-vowel-between-consonants (rest word))]\n      [else (find-closest-vowel\
    \ (rest word))]))\n  (find-closest-vowel word))\n", "  (define (is-vowel? c)\n\
    \    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n\
    \  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel\
    \ word)\n    (cond [(empty? word) empty]\n          [(is-vowel? (first word))\
    \ empty]\n          [(is-consonant? (first word)) (find-closest-vowel (rest word))]\n\
    \          [else (first word)]))\n  (find-closest-vowel (reverse word)))\n", " \
    \ (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"\
    E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n\
    \  (define (get-closest-vowel-helper word)\n    (if (or (empty? word) (empty?\
    \ (rest word)))\n        \"\"\n        (if (and (is-consonant? (first word)) (is-vowel?\
    \ (second word)))\n            (second word)\n            (get-closest-vowel-helper\
    \ (rest word)))))\n  (get-closest-vowel-helper (rest (reverse word))))\n", " \
    \ (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is_consonant? c)\n    (not (is_vowel? c)))\n  (define\
    \ (find-vowel word)\n    (cond ((null? word) \"\")\n          ((is_vowel? (car\
    \ word)) (car word))\n          (else (find-vowel (cdr word)))))\n  (define (find-consonant\
    \ word)\n    (cond ((null? word) \"\")\n          ((is_consonant? (car word))\
    \ (car word))\n          (else (find-consonant (cdr word)))))\n  (define (find-vowel-between-consonants\
    \ word)\n    (cond ((null? word) \"\")\n          ((and (is_consonant? (car word))\n\
    \                (is_vowel? (cadr word))\n                (is_consonant? (caddr\
    \ word)))\n           (cadr word))\n          (else (find-vowel-between-consonants\
    \ (cdr word)))))\n  (cond ((null? word) \"\")\n        ((is_vowel? (car word))\
    \ \"\")\n        ((is_consonant? (car word)) (find-vowel-between-consonants word))\n\
    \        (else (find-vowel-between-consonants (cdr word)))))\n", "  (cond\n  \
    \  [(empty? word) \"\"]\n    [(empty? (rest word)) \"\"]\n    [(and (consonant?\
    \ (first word)) (consonant? (second word)))\n     (get_closest_vowel (rest word))]\n\
    \    [(and (consonant? (first word)) (vowel? (second word)))\n     (second word)]\n\
    \    [(and (vowel? (first word)) (consonant? (second word)))\n     (first word)]\n\
    \    [else (get_closest_vowel (rest word))]))\n", "  (cond\n    [(empty? word)\
    \ \"\"]\n    [(empty? (rest word)) \"\"]\n    [(and (consonant? (first word))\
    \ (vowel? (second word))) (second word)]\n    [(and (consonant? (first word))\
    \ (consonant? (second word))) (get_closest_vowel (rest word))]\n    [else (get_closest_vowel\
    \ (rest word))]))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (find-vowel word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(is-vowel? (first word)) (first word)]\n\
    \      [else (find-vowel (rest word))]))\n  (define (find-consonant word)\n  \
    \  (cond\n      [(empty? word) empty]\n      [(not (is-vowel? (first word))) (first\
    \ word)]\n      [else (find-consonant (rest word))]))\n  (define (find-vowel-between-consonants\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(and (is-vowel? (first\
    \ word)) (not (empty? (rest word)))) (first word)]\n      [else (find-vowel-between-consonants\
    \ (rest word))]))\n  (find-vowel-between-consonants word))\n", "  (define (is-vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word))\
    \ (first word)]\n      [(is-consonant? (first word)) (get-closest-vowel-helper\
    \ (rest word))]))\n  (get-closest-vowel-helper (reverse word)))\n", "  (define\
    \ (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O\
    \ #\\U)))\n  (define (is_consonant? c)\n    (not (is_vowel? c)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (if (or (empty? word) (empty? (rest word)))\n        \"\"\n     \
    \   (if (and (is_consonant? (first word)) (is_vowel? (second word)))\n       \
    \     (second word)\n            (get-closest-vowel-helper (rest word)))))\n \
    \ (get-closest-vowel-helper (reverse word)))\n", "  (define (is-vowel? c)\n  \
    \  (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=?\
    \ c #\\u)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (find-closest-vowel word)\n    (cond ((null? word) \"\")\n          ((and (is-vowel?\
    \ (car word)) (is-consonant? (cadr word))) (car word))\n          (else (find-closest-vowel\
    \ (cdr word)))))\n  (find-closest-vowel (reverse word)))\n", "  (cond\n    [(empty?\
    \ word) \"\"]\n    [(empty? (rest word)) \"\"]\n    [(and (char-vowel? (first\
    \ word)) (char-vowel? (second word))) (get_closest_vowel (rest word))]\n    [(and\
    \ (char-vowel? (first word)) (char-consonant? (second word))) (first word)]\n\
    \    [(and (char-consonant? (first word)) (char-vowel? (second word))) (second\
    \ word)]\n    [(and (char-consonant? (first word)) (char-consonant? (second word)))\
    \ (get_closest_vowel (rest word))]))\n", "  (define (is_vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is_consonant?\
    \ c)\n    (not (is_vowel? c)))\n  (define (find-vowel word)\n    (cond\n     \
    \ [(empty? word) empty]\n      [(is_vowel? (first word)) (first word)]\n     \
    \ [else (find-vowel (rest word))]))\n  (define (find-consonant word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(is_consonant? (first word)) (first word)]\n\
    \      [else (find-consonant (rest word))]))\n  (define (find-vowel-between-consonants\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(and (is_vowel? (first\
    \ word))\n            (is_consonant? (second word))\n            (is_consonant?\
    \ (third word)))\n       (first word)]\n      [else (find-vowel-between-consonants\
    \ (rest word))]))\n  (cond\n    [(empty? word) empty]\n    [(is_vowel? (first\
    \ word)) empty]\n    [(is_consonant? (first word)) (find-vowel-between-consonants\
    \ word)]\n    [else (find-vowel-between-consonants (rest word))]))\n", "  (define\
    \ (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O\
    \ #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word))\
    \ (first word)]\n      [(is-consonant? (first word)) (get-closest-vowel-helper\
    \ (rest word))]))\n  (get-closest-vowel-helper (reverse word)))\n", "  (define\
    \ (is-consonant? c)\n    (member c '(\"b\" \"c\" \"d\" \"f\" \"g\" \"h\" \"j\"\
    \ \"k\" \"l\" \"m\" \"n\" \"p\" \"q\" \"r\" \"s\" \"t\" \"v\" \"w\" \"x\" \"y\"\
    \ \"z\")))\n  (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"\
    u\")))\n  (define (get-closest-vowel-helper word)\n    (if (null? word)\n    \
    \    \"\"\n        (if (and (is-consonant? (car word)) (is-vowel? (cadr word)))\n\
    \            (cadr word)\n            (get-closest-vowel-helper (cdr word)))))\n\
    \  (get-closest-vowel-helper (reverse (string->list word))))\n", "  (define (get-vowel-index\
    \ word)\n    (let loop ([i (sub1 (string-length word))])\n      (cond [(negative?\
    \ i) #f]\n            [(member (string-ref word i) \"aeiouAEIOU\") i]\n      \
    \      [else (loop (sub1 i))])))\n  (define (get-consonant-index word)\n    (let\
    \ loop ([i (sub1 (string-length word))])\n      (cond [(negative? i) #f]\n   \
    \         [(member (string-ref word i) \"aeiouAEIOU\") (sub1 i)]\n           \
    \ [else (loop (sub1 i))])))\n  (define (get-closest-vowel-index word)\n    (let\
    \ loop ([i (get-vowel-index word)])\n      (cond [(not i) #f]\n            [(not\
    \ (get-consonant-index word)) #f]\n            [(> (get-consonant-index word)\
    \ i) i]\n            [else (loop (get-vowel-index (substring word 0 i)))])))\n\
    \  (let ([i (get-closest-vowel-index word)])\n    (if i (string (string-ref word\
    \ i)) \"\")))\n", "  (define (get-closest-vowel-helper word)\n    (cond\n    \
    \  [(empty? word) empty]\n      [(consonant? (first word)) (get-closest-vowel-helper\
    \ (rest word))]\n      [(vowel? (first word)) (first word)]\n      [else (get-closest-vowel-helper\
    \ (rest word))]))\n  (get-closest-vowel-helper (reverse word)))\n", "  (define\
    \ (get-closest-vowel-helper word i)\n    (if (or (= i 0) (= i (- (string-length\
    \ word) 1)))\n        \"\"\n        (if (and (char-consonant? (string-ref word\
    \ i))\n                 (char-vowel? (string-ref word (- i 1)))\n            \
    \     (char-consonant? (string-ref word (- i 2))))\n            (string (string-ref\
    \ word (- i 1)))\n            (get-closest-vowel-helper word (- i 1)))))\n  (get-closest-vowel-helper\
    \ word (- (string-length word) 1)))\n", "  (define (is_vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is_consonant?\
    \ c)\n    (not (is_vowel? c)))\n  (define (is_consonant-vowel? c1 c2)\n    (and\
    \ (is_consonant? c1) (is_vowel? c2)))\n  (define (is_vowel-consonant? c1 c2)\n\
    \    (and (is_vowel? c1) (is_consonant? c2)))\n  (define (find-vowel word)\n \
    \   (cond ((string-empty? word) \"\")\n          ((is_consonant-vowel? (string-ref\
    \ word 0) (string-ref word 1))\n           (string-ref word 1))\n          (else\
    \ (find-vowel (substring word 1)))))\n  (find-vowel word))\n", "  (define (get-closest-vowel-iter\
    \ word idx)\n    (if (&lt; idx 0)\n        \"\"\n        (if (and (member (string-ref\
    \ word idx) \"aeiouAEIOU\")\n                 (member (string-ref word (- idx\
    \ 1)) \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n                 (member\
    \ (string-ref word (+ idx 1)) \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"))\n\
    \            (string (string-ref word idx))\n            (get-closest-vowel-iter\
    \ word (- idx 1)))))\n  (get-closest-vowel-iter word (- (string-length word) 1)))\n",
  "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"\
    E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n\
    \  (define (find-closest-vowel word)\n    (if (null? word)\n        \"\"\n   \
    \     (if (and (is-consonant? (car word))\n                 (is-vowel? (cadr word)))\n\
    \            (cadr word)\n            (find-closest-vowel (cdr word)))))\n  (find-closest-vowel\
    \ word))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-vowel-from-right word)\n    (cond\n      [(empty? word)\
    \ empty]\n      [(is-vowel? (first word)) (first word)]\n      [else (find-vowel-from-right\
    \ (rest word))]))\n  (define (find-consonant-from-right word)\n    (cond\n   \
    \   [(empty? word) empty]\n      [(is-consonant? (first word)) (first word)]\n\
    \      [else (find-consonant-from-right (rest word))]))\n  (define (find-vowel-between-consonants\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(and (is-vowel? (first\
    \ word))\n            (is-consonant? (second word))\n            (is-consonant?\
    \ (third word)))\n       (first word)]\n      [else (find-vowel-between-consonants\
    \ (rest word))]))\n  (cond\n    [(empty? word) empty]\n    [(is-vowel? (first\
    \ word)) empty]\n    [(is-consonant? (first word))\n     (cond\n       [(empty?\
    \ (rest word)) empty]\n       [(is-vowel? (second word)) empty]\n       [(is-consonant?\
    \ (second word))\n        (cond\n          [(empty? (rest (rest word))) empty]\n\
    \          [(is-vowel? (third word)) empty]\n          [(is-consonant? (third\
    \ word))\n           (cond\n             [(empty? (rest (rest (rest word)))) empty]\n\
    \             [(is-vowel? (fourth word)) empty]\n             [(is-consonant?\
    \ (fourth word))\n              (find-vowel-between-consonants (rest (rest (rest\
    \ (rest word)))))]\n             [", "  (define (is-vowel? c)\n    (member c '(\"\
    a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper word)\n  \
    \  (if (or (empty? word) (empty? (rest word)))\n        \"\"\n        (if (and\
    \ (is-consonant? (first word)) (is-vowel? (second word)))\n            (second\
    \ word)\n            (get-closest-vowel-helper (rest word)))))\n  (get-closest-vowel-helper\
    \ (reverse word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (if (empty? word)\n\
    \        \"\"\n        (if (and (is-consonant? (first word))\n               \
    \  (is-vowel? (second word)))\n            (first word)\n            (find-closest-vowel\
    \ (rest word)))))\n  (find-closest-vowel (reverse word)))\n", "  (define (is-vowel?\
    \ c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"\
    U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel\
    \ word)\n    (cond ((null? word) \"\")\n          ((and (is-vowel? (car word))\n\
    \                (is-consonant? (cadr word)))\n           (car word))\n      \
    \    (else (find-closest-vowel (cdr word)))))\n  (find-closest-vowel word))\n",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (find-vowel word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel?\
    \ (first word)) (first word)]\n      [else (find-vowel (rest word))]))\n  (define\
    \ (find-consonant word)\n    (cond\n      [(empty? word) empty]\n      [(is-consonant?\
    \ (first word)) (first word)]\n      [else (find-consonant (rest word))]))\n \
    \ (define (find-vowel-between-consonants word)\n    (cond\n      [(empty? word)\
    \ empty]\n      [(and (is-vowel? (first word)) (is-consonant? (second word)))\
    \ (first word)]\n      [else (find-vowel-between-consonants (rest word))]))\n\
    \  (cond\n    [(empty? word) empty]\n    [(is-vowel? (first word)) empty]\n  \
    \  [(is-consonant? (first word)) (find-vowel-between-consonants word)]\n    [else\
    \ (find-vowel-between-consonants (rest word))]))\n", "  (define (is-vowel? c)\n\
    \    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n\
    \    (cond\n      [(null? word) #f]\n      [(is-vowel? (car word)) (car word)]\n\
    \      [(and (is-consonant? (car word)) (is-vowel? (cadr word))) (cadr word)]\n\
    \      [else (find-closest-vowel (cdr word))]))\n  (cond\n    [(null? word) \"\
    \"]\n    [(is-vowel? (car word)) \"\"]\n    [else (find-closest-vowel word)]))\n",
  "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)]\n   \
    \     [word-len (string-length word)]\n        [i (- word-len 1)])\n    (cond\n\
    \      [(< i 1) \"\"]\n      [(member (string-ref word i) vowels)\n       (string-ref\
    \ word i)]\n      [else\n       (get_closest_vowel (substring word 0 i))])))\n",
  "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"\
    E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n\
    \  (define (find-closest-vowel word)\n    (cond [(empty? word) empty]\n      \
    \    [(is-vowel? (first word)) (first word)]\n          [(is-consonant? (first\
    \ word)) (find-closest-vowel (rest word))]))\n  (find-closest-vowel (reverse word)))\n",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (find-closest-vowel word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel?\
    \ (first word)) empty]\n      [(is-consonant? (first word)) (find-closest-vowel\
    \ (rest word))]\n      [else (first word)]))\n  (find-closest-vowel (reverse word)))\n",
  "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u)]\n        [consonants (list #\\\
    b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\\
    v #\\w #\\x #\\y #\\z)]\n        [word (string->list word)])\n    (let loop ([word\
    \ word]\n               [closest-vowel #\\a]\n               [closest-distance\
    \ (length word)])\n      (cond [(empty? word) (list->string (list closest-vowel))]\n\
    \            [(member (first word) vowels)\n             (loop (rest word) (first\
    \ word) (- (length word) (length (rest word))))]\n            [(member (first\
    \ word) consonants)\n             (loop (rest word) closest-vowel closest-distance)]\n\
    \            [else (loop (rest word) closest-vowel closest-distance)]))))\n",
  "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"\
    E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n\
    \  (define (get-closest-vowel word)\n    (if (empty? word)\n        \"\"\n   \
    \     (if (and (is-consonant? (first word))\n                 (is-vowel? (second\
    \ word)))\n            (first word)\n            (get-closest-vowel (rest word)))))\n\
    \  (get-closest-vowel (reverse word)))\n", "  (define (is-vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(is-vowel? (first word)) (first word)]\n\
    \      [else (find-closest-vowel (rest word))]))\n  (define (find-closest-consonant\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-consonant? (first\
    \ word)) (first word)]\n      [else (find-closest-consonant (rest word))]))\n\
    \  (define (find-closest-vowel-between-consonants word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(is-vowel? (first word))\n       (if (is-consonant? (second\
    \ word))\n           (first word)\n           (find-closest-vowel-between-consonants\
    \ (rest word)))]\n      [else (find-closest-vowel-between-consonants (rest word))]))\n\
    \  (find-closest-vowel-between-consonants (reverse word)))\n", "  (define (is-vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel\
    \ word)\n    (cond [(empty? word) empty]\n          [(is-vowel? (first word))\
    \ (first word)]\n          [(and (is-consonant? (first word))\n              \
    \  (is-consonant? (second word)))\n           (find-closest-vowel (rest word))]\n\
    \          [else empty]))\n  (find-closest-vowel word))\n", "  (define (is-vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-vowel-from-right\
    \ word)\n    (let loop ([word (string-reverse word)]\n               [prev-char\
    \ #\\])\n               [next-char #\\])\n      (if (string-empty? word)\n   \
    \       \"\"\n          (set! next-char (string-ref word 0))\n          (if (and\
    \ (is-consonant? prev-char)\n                   (is-vowel? next-char))\n     \
    \         (string next-char)\n              (loop (substring word 1)\n       \
    \             next-char\n                    (string-ref word 1))))))\n  (find-vowel-from-right\
    \ word))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-vowel word)\n    (cond\n      [(empty? word) empty]\n\
    \      [(is-vowel? (first word)) (first word)]\n      [else (find-vowel (rest\
    \ word))]))\n  (define (find-consonant word)\n    (cond\n      [(empty? word)\
    \ empty]\n      [(is-consonant? (first word)) (first word)]\n      [else (find-consonant\
    \ (rest word))]))\n  (define (find-vowel-between-consonants word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(and (is-vowel? (first word)) (is-consonant?\
    \ (second word))) (first word)]\n      [else (find-vowel-between-consonants (rest\
    \ word))]))\n  (cond\n    [(empty? word) empty]\n    [(and (is-vowel? (first word))\
    \ (is-consonant? (second word))) (first word)]\n    [(and (is-consonant? (first\
    \ word)) (is-vowel? (second word))) (second word)]\n    [else (find-vowel-between-consonants\
    \ (rest word))]))\n", "  (define (get-closest-vowel-helper word index)\n    (cond\n\
    \      [(empty? word) \"\"]\n      [(and (char-vowel? (first word))\n        \
    \    (char-consonant? (string-ref word (- index 1)))\n            (char-consonant?\
    \ (string-ref word (- index 2))))\n       (first word)]\n      [else (get-closest-vowel-helper\
    \ (rest word) (+ index 1))]))\n  (get-closest-vowel-helper word 0))\n", "  (define\
    \ (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=?\
    \ c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper word)\n  \
    \  (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word)) (first\
    \ word)]\n      [(is-consonant? (first word)) (get-closest-vowel-helper (rest\
    \ word))]))\n  (get-closest-vowel-helper (reverse word)))\n", "  (define (is-vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (is-consonant? c)\n    (and (not (is-vowel? c))\n         (not (char=?\
    \ c #\\y))\n         (not (char=? c #\\Y))))\n  (define (get-closest-vowel-helper\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word))\
    \ (first word)]\n      [(is-consonant? (first word)) (get-closest-vowel-helper\
    \ (rest word))]\n      [else empty]))\n  (get-closest-vowel-helper (reverse word)))\n",
  "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)]\n   \
    \     [consonants (list #\\b #\\c #\\d #\\f #\\g #\\h #\\j #\\k #\\l #\\m #\\\
    n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\z #\\B #\\C #\\D #\\F #\\G #\\\
    H #\\J #\\K #\\L #\\M #\\N #\\P #\\Q #\\R #\\S #\\T #\\V #\\W #\\X #\\Y #\\Z)])\n\
    \    (let loop ([i (sub1 (string-length word))]\n               [vowel #f])\n\
    \      (if (and (not vowel) (< 0 i))\n          (if (member (string-ref word i)\
    \ vowels)\n              (loop (sub1 i) (string-ref word i))\n              (loop\
    \ (sub1 i) vowel))\n          vowel))))\n", "  (define (is-vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper word)\n  \
    \  (if (empty? word)\n        \"\"\n        (if (is-vowel? (first word))\n   \
    \         (if (is-consonant? (second word))\n                (first word)\n  \
    \              (get-closest-vowel-helper (rest word)))\n            (get-closest-vowel-helper\
    \ (rest word)))))\n  (get-closest-vowel-helper (reverse word)))\n", "  (define\
    \ (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O\
    \ #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-vowel\
    \ word)\n    (cond [(empty? word) empty]\n          [(is-vowel? (first word))\
    \ (first word)]\n          [else (find-vowel (rest word))]))\n  (define (find-consonant\
    \ word)\n    (cond [(empty? word) empty]\n          [(is-consonant? (first word))\
    \ (first word)]\n          [else (find-consonant (rest word))]))\n  (define (find-vowel-between-consonants\
    \ word)\n    (cond [(empty? word) empty]\n          [(is-vowel? (first word))\
    \ empty]\n          [(is-consonant? (first word))\n           (cond [(is-consonant?\
    \ (second word)) (find-vowel word)]\n                 [else (find-vowel-between-consonants\
    \ (rest word))])]\n          [else (find-vowel-between-consonants (rest word))]))\n\
    \  (find-vowel-between-consonants word))\n", "  (define (is-vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (cond\
    \ [(empty? word) empty]\n          [(is-vowel? (first word)) (first word)]\n \
    \         [(is-consonant? (first word)) (find-closest-vowel (rest word))]))\n\
    \  (find-closest-vowel (reverse word)))\n", "  (define (is-vowel? ch)\n    (member\
    \ ch '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant?\
    \ ch)\n    (not (is-vowel? ch)))\n  (define (find-closest-vowel word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(is-vowel? (first word)) (first word)]\n\
    \      [(is-consonant? (first word)) (find-closest-vowel (rest word))]))\n  (find-closest-vowel\
    \ (reverse word)))\n", "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is_consonant? c)\n    (not\
    \ (is_vowel? c)))\n  (define (get-closest-vowel-helper word)\n    (cond\n    \
    \  [(empty? word) empty]\n      [(is_vowel? (first word)) (first word)]\n    \
    \  [(is_consonant? (first word)) (get-closest-vowel-helper (rest word))]))\n \
    \ (get-closest-vowel-helper (reverse word)))\n", "  (define (is-vowel? c)\n  \
    \  (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-vowel word)\n \
    \   (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word)) (first\
    \ word)]\n      [else (find-vowel (rest word))]))\n  (define (find-consonant word)\n\
    \    (cond\n      [(empty? word) empty]\n      [(is-consonant? (first word)) (first\
    \ word)]\n      [else (find-consonant (rest word))]))\n  (define (find-vowel-between-consonants\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(and (is-vowel? (first\
    \ word))\n            (is-consonant? (second word))\n            (is-consonant?\
    \ (third word)))\n       (first word)]\n      [else (find-vowel-between-consonants\
    \ (rest word))]))\n  (cond\n    [(empty? word) empty]\n    [(is-vowel? (first\
    \ word)) empty]\n    [(is-consonant? (first word))\n     (cond\n       [(empty?\
    \ (rest word)) empty]\n       [(is-vowel? (second word)) empty]\n       [(is-consonant?\
    \ (second word))\n        (cond\n          [(empty? (rest (rest word))) empty]\n\
    \          [(is-vowel? (third word)) empty]\n          [(is-consonant? (third\
    \ word))\n           (find-vowel-between-consonants (rest (rest (rest word))))])])]))\n",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (get-closest-vowel-helper word)\n    (cond\n      [(empty? word) empty]\n  \
    \    [(is-vowel? (first word)) (first word)]\n      [(is-consonant? (first word))\
    \ (get-closest-vowel-helper (rest word))]))\n  (get-closest-vowel-helper (reverse\
    \ word)))\n", "  (cond\n    [(empty? word) \"\"]\n    [(empty? (rest word)) \"\
    \"]\n    [(and (consonant? (first word)) (consonant? (second word))) (get_closest_vowel\
    \ (rest word))]\n    [(and (consonant? (first word)) (vowel? (second word))) (second\
    \ word)]\n    [else (get_closest_vowel (rest word))]))\n", "  (define (is_vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (is_consonant? c)\n    (not (is_vowel? c)))\n  (define (find-closest-vowel\
    \ word)\n    (if (null? word)\n        \"\"\n        (if (and (is_consonant? (car\
    \ word))\n                 (is_vowel? (cadr word)))\n            (string (cadr\
    \ word))\n            (find-closest-vowel (cdr word)))))\n  (find-closest-vowel\
    \ word))\n", "  (define (get-vowel-pos word)\n    (define (get-vowel-pos-iter\
    \ word pos)\n      (cond [(empty? word) #f]\n            [(member (first word)\
    \ '(\"a\" \"e\" \"i\" \"o\" \"u\")) pos]\n            [else (get-vowel-pos-iter\
    \ (rest word) (+ pos 1))]))\n    (get-vowel-pos-iter word 0))\n  (define (get-consonant-pos\
    \ word)\n    (define (get-consonant-pos-iter word pos)\n      (cond [(empty? word)\
    \ #f]\n            [(member (first word) '(\"a\" \"e\" \"i\" \"o\" \"u\")) #f]\n\
    \            [else (get-consonant-pos-iter (rest word) (+ pos 1))]))\n    (get-consonant-pos-iter\
    \ word 0))\n  (define (get-closest-vowel-iter word pos)\n    (cond [(empty? word)\
    \ \"\"]\n          [(and (not (empty? (rest word)))\n                (not (empty?\
    \ (rest (rest word))))\n                (member (first word) '(\"a\" \"e\" \"\
    i\" \"o\" \"u\"))\n                (member (first (rest word)) '(\"a\" \"e\" \"\
    i\" \"o\" \"u\"))\n                (member (first (rest (rest word))) '(\"a\"\
    \ \"e\" \"i\" \"o\" \"u\")))\n           (get-closest-vowel-iter (rest word) (+\
    \ pos 1))]\n          [(and (not (empty? (rest word)))\n                (not (empty?\
    \ (rest (rest word))))\n                (member (first word) '(\"a\" \"e\" \"\
    i\" \"o\" \"u\"))\n                (member (first (rest word)) '(\"a\" \"e\" \"\
    i\" \"o\" \"u\"))\n                (not (member (first (rest (rest word))) '(\"\
    a\" \"e\" \"i\" \"o\" \"u\"))))\n           (string-ref word pos)]\n         \
    \ [(and (not (empty? (rest word)))\n                (not (empty? (", "  (define\
    \ (get-closest-vowel-helper word i)\n    (if (= i (string-length word))\n    \
    \    \"\"\n        (let ((char (string-ref word i)))\n          (if (or (char=?\
    \ char #\\a) (char=? char #\\e) (char=? char #\\i) (char=? char #\\o) (char=?\
    \ char #\\u))\n              (if (and (not (char=? (string-ref word (- i 1)) #\\\
    a))\n                       (not (char=? (string-ref word (- i 1)) #\\e))\n  \
    \                     (not (char=? (string-ref word (- i 1)) #\\i))\n        \
    \               (not (char=? (string-ref word (- i 1)) #\\o))\n              \
    \         (not (char=? (string-ref word (- i 1)) #\\u)))\n                  (if\
    \ (and (not (char=? (string-ref word (+ i 1)) #\\a))\n                       \
    \    (not (char=? (string-ref word (+ i 1)) #\\e))\n                         \
    \  (not (char=? (string-ref word (+ i 1)) #\\i))\n                           (not\
    \ (char=? (string-ref word (+ i 1)) #\\o))\n                           (not (char=?\
    \ (string-ref word (+ i 1)) #\\u)))\n                      (string char)\n   \
    \                   (get-closest-vowel-helper word (+ i 1)))\n               \
    \   (get-closest-vowel-helper word (+ i 1)))\n              (get-closest-vowel-helper\
    \ word (+ i 1))))))\n  (get-closest-vowel-helper word 0))\n", "  (define (is_vowel?\
    \ c)\n    (or (equal? c #\\a)\n        (equal? c #\\e)\n        (equal? c #\\\
    i)\n        (equal? c #\\o)\n        (equal? c #\\u)))\n  (define (is_consonant?\
    \ c)\n    (not (is_vowel? c)))\n  (define (get-closest-vowel-helper word)\n  \
    \  (if (empty? word)\n        \"\"\n        (let ([c (first word)])\n        \
    \  (if (is_vowel? c)\n              (if (and (not (empty? (rest word)))\n    \
    \                   (is_consonant? (second word)))\n                  (string-append\
    \ (list c))\n                  (get-closest-vowel-helper (rest word)))\n     \
    \         (get-closest-vowel-helper (rest word))))))\n  (get-closest-vowel-helper\
    \ (string-reverse word)))\n", "  (define (is_vowel? c)\n    (member c '(#\\a #\\\
    e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is_consonant? c)\n  \
    \  (not (is_vowel? c)))\n  (define (get-closest-vowel-helper word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(is_vowel? (first word)) (first word)]\n\
    \      [(is_consonant? (first word)) (get-closest-vowel-helper (rest word))]))\n\
    \  (get-closest-vowel-helper (reverse word)))\n", "  (define (is-vowel? c)\n \
    \   (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n\
    \  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (if (null? word)\n        \"\"\n        (if (and (is-consonant? (car\
    \ word))\n                 (is-vowel? (cadr word)))\n            (cadr word)\n\
    \            (get-closest-vowel-helper (cdr word)))))\n  (get-closest-vowel-helper\
    \ (reverse (string->list word))))\n", "  (define (is-vowel? c)\n    (member c\
    \ '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (cond\
    \ ((null? word) \"\")\n          ((and (is-vowel? (car word)) (is-consonant? (cadr\
    \ word)))\n           (car word))\n          (else (find-closest-vowel (cdr word)))))\n\
    \  (find-closest-vowel word))\n", "  (define (is-vowel? c)\n    (member c '(#\\\
    a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n\
    \    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (if (or (empty?\
    \ word) (is-vowel? (first word)))\n        (find-closest-vowel (rest word))\n\
    \        (if (is-consonant? (second word))\n            (first word)\n       \
    \     (find-closest-vowel (rest word)))))\n  (find-closest-vowel (reverse word)))\n",
  "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"\
    E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n\
    \  (define (find-vowel word)\n    (cond\n      [(empty? word) \"\"]\n      [(is-vowel?\
    \ (first word)) (first word)]\n      [else (find-vowel (rest word))]))\n  (define\
    \ (find-consonant word)\n    (cond\n      [(empty? word) \"\"]\n      [(is-consonant?\
    \ (first word)) (first word)]\n      [else (find-consonant (rest word))]))\n \
    \ (define (find-consonant-vowel-consonant word)\n    (cond\n      [(empty? word)\
    \ \"\"]\n      [(and (is-consonant? (first word))\n            (is-vowel? (second\
    \ word))\n            (is-consonant? (third word))) (second word)]\n      [else\
    \ (find-consonant-vowel-consonant (rest word))]))\n  (cond\n    [(empty? word)\
    \ \"\"]\n    [(is-vowel? (first word)) (find-consonant-vowel-consonant (rest word))]\n\
    \    [(is-consonant? (first word)) (find-vowel (rest word))]\n    [else \"\"]))\n",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (get-closest-vowel-helper word)\n    (cond [(empty? word) empty]\n         \
    \ [(is-vowel? (first word)) (first word)]\n          [(is-consonant? (first word))\
    \ (get-closest-vowel-helper (rest word))]))\n  (get-closest-vowel-helper (reverse\
    \ word)))\n", "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is_consonant? c)\n    (not (is_vowel?\
    \ c)))\n  (define (get-closest-vowel-helper word)\n    (if (or (empty? word) (is_vowel?\
    \ (first word)))\n        (get-closest-vowel-helper (rest word))\n        (if\
    \ (is_consonant? (second word))\n            (first word)\n            (get-closest-vowel-helper\
    \ (rest word)))))\n  (get-closest-vowel-helper (reverse word)))\n", "  (define\
    \ (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O\
    \ #\\U)))\n  (define (is_consonant? c)\n    (not (is_vowel? c)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (if (or (empty? word) (empty? (rest word)))\n        \"\"\n     \
    \   (if (and (is_consonant? (first word)) (is_vowel? (second word)))\n       \
    \     (second word)\n            (get-closest-vowel-helper (rest word)))))\n \
    \ (get-closest-vowel-helper (reverse word)))\n", "  (cond\n    [(empty? word)\
    \ \"\"]\n    [(empty? (rest word)) \"\"]\n    [(not (vowel? (first word))) (get_closest_vowel\
    \ (rest word))]\n    [(not (vowel? (second word))) (get_closest_vowel (rest word))]\n\
    \    [else (first word)]))\n", "  (let ([vowels (list #\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)]\n        [consonants (list #\\b #\\c #\\d #\\f #\\\
    g #\\h #\\j #\\k #\\l #\\m #\\n #\\p #\\q #\\r #\\s #\\t #\\v #\\w #\\x #\\y #\\\
    z #\\B #\\C #\\D #\\F #\\G #\\H #\\J #\\K #\\L #\\M #\\N #\\P #\\Q #\\R #\\S #\\\
    T #\\V #\\W #\\X #\\Y #\\Z)])\n    (define (get-closest-vowel-helper word)\n \
    \     (if (empty? word)\n          \"\"\n          (if (member (first word) vowels)\n\
    \              (if (member (second word) consonants)\n                  (if (member\
    \ (third word) consonants)\n                      (string (first word))\n    \
    \                  (get-closest-vowel-helper (rest word)))\n                 \
    \ (get-closest-vowel-helper (rest word)))\n              (get-closest-vowel-helper\
    \ (rest word)))))\n    (get-closest-vowel-helper word)))\n", "  (cond\n    [(empty?\
    \ word) empty]\n    [(empty? (rest word)) empty]\n    [(consonant? (first word))\
    \ (get_closest_vowel (rest word))]\n    [(consonant? (second word)) (first word)]\n\
    \    [else (get_closest_vowel (rest word))]))\n", "  (define (get-closest-vowel-helper\
    \ word)\n    (if (empty? word)\n        \"\"\n        (let ([c (first word)])\n\
    \          (if (or (equal? c \"a\") (equal? c \"e\") (equal? c \"i\") (equal?\
    \ c \"o\") (equal? c \"u\"))\n              c\n              (get-closest-vowel-helper\
    \ (rest word))))))\n  (get-closest-vowel-helper (reverse word)))\n", "  (define\
    \ (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O\
    \ #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word))\
    \ empty]\n      [(is-consonant? (first word)) (get-closest-vowel-helper (rest\
    \ word))]\n      [else (cons (first word) (get-closest-vowel-helper (rest word)))]))\n\
    \  (string-&gt;list (get-closest-vowel-helper (string-&gt;list word))))\n</code>\n",
  "  (define (get-closest-vowel-iter word)\n    (if (empty? word)\n        \"\"\n\
    \        (if (and (consonant? (first word)) (vowel? (second word)))\n        \
    \    (first word)\n            (get-closest-vowel-iter (rest word)))))\n  (get-closest-vowel-iter\
    \ (reverse word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (cond ((empty? word)\
    \ empty)\n          ((is-vowel? (first word)) (first word))\n          ((is-consonant?\
    \ (first word)) (find-closest-vowel (rest word)))))\n  (define (find-closest-consonant\
    \ word)\n    (cond ((empty? word) empty)\n          ((is-consonant? (first word))\
    \ (first word))\n          ((is-vowel? (first word)) (find-closest-consonant (rest\
    \ word)))))\n  (cond ((empty? word) empty)\n        ((is-vowel? (first word))\
    \ empty)\n        ((is-consonant? (first word)) (find-closest-vowel (rest word)))))\n",
  "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is_consonant? c)\n    (not (is_vowel? c)))\n  (define\
    \ (get-closest-vowel-helper word)\n    (cond\n      [(empty? word) empty]\n  \
    \    [(is_vowel? (first word)) (first word)]\n      [(is_consonant? (first word))\
    \ (get-closest-vowel-helper (rest word))]))\n  (get-closest-vowel-helper (reverse\
    \ word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-closest-vowel word)\n    (cond\n      [(empty? word) empty]\n\
    \      [(is-vowel? (first word)) empty]\n      [(is-consonant? (first word)) (find-closest-vowel\
    \ (rest word))]\n      [else (first word)]))\n  (find-closest-vowel (reverse word)))\n",
  "  (define (is_vowel? c)\n    (or (equal? c #\\a)\n        (equal? c #\\e)\n   \
    \     (equal? c #\\i)\n        (equal? c #\\o)\n        (equal? c #\\u)))\n  (define\
    \ (is_consonant? c)\n    (not (is_vowel? c)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (cond ((empty? word) \"\")\n          ((and (is_vowel? (first word))\n\
    \                (is_consonant? (second word)))\n           (first word))\n  \
    \        (else (get-closest-vowel-helper (rest word)))))\n  (get-closest-vowel-helper\
    \ (rest (reverse word))))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\\
    e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n  \
    \  (not (is-vowel? c)))\n  (define (get-closest-vowel-helper word)\n    (cond\n\
    \      [(null? word) #f]\n      [(is-vowel? (car word)) (get-closest-vowel-helper\
    \ (cdr word))]\n      [(is-consonant? (car word)) (get-closest-vowel-helper (cdr\
    \ word))]\n      [else (car word)]))\n  (get-closest-vowel-helper (reverse word)))\n",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (get-closest-vowel-helper word)\n    (if (or (empty? word) (empty? (rest word)))\n\
    \        \"\"\n        (if (and (is-consonant? (first word)) (is-vowel? (second\
    \ word)))\n            (second word)\n            (get-closest-vowel-helper (rest\
    \ word)))))\n  (get-closest-vowel-helper (reverse word)))\n", "  (define (is_vowel?\
    \ c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o)\
    \ (char=? c #\\u)))\n  (define (is_consonant? c)\n    (not (is_vowel? c)))\n \
    \ (define (find-closest-vowel word)\n    (if (or (null? word) (null? (cdr word)))\n\
    \        \"\"\n        (if (and (is_consonant? (car word)) (is_vowel? (cadr word)))\n\
    \            (list-ref word 1)\n            (find-closest-vowel (cdr word)))))\n\
    \  (find-closest-vowel (reverse word)))\n", "  (define (is-vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel lst)\n    (cond\
    \ [(null? lst) \"\"]\n          [(is-vowel? (car lst)) (car lst)]\n          [else\
    \ (find-closest-vowel (cdr lst))]))\n  (define (find-closest-consonant lst)\n\
    \    (cond [(null? lst) \"\"]\n          [(is-consonant? (car lst)) (car lst)]\n\
    \          [else (find-closest-consonant (cdr lst))]))\n  (define (find-closest-vowel-between-consonants\
    \ lst)\n    (cond [(null? lst) \"\"]\n          [(and (is-consonant? (car lst))\
    \ (is-vowel? (cadr lst)) (is-consonant? (caddr lst))) (cadr lst)]\n          [else\
    \ (find-closest-vowel-between-consonants (cdr lst))]))\n  (find-closest-vowel-between-consonants\
    \ (reverse (string->list word))))\n", "  (let loop ([word (string->list word)]\n\
    \             [vowels '()])\n    (cond [(empty? word) (list->string (reverse vowels))]\n\
    \          [(member (car word) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n           (loop\
    \ (cdr word) (cons (car word) vowels))]\n          [else (loop (cdr word) vowels)])))\n",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (get-closest-vowel-from-right word)\n    (let loop ([word (string-reverse word)]\n\
    \               [prev-char #\\a]\n               [prev-prev-char #\\a])\n    \
    \  (cond [(empty? word) \"\"]\n            [(is-vowel? (first word))\n       \
    \      (cond [(and (is-consonant? prev-char)\n                         (is-consonant?\
    \ prev-prev-char))\n                    (string-reverse (first word))]\n     \
    \              [else (loop (rest word) (first word) prev-char)])]\n          \
    \  [else (loop (rest word) (first word) prev-char)])))\n  (get-closest-vowel-from-right\
    \ word))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-closest-vowel word)\n    (cond\n      [(empty? word) empty]\n\
    \      [(is-vowel? (first word)) empty]\n      [(is-consonant? (first word)) (find-closest-vowel\
    \ (rest word))]\n      [else (first word)]))\n  (find-closest-vowel (reverse word)))\n",
  "  (define (get-closest-vowel-iter word index)\n    (if (or (= index 0) (= index\
    \ (- (string-length word) 1)))\n        \"\"\n        (if (and (char-vowel? (string-ref\
    \ word index))\n                 (char-consonant? (string-ref word (- index 1)))\n\
    \                 (char-consonant? (string-ref word (+ index 1))))\n         \
    \   (string (string-ref word index))\n            (get-closest-vowel-iter word\
    \ (- index 1)))))\n  (get-closest-vowel-iter word (- (string-length word) 1)))\n",
  "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n   \
    \     (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (if (or (null? word) (null? (cdr word)))\n        \"\"\n        (if\
    \ (and (is-consonant? (car word))\n                 (is-vowel? (cadr word)))\n\
    \            (string (cadr word))\n            (get-closest-vowel-helper (cdr\
    \ word)))))\n  (get-closest-vowel-helper (string-reverse word)))\n", "  (define\
    \ (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O\
    \ #\\U)))\n  (define (is_consonant? c)\n    (not (is_vowel? c)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (if (or (empty? word) (empty? (rest word)))\n        \"\"\n     \
    \   (if (and (is_consonant? (first word)) (is_vowel? (second word)))\n       \
    \     (second word)\n            (get-closest-vowel-helper (rest word)))))\n \
    \ (get-closest-vowel-helper (reverse word)))\n", "  (define (is-vowel? c)\n  \
    \  (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define\
    \ (get-closest-vowel-helper word)\n    (if (null? word)\n        \"\"\n      \
    \  (if (and (is-vowel? (car word))\n                 (not (is-vowel? (cadr word))))\n\
    \            (string (car word))\n            (get-closest-vowel-helper (cdr word)))))\n\
    \  (get-closest-vowel-helper (reverse (string->list word))))\n", "  (define (is-vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (if (or (empty? word) (empty? (rest word)))\n        \"\"\n     \
    \   (if (and (is-consonant? (first word)) (is-vowel? (second word)))\n       \
    \     (second word)\n            (get-closest-vowel-helper (rest word)))))\n \
    \ (get-closest-vowel-helper (reverse word)))\n", "  (define (is-vowel? c)\n  \
    \  (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=?\
    \ c #\\u)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (find-closest-vowel word)\n    (cond ((or (null? word) (null? (cdr word))) \"\
    \")\n          ((and (is-consonant? (car word)) (is-vowel? (cadr word))) (list-ref\
    \ word 1))\n          (else (find-closest-vowel (cdr word)))))\n  (find-closest-vowel\
    \ word))\n", "  (define (get-closest-vowel-iter word index)\n    (cond\n     \
    \ [(= index (string-length word)) \"\"]\n      [(and (not (vowel? (string-ref\
    \ word index)))\n            (vowel? (string-ref word (- index 1))))\n       (string-ref\
    \ word (- index 1))]\n      [else (get-closest-vowel-iter word (+ index 1))]))\n\
    \  (get-closest-vowel-iter word 1))\n", "  (define (get-closest-vowel-iter word\
    \ i)\n    (cond\n      [(= i (- (string-length word) 1)) \"\"]\n      [(and (char-vowel?\
    \ (string-ref word i))\n            (char-consonant? (string-ref word (- i 1)))\n\
    \            (char-consonant? (string-ref word (+ i 1))))\n       (string (string-ref\
    \ word i))]\n      [else (get-closest-vowel-iter word (+ i 1))]))\n  (get-closest-vowel-iter\
    \ word 0))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (is-consonant-vowel-consonant? word)\n    (and (is-consonant?\
    \ (string-ref word 0))\n         (is-vowel? (string-ref word 1))\n         (is-consonant?\
    \ (string-ref word 2))))\n  (define (get-closest-vowel word)\n    (cond ((is-consonant-vowel-consonant?\
    \ word)\n           (string-ref word 1))\n          ((&gt; (string-length word)\
    \ 3)\n           (get-closest-vowel (substring word 1)))\n          (else \"\"\
    )))\n  (get-closest-vowel word))\n</code>\n", "  (define (get-closest-vowel-helper\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(vowel? (first word))\
    \ (first word)]\n      [else (get-closest-vowel-helper (rest word))]))\n  (get-closest-vowel-helper\
    \ (reverse word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (find-vowel-from-right word)\n    (cond\n      [(null?\
    \ word) #f]\n      [(is-vowel? (car word)) (car word)]\n      [else (find-vowel-from-right\
    \ (cdr word))]))\n  (define (find-consonant-from-right word)\n    (cond\n    \
    \  [(null? word) #f]\n      [(is-consonant? (car word)) (car word)]\n      [else\
    \ (find-consonant-from-right (cdr word))]))\n  (define (find-vowel-from-left word)\n\
    \    (cond\n      [(null? word) #f]\n      [(is-vowel? (car (reverse word))) (car\
    \ (reverse word))]\n      [else (find-vowel-from-left (reverse (cdr (reverse word))))]))\n\
    \  (define (find-consonant-from-left word)\n    (cond\n      [(null? word) #f]\n\
    \      [(is-consonant? (car (reverse word))) (car (reverse word))]\n      [else\
    \ (find-consonant-from-left (reverse (cdr (reverse word))))]))\n  (define (find-vowel-between-consonants\
    \ word)\n    (cond\n      [(null? word) #f]\n      [(and (is-vowel? (car word))\n\
    \            (is-consonant? (find-consonant-from-left word))\n            (is-consonant?\
    \ (find-consonant-from-right word))) (car word)]\n      [else (find-vowel-between-consonants\
    \ (cdr word))]))\n  (cond\n    [(null? word) \"\"]\n    [(find-vowel-between-consonants\
    \ word) (", "  (define (is-vowel? c)\n    (or (string=? c \"a\")\n        (string=?\
    \ c \"e\")\n        (string=? c \"i\")\n        (string=? c \"o\")\n        (string=?\
    \ c \"u\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (get-closest-vowel-helper word)\n    (cond\n      [(empty? word) empty]\n  \
    \    [(is-vowel? (first word)) (first word)]\n      [(is-consonant? (first word))\
    \ (get-closest-vowel-helper (rest word))]))\n  (get-closest-vowel-helper (reverse\
    \ word)))\n", "  (define (is_vowel? c)\n    (or (equal? c #\\a)\n        (equal?\
    \ c #\\e)\n        (equal? c #\\i)\n        (equal? c #\\o)\n        (equal? c\
    \ #\\u)))\n  (define (is_consonant? c)\n    (not (is_vowel? c)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (if (or (null? word)\n            (null? (cdr word)))\n        \"\
    \"\n        (let ((first (car word))\n              (second (cadr word)))\n  \
    \        (if (and (is_consonant? first)\n                   (is_vowel? second))\n\
    \              (string second)\n              (get-closest-vowel-helper (cdr word))))))\n\
    \  (get-closest-vowel-helper (string->list word)))\n", "  (let ([vowels (string-&gt;list\
    \ \"aeiouAEIOU\")]\n        [word (string-&gt;list word)])\n    (cond\n      [(empty?\
    \ word) \"\"]\n      [(empty? (rest word)) \"\"]\n      [(member (first word)\
    \ vowels) \"\"]\n      [(member (first (rest word)) vowels) (first (rest word))]\n\
    \      [else (get_closest_vowel (rest word))])))\n</code>\n", "  (define (is-vowel?\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (find-vowel word)\n    (if (null? word)\n\
    \        \"\"\n        (if (is-vowel? (car word))\n            (car word)\n  \
    \          (find-vowel (cdr word)))))\n  (define (find-consonant word)\n    (if\
    \ (null? word)\n        \"\"\n        (if (is-consonant? (car word))\n       \
    \     (car word)\n            (find-consonant (cdr word)))))\n  (define (find-vowel-between-consonants\
    \ word)\n    (if (null? word)\n        \"\"\n        (if (and (is-consonant? (car\
    \ word))\n                 (is-vowel? (cadr word))\n                 (is-consonant?\
    \ (caddr word)))\n            (cadr word)\n            (find-vowel-between-consonants\
    \ (cdr word)))))\n  (find-vowel-between-consonants word))\n", "  (define (is-vowel?\
    \ c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\\
    i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (cond\
    \ ((null? word) \"\")\n          ((and (is-vowel? (car word))\n              \
    \  (is-consonant? (cadr word)))\n           (string (car word)))\n          (else\
    \ (find-closest-vowel (cdr word)))))\n  (find-closest-vowel (reverse (string->list\
    \ word))))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-vowel word)\n    (cond\n      [(empty? word) empty]\n\
    \      [(is-vowel? (first word)) (first word)]\n      [else (find-vowel (rest\
    \ word))]))\n  (define (find-consonant word)\n    (cond\n      [(empty? word)\
    \ empty]\n      [(is-consonant? (first word)) (first word)]\n      [else (find-consonant\
    \ (rest word))]))\n  (define (find-vowel-between-consonants word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(and (is-vowel? (first word))\n         \
    \   (is-consonant? (second word))\n            (is-consonant? (third word)))\n\
    \       (first word)]\n      [else (find-vowel-between-consonants (rest word))]))\n\
    \  (cond\n    [(empty? word) empty]\n    [(is-vowel? (first word)) empty]\n  \
    \  [(is-consonant? (first word))\n     (cond\n       [(empty? (rest word)) empty]\n\
    \       [(is-vowel? (second word)) empty]\n       [(is-consonant? (second word))\n\
    \        (cond\n          [(empty? (rest (rest word))) empty]\n          [(is-vowel?\
    \ (third word)) empty]\n          [(is-consonant? (third word))\n           (cond\n\
    \             [(empty? (rest (rest (rest word)))) empty]\n             [(is-vowel?\
    \ (fourth word)) empty]\n             [(is-consonant? (fourth word))\n       \
    \       (cond\n                [(empty? (rest (rest (rest (rest word))))) empty]\n\
    \                [(is-vowel? (fifth word)) empty]\n                [(is-conson",
  "  (cond\n    [(empty? word) \"\"]\n    [(empty? (rest word)) \"\"]\n    [(and (member\
    \ (first word) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n          (member (second word)\
    \ '(\"a\" \"e\" \"i\" \"o\" \"u\")))\n     (get_closest_vowel (rest word))]\n\
    \    [(and (member (first word) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n          (not\
    \ (member (second word) '(\"a\" \"e\" \"i\" \"o\" \"u\"))))\n     (first word)]\n\
    \    [else (get_closest_vowel (rest word))]))\n", "  (define (is-vowel? c)\n \
    \   (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\i) (char=? c #\\o) (char=?\
    \ c #\\u)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (find-vowel-from-right word)\n    (let loop ([word word] [prev-char #\\])\n\
    \      (cond [(empty? word) \"\"]\n            [(is-vowel? (first word)) (first\
    \ word)]\n            [(is-consonant? (first word)) (loop (rest word) (first word))]\n\
    \            [(is-vowel? prev-char) (first word)]\n            [else (loop (rest\
    \ word) (first word))])))\n  (find-vowel-from-right word))\n", "  (define (is-vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (get-closest-vowel word)\n    (if (null? word)\n        \"\"\n     \
    \   (let ((c (car word)))\n          (if (is-vowel? c)\n              (get-closest-vowel\
    \ (cdr word))\n              (if (and (not (null? (cdr word)))\n             \
    \          (is-vowel? (cadr word)))\n                  (string c)\n          \
    \        (get-closest-vowel (cdr word)))))))\n  (get-closest-vowel (reverse (string->list\
    \ word))))\n", "  (define (is-vowel? c)\n    (member c '(\"a\" \"e\" \"i\" \"\
    o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\")))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (if (empty? word)\n\
    \        \"\"\n        (if (and (is-consonant? (first word))\n               \
    \  (is-vowel? (second word)))\n            (first word)\n            (find-closest-vowel\
    \ (rest word)))))\n  (find-closest-vowel (reverse word)))\n", "  (define (is-vowel?\
    \ c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n \
    \ (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-vowel word)\n\
    \    (cond [(empty? word) empty]\n          [(is-vowel? (first word)) (first word)]\n\
    \          [else (find-vowel (rest word))]))\n  (define (find-consonant word)\n\
    \    (cond [(empty? word) empty]\n          [(is-consonant? (first word)) (first\
    \ word)]\n          [else (find-consonant (rest word))]))\n  (define (find-vowel-between-consonants\
    \ word)\n    (cond [(empty? word) empty]\n          [(and (is-consonant? (first\
    \ word))\n                (is-vowel? (second word))\n                (is-consonant?\
    \ (third word)))\n           (second word)]\n          [else (find-vowel-between-consonants\
    \ (rest word))]))\n  (cond [(empty? word) empty]\n        [(is-vowel? (first word))\
    \ empty]\n        [(is-consonant? (first word))\n         (cond [(empty? (rest\
    \ word)) empty]\n               [(is-vowel? (second word)) empty]\n          \
    \     [(is-consonant? (second word))\n                (find-vowel-between-consonants\
    \ (rest word))]\n               [else (find-vowel (rest word))])]\n        [else\
    \ empty]))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-closest-vowel word)\n    (if (null? word)\n        \"\"\
    \n        (if (and (is-consonant? (car word))\n                 (is-vowel? (cadr\
    \ word)))\n            (string (cadr word))\n            (find-closest-vowel (cdr\
    \ word)))))\n  (find-closest-vowel word))\n", "  (define (is-vowel? c)\n    (member\
    \ c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant?\
    \ c)\n    (not (is-vowel? c)))\n  (define (find-from-right word)\n    (cond\n\
    \      [(empty? word) empty]\n      [(is-vowel? (first word)) (first word)]\n\
    \      [(is-consonant? (first word)) (find-from-right (rest word))]))\n  (define\
    \ (find-from-left word)\n    (cond\n      [(empty? word) empty]\n      [(is-vowel?\
    \ (last word)) (last word)]\n      [(is-consonant? (last word)) (find-from-left\
    \ (butlast word))]))\n  (cond\n    [(empty? word) empty]\n    [(is-vowel? (first\
    \ word)) empty]\n    [(is-vowel? (last word)) empty]\n    [(is-consonant? (first\
    \ word)) (find-from-right word)]\n    [(is-consonant? (last word)) (find-from-left\
    \ word)]))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (get-closest-vowel word)\n    (if (or (empty? word) (empty?\
    \ (rest word)))\n        \"\"\n        (if (and (is-consonant? (first word))\n\
    \                 (is-vowel? (second word)))\n            (second word)\n    \
    \        (get-closest-vowel (rest word)))))\n  (get-closest-vowel (reverse word)))\n",
  "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define\
    \ (get-closest-vowel-from-right word)\n    (cond\n      [(empty? word) empty]\n\
    \      [(is-vowel? (first word)) empty]\n      [(is-consonant? (first word)) (get-closest-vowel-from-right\
    \ (rest word))]\n      [else (first word)]))\n  (get-closest-vowel-from-right\
    \ (reverse word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(is-vowel? (first word)) (first word)]\n      [(is-consonant?\
    \ (first word)) (find-closest-vowel (rest word))]))\n  (define (find-closest-consonant\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(is-consonant? (first\
    \ word)) (first word)]\n      [(is-vowel? (first word)) (find-closest-consonant\
    \ (rest word))]))\n  (define (find-closest-vowel-between-consonants word)\n  \
    \  (cond\n      [(empty? word) empty]\n      [(is-consonant? (first word))\n \
    \      (cond\n         [(is-vowel? (second word)) (second word)]\n         [(is-consonant?\
    \ (second word)) (find-closest-vowel-between-consonants (rest word))])]\n    \
    \  [(is-vowel? (first word)) (find-closest-vowel-between-consonants (rest word))]))\n\
    \  (find-closest-vowel-between-consonants word))\n", "  (define (is-vowel? c)\n\
    \    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-vowel word)\n \
    \   (cond\n      [(empty? word) empty]\n      [(is-vowel? (first word)) (first\
    \ word)]\n      [else (find-vowel (rest word))]))\n  (define (find-consonant word)\n\
    \    (cond\n      [(empty? word) empty]\n      [(is-consonant? (first word)) (first\
    \ word)]\n      [else (find-consonant (rest word))]))\n  (define (find-vowel-between-consonants\
    \ word)\n    (cond\n      [(empty? word) empty]\n      [(and (is-vowel? (first\
    \ word))\n            (is-consonant? (second word))\n            (is-consonant?\
    \ (third word)))\n       (first word)]\n      [else (find-vowel-between-consonants\
    \ (rest word))]))\n  (cond\n    [(empty? word) empty]\n    [(and (is-vowel? (first\
    \ word))\n          (is-consonant? (second word)))\n     (first word)]\n    [(and\
    \ (is-consonant? (first word))\n          (is-vowel? (second word))\n        \
    \  (is-consonant? (third word)))\n     (second word)]\n    [else (find-vowel-between-consonants\
    \ (rest word))]))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (find-vowel word)\n    (cond ((empty? word) \"\"\
    )\n          ((is-vowel? (first word)) (first word))\n          (else (find-vowel\
    \ (rest word)))))\n  (define (find-consonant word)\n    (cond ((empty? word) \"\
    \")\n          ((is-consonant? (first word)) (first word))\n          (else (find-consonant\
    \ (rest word)))))\n  (define (find-vowel-between-consonants word)\n    (cond ((empty?\
    \ word) \"\")\n          ((is-vowel? (first word)) (find-consonant (rest word)))\n\
    \          ((is-consonant? (first word)) (find-vowel (rest word)))\n         \
    \ (else (find-vowel-between-consonants (rest word)))))\n  (find-vowel-between-consonants\
    \ word))\n", "  (define (is-consonant? c)\n    (not (member c '(\"a\" \"e\" \"\
    i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\"))))\n  (define (is-vowel? c)\n \
    \   (not (is-consonant? c)))\n  (define (is-first-consonant? word)\n    (is-consonant?\
    \ (string-ref word 0)))\n  (define (is-last-consonant? word)\n    (is-consonant?\
    \ (string-ref word (- (string-length word) 1))))\n  (define (is-first-vowel? word)\n\
    \    (is-vowel? (string-ref word 0)))\n  (define (is-last-vowel? word)\n    (is-vowel?\
    \ (string-ref word (- (string-length word) 1))))\n  (define (is-first-and-last-consonant?\
    \ word)\n    (and (is-first-consonant? word) (is-last-consonant? word)))\n  (define\
    \ (is-first-and-last-vowel? word)\n    (and (is-first-vowel? word) (is-last-vowel?\
    \ word)))\n  (define (is-first-or-last-consonant? word)\n    (or (is-first-consonant?\
    \ word) (is-last-consonant? word)))\n  (define (is-first-or-last-vowel? word)\n\
    \    (or (is-first-vowel? word) (is-last-vowel? word)))\n  (define (is-first-and-last-vowel-or-consonant?\
    \ word)\n    (or (is-first-and-last-vowel? word) (is-first-and-last-consonant?\
    \ word)))\n  (define (is-first-or-last-vowel-or-consonant? word)\n    (or (is-first-or-last-vowel?\
    \ word) (is-first-or-last-consonant?", "  (define (get-vowel-index word)\n   \
    \ (define (get-vowel-index-helper word index)\n      (if (empty? word)\n     \
    \     index\n          (if (or (equal? (first word) \"a\")\n                 \
    \ (equal? (first word) \"e\")\n                  (equal? (first word) \"i\")\n\
    \                  (equal? (first word) \"o\")\n                  (equal? (first\
    \ word) \"u\"))\n              (get-vowel-index-helper (rest word) (+ index 1))\n\
    \              (get-vowel-index-helper (rest word) index))))\n    (get-vowel-index-helper\
    \ word 0))\n  (define (get-consonant-index word)\n    (define (get-consonant-index-helper\
    \ word index)\n      (if (empty? word)\n          index\n          (if (or (equal?\
    \ (first word) \"a\")\n                  (equal? (first word) \"e\")\n       \
    \           (equal? (first word) \"i\")\n                  (equal? (first word)\
    \ \"o\")\n                  (equal? (first word) \"u\"))\n              (get-consonant-index-helper\
    \ (rest word) index)\n              (get-consonant-index-helper (rest word) (+\
    \ index 1)))))\n    (get-consonant-index-helper word 0))\n  (define (get-closest-vowel-helper\
    \ word index)\n    (if (empty? word)\n        \"\"\n        (if (or (equal? (first\
    \ word) \"a\")\n                (equal? (first word) \"e\")\n                (equal?\
    \ (first word) \"i\")\n                (equal? (first word) \"o\")\n         \
    \       (equal? (first word) \"u\"))\n            (if (= index 0)\n          \
    \      (get-closest-vowel-helper (rest word) (+ index 1))\n                (first\
    \ word))\n            (get-closest-vowel-helper (rest word) (+ index 1)))))\n\
    \  (if (= (get-vowel-index word) (get-consonant-index word))\n", "  (define (is-vowel?\
    \ c)\n    (member c '(\"a\" \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"\
    U\")))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (is-consonant-vowel-consonant?\
    \ word)\n    (and (is-consonant? (string-ref word 0))\n         (is-vowel? (string-ref\
    \ word 1))\n         (is-consonant? (string-ref word 2))))\n  (define (find-closest-vowel\
    \ word)\n    (if (is-consonant-vowel-consonant? word)\n        (string-ref word\
    \ 1)\n        (find-closest-vowel (substring word 1))))\n  (if (is-consonant-vowel-consonant?\
    \ word)\n      (string-ref word 1)\n      (find-closest-vowel (substring word\
    \ 1))))\n", "  (define (get-closest-vowel-iter word i)\n    (cond\n      [(= i\
    \ (- (string-length word) 1)) \"\"]\n      [(member (string-ref word i) '(\"a\"\
    \ \"e\" \"i\" \"o\" \"u\" \"A\" \"E\" \"I\" \"O\" \"U\"))\n       (string-ref\
    \ word i)]\n      [else (get-closest-vowel-iter word (+ i 1))]))\n  (get-closest-vowel-iter\
    \ word 0))\n"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
