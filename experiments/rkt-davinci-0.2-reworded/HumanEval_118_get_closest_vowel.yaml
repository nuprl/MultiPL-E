name: HumanEval_118_get_closest_vowel
language: rkt
prompt: "#lang racket\n\n;; You are given a word. Your task is to find the closest\
  \ vowel that stands between \n;; two consonants from the right side of the word\
  \ (case sensitive).\n;; Vowels in the beginning and ending doesn't count. Return\
  \ empty string if you didn't\n;; find any vowel met the above condition. \n;; You\
  \ may assume that the given string contains English letter only.\n;; Example:\n\
  ;; >>> (get_closest_vowel \"yogurt\")\n;; \"u\"\n;; >>> (get_closest_vowel \"FULL\"\
  )\n;; \"U\"\n;; >>> (get_closest_vowel \"quick\")\n;; \"\"\n;; >>> (get_closest_vowel\
  \ \"ab\")\n;; \"\"\n(define (get_closest_vowel word)\n"
tests: "(require rackunit)\n\n(define (test-humaneval) \n\n  (let (( candidate get_closest_vowel))\n\
  \    (check-equal? (candidate \"yogurt\") \"u\")\n    (check-equal? (candidate \"\
  full\") \"u\")\n    (check-equal? (candidate \"easy\") \"\")\n    (check-equal?\
  \ (candidate \"eAsy\") \"\")\n    (check-equal? (candidate \"ali\") \"\")\n    (check-equal?\
  \ (candidate \"bad\") \"a\")\n    (check-equal? (candidate \"most\") \"o\")\n  \
  \  (check-equal? (candidate \"ab\") \"\")\n    (check-equal? (candidate \"ba\")\
  \ \"\")\n    (check-equal? (candidate \"quick\") \"\")\n    (check-equal? (candidate\
  \ \"anime\") \"i\")\n    (check-equal? (candidate \"Asia\") \"\")\n    (check-equal?\
  \ (candidate \"Above\") \"o\")\n))\n\n(test-humaneval)"
completions: ["  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c\
    \ #\\e)\n        (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\\
    u)))\n  (define (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper\
    \ word)\n    (if (empty? word)\n        \"\"\n        (if (is-vowel? (first word))\n\
    \            (if (is-consonant? (second word))\n                (string (first\
    \ word))\n                (get-closest-vowel-helper (rest word)))\n          \
    \  (get-closest-vowel-helper (rest word)))))\n  (get-closest-vowel-helper (reverse\
    \ word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (get-closest-vowel-from-right word)\n    (let loop ([word (string-reverse\
    \ word)]\n               [prev-c #\\])\n               [prev-vowel #\\])\n   \
    \   (if (string-empty? word)\n          (string-reverse (string prev-vowel))\n\
    \          (let ([c (string-ref word 0)])\n            (if (and (is-consonant?\
    \ prev-c)\n                     (is-vowel? c))\n                (loop (substring\
    \ word 1) c c)\n                (loop (substring word 1) c prev-vowel))))))\n\
    \  (get-closest-vowel-from-right word))\n", "  (define (get-closest-vowel-iter\
    \ word closest-vowel)\n    (cond\n      [(empty? word) closest-vowel]\n      [(member\
    \ (first word) '(\"a\" \"e\" \"i\" \"o\" \"u\"))\n       (get-closest-vowel-iter\
    \ (rest word) (first word))]\n      [else (get-closest-vowel-iter (rest word)\
    \ closest-vowel)]))\n  (get-closest-vowel-iter (reverse word) \"\"))\n", "  (define\
    \ (get-closest-vowel-iter word i)\n    (cond\n      [(= i (string-length word))\
    \ \"\"]\n      [(and (char-vowel? (string-ref word i)) (char-consonant? (string-ref\
    \ word (- i 1)))) (string-ref word i)]\n      [else (get-closest-vowel-iter word\
    \ (+ i 1))]))\n  (get-closest-vowel-iter word 0))\n", "  (define (is-vowel? c)\n\
    \    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n \
    \       (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is-consonant? c)\n\
    \    (not (is-vowel? c)))\n  (define (get-closest-vowel-helper word)\n    (if\
    \ (or (null? word)\n            (null? (cdr word)))\n        \"\"\n        (if\
    \ (and (is-consonant? (car word))\n                 (is-vowel? (cadr word)))\n\
    \            (string (cadr word))\n            (get-closest-vowel-helper (cdr\
    \ word)))))\n  (get-closest-vowel-helper (string-&gt;list word)))\n</code>\n",
  "  (define (is-vowel? c)\n    (or (char=? c #\\a) (char=? c #\\e) (char=? c #\\\
    i) (char=? c #\\o) (char=? c #\\u)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (get-closest-vowel-helper word)\n    (cond [(empty? word) empty]\n\
    \          [(is-vowel? (first word)) (first word)]\n          [(is-consonant?\
    \ (first word)) (get-closest-vowel-helper (rest word))]))\n  (get-closest-vowel-helper\
    \ (reverse word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (find-closest-vowel word)\n    (cond\n      [(empty?\
    \ word) empty]\n      [(is-vowel? (first word)) (first word)]\n      [(is-consonant?\
    \ (first word)) (find-closest-vowel (rest word))]))\n  (find-closest-vowel (reverse\
    \ word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-closest-vowel word)\n    (let loop ([word (string-reverse\
    \ word)]\n               [prev-is-consonant? #f]\n               [prev-is-vowel?\
    \ #f])\n      (cond [(empty? word) \"\"]\n            [(is-vowel? (first word))\n\
    \             (if prev-is-consonant?\n                 (string (first word))\n\
    \                 (loop (rest word) #f #t))]\n            [(is-consonant? (first\
    \ word))\n             (if prev-is-vowel?\n                 (string (first word))\n\
    \                 (loop (rest word) #t #f))])))\n  (find-closest-vowel word))\n",
  "  (define (is-vowel? c)\n    (or (char=? c #\\a)\n        (char=? c #\\e)\n   \
    \     (char=? c #\\i)\n        (char=? c #\\o)\n        (char=? c #\\u)))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n\
    \    (if (or (empty? word)\n            (empty? (rest word)))\n        \"\"\n\
    \        (if (and (is-consonant? (first word))\n                 (is-vowel? (second\
    \ word)))\n            (string (second word))\n            (find-closest-vowel\
    \ (rest word)))))\n  (find-closest-vowel (reverse (string->list word))))\n", " \
    \ (let ([vowels (regexp-match* #rx\"[aeiou]\" word)])\n    (if (empty? vowels)\n\
    \        \"\"\n        (let ([consonants (regexp-match* #rx\"[^aeiou]\" word)])\n\
    \          (if (empty? consonants)\n              \"\"\n              (let ([last-consonant\
    \ (last consonants)])\n                (let ([last-vowel (last vowels)])\n   \
    \               (if (&gt; (string-length last-vowel) (string-length last-consonant))\n\
    \                      \"\"\n                      (string-ref last-vowel 0)))))))))\n\
    </code>\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-closest-vowel word)\n    (if (or (null? word) (null? (cdr\
    \ word)))\n        \"\"\n        (if (and (is-consonant? (car word)) (is-vowel?\
    \ (cadr word)))\n            (string (cadr word))\n            (find-closest-vowel\
    \ (cdr word)))))\n  (find-closest-vowel word))\n", "  (define (is-vowel? c)\n\
    \    (or (char=? c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n \
    \       (char=? c #\\o)\n        (char=? c #\\u)))\n  (define (is-consonant? c)\n\
    \    (not (is-vowel? c)))\n  (define (get-closest-vowel-from-right word)\n   \
    \ (if (or (null? word) (null? (cdr word)))\n        \"\"\n        (if (and (is-consonant?\
    \ (car word)) (is-vowel? (cadr word)))\n            (string (cadr word))\n   \
    \         (get-closest-vowel-from-right (cdr word)))))\n  (get-closest-vowel-from-right\
    \ (reverse (string->list word))))\n", "  (define (is-vowel? c)\n    (or (char=?\
    \ c #\\a)\n        (char=? c #\\e)\n        (char=? c #\\i)\n        (char=? c\
    \ #\\o)\n        (char=? c #\\u)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-closest-vowel word)\n    (if (or (null? word) (null? (cdr\
    \ word)))\n        \"\"\n        (if (and (is-consonant? (car word))\n       \
    \          (is-vowel? (cadr word)))\n            (string (cadr word))\n      \
    \      (find-closest-vowel (cdr word)))))\n  (find-closest-vowel (string-reverse\
    \ word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (get-closest-vowel-helper word)\n    (cond\n      [(empty? word)\
    \ empty]\n      [(is-vowel? (first word)) (first word)]\n      [(is-consonant?\
    \ (first word)) (get-closest-vowel-helper (rest word))]))\n  (get-closest-vowel-helper\
    \ (reverse word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\\
    i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (get-closest-vowel-helper word)\n    (cond\n    \
    \  [(empty? word) empty]\n      [(is-vowel? (first word)) (first word)]\n    \
    \  [(is-consonant? (first word)) (get-closest-vowel-helper (rest word))]))\n \
    \ (get-closest-vowel-helper (reverse word)))\n", "  (define (is-vowel? c)\n  \
    \  (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U)))\n  (define\
    \ (is-consonant? c)\n    (not (is-vowel? c)))\n  (define (find-closest-vowel word)\n\
    \    (cond ((null? word) \"\")\n          ((and (is-vowel? (car word))\n     \
    \           (is-consonant? (cadr word)))\n           (car word))\n          (else\
    \ (find-closest-vowel (cdr word)))))\n  (find-closest-vowel word))\n", "  (define\
    \ (is_vowel? ch)\n    (member ch '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\\
    O #\\U)))\n  (define (is_consonant? ch)\n    (not (is_vowel? ch)))\n  (define\
    \ (find-closest-vowel word)\n    (cond\n      [(empty? word) empty]\n      [(and\
    \ (is_vowel? (first word)) (is_consonant? (second word))) (first word)]\n    \
    \  [else (find-closest-vowel (rest word))]))\n  (find-closest-vowel word))\n",
  "  (define (is_vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\\
    I #\\O #\\U)))\n  (define (is_consonant? c)\n    (not (is_vowel? c)))\n  (define\
    \ (get-closest-vowel-helper word)\n    (cond\n      [(empty? word) empty]\n  \
    \    [(is_vowel? (first word)) (first word)]\n      [(is_consonant? (first word))\
    \ (get-closest-vowel-helper (rest word))]))\n  (get-closest-vowel-helper (reverse\
    \ word)))\n", "  (define (is-vowel? c)\n    (member c '(#\\a #\\e #\\i #\\o #\\\
    u #\\A #\\E #\\I #\\O #\\U)))\n  (define (is-consonant? c)\n    (not (is-vowel?\
    \ c)))\n  (define (find-closest-vowel word)\n    (cond\n      [(empty? word) empty]\n\
    \      [(is-vowel? (first word)) (first word)]\n      [(is-consonant? (first word))\
    \ (find-closest-vowel (rest word))]))\n  (define (find-closest-consonant word)\n\
    \    (cond\n      [(empty? word) empty]\n      [(is-consonant? (first word)) (first\
    \ word)]\n      [(is-vowel? (first word)) (find-closest-consonant (rest word))]))\n\
    \  (cond\n    [(empty? word) empty]\n    [(is-vowel? (first word)) empty]\n  \
    \  [(is-consonant? (first word))\n     (cond\n       [(empty? (rest word)) empty]\n\
    \       [(is-vowel? (second word)) (second word)]\n       [(is-consonant? (second\
    \ word))\n        (cond\n          [(empty? (rest (rest word))) empty]\n     \
    \     [(is-vowel? (third word)) (third word)]\n          [(is-consonant? (third\
    \ word))\n           (cond\n             [(empty? (rest (rest (rest word)))) empty]\n\
    \             [(is-vowel? (fourth word)) (fourth word)]\n             [(is-consonant?\
    \ (fourth word))\n              (cond\n                [(empty? (rest (rest (rest\
    \ (rest word))))) empty]\n                [(is-vowel? (fifth word)) (fifth word)]\n\
    \                [(is-consonant? (fifth word))\n                 (cond\n     \
    \              [(empty? (rest (rest (rest (rest (rest word)))))) empty]\n    \
    \               [(is-vowel? (sixth word)) (sixth word)]\n                   [(is-consonant?",
  "  (define vowels '(#\\a #\\e #\\i #\\o #\\u #\\A #\\E #\\I #\\O #\\U))\n  (define\
    \ (is-vowel? c)\n    (member c vowels))\n  (define (is-consonant? c)\n    (not\
    \ (is-vowel? c)))\n  (define (is-consonant-vowel-consonant? word)\n    (and (is-consonant?\
    \ (string-ref word 0))\n         (is-vowel? (string-ref word 1))\n         (is-consonant?\
    \ (string-ref word 2))))\n  (define (is-consonant-vowel? word)\n    (and (is-consonant?\
    \ (string-ref word 0))\n         (is-vowel? (string-ref word 1))))\n  (define\
    \ (is-vowel-consonant? word)\n    (and (is-vowel? (string-ref word 0))\n     \
    \    (is-consonant? (string-ref word 1))))\n  (define (is-consonant-vowel-consonant-vowel?\
    \ word)\n    (and (is-consonant? (string-ref word 0))\n         (is-vowel? (string-ref\
    \ word 1))\n         (is-consonant? (string-ref word 2))\n         (is-vowel?\
    \ (string-ref word 3))))\n  (define (is-consonant-vowel-consonant-vowel-consonant?\
    \ word)\n    (and (is-consonant? (string-ref word 0))\n         (is-vowel? (string-ref\
    \ word 1))\n         (is-consonant? (string-ref word 2))\n         (is-vowel?\
    \ (string-ref word 3))\n         (is-consonant? (string-ref word 4))))\n  (cond\n\
    \    [(is-consonant-vowel-consonant? word) (string-ref word 1)]\n    [(is-vowel-consonant?\
    \ word) (string-ref word 0)]"]
stop_tokens:
- "\n(define "
- "\n#|"
- "\n;"
- "\n("
